
B-L475E-IOT01_GenericMQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 UNINIT_FIXED_LOC 00002a38  08064000  08064000  00054000  2**11
                  ALLOC
  1 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000279e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ba38  08027b78  08027b78  00037b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080335b0  080335b0  00050818  2**0
                  CONTENTS
  5 .ARM          00000008  080335b0  080335b0  000435b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080335b8  080335b8  00050818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  080335b8  080335b8  000435b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080335c0  080335c0  000435c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000818  20000000  080335c8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000011c4  20000818  08033de0  00050818  2**2
                  ALLOC
 11 ._user_heap_stack 00012004  200019dc  08033de0  000519dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050818  2**0
                  CONTENTS, READONLY
 13 .debug_info   000b63f5  00000000  00000000  00050848  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00013cb4  00000000  00000000  00106c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0004dc3a  00000000  00000000  0011a8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003968  00000000  00000000  00168530  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00005978  00000000  00000000  0016be98  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003e445  00000000  00000000  00171810  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0004bfa8  00000000  00000000  001afc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00121b6d  00000000  00000000  001fbbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0031d76a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cca8  00000000  00000000  0031d7e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000818 	.word	0x20000818
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08027b60 	.word	0x08027b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000081c 	.word	0x2000081c
 80001cc:	08027b60 	.word	0x08027b60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9bd 	b.w	8000fa4 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <TimingSystemGetSystemTime>:
 * @brief  Get RTC time
* @param  void
* @retval time_t : time retrieved from RTC
 */
time_t 	TimingSystemGetSystemTime(void)
{
 8000fa8:	b530      	push	{r4, r5, lr}
  struct tm*    pCalendar;
  
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;
  returnTime = 0;  
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 8000faa:	4d1b      	ldr	r5, [pc, #108]	; (8001018 <TimingSystemGetSystemTime+0x70>)
{
 8000fac:	b087      	sub	sp, #28
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f021 f854 	bl	802205c <gmtime>

  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 8000fb4:	2200      	movs	r2, #0
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 8000fb6:	4604      	mov	r4, r0
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 8000fb8:	a901      	add	r1, sp, #4
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <TimingSystemGetSystemTime+0x74>)
 8000fbc:	f009 fe44 	bl	800ac48 <HAL_RTC_GetTime>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	b118      	cbz	r0, 8000fcc <TimingSystemGetSystemTime+0x24>
  returnTime = 0;  
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	2100      	movs	r1, #0
#endif
    returnTime        = mktime(pCalendar);
    timeSyncSystem    = returnTime;
  }
  return returnTime;
}
 8000fc8:	b007      	add	sp, #28
 8000fca:	bd30      	pop	{r4, r5, pc}
     (HAL_RTC_GetDate(&hrtc,&sdatestructure,FORMAT_BIN)==HAL_OK)) {
 8000fcc:	4669      	mov	r1, sp
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <TimingSystemGetSystemTime+0x74>)
 8000fd0:	f009 fe61 	bl	800ac96 <HAL_RTC_GetDate>
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d1f5      	bne.n	8000fc4 <TimingSystemGetSystemTime+0x1c>
    pCalendar->tm_year           = sdatestructure.Year +100;
 8000fd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    pCalendar->tm_isdst          = 0;
 8000fdc:	6220      	str	r0, [r4, #32]
    pCalendar->tm_year           = sdatestructure.Year +100;
 8000fde:	3364      	adds	r3, #100	; 0x64
 8000fe0:	6163      	str	r3, [r4, #20]
    pCalendar->tm_mon            = sdatestructure.Month-1;
 8000fe2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6123      	str	r3, [r4, #16]
    pCalendar->tm_mday           = sdatestructure.Date;
 8000fea:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000fee:	60e3      	str	r3, [r4, #12]
    pCalendar->tm_wday           = sdatestructure.WeekDay - 1;
 8000ff0:	f89d 3000 	ldrb.w	r3, [sp]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	61a3      	str	r3, [r4, #24]
    pCalendar->tm_hour           = stimestructure.Hours;
 8000ff8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ffc:	60a3      	str	r3, [r4, #8]
    pCalendar->tm_min            = stimestructure.Minutes;
 8000ffe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001002:	6063      	str	r3, [r4, #4]
    pCalendar->tm_sec            = stimestructure.Seconds;
 8001004:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001008:	6023      	str	r3, [r4, #0]
    returnTime        = mktime(pCalendar);
 800100a:	4620      	mov	r0, r4
 800100c:	f021 fa72 	bl	80224f4 <mktime>
    timeSyncSystem    = returnTime;
 8001010:	e9c5 0100 	strd	r0, r1, [r5]
  return returnTime;
 8001014:	e7d8      	b.n	8000fc8 <TimingSystemGetSystemTime+0x20>
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000
 800101c:	20001170 	.word	0x20001170

08001020 <dialog_ask>:
  * @brief  Ask yes/no question.
  * @param  None
  * @retval None
  */
bool dialog_ask(char *s)
{
 8001020:	b570      	push	{r4, r5, r6, lr}
  char console_yn;
  do
  {
    printf("%s",s);
 8001022:	4e0b      	ldr	r6, [pc, #44]	; (8001050 <dialog_ask+0x30>)
{
 8001024:	4605      	mov	r5, r0
    printf("%s",s);
 8001026:	4629      	mov	r1, r5
 8001028:	4630      	mov	r0, r6
 800102a:	f022 fa6f 	bl	802350c <iprintf>
    console_yn= getchar();
 800102e:	f021 f803 	bl	8022038 <getchar>
 8001032:	b2c4      	uxtb	r4, r0
    printf("\b");
 8001034:	2008      	movs	r0, #8
 8001036:	f022 fa81 	bl	802353c <putchar>
  }
  while((console_yn != 'y') && (console_yn != 'n') && (console_yn != '\n'));
 800103a:	2c79      	cmp	r4, #121	; 0x79
 800103c:	d005      	beq.n	800104a <dialog_ask+0x2a>
 800103e:	2c6e      	cmp	r4, #110	; 0x6e
 8001040:	d001      	beq.n	8001046 <dialog_ask+0x26>
 8001042:	2c0a      	cmp	r4, #10
 8001044:	d1ef      	bne.n	8001026 <dialog_ask+0x6>
  if (console_yn == 'y') return true;
  return false;
 8001046:	2000      	movs	r0, #0
 8001048:	e000      	b.n	800104c <dialog_ask+0x2c>
  if (console_yn == 'y') return true;
 800104a:	2001      	movs	r0, #1
}
 800104c:	bd70      	pop	{r4, r5, r6, pc}
 800104e:	bf00      	nop
 8001050:	08030fee 	.word	0x08030fee

08001054 <CLOUD_Error_Handler>:
  * @param  None
  * @retval None
  */
void CLOUD_Error_Handler(int errorCode)
{
  switch (errorCode)
 8001054:	3008      	adds	r0, #8
{
 8001056:	b508      	push	{r3, lr}
  switch (errorCode)
 8001058:	2806      	cmp	r0, #6
 800105a:	d808      	bhi.n	800106e <CLOUD_Error_Handler+0x1a>
 800105c:	e8df f000 	tbb	[pc, r0]
 8001060:	12141604 	.word	0x12141604
 8001064:	0e10      	.short	0x0e10
 8001066:	04          	.byte	0x04
 8001067:	00          	.byte	0x00
  {
    case (CLOUD_DEMO_C2C_INITIALIZATION_ERROR):
    case (CLOUD_DEMO_WIFI_INITIALIZATION_ERROR):
    {
      printf("Error initializing the module!\n");
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <CLOUD_Error_Handler+0x3c>)
      
      break;
    }
    case (CLOUD_DEMO_TIMEDATE_ERROR):
    {
      printf("Error initializing the RTC from the network time!\n");
 800106a:	f022 fad7 	bl	802361c <puts>
    }
  }
  
  while (1)
  {
    BSP_LED_Toggle(LED_GREEN);
 800106e:	2000      	movs	r0, #0
 8001070:	f003 ffce 	bl	8005010 <BSP_LED_Toggle>
    HAL_Delay(200);
 8001074:	20c8      	movs	r0, #200	; 0xc8
 8001076:	f007 fcf3 	bl	8008a60 <HAL_Delay>
 800107a:	e7f8      	b.n	800106e <CLOUD_Error_Handler+0x1a>
      printf("Error detecting module!\n");
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <CLOUD_Error_Handler+0x40>)
 800107e:	e7f4      	b.n	800106a <CLOUD_Error_Handler+0x16>
      printf("Error connecting to AP!\n");
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <CLOUD_Error_Handler+0x44>)
 8001082:	e7f2      	b.n	800106a <CLOUD_Error_Handler+0x16>
      printf("Error retrieving IP address!\n");
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <CLOUD_Error_Handler+0x48>)
 8001086:	e7f0      	b.n	800106a <CLOUD_Error_Handler+0x16>
      printf("Error connecting to Cloud!\n");
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <CLOUD_Error_Handler+0x4c>)
 800108a:	e7ee      	b.n	800106a <CLOUD_Error_Handler+0x16>
      printf("Error initializing the RTC from the network time!\n");
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <CLOUD_Error_Handler+0x50>)
 800108e:	e7ec      	b.n	800106a <CLOUD_Error_Handler+0x16>
 8001090:	0802d088 	.word	0x0802d088
 8001094:	0802d0a7 	.word	0x0802d0a7
 8001098:	0802d0bf 	.word	0x0802d0bf
 800109c:	0802d0d7 	.word	0x0802d0d7
 80010a0:	0802d0f4 	.word	0x0802d0f4
 80010a4:	0802d10f 	.word	0x0802d10f

080010a8 <platform_init>:


const firmware_version_t version = { FW_VERSION_NAME, FW_VERSION_MAJOR, FW_VERSION_MINOR, FW_VERSION_PATCH, FW_VERSION_DATE};

int platform_init(void)
{
 80010a8:	b510      	push	{r4, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
  net_ipaddr_t ipAddr;
  net_macaddr_t macAddr;
  const firmware_version_t  *fw_version=&version;;
  unsigned int random_number = 0;
 80010ac:	a90c      	add	r1, sp, #48	; 0x30
 80010ae:	2300      	movs	r3, #0
 80010b0:	f841 3d20 	str.w	r3, [r1, #-32]!
#ifdef HEAP_DEBUG
  stack_measure_prologue();
#endif
  
  /* Initialize the seed of the stdlib rand() SW implementation from the RNG. */
  if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) &random_number) == HAL_OK)
 80010b4:	4859      	ldr	r0, [pc, #356]	; (800121c <platform_init+0x174>)
 80010b6:	f009 fc22 	bl	800a8fe <HAL_RNG_GenerateRandomNumber>
 80010ba:	b910      	cbnz	r0, 80010c2 <platform_init+0x1a>
  {
    srand(random_number);
 80010bc:	9804      	ldr	r0, [sp, #16]
 80010be:	f022 fab5 	bl	802362c <srand>
  }

  printf("\n");
 80010c2:	200a      	movs	r0, #10
 80010c4:	f022 fa3a 	bl	802353c <putchar>
  printf("*************************************************************\n");
 80010c8:	4855      	ldr	r0, [pc, #340]	; (8001220 <platform_init+0x178>)
  printf("*************************************************************\n");

  
  printf("\n*** Board personalization ***\n\n");
  /* Network initialization */
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 80010ca:	4c56      	ldr	r4, [pc, #344]	; (8001224 <platform_init+0x17c>)
  printf("*************************************************************\n");
 80010cc:	f022 faa6 	bl	802361c <puts>
  printf("***   STM32 IoT Discovery kit for                         \n");
 80010d0:	4855      	ldr	r0, [pc, #340]	; (8001228 <platform_init+0x180>)
 80010d2:	f022 faa3 	bl	802361c <puts>
  printf("***      STM32F413/STM32F769/STM32L475/STM32L496 MCU      \n");
 80010d6:	4855      	ldr	r0, [pc, #340]	; (800122c <platform_init+0x184>)
 80010d8:	f022 faa0 	bl	802361c <puts>
  printf("***   %s Cloud Connectivity Demonstration                 \n",fw_version->name);
 80010dc:	4954      	ldr	r1, [pc, #336]	; (8001230 <platform_init+0x188>)
 80010de:	4855      	ldr	r0, [pc, #340]	; (8001234 <platform_init+0x18c>)
 80010e0:	f022 fa14 	bl	802350c <iprintf>
  printf("***   FW version %d.%d.%d - %s      \n",
 80010e4:	4b54      	ldr	r3, [pc, #336]	; (8001238 <platform_init+0x190>)
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2300      	movs	r3, #0
 80010ea:	461a      	mov	r2, r3
 80010ec:	2101      	movs	r1, #1
 80010ee:	4853      	ldr	r0, [pc, #332]	; (800123c <platform_init+0x194>)
 80010f0:	f022 fa0c 	bl	802350c <iprintf>
  printf("*************************************************************\n");
 80010f4:	484a      	ldr	r0, [pc, #296]	; (8001220 <platform_init+0x178>)
 80010f6:	f022 fa91 	bl	802361c <puts>
  printf("\n*** Board personalization ***\n\n");
 80010fa:	4851      	ldr	r0, [pc, #324]	; (8001240 <platform_init+0x198>)
 80010fc:	f022 fa8e 	bl	802361c <puts>
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <platform_init+0x19c>)
 8001102:	2101      	movs	r1, #1
 8001104:	4620      	mov	r0, r4
 8001106:	f000 fd77 	bl	8001bf8 <net_init>
 800110a:	b110      	cbz	r0, 8001112 <platform_init+0x6a>
      case NET_IP_V4:
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
        break;
      case NET_IP_V6:
      default:
        CLOUD_Error_Handler(CLOUD_DEMO_IP_ADDRESS_ERROR);
 800110c:	f06f 0004 	mvn.w	r0, #4
 8001110:	e043      	b.n	800119a <platform_init+0xf2>
  if (net_get_mac_address(hnet, &macAddr) == NET_OK)
 8001112:	a905      	add	r1, sp, #20
 8001114:	6820      	ldr	r0, [r4, #0]
 8001116:	f000 fe1d 	bl	8001d54 <net_get_mac_address>
 800111a:	2800      	cmp	r0, #0
 800111c:	d13b      	bne.n	8001196 <platform_init+0xee>
    msg_info("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n",
 800111e:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8001122:	9002      	str	r0, [sp, #8]
 8001124:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8001128:	9001      	str	r0, [sp, #4]
 800112a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800112e:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8001132:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001136:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800113a:	9000      	str	r0, [sp, #0]
 800113c:	4842      	ldr	r0, [pc, #264]	; (8001248 <platform_init+0x1a0>)
 800113e:	f022 f9e5 	bl	802350c <iprintf>
  HAL_Delay(500);
 8001142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001146:	f007 fc8b 	bl	8008a60 <HAL_Delay>
  msg_info("Retrieving the IP address.\n");
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <platform_init+0x1a4>)
 800114c:	f022 fa66 	bl	802361c <puts>
  if (net_get_ip_address(hnet, &ipAddr) != NET_OK)
 8001150:	a907      	add	r1, sp, #28
 8001152:	6820      	ldr	r0, [r4, #0]
 8001154:	f000 fdce 	bl	8001cf4 <net_get_ip_address>
 8001158:	2800      	cmp	r0, #0
 800115a:	d1d7      	bne.n	800110c <platform_init+0x64>
    switch(ipAddr.ipv)
 800115c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1d3      	bne.n	800110c <platform_init+0x64>
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
 8001164:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 8001168:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800116c:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8001170:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8001174:	9000      	str	r0, [sp, #0]
 8001176:	4836      	ldr	r0, [pc, #216]	; (8001250 <platform_init+0x1a8>)
 8001178:	f022 f9c8 	bl	802350c <iprintf>
  /* Security and cloud parameters definition */
  /* Define, or allow to update if the user button is pushed. */
  
  
  
  skip_reconf = (checkTLSRootCA() == 0)
 800117c:	f000 fb14 	bl	80017a8 <checkTLSRootCA>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
    && (checkIoTDeviceConfig() == 0);
 8001180:	b168      	cbz	r0, 800119e <platform_init+0xf6>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    if ((checkIoTDeviceConfig() != 0) || dialog_ask("Do you want to update your IoT device connection parameters? (y/n)\n"))
 8001182:	f000 fc4d 	bl	8001a20 <checkIoTDeviceConfig>
 8001186:	bb48      	cbnz	r0, 80011dc <platform_init+0x134>
 8001188:	4832      	ldr	r0, [pc, #200]	; (8001254 <platform_init+0x1ac>)
 800118a:	f7ff ff49 	bl	8001020 <dialog_ask>
 800118e:	bb28      	cbnz	r0, 80011dc <platform_init+0x134>
      {
        msg_error("Failed configuring the IoT device.\n");
      }
    }
#if defined(USE_MBED_TLS) || (!defined(USE_CLEAR_TIMEDATE))
    updateTLSCredentials();
 8001190:	f000 fb3a 	bl	8001808 <updateTLSCredentials>
 8001194:	e013      	b.n	80011be <platform_init+0x116>
    CLOUD_Error_Handler(CLOUD_DEMO_MAC_ADDRESS_ERROR);
 8001196:	f06f 0002 	mvn.w	r0, #2
 800119a:	f7ff ff5b 	bl	8001054 <CLOUD_Error_Handler>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
 800119e:	f000 fb1b 	bl	80017d8 <checkTLSDeviceConfig>
 80011a2:	b9b0      	cbnz	r0, 80011d2 <platform_init+0x12a>
    && (checkIoTDeviceConfig() == 0);
 80011a4:	f000 fc3c 	bl	8001a20 <checkIoTDeviceConfig>
  if (skip_reconf == true)
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d1ea      	bne.n	8001182 <platform_init+0xda>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update "
 80011ac:	482a      	ldr	r0, [pc, #168]	; (8001258 <platform_init+0x1b0>)
 80011ae:	f022 fa35 	bl	802361c <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 80011b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80011b6:	f002 ff9d 	bl	80040f4 <Button_WaitForPush>
  if (skip_reconf == false)
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d1e1      	bne.n	8001182 <platform_init+0xda>
#endif
  }
  /* End of security and cloud parameters definition */
  
  msg_info("Setting the RTC from the network time.\n");
 80011be:	4827      	ldr	r0, [pc, #156]	; (800125c <platform_init+0x1b4>)
 80011c0:	f022 fa2c 	bl	802361c <puts>
#ifdef CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE
  if (setRTCTimeDateFromNetwork(true) != TD_OK)
 80011c4:	2001      	movs	r0, #1
 80011c6:	f001 fe1d 	bl	8002e04 <setRTCTimeDateFromNetwork>
 80011ca:	b1a8      	cbz	r0, 80011f8 <platform_init+0x150>
#else   /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
    if ( (setRTCTimeDateFromNetwork(false) != TD_OK) && (setRTCTimeDateFromNetwork(true) != TD_OK) )
#endif  /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
  
  {
    CLOUD_Error_Handler(CLOUD_DEMO_TIMEDATE_ERROR);
 80011cc:	f06f 0006 	mvn.w	r0, #6
 80011d0:	e7e3      	b.n	800119a <platform_init+0xf2>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
 80011d2:	f002 fabf 	bl	8003754 <app_needs_device_keypair>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d1d3      	bne.n	8001182 <platform_init+0xda>
 80011da:	e7e3      	b.n	80011a4 <platform_init+0xfc>
      if (cloud_device_enter_credentials() != 0)
 80011dc:	f002 f996 	bl	800350c <cloud_device_enter_credentials>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d0d5      	beq.n	8001190 <platform_init+0xe8>
        msg_error("Failed configuring the IoT device.\n");
 80011e4:	f44f 7284 	mov.w	r2, #264	; 0x108
 80011e8:	491d      	ldr	r1, [pc, #116]	; (8001260 <platform_init+0x1b8>)
 80011ea:	481e      	ldr	r0, [pc, #120]	; (8001264 <platform_init+0x1bc>)
 80011ec:	f022 f98e 	bl	802350c <iprintf>
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <platform_init+0x1c0>)
 80011f2:	f022 fa13 	bl	802361c <puts>
 80011f6:	e7cb      	b.n	8001190 <platform_init+0xe8>
#if defined(RFU) && !defined(FIREWALL_MBEDLIB)
    updateFirmwareVersion();
#endif  /* RFU */
  
#ifdef SENSOR
  int res = init_sensors();
 80011f8:	f001 fd98 	bl	8002d2c <init_sensors>
  if(0 != res)
 80011fc:	4604      	mov	r4, r0
 80011fe:	b148      	cbz	r0, 8001214 <platform_init+0x16c>
  {
    msg_error("init_sensors returned error : %d\n", res);
 8001200:	4917      	ldr	r1, [pc, #92]	; (8001260 <platform_init+0x1b8>)
 8001202:	4818      	ldr	r0, [pc, #96]	; (8001264 <platform_init+0x1bc>)
 8001204:	f240 1225 	movw	r2, #293	; 0x125
 8001208:	f022 f980 	bl	802350c <iprintf>
 800120c:	4621      	mov	r1, r4
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <platform_init+0x1c4>)
 8001210:	f022 f97c 	bl	802350c <iprintf>
  }
#endif /* SENSOR */
   
 return 0;
}
 8001214:	2000      	movs	r0, #0
 8001216:	b00c      	add	sp, #48	; 0x30
 8001218:	bd10      	pop	{r4, pc}
 800121a:	bf00      	nop
 800121c:	20001194 	.word	0x20001194
 8001220:	0802d141 	.word	0x0802d141
 8001224:	200011a0 	.word	0x200011a0
 8001228:	0802d17f 	.word	0x0802d17f
 800122c:	0802d1ba 	.word	0x0802d1ba
 8001230:	08027b78 	.word	0x08027b78
 8001234:	0802d1f5 	.word	0x0802d1f5
 8001238:	0802d257 	.word	0x0802d257
 800123c:	0802d231 	.word	0x0802d231
 8001240:	0802d271 	.word	0x0802d271
 8001244:	08003211 	.word	0x08003211
 8001248:	0802d291 	.word	0x0802d291
 800124c:	0802d2bd 	.word	0x0802d2bd
 8001250:	0802d2d8 	.word	0x0802d2d8
 8001254:	0802d36d 	.word	0x0802d36d
 8001258:	0802d2f1 	.word	0x0802d2f1
 800125c:	0802d3e4 	.word	0x0802d3e4
 8001260:	08027b94 	.word	0x08027b94
 8001264:	0802d3b1 	.word	0x0802d3b1
 8001268:	0802d3c1 	.word	0x0802d3c1
 800126c:	0802d40b 	.word	0x0802d40b

08001270 <platform_deinit>:


void    platform_deinit()
{
 8001270:	b508      	push	{r3, lr}
   /* Close Cloud connectivity demonstration */
  printf("\n*** Cloud connectivity demonstration ***\n\n");
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <platform_deinit+0x1c>)
 8001274:	f022 f9d2 	bl	802361c <puts>
  printf("Cloud connectivity demonstration completed\n");
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <platform_deinit+0x20>)
 800127a:	f022 f9cf 	bl	802361c <puts>


  (void)net_deinit(hnet, (net_if_deinit));
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <platform_deinit+0x24>)
 8001280:	4905      	ldr	r1, [pc, #20]	; (8001298 <platform_deinit+0x28>)
 8001282:	6818      	ldr	r0, [r3, #0]
#endif

  heap_stat(&heap_max,&heap_current,&stack_size);
  msg_info("Heap Max allocation 0x%x (%d), current allocation 0x%x (%d), Stack max size 0x%x (%d)\n",heap_max,heap_max,heap_current,heap_current,stack_size,stack_size);
#endif
}
 8001284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  (void)net_deinit(hnet, (net_if_deinit));
 8001288:	f000 bcf4 	b.w	8001c74 <net_deinit>
 800128c:	0802d42d 	.word	0x0802d42d
 8001290:	0802d458 	.word	0x0802d458
 8001294:	200011a0 	.word	0x200011a0
 8001298:	08003351 	.word	0x08003351

0800129c <mbedtls_hardware_poll>:
                    unsigned char *output, size_t len, size_t *olen );


int mbedtls_hardware_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
 800129c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800129e:	460e      	mov	r6, r1
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t random_number = 0;
 80012a0:	a902      	add	r1, sp, #8
 80012a2:	2500      	movs	r5, #0
{
 80012a4:	4617      	mov	r7, r2
 80012a6:	461c      	mov	r4, r3
  uint32_t random_number = 0;
 80012a8:	f841 5d04 	str.w	r5, [r1, #-4]!
  
  status = HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80012ac:	4806      	ldr	r0, [pc, #24]	; (80012c8 <mbedtls_hardware_poll+0x2c>)
 80012ae:	f009 fb26 	bl	800a8fe <HAL_RNG_GenerateRandomNumber>
  ((void) data);
  *olen = 0;
  
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 80012b2:	2f03      	cmp	r7, #3
  *olen = 0;
 80012b4:	6025      	str	r5, [r4, #0]
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 80012b6:	d904      	bls.n	80012c2 <mbedtls_hardware_poll+0x26>
 80012b8:	b918      	cbnz	r0, 80012c2 <mbedtls_hardware_poll+0x26>
  {
    return 0;
  }
  
  memcpy(output, &random_number, sizeof(uint32_t));
 80012ba:	9b01      	ldr	r3, [sp, #4]
 80012bc:	6033      	str	r3, [r6, #0]
  *olen = sizeof(uint32_t);
 80012be:	2304      	movs	r3, #4
 80012c0:	6023      	str	r3, [r4, #0]
  
  return 0;
}
 80012c2:	2000      	movs	r0, #0
 80012c4:	b003      	add	sp, #12
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c8:	20001194 	.word	0x20001194

080012cc <FLASH_get_pageInBank>:
  */
static int FLASH_get_pageInBank(uint32_t addr)
{
  int page = -1;

  if ( ((FLASH_BASE + FLASH_SIZE) > addr) && (addr >= FLASH_BASE) )
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <FLASH_get_pageInBank+0x58>)
 80012ce:	8819      	ldrh	r1, [r3, #0]
 80012d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d4:	4299      	cmp	r1, r3
 80012d6:	bf1d      	ittte	ne
 80012d8:	4a13      	ldrne	r2, [pc, #76]	; (8001328 <FLASH_get_pageInBank+0x5c>)
 80012da:	ea02 2281 	andne.w	r2, r2, r1, lsl #10
 80012de:	f102 6200 	addne.w	r2, r2, #134217728	; 0x8000000
 80012e2:	f04f 6201 	moveq.w	r2, #135266304	; 0x8100000
 80012e6:	4282      	cmp	r2, r0
 80012e8:	d911      	bls.n	800130e <FLASH_get_pageInBank+0x42>
 80012ea:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80012ee:	d30e      	bcc.n	800130e <FLASH_get_pageInBank+0x42>
  {
    /* The address is in internal FLASH range. */
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 80012f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f4:	4299      	cmp	r1, r3
 80012f6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80012fa:	d00b      	beq.n	8001314 <FLASH_get_pageInBank+0x48>
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <FLASH_get_pageInBank+0x60>)
 80012fe:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 8001302:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 8001306:	4288      	cmp	r0, r1
 8001308:	d209      	bcs.n	800131e <FLASH_get_pageInBank+0x52>
    { 
      /* Addr in the first bank */
      page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800130a:	0ad8      	lsrs	r0, r3, #11
 800130c:	4770      	bx	lr
  int page = -1;
 800130e:	f04f 30ff 	mov.w	r0, #4294967295
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
    }
  }
  
  return page;
}
 8001312:	4770      	bx	lr
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <FLASH_get_pageInBank+0x64>)
 8001316:	4290      	cmp	r0, r2
 8001318:	d9f7      	bls.n	800130a <FLASH_get_pageInBank+0x3e>
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
 800131a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800131e:	1a98      	subs	r0, r3, r2
 8001320:	0ac0      	lsrs	r0, r0, #11
 8001322:	4770      	bx	lr
 8001324:	1fff75e0 	.word	0x1fff75e0
 8001328:	003ffc00 	.word	0x003ffc00
 800132c:	001ffe00 	.word	0x001ffe00
 8001330:	0807ffff 	.word	0x0807ffff

08001334 <FLASH_get_bank>:
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <FLASH_get_bank+0x48>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <FLASH_get_bank+0x4c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	8811      	ldrh	r1, [r2, #0]
 800133c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001344:	d10c      	bne.n	8001360 <FLASH_get_bank+0x2c>
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_1 : FLASH_BANK_2;
 8001346:	4299      	cmp	r1, r3
 8001348:	bf17      	itett	ne
 800134a:	4a0e      	ldrne	r2, [pc, #56]	; (8001384 <FLASH_get_bank+0x50>)
 800134c:	4a0e      	ldreq	r2, [pc, #56]	; (8001388 <FLASH_get_bank+0x54>)
 800134e:	ea02 2241 	andne.w	r2, r2, r1, lsl #9
 8001352:	f102 6200 	addne.w	r2, r2, #134217728	; 0x8000000
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_2 : FLASH_BANK_1;
 8001356:	4290      	cmp	r0, r2
 8001358:	bf2c      	ite	cs
 800135a:	2002      	movcs	r0, #2
 800135c:	2001      	movcc	r0, #1
 800135e:	4770      	bx	lr
 8001360:	4299      	cmp	r1, r3
 8001362:	bf17      	itett	ne
 8001364:	4b07      	ldrne	r3, [pc, #28]	; (8001384 <FLASH_get_bank+0x50>)
 8001366:	4b08      	ldreq	r3, [pc, #32]	; (8001388 <FLASH_get_bank+0x54>)
 8001368:	ea03 2341 	andne.w	r3, r3, r1, lsl #9
 800136c:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_1 : FLASH_BANK_2;
 8001370:	4283      	cmp	r3, r0
 8001372:	bf94      	ite	ls
 8001374:	2001      	movls	r0, #1
 8001376:	2002      	movhi	r0, #2
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40010000 	.word	0x40010000
 8001380:	1fff75e0 	.word	0x1fff75e0
 8001384:	001ffe00 	.word	0x001ffe00
 8001388:	08080000 	.word	0x08080000

0800138c <FLASH_update>:
  int ret = 0;
  int remaining = size;
  uint8_t * src_addr = (uint8_t *) data;
  uint64_t page_cache[FLASH_PAGE_SIZE/sizeof(uint64_t)];
 
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800138c:	4b4f      	ldr	r3, [pc, #316]	; (80014cc <FLASH_update+0x140>)
{
 800138e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001392:	4692      	mov	sl, r2
  int remaining = size;
 8001394:	4690      	mov	r8, r2
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001396:	699a      	ldr	r2, [r3, #24]
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 8001398:	f8df b140 	ldr.w	fp, [pc, #320]	; 80014dc <FLASH_update+0x150>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800139c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013a0:	619a      	str	r2, [r3, #24]
 80013a2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
{
 80013a6:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 80013aa:	4607      	mov	r7, r0
 80013ac:	4689      	mov	r9, r1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013ae:	611a      	str	r2, [r3, #16]

  do {
    uint32_t fl_addr = ROUND_DOWN(dst_addr, FLASH_PAGE_SIZE);
 80013b0:	f427 64ff 	bic.w	r4, r7, #2040	; 0x7f8
 80013b4:	f024 0407 	bic.w	r4, r4, #7
    int fl_offset = dst_addr - fl_addr;
 80013b8:	1b3d      	subs	r5, r7, r4
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 80013ba:	f5c5 6600 	rsb	r6, r5, #2048	; 0x800
 80013be:	4556      	cmp	r6, sl
    
    /* Load from the flash into the cache */
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 80013c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c4:	4621      	mov	r1, r4
 80013c6:	a806      	add	r0, sp, #24
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 80013c8:	bf28      	it	cs
 80013ca:	4656      	movcs	r6, sl
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 80013cc:	f020 ff8b 	bl	80222e6 <memcpy>
    /* Update the cache from the source */
    memcpy((uint8_t *)page_cache + fl_offset, src_addr, len);
 80013d0:	ab06      	add	r3, sp, #24
 80013d2:	4632      	mov	r2, r6
 80013d4:	4649      	mov	r1, r9
 80013d6:	1958      	adds	r0, r3, r5
 80013d8:	f020 ff85 	bl	80222e6 <memcpy>
  uint32_t PageError = 0;
 80013dc:	2300      	movs	r3, #0
  EraseInit.Banks = FLASH_get_bank(address); 
 80013de:	4620      	mov	r0, r4
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80013e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  EraseInit.Banks = FLASH_get_bank(address); 
 80013e4:	f7ff ffa6 	bl	8001334 <FLASH_get_bank>
 80013e8:	4605      	mov	r5, r0
 80013ea:	9003      	str	r0, [sp, #12]
  if (EraseInit.Banks != FLASH_get_bank(address + len_bytes))
 80013ec:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80013f0:	f7ff ffa0 	bl	8001334 <FLASH_get_bank>
 80013f4:	4285      	cmp	r5, r0
 80013f6:	d00d      	beq.n	8001414 <FLASH_update+0x88>
    printf("Error: Cannot erase across FLASH banks.\n");
 80013f8:	4835      	ldr	r0, [pc, #212]	; (80014d0 <FLASH_update+0x144>)
 80013fa:	f022 f90f 	bl	802361c <puts>
    /* Erase the page, and write the cache */
    ret = FLASH_unlock_erase(fl_addr, FLASH_PAGE_SIZE);
    if (ret != 0)
    {
#ifndef CODE_UNDER_FIREWALL
      printf("Error erasing at 0x%08lx\n", fl_addr);
 80013fe:	4621      	mov	r1, r4
 8001400:	4834      	ldr	r0, [pc, #208]	; (80014d4 <FLASH_update+0x148>)
 8001402:	f022 f883 	bl	802350c <iprintf>
 8001406:	f04f 35ff 	mov.w	r5, #4294967295
      }
    }
  } while ((ret == 0) && (remaining > 0));
  
  return ret;
}
 800140a:	4628      	mov	r0, r5
 800140c:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 8001410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EraseInit.Page = FLASH_get_pageInBank(address);
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff ff59 	bl	80012cc <FLASH_get_pageInBank>
 800141a:	4605      	mov	r5, r0
 800141c:	9004      	str	r0, [sp, #16]
    EraseInit.NbPages = FLASH_get_pageInBank(address + len_bytes - 1) - EraseInit.Page + 1;
 800141e:	f204 70ff 	addw	r0, r4, #2047	; 0x7ff
 8001422:	f7ff ff53 	bl	80012cc <FLASH_get_pageInBank>
 8001426:	3001      	adds	r0, #1
 8001428:	1b40      	subs	r0, r0, r5
 800142a:	9005      	str	r0, [sp, #20]
    HAL_FLASH_Unlock();
 800142c:	f007 fc46 	bl	8008cbc <HAL_FLASH_Unlock>
    if (HAL_FLASHEx_Erase(&EraseInit, &PageError) == HAL_OK)
 8001430:	a901      	add	r1, sp, #4
 8001432:	a802      	add	r0, sp, #8
 8001434:	f007 fd4e 	bl	8008ed4 <HAL_FLASHEx_Erase>
 8001438:	b120      	cbz	r0, 8001444 <FLASH_update+0xb8>
      printf("Error erasing at 0x%08lx\n", address);
 800143a:	4621      	mov	r1, r4
 800143c:	4825      	ldr	r0, [pc, #148]	; (80014d4 <FLASH_update+0x148>)
 800143e:	f022 f865 	bl	802350c <iprintf>
 8001442:	e7dc      	b.n	80013fe <FLASH_update+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
  for (i = 0; i < len_bytes; i += 8)
 8001446:	4605      	mov	r5, r0
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8001448:	f60d 0218 	addw	r2, sp, #2072	; 0x818
 800144c:	f025 0307 	bic.w	r3, r5, #7
 8001450:	4413      	add	r3, r2
 8001452:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	1929      	adds	r1, r5, r4
 800145c:	2000      	movs	r0, #0
 800145e:	f007 fc83 	bl	8008d68 <HAL_FLASH_Program>
 8001462:	b9f0      	cbnz	r0, 80014a2 <FLASH_update+0x116>
  for (i = 0; i < len_bytes; i += 8)
 8001464:	3508      	adds	r5, #8
 8001466:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800146a:	d1ed      	bne.n	8001448 <FLASH_update+0xbc>
 800146c:	f04f 35ff 	mov.w	r5, #4294967295
    if ( *dst != *src )
 8001470:	f020 0303 	bic.w	r3, r0, #3
 8001474:	f60d 0c18 	addw	ip, sp, #2072	; 0x818
 8001478:	4463      	add	r3, ip
 800147a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800147e:	5902      	ldr	r2, [r0, r4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	eb00 0104 	add.w	r1, r0, r4
 8001488:	d00f      	beq.n	80014aa <FLASH_update+0x11e>
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 800148a:	4658      	mov	r0, fp
 800148c:	f022 f83e 	bl	802350c <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 8001490:	b662      	cpsie	i
      if(ret != 0)
 8001492:	b18d      	cbz	r5, 80014b8 <FLASH_update+0x12c>
        printf("Error writing %lu bytes at 0x%08lx\n", FLASH_PAGE_SIZE, fl_addr);
 8001494:	4622      	mov	r2, r4
 8001496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <FLASH_update+0x14c>)
 800149c:	f022 f836 	bl	802350c <iprintf>
 80014a0:	e7b1      	b.n	8001406 <FLASH_update+0x7a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 80014a2:	f04f 35ff 	mov.w	r5, #4294967295
 80014a6:	2000      	movs	r0, #0
 80014a8:	e7e2      	b.n	8001470 <FLASH_update+0xe4>
  for (i = 0; i < len_bytes; i += 4)
 80014aa:	3004      	adds	r0, #4
 80014ac:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ret = 0;
 80014b0:	f04f 0500 	mov.w	r5, #0
  for (i = 0; i < len_bytes; i += 4)
 80014b4:	d1dc      	bne.n	8001470 <FLASH_update+0xe4>
 80014b6:	e7eb      	b.n	8001490 <FLASH_update+0x104>
        remaining -= len;
 80014b8:	eba8 0806 	sub.w	r8, r8, r6
  } while ((ret == 0) && (remaining > 0));
 80014bc:	f1b8 0f00 	cmp.w	r8, #0
        dst_addr += len;
 80014c0:	4437      	add	r7, r6
        src_addr += len;
 80014c2:	44b1      	add	r9, r6
  } while ((ret == 0) && (remaining > 0));
 80014c4:	f73f af74 	bgt.w	80013b0 <FLASH_update+0x24>
 80014c8:	e79f      	b.n	800140a <FLASH_update+0x7e>
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000
 80014d0:	0802d4c3 	.word	0x0802d4c3
 80014d4:	0802d4eb 	.word	0x0802d4eb
 80014d8:	0802d542 	.word	0x0802d542
 80014dc:	0802d505 	.word	0x0802d505

080014e0 <getInputString>:
  * @param  Out:  inputString   Pointer to buffer for input line.
  * @param  In:   len           Max length for line.
  * @retval Number of bytes read from the terminal.
  */
int getInputString(char *inputString, size_t len)
{
 80014e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014e4:	460f      	mov	r7, r1
 80014e6:	4606      	mov	r6, r0
  size_t currLen = 0;
  int c = 0;

  c = getchar();
 80014e8:	f020 fda6 	bl	8022038 <getchar>
  size_t currLen = 0;
 80014ec:	2400      	movs	r4, #0
    {
      if (currLen != 0)
      {
        --currLen;
        inputString[currLen] = 0;
        printf(" \b");
 80014ee:	f8df a060 	ldr.w	sl, [pc, #96]	; 8001550 <getInputString+0x70>
      }
    }
    else
    {
      if (currLen < (len-1))
 80014f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80014f6:	46a1      	mov	r9, r4
  while ((c != EOF) && ((currLen + 1) < len) && (c != '\r') && (c != '\n') )
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d006      	beq.n	800150a <getInputString+0x2a>
 80014fc:	1c65      	adds	r5, r4, #1
 80014fe:	42bd      	cmp	r5, r7
 8001500:	d218      	bcs.n	8001534 <getInputString+0x54>
 8001502:	280d      	cmp	r0, #13
 8001504:	d020      	beq.n	8001548 <getInputString+0x68>
 8001506:	280a      	cmp	r0, #10
 8001508:	d101      	bne.n	800150e <getInputString+0x2e>

      ++currLen;
    }
    c = getchar();
  }
  if (currLen != 0)
 800150a:	b1d4      	cbz	r4, 8001542 <getInputString+0x62>
 800150c:	e013      	b.n	8001536 <getInputString+0x56>
    if (c == '\b')
 800150e:	2808      	cmp	r0, #8
 8001510:	d10a      	bne.n	8001528 <getInputString+0x48>
      if (currLen != 0)
 8001512:	b16c      	cbz	r4, 8001530 <getInputString+0x50>
        --currLen;
 8001514:	1e65      	subs	r5, r4, #1
        printf(" \b");
 8001516:	4650      	mov	r0, sl
        inputString[currLen] = 0;
 8001518:	f806 9005 	strb.w	r9, [r6, r5]
        printf(" \b");
 800151c:	f021 fff6 	bl	802350c <iprintf>
    c = getchar();
 8001520:	f020 fd8a 	bl	8022038 <getchar>
 8001524:	462c      	mov	r4, r5
 8001526:	e7e7      	b.n	80014f8 <getInputString+0x18>
      if (currLen < (len-1))
 8001528:	45a0      	cmp	r8, r4
 800152a:	d9f9      	bls.n	8001520 <getInputString+0x40>
        inputString[currLen] = c;
 800152c:	5530      	strb	r0, [r6, r4]
 800152e:	e7f7      	b.n	8001520 <getInputString+0x40>
 8001530:	4625      	mov	r5, r4
 8001532:	e7f5      	b.n	8001520 <getInputString+0x40>
  if (currLen != 0)
 8001534:	b10c      	cbz	r4, 800153a <getInputString+0x5a>
  { /* Close the string in the input buffer... only if a string was written to it. */
    inputString[currLen] = '\0';
 8001536:	2300      	movs	r3, #0
 8001538:	5533      	strb	r3, [r6, r4]
  }
  if (c == '\r')
 800153a:	280d      	cmp	r0, #13
 800153c:	d101      	bne.n	8001542 <getInputString+0x62>
  {
    c = getchar(); /* assume there is '\n' after '\r'. Just discard it. */
 800153e:	f020 fd7b 	bl	8022038 <getchar>
  }

  return currLen;
}
 8001542:	4620      	mov	r0, r4
 8001544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (currLen != 0)
 8001548:	2c00      	cmp	r4, #0
 800154a:	d1f4      	bne.n	8001536 <getInputString+0x56>
 800154c:	e7f7      	b.n	800153e <getInputString+0x5e>
 800154e:	bf00      	nop
 8001550:	0802d604 	.word	0x0802d604
 8001554:	00000000 	.word	0x00000000

08001558 <checkWiFiCredentials>:
  */
int checkWiFiCredentials(const char ** const ssid, const char ** const psk, uint8_t * const security_mode)
{
  bool is_ssid_present = 0;

  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <checkWiFiCredentials+0x58>)
 800155a:	681b      	ldr	r3, [r3, #0]
{
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 800155e:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 8001562:	e9d4 6700 	ldrd	r6, r7, [r4]
 8001566:	a510      	add	r5, pc, #64	; (adr r5, 80015a8 <checkWiFiCredentials+0x50>)
 8001568:	e9d5 4500 	ldrd	r4, r5, [r5]
 800156c:	42af      	cmp	r7, r5
 800156e:	bf08      	it	eq
 8001570:	42a6      	cmpeq	r6, r4
 8001572:	d110      	bne.n	8001596 <checkWiFiCredentials+0x3e>
  {
    is_ssid_present = true;
    if ((ssid == NULL) ||(psk == NULL) || (security_mode == NULL))
 8001574:	b190      	cbz	r0, 800159c <checkWiFiCredentials+0x44>
 8001576:	b189      	cbz	r1, 800159c <checkWiFiCredentials+0x44>
 8001578:	b182      	cbz	r2, 800159c <checkWiFiCredentials+0x44>
    {
      return -2;
    }
    *ssid = lUserConfigPtr->wifi_config.ssid;
 800157a:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 800157e:	3408      	adds	r4, #8
 8001580:	6004      	str	r4, [r0, #0]
    *psk = lUserConfigPtr->wifi_config.psk;
 8001582:	f503 5020 	add.w	r0, r3, #10240	; 0x2800
 8001586:	3028      	adds	r0, #40	; 0x28
 8001588:	6008      	str	r0, [r1, #0]
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 800158a:	f642 0168 	movw	r1, #10344	; 0x2868
  }

  return (is_ssid_present) ? 0 : -1;
 800158e:	2000      	movs	r0, #0
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 8001590:	5c5b      	ldrb	r3, [r3, r1]
 8001592:	7013      	strb	r3, [r2, #0]
}
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (is_ssid_present) ? 0 : -1;
 8001596:	f04f 30ff 	mov.w	r0, #4294967295
 800159a:	e7fb      	b.n	8001594 <checkWiFiCredentials+0x3c>
      return -2;
 800159c:	f06f 0001 	mvn.w	r0, #1
 80015a0:	e7f8      	b.n	8001594 <checkWiFiCredentials+0x3c>
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	89abcdef 	.word	0x89abcdef
 80015ac:	01234567 	.word	0x01234567
 80015b0:	20000008 	.word	0x20000008
 80015b4:	00000000 	.word	0x00000000

080015b8 <updateWiFiCredentials>:
  * @retval Error code
  *             0    Success
  *             <0   Unrecoverable error
  */
int updateWiFiCredentials(void)
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	b09c      	sub	sp, #112	; 0x70
  wifi_config_t wifi_config;
  int ret = 0;

  memset(&wifi_config, 0, sizeof(wifi_config_t));
 80015bc:	2270      	movs	r2, #112	; 0x70
 80015be:	2100      	movs	r1, #0
 80015c0:	4668      	mov	r0, sp
 80015c2:	f020 feb4 	bl	802232e <memset>

  printf("\nEnter SSID: ");
 80015c6:	4826      	ldr	r0, [pc, #152]	; (8001660 <updateWiFiCredentials+0xa8>)

  printf("\n");
  char c;
  do
  {
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 80015c8:	4c26      	ldr	r4, [pc, #152]	; (8001664 <updateWiFiCredentials+0xac>)
  printf("\nEnter SSID: ");
 80015ca:	f021 ff9f 	bl	802350c <iprintf>
  getInputString(wifi_config.ssid, USER_CONF_WIFI_SSID_MAX_LENGTH);
 80015ce:	2120      	movs	r1, #32
 80015d0:	a802      	add	r0, sp, #8
 80015d2:	f7ff ff85 	bl	80014e0 <getInputString>
  msg_info("You have entered %s as the ssid.\n", wifi_config.ssid);
 80015d6:	a902      	add	r1, sp, #8
 80015d8:	4823      	ldr	r0, [pc, #140]	; (8001668 <updateWiFiCredentials+0xb0>)
 80015da:	f021 ff97 	bl	802350c <iprintf>
  printf("\n");
 80015de:	200a      	movs	r0, #10
 80015e0:	f021 ffac 	bl	802353c <putchar>
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 80015e4:	4620      	mov	r0, r4
 80015e6:	f021 ff91 	bl	802350c <iprintf>
      c = getchar();
 80015ea:	f020 fd25 	bl	8022038 <getchar>
  }
  while ( (c < '0')  || (c > '3'));
 80015ee:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 80015f2:	b2c9      	uxtb	r1, r1
 80015f4:	2903      	cmp	r1, #3
 80015f6:	d8f5      	bhi.n	80015e4 <updateWiFiCredentials+0x2c>
  wifi_config.security_mode = c - '0';
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 80015f8:	481c      	ldr	r0, [pc, #112]	; (800166c <updateWiFiCredentials+0xb4>)
  wifi_config.security_mode = c - '0';
 80015fa:	f88d 1068 	strb.w	r1, [sp, #104]	; 0x68
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 80015fe:	f021 ff85 	bl	802350c <iprintf>

  if (wifi_config.security_mode != 0)
 8001602:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8001606:	b133      	cbz	r3, 8001616 <updateWiFiCredentials+0x5e>
  {
    printf("\nEnter password: ");
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <updateWiFiCredentials+0xb8>)
 800160a:	f021 ff7f 	bl	802350c <iprintf>
    getInputString(wifi_config.psk, sizeof(wifi_config.psk));
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	a80a      	add	r0, sp, #40	; 0x28
 8001612:	f7ff ff65 	bl	80014e0 <getInputString>
  }

  wifi_config.magic = USER_CONF_MAGIC;
 8001616:	a310      	add	r3, pc, #64	; (adr r3, 8001658 <updateWiFiCredentials+0xa0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	e9cd 2300 	strd	r2, r3, [sp]

  ret = FLASH_update((uint32_t)&lUserConfigPtr->wifi_config, &wifi_config, sizeof(wifi_config_t));
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <updateWiFiCredentials+0xbc>)
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	2270      	movs	r2, #112	; 0x70
 8001626:	4669      	mov	r1, sp
 8001628:	f500 5020 	add.w	r0, r0, #10240	; 0x2800
 800162c:	f7ff feae 	bl	800138c <FLASH_update>

  if (ret < 0)
 8001630:	1e04      	subs	r4, r0, #0
 8001632:	da08      	bge.n	8001646 <updateWiFiCredentials+0x8e>
  {
    msg_error("Failed updating the wifi configuration in Flash.\n");
 8001634:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001638:	490f      	ldr	r1, [pc, #60]	; (8001678 <updateWiFiCredentials+0xc0>)
 800163a:	4810      	ldr	r0, [pc, #64]	; (800167c <updateWiFiCredentials+0xc4>)
 800163c:	f021 ff66 	bl	802350c <iprintf>
 8001640:	480f      	ldr	r0, [pc, #60]	; (8001680 <updateWiFiCredentials+0xc8>)
 8001642:	f021 ffeb 	bl	802361c <puts>
  }

  printf("\n");
 8001646:	200a      	movs	r0, #10
 8001648:	f021 ff78 	bl	802353c <putchar>
  return ret;
}
 800164c:	4620      	mov	r0, r4
 800164e:	b01c      	add	sp, #112	; 0x70
 8001650:	bd10      	pop	{r4, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	89abcdef 	.word	0x89abcdef
 800165c:	01234567 	.word	0x01234567
 8001660:	0802d598 	.word	0x0802d598
 8001664:	0802d5c8 	.word	0x0802d5c8
 8001668:	0802d5a6 	.word	0x0802d5a6
 800166c:	0802d607 	.word	0x0802d607
 8001670:	0802d633 	.word	0x0802d633
 8001674:	20000008 	.word	0x20000008
 8001678:	08027ba2 	.word	0x08027ba2
 800167c:	0802d3b1 	.word	0x0802d3b1
 8001680:	0802d645 	.word	0x0802d645

08001684 <enterPemString>:
  * @param  Out: key_read_buffer    Destination buffer.
  * @param  In:  max_len            Maximum length to be written to the destination buffer.
  * @retval Number of characters read into the output buffer.
  */
int enterPemString(char * read_buffer, size_t max_len)
{
 8001684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001688:	4606      	mov	r6, r0
 800168a:	460f      	mov	r7, r1
  int i = 0;
  int read_len = 0;
  bool eof = false;
  read_len = getInputString(&read_buffer[i], max_len);
 800168c:	f7ff ff28 	bl	80014e0 <getInputString>
  bool eof = false;
 8001690:	f04f 0a00 	mov.w	sl, #0
  while ( (read_len >= 0) && (i < max_len) && !eof )
  {
    i += read_len;
    read_buffer[i++] = '\n';
    read_len = getInputString(&read_buffer[i], max_len);
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 8001694:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8001720 <enterPemString+0x9c>
  read_len = getInputString(&read_buffer[i], max_len);
 8001698:	4605      	mov	r5, r0
  int i = 0;
 800169a:	4654      	mov	r4, sl
    read_buffer[i++] = '\n';
 800169c:	f04f 080a 	mov.w	r8, #10
  while ( (read_len >= 0) && (i < max_len) && !eof )
 80016a0:	2d00      	cmp	r5, #0
 80016a2:	da2e      	bge.n	8001702 <enterPemString+0x7e>
        read_len = getInputString(&read_buffer[i], max_len);
        if (read_len != 0) eof =false;
    }
  }

  if (i >= max_len)
 80016a4:	42bc      	cmp	r4, r7
 80016a6:	d331      	bcc.n	800170c <enterPemString+0x88>
  {
   msg_error("Certificate is too long , allocated size is %d\n",max_len);
 80016a8:	f240 1253 	movw	r2, #339	; 0x153
 80016ac:	4919      	ldr	r1, [pc, #100]	; (8001714 <enterPemString+0x90>)
 80016ae:	481a      	ldr	r0, [pc, #104]	; (8001718 <enterPemString+0x94>)
 80016b0:	f021 ff2c 	bl	802350c <iprintf>
 80016b4:	4639      	mov	r1, r7
 80016b6:	4819      	ldr	r0, [pc, #100]	; (800171c <enterPemString+0x98>)
 80016b8:	f021 ff28 	bl	802350c <iprintf>
   return 0;
 80016bc:	2000      	movs	r0, #0
  }
  read_buffer[++i] = '\0';
  return i;
}
 80016be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    i += read_len;
 80016c2:	4425      	add	r5, r4
    read_buffer[i++] = '\n';
 80016c4:	1c6c      	adds	r4, r5, #1
    read_len = getInputString(&read_buffer[i], max_len);
 80016c6:	eb06 0b04 	add.w	fp, r6, r4
    read_buffer[i++] = '\n';
 80016ca:	f806 8005 	strb.w	r8, [r6, r5]
    read_len = getInputString(&read_buffer[i], max_len);
 80016ce:	4639      	mov	r1, r7
 80016d0:	4658      	mov	r0, fp
 80016d2:	f7ff ff05 	bl	80014e0 <getInputString>
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80016d6:	2208      	movs	r2, #8
    read_len = getInputString(&read_buffer[i], max_len);
 80016d8:	4605      	mov	r5, r0
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80016da:	4649      	mov	r1, r9
 80016dc:	4658      	mov	r0, fp
 80016de:	f022 f8b9 	bl	8023854 <strncmp>
    if (eof)
 80016e2:	2800      	cmp	r0, #0
 80016e4:	d1dc      	bne.n	80016a0 <enterPemString+0x1c>
        i += read_len;
 80016e6:	4425      	add	r5, r4
        read_buffer[i++] = '\n';
 80016e8:	1c6c      	adds	r4, r5, #1
 80016ea:	f806 8005 	strb.w	r8, [r6, r5]
        read_len = getInputString(&read_buffer[i], max_len);
 80016ee:	4639      	mov	r1, r7
 80016f0:	1930      	adds	r0, r6, r4
 80016f2:	f7ff fef5 	bl	80014e0 <getInputString>
        if (read_len != 0) eof =false;
 80016f6:	fab0 fa80 	clz	sl, r0
 80016fa:	4605      	mov	r5, r0
 80016fc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001700:	e7ce      	b.n	80016a0 <enterPemString+0x1c>
  while ( (read_len >= 0) && (i < max_len) && !eof )
 8001702:	42bc      	cmp	r4, r7
 8001704:	d2d0      	bcs.n	80016a8 <enterPemString+0x24>
 8001706:	f1ba 0f00 	cmp.w	sl, #0
 800170a:	d0da      	beq.n	80016c2 <enterPemString+0x3e>
  read_buffer[++i] = '\0';
 800170c:	1c60      	adds	r0, r4, #1
 800170e:	2300      	movs	r3, #0
 8001710:	5433      	strb	r3, [r6, r0]
  return i;
 8001712:	e7d4      	b.n	80016be <enterPemString+0x3a>
 8001714:	08027bb8 	.word	0x08027bb8
 8001718:	0802d3b1 	.word	0x0802d3b1
 800171c:	0802d67f 	.word	0x0802d67f
 8001720:	0802d676 	.word	0x0802d676

08001724 <CaptureAndFlashPem>:
  *             0    Success
  *             <0   Unrecoverable error
  */

 int CaptureAndFlashPem(char *pem_name, char const *flash_addr, bool restricted_area)
 {
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	4606      	mov	r6, r0
  char * key_read_buffer = NULL;
  int    ret = 0;
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 8001728:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 {
 800172c:	460d      	mov	r5, r1
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 800172e:	f020 fda9 	bl	8022284 <malloc>
  if (key_read_buffer == NULL)
 8001732:	4604      	mov	r4, r0
 8001734:	b970      	cbnz	r0, 8001754 <CaptureAndFlashPem+0x30>
  {
    msg_error("Could not allocate %d bytes for the console readbuffer.\n", PEM_READ_BUFFER_SIZE);
 8001736:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800173a:	4916      	ldr	r1, [pc, #88]	; (8001794 <CaptureAndFlashPem+0x70>)
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <CaptureAndFlashPem+0x74>)
 800173e:	f021 fee5 	bl	802350c <iprintf>
 8001742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <CaptureAndFlashPem+0x78>)
 8001748:	f021 fee0 	bl	802350c <iprintf>
 800174c:	f04f 35ff 	mov.w	r5, #4294967295
  }

  free(key_read_buffer);

  return ret;
 }
 8001750:	4628      	mov	r0, r5
 8001752:	bd70      	pop	{r4, r5, r6, pc}
  memset(key_read_buffer, 0, PEM_READ_BUFFER_SIZE);
 8001754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001758:	2100      	movs	r1, #0
 800175a:	f020 fde8 	bl	802232e <memset>
  printf("\nEnter your %s: \n",pem_name);
 800175e:	4631      	mov	r1, r6
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <CaptureAndFlashPem+0x7c>)
 8001762:	f021 fed3 	bl	802350c <iprintf>
  enterPemString(key_read_buffer, PEM_READ_BUFFER_SIZE);
 8001766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff ff8a 	bl	8001684 <enterPemString>
  msg_info("read: --->\n%s\n<---\n", key_read_buffer);
 8001770:	4621      	mov	r1, r4
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <CaptureAndFlashPem+0x80>)
 8001774:	f021 feca 	bl	802350c <iprintf>
    ret = FLASH_update((uint32_t)flash_addr, key_read_buffer, strlen(key_read_buffer) + 1);  /* Append the closing \0*/
 8001778:	4620      	mov	r0, r4
 800177a:	f7fe fd33 	bl	80001e4 <strlen>
 800177e:	4621      	mov	r1, r4
 8001780:	1c42      	adds	r2, r0, #1
 8001782:	4628      	mov	r0, r5
 8001784:	f7ff fe02 	bl	800138c <FLASH_update>
 8001788:	4605      	mov	r5, r0
  free(key_read_buffer);
 800178a:	4620      	mov	r0, r4
 800178c:	f020 fd82 	bl	8022294 <free>
  return ret;
 8001790:	e7de      	b.n	8001750 <CaptureAndFlashPem+0x2c>
 8001792:	bf00      	nop
 8001794:	08027bc7 	.word	0x08027bc7
 8001798:	0802d3b1 	.word	0x0802d3b1
 800179c:	0802d6af 	.word	0x0802d6af
 80017a0:	0802d6e8 	.word	0x0802d6e8
 80017a4:	0802d6fa 	.word	0x0802d6fa

080017a8 <checkTLSRootCA>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSRootCA()
{
  return (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <checkTLSRootCA+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80017b0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017b4:	a304      	add	r3, pc, #16	; (adr r3, 80017c8 <checkTLSRootCA+0x20>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	4299      	cmp	r1, r3
 80017bc:	bf0a      	itet	eq
 80017be:	4290      	cmpeq	r0, r2
}
 80017c0:	f04f 30ff 	movne.w	r0, #4294967295
 80017c4:	2000      	moveq	r0, #0
 80017c6:	4770      	bx	lr
 80017c8:	89abcdef 	.word	0x89abcdef
 80017cc:	01234567 	.word	0x01234567
 80017d0:	20000008 	.word	0x20000008
 80017d4:	00000000 	.word	0x00000000

080017d8 <checkTLSDeviceConfig>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSDeviceConfig()
{
  return (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <checkTLSDeviceConfig+0x28>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80017e0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80017e4:	a304      	add	r3, pc, #16	; (adr r3, 80017f8 <checkTLSDeviceConfig+0x20>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	4299      	cmp	r1, r3
 80017ec:	bf0a      	itet	eq
 80017ee:	4290      	cmpeq	r0, r2
}
 80017f0:	f04f 30ff 	movne.w	r0, #4294967295
 80017f4:	2000      	moveq	r0, #0
 80017f6:	4770      	bx	lr
 80017f8:	89abcdef 	.word	0x89abcdef
 80017fc:	01234567 	.word	0x01234567
 8001800:	20000008 	.word	0x20000008
 8001804:	00000000 	.word	0x00000000

08001808 <updateTLSCredentials>:
{
 8001808:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ( (checkTLSRootCA() == -1)
 800180a:	f7ff ffcd 	bl	80017a8 <checkTLSRootCA>
 800180e:	3001      	adds	r0, #1
 8001810:	d146      	bne.n	80018a0 <updateTLSCredentials+0x98>
    printf("\nUpdating TLS security credentials.\n");
 8001812:	4849      	ldr	r0, [pc, #292]	; (8001938 <updateTLSCredentials+0x130>)
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 8001814:	4d49      	ldr	r5, [pc, #292]	; (800193c <updateTLSCredentials+0x134>)
    printf("\nUpdating TLS security credentials.\n");
 8001816:	f021 ff01 	bl	802361c <puts>
    printf("\nEnter the x509 certificates or keys as per the following format:\n");
 800181a:	4849      	ldr	r0, [pc, #292]	; (8001940 <updateTLSCredentials+0x138>)
 800181c:	f021 fefe 	bl	802361c <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 8001820:	4848      	ldr	r0, [pc, #288]	; (8001944 <updateTLSCredentials+0x13c>)
 8001822:	f021 fefb 	bl	802361c <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 8001826:	4848      	ldr	r0, [pc, #288]	; (8001948 <updateTLSCredentials+0x140>)
 8001828:	f021 fef8 	bl	802361c <puts>
    printf("R7EUQIN9Z/SG9jGr8XmksrUuEvmEF/Bibyc+E1ixVA0hmnM3oTDPb5Lc9un8rNsu\n");
 800182c:	4847      	ldr	r0, [pc, #284]	; (800194c <updateTLSCredentials+0x144>)
 800182e:	f021 fef5 	bl	802361c <puts>
    printf(".......\n");
 8001832:	4847      	ldr	r0, [pc, #284]	; (8001950 <updateTLSCredentials+0x148>)
 8001834:	f021 fef2 	bl	802361c <puts>
    printf("-----END CERTIFICATE-----\n");
 8001838:	4846      	ldr	r0, [pc, #280]	; (8001954 <updateTLSCredentials+0x14c>)
 800183a:	f021 feef 	bl	802361c <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 800183e:	4841      	ldr	r0, [pc, #260]	; (8001944 <updateTLSCredentials+0x13c>)
 8001840:	f021 feec 	bl	802361c <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 8001844:	4840      	ldr	r0, [pc, #256]	; (8001948 <updateTLSCredentials+0x140>)
 8001846:	f021 fee9 	bl	802361c <puts>
    printf(".......\n");
 800184a:	4841      	ldr	r0, [pc, #260]	; (8001950 <updateTLSCredentials+0x148>)
 800184c:	f021 fee6 	bl	802361c <puts>
    printf("-----END CERTIFICATE-----\n");
 8001850:	4840      	ldr	r0, [pc, #256]	; (8001954 <updateTLSCredentials+0x14c>)
 8001852:	f021 fee3 	bl	802361c <puts>
    printf("\n.......\n");
 8001856:	4840      	ldr	r0, [pc, #256]	; (8001958 <updateTLSCredentials+0x150>)
 8001858:	f021 fee0 	bl	802361c <puts>
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 800185c:	2200      	movs	r2, #0
 800185e:	6829      	ldr	r1, [r5, #0]
 8001860:	483e      	ldr	r0, [pc, #248]	; (800195c <updateTLSCredentials+0x154>)
 8001862:	f7ff ff5f 	bl	8001724 <CaptureAndFlashPem>
    if (ret == 0)
 8001866:	4604      	mov	r4, r0
 8001868:	b970      	cbnz	r0, 8001888 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 800186a:	a331      	add	r3, pc, #196	; (adr r3, 8001930 <updateTLSCredentials+0x128>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 8001870:	6828      	ldr	r0, [r5, #0]
      uint64_t magic = USER_CONF_MAGIC;
 8001872:	a902      	add	r1, sp, #8
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 8001874:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
      uint64_t magic = USER_CONF_MAGIC;
 8001878:	e961 2302 	strd	r2, r3, [r1, #-8]!
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 800187c:	3028      	adds	r0, #40	; 0x28
 800187e:	2208      	movs	r2, #8
 8001880:	f7ff fd84 	bl	800138c <FLASH_update>
  if ( (ret == 0) && app_needs_device_keypair() )
 8001884:	4604      	mov	r4, r0
 8001886:	b180      	cbz	r0, 80018aa <updateTLSCredentials+0xa2>
  if (ret < 0)
 8001888:	2c00      	cmp	r4, #0
 800188a:	da12      	bge.n	80018b2 <updateTLSCredentials+0xaa>
    msg_error("Failed updating the TLS configuration in Flash.\n");
 800188c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8001890:	4933      	ldr	r1, [pc, #204]	; (8001960 <updateTLSCredentials+0x158>)
 8001892:	4834      	ldr	r0, [pc, #208]	; (8001964 <updateTLSCredentials+0x15c>)
 8001894:	f021 fe3a 	bl	802350c <iprintf>
 8001898:	4833      	ldr	r0, [pc, #204]	; (8001968 <updateTLSCredentials+0x160>)
 800189a:	f021 febf 	bl	802361c <puts>
  return ret;
 800189e:	e008      	b.n	80018b2 <updateTLSCredentials+0xaa>
      || dialog_ask("\nDo you want to update the root CA certificate(s)? [y/n]\n") )
 80018a0:	4832      	ldr	r0, [pc, #200]	; (800196c <updateTLSCredentials+0x164>)
 80018a2:	f7ff fbbd 	bl	8001020 <dialog_ask>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d1b3      	bne.n	8001812 <updateTLSCredentials+0xa>
  if ( (ret == 0) && app_needs_device_keypair() )
 80018aa:	f001 ff53 	bl	8003754 <app_needs_device_keypair>
 80018ae:	b918      	cbnz	r0, 80018b8 <updateTLSCredentials+0xb0>
 80018b0:	4604      	mov	r4, r0
}
 80018b2:	4620      	mov	r0, r4
 80018b4:	b003      	add	sp, #12
 80018b6:	bd30      	pop	{r4, r5, pc}
    if (checkTLSDeviceConfig() == -1)
 80018b8:	f7ff ff8e 	bl	80017d8 <checkTLSDeviceConfig>
 80018bc:	3001      	adds	r0, #1
 80018be:	d122      	bne.n	8001906 <updateTLSCredentials+0xfe>
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 80018c0:	4d1e      	ldr	r5, [pc, #120]	; (800193c <updateTLSCredentials+0x134>)
 80018c2:	482b      	ldr	r0, [pc, #172]	; (8001970 <updateTLSCredentials+0x168>)
 80018c4:	6829      	ldr	r1, [r5, #0]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80018cc:	f7ff ff2a 	bl	8001724 <CaptureAndFlashPem>
      ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 80018d0:	6829      	ldr	r1, [r5, #0]
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 80018d2:	4604      	mov	r4, r0
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 80018da:	4826      	ldr	r0, [pc, #152]	; (8001974 <updateTLSCredentials+0x16c>)
 80018dc:	f7ff ff22 	bl	8001724 <CaptureAndFlashPem>
 80018e0:	4304      	orrs	r4, r0
    if (ret == 0)
 80018e2:	2c00      	cmp	r4, #0
 80018e4:	d1d0      	bne.n	8001888 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 80018e6:	a312      	add	r3, pc, #72	; (adr r3, 8001930 <updateTLSCredentials+0x128>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	a902      	add	r1, sp, #8
 80018ee:	e961 2302 	strd	r2, r3, [r1, #-8]!
      ret = FLASH_update((uint32_t)&lUserConfigPtr->device_tls_magic, &magic, sizeof(uint64_t));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <updateTLSCredentials+0x134>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
 80018fa:	2208      	movs	r2, #8
 80018fc:	3030      	adds	r0, #48	; 0x30
 80018fe:	f7ff fd45 	bl	800138c <FLASH_update>
 8001902:	4604      	mov	r4, r0
 8001904:	e7c0      	b.n	8001888 <updateTLSCredentials+0x80>
      if (dialog_ask("Do you want to update the device certificate? [y/n]\n"))
 8001906:	481c      	ldr	r0, [pc, #112]	; (8001978 <updateTLSCredentials+0x170>)
 8001908:	f7ff fb8a 	bl	8001020 <dialog_ask>
 800190c:	b138      	cbz	r0, 800191e <updateTLSCredentials+0x116>
        ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <updateTLSCredentials+0x134>)
 8001910:	4817      	ldr	r0, [pc, #92]	; (8001970 <updateTLSCredentials+0x168>)
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800191a:	f7ff ff03 	bl	8001724 <CaptureAndFlashPem>
 800191e:	4604      	mov	r4, r0
      if (dialog_ask("Do you want to update the device key? [y/n]\n"))
 8001920:	4816      	ldr	r0, [pc, #88]	; (800197c <updateTLSCredentials+0x174>)
 8001922:	f7ff fb7d 	bl	8001020 <dialog_ask>
 8001926:	2800      	cmp	r0, #0
 8001928:	d0db      	beq.n	80018e2 <updateTLSCredentials+0xda>
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <updateTLSCredentials+0x134>)
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	e7d1      	b.n	80018d4 <updateTLSCredentials+0xcc>
 8001930:	89abcdef 	.word	0x89abcdef
 8001934:	01234567 	.word	0x01234567
 8001938:	0802d70e 	.word	0x0802d70e
 800193c:	20000008 	.word	0x20000008
 8001940:	0802d732 	.word	0x0802d732
 8001944:	0802d774 	.word	0x0802d774
 8001948:	0802d790 	.word	0x0802d790
 800194c:	0802d7d1 	.word	0x0802d7d1
 8001950:	0802d82d 	.word	0x0802d82d
 8001954:	0802d812 	.word	0x0802d812
 8001958:	0802d82c 	.word	0x0802d82c
 800195c:	0802d835 	.word	0x0802d835
 8001960:	08027bda 	.word	0x08027bda
 8001964:	0802d3b1 	.word	0x0802d3b1
 8001968:	0802d8f7 	.word	0x0802d8f7
 800196c:	0802d83d 	.word	0x0802d83d
 8001970:	0802d877 	.word	0x0802d877
 8001974:	0802d88a 	.word	0x0802d88a
 8001978:	0802d895 	.word	0x0802d895
 800197c:	0802d8ca 	.word	0x0802d8ca

08001980 <setIoTDeviceConfig>:
  * @param  In: config    Configuration data.
  * @retval  0  Success
  *         -1  Error
  */
int setIoTDeviceConfig(iot_config_t *config)
{
 8001980:	b508      	push	{r3, lr}
  int ret = 0;
  config->magic = USER_CONF_MAGIC;
 8001982:	a313      	add	r3, pc, #76	; (adr r3, 80019d0 <setIoTDeviceConfig+0x50>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	e9c0 2300 	strd	r2, r3, [r0]

  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <setIoTDeviceConfig+0x40>)
{
 800198e:	4601      	mov	r1, r0
  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f500 5021 	add.w	r0, r0, #10304	; 0x2840
 8001996:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800199a:	3030      	adds	r0, #48	; 0x30
 800199c:	f7ff fcf6 	bl	800138c <FLASH_update>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	da0b      	bge.n	80019bc <setIoTDeviceConfig+0x3c>
  {
    msg_error("Failed programming the IOT config into Flash.\n");
 80019a4:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80019a8:	4906      	ldr	r1, [pc, #24]	; (80019c4 <setIoTDeviceConfig+0x44>)
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <setIoTDeviceConfig+0x48>)
 80019ac:	f021 fdae 	bl	802350c <iprintf>
 80019b0:	4806      	ldr	r0, [pc, #24]	; (80019cc <setIoTDeviceConfig+0x4c>)
 80019b2:	f021 fe33 	bl	802361c <puts>
    ret = -1;
 80019b6:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 80019ba:	bd08      	pop	{r3, pc}
  int ret = 0;
 80019bc:	2000      	movs	r0, #0
  return ret;
 80019be:	e7fc      	b.n	80019ba <setIoTDeviceConfig+0x3a>
 80019c0:	20000008 	.word	0x20000008
 80019c4:	08027bef 	.word	0x08027bef
 80019c8:	0802d3b1 	.word	0x0802d3b1
 80019cc:	0802d927 	.word	0x0802d927
 80019d0:	89abcdef 	.word	0x89abcdef
 80019d4:	01234567 	.word	0x01234567

080019d8 <getIoTDeviceConfig>:
  * @retval   0   Success:  The device configuration is configured and returned to the caller.
  *          -1   Error:    Device configuration absent.

  */
int getIoTDeviceConfig(const char ** const name)
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  int ret = -1;

  if (name != NULL)
 80019da:	b1a8      	cbz	r0, 8001a08 <getIoTDeviceConfig+0x30>
  {
    if (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC)
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <getIoTDeviceConfig+0x40>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f502 5321 	add.w	r3, r2, #10304	; 0x2840
 80019e4:	e9d3 670c 	ldrd	r6, r7, [r3, #48]	; 0x30
 80019e8:	a509      	add	r5, pc, #36	; (adr r5, 8001a10 <getIoTDeviceConfig+0x38>)
 80019ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80019ee:	42af      	cmp	r7, r5
 80019f0:	bf08      	it	eq
 80019f2:	42a6      	cmpeq	r6, r4
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	d105      	bne.n	8001a06 <getIoTDeviceConfig+0x2e>
    {
      *name = lUserConfigPtr->iot_config.device_name;
 80019fa:	f502 5221 	add.w	r2, r2, #10304	; 0x2840
 80019fe:	3238      	adds	r2, #56	; 0x38
 8001a00:	6002      	str	r2, [r0, #0]
      ret = 0;
 8001a02:	4618      	mov	r0, r3
    } else {
      *name = NULL;
    }
  }
  return ret;
}
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *name = NULL;
 8001a06:	6003      	str	r3, [r0, #0]
  int ret = -1;
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001a0c:	e7fa      	b.n	8001a04 <getIoTDeviceConfig+0x2c>
 8001a0e:	bf00      	nop
 8001a10:	89abcdef 	.word	0x89abcdef
 8001a14:	01234567 	.word	0x01234567
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	00000000 	.word	0x00000000

08001a20 <checkIoTDeviceConfig>:
  * @retval 0:  Configuration present.
  *        -1:  No configuration.
  */
int checkIoTDeviceConfig()
{
  return (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC) ? 0 : -1;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <checkIoTDeviceConfig+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8001a28:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a2c:	a304      	add	r3, pc, #16	; (adr r3, 8001a40 <checkIoTDeviceConfig+0x20>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	4299      	cmp	r1, r3
 8001a34:	bf0a      	itet	eq
 8001a36:	4290      	cmpeq	r0, r2
}
 8001a38:	f04f 30ff 	movne.w	r0, #4294967295
 8001a3c:	2000      	moveq	r0, #0
 8001a3e:	4770      	bx	lr
 8001a40:	89abcdef 	.word	0x89abcdef
 8001a44:	01234567 	.word	0x01234567
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	00000000 	.word	0x00000000

08001a50 <getTLSKeys>:
  * @param  Out: private_key    Device private key (PEM format: string)
  * @retval 0:    TLS credentials found, and passed back to the caller.
  *        -1:    TLS credentials not found.
  */
int getTLSKeys(const char ** const root_ca_cert, const char ** const device_cert, const char ** const private_key)
{
 8001a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int rc = -1;
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a54:	4d20      	ldr	r5, [pc, #128]	; (8001ad8 <getTLSKeys+0x88>)
 8001a56:	682b      	ldr	r3, [r5, #0]
{
 8001a58:	4614      	mov	r4, r2
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a5a:	f503 5228 	add.w	r2, r3, #10752	; 0x2a00
 8001a5e:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8001a62:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8001a66:	4607      	mov	r7, r0
 8001a68:	460e      	mov	r6, r1
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a6a:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
 8001a6e:	4549      	cmp	r1, r9
 8001a70:	bf08      	it	eq
 8001a72:	4540      	cmpeq	r0, r8
 8001a74:	d11a      	bne.n	8001aac <getTLSKeys+0x5c>
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001a76:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001a7a:	3330      	adds	r3, #48	; 0x30
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	428b      	cmp	r3, r1
 8001a82:	bf08      	it	eq
 8001a84:	4282      	cmpeq	r2, r0
 8001a86:	d10d      	bne.n	8001aa4 <getTLSKeys+0x54>
  {
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001a88:	b9e7      	cbnz	r7, 8001ac4 <getTLSKeys+0x74>
    if (device_cert !=NULL)      *device_cert = lUserConfigPtr->tls_device_cert;
 8001a8a:	b11e      	cbz	r6, 8001a94 <getTLSKeys+0x44>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001a92:	6033      	str	r3, [r6, #0]
    if (private_key!= NULL)      *private_key = lUserConfigPtr->tls_device_key;
 8001a94:	b11c      	cbz	r4, 8001a9e <getTLSKeys+0x4e>
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a9c:	6023      	str	r3, [r4, #0]
    rc = 0;
 8001a9e:	2000      	movs	r0, #0
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
    if (device_cert !=NULL)      *device_cert = NULL;
    if (private_key!= NULL)      *private_key = NULL;
  }
  return rc;
}
 8001aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001aa4:	f001 fe56 	bl	8003754 <app_needs_device_keypair>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d0ed      	beq.n	8001a88 <getTLSKeys+0x38>
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
 8001aac:	b10f      	cbz	r7, 8001ab2 <getTLSKeys+0x62>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
    if (device_cert !=NULL)      *device_cert = NULL;
 8001ab2:	b10e      	cbz	r6, 8001ab8 <getTLSKeys+0x68>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6033      	str	r3, [r6, #0]
    if (private_key!= NULL)      *private_key = NULL;
 8001ab8:	b10c      	cbz	r4, 8001abe <getTLSKeys+0x6e>
 8001aba:	2300      	movs	r3, #0
 8001abc:	6023      	str	r3, [r4, #0]
  int rc = -1;
 8001abe:	f04f 30ff 	mov.w	r0, #4294967295
  return rc;
 8001ac2:	e7ed      	b.n	8001aa0 <getTLSKeys+0x50>
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	e7df      	b.n	8001a8a <getTLSKeys+0x3a>
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	89abcdef 	.word	0x89abcdef
 8001ad4:	01234567 	.word	0x01234567
 8001ad8:	20000008 	.word	0x20000008

08001adc <mbedtls_net_recv>:
#include "msg.h"
#include <string.h>

/* Non-blocking interface implementation. Timeout is not applicable. */
int mbedtls_net_recv(void *ctx, unsigned char *buf, size_t len)
{
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	4615      	mov	r5, r2
  int ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001ae0:	f000 fa38 	bl	8001f54 <net_sock_recv>
  
  if (ret > 0)
 8001ae4:	1e04      	subs	r4, r0, #0
 8001ae6:	dc0b      	bgt.n	8001b00 <mbedtls_net_recv+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001ae8:	d00c      	beq.n	8001b04 <mbedtls_net_recv+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_READ; 
  }
  
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001aea:	2244      	movs	r2, #68	; 0x44
 8001aec:	4906      	ldr	r1, [pc, #24]	; (8001b08 <mbedtls_net_recv+0x2c>)
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <mbedtls_net_recv+0x30>)
 8001af0:	f021 fd0c 	bl	802350c <iprintf>
 8001af4:	4621      	mov	r1, r4
 8001af6:	462a      	mov	r2, r5
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <mbedtls_net_recv+0x34>)
 
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001afa:	4c06      	ldr	r4, [pc, #24]	; (8001b14 <mbedtls_net_recv+0x38>)
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001afc:	f021 fd06 	bl	802350c <iprintf>
}
 8001b00:	4620      	mov	r0, r4
 8001b02:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_READ; 
 8001b04:	4c04      	ldr	r4, [pc, #16]	; (8001b18 <mbedtls_net_recv+0x3c>)
 8001b06:	e7fb      	b.n	8001b00 <mbedtls_net_recv+0x24>
 8001b08:	08027c02 	.word	0x08027c02
 8001b0c:	0802d3b1 	.word	0x0802d3b1
 8001b10:	0802d955 	.word	0x0802d955
 8001b14:	ffff9400 	.word	0xffff9400
 8001b18:	ffff9700 	.word	0xffff9700

08001b1c <mbedtls_net_recv_blocking>:


/* Blocking interface implementation.*/
int mbedtls_net_recv_blocking(void *ctx, unsigned char *buf, size_t len, uint32_t timeout)
{
 8001b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b1e:	4604      	mov	r4, r0
 8001b20:	460e      	mov	r6, r1
 8001b22:	4615      	mov	r5, r2
  int ret = 0;
  char stimeout[8];
  
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b24:	2108      	movs	r1, #8
 8001b26:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <mbedtls_net_recv_blocking+0x78>)
 8001b28:	4668      	mov	r0, sp
{
 8001b2a:	461f      	mov	r7, r3
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b2c:	f021 fdba 	bl	80236a4 <sniprintf>
 8001b30:	2806      	cmp	r0, #6
 8001b32:	dd0c      	ble.n	8001b4e <mbedtls_net_recv_blocking+0x32>
  {
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b34:	2252      	movs	r2, #82	; 0x52
 8001b36:	4918      	ldr	r1, [pc, #96]	; (8001b98 <mbedtls_net_recv_blocking+0x7c>)
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <mbedtls_net_recv_blocking+0x80>)
    return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
 8001b3a:	4c19      	ldr	r4, [pc, #100]	; (8001ba0 <mbedtls_net_recv_blocking+0x84>)
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b3c:	f021 fce6 	bl	802350c <iprintf>
 8001b40:	4639      	mov	r1, r7
 8001b42:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <mbedtls_net_recv_blocking+0x88>)
 8001b44:	f021 fce2 	bl	802350c <iprintf>
    }
  }
  
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
}
 8001b48:	4620      	mov	r0, r4
 8001b4a:	b003      	add	sp, #12
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (net_sock_setopt((net_sockhnd_t) ctx, "sock_read_timeout", (uint8_t *)stimeout, strlen(stimeout) + 1) == NET_OK)
 8001b4e:	4668      	mov	r0, sp
 8001b50:	f7fe fb48 	bl	80001e4 <strlen>
 8001b54:	466a      	mov	r2, sp
 8001b56:	1c43      	adds	r3, r0, #1
 8001b58:	4913      	ldr	r1, [pc, #76]	; (8001ba8 <mbedtls_net_recv_blocking+0x8c>)
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f000 f956 	bl	8001e0c <net_sock_setopt>
 8001b60:	b958      	cbnz	r0, 8001b7a <mbedtls_net_recv_blocking+0x5e>
    ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001b62:	4620      	mov	r0, r4
 8001b64:	462a      	mov	r2, r5
 8001b66:	4631      	mov	r1, r6
 8001b68:	f000 f9f4 	bl	8001f54 <net_sock_recv>
    if (ret > 0)
 8001b6c:	1e04      	subs	r4, r0, #0
 8001b6e:	dceb      	bgt.n	8001b48 <mbedtls_net_recv_blocking+0x2c>
      switch(ret)
 8001b70:	1ce3      	adds	r3, r4, #3
 8001b72:	d000      	beq.n	8001b76 <mbedtls_net_recv_blocking+0x5a>
 8001b74:	b914      	cbnz	r4, 8001b7c <mbedtls_net_recv_blocking+0x60>
          return MBEDTLS_ERR_SSL_WANT_READ; 
 8001b76:	4c0d      	ldr	r4, [pc, #52]	; (8001bac <mbedtls_net_recv_blocking+0x90>)
 8001b78:	e7e6      	b.n	8001b48 <mbedtls_net_recv_blocking+0x2c>
  int ret = 0;
 8001b7a:	2400      	movs	r4, #0
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b7c:	226e      	movs	r2, #110	; 0x6e
 8001b7e:	4906      	ldr	r1, [pc, #24]	; (8001b98 <mbedtls_net_recv_blocking+0x7c>)
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <mbedtls_net_recv_blocking+0x80>)
 8001b82:	f021 fcc3 	bl	802350c <iprintf>
 8001b86:	4621      	mov	r1, r4
 8001b88:	462a      	mov	r2, r5
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <mbedtls_net_recv_blocking+0x94>)
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001b8c:	4c09      	ldr	r4, [pc, #36]	; (8001bb4 <mbedtls_net_recv_blocking+0x98>)
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b8e:	f021 fcbd 	bl	802350c <iprintf>
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001b92:	e7d9      	b.n	8001b48 <mbedtls_net_recv_blocking+0x2c>
 8001b94:	08030eb1 	.word	0x08030eb1
 8001b98:	08027c13 	.word	0x08027c13
 8001b9c:	0802d3b1 	.word	0x0802d3b1
 8001ba0:	ffff8f00 	.word	0xffff8f00
 8001ba4:	0802d998 	.word	0x0802d998
 8001ba8:	0802d9cf 	.word	0x0802d9cf
 8001bac:	ffff9700 	.word	0xffff9700
 8001bb0:	0802d9e1 	.word	0x0802d9e1
 8001bb4:	ffff9400 	.word	0xffff9400

08001bb8 <mbedtls_net_send>:


int mbedtls_net_send(void *ctx, const unsigned char *buf, size_t len)
{
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4615      	mov	r5, r2
  int ret = net_sock_send((net_sockhnd_t) ctx, buf, len);
 8001bbc:	f000 f9d0 	bl	8001f60 <net_sock_send>
  
  if (ret > 0)
 8001bc0:	1e04      	subs	r4, r0, #0
 8001bc2:	dc0b      	bgt.n	8001bdc <mbedtls_net_send+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001bc4:	d00c      	beq.n	8001be0 <mbedtls_net_send+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
  }
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <mbedtls_net_send+0x2c>)
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <mbedtls_net_send+0x30>)
 8001bcc:	f021 fc9e 	bl	802350c <iprintf>
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	462a      	mov	r2, r5
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <mbedtls_net_send+0x34>)
   *          MBEDTLS_ERR_SSL_INTERNAL_ERROR,
   *          MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY,
   *          MBEDTLS_ERR_SSL_CONN_EOF.
   *  Most often, the error is due to the closure of the connection by the remote host. */ 
  
  return MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY;
 8001bd6:	4c06      	ldr	r4, [pc, #24]	; (8001bf0 <mbedtls_net_send+0x38>)
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001bd8:	f021 fc98 	bl	802350c <iprintf>
  
}
 8001bdc:	4620      	mov	r0, r4
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
 8001be0:	4c04      	ldr	r4, [pc, #16]	; (8001bf4 <mbedtls_net_send+0x3c>)
 8001be2:	e7fb      	b.n	8001bdc <mbedtls_net_send+0x24>
 8001be4:	08027c2d 	.word	0x08027c2d
 8001be8:	0802d3b1 	.word	0x0802d3b1
 8001bec:	0802da2d 	.word	0x0802da2d
 8001bf0:	ffff8780 	.word	0xffff8780
 8001bf4:	ffff9780 	.word	0xffff9780

08001bf8 <net_init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

int net_init(net_hnd_t * nethnd, net_if_t interface, net_if_init_t *f_netinit)
{
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfa:	4607      	mov	r7, r0
 8001bfc:	460c      	mov	r4, r1
  int rc = NET_ERR;
  net_ctxt_t *ctxt = NULL;

  if (f_netinit == NULL)
 8001bfe:	4616      	mov	r6, r2
 8001c00:	b36a      	cbz	r2, 8001c5e <net_init+0x66>
  {
    rc = NET_PARAM;
  }
  else
  {
    ctxt = net_malloc(sizeof(net_ctxt_t));
 8001c02:	2008      	movs	r0, #8
 8001c04:	f020 fb3e 	bl	8022284 <malloc>
    if (ctxt == NULL)
 8001c08:	4605      	mov	r5, r0
 8001c0a:	b958      	cbnz	r0, 8001c24 <net_init+0x2c>
    {
      msg_error("net_init: allocation failed.\n");
 8001c0c:	2253      	movs	r2, #83	; 0x53
 8001c0e:	4915      	ldr	r1, [pc, #84]	; (8001c64 <net_init+0x6c>)
 8001c10:	4815      	ldr	r0, [pc, #84]	; (8001c68 <net_init+0x70>)
 8001c12:	f021 fc7b 	bl	802350c <iprintf>
 8001c16:	4815      	ldr	r0, [pc, #84]	; (8001c6c <net_init+0x74>)
 8001c18:	f021 fd00 	bl	802361c <puts>
      rc = NET_ERR;
 8001c1c:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
    }
  }
  
  return rc;
}
 8001c20:	4620      	mov	r0, r4
 8001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c24:	2000      	movs	r0, #0
      switch(interface)
 8001c26:	2c01      	cmp	r4, #1
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c28:	e9c5 0000 	strd	r0, r0, [r5]
      switch(interface)
 8001c2c:	d109      	bne.n	8001c42 <net_init+0x4a>
          ctxt->itf = interface;  // TODO: register a list of function pointers in function of the interface type. (to be provided by the caller?)
 8001c2e:	702c      	strb	r4, [r5, #0]
          if(f_netinit(NULL) == 0)
 8001c30:	47b0      	blx	r6
 8001c32:	4604      	mov	r4, r0
 8001c34:	b188      	cbz	r0, 8001c5a <net_init+0x62>
  int rc = NET_ERR;
 8001c36:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f020 fb2a 	bl	8022294 <free>
 8001c40:	e7ee      	b.n	8001c20 <net_init+0x28>
          msg_error("net_init: interface type of %d not implemented.\n", interface);
 8001c42:	2277      	movs	r2, #119	; 0x77
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <net_init+0x6c>)
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <net_init+0x70>)
 8001c48:	f021 fc60 	bl	802350c <iprintf>
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	4808      	ldr	r0, [pc, #32]	; (8001c70 <net_init+0x78>)
 8001c50:	f021 fc5c 	bl	802350c <iprintf>
          rc = NET_PARAM;
 8001c54:	f06f 0401 	mvn.w	r4, #1
 8001c58:	e7ef      	b.n	8001c3a <net_init+0x42>
    *nethnd = (net_hnd_t) ctxt;
 8001c5a:	603d      	str	r5, [r7, #0]
 8001c5c:	e7e0      	b.n	8001c20 <net_init+0x28>
    rc = NET_PARAM;
 8001c5e:	f06f 0401 	mvn.w	r4, #1
  return rc;
 8001c62:	e7dd      	b.n	8001c20 <net_init+0x28>
 8001c64:	08027c3e 	.word	0x08027c3e
 8001c68:	0802d3b1 	.word	0x0802d3b1
 8001c6c:	0802da70 	.word	0x0802da70
 8001c70:	0802da8d 	.word	0x0802da8d

08001c74 <net_deinit>:


int net_deinit(net_hnd_t nethnd, net_if_deinit_t *f_netdeinit)
{
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netdeinit == NULL)
 8001c78:	b1a1      	cbz	r1, 8001ca4 <net_deinit+0x30>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001c7a:	6844      	ldr	r4, [r0, #4]
 8001c7c:	b994      	cbnz	r4, 8001ca4 <net_deinit+0x30>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001c7e:	7803      	ldrb	r3, [r0, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <net_deinit+0x1e>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netdeinit(NULL);
 8001c84:	4620      	mov	r0, r4
 8001c86:	4788      	blx	r1
          rc = NET_PARAM;
      }
      
      if (rc == NET_OK)
      {
        net_free((void *)nethnd);
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f020 fb03 	bl	8022294 <free>
          rc = NET_OK;
 8001c8e:	4620      	mov	r0, r4
      }
    }
  }
  return rc;
}
 8001c90:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_deinit: interface type of %d not implemented.\n", ctxt->itf);
 8001c92:	4906      	ldr	r1, [pc, #24]	; (8001cac <net_deinit+0x38>)
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <net_deinit+0x3c>)
 8001c96:	22b3      	movs	r2, #179	; 0xb3
 8001c98:	f021 fc38 	bl	802350c <iprintf>
 8001c9c:	7829      	ldrb	r1, [r5, #0]
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <net_deinit+0x40>)
 8001ca0:	f021 fc34 	bl	802350c <iprintf>
    rc = NET_PARAM;
 8001ca4:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001ca8:	e7f2      	b.n	8001c90 <net_deinit+0x1c>
 8001caa:	bf00      	nop
 8001cac:	08027c47 	.word	0x08027c47
 8001cb0:	0802d3b1 	.word	0x0802d3b1
 8001cb4:	0802dabe 	.word	0x0802dabe

08001cb8 <net_reinit>:


int net_reinit(net_hnd_t nethnd, net_if_reinit_t *f_netreinit)
{
 8001cb8:	b538      	push	{r3, r4, r5, lr}
 8001cba:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netreinit == NULL)
 8001cbc:	b189      	cbz	r1, 8001ce2 <net_reinit+0x2a>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001cbe:	6844      	ldr	r4, [r0, #4]
 8001cc0:	b97c      	cbnz	r4, 8001ce2 <net_reinit+0x2a>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001cc2:	7803      	ldrb	r3, [r0, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d103      	bne.n	8001cd0 <net_reinit+0x18>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netreinit(NULL);
 8001cc8:	4620      	mov	r0, r4
 8001cca:	4788      	blx	r1
          rc = NET_OK;
 8001ccc:	4620      	mov	r0, r4
          rc = NET_PARAM;
      }
    }
  }
  return rc;
}
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_reinit: interface type of %d not implemented.\n", ctxt->itf);
 8001cd0:	4905      	ldr	r1, [pc, #20]	; (8001ce8 <net_reinit+0x30>)
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <net_reinit+0x34>)
 8001cd4:	22e7      	movs	r2, #231	; 0xe7
 8001cd6:	f021 fc19 	bl	802350c <iprintf>
 8001cda:	7829      	ldrb	r1, [r5, #0]
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <net_reinit+0x38>)
 8001cde:	f021 fc15 	bl	802350c <iprintf>
    rc = NET_PARAM;
 8001ce2:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001ce6:	e7f2      	b.n	8001cce <net_reinit+0x16>
 8001ce8:	08027c52 	.word	0x08027c52
 8001cec:	0802d3b1 	.word	0x0802d3b1
 8001cf0:	0802daf1 	.word	0x0802daf1

08001cf4 <net_get_ip_address>:


int net_get_ip_address(net_hnd_t nethnd, net_ipaddr_t * ipAddress)
{
 8001cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001cf6:	4604      	mov	r4, r0
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  
  if (ipAddress == NULL)
 8001cf8:	460d      	mov	r5, r1
 8001cfa:	b309      	cbz	r1, 8001d40 <net_get_ip_address+0x4c>
  {
    rc = NET_PARAM;
  }
  else
  {
    switch(ctxt->itf)
 8001cfc:	7803      	ldrb	r3, [r0, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d114      	bne.n	8001d2c <net_get_ip_address+0x38>
#ifdef USE_WIFI
      case NET_IF_WLAN:
      {
        uint8_t addr[4];
        /* WIFI_GetIP_Address() returns IPv4 addresses in binary format, network byte order. */
        WIFI_Status_t ret = WIFI_GetIP_Address(addr);
 8001d02:	a801      	add	r0, sp, #4
 8001d04:	f003 f822 	bl	8004d4c <WIFI_GetIP_Address>
        if (ret == WIFI_STATUS_OK)
 8001d08:	4604      	mov	r4, r0
 8001d0a:	b960      	cbnz	r0, 8001d26 <net_get_ip_address+0x32>
        {
          ipAddress->ipv = NET_IP_V4;
 8001d0c:	4628      	mov	r0, r5
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d0e:	2210      	movs	r2, #16
          ipAddress->ipv = NET_IP_V4;
 8001d10:	f800 4b01 	strb.w	r4, [r0], #1
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d14:	21ff      	movs	r1, #255	; 0xff
 8001d16:	f020 fb0a 	bl	802232e <memset>
          memcpy(&ipAddress->ip[12], addr, 4);
 8001d1a:	9b01      	ldr	r3, [sp, #4]
 8001d1c:	f8c5 300d 	str.w	r3, [r5, #13]
          rc = NET_OK;
 8001d20:	4620      	mov	r0, r4
        rc = NET_PARAM;
    }
  }
  
  return rc;
}
 8001d22:	b003      	add	sp, #12
 8001d24:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2a:	e7fa      	b.n	8001d22 <net_get_ip_address+0x2e>
        msg_error("net_get_ip_address: interface type of %d not implemented.\n", ctxt->itf);
 8001d2c:	4906      	ldr	r1, [pc, #24]	; (8001d48 <net_get_ip_address+0x54>)
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <net_get_ip_address+0x58>)
 8001d30:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001d34:	f021 fbea 	bl	802350c <iprintf>
 8001d38:	7821      	ldrb	r1, [r4, #0]
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <net_get_ip_address+0x5c>)
 8001d3c:	f021 fbe6 	bl	802350c <iprintf>
    rc = NET_PARAM;
 8001d40:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d44:	e7ed      	b.n	8001d22 <net_get_ip_address+0x2e>
 8001d46:	bf00      	nop
 8001d48:	08027c5d 	.word	0x08027c5d
 8001d4c:	0802d3b1 	.word	0x0802d3b1
 8001d50:	0802db24 	.word	0x0802db24

08001d54 <net_get_mac_address>:

int net_get_mac_address(net_hnd_t nethnd, net_macaddr_t * macAddress)
{
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  switch (ctxt->itf)
 8001d54:	7803      	ldrb	r3, [r0, #0]
 8001d56:	2b01      	cmp	r3, #1
{
 8001d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	460d      	mov	r5, r1
  switch (ctxt->itf)
 8001d5e:	d10f      	bne.n	8001d80 <net_get_mac_address+0x2c>
  {
#ifdef USE_WIFI
    case NET_IF_WLAN:
    {
      uint8_t addr[6];  /* WIFI_GetMAC_Address() returns in binary format. */
      WIFI_Status_t ret = WIFI_GetMAC_Address(addr);
 8001d60:	4668      	mov	r0, sp
 8001d62:	f002 ffe7 	bl	8004d34 <WIFI_GetMAC_Address>
      if (ret == WIFI_STATUS_OK)
 8001d66:	4603      	mov	r3, r0
 8001d68:	b938      	cbnz	r0, 8001d7a <net_get_mac_address+0x26>
      {
        memcpy(macAddress->mac, addr, MIN(sizeof(macAddress->mac), 6));
 8001d6a:	9800      	ldr	r0, [sp, #0]
 8001d6c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001d70:	6028      	str	r0, [r5, #0]
 8001d72:	80aa      	strh	r2, [r5, #4]
        rc = NET_OK;
 8001d74:	4618      	mov	r0, r3
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
      rc = NET_PARAM;
  }
  
  return rc;
}
 8001d76:	b003      	add	sp, #12
 8001d78:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7e:	e7fa      	b.n	8001d76 <net_get_mac_address+0x22>
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
 8001d80:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001d84:	4905      	ldr	r1, [pc, #20]	; (8001d9c <net_get_mac_address+0x48>)
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <net_get_mac_address+0x4c>)
 8001d88:	f021 fbc0 	bl	802350c <iprintf>
 8001d8c:	7821      	ldrb	r1, [r4, #0]
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <net_get_mac_address+0x50>)
 8001d90:	f021 fbbc 	bl	802350c <iprintf>
      rc = NET_PARAM;
 8001d94:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d98:	e7ed      	b.n	8001d76 <net_get_mac_address+0x22>
 8001d9a:	bf00      	nop
 8001d9c:	08027c70 	.word	0x08027c70
 8001da0:	0802d3b1 	.word	0x0802d3b1
 8001da4:	0802db5f 	.word	0x0802db5f

08001da8 <net_sock_create>:


int net_sock_create(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  switch(proto)
 8001da8:	2a02      	cmp	r2, #2
{
 8001daa:	b538      	push	{r3, r4, r5, lr}
 8001dac:	4604      	mov	r4, r0
 8001dae:	460d      	mov	r5, r1
 8001db0:	4613      	mov	r3, r2
  switch(proto)
 8001db2:	d00d      	beq.n	8001dd0 <net_sock_create+0x28>
 8001db4:	2a03      	cmp	r2, #3
 8001db6:	d001      	beq.n	8001dbc <net_sock_create+0x14>
 8001db8:	2a01      	cmp	r2, #1
 8001dba:	d10d      	bne.n	8001dd8 <net_sock_create+0x30>
  {
    case NET_PROTO_TCP:
    case NET_PROTO_UDP:
      switch(ctxt->itf)
 8001dbc:	7822      	ldrb	r2, [r4, #0]
 8001dbe:	2a01      	cmp	r2, #1
 8001dc0:	d114      	bne.n	8001dec <net_sock_create+0x44>
      {
#ifdef USE_WIFI
        case NET_IF_WLAN:
          return net_sock_create_wifi(nethnd, sockhnd, proto);
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	4620      	mov	r0, r4
    default:
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
      return NET_PARAM;
  }
  return NET_PARAM;
}
 8001dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          return net_sock_create_wifi(nethnd, sockhnd, proto);
 8001dcc:	f000 bb3e 	b.w	800244c <net_sock_create_wifi>
}
 8001dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return net_sock_create_mbedtls(nethnd, sockhnd, proto);
 8001dd4:	f000 bf16 	b.w	8002c04 <net_sock_create_mbedtls>
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
 8001dd8:	4906      	ldr	r1, [pc, #24]	; (8001df4 <net_sock_create+0x4c>)
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <net_sock_create+0x50>)
 8001ddc:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8001de0:	f021 fb94 	bl	802350c <iprintf>
 8001de4:	7821      	ldrb	r1, [r4, #0]
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <net_sock_create+0x54>)
 8001de8:	f021 fb90 	bl	802350c <iprintf>
}
 8001dec:	f06f 0001 	mvn.w	r0, #1
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
 8001df2:	bf00      	nop
 8001df4:	08027c98 	.word	0x08027c98
 8001df8:	0802d3b1 	.word	0x0802d3b1
 8001dfc:	0802db9b 	.word	0x0802db9b

08001e00 <net_sock_open>:


int net_sock_open(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001e00:	b410      	push	{r4}
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e02:	6884      	ldr	r4, [r0, #8]
 8001e04:	46a4      	mov	ip, r4
}
 8001e06:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e0a:	4760      	bx	ip

08001e0c <net_sock_setopt>:


int net_sock_setopt(net_sockhnd_t sockhnd, const char * optname, const uint8_t * optbuf, size_t optlen)
{
 8001e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e10:	4681      	mov	r9, r0
 8001e12:	460e      	mov	r6, r1
 8001e14:	469a      	mov	sl, r3
  int rc = NET_PARAM;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001e16:	4617      	mov	r7, r2
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d07d      	beq.n	8001f18 <net_sock_setopt+0x10c>
 8001e1c:	1c1c      	adds	r4, r3, #0
 8001e1e:	bf18      	it	ne
 8001e20:	2401      	movne	r4, #1

#ifdef USE_MBED_TLS
  net_tls_data_t * tlsData = sock->tlsData;
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e22:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d17b      	bne.n	8001f22 <net_sock_setopt+0x116>
  net_tls_data_t * tlsData = sock->tlsData;
 8001e2a:	f8d9 802c 	ldr.w	r8, [r9, #44]	; 0x2c
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e2e:	f1b8 0f00 	cmp.w	r8, #0
 8001e32:	d076      	beq.n	8001f22 <net_sock_setopt+0x116>
  {
    if (strcmp(optname, "tls_ca_certs") == 0)
 8001e34:	493c      	ldr	r1, [pc, #240]	; (8001f28 <net_sock_setopt+0x11c>)
 8001e36:	4630      	mov	r0, r6
 8001e38:	f7fe f9ca 	bl	80001d0 <strcmp>
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d16c      	bne.n	8001f1c <net_sock_setopt+0x110>
    {
      if (has_opt_data)
 8001e42:	2c00      	cmp	r4, #0
 8001e44:	d06a      	beq.n	8001f1c <net_sock_setopt+0x110>
      {
        tlsData->tls_ca_certs = (unsigned char *) optbuf;
 8001e46:	f8c8 7000 	str.w	r7, [r8]
        rc = NET_OK;
      }
    }
    if (strcmp(optname, "tls_dev_cert") == 0)
 8001e4a:	4938      	ldr	r1, [pc, #224]	; (8001f2c <net_sock_setopt+0x120>)
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f7fe f9bf 	bl	80001d0 <strcmp>
 8001e52:	b918      	cbnz	r0, 8001e5c <net_sock_setopt+0x50>
    {
      if (has_opt_data)
 8001e54:	b114      	cbz	r4, 8001e5c <net_sock_setopt+0x50>
      {
        tlsData->tls_dev_cert = (unsigned char *) optbuf;
 8001e56:	f8c8 7008 	str.w	r7, [r8, #8]
        rc = NET_OK;
 8001e5a:	4605      	mov	r5, r0
      }
    }
    if (strcmp(optname, "tls_dev_key") == 0)
 8001e5c:	4934      	ldr	r1, [pc, #208]	; (8001f30 <net_sock_setopt+0x124>)
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f7fe f9b6 	bl	80001d0 <strcmp>
 8001e64:	b918      	cbnz	r0, 8001e6e <net_sock_setopt+0x62>
    {
      if (has_opt_data)
 8001e66:	b114      	cbz	r4, 8001e6e <net_sock_setopt+0x62>
      {
        tlsData->tls_dev_key = (unsigned char *) optbuf;
 8001e68:	f8c8 700c 	str.w	r7, [r8, #12]
        rc = NET_OK;
 8001e6c:	4605      	mov	r5, r0
      }
    }
    if (strcmp(optname, "tls_dev_pwd") == 0)
 8001e6e:	4931      	ldr	r1, [pc, #196]	; (8001f34 <net_sock_setopt+0x128>)
 8001e70:	4630      	mov	r0, r6
 8001e72:	f7fe f9ad 	bl	80001d0 <strcmp>
 8001e76:	b918      	cbnz	r0, 8001e80 <net_sock_setopt+0x74>
    {
      if (has_opt_data)
 8001e78:	b114      	cbz	r4, 8001e80 <net_sock_setopt+0x74>
      {
        tlsData->tls_dev_pwd = (uint8_t *) optbuf;
        tlsData->tls_dev_pwd_len = optlen;
 8001e7a:	e9c8 7a04 	strd	r7, sl, [r8, #16]
        rc = NET_OK;
 8001e7e:	4605      	mov	r5, r0
      }
    }
    if (strcmp(optname, "tls_server_verification") == 0)
 8001e80:	492d      	ldr	r1, [pc, #180]	; (8001f38 <net_sock_setopt+0x12c>)
 8001e82:	4630      	mov	r0, r6
 8001e84:	f7fe f9a4 	bl	80001d0 <strcmp>
 8001e88:	b920      	cbnz	r0, 8001e94 <net_sock_setopt+0x88>
    {
      if (!has_opt_data)
 8001e8a:	b91c      	cbnz	r4, 8001e94 <net_sock_setopt+0x88>
      {
        tlsData->tls_srv_verification = true;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f888 3018 	strb.w	r3, [r8, #24]
        rc = NET_OK;
 8001e92:	4625      	mov	r5, r4
      }
    }
    if (strcmp(optname, "tls_server_noverification") == 0)
 8001e94:	4929      	ldr	r1, [pc, #164]	; (8001f3c <net_sock_setopt+0x130>)
 8001e96:	4630      	mov	r0, r6
 8001e98:	f7fe f99a 	bl	80001d0 <strcmp>
 8001e9c:	b918      	cbnz	r0, 8001ea6 <net_sock_setopt+0x9a>
    {
      if (!has_opt_data)
 8001e9e:	b914      	cbnz	r4, 8001ea6 <net_sock_setopt+0x9a>
      {
        tlsData->tls_srv_verification = false;
 8001ea0:	f888 4018 	strb.w	r4, [r8, #24]
        rc = NET_OK;
 8001ea4:	4625      	mov	r5, r4
      }
    }
    if (strcmp(optname, "tls_server_name") == 0)
 8001ea6:	4926      	ldr	r1, [pc, #152]	; (8001f40 <net_sock_setopt+0x134>)
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f7fe f991 	bl	80001d0 <strcmp>
 8001eae:	b918      	cbnz	r0, 8001eb8 <net_sock_setopt+0xac>
    {
      if (has_opt_data)
 8001eb0:	b114      	cbz	r4, 8001eb8 <net_sock_setopt+0xac>
      {
        tlsData->tls_srv_name = (char *) optbuf;
 8001eb2:	f8c8 701c 	str.w	r7, [r8, #28]
        rc = NET_OK;
 8001eb6:	4605      	mov	r5, r0
      }
    }
  }
#endif /* USE_MBED_TLS */
  
  if (strcmp(optname, "sock_blocking") == 0)
 8001eb8:	4922      	ldr	r1, [pc, #136]	; (8001f44 <net_sock_setopt+0x138>)
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f7fe f988 	bl	80001d0 <strcmp>
 8001ec0:	b920      	cbnz	r0, 8001ecc <net_sock_setopt+0xc0>
  {
    if (!has_opt_data)
 8001ec2:	b91c      	cbnz	r4, 8001ecc <net_sock_setopt+0xc0>
    {
      sock->blocking = true;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f889 3025 	strb.w	r3, [r9, #37]	; 0x25
      rc = NET_OK;
 8001eca:	4625      	mov	r5, r4
    }
  }
  if (strcmp(optname, "sock_noblocking") == 0)
 8001ecc:	491e      	ldr	r1, [pc, #120]	; (8001f48 <net_sock_setopt+0x13c>)
 8001ece:	4630      	mov	r0, r6
 8001ed0:	f7fe f97e 	bl	80001d0 <strcmp>
 8001ed4:	b918      	cbnz	r0, 8001ede <net_sock_setopt+0xd2>
  {
    if (!has_opt_data)
 8001ed6:	b914      	cbnz	r4, 8001ede <net_sock_setopt+0xd2>
    {
      sock->blocking = false;
 8001ed8:	f889 4025 	strb.w	r4, [r9, #37]	; 0x25
      rc = NET_OK;
 8001edc:	4625      	mov	r5, r4
    }
  }
  if (strcmp(optname, "sock_read_timeout") == 0)
 8001ede:	491b      	ldr	r1, [pc, #108]	; (8001f4c <net_sock_setopt+0x140>)
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f7fe f975 	bl	80001d0 <strcmp>
 8001ee6:	4680      	mov	r8, r0
 8001ee8:	b930      	cbnz	r0, 8001ef8 <net_sock_setopt+0xec>
  {
    if (has_opt_data)
 8001eea:	b12c      	cbz	r4, 8001ef8 <net_sock_setopt+0xec>
    {
      sock->read_timeout = atoi((char const *)optbuf);
 8001eec:	4638      	mov	r0, r7
 8001eee:	f020 f87e 	bl	8021fee <atoi>
      rc = NET_OK;
 8001ef2:	4645      	mov	r5, r8
      sock->read_timeout = atoi((char const *)optbuf);
 8001ef4:	f8a9 0026 	strh.w	r0, [r9, #38]	; 0x26
    }
  }
  if (strcmp(optname, "sock_write_timeout") == 0)
 8001ef8:	4630      	mov	r0, r6
 8001efa:	4915      	ldr	r1, [pc, #84]	; (8001f50 <net_sock_setopt+0x144>)
 8001efc:	f7fe f968 	bl	80001d0 <strcmp>
 8001f00:	4606      	mov	r6, r0
 8001f02:	b930      	cbnz	r0, 8001f12 <net_sock_setopt+0x106>
  {
    if (has_opt_data)
 8001f04:	b12c      	cbz	r4, 8001f12 <net_sock_setopt+0x106>
    {
      sock->write_timeout = atoi((char const *)optbuf);
 8001f06:	4638      	mov	r0, r7
 8001f08:	f020 f871 	bl	8021fee <atoi>
      rc = NET_OK;
 8001f0c:	4635      	mov	r5, r6
      sock->write_timeout = atoi((char const *)optbuf);
 8001f0e:	f8a9 0028 	strh.w	r0, [r9, #40]	; 0x28
    }
  }
  return rc;
}
 8001f12:	4628      	mov	r0, r5
 8001f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001f18:	4614      	mov	r4, r2
 8001f1a:	e782      	b.n	8001e22 <net_sock_setopt+0x16>
  int rc = NET_PARAM;
 8001f1c:	f06f 0501 	mvn.w	r5, #1
 8001f20:	e793      	b.n	8001e4a <net_sock_setopt+0x3e>
 8001f22:	f06f 0501 	mvn.w	r5, #1
 8001f26:	e7c7      	b.n	8001eb8 <net_sock_setopt+0xac>
 8001f28:	0802dbd3 	.word	0x0802dbd3
 8001f2c:	0802dbe0 	.word	0x0802dbe0
 8001f30:	0802dbed 	.word	0x0802dbed
 8001f34:	0802dbf9 	.word	0x0802dbf9
 8001f38:	0802dc05 	.word	0x0802dc05
 8001f3c:	0802dc1d 	.word	0x0802dc1d
 8001f40:	0802dc37 	.word	0x0802dc37
 8001f44:	0802dc47 	.word	0x0802dc47
 8001f48:	0802dc55 	.word	0x0802dc55
 8001f4c:	0802d9cf 	.word	0x0802d9cf
 8001f50:	0802dc65 	.word	0x0802dc65

08001f54 <net_sock_recv>:


int net_sock_recv(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.recv != NULL) ? sock->methods.recv(sockhnd, buf, len) : NET_PARAM;
 8001f54:	68c3      	ldr	r3, [r0, #12]
 8001f56:	b103      	cbz	r3, 8001f5a <net_sock_recv+0x6>
 8001f58:	4718      	bx	r3
}
 8001f5a:	f06f 0001 	mvn.w	r0, #1
 8001f5e:	4770      	bx	lr

08001f60 <net_sock_send>:


int net_sock_send(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.send != NULL) ? sock->methods.send(sockhnd, buf, len) : NET_PARAM;
 8001f60:	6943      	ldr	r3, [r0, #20]
 8001f62:	b103      	cbz	r3, 8001f66 <net_sock_send+0x6>
 8001f64:	4718      	bx	r3
} 
 8001f66:	f06f 0001 	mvn.w	r0, #1
 8001f6a:	4770      	bx	lr

08001f6c <net_sock_close>:
  

int net_sock_close(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.close != NULL) ? sock->methods.close(sockhnd) : NET_PARAM;
 8001f6c:	69c3      	ldr	r3, [r0, #28]
 8001f6e:	b103      	cbz	r3, 8001f72 <net_sock_close+0x6>
 8001f70:	4718      	bx	r3
}
 8001f72:	f06f 0001 	mvn.w	r0, #1
 8001f76:	4770      	bx	lr

08001f78 <net_sock_destroy>:


int net_sock_destroy(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.destroy != NULL) ? sock->methods.destroy(sockhnd) : NET_PARAM;
 8001f78:	6a03      	ldr	r3, [r0, #32]
 8001f7a:	b103      	cbz	r3, 8001f7e <net_sock_destroy+0x6>
 8001f7c:	4718      	bx	r3
}
 8001f7e:	f06f 0001 	mvn.w	r0, #1
 8001f82:	4770      	bx	lr

08001f84 <net_timeout_left_ms>:
int32_t net_timeout_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
  int32_t ret = 0;
  uint32_t wrap_end = 0;
  
  if (now < init)
 8001f84:	4281      	cmp	r1, r0
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", init, now);
    wrap_end = UINT32_MAX - init;
 8001f86:	bf38      	it	cc
 8001f88:	43c3      	mvncc	r3, r0
  }
  ret = wrap_end - (now - init) + timeout;
 8001f8a:	4410      	add	r0, r2
  uint32_t wrap_end = 0;
 8001f8c:	bf28      	it	cs
 8001f8e:	2300      	movcs	r3, #0
  ret = wrap_end - (now - init) + timeout;
 8001f90:	1a40      	subs	r0, r0, r1

  return ret;
}
 8001f92:	4418      	add	r0, r3
 8001f94:	4770      	bx	lr

08001f96 <net_sock_destroy_tcp_wifi>:

int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd)
{
  int rc = NET_ERR;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
  net_ctxt_t *ctxt = sock->net;
 8001f96:	6802      	ldr	r2, [r0, #0]
{
 8001f98:	b508      	push	{r3, lr}
    
  /* Find the parent in the linked list.
   * Unlink and free. 
   */
  if (sock == ctxt->sock_list)
 8001f9a:	6853      	ldr	r3, [r2, #4]
 8001f9c:	4283      	cmp	r3, r0
 8001f9e:	d105      	bne.n	8001fac <net_sock_destroy_tcp_wifi+0x16>
  {
    ctxt->sock_list = sock->next;
 8001fa0:	6843      	ldr	r3, [r0, #4]
 8001fa2:	6053      	str	r3, [r2, #4]
      cur = cur->next;
    } while(cur->next != NULL);
  }
  if (rc == NET_OK)
  {
    net_free(sock);
 8001fa4:	f020 f976 	bl	8022294 <free>
 8001fa8:	2000      	movs	r0, #0
  }
  
  return rc;
 8001faa:	e00a      	b.n	8001fc2 <net_sock_destroy_tcp_wifi+0x2c>
      if (cur->next == sock)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4282      	cmp	r2, r0
 8001fb0:	6851      	ldr	r1, [r2, #4]
 8001fb2:	d101      	bne.n	8001fb8 <net_sock_destroy_tcp_wifi+0x22>
        cur->next = sock->next;
 8001fb4:	6059      	str	r1, [r3, #4]
 8001fb6:	e7f5      	b.n	8001fa4 <net_sock_destroy_tcp_wifi+0xe>
 8001fb8:	4613      	mov	r3, r2
    } while(cur->next != NULL);
 8001fba:	2900      	cmp	r1, #0
 8001fbc:	d1f6      	bne.n	8001fac <net_sock_destroy_tcp_wifi+0x16>
  int rc = NET_ERR;
 8001fbe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001fc2:	bd08      	pop	{r3, pc}

08001fc4 <net_sock_open_wifi>:
{
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	461d      	mov	r5, r3
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9302      	str	r3, [sp, #8]
  memset(underlying_socket_busy, 0, sizeof(underlying_socket_busy));
 8001fce:	9303      	str	r3, [sp, #12]
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001fd0:	6803      	ldr	r3, [r0, #0]
{
 8001fd2:	460f      	mov	r7, r1
 8001fd4:	4616      	mov	r6, r2
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001fd6:	6859      	ldr	r1, [r3, #4]
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
{
 8001fdc:	4604      	mov	r4, r0
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8001fde:	6302      	str	r2, [r0, #48]	; 0x30
    if ( ((cur->proto == NET_PROTO_TCP) || (cur->proto == NET_PROTO_UDP) )&& ((int) cur->underlying_sock_ctxt >= 0) )
 8001fe0:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
 8001fe4:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8001fe8:	2a01      	cmp	r2, #1
 8001fea:	d106      	bne.n	8001ffa <net_sock_open_wifi+0x36>
 8001fec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001fee:	2b00      	cmp	r3, #0
      underlying_socket_busy[(int) cur->underlying_sock_ctxt] = true;
 8001ff0:	bfa2      	ittt	ge
 8001ff2:	a804      	addge	r0, sp, #16
 8001ff4:	181b      	addge	r3, r3, r0
 8001ff6:	f803 2c04 	strbge.w	r2, [r3, #-4]
    cur = cur->next;
 8001ffa:	6849      	ldr	r1, [r1, #4]
  } while (cur != NULL);
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d1ef      	bne.n	8001fe0 <net_sock_open_wifi+0x1c>
    if (underlying_socket_busy[i] == false)
 8002000:	ab03      	add	r3, sp, #12
 8002002:	5cca      	ldrb	r2, [r1, r3]
 8002004:	b94a      	cbnz	r2, 800201a <net_sock_open_wifi+0x56>
      sock->underlying_sock_ctxt = (net_sockhnd_t) i;
 8002006:	6321      	str	r1, [r4, #48]	; 0x30
    switch(sock->proto)
 8002008:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800200c:	2b01      	cmp	r3, #1
 800200e:	d008      	beq.n	8002022 <net_sock_open_wifi+0x5e>
 8002010:	2b03      	cmp	r3, #3
 8002012:	d011      	beq.n	8002038 <net_sock_open_wifi+0x74>
  int rc = NET_ERR;
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	e026      	b.n	8002068 <net_sock_open_wifi+0xa4>
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 800201a:	3101      	adds	r1, #1
 800201c:	2904      	cmp	r1, #4
 800201e:	d1f0      	bne.n	8002002 <net_sock_open_wifi+0x3e>
 8002020:	e7f2      	b.n	8002008 <net_sock_open_wifi+0x44>
        if (localport != 0)
 8002022:	bb2d      	cbnz	r5, 8002070 <net_sock_open_wifi+0xac>
          if (WIFI_GetHostAddress((char *)hostname, ip_addr) != WIFI_STATUS_OK)
 8002024:	a902      	add	r1, sp, #8
 8002026:	4638      	mov	r0, r7
 8002028:	f002 fea0 	bl	8004d6c <WIFI_GetHostAddress>
 800202c:	b1f0      	cbz	r0, 800206c <net_sock_open_wifi+0xa8>
            msg_info("The address of %s could not be resolved.\n", hostname);
 800202e:	4639      	mov	r1, r7
 8002030:	4811      	ldr	r0, [pc, #68]	; (8002078 <net_sock_open_wifi+0xb4>)
 8002032:	f021 fa6b 	bl	802350c <iprintf>
 8002036:	e7ed      	b.n	8002014 <net_sock_open_wifi+0x50>
        sock->localport = localport;
 8002038:	6365      	str	r5, [r4, #52]	; 0x34
        proto = WIFI_UDP_PROTOCOL;
 800203a:	2101      	movs	r1, #1
      if( WIFI_STATUS_OK != WIFI_OpenClientConnection((uint32_t) sock->underlying_sock_ctxt,
 800203c:	b2ad      	uxth	r5, r5
 800203e:	b2b6      	uxth	r6, r6
 8002040:	9501      	str	r5, [sp, #4]
 8002042:	9600      	str	r6, [sp, #0]
 8002044:	ab02      	add	r3, sp, #8
 8002046:	4a0d      	ldr	r2, [pc, #52]	; (800207c <net_sock_open_wifi+0xb8>)
 8002048:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800204a:	f002 fe9b 	bl	8004d84 <WIFI_OpenClientConnection>
 800204e:	b158      	cbz	r0, 8002068 <net_sock_open_wifi+0xa4>
        msg_error("Failed opening the underlying Wifi socket %d.\n", (int) sock->underlying_sock_ctxt);
 8002050:	22c9      	movs	r2, #201	; 0xc9
 8002052:	490b      	ldr	r1, [pc, #44]	; (8002080 <net_sock_open_wifi+0xbc>)
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <net_sock_open_wifi+0xc0>)
 8002056:	f021 fa59 	bl	802350c <iprintf>
 800205a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800205c:	480a      	ldr	r0, [pc, #40]	; (8002088 <net_sock_open_wifi+0xc4>)
 800205e:	f021 fa55 	bl	802350c <iprintf>
        sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002062:	f04f 30ff 	mov.w	r0, #4294967295
 8002066:	6320      	str	r0, [r4, #48]	; 0x30
}
 8002068:	b005      	add	sp, #20
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            proto = WIFI_TCP_PROTOCOL;
 800206c:	4629      	mov	r1, r5
 800206e:	e7e5      	b.n	800203c <net_sock_open_wifi+0x78>
          rc = NET_PARAM;
 8002070:	f06f 0001 	mvn.w	r0, #1
 8002074:	e7f8      	b.n	8002068 <net_sock_open_wifi+0xa4>
 8002076:	bf00      	nop
 8002078:	0802dc78 	.word	0x0802dc78
 800207c:	0802fdc9 	.word	0x0802fdc9
 8002080:	08027ca8 	.word	0x08027ca8
 8002084:	0802d3b1 	.word	0x0802d3b1
 8002088:	0802dca2 	.word	0x0802dca2

0800208c <net_sock_recv_tcp_wifi>:
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	b085      	sub	sp, #20
  uint16_t read = 0;
 8002092:	f10d 0810 	add.w	r8, sp, #16
 8002096:	2300      	movs	r3, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 8002098:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
 800209c:	4614      	mov	r4, r2
{
 800209e:	468a      	mov	sl, r1
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020a0:	bf28      	it	cs
 80020a2:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80020a6:	4605      	mov	r5, r0
 80020a8:	4617      	mov	r7, r2
  uint16_t read = 0;
 80020aa:	f828 3d02 	strh.w	r3, [r8, #-2]!
  uint32_t start_time = HAL_GetTick();
 80020ae:	f006 fcd1 	bl	8008a54 <HAL_GetTick>
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020b2:	b2a4      	uxth	r4, r4
  uint32_t start_time = HAL_GetTick();
 80020b4:	4683      	mov	fp, r0
  uint8_t * tmp_buf = buf;
 80020b6:	4656      	mov	r6, sl
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80020b8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80020bc:	bb43      	cbnz	r3, 8002110 <net_sock_recv_tcp_wifi+0x84>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80020be:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80020c2:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80020c6:	bb7b      	cbnz	r3, 8002128 <net_sock_recv_tcp_wifi+0x9c>
 80020c8:	2301      	movs	r3, #1
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4622      	mov	r2, r4
 80020ce:	4643      	mov	r3, r8
 80020d0:	4631      	mov	r1, r6
 80020d2:	f002 feb7 	bl	8004e44 <WIFI_ReceiveData>
    if (status != WIFI_STATUS_OK)
 80020d6:	4681      	mov	r9, r0
 80020d8:	b340      	cbz	r0, 800212c <net_sock_recv_tcp_wifi+0xa0>
      msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 80020da:	22f3      	movs	r2, #243	; 0xf3
 80020dc:	4927      	ldr	r1, [pc, #156]	; (800217c <net_sock_recv_tcp_wifi+0xf0>)
 80020de:	4828      	ldr	r0, [pc, #160]	; (8002180 <net_sock_recv_tcp_wifi+0xf4>)
 80020e0:	f021 fa14 	bl	802350c <iprintf>
 80020e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80020ec:	4825      	ldr	r0, [pc, #148]	; (8002184 <net_sock_recv_tcp_wifi+0xf8>)
 80020ee:	4623      	mov	r3, r4
 80020f0:	4649      	mov	r1, r9
 80020f2:	f021 fa0b 	bl	802350c <iprintf>
      msg_error("The port is likely to have been closed by the server.\n")
 80020f6:	22f4      	movs	r2, #244	; 0xf4
 80020f8:	4920      	ldr	r1, [pc, #128]	; (800217c <net_sock_recv_tcp_wifi+0xf0>)
 80020fa:	4821      	ldr	r0, [pc, #132]	; (8002180 <net_sock_recv_tcp_wifi+0xf4>)
 80020fc:	f021 fa06 	bl	802350c <iprintf>
 8002100:	4821      	ldr	r0, [pc, #132]	; (8002188 <net_sock_recv_tcp_wifi+0xfc>)
 8002102:	f021 fa8b 	bl	802361c <puts>
      rc = NET_EOF;
 8002106:	f06f 0003 	mvn.w	r0, #3
}
 800210a:	b005      	add	sp, #20
 800210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8002110:	f006 fca0 	bl	8008a54 <HAL_GetTick>
 8002114:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 8002116:	4601      	mov	r1, r0
 8002118:	4658      	mov	r0, fp
 800211a:	f7ff ff33 	bl	8001f84 <net_timeout_left_ms>
 800211e:	2800      	cmp	r0, #0
 8002120:	dccd      	bgt.n	80020be <net_sock_recv_tcp_wifi+0x32>
      rc = NET_TIMEOUT;
 8002122:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : tmp_buf - buf;
 8002126:	e7f0      	b.n	800210a <net_sock_recv_tcp_wifi+0x7e>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8002128:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800212a:	e7ce      	b.n	80020ca <net_sock_recv_tcp_wifi+0x3e>
      if (read > tmp_len)
 800212c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002130:	42a3      	cmp	r3, r4
 8002132:	d90d      	bls.n	8002150 <net_sock_recv_tcp_wifi+0xc4>
        msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 8002134:	22fc      	movs	r2, #252	; 0xfc
 8002136:	4911      	ldr	r1, [pc, #68]	; (800217c <net_sock_recv_tcp_wifi+0xf0>)
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <net_sock_recv_tcp_wifi+0xf4>)
 800213a:	f021 f9e7 	bl	802350c <iprintf>
 800213e:	4622      	mov	r2, r4
 8002140:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002144:	4811      	ldr	r0, [pc, #68]	; (800218c <net_sock_recv_tcp_wifi+0x100>)
 8002146:	f021 f9e1 	bl	802350c <iprintf>
        rc = NET_ERR;
 800214a:	f04f 30ff 	mov.w	r0, #4294967295
 800214e:	e7dc      	b.n	800210a <net_sock_recv_tcp_wifi+0x7e>
      tmp_buf += read;
 8002150:	441e      	add	r6, r3
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8002152:	eba6 000a 	sub.w	r0, r6, sl
 8002156:	42b8      	cmp	r0, r7
 8002158:	d00d      	beq.n	8002176 <net_sock_recv_tcp_wifi+0xea>
 800215a:	1a3c      	subs	r4, r7, r0
 800215c:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8002160:	bf28      	it	cs
 8002162:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 8002166:	b2a4      	uxth	r4, r4
  } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ce      	bne.n	800210a <net_sock_recv_tcp_wifi+0x7e>
 800216c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1a1      	bne.n	80020b8 <net_sock_recv_tcp_wifi+0x2c>
 8002174:	e7c9      	b.n	800210a <net_sock_recv_tcp_wifi+0x7e>
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8002176:	464c      	mov	r4, r9
 8002178:	e7f6      	b.n	8002168 <net_sock_recv_tcp_wifi+0xdc>
 800217a:	bf00      	nop
 800217c:	08027cbb 	.word	0x08027cbb
 8002180:	0802d3b1 	.word	0x0802d3b1
 8002184:	0802dcd1 	.word	0x0802dcd1
 8002188:	0802dd2a 	.word	0x0802dd2a
 800218c:	0802dd60 	.word	0x0802dd60

08002190 <net_sock_recvfrom_udp_wifi>:
{
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	b08b      	sub	sp, #44	; 0x2c
  uint16_t read = 0;
 8002196:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 800219a:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  uint16_t read = 0;
 800219e:	f04f 0700 	mov.w	r7, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021a2:	4614      	mov	r4, r2
{
 80021a4:	4605      	mov	r5, r0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021a6:	bf28      	it	cs
 80021a8:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80021ac:	9104      	str	r1, [sp, #16]
 80021ae:	4691      	mov	r9, r2
 80021b0:	9305      	str	r3, [sp, #20]
  uint16_t read = 0;
 80021b2:	f82a 7d08 	strh.w	r7, [sl, #-8]!
  uint32_t start_time = HAL_GetTick();
 80021b6:	f006 fc4d 	bl	8008a54 <HAL_GetTick>
  uint8_t * tmp_buf = buf;
 80021ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
  uint32_t start_time = HAL_GetTick();
 80021be:	9006      	str	r0, [sp, #24]
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021c0:	b2a4      	uxth	r4, r4
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80021c2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
      uint16_t port = 0;
 80021c6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
      uint8_t ip[4] = { 0, 0, 0, 0 };
 80021ca:	9709      	str	r7, [sp, #36]	; 0x24
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80021cc:	bb8b      	cbnz	r3, 8002232 <net_sock_recvfrom_udp_wifi+0xa2>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80021ce:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80021d2:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d137      	bne.n	800224a <net_sock_recvfrom_udp_wifi+0xba>
 80021da:	2301      	movs	r3, #1
 80021dc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80021e0:	9202      	str	r2, [sp, #8]
 80021e2:	aa09      	add	r2, sp, #36	; 0x24
 80021e4:	e9cd 3200 	strd	r3, r2, [sp]
 80021e8:	4641      	mov	r1, r8
 80021ea:	4653      	mov	r3, sl
 80021ec:	4622      	mov	r2, r4
 80021ee:	f002 fe3b 	bl	8004e68 <WIFI_ReceiveDataFrom>
      if (status != WIFI_STATUS_OK)
 80021f2:	4683      	mov	fp, r0
 80021f4:	b358      	cbz	r0, 800224e <net_sock_recvfrom_udp_wifi+0xbe>
        msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 80021f6:	f240 1227 	movw	r2, #295	; 0x127
 80021fa:	4932      	ldr	r1, [pc, #200]	; (80022c4 <net_sock_recvfrom_udp_wifi+0x134>)
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <net_sock_recvfrom_udp_wifi+0x138>)
 80021fe:	f021 f985 	bl	802350c <iprintf>
 8002202:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800220a:	4830      	ldr	r0, [pc, #192]	; (80022cc <net_sock_recvfrom_udp_wifi+0x13c>)
 800220c:	4623      	mov	r3, r4
 800220e:	4659      	mov	r1, fp
 8002210:	f021 f97c 	bl	802350c <iprintf>
        msg_error("The port is likely to have been closed by the server.\n")
 8002214:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002218:	492a      	ldr	r1, [pc, #168]	; (80022c4 <net_sock_recvfrom_udp_wifi+0x134>)
 800221a:	482b      	ldr	r0, [pc, #172]	; (80022c8 <net_sock_recvfrom_udp_wifi+0x138>)
 800221c:	f021 f976 	bl	802350c <iprintf>
 8002220:	482b      	ldr	r0, [pc, #172]	; (80022d0 <net_sock_recvfrom_udp_wifi+0x140>)
 8002222:	f021 f9fb 	bl	802361c <puts>
        rc = NET_EOF;
 8002226:	f06f 0603 	mvn.w	r6, #3
}
 800222a:	4630      	mov	r0, r6
 800222c:	b00b      	add	sp, #44	; 0x2c
 800222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8002232:	f006 fc0f 	bl	8008a54 <HAL_GetTick>
 8002236:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 8002238:	4601      	mov	r1, r0
 800223a:	9806      	ldr	r0, [sp, #24]
 800223c:	f7ff fea2 	bl	8001f84 <net_timeout_left_ms>
 8002240:	2800      	cmp	r0, #0
 8002242:	dcc4      	bgt.n	80021ce <net_sock_recvfrom_udp_wifi+0x3e>
        rc = NET_TIMEOUT;
 8002244:	f06f 0602 	mvn.w	r6, #2
 8002248:	e7ef      	b.n	800222a <net_sock_recvfrom_udp_wifi+0x9a>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800224a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800224c:	e7c6      	b.n	80021dc <net_sock_recvfrom_udp_wifi+0x4c>
        if (read > tmp_len)
 800224e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8002252:	42a3      	cmp	r3, r4
 8002254:	d90e      	bls.n	8002274 <net_sock_recvfrom_udp_wifi+0xe4>
          msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 8002256:	f44f 7298 	mov.w	r2, #304	; 0x130
 800225a:	491a      	ldr	r1, [pc, #104]	; (80022c4 <net_sock_recvfrom_udp_wifi+0x134>)
 800225c:	481a      	ldr	r0, [pc, #104]	; (80022c8 <net_sock_recvfrom_udp_wifi+0x138>)
 800225e:	f021 f955 	bl	802350c <iprintf>
 8002262:	4622      	mov	r2, r4
 8002264:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8002268:	481a      	ldr	r0, [pc, #104]	; (80022d4 <net_sock_recvfrom_udp_wifi+0x144>)
 800226a:	f021 f94f 	bl	802350c <iprintf>
          rc = NET_ERR;
 800226e:	f04f 36ff 	mov.w	r6, #4294967295
 8002272:	e7da      	b.n	800222a <net_sock_recvfrom_udp_wifi+0x9a>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8002274:	9a04      	ldr	r2, [sp, #16]
        tmp_buf += read;
 8002276:	4498      	add	r8, r3
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8002278:	eba8 0602 	sub.w	r6, r8, r2
 800227c:	454e      	cmp	r6, r9
 800227e:	d01f      	beq.n	80022c0 <net_sock_recvfrom_udp_wifi+0x130>
 8002280:	eba9 0406 	sub.w	r4, r9, r6
 8002284:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8002288:	bf28      	it	cs
 800228a:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 800228e:	b2a4      	uxth	r4, r4
      remoteaddress->ipv = NET_IP_V4;
 8002290:	9805      	ldr	r0, [sp, #20]
 8002292:	9307      	str	r3, [sp, #28]
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 8002294:	2210      	movs	r2, #16
      remoteaddress->ipv = NET_IP_V4;
 8002296:	f800 7b01 	strb.w	r7, [r0], #1
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 800229a:	21ff      	movs	r1, #255	; 0xff
 800229c:	f020 f847 	bl	802232e <memset>
      memcpy(&remoteaddress->ip[12], ip, 4);
 80022a0:	9b05      	ldr	r3, [sp, #20]
 80022a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022a4:	f8c3 200d 	str.w	r2, [r3, #13]
      *remoteport = port;
 80022a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80022aa:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80022ae:	601a      	str	r2, [r3, #0]
    } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 80022b0:	9b07      	ldr	r3, [sp, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1b9      	bne.n	800222a <net_sock_recvfrom_udp_wifi+0x9a>
 80022b6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d181      	bne.n	80021c2 <net_sock_recvfrom_udp_wifi+0x32>
 80022be:	e7b4      	b.n	800222a <net_sock_recvfrom_udp_wifi+0x9a>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022c0:	4604      	mov	r4, r0
 80022c2:	e7e5      	b.n	8002290 <net_sock_recvfrom_udp_wifi+0x100>
 80022c4:	08027cd2 	.word	0x08027cd2
 80022c8:	0802d3b1 	.word	0x0802d3b1
 80022cc:	0802dcd1 	.word	0x0802dcd1
 80022d0:	0802dd2a 	.word	0x0802dd2a
 80022d4:	0802dd60 	.word	0x0802dd60

080022d8 <net_sock_send_tcp_wifi>:
{
 80022d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint16_t sent = 0;
 80022dc:	ae04      	add	r6, sp, #16
 80022de:	2300      	movs	r3, #0
{
 80022e0:	4615      	mov	r5, r2
 80022e2:	4604      	mov	r4, r0
 80022e4:	4688      	mov	r8, r1
  uint16_t sent = 0;
 80022e6:	f826 3d02 	strh.w	r3, [r6, #-2]!
  uint32_t start_time = HAL_GetTick();
 80022ea:	f006 fbb3 	bl	8008a54 <HAL_GetTick>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80022ee:	b2ad      	uxth	r5, r5
  uint32_t start_time = HAL_GetTick();
 80022f0:	4607      	mov	r7, r0
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80022f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80022f6:	b9d3      	cbnz	r3, 800232e <net_sock_send_tcp_wifi+0x56>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80022f8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80022fc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002300:	bb0b      	cbnz	r3, 8002346 <net_sock_send_tcp_wifi+0x6e>
 8002302:	2301      	movs	r3, #1
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	462a      	mov	r2, r5
 8002308:	4633      	mov	r3, r6
 800230a:	4641      	mov	r1, r8
 800230c:	f002 fd72 	bl	8004df4 <WIFI_SendData>
    if (status !=  WIFI_STATUS_OK)
 8002310:	b1d8      	cbz	r0, 800234a <net_sock_send_tcp_wifi+0x72>
      msg_error("Send failed.\n");
 8002312:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8002316:	4911      	ldr	r1, [pc, #68]	; (800235c <net_sock_send_tcp_wifi+0x84>)
 8002318:	4811      	ldr	r0, [pc, #68]	; (8002360 <net_sock_send_tcp_wifi+0x88>)
 800231a:	f021 f8f7 	bl	802350c <iprintf>
 800231e:	4811      	ldr	r0, [pc, #68]	; (8002364 <net_sock_send_tcp_wifi+0x8c>)
 8002320:	f021 f97c 	bl	802361c <puts>
      rc = NET_ERR;
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002328:	b004      	add	sp, #16
 800232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 800232e:	f006 fb91 	bl	8008a54 <HAL_GetTick>
 8002332:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002334:	4601      	mov	r1, r0
 8002336:	4638      	mov	r0, r7
 8002338:	f7ff fe24 	bl	8001f84 <net_timeout_left_ms>
 800233c:	2800      	cmp	r0, #0
 800233e:	dcdb      	bgt.n	80022f8 <net_sock_send_tcp_wifi+0x20>
      rc = NET_TIMEOUT;
 8002340:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 8002344:	e7f0      	b.n	8002328 <net_sock_send_tcp_wifi+0x50>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002346:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002348:	e7dc      	b.n	8002304 <net_sock_send_tcp_wifi+0x2c>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 800234a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800234e:	2800      	cmp	r0, #0
 8002350:	d1ea      	bne.n	8002328 <net_sock_send_tcp_wifi+0x50>
 8002352:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1cb      	bne.n	80022f2 <net_sock_send_tcp_wifi+0x1a>
 800235a:	e7e5      	b.n	8002328 <net_sock_send_tcp_wifi+0x50>
 800235c:	08027ced 	.word	0x08027ced
 8002360:	0802d3b1 	.word	0x0802d3b1
 8002364:	0802dda6 	.word	0x0802dda6

08002368 <net_sock_sendto_udp_wifi>:
{
 8002368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	461d      	mov	r5, r3
  uint16_t sent = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	f8ad 3012 	strh.w	r3, [sp, #18]
{
 8002376:	4604      	mov	r4, r0
 8002378:	460f      	mov	r7, r1
 800237a:	4690      	mov	r8, r2
  uint32_t start_time = HAL_GetTick();
 800237c:	f006 fb6a 	bl	8008a54 <HAL_GetTick>
  if (remoteaddress->ipv != NET_IP_V4)
 8002380:	782b      	ldrb	r3, [r5, #0]
  uint32_t start_time = HAL_GetTick();
 8002382:	4606      	mov	r6, r0
  if (remoteaddress->ipv != NET_IP_V4)
 8002384:	2b00      	cmp	r3, #0
 8002386:	d148      	bne.n	800241a <net_sock_sendto_udp_wifi+0xb2>
    ip_addr[i] = remoteaddress->ip[12+i];
 8002388:	7b6b      	ldrb	r3, [r5, #13]
 800238a:	f88d 3014 	strb.w	r3, [sp, #20]
 800238e:	7bab      	ldrb	r3, [r5, #14]
 8002390:	f88d 3015 	strb.w	r3, [sp, #21]
 8002394:	7beb      	ldrb	r3, [r5, #15]
 8002396:	f88d 3016 	strb.w	r3, [sp, #22]
 800239a:	7c2b      	ldrb	r3, [r5, #16]
 800239c:	f88d 3017 	strb.w	r3, [sp, #23]
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80023a0:	fa1f f888 	uxth.w	r8, r8
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80023a4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023a8:	bb03      	cbnz	r3, 80023ec <net_sock_sendto_udp_wifi+0x84>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80023aa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023ae:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80023b2:	bb3b      	cbnz	r3, 8002404 <net_sock_sendto_udp_wifi+0x9c>
 80023b4:	2301      	movs	r3, #1
 80023b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80023b8:	b292      	uxth	r2, r2
 80023ba:	9202      	str	r2, [sp, #8]
 80023bc:	aa05      	add	r2, sp, #20
 80023be:	e9cd 3200 	strd	r3, r2, [sp]
 80023c2:	4639      	mov	r1, r7
 80023c4:	f10d 0312 	add.w	r3, sp, #18
 80023c8:	4642      	mov	r2, r8
 80023ca:	f002 fd25 	bl	8004e18 <WIFI_SendDataTo>
    if (status !=  WIFI_STATUS_OK)
 80023ce:	b1d8      	cbz	r0, 8002408 <net_sock_sendto_udp_wifi+0xa0>
      msg_error("Send failed.\n");
 80023d0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80023d4:	4912      	ldr	r1, [pc, #72]	; (8002420 <net_sock_sendto_udp_wifi+0xb8>)
 80023d6:	4813      	ldr	r0, [pc, #76]	; (8002424 <net_sock_sendto_udp_wifi+0xbc>)
 80023d8:	f021 f898 	bl	802350c <iprintf>
 80023dc:	4812      	ldr	r0, [pc, #72]	; (8002428 <net_sock_sendto_udp_wifi+0xc0>)
 80023de:	f021 f91d 	bl	802361c <puts>
      rc = NET_ERR;
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80023e6:	b006      	add	sp, #24
 80023e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80023ec:	f006 fb32 	bl	8008a54 <HAL_GetTick>
 80023f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80023f2:	4601      	mov	r1, r0
 80023f4:	4630      	mov	r0, r6
 80023f6:	f7ff fdc5 	bl	8001f84 <net_timeout_left_ms>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	dcd5      	bgt.n	80023aa <net_sock_sendto_udp_wifi+0x42>
      rc = NET_TIMEOUT;
 80023fe:	f06f 0002 	mvn.w	r0, #2
 8002402:	e7f0      	b.n	80023e6 <net_sock_sendto_udp_wifi+0x7e>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002404:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002406:	e7d6      	b.n	80023b6 <net_sock_sendto_udp_wifi+0x4e>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8002408:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 800240c:	2800      	cmp	r0, #0
 800240e:	d1ea      	bne.n	80023e6 <net_sock_sendto_udp_wifi+0x7e>
 8002410:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1c5      	bne.n	80023a4 <net_sock_sendto_udp_wifi+0x3c>
 8002418:	e7e5      	b.n	80023e6 <net_sock_sendto_udp_wifi+0x7e>
    return NET_PARAM;
 800241a:	f06f 0001 	mvn.w	r0, #1
 800241e:	e7e2      	b.n	80023e6 <net_sock_sendto_udp_wifi+0x7e>
 8002420:	08027d04 	.word	0x08027d04
 8002424:	0802d3b1 	.word	0x0802d3b1
 8002428:	0802dda6 	.word	0x0802dda6

0800242c <net_sock_close_tcp_wifi>:
{
 800242c:	b510      	push	{r4, lr}
 800242e:	4604      	mov	r4, r0
  WIFI_Status_t status = WIFI_CloseClientConnection((uint8_t) ((uint32_t)sock->underlying_sock_ctxt && 0xFF));
 8002430:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002432:	3000      	adds	r0, #0
 8002434:	bf18      	it	ne
 8002436:	2001      	movne	r0, #1
 8002438:	f002 fccc 	bl	8004dd4 <WIFI_CloseClientConnection>
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
  if (status == WIFI_STATUS_OK)
 8002440:	b908      	cbnz	r0, 8002446 <net_sock_close_tcp_wifi+0x1a>
    sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002442:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002444:	bd10      	pop	{r4, pc}
  int rc = NET_ERR;
 8002446:	4618      	mov	r0, r3
  return rc;
 8002448:	e7fc      	b.n	8002444 <net_sock_close_tcp_wifi+0x18>
	...

0800244c <net_sock_create_wifi>:
{
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002450:	2038      	movs	r0, #56	; 0x38
{
 8002452:	460f      	mov	r7, r1
 8002454:	4616      	mov	r6, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002456:	f01f ff15 	bl	8022284 <malloc>
  if (sock == NULL)
 800245a:	4604      	mov	r4, r0
 800245c:	b950      	cbnz	r0, 8002474 <net_sock_create_wifi+0x28>
    msg_error("net_sock_create allocation failed.\n");
 800245e:	2259      	movs	r2, #89	; 0x59
 8002460:	491b      	ldr	r1, [pc, #108]	; (80024d0 <net_sock_create_wifi+0x84>)
 8002462:	481c      	ldr	r0, [pc, #112]	; (80024d4 <net_sock_create_wifi+0x88>)
 8002464:	f021 f852 	bl	802350c <iprintf>
 8002468:	481b      	ldr	r0, [pc, #108]	; (80024d8 <net_sock_create_wifi+0x8c>)
 800246a:	f021 f8d7 	bl	802361c <puts>
    rc = NET_ERR;
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 8002474:	222c      	movs	r2, #44	; 0x2c
 8002476:	2100      	movs	r1, #0
 8002478:	300c      	adds	r0, #12
 800247a:	f01f ff58 	bl	802232e <memset>
    sock->next = ctxt->sock_list;
 800247e:	686b      	ldr	r3, [r5, #4]
 8002480:	6063      	str	r3, [r4, #4]
    switch(proto)
 8002482:	2e01      	cmp	r6, #1
    sock->methods.open      = (net_sock_open_wifi);
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <net_sock_create_wifi+0x90>)
    sock->net = ctxt;
 8002486:	6025      	str	r5, [r4, #0]
    sock->methods.open      = (net_sock_open_wifi);
 8002488:	60a3      	str	r3, [r4, #8]
    switch(proto)
 800248a:	d007      	beq.n	800249c <net_sock_create_wifi+0x50>
 800248c:	2e03      	cmp	r6, #3
 800248e:	d01a      	beq.n	80024c6 <net_sock_create_wifi+0x7a>
        free(sock);
 8002490:	4620      	mov	r0, r4
 8002492:	f01f feff 	bl	8022294 <free>
        return NET_PARAM;
 8002496:	f06f 0001 	mvn.w	r0, #1
 800249a:	e7ea      	b.n	8002472 <net_sock_create_wifi+0x26>
        sock->methods.recv      = (net_sock_recv_tcp_wifi);
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <net_sock_create_wifi+0x94>)
 800249e:	60e3      	str	r3, [r4, #12]
        sock->methods.send      = (net_sock_send_tcp_wifi);
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <net_sock_create_wifi+0x98>)
 80024a2:	6163      	str	r3, [r4, #20]
    sock->methods.close     = (net_sock_close_tcp_wifi);
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <net_sock_create_wifi+0x9c>)
 80024a6:	61e3      	str	r3, [r4, #28]
    sock->methods.destroy   = (net_sock_destroy_tcp_wifi);
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <net_sock_create_wifi+0xa0>)
 80024aa:	6223      	str	r3, [r4, #32]
    sock->blocking          = NET_DEFAULT_BLOCKING;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80024b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    ctxt->sock_list         = sock; /* Insert at the head of the list */
 80024b6:	606c      	str	r4, [r5, #4]
    sock->proto             = proto;
 80024b8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80024bc:	84e3      	strh	r3, [r4, #38]	; 0x26
    sock->write_timeout     = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 80024be:	8523      	strh	r3, [r4, #40]	; 0x28
    *sockhnd = (net_sockhnd_t) sock;
 80024c0:	603c      	str	r4, [r7, #0]
    rc = NET_OK;
 80024c2:	2000      	movs	r0, #0
 80024c4:	e7d5      	b.n	8002472 <net_sock_create_wifi+0x26>
        sock->methods.recvfrom  = (net_sock_recvfrom_udp_wifi);
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <net_sock_create_wifi+0xa4>)
 80024c8:	6123      	str	r3, [r4, #16]
        sock->methods.sendto    = (net_sock_sendto_udp_wifi);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <net_sock_create_wifi+0xa8>)
 80024cc:	61a3      	str	r3, [r4, #24]
        break;
 80024ce:	e7e9      	b.n	80024a4 <net_sock_create_wifi+0x58>
 80024d0:	08027d1d 	.word	0x08027d1d
 80024d4:	0802d3b1 	.word	0x0802d3b1
 80024d8:	0802ddb3 	.word	0x0802ddb3
 80024dc:	08001fc5 	.word	0x08001fc5
 80024e0:	0800208d 	.word	0x0800208d
 80024e4:	080022d9 	.word	0x080022d9
 80024e8:	0800242d 	.word	0x0800242d
 80024ec:	08001f97 	.word	0x08001f97
 80024f0:	08002191 	.word	0x08002191
 80024f4:	08002369 	.word	0x08002369

080024f8 <my_debug>:
  ((void) level);
#if defined ( __GNUC__ ) && !defined(__CC_ARM) && defined (HAS_RTOS)
  ((void) ctx);
  mbedtls_printf("%s:%04d: %s\n", file, line, str );
#else
  mbedtls_fprintf((FILE *) ctx, "%s:%04d: %s\n", file, line, str );
 80024f8:	4901      	ldr	r1, [pc, #4]	; (8002500 <my_debug+0x8>)
 80024fa:	f01f bd8b 	b.w	8022014 <fiprintf>
 80024fe:	bf00      	nop
 8002500:	0802ddd6 	.word	0x0802ddd6

08002504 <internal_close>:
#endif
}


static void internal_close(net_sock_ctxt_t * sock)
{
 8002504:	b510      	push	{r4, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002506:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	6303      	str	r3, [r0, #48]	; 0x30
 
  mbedtls_x509_crt_free(&tlsData->clicert);
 800250e:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8002512:	f01e fdd5 	bl	80210c0 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&tlsData->pkey);
 8002516:	f204 7014 	addw	r0, r4, #1812	; 0x714
 800251a:	f013 f8a4 	bl	8015666 <mbedtls_pk_free>
  mbedtls_x509_crt_free(&tlsData->cacert);
 800251e:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 8002522:	f01e fdcd 	bl	80210c0 <mbedtls_x509_crt_free>
  mbedtls_x509_crl_free(&tlsData->cacrl);
 8002526:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 800252a:	f01d fb33 	bl	801fb94 <mbedtls_x509_crl_free>
  mbedtls_ssl_free(&tlsData->ssl);
 800252e:	f504 701a 	add.w	r0, r4, #616	; 0x268
 8002532:	f01c faf7 	bl	801eb24 <mbedtls_ssl_free>
  mbedtls_ssl_config_free(&tlsData->conf);
 8002536:	f504 7051 	add.w	r0, r4, #836	; 0x344
 800253a:	f01c fbbd 	bl	801ecb8 <mbedtls_ssl_config_free>
  mbedtls_ctr_drbg_free(&tlsData->ctr_drbg);
 800253e:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8002542:	f00d fef0 	bl	8010326 <mbedtls_ctr_drbg_free>
  mbedtls_entropy_free(&tlsData->entropy);
 8002546:	f104 0020 	add.w	r0, r4, #32
  
  return;
}
 800254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbedtls_entropy_free(&tlsData->entropy);
 800254e:	f011 ba73 	b.w	8013a38 <mbedtls_entropy_free>
	...

08002554 <net_sock_open_mbedtls>:
{
 8002554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002558:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800255a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  mbedtls_ssl_config_init(&tlsData->conf);
 800255e:	f504 7651 	add.w	r6, r4, #836	; 0x344
{
 8002562:	9102      	str	r1, [sp, #8]
 8002564:	4605      	mov	r5, r0
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 8002566:	49ad      	ldr	r1, [pc, #692]	; (800281c <net_sock_open_mbedtls+0x2c8>)
 8002568:	48ad      	ldr	r0, [pc, #692]	; (8002820 <net_sock_open_mbedtls+0x2cc>)
{
 800256a:	9303      	str	r3, [sp, #12]
 800256c:	4691      	mov	r9, r2
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 800256e:	f013 fe5d 	bl	801622c <mbedtls_platform_set_calloc_free>
  mbedtls_ssl_config_init(&tlsData->conf);
 8002572:	4630      	mov	r0, r6
 8002574:	f01c fb46 	bl	801ec04 <mbedtls_ssl_config_init>
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 8002578:	4baa      	ldr	r3, [pc, #680]	; (8002824 <net_sock_open_mbedtls+0x2d0>)
 800257a:	49ab      	ldr	r1, [pc, #684]	; (8002828 <net_sock_open_mbedtls+0x2d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4630      	mov	r0, r6
 8002580:	689a      	ldr	r2, [r3, #8]
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 8002582:	f504 7894 	add.w	r8, r4, #296	; 0x128
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 8002586:	f01b fdc7 	bl	801e118 <mbedtls_ssl_conf_dbg>
  mbedtls_x509_crt_init(&tlsData->cacert);
 800258a:	f504 776e 	add.w	r7, r4, #952	; 0x3b8
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 800258e:	4640      	mov	r0, r8
 8002590:	f00d fec4 	bl	801031c <mbedtls_ctr_drbg_init>
  mbedtls_x509_crt_init(&tlsData->cacert);
 8002594:	4638      	mov	r0, r7
 8002596:	f01e fd8d 	bl	80210b4 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_cert != NULL)
 800259a:	68a3      	ldr	r3, [r4, #8]
 800259c:	b11b      	cbz	r3, 80025a6 <net_sock_open_mbedtls+0x52>
    mbedtls_x509_crt_init(&tlsData->clicert);
 800259e:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 80025a2:	f01e fd87 	bl	80210b4 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_key != NULL)
 80025a6:	68e3      	ldr	r3, [r4, #12]
 80025a8:	b11b      	cbz	r3, 80025b2 <net_sock_open_mbedtls+0x5e>
    mbedtls_pk_init(&tlsData->pkey);
 80025aa:	f204 7014 	addw	r0, r4, #1812	; 0x714
 80025ae:	f013 f855 	bl	801565c <mbedtls_pk_init>
  mbedtls_debug_set_threshold(1);
 80025b2:	2001      	movs	r0, #1
  mbedtls_entropy_init(&tlsData->entropy);
 80025b4:	f104 0a20 	add.w	sl, r4, #32
  mbedtls_debug_set_threshold(1);
 80025b8:	f00e f834 	bl	8010624 <mbedtls_debug_set_threshold>
  mbedtls_entropy_init(&tlsData->entropy);
 80025bc:	4650      	mov	r0, sl
 80025be:	f011 fa17 	bl	80139f0 <mbedtls_entropy_init>
  if( (ret = mbedtls_entropy_add_source(&tlsData->entropy, mbedtls_hardware_poll, (void*)&hrng, 1, MBEDTLS_ENTROPY_SOURCE_STRONG)) != 0 )
 80025c2:	2301      	movs	r3, #1
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	4a99      	ldr	r2, [pc, #612]	; (800282c <net_sock_open_mbedtls+0x2d8>)
 80025c8:	4999      	ldr	r1, [pc, #612]	; (8002830 <net_sock_open_mbedtls+0x2dc>)
 80025ca:	4650      	mov	r0, sl
 80025cc:	f011 fa3d 	bl	8013a4a <mbedtls_entropy_add_source>
 80025d0:	4683      	mov	fp, r0
 80025d2:	b198      	cbz	r0, 80025fc <net_sock_open_mbedtls+0xa8>
    msg_error( " failed\n  ! mbedtls_entropy_add_source returned -0x%x\n", -ret );
 80025d4:	4997      	ldr	r1, [pc, #604]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 80025d6:	4898      	ldr	r0, [pc, #608]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 80025d8:	2295      	movs	r2, #149	; 0x95
 80025da:	f020 ff97 	bl	802350c <iprintf>
 80025de:	4897      	ldr	r0, [pc, #604]	; (800283c <net_sock_open_mbedtls+0x2e8>)
 80025e0:	f1cb 0100 	rsb	r1, fp, #0
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 80025e4:	f020 ff92 	bl	802350c <iprintf>
    internal_close(sock);
 80025e8:	4628      	mov	r0, r5
 80025ea:	f7ff ff8b 	bl	8002504 <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 80025ee:	f04f 36ff 	mov.w	r6, #4294967295
}
 80025f2:	4630      	mov	r0, r6
 80025f4:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 80025f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if( (ret = mbedtls_ctr_drbg_seed(&tlsData->ctr_drbg, mbedtls_entropy_func, &tlsData->entropy, pers, strlen((char const *)pers))) != 0 )
 80025fc:	2307      	movs	r3, #7
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4652      	mov	r2, sl
 8002602:	4b8f      	ldr	r3, [pc, #572]	; (8002840 <net_sock_open_mbedtls+0x2ec>)
 8002604:	498f      	ldr	r1, [pc, #572]	; (8002844 <net_sock_open_mbedtls+0x2f0>)
 8002606:	4640      	mov	r0, r8
 8002608:	f00d fef7 	bl	80103fa <mbedtls_ctr_drbg_seed>
 800260c:	4682      	mov	sl, r0
 800260e:	b140      	cbz	r0, 8002622 <net_sock_open_mbedtls+0xce>
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 8002610:	4988      	ldr	r1, [pc, #544]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 8002612:	4889      	ldr	r0, [pc, #548]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 8002614:	229b      	movs	r2, #155	; 0x9b
 8002616:	f020 ff79 	bl	802350c <iprintf>
 800261a:	f1ca 0100 	rsb	r1, sl, #0
 800261e:	488a      	ldr	r0, [pc, #552]	; (8002848 <net_sock_open_mbedtls+0x2f4>)
 8002620:	e7e0      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
  if (tlsData->tls_ca_certs != NULL)
 8002622:	f8d4 a000 	ldr.w	sl, [r4]
 8002626:	f1ba 0f00 	cmp.w	sl, #0
 800262a:	d012      	beq.n	8002652 <net_sock_open_mbedtls+0xfe>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->cacert, (unsigned char const *)tlsData->tls_ca_certs, strlen((char const *) tlsData->tls_ca_certs) + 1)) != 0 )
 800262c:	4650      	mov	r0, sl
 800262e:	f7fd fdd9 	bl	80001e4 <strlen>
 8002632:	4651      	mov	r1, sl
 8002634:	1c42      	adds	r2, r0, #1
 8002636:	4638      	mov	r0, r7
 8002638:	f01f f8d4 	bl	80217e4 <mbedtls_x509_crt_parse>
 800263c:	4682      	mov	sl, r0
 800263e:	b140      	cbz	r0, 8002652 <net_sock_open_mbedtls+0xfe>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\n", -ret);
 8002640:	497c      	ldr	r1, [pc, #496]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 8002642:	487d      	ldr	r0, [pc, #500]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 8002644:	22a5      	movs	r2, #165	; 0xa5
 8002646:	f020 ff61 	bl	802350c <iprintf>
 800264a:	f1ca 0100 	rsb	r1, sl, #0
 800264e:	487f      	ldr	r0, [pc, #508]	; (800284c <net_sock_open_mbedtls+0x2f8>)
 8002650:	e7c8      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
  if (tlsData->tls_ca_crl != NULL)
 8002652:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8002656:	f1ba 0f00 	cmp.w	sl, #0
 800265a:	d013      	beq.n	8002684 <net_sock_open_mbedtls+0x130>
    if( (ret = mbedtls_x509_crl_parse(&tlsData->cacrl, (unsigned char const *)tlsData->tls_ca_crl, strlen((char const *) tlsData->tls_ca_crl) + 1)) != 0 )
 800265c:	4650      	mov	r0, sl
 800265e:	f7fd fdc1 	bl	80001e4 <strlen>
 8002662:	4651      	mov	r1, sl
 8002664:	1c42      	adds	r2, r0, #1
 8002666:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 800266a:	f01d fcbb 	bl	801ffe4 <mbedtls_x509_crl_parse>
 800266e:	4682      	mov	sl, r0
 8002670:	b140      	cbz	r0, 8002684 <net_sock_open_mbedtls+0x130>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing the cert revocation list\n", -ret);
 8002672:	4970      	ldr	r1, [pc, #448]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 8002674:	4870      	ldr	r0, [pc, #448]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 8002676:	22af      	movs	r2, #175	; 0xaf
 8002678:	f020 ff48 	bl	802350c <iprintf>
 800267c:	f1ca 0100 	rsb	r1, sl, #0
 8002680:	4873      	ldr	r0, [pc, #460]	; (8002850 <net_sock_open_mbedtls+0x2fc>)
 8002682:	e7af      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 8002684:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8002688:	f1ba 0f00 	cmp.w	sl, #0
 800268c:	d02e      	beq.n	80026ec <net_sock_open_mbedtls+0x198>
 800268e:	68e3      	ldr	r3, [r4, #12]
 8002690:	b363      	cbz	r3, 80026ec <net_sock_open_mbedtls+0x198>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->clicert, (unsigned char const *)tlsData->tls_dev_cert, strlen((char const *)tlsData->tls_dev_cert) + 1)) != 0 )
 8002692:	4650      	mov	r0, sl
 8002694:	f7fd fda6 	bl	80001e4 <strlen>
 8002698:	4651      	mov	r1, sl
 800269a:	1c42      	adds	r2, r0, #1
 800269c:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 80026a0:	f01f f8a0 	bl	80217e4 <mbedtls_x509_crt_parse>
 80026a4:	4682      	mov	sl, r0
 80026a6:	b140      	cbz	r0, 80026ba <net_sock_open_mbedtls+0x166>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing device cert\n", -ret);
 80026a8:	4962      	ldr	r1, [pc, #392]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 80026aa:	4863      	ldr	r0, [pc, #396]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 80026ac:	22ba      	movs	r2, #186	; 0xba
 80026ae:	f020 ff2d 	bl	802350c <iprintf>
 80026b2:	f1ca 0100 	rsb	r1, sl, #0
 80026b6:	4867      	ldr	r0, [pc, #412]	; (8002854 <net_sock_open_mbedtls+0x300>)
 80026b8:	e794      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
    if( (ret = mbedtls_pk_parse_key(&tlsData->pkey, (unsigned char const *)tlsData->tls_dev_key, strlen((char const *)tlsData->tls_dev_key) + 1,
 80026ba:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80026be:	4650      	mov	r0, sl
 80026c0:	f7fd fd90 	bl	80001e4 <strlen>
 80026c4:	6963      	ldr	r3, [r4, #20]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	1c42      	adds	r2, r0, #1
 80026ca:	4651      	mov	r1, sl
 80026cc:	6923      	ldr	r3, [r4, #16]
 80026ce:	f204 7014 	addw	r0, r4, #1812	; 0x714
 80026d2:	f013 fcc9 	bl	8016068 <mbedtls_pk_parse_key>
 80026d6:	4682      	mov	sl, r0
 80026d8:	b140      	cbz	r0, 80026ec <net_sock_open_mbedtls+0x198>
      msg_error(" failed\n  !  mbedtls_pk_parse_key returned -0x%x while parsing private key\n\n", -ret);
 80026da:	4956      	ldr	r1, [pc, #344]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 80026dc:	4856      	ldr	r0, [pc, #344]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 80026de:	22cf      	movs	r2, #207	; 0xcf
 80026e0:	f020 ff14 	bl	802350c <iprintf>
 80026e4:	f1ca 0100 	rsb	r1, sl, #0
 80026e8:	485b      	ldr	r0, [pc, #364]	; (8002858 <net_sock_open_mbedtls+0x304>)
 80026ea:	e77b      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
  if( (ret = net_sock_create(hnet, &sock->underlying_sock_ctxt, NET_PROTO_TCP)) != NET_OK )
 80026ec:	4b5b      	ldr	r3, [pc, #364]	; (800285c <net_sock_open_mbedtls+0x308>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80026f6:	f7ff fb57 	bl	8001da8 <net_sock_create>
 80026fa:	4603      	mov	r3, r0
 80026fc:	b148      	cbz	r0, 8002712 <net_sock_open_mbedtls+0x1be>
 80026fe:	9002      	str	r0, [sp, #8]
    msg_error(" failed to create a TCP socket  ! net_sock_create returned %d\n", ret);
 8002700:	494c      	ldr	r1, [pc, #304]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 8002702:	484d      	ldr	r0, [pc, #308]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 8002704:	22da      	movs	r2, #218	; 0xda
 8002706:	f020 ff01 	bl	802350c <iprintf>
 800270a:	9b02      	ldr	r3, [sp, #8]
 800270c:	4854      	ldr	r0, [pc, #336]	; (8002860 <net_sock_open_mbedtls+0x30c>)
 800270e:	4619      	mov	r1, r3
 8002710:	e768      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
  if( (ret = net_sock_setopt(sock->underlying_sock_ctxt, (sock->blocking == true) ? "sock_blocking" : "sock_noblocking", NULL, 0)) != NET_OK )
 8002712:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8002716:	f8df b164 	ldr.w	fp, [pc, #356]	; 800287c <net_sock_open_mbedtls+0x328>
 800271a:	f8df a164 	ldr.w	sl, [pc, #356]	; 8002880 <net_sock_open_mbedtls+0x32c>
 800271e:	4602      	mov	r2, r0
 8002720:	2900      	cmp	r1, #0
 8002722:	bf14      	ite	ne
 8002724:	4659      	movne	r1, fp
 8002726:	4651      	moveq	r1, sl
 8002728:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800272a:	f7ff fb6f 	bl	8001e0c <net_sock_setopt>
 800272e:	4603      	mov	r3, r0
 8002730:	b1e0      	cbz	r0, 800276c <net_sock_open_mbedtls+0x218>
    msg_error(" failed setting the %s option.\n", (sock->blocking == true) ? "sock_blocking" : "sock_noblocking");
 8002732:	22e1      	movs	r2, #225	; 0xe1
 8002734:	493f      	ldr	r1, [pc, #252]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 8002736:	4840      	ldr	r0, [pc, #256]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 8002738:	f020 fee8 	bl	802350c <iprintf>
 800273c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8002740:	4848      	ldr	r0, [pc, #288]	; (8002864 <net_sock_open_mbedtls+0x310>)
 8002742:	2900      	cmp	r1, #0
 8002744:	bf14      	ite	ne
 8002746:	4659      	movne	r1, fp
 8002748:	4651      	moveq	r1, sl
 800274a:	f020 fedf 	bl	802350c <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800274e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002750:	f7ff fc12 	bl	8001f78 <net_sock_destroy>
 8002754:	2800      	cmp	r0, #0
 8002756:	f43f af47 	beq.w	80025e8 <net_sock_open_mbedtls+0x94>
      msg_error("Failed destroying the socket.\n");
 800275a:	22e4      	movs	r2, #228	; 0xe4
 800275c:	4935      	ldr	r1, [pc, #212]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 800275e:	4836      	ldr	r0, [pc, #216]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 8002760:	f020 fed4 	bl	802350c <iprintf>
 8002764:	4840      	ldr	r0, [pc, #256]	; (8002868 <net_sock_open_mbedtls+0x314>)
 8002766:	f020 ff59 	bl	802361c <puts>
 800276a:	e73d      	b.n	80025e8 <net_sock_open_mbedtls+0x94>
  if( (ret = mbedtls_ssl_config_defaults(&tlsData->conf, MBEDTLS_SSL_IS_CLIENT, MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0)
 800276c:	4602      	mov	r2, r0
 800276e:	4601      	mov	r1, r0
 8002770:	4630      	mov	r0, r6
 8002772:	f01c fa4b 	bl	801ec0c <mbedtls_ssl_config_defaults>
 8002776:	4682      	mov	sl, r0
 8002778:	b140      	cbz	r0, 800278c <net_sock_open_mbedtls+0x238>
    msg_error(" failed\n  ! mbedtls_ssl_config_defaults returned -0x%x\n\n", -ret);
 800277a:	492e      	ldr	r1, [pc, #184]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 800277c:	482e      	ldr	r0, [pc, #184]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 800277e:	22ed      	movs	r2, #237	; 0xed
 8002780:	f020 fec4 	bl	802350c <iprintf>
 8002784:	f1ca 0100 	rsb	r1, sl, #0
 8002788:	4838      	ldr	r0, [pc, #224]	; (800286c <net_sock_open_mbedtls+0x318>)
 800278a:	e72b      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
  if(tlsData->tls_srv_verification == true)
 800278c:	7e23      	ldrb	r3, [r4, #24]
 800278e:	b333      	cbz	r3, 80027de <net_sock_open_mbedtls+0x28a>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_REQUIRED);
 8002790:	2102      	movs	r1, #2
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 8002792:	4630      	mov	r0, r6
 8002794:	f01b fcb6 	bl	801e104 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&tlsData->conf, mbedtls_ctr_drbg_random, &tlsData->ctr_drbg);
 8002798:	4642      	mov	r2, r8
 800279a:	4935      	ldr	r1, [pc, #212]	; (8002870 <net_sock_open_mbedtls+0x31c>)
 800279c:	4630      	mov	r0, r6
 800279e:	f01b fcb8 	bl	801e112 <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&tlsData->conf, &tlsData->cacert, (tlsData->tls_ca_crl != NULL) ? &tlsData->cacrl : NULL);
 80027a2:	6862      	ldr	r2, [r4, #4]
 80027a4:	b10a      	cbz	r2, 80027aa <net_sock_open_mbedtls+0x256>
 80027a6:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80027aa:	4639      	mov	r1, r7
 80027ac:	4630      	mov	r0, r6
 80027ae:	f01b fcc1 	bl	801e134 <mbedtls_ssl_conf_ca_chain>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 80027b2:	68a3      	ldr	r3, [r4, #8]
 80027b4:	b1ab      	cbz	r3, 80027e2 <net_sock_open_mbedtls+0x28e>
 80027b6:	68e3      	ldr	r3, [r4, #12]
 80027b8:	b19b      	cbz	r3, 80027e2 <net_sock_open_mbedtls+0x28e>
    if( (ret = mbedtls_ssl_conf_own_cert(&tlsData->conf, &tlsData->clicert, &tlsData->pkey)) != 0)
 80027ba:	f204 7214 	addw	r2, r4, #1812	; 0x714
 80027be:	f504 61bc 	add.w	r1, r4, #1504	; 0x5e0
 80027c2:	4630      	mov	r0, r6
 80027c4:	f01b fcb3 	bl	801e12e <mbedtls_ssl_conf_own_cert>
 80027c8:	4607      	mov	r7, r0
 80027ca:	b150      	cbz	r0, 80027e2 <net_sock_open_mbedtls+0x28e>
      msg_error(" failed\n  ! mbedtls_ssl_conf_own_cert returned -0x%x\n\n", -ret);
 80027cc:	4919      	ldr	r1, [pc, #100]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 80027ce:	481a      	ldr	r0, [pc, #104]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 80027d0:	f44f 7284 	mov.w	r2, #264	; 0x108
 80027d4:	f020 fe9a 	bl	802350c <iprintf>
 80027d8:	4279      	negs	r1, r7
 80027da:	4826      	ldr	r0, [pc, #152]	; (8002874 <net_sock_open_mbedtls+0x320>)
 80027dc:	e702      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 80027de:	2101      	movs	r1, #1
 80027e0:	e7d7      	b.n	8002792 <net_sock_open_mbedtls+0x23e>
  if( (ret = mbedtls_ssl_setup(&tlsData->ssl, &tlsData->conf)) != 0 )
 80027e2:	f504 771a 	add.w	r7, r4, #616	; 0x268
 80027e6:	4631      	mov	r1, r6
 80027e8:	4638      	mov	r0, r7
 80027ea:	f01b fef7 	bl	801e5dc <mbedtls_ssl_setup>
 80027ee:	4680      	mov	r8, r0
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d047      	beq.n	8002884 <net_sock_open_mbedtls+0x330>
    msg_error(" failed\n  ! mbedtls_ssl_setup returned -0x%x\n\n", -ret);
 80027f4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <net_sock_open_mbedtls+0x2e0>)
 80027fa:	480f      	ldr	r0, [pc, #60]	; (8002838 <net_sock_open_mbedtls+0x2e4>)
 80027fc:	f020 fe86 	bl	802350c <iprintf>
 8002800:	f1c8 0100 	rsb	r1, r8, #0
 8002804:	481c      	ldr	r0, [pc, #112]	; (8002878 <net_sock_open_mbedtls+0x324>)
 8002806:	f020 fe81 	bl	802350c <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800280a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800280c:	f7ff fbb4 	bl	8001f78 <net_sock_destroy>
 8002810:	2800      	cmp	r0, #0
 8002812:	f43f aee9 	beq.w	80025e8 <net_sock_open_mbedtls+0x94>
      msg_error("Failed destroying the socket.\n");
 8002816:	f44f 728a 	mov.w	r2, #276	; 0x114
 800281a:	e79f      	b.n	800275c <net_sock_open_mbedtls+0x208>
 800281c:	08022295 	.word	0x08022295
 8002820:	08021ff9 	.word	0x08021ff9
 8002824:	200005e4 	.word	0x200005e4
 8002828:	080024f9 	.word	0x080024f9
 800282c:	20001194 	.word	0x20001194
 8002830:	0800129d 	.word	0x0800129d
 8002834:	08027d32 	.word	0x08027d32
 8002838:	0802d3b1 	.word	0x0802d3b1
 800283c:	0802dde3 	.word	0x0802dde3
 8002840:	0802de1a 	.word	0x0802de1a
 8002844:	08013a79 	.word	0x08013a79
 8002848:	0802de22 	.word	0x0802de22
 800284c:	0802de54 	.word	0x0802de54
 8002850:	0802dea0 	.word	0x0802dea0
 8002854:	0802defb 	.word	0x0802defb
 8002858:	0802df49 	.word	0x0802df49
 800285c:	200011a0 	.word	0x200011a0
 8002860:	0802df96 	.word	0x0802df96
 8002864:	0802dfd5 	.word	0x0802dfd5
 8002868:	0802dff5 	.word	0x0802dff5
 800286c:	0802e013 	.word	0x0802e013
 8002870:	080104c5 	.word	0x080104c5
 8002874:	0802e04c 	.word	0x0802e04c
 8002878:	0802e083 	.word	0x0802e083
 800287c:	0802dc47 	.word	0x0802dc47
 8002880:	0802dc55 	.word	0x0802dc55
  if(tlsData->tls_srv_name != NULL)
 8002884:	69e1      	ldr	r1, [r4, #28]
 8002886:	b169      	cbz	r1, 80028a4 <net_sock_open_mbedtls+0x350>
    if( (ret = mbedtls_ssl_set_hostname(&tlsData->ssl, tlsData->tls_srv_name)) != 0 )
 8002888:	4638      	mov	r0, r7
 800288a:	f01b fc57 	bl	801e13c <mbedtls_ssl_set_hostname>
 800288e:	4680      	mov	r8, r0
 8002890:	b140      	cbz	r0, 80028a4 <net_sock_open_mbedtls+0x350>
      msg_error(" failed\n  ! mbedtls_ssl_set_hostname returned %d\n\n", ret);
 8002892:	4947      	ldr	r1, [pc, #284]	; (80029b0 <net_sock_open_mbedtls+0x45c>)
 8002894:	4847      	ldr	r0, [pc, #284]	; (80029b4 <net_sock_open_mbedtls+0x460>)
 8002896:	f240 121d 	movw	r2, #285	; 0x11d
 800289a:	f020 fe37 	bl	802350c <iprintf>
 800289e:	4641      	mov	r1, r8
 80028a0:	4845      	ldr	r0, [pc, #276]	; (80029b8 <net_sock_open_mbedtls+0x464>)
 80028a2:	e69f      	b.n	80025e4 <net_sock_open_mbedtls+0x90>
  if (sock->blocking == true)
 80028a4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80028a8:	b34b      	cbz	r3, 80028fe <net_sock_open_mbedtls+0x3aa>
    mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 80028aa:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 80028ac:	4630      	mov	r0, r6
 80028ae:	f01b fc3c 	bl	801e12a <mbedtls_ssl_conf_read_timeout>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, NULL, mbedtls_net_recv_blocking);
 80028b2:	4b42      	ldr	r3, [pc, #264]	; (80029bc <net_sock_open_mbedtls+0x468>)
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2300      	movs	r3, #0
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 80028b8:	4a41      	ldr	r2, [pc, #260]	; (80029c0 <net_sock_open_mbedtls+0x46c>)
 80028ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80028bc:	4638      	mov	r0, r7
 80028be:	f01b fc2e 	bl	801e11e <mbedtls_ssl_set_bio>
  if( (ret = net_sock_open(sock->underlying_sock_ctxt, hostname, dstport, localport)) != NET_OK )
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	9902      	ldr	r1, [sp, #8]
 80028c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80028c8:	464a      	mov	r2, r9
 80028ca:	f7ff fa99 	bl	8001e00 <net_sock_open>
 80028ce:	4606      	mov	r6, r0
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d063      	beq.n	800299c <net_sock_open_mbedtls+0x448>
    msg_error(" failed to connect to %s:%d  ! net_sock_open returned %d\n", hostname, dstport, ret);
 80028d4:	f240 1231 	movw	r2, #305	; 0x131
 80028d8:	4935      	ldr	r1, [pc, #212]	; (80029b0 <net_sock_open_mbedtls+0x45c>)
 80028da:	4836      	ldr	r0, [pc, #216]	; (80029b4 <net_sock_open_mbedtls+0x460>)
 80028dc:	f020 fe16 	bl	802350c <iprintf>
 80028e0:	4633      	mov	r3, r6
 80028e2:	464a      	mov	r2, r9
 80028e4:	9902      	ldr	r1, [sp, #8]
 80028e6:	4837      	ldr	r0, [pc, #220]	; (80029c4 <net_sock_open_mbedtls+0x470>)
 80028e8:	f020 fe10 	bl	802350c <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 80028ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80028ee:	f7ff fb43 	bl	8001f78 <net_sock_destroy>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	f43f ae78 	beq.w	80025e8 <net_sock_open_mbedtls+0x94>
      msg_error("Failed destroying the socket.\n");
 80028f8:	f44f 729a 	mov.w	r2, #308	; 0x134
 80028fc:	e72e      	b.n	800275c <net_sock_open_mbedtls+0x208>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <net_sock_open_mbedtls+0x474>)
 8002902:	e7d9      	b.n	80028b8 <net_sock_open_mbedtls+0x364>
    if( (ret != MBEDTLS_ERR_SSL_WANT_READ) && (ret != MBEDTLS_ERR_SSL_WANT_WRITE) )
 8002904:	f026 0380 	bic.w	r3, r6, #128	; 0x80
 8002908:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800290c:	d046      	beq.n	800299c <net_sock_open_mbedtls+0x448>
      if( (tlsData->flags = mbedtls_ssl_get_verify_result(&tlsData->ssl)) != 0 )
 800290e:	4638      	mov	r0, r7
 8002910:	f01b fc3a 	bl	801e188 <mbedtls_ssl_get_verify_result>
 8002914:	4603      	mov	r3, r0
 8002916:	f8c4 03b4 	str.w	r0, [r4, #948]	; 0x3b4
 800291a:	b188      	cbz	r0, 8002940 <net_sock_open_mbedtls+0x3ec>
        mbedtls_x509_crt_verify_info(vrfy_buf, sizeof(vrfy_buf), "  ! ", tlsData->flags);
 800291c:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <net_sock_open_mbedtls+0x478>)
 800291e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002922:	a804      	add	r0, sp, #16
 8002924:	f01d ff9c 	bl	8020860 <mbedtls_x509_crt_verify_info>
        if (tlsData->tls_srv_verification == true)
 8002928:	7e23      	ldrb	r3, [r4, #24]
 800292a:	b12b      	cbz	r3, 8002938 <net_sock_open_mbedtls+0x3e4>
          msg_error("Server verification:\n%s\n", vrfy_buf);
 800292c:	f240 1247 	movw	r2, #327	; 0x147
 8002930:	491f      	ldr	r1, [pc, #124]	; (80029b0 <net_sock_open_mbedtls+0x45c>)
 8002932:	4820      	ldr	r0, [pc, #128]	; (80029b4 <net_sock_open_mbedtls+0x460>)
 8002934:	f020 fdea 	bl	802350c <iprintf>
          msg_info("Server verification:\n%s\n", vrfy_buf);
 8002938:	a904      	add	r1, sp, #16
 800293a:	4825      	ldr	r0, [pc, #148]	; (80029d0 <net_sock_open_mbedtls+0x47c>)
 800293c:	f020 fde6 	bl	802350c <iprintf>
      msg_error(" failed\n  ! mbedtls_ssl_handshake returned -0x%x\n", -ret);
 8002940:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8002944:	491a      	ldr	r1, [pc, #104]	; (80029b0 <net_sock_open_mbedtls+0x45c>)
 8002946:	481b      	ldr	r0, [pc, #108]	; (80029b4 <net_sock_open_mbedtls+0x460>)
 8002948:	f020 fde0 	bl	802350c <iprintf>
 800294c:	4271      	negs	r1, r6
 800294e:	4821      	ldr	r0, [pc, #132]	; (80029d4 <net_sock_open_mbedtls+0x480>)
 8002950:	f020 fddc 	bl	802350c <iprintf>
      if (net_sock_close(sock->underlying_sock_ctxt) != NET_OK )
 8002954:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002956:	f7ff fb09 	bl	8001f6c <net_sock_close>
 800295a:	b140      	cbz	r0, 800296e <net_sock_open_mbedtls+0x41a>
        msg_error("Failed closing the socket.\n");
 800295c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8002960:	4913      	ldr	r1, [pc, #76]	; (80029b0 <net_sock_open_mbedtls+0x45c>)
 8002962:	4814      	ldr	r0, [pc, #80]	; (80029b4 <net_sock_open_mbedtls+0x460>)
 8002964:	f020 fdd2 	bl	802350c <iprintf>
 8002968:	481b      	ldr	r0, [pc, #108]	; (80029d8 <net_sock_open_mbedtls+0x484>)
 800296a:	f020 fe57 	bl	802361c <puts>
      if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800296e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002970:	f7ff fb02 	bl	8001f78 <net_sock_destroy>
 8002974:	b140      	cbz	r0, 8002988 <net_sock_open_mbedtls+0x434>
        msg_error("Failed destroying the socket.\n");
 8002976:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800297a:	490d      	ldr	r1, [pc, #52]	; (80029b0 <net_sock_open_mbedtls+0x45c>)
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <net_sock_open_mbedtls+0x460>)
 800297e:	f020 fdc5 	bl	802350c <iprintf>
 8002982:	4816      	ldr	r0, [pc, #88]	; (80029dc <net_sock_open_mbedtls+0x488>)
 8002984:	f020 fe4a 	bl	802361c <puts>
      internal_close(sock);
 8002988:	4628      	mov	r0, r5
 800298a:	f7ff fdbb 	bl	8002504 <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 800298e:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
 8002992:	f47f ae2c 	bne.w	80025ee <net_sock_open_mbedtls+0x9a>
 8002996:	f06f 0605 	mvn.w	r6, #5
 800299a:	e62a      	b.n	80025f2 <net_sock_open_mbedtls+0x9e>
  while( (ret = mbedtls_ssl_handshake(&tlsData->ssl)) != 0 )
 800299c:	4638      	mov	r0, r7
 800299e:	f01b fc4d 	bl	801e23c <mbedtls_ssl_handshake>
 80029a2:	4606      	mov	r6, r0
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d1ad      	bne.n	8002904 <net_sock_open_mbedtls+0x3b0>
  if( (ret = mbedtls_ssl_get_record_expansion(&tlsData->ssl)) >= 0)
 80029a8:	4638      	mov	r0, r7
 80029aa:	f01b fbf7 	bl	801e19c <mbedtls_ssl_get_record_expansion>
  return rc;
 80029ae:	e620      	b.n	80025f2 <net_sock_open_mbedtls+0x9e>
 80029b0:	08027d32 	.word	0x08027d32
 80029b4:	0802d3b1 	.word	0x0802d3b1
 80029b8:	0802e0b2 	.word	0x0802e0b2
 80029bc:	08001b1d 	.word	0x08001b1d
 80029c0:	08001bb9 	.word	0x08001bb9
 80029c4:	0802e0e5 	.word	0x0802e0e5
 80029c8:	08001add 	.word	0x08001add
 80029cc:	0802e11f 	.word	0x0802e11f
 80029d0:	0802e124 	.word	0x0802e124
 80029d4:	0802e13d 	.word	0x0802e13d
 80029d8:	0802e16f 	.word	0x0802e16f
 80029dc:	0802dff5 	.word	0x0802dff5

080029e0 <net_sock_recv_mbedtls>:
{
 80029e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e4:	4604      	mov	r4, r0
 80029e6:	4688      	mov	r8, r1
 80029e8:	4691      	mov	r9, r2
  net_tls_data_t * tlsData = sock->tlsData;
 80029ea:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 80029ec:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002a9c <net_sock_recv_mbedtls+0xbc>
 80029f0:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8002aa0 <net_sock_recv_mbedtls+0xc0>
  uint32_t start_time = HAL_GetTick();
 80029f4:	f006 f82e 	bl	8008a54 <HAL_GetTick>
  int read = 0;
 80029f8:	2500      	movs	r5, #0
  uint32_t start_time = HAL_GetTick();
 80029fa:	9001      	str	r0, [sp, #4]
    if (sock->blocking == true)
 80029fc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002a00:	bb33      	cbnz	r3, 8002a50 <net_sock_recv_mbedtls+0x70>
    ret = mbedtls_ssl_read(&tlsData->ssl, buf + read, len - read);
 8002a02:	464a      	mov	r2, r9
 8002a04:	4641      	mov	r1, r8
 8002a06:	f506 701a 	add.w	r0, r6, #616	; 0x268
 8002a0a:	f01b ff51 	bl	801e8b0 <mbedtls_ssl_read>
    if (ret > 0)
 8002a0e:	1e07      	subs	r7, r0, #0
 8002a10:	dc2f      	bgt.n	8002a72 <net_sock_recv_mbedtls+0x92>
      switch (ret)
 8002a12:	f517 4fd1 	cmn.w	r7, #26752	; 0x6880
 8002a16:	d039      	beq.n	8002a8c <net_sock_recv_mbedtls+0xac>
 8002a18:	dc2e      	bgt.n	8002a78 <net_sock_recv_mbedtls+0x98>
 8002a1a:	f517 4fd2 	cmn.w	r7, #26880	; 0x6900
 8002a1e:	d035      	beq.n	8002a8c <net_sock_recv_mbedtls+0xac>
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 8002a20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002a24:	491c      	ldr	r1, [pc, #112]	; (8002a98 <net_sock_recv_mbedtls+0xb8>)
 8002a26:	4650      	mov	r0, sl
 8002a28:	f020 fd70 	bl	802350c <iprintf>
 8002a2c:	4279      	negs	r1, r7
 8002a2e:	4658      	mov	r0, fp
 8002a30:	f020 fd6c 	bl	802350c <iprintf>
          rc = NET_ERR;
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0) );
 8002a38:	f517 4fd2 	cmn.w	r7, #26880	; 0x6900
 8002a3c:	d002      	beq.n	8002a44 <net_sock_recv_mbedtls+0x64>
 8002a3e:	f517 4fd1 	cmn.w	r7, #26752	; 0x6880
 8002a42:	d125      	bne.n	8002a90 <net_sock_recv_mbedtls+0xb0>
 8002a44:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002a48:	b313      	cbz	r3, 8002a90 <net_sock_recv_mbedtls+0xb0>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d0d6      	beq.n	80029fc <net_sock_recv_mbedtls+0x1c>
 8002a4e:	e01a      	b.n	8002a86 <net_sock_recv_mbedtls+0xa6>
      mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 8002a50:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002a52:	f506 7051 	add.w	r0, r6, #836	; 0x344
 8002a56:	f01b fb68 	bl	801e12a <mbedtls_ssl_conf_read_timeout>
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0)
 8002a5a:	f005 fffb 	bl	8008a54 <HAL_GetTick>
 8002a5e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002a60:	4601      	mov	r1, r0
 8002a62:	9801      	ldr	r0, [sp, #4]
 8002a64:	f7ff fa8e 	bl	8001f84 <net_timeout_left_ms>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	dcca      	bgt.n	8002a02 <net_sock_recv_mbedtls+0x22>
        rc = NET_TIMEOUT;
 8002a6c:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : read;
 8002a70:	e009      	b.n	8002a86 <net_sock_recv_mbedtls+0xa6>
      read += ret;
 8002a72:	463d      	mov	r5, r7
  return (rc < 0) ? rc : read;
 8002a74:	4628      	mov	r0, r5
 8002a76:	e006      	b.n	8002a86 <net_sock_recv_mbedtls+0xa6>
      switch (ret)
 8002a78:	f517 4fd0 	cmn.w	r7, #26624	; 0x6800
 8002a7c:	d0f6      	beq.n	8002a6c <net_sock_recv_mbedtls+0x8c>
 8002a7e:	2f00      	cmp	r7, #0
 8002a80:	d1ce      	bne.n	8002a20 <net_sock_recv_mbedtls+0x40>
          rc = NET_EOF;
 8002a82:	f06f 0003 	mvn.w	r0, #3
}
 8002a86:	b003      	add	sp, #12
 8002a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (ret)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	e7d3      	b.n	8002a38 <net_sock_recv_mbedtls+0x58>
  return (rc < 0) ? rc : read;
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d0ef      	beq.n	8002a74 <net_sock_recv_mbedtls+0x94>
 8002a94:	e7f7      	b.n	8002a86 <net_sock_recv_mbedtls+0xa6>
 8002a96:	bf00      	nop
 8002a98:	08027d48 	.word	0x08027d48
 8002a9c:	0802d3b1 	.word	0x0802d3b1
 8002aa0:	0802e18a 	.word	0x0802e18a

08002aa4 <net_sock_send_mbedtls>:
{
 8002aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002aa8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002aaa:	9300      	str	r3, [sp, #0]
{
 8002aac:	4604      	mov	r4, r0
 8002aae:	460f      	mov	r7, r1
 8002ab0:	4690      	mov	r8, r2
  uint32_t start_time = HAL_GetTick();
 8002ab2:	f005 ffcf 	bl	8008a54 <HAL_GetTick>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002ab6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002b50 <net_sock_send_mbedtls+0xac>
 8002aba:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002b54 <net_sock_send_mbedtls+0xb0>
 8002abe:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002b58 <net_sock_send_mbedtls+0xb4>
  uint32_t start_time = HAL_GetTick();
 8002ac2:	9001      	str	r0, [sp, #4]
  int sent = 0;
 8002ac4:	2500      	movs	r5, #0
    if (sock->blocking == true)
 8002ac6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002aca:	bb3b      	cbnz	r3, 8002b1c <net_sock_send_mbedtls+0x78>
    ret = mbedtls_ssl_write(&tlsData->ssl, buf + sent, len - sent);
 8002acc:	9b00      	ldr	r3, [sp, #0]
 8002ace:	4642      	mov	r2, r8
 8002ad0:	4639      	mov	r1, r7
 8002ad2:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8002ad6:	f01b fe6d 	bl	801e7b4 <mbedtls_ssl_write>
    if (ret > 0)
 8002ada:	1e06      	subs	r6, r0, #0
 8002adc:	dc2a      	bgt.n	8002b34 <net_sock_send_mbedtls+0x90>
      switch(ret)
 8002ade:	f516 4fd1 	cmn.w	r6, #26752	; 0x6880
 8002ae2:	d02a      	beq.n	8002b3a <net_sock_send_mbedtls+0x96>
 8002ae4:	b35e      	cbz	r6, 8002b3e <net_sock_send_mbedtls+0x9a>
 8002ae6:	f516 4fd2 	cmn.w	r6, #26880	; 0x6900
 8002aea:	d026      	beq.n	8002b3a <net_sock_send_mbedtls+0x96>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002aec:	f240 12d9 	movw	r2, #473	; 0x1d9
 8002af0:	4649      	mov	r1, r9
 8002af2:	4650      	mov	r0, sl
 8002af4:	f020 fd0a 	bl	802350c <iprintf>
 8002af8:	4271      	negs	r1, r6
 8002afa:	4658      	mov	r0, fp
 8002afc:	f020 fd06 	bl	802350c <iprintf>
          rc = NET_ERR;
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0));
 8002b04:	f516 4fd2 	cmn.w	r6, #26880	; 0x6900
 8002b08:	d002      	beq.n	8002b10 <net_sock_send_mbedtls+0x6c>
 8002b0a:	f516 4fd1 	cmn.w	r6, #26752	; 0x6880
 8002b0e:	d11b      	bne.n	8002b48 <net_sock_send_mbedtls+0xa4>
 8002b10:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002b14:	b1c3      	cbz	r3, 8002b48 <net_sock_send_mbedtls+0xa4>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d0d5      	beq.n	8002ac6 <net_sock_send_mbedtls+0x22>
 8002b1a:	e012      	b.n	8002b42 <net_sock_send_mbedtls+0x9e>
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0)
 8002b1c:	f005 ff9a 	bl	8008a54 <HAL_GetTick>
 8002b20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002b22:	4601      	mov	r1, r0
 8002b24:	9801      	ldr	r0, [sp, #4]
 8002b26:	f7ff fa2d 	bl	8001f84 <net_timeout_left_ms>
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	dcce      	bgt.n	8002acc <net_sock_send_mbedtls+0x28>
        rc = NET_TIMEOUT;
 8002b2e:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 8002b32:	e006      	b.n	8002b42 <net_sock_send_mbedtls+0x9e>
      sent += ret;
 8002b34:	4635      	mov	r5, r6
  return (rc < 0) ? rc : sent;
 8002b36:	4628      	mov	r0, r5
 8002b38:	e003      	b.n	8002b42 <net_sock_send_mbedtls+0x9e>
      switch(ret)
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e7e2      	b.n	8002b04 <net_sock_send_mbedtls+0x60>
          rc = NET_EOF;
 8002b3e:	f06f 0003 	mvn.w	r0, #3
}
 8002b42:	b003      	add	sp, #12
 8002b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return (rc < 0) ? rc : sent;
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d0f4      	beq.n	8002b36 <net_sock_send_mbedtls+0x92>
 8002b4c:	e7f9      	b.n	8002b42 <net_sock_send_mbedtls+0x9e>
 8002b4e:	bf00      	nop
 8002b50:	08027d5e 	.word	0x08027d5e
 8002b54:	0802d3b1 	.word	0x0802d3b1
 8002b58:	0802e1b8 	.word	0x0802e1b8

08002b5c <net_sock_close_mbedtls>:
{
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4604      	mov	r4, r0
  net_tls_data_t * tlsData = sock->tlsData;
 8002b60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ret = mbedtls_ssl_close_notify(&tlsData->ssl);
 8002b62:	f500 751a 	add.w	r5, r0, #616	; 0x268
 8002b66:	4628      	mov	r0, r5
 8002b68:	f01b fb96 	bl	801e298 <mbedtls_ssl_close_notify>
  while ( (ret == MBEDTLS_ERR_SSL_WANT_WRITE) || (ret == MBEDTLS_ERR_SSL_WANT_READ) );
 8002b6c:	f510 4fd1 	cmn.w	r0, #26752	; 0x6880
 8002b70:	d0f9      	beq.n	8002b66 <net_sock_close_mbedtls+0xa>
 8002b72:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8002b76:	d0f6      	beq.n	8002b66 <net_sock_close_mbedtls+0xa>
  ret = net_sock_close(sock->underlying_sock_ctxt);
 8002b78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002b7a:	f7ff f9f7 	bl	8001f6c <net_sock_close>
 8002b7e:	4605      	mov	r5, r0
  ret |= net_sock_destroy(sock->underlying_sock_ctxt);
 8002b80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002b82:	f7ff f9f9 	bl	8001f78 <net_sock_destroy>
  if (ret != NET_OK)
 8002b86:	ea55 0300 	orrs.w	r3, r5, r0
 8002b8a:	d011      	beq.n	8002bb0 <net_sock_close_mbedtls+0x54>
    msg_error("Underlying net_sock_close() or net_sock_destroy() failed.\n");
 8002b8c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8002b90:	490a      	ldr	r1, [pc, #40]	; (8002bbc <net_sock_close_mbedtls+0x60>)
 8002b92:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <net_sock_close_mbedtls+0x64>)
 8002b94:	f020 fcba 	bl	802350c <iprintf>
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <net_sock_close_mbedtls+0x68>)
 8002b9a:	f020 fd3f 	bl	802361c <puts>
    msg_error("Freeing the mbedtls context anyway.\n");
 8002b9e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002ba2:	4906      	ldr	r1, [pc, #24]	; (8002bbc <net_sock_close_mbedtls+0x60>)
 8002ba4:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <net_sock_close_mbedtls+0x64>)
 8002ba6:	f020 fcb1 	bl	802350c <iprintf>
 8002baa:	4807      	ldr	r0, [pc, #28]	; (8002bc8 <net_sock_close_mbedtls+0x6c>)
 8002bac:	f020 fd36 	bl	802361c <puts>
  internal_close(sock);
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff fca7 	bl	8002504 <internal_close>
}
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	bd38      	pop	{r3, r4, r5, pc}
 8002bba:	bf00      	nop
 8002bbc:	08027d74 	.word	0x08027d74
 8002bc0:	0802d3b1 	.word	0x0802d3b1
 8002bc4:	0802e1e7 	.word	0x0802e1e7
 8002bc8:	0802e221 	.word	0x0802e221

08002bcc <net_sock_destroy_mbedtls>:
  net_ctxt_t *ctxt = sock->net;
 8002bcc:	6802      	ldr	r2, [r0, #0]
  if (sock == ctxt->sock_list)
 8002bce:	6853      	ldr	r3, [r2, #4]
 8002bd0:	4283      	cmp	r3, r0
{
 8002bd2:	b510      	push	{r4, lr}
 8002bd4:	4604      	mov	r4, r0
  if (sock == ctxt->sock_list)
 8002bd6:	d109      	bne.n	8002bec <net_sock_destroy_mbedtls+0x20>
    ctxt->sock_list = sock->next;
 8002bd8:	6843      	ldr	r3, [r0, #4]
 8002bda:	6053      	str	r3, [r2, #4]
    net_free(sock->tlsData);
 8002bdc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002bde:	f01f fb59 	bl	8022294 <free>
    net_free(sock);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f01f fb56 	bl	8022294 <free>
 8002be8:	2000      	movs	r0, #0
  return rc;
 8002bea:	e00a      	b.n	8002c02 <net_sock_destroy_mbedtls+0x36>
      if (cur->next == sock)
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	42a2      	cmp	r2, r4
 8002bf0:	6851      	ldr	r1, [r2, #4]
 8002bf2:	d101      	bne.n	8002bf8 <net_sock_destroy_mbedtls+0x2c>
        cur->next = sock->next;
 8002bf4:	6059      	str	r1, [r3, #4]
 8002bf6:	e7f1      	b.n	8002bdc <net_sock_destroy_mbedtls+0x10>
 8002bf8:	4613      	mov	r3, r2
    } while(cur->next != NULL);
 8002bfa:	2900      	cmp	r1, #0
 8002bfc:	d1f6      	bne.n	8002bec <net_sock_destroy_mbedtls+0x20>
  int rc = NET_ERR;
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c02:	bd10      	pop	{r4, pc}

08002c04 <net_sock_create_mbedtls>:
{
 8002c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c08:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c0a:	2038      	movs	r0, #56	; 0x38
{
 8002c0c:	460f      	mov	r7, r1
 8002c0e:	4690      	mov	r8, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c10:	f01f fb38 	bl	8022284 <malloc>
  if (sock == NULL) 
 8002c14:	4604      	mov	r4, r0
 8002c16:	b958      	cbnz	r0, 8002c30 <net_sock_create_mbedtls+0x2c>
    msg_error("net_sock_create allocation 1 failed.\n");
 8002c18:	224b      	movs	r2, #75	; 0x4b
 8002c1a:	4921      	ldr	r1, [pc, #132]	; (8002ca0 <net_sock_create_mbedtls+0x9c>)
 8002c1c:	4821      	ldr	r0, [pc, #132]	; (8002ca4 <net_sock_create_mbedtls+0xa0>)
 8002c1e:	f020 fc75 	bl	802350c <iprintf>
 8002c22:	4821      	ldr	r0, [pc, #132]	; (8002ca8 <net_sock_create_mbedtls+0xa4>)
 8002c24:	f020 fcfa 	bl	802361c <puts>
      rc = NET_ERR;
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 8002c30:	2238      	movs	r2, #56	; 0x38
 8002c32:	2100      	movs	r1, #0
 8002c34:	f01f fb7b 	bl	802232e <memset>
    tlsData = net_malloc(sizeof(net_tls_data_t));
 8002c38:	f44f 60e4 	mov.w	r0, #1824	; 0x720
 8002c3c:	f01f fb22 	bl	8022284 <malloc>
    if (tlsData == NULL)
 8002c40:	4606      	mov	r6, r0
 8002c42:	b958      	cbnz	r0, 8002c5c <net_sock_create_mbedtls+0x58>
      msg_error("net_sock_create allocation 2 failed.\n");
 8002c44:	2254      	movs	r2, #84	; 0x54
 8002c46:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <net_sock_create_mbedtls+0x9c>)
 8002c48:	4816      	ldr	r0, [pc, #88]	; (8002ca4 <net_sock_create_mbedtls+0xa0>)
 8002c4a:	f020 fc5f 	bl	802350c <iprintf>
 8002c4e:	4817      	ldr	r0, [pc, #92]	; (8002cac <net_sock_create_mbedtls+0xa8>)
 8002c50:	f020 fce4 	bl	802361c <puts>
      net_free(sock);
 8002c54:	4620      	mov	r0, r4
 8002c56:	f01f fb1d 	bl	8022294 <free>
 8002c5a:	e7e5      	b.n	8002c28 <net_sock_create_mbedtls+0x24>
      memset(tlsData, 0, sizeof(net_tls_data_t));
 8002c5c:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8002c60:	2100      	movs	r1, #0
 8002c62:	f01f fb64 	bl	802232e <memset>
      sock->next = ctxt->sock_list;
 8002c66:	686a      	ldr	r2, [r5, #4]
 8002c68:	6062      	str	r2, [r4, #4]
      sock->methods.open    = (net_sock_open_mbedtls);
 8002c6a:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <net_sock_create_mbedtls+0xac>)
 8002c6c:	60a2      	str	r2, [r4, #8]
      sock->methods.recv    = (net_sock_recv_mbedtls);
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <net_sock_create_mbedtls+0xb0>)
 8002c70:	60e2      	str	r2, [r4, #12]
      sock->methods.send    = (net_sock_send_mbedtls);
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <net_sock_create_mbedtls+0xb4>)
 8002c74:	6162      	str	r2, [r4, #20]
      tlsData->tls_srv_verification = true;
 8002c76:	2301      	movs	r3, #1
      sock->methods.close   = (net_sock_close_mbedtls);
 8002c78:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <net_sock_create_mbedtls+0xb8>)
      tlsData->tls_srv_verification = true;
 8002c7a:	7633      	strb	r3, [r6, #24]
      sock->methods.close   = (net_sock_close_mbedtls);
 8002c7c:	61e2      	str	r2, [r4, #28]
      sock->blocking        = NET_DEFAULT_BLOCKING;
 8002c7e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <net_sock_create_mbedtls+0xbc>)
      ctxt->sock_list       = sock;                       /* Insert at the head of the list */
 8002c84:	606c      	str	r4, [r5, #4]
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002c86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
      sock->net = ctxt;
 8002c8a:	6025      	str	r5, [r4, #0]
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002c8c:	6222      	str	r2, [r4, #32]
      sock->proto           = proto;
 8002c8e:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002c92:	84e3      	strh	r3, [r4, #38]	; 0x26
      sock->write_timeout   = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 8002c94:	8523      	strh	r3, [r4, #40]	; 0x28
      sock->tlsData         = tlsData;
 8002c96:	62e6      	str	r6, [r4, #44]	; 0x2c
      *sockhnd = (net_sockhnd_t) sock;
 8002c98:	603c      	str	r4, [r7, #0]
      rc = NET_OK;
 8002c9a:	2000      	movs	r0, #0
  return rc;
 8002c9c:	e7c6      	b.n	8002c2c <net_sock_create_mbedtls+0x28>
 8002c9e:	bf00      	nop
 8002ca0:	08027d8b 	.word	0x08027d8b
 8002ca4:	0802d3b1 	.word	0x0802d3b1
 8002ca8:	0802e245 	.word	0x0802e245
 8002cac:	0802e26a 	.word	0x0802e26a
 8002cb0:	08002555 	.word	0x08002555
 8002cb4:	080029e1 	.word	0x080029e1
 8002cb8:	08002aa5 	.word	0x08002aa5
 8002cbc:	08002b5d 	.word	0x08002b5d
 8002cc0:	08002bcd 	.word	0x08002bcd

08002cc4 <TimerCountdownMS>:
#include "main.h"
#include "paho_timer.h"  


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms)
{
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002cca:	f005 fec3 	bl	8008a54 <HAL_GetTick>
  timer->timeout_ms = timeout_ms;
 8002cce:	e9c4 0500 	strd	r0, r5, [r4]
}
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}

08002cd4 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout)
{
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002cda:	f005 febb 	bl	8008a54 <HAL_GetTick>
  TimerCountdownMS(timer, timeout * 1000);
 8002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce2:	436b      	muls	r3, r5
  timer->init_tick = HAL_GetTick();
 8002ce4:	6020      	str	r0, [r4, #0]
  timer->timeout_ms = timeout_ms;
 8002ce6:	6063      	str	r3, [r4, #4]
}
 8002ce8:	bd38      	pop	{r3, r4, r5, pc}

08002cea <TimerLeftMS>:


int TimerLeftMS(Timer* timer)
{
 8002cea:	b510      	push	{r4, lr}
 8002cec:	4604      	mov	r4, r0
  int ret = 0;
  uint32_t cur_tick = HAL_GetTick();  // The HAL tick period is 1 millisecond.
 8002cee:	f005 feb1 	bl	8008a54 <HAL_GetTick>
  if (cur_tick < timer->init_tick)
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	4283      	cmp	r3, r0
 8002cf6:	d905      	bls.n	8002d04 <TimerLeftMS+0x1a>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", timer->init_tick, cur_tick);
    timer->timeout_ms -= 0xFFFFFFFF - timer->init_tick;
 8002cf8:	6862      	ldr	r2, [r4, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	6063      	str	r3, [r4, #4]
    timer->init_tick = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	6023      	str	r3, [r4, #0]
  }
  ret = timer->timeout_ms - (cur_tick - timer->init_tick);
 8002d04:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	1a18      	subs	r0, r3, r0

  return (ret >= 0) ? ret : 0;
}
 8002d0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002d10:	bd10      	pop	{r4, pc}

08002d12 <TimerIsExpired>:


char TimerIsExpired(Timer* timer)
{
 8002d12:	b508      	push	{r3, lr}
  return (TimerLeftMS(timer) > 0) ? 0 : 1;
 8002d14:	f7ff ffe9 	bl	8002cea <TimerLeftMS>
}
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bfcc      	ite	gt
 8002d1c:	2000      	movgt	r0, #0
 8002d1e:	2001      	movle	r0, #1
 8002d20:	bd08      	pop	{r3, pc}

08002d22 <TimerInit>:


void TimerInit(Timer* timer)
{
  timer->init_tick = 0;
 8002d22:	2300      	movs	r3, #0
  timer->timeout_ms = 0;
 8002d24:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002d28:	4770      	bx	lr
	...

08002d2c <init_sensors>:
  * @param  none
  * @retval 0 in case of success
  *         -1 in case of failure
  */
int init_sensors(void)
{
 8002d2c:	b510      	push	{r4, lr}
  int ret = 0;
  
  if (HSENSOR_OK != BSP_HSENSOR_Init())
 8002d2e:	f002 fa81 	bl	8005234 <BSP_HSENSOR_Init>
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d054      	beq.n	8002de0 <init_sensors+0xb4>
  {
    msg_error("BSP_HSENSOR_Init() returns %d\n", ret);
 8002d36:	2252      	movs	r2, #82	; 0x52
 8002d38:	492a      	ldr	r1, [pc, #168]	; (8002de4 <init_sensors+0xb8>)
 8002d3a:	482b      	ldr	r0, [pc, #172]	; (8002de8 <init_sensors+0xbc>)
 8002d3c:	f020 fbe6 	bl	802350c <iprintf>
 8002d40:	2100      	movs	r1, #0
 8002d42:	482a      	ldr	r0, [pc, #168]	; (8002dec <init_sensors+0xc0>)
 8002d44:	f020 fbe2 	bl	802350c <iprintf>
    ret = -1;
 8002d48:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (TSENSOR_OK != BSP_TSENSOR_Init())
 8002d4c:	f002 fad2 	bl	80052f4 <BSP_TSENSOR_Init>
 8002d50:	b150      	cbz	r0, 8002d68 <init_sensors+0x3c>
  {
    msg_error("BSP_TSENSOR_Init() returns %d\n", ret);
 8002d52:	2258      	movs	r2, #88	; 0x58
 8002d54:	4923      	ldr	r1, [pc, #140]	; (8002de4 <init_sensors+0xb8>)
 8002d56:	4824      	ldr	r0, [pc, #144]	; (8002de8 <init_sensors+0xbc>)
 8002d58:	f020 fbd8 	bl	802350c <iprintf>
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	4824      	ldr	r0, [pc, #144]	; (8002df0 <init_sensors+0xc4>)
 8002d60:	f020 fbd4 	bl	802350c <iprintf>
    ret = -1;
 8002d64:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (PSENSOR_OK != BSP_PSENSOR_Init())
 8002d68:	f002 faa8 	bl	80052bc <BSP_PSENSOR_Init>
 8002d6c:	b150      	cbz	r0, 8002d84 <init_sensors+0x58>
  {
    msg_error("BSP_PSENSOR_Init() returns %d\n", ret);
 8002d6e:	225e      	movs	r2, #94	; 0x5e
 8002d70:	491c      	ldr	r1, [pc, #112]	; (8002de4 <init_sensors+0xb8>)
 8002d72:	481d      	ldr	r0, [pc, #116]	; (8002de8 <init_sensors+0xbc>)
 8002d74:	f020 fbca 	bl	802350c <iprintf>
 8002d78:	4621      	mov	r1, r4
 8002d7a:	481e      	ldr	r0, [pc, #120]	; (8002df4 <init_sensors+0xc8>)
 8002d7c:	f020 fbc6 	bl	802350c <iprintf>
    ret = -1;
 8002d80:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (MAGNETO_OK != BSP_MAGNETO_Init())
 8002d84:	f002 fa72 	bl	800526c <BSP_MAGNETO_Init>
 8002d88:	b150      	cbz	r0, 8002da0 <init_sensors+0x74>
  {
    msg_error("BSP_MAGNETO_Init() returns %d\n", ret);
 8002d8a:	2264      	movs	r2, #100	; 0x64
 8002d8c:	4915      	ldr	r1, [pc, #84]	; (8002de4 <init_sensors+0xb8>)
 8002d8e:	4816      	ldr	r0, [pc, #88]	; (8002de8 <init_sensors+0xbc>)
 8002d90:	f020 fbbc 	bl	802350c <iprintf>
 8002d94:	4621      	mov	r1, r4
 8002d96:	4818      	ldr	r0, [pc, #96]	; (8002df8 <init_sensors+0xcc>)
 8002d98:	f020 fbb8 	bl	802350c <iprintf>
    ret = -1;
 8002d9c:	f04f 34ff 	mov.w	r4, #4294967295
  }

  if (GYRO_OK != BSP_GYRO_Init())
 8002da0:	f002 fa2a 	bl	80051f8 <BSP_GYRO_Init>
 8002da4:	b150      	cbz	r0, 8002dbc <init_sensors+0x90>
  {
    msg_error("BSP_GYRO_Init() returns %d\n", ret);
 8002da6:	226a      	movs	r2, #106	; 0x6a
 8002da8:	490e      	ldr	r1, [pc, #56]	; (8002de4 <init_sensors+0xb8>)
 8002daa:	480f      	ldr	r0, [pc, #60]	; (8002de8 <init_sensors+0xbc>)
 8002dac:	f020 fbae 	bl	802350c <iprintf>
 8002db0:	4621      	mov	r1, r4
 8002db2:	4812      	ldr	r0, [pc, #72]	; (8002dfc <init_sensors+0xd0>)
 8002db4:	f020 fbaa 	bl	802350c <iprintf>
    ret = -1;
 8002db8:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (ACCELERO_OK != BSP_ACCELERO_Init())
 8002dbc:	f002 f9fe 	bl	80051bc <BSP_ACCELERO_Init>
 8002dc0:	b150      	cbz	r0, 8002dd8 <init_sensors+0xac>
  {
    msg_error("BSP_ACCELERO_Init() returns %d\n", ret);
 8002dc2:	2270      	movs	r2, #112	; 0x70
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <init_sensors+0xb8>)
 8002dc6:	4808      	ldr	r0, [pc, #32]	; (8002de8 <init_sensors+0xbc>)
 8002dc8:	f020 fba0 	bl	802350c <iprintf>
 8002dcc:	4621      	mov	r1, r4
 8002dce:	480c      	ldr	r0, [pc, #48]	; (8002e00 <init_sensors+0xd4>)
 8002dd0:	f020 fb9c 	bl	802350c <iprintf>
    ret = -1;
 8002dd4:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  VL53L0X_PROXIMITY_Init();
 8002dd8:	f001 fcca 	bl	8004770 <VL53L0X_PROXIMITY_Init>
  
  return ret;
}
 8002ddc:	4620      	mov	r0, r4
 8002dde:	bd10      	pop	{r4, pc}
  int ret = 0;
 8002de0:	4604      	mov	r4, r0
 8002de2:	e7b3      	b.n	8002d4c <init_sensors+0x20>
 8002de4:	08027da3 	.word	0x08027da3
 8002de8:	0802d3b1 	.word	0x0802d3b1
 8002dec:	0802e28f 	.word	0x0802e28f
 8002df0:	0802e2ae 	.word	0x0802e2ae
 8002df4:	0802e2cd 	.word	0x0802e2cd
 8002df8:	0802e2ec 	.word	0x0802e2ec
 8002dfc:	0802e30b 	.word	0x0802e30b
 8002e00:	0802e327 	.word	0x0802e327

08002e04 <setRTCTimeDateFromNetwork>:
 *            TD_ERR_RTC          Could not set the RTC.
 *            TD_ERR_TLS_CERT     The server certificate verification failed. Applicable only when force_apply is false.
 *                                .
 */
int setRTCTimeDateFromNetwork(bool force_apply)
{
 8002e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e08:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 // return 0;
  int rc = TD_OK;
  int ret = NET_OK;
  net_sockhnd_t socket = NULL;
 8002e0c:	2100      	movs	r1, #0
  int len = strlen(http_request);
  char buffer[NET_BUF_SIZE + 1]; /* +1 to be sure that the buffer is closed by a \0, so that it may be parsed by string commands. */
  memset(buffer, 0, sizeof(buffer));
 8002e0e:	f240 32e9 	movw	r2, #1001	; 0x3e9
{
 8002e12:	4607      	mov	r7, r0
  memset(buffer, 0, sizeof(buffer));
 8002e14:	a819      	add	r0, sp, #100	; 0x64
  net_sockhnd_t socket = NULL;
 8002e16:	9108      	str	r1, [sp, #32]
  memset(buffer, 0, sizeof(buffer));
 8002e18:	f01f fa89 	bl	802232e <memset>
 
  ret = net_sock_create(hnet, &socket, TIME_SOURCE_HTTP_PROTO);
 8002e1c:	4bac      	ldr	r3, [pc, #688]	; (80030d0 <setRTCTimeDateFromNetwork+0x2cc>)
 8002e1e:	2202      	movs	r2, #2
 8002e20:	a908      	add	r1, sp, #32
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	f7fe ffc0 	bl	8001da8 <net_sock_create>
  if (ret != NET_OK)
 8002e28:	4605      	mov	r5, r0
 8002e2a:	b348      	cbz	r0, 8002e80 <setRTCTimeDateFromNetwork+0x7c>
  {
    msg_error("Could not create the socket.\n");
 8002e2c:	2267      	movs	r2, #103	; 0x67
 8002e2e:	49a9      	ldr	r1, [pc, #676]	; (80030d4 <setRTCTimeDateFromNetwork+0x2d0>)
 8002e30:	48a9      	ldr	r0, [pc, #676]	; (80030d8 <setRTCTimeDateFromNetwork+0x2d4>)
 8002e32:	f020 fb6b 	bl	802350c <iprintf>
 8002e36:	48a9      	ldr	r0, [pc, #676]	; (80030dc <setRTCTimeDateFromNetwork+0x2d8>)
 8002e38:	f020 fbf0 	bl	802361c <puts>
    }
  }
  
  if (ret != NET_OK)
  {
    msg_error("Could not set the socket options.\n");
 8002e3c:	2277      	movs	r2, #119	; 0x77
 8002e3e:	49a5      	ldr	r1, [pc, #660]	; (80030d4 <setRTCTimeDateFromNetwork+0x2d0>)
 8002e40:	48a5      	ldr	r0, [pc, #660]	; (80030d8 <setRTCTimeDateFromNetwork+0x2d4>)
 8002e42:	f020 fb63 	bl	802350c <iprintf>
 8002e46:	48a6      	ldr	r0, [pc, #664]	; (80030e0 <setRTCTimeDateFromNetwork+0x2dc>)
 8002e48:	f020 fbe8 	bl	802361c <puts>
  else
  {
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
  }
  
  if (ret == NET_AUTH)
 8002e4c:	1daa      	adds	r2, r5, #6
 8002e4e:	d04a      	beq.n	8002ee6 <setRTCTimeDateFromNetwork+0xe2>
  int rc = TD_OK;
 8002e50:	2400      	movs	r4, #0
    rc = TD_ERR_TLS_CERT;
  }
  
  if ( (ret != NET_OK) || (rc != TD_OK) )
  {
    msg_error("Could not open the socket.\n");
 8002e52:	2286      	movs	r2, #134	; 0x86
 8002e54:	499f      	ldr	r1, [pc, #636]	; (80030d4 <setRTCTimeDateFromNetwork+0x2d0>)
 8002e56:	48a0      	ldr	r0, [pc, #640]	; (80030d8 <setRTCTimeDateFromNetwork+0x2d4>)
 8002e58:	f020 fb58 	bl	802350c <iprintf>
 8002e5c:	48a1      	ldr	r0, [pc, #644]	; (80030e4 <setRTCTimeDateFromNetwork+0x2e0>)
 8002e5e:	f020 fbdd 	bl	802361c <puts>
    }
    
    ret = net_sock_close(socket);  
  }
  
  if (socket != NULL)
 8002e62:	9808      	ldr	r0, [sp, #32]
 8002e64:	b110      	cbz	r0, 8002e6c <setRTCTimeDateFromNetwork+0x68>
  {
    ret |= net_sock_destroy(socket);
 8002e66:	f7ff f887 	bl	8001f78 <net_sock_destroy>
 8002e6a:	4305      	orrs	r5, r0
  }
  /* Translate a socket closure error in network error. */
  if ((rc == TD_OK) && (ret != NET_OK))
 8002e6c:	b91c      	cbnz	r4, 8002e76 <setRTCTimeDateFromNetwork+0x72>
 8002e6e:	1c2c      	adds	r4, r5, #0
 8002e70:	bf18      	it	ne
 8002e72:	2401      	movne	r4, #1
 8002e74:	4264      	negs	r4, r4
  {
    rc = TD_ERR_CONNECT;
  }
  
  return rc;
}
 8002e76:	4620      	mov	r0, r4
 8002e78:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 8002e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002e80:	4a99      	ldr	r2, [pc, #612]	; (80030e8 <setRTCTimeDateFromNetwork+0x2e4>)
 8002e82:	499a      	ldr	r1, [pc, #616]	; (80030ec <setRTCTimeDateFromNetwork+0x2e8>)
 8002e84:	9808      	ldr	r0, [sp, #32]
 8002e86:	2305      	movs	r3, #5
 8002e88:	f7fe ffc0 	bl	8001e0c <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002e8c:	4b98      	ldr	r3, [pc, #608]	; (80030f0 <setRTCTimeDateFromNetwork+0x2ec>)
 8002e8e:	681e      	ldr	r6, [r3, #0]
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002e90:	4604      	mov	r4, r0
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002e92:	4630      	mov	r0, r6
 8002e94:	f7fd f9a6 	bl	80001e4 <strlen>
 8002e98:	4632      	mov	r2, r6
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4995      	ldr	r1, [pc, #596]	; (80030f4 <setRTCTimeDateFromNetwork+0x2f0>)
 8002e9e:	9808      	ldr	r0, [sp, #32]
 8002ea0:	f7fe ffb4 	bl	8001e0c <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002ea4:	230e      	movs	r3, #14
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002ea6:	4304      	orrs	r4, r0
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002ea8:	4a93      	ldr	r2, [pc, #588]	; (80030f8 <setRTCTimeDateFromNetwork+0x2f4>)
 8002eaa:	4994      	ldr	r1, [pc, #592]	; (80030fc <setRTCTimeDateFromNetwork+0x2f8>)
 8002eac:	9808      	ldr	r0, [sp, #32]
 8002eae:	f7fe ffad 	bl	8001e0c <net_sock_setopt>
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002eb2:	4993      	ldr	r1, [pc, #588]	; (8003100 <setRTCTimeDateFromNetwork+0x2fc>)
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002eb4:	4304      	orrs	r4, r0
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002eb6:	4893      	ldr	r0, [pc, #588]	; (8003104 <setRTCTimeDateFromNetwork+0x300>)
 8002eb8:	462b      	mov	r3, r5
 8002eba:	2f00      	cmp	r7, #0
 8002ebc:	bf18      	it	ne
 8002ebe:	4601      	movne	r1, r0
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	9808      	ldr	r0, [sp, #32]
 8002ec4:	f7fe ffa2 	bl	8001e0c <net_sock_setopt>
  if (ret != NET_OK)
 8002ec8:	ea54 0500 	orrs.w	r5, r4, r0
 8002ecc:	d1b6      	bne.n	8002e3c <setRTCTimeDateFromNetwork+0x38>
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002ece:	462b      	mov	r3, r5
 8002ed0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8002ed4:	4988      	ldr	r1, [pc, #544]	; (80030f8 <setRTCTimeDateFromNetwork+0x2f4>)
 8002ed6:	9808      	ldr	r0, [sp, #32]
 8002ed8:	f7fe ff92 	bl	8001e00 <net_sock_open>
  if (ret == NET_AUTH)
 8002edc:	1d83      	adds	r3, r0, #6
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002ede:	4604      	mov	r4, r0
  if (ret == NET_AUTH)
 8002ee0:	f040 817b 	bne.w	80031da <setRTCTimeDateFromNetwork+0x3d6>
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002ee4:	4605      	mov	r5, r0
    msg_error("An incorrect system time may have resulted in a TLS authentication error.\n");
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	497a      	ldr	r1, [pc, #488]	; (80030d4 <setRTCTimeDateFromNetwork+0x2d0>)
 8002eea:	487b      	ldr	r0, [pc, #492]	; (80030d8 <setRTCTimeDateFromNetwork+0x2d4>)
 8002eec:	f020 fb0e 	bl	802350c <iprintf>
 8002ef0:	4885      	ldr	r0, [pc, #532]	; (8003108 <setRTCTimeDateFromNetwork+0x304>)
 8002ef2:	f020 fb93 	bl	802361c <puts>
    rc = TD_ERR_TLS_CERT;
 8002ef6:	f06f 0403 	mvn.w	r4, #3
 8002efa:	e7aa      	b.n	8002e52 <setRTCTimeDateFromNetwork+0x4e>
    ret = net_sock_send(socket, (uint8_t *) http_request, len);
 8002efc:	2228      	movs	r2, #40	; 0x28
 8002efe:	4983      	ldr	r1, [pc, #524]	; (800310c <setRTCTimeDateFromNetwork+0x308>)
 8002f00:	9808      	ldr	r0, [sp, #32]
 8002f02:	f7ff f82d 	bl	8001f60 <net_sock_send>
    if (ret != len)
 8002f06:	2828      	cmp	r0, #40	; 0x28
 8002f08:	d00d      	beq.n	8002f26 <setRTCTimeDateFromNetwork+0x122>
      msg_error("Could not send %d bytes.\n", len);
 8002f0a:	4972      	ldr	r1, [pc, #456]	; (80030d4 <setRTCTimeDateFromNetwork+0x2d0>)
 8002f0c:	4872      	ldr	r0, [pc, #456]	; (80030d8 <setRTCTimeDateFromNetwork+0x2d4>)
 8002f0e:	228e      	movs	r2, #142	; 0x8e
 8002f10:	f020 fafc 	bl	802350c <iprintf>
 8002f14:	2128      	movs	r1, #40	; 0x28
 8002f16:	487e      	ldr	r0, [pc, #504]	; (8003110 <setRTCTimeDateFromNetwork+0x30c>)
 8002f18:	f020 faf8 	bl	802350c <iprintf>
    ret = net_sock_close(socket);  
 8002f1c:	9808      	ldr	r0, [sp, #32]
 8002f1e:	f7ff f825 	bl	8001f6c <net_sock_close>
 8002f22:	4605      	mov	r5, r0
 8002f24:	e79d      	b.n	8002e62 <setRTCTimeDateFromNetwork+0x5e>
          dateStr = strstr(buffer, "Date: ");
 8002f26:	4e7b      	ldr	r6, [pc, #492]	; (8003114 <setRTCTimeDateFromNetwork+0x310>)
      int read = 0;
 8002f28:	4625      	mov	r5, r4
        len = net_sock_recv(socket, (uint8_t *) buffer + read, NET_BUF_SIZE - read);
 8002f2a:	ab19      	add	r3, sp, #100	; 0x64
 8002f2c:	f5c5 727a 	rsb	r2, r5, #1000	; 0x3e8
 8002f30:	1959      	adds	r1, r3, r5
 8002f32:	9808      	ldr	r0, [sp, #32]
 8002f34:	f7ff f80e 	bl	8001f54 <net_sock_recv>
        if (len > 0)
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	dc0b      	bgt.n	8002f54 <setRTCTimeDateFromNetwork+0x150>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002f3c:	d0f5      	beq.n	8002f2a <setRTCTimeDateFromNetwork+0x126>
 8002f3e:	3003      	adds	r0, #3
 8002f40:	d0f3      	beq.n	8002f2a <setRTCTimeDateFromNetwork+0x126>
        msg_error("No 'Date:' line found in the HTTP response header.\n");
 8002f42:	22a0      	movs	r2, #160	; 0xa0
 8002f44:	4963      	ldr	r1, [pc, #396]	; (80030d4 <setRTCTimeDateFromNetwork+0x2d0>)
 8002f46:	4864      	ldr	r0, [pc, #400]	; (80030d8 <setRTCTimeDateFromNetwork+0x2d4>)
 8002f48:	f020 fae0 	bl	802350c <iprintf>
 8002f4c:	4872      	ldr	r0, [pc, #456]	; (8003118 <setRTCTimeDateFromNetwork+0x314>)
 8002f4e:	f020 fb65 	bl	802361c <puts>
 8002f52:	e080      	b.n	8003056 <setRTCTimeDateFromNetwork+0x252>
          read += len;
 8002f54:	4405      	add	r5, r0
          dateStr = strstr(buffer, "Date: ");
 8002f56:	4631      	mov	r1, r6
 8002f58:	a819      	add	r0, sp, #100	; 0x64
 8002f5a:	f020 fca2 	bl	80238a2 <strstr>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002f5e:	9007      	str	r0, [sp, #28]
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d067      	beq.n	8003034 <setRTCTimeDateFromNetwork+0x230>
        memset(month, 0, sizeof(month));
 8002f64:	ad09      	add	r5, sp, #36	; 0x24
        day = year = hour = min = sec = 0;
 8002f66:	af0e      	add	r7, sp, #56	; 0x38
 8002f68:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8002f6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002f70:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 8002f74:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
        memset(dow, 0, sizeof(dow));
 8002f78:	2600      	movs	r6, #0
        memset(month, 0, sizeof(month));
 8002f7a:	602e      	str	r6, [r5, #0]
        day = year = hour = min = sec = 0;
 8002f7c:	603e      	str	r6, [r7, #0]
 8002f7e:	f8c8 6000 	str.w	r6, [r8]
 8002f82:	f8c9 6000 	str.w	r6, [r9]
 8002f86:	f8ca 6000 	str.w	r6, [sl]
 8002f8a:	f8cb 6000 	str.w	r6, [fp]
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002f8e:	ab12      	add	r3, sp, #72	; 0x48
 8002f90:	e9cd 8704 	strd	r8, r7, [sp, #16]
 8002f94:	e9cd a902 	strd	sl, r9, [sp, #8]
 8002f98:	e9cd b500 	strd	fp, r5, [sp]
 8002f9c:	aa10      	add	r2, sp, #64	; 0x40
 8002f9e:	495f      	ldr	r1, [pc, #380]	; (800311c <setRTCTimeDateFromNetwork+0x318>)
        memset(dow, 0, sizeof(dow));
 8002fa0:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fa4:	f020 fbd2 	bl	802374c <siscanf>
        if (count < 8)
 8002fa8:	2807      	cmp	r0, #7
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002faa:	4603      	mov	r3, r0
        if (count < 8)
 8002fac:	dd47      	ble.n	800303e <setRTCTimeDateFromNetwork+0x23a>
          char * str = strstr(dateStr, "\r\n");
 8002fae:	495c      	ldr	r1, [pc, #368]	; (8003120 <setRTCTimeDateFromNetwork+0x31c>)
 8002fb0:	9807      	ldr	r0, [sp, #28]
 8002fb2:	f020 fc76 	bl	80238a2 <strstr>
          msg_info("Configuring the RTC from %s\n", dateStr);
 8002fb6:	9907      	ldr	r1, [sp, #28]
          str[0] = '\0';
 8002fb8:	7006      	strb	r6, [r0, #0]
          msg_info("Configuring the RTC from %s\n", dateStr);
 8002fba:	485a      	ldr	r0, [pc, #360]	; (8003124 <setRTCTimeDateFromNetwork+0x320>)
 8002fbc:	f020 faa6 	bl	802350c <iprintf>
          sTime.Hours = hour;
 8002fc0:	f8d9 3000 	ldr.w	r3, [r9]
 8002fc4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
          sTime.Minutes = min;
 8002fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fcc:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002fd0:	a914      	add	r1, sp, #80	; 0x50
          sTime.Seconds = sec;
 8002fd2:	683b      	ldr	r3, [r7, #0]
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002fd4:	4854      	ldr	r0, [pc, #336]	; (8003128 <setRTCTimeDateFromNetwork+0x324>)
          sTime.Seconds = sec;
 8002fd6:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002fda:	4632      	mov	r2, r6
          sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fdc:	e9cd 6617 	strd	r6, r6, [sp, #92]	; 0x5c
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002fe0:	f007 fd49 	bl	800aa76 <HAL_RTC_SetTime>
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8002fe4:	4951      	ldr	r1, [pc, #324]	; (800312c <setRTCTimeDateFromNetwork+0x328>)
            rc = TD_ERR_RTC;
 8002fe6:	2800      	cmp	r0, #0
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8002fe8:	a812      	add	r0, sp, #72	; 0x48
            rc = TD_ERR_RTC;
 8002fea:	bf18      	it	ne
 8002fec:	f06f 0402 	mvnne.w	r4, #2
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8002ff0:	f7fd f8ee 	bl	80001d0 <strcmp>
 8002ff4:	bb90      	cbnz	r0, 800305c <setRTCTimeDateFromNetwork+0x258>
 8002ff6:	2301      	movs	r3, #1
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 8002ff8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
          if (strcmp(month, "Jan") == 0) { sDate.Month = RTC_MONTH_JANUARY; } else
 8002ffc:	494c      	ldr	r1, [pc, #304]	; (8003130 <setRTCTimeDateFromNetwork+0x32c>)
 8002ffe:	4628      	mov	r0, r5
 8003000:	f7fd f8e6 	bl	80001d0 <strcmp>
 8003004:	2800      	cmp	r0, #0
 8003006:	d154      	bne.n	80030b2 <setRTCTimeDateFromNetwork+0x2ae>
 8003008:	2301      	movs	r3, #1
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 800300a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
          sDate.Date = day;
 800300e:	f8db 3000 	ldr.w	r3, [fp]
 8003012:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
          sDate.Year = year - 2000;
 8003016:	f8da 3000 	ldr.w	r3, [sl]
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800301a:	4843      	ldr	r0, [pc, #268]	; (8003128 <setRTCTimeDateFromNetwork+0x324>)
          sDate.Year = year - 2000;
 800301c:	3330      	adds	r3, #48	; 0x30
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800301e:	2200      	movs	r2, #0
 8003020:	a90f      	add	r1, sp, #60	; 0x3c
          sDate.Year = year - 2000;
 8003022:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003026:	f007 fda0 	bl	800ab6a <HAL_RTC_SetDate>
            rc = TD_ERR_RTC;
 800302a:	2800      	cmp	r0, #0
 800302c:	bf18      	it	ne
 800302e:	f06f 0402 	mvnne.w	r4, #2
 8003032:	e773      	b.n	8002f1c <setRTCTimeDateFromNetwork+0x118>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8003034:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8003038:	f6ff af77 	blt.w	8002f2a <setRTCTimeDateFromNetwork+0x126>
 800303c:	e781      	b.n	8002f42 <setRTCTimeDateFromNetwork+0x13e>
          msg_error("At time initialization, only %d out of the 8 time/date data could be parsed from the HTTP response %s\n", count, buffer);
 800303e:	22b0      	movs	r2, #176	; 0xb0
 8003040:	4924      	ldr	r1, [pc, #144]	; (80030d4 <setRTCTimeDateFromNetwork+0x2d0>)
 8003042:	4825      	ldr	r0, [pc, #148]	; (80030d8 <setRTCTimeDateFromNetwork+0x2d4>)
 8003044:	9307      	str	r3, [sp, #28]
 8003046:	f020 fa61 	bl	802350c <iprintf>
 800304a:	9b07      	ldr	r3, [sp, #28]
 800304c:	4839      	ldr	r0, [pc, #228]	; (8003134 <setRTCTimeDateFromNetwork+0x330>)
 800304e:	aa19      	add	r2, sp, #100	; 0x64
 8003050:	4619      	mov	r1, r3
 8003052:	f020 fa5b 	bl	802350c <iprintf>
        rc = TD_ERR_HTTP;
 8003056:	f06f 0401 	mvn.w	r4, #1
 800305a:	e75f      	b.n	8002f1c <setRTCTimeDateFromNetwork+0x118>
            if (strcmp(dow, "Tue,") == 0) { sDate.WeekDay = RTC_WEEKDAY_TUESDAY; } else
 800305c:	4936      	ldr	r1, [pc, #216]	; (8003138 <setRTCTimeDateFromNetwork+0x334>)
 800305e:	a812      	add	r0, sp, #72	; 0x48
 8003060:	f7fd f8b6 	bl	80001d0 <strcmp>
 8003064:	b908      	cbnz	r0, 800306a <setRTCTimeDateFromNetwork+0x266>
 8003066:	2302      	movs	r3, #2
 8003068:	e7c6      	b.n	8002ff8 <setRTCTimeDateFromNetwork+0x1f4>
              if (strcmp(dow, "Wed,") == 0) { sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; } else  
 800306a:	4934      	ldr	r1, [pc, #208]	; (800313c <setRTCTimeDateFromNetwork+0x338>)
 800306c:	a812      	add	r0, sp, #72	; 0x48
 800306e:	f7fd f8af 	bl	80001d0 <strcmp>
 8003072:	b908      	cbnz	r0, 8003078 <setRTCTimeDateFromNetwork+0x274>
 8003074:	2303      	movs	r3, #3
 8003076:	e7bf      	b.n	8002ff8 <setRTCTimeDateFromNetwork+0x1f4>
                if (strcmp(dow, "Thu,") == 0) { sDate.WeekDay = RTC_WEEKDAY_THURSDAY; } else  
 8003078:	4931      	ldr	r1, [pc, #196]	; (8003140 <setRTCTimeDateFromNetwork+0x33c>)
 800307a:	a812      	add	r0, sp, #72	; 0x48
 800307c:	f7fd f8a8 	bl	80001d0 <strcmp>
 8003080:	b908      	cbnz	r0, 8003086 <setRTCTimeDateFromNetwork+0x282>
 8003082:	2304      	movs	r3, #4
 8003084:	e7b8      	b.n	8002ff8 <setRTCTimeDateFromNetwork+0x1f4>
                  if (strcmp(dow, "Fri,") == 0) { sDate.WeekDay = RTC_WEEKDAY_FRIDAY; } else
 8003086:	492f      	ldr	r1, [pc, #188]	; (8003144 <setRTCTimeDateFromNetwork+0x340>)
 8003088:	a812      	add	r0, sp, #72	; 0x48
 800308a:	f7fd f8a1 	bl	80001d0 <strcmp>
 800308e:	b908      	cbnz	r0, 8003094 <setRTCTimeDateFromNetwork+0x290>
 8003090:	2305      	movs	r3, #5
 8003092:	e7b1      	b.n	8002ff8 <setRTCTimeDateFromNetwork+0x1f4>
                    if (strcmp(dow, "Sat,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SATURDAY; } else
 8003094:	492c      	ldr	r1, [pc, #176]	; (8003148 <setRTCTimeDateFromNetwork+0x344>)
 8003096:	a812      	add	r0, sp, #72	; 0x48
 8003098:	f7fd f89a 	bl	80001d0 <strcmp>
 800309c:	b908      	cbnz	r0, 80030a2 <setRTCTimeDateFromNetwork+0x29e>
 800309e:	2306      	movs	r3, #6
 80030a0:	e7aa      	b.n	8002ff8 <setRTCTimeDateFromNetwork+0x1f4>
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 80030a2:	492a      	ldr	r1, [pc, #168]	; (800314c <setRTCTimeDateFromNetwork+0x348>)
 80030a4:	a812      	add	r0, sp, #72	; 0x48
 80030a6:	f7fd f893 	bl	80001d0 <strcmp>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d1a6      	bne.n	8002ffc <setRTCTimeDateFromNetwork+0x1f8>
 80030ae:	2307      	movs	r3, #7
 80030b0:	e7a2      	b.n	8002ff8 <setRTCTimeDateFromNetwork+0x1f4>
            if (strcmp(month, "Feb") == 0) { sDate.Month = RTC_MONTH_FEBRUARY; } else
 80030b2:	4927      	ldr	r1, [pc, #156]	; (8003150 <setRTCTimeDateFromNetwork+0x34c>)
 80030b4:	4628      	mov	r0, r5
 80030b6:	f7fd f88b 	bl	80001d0 <strcmp>
 80030ba:	b908      	cbnz	r0, 80030c0 <setRTCTimeDateFromNetwork+0x2bc>
 80030bc:	2302      	movs	r3, #2
 80030be:	e7a4      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
              if (strcmp(month, "Mar") == 0) { sDate.Month = RTC_MONTH_MARCH; } else
 80030c0:	4924      	ldr	r1, [pc, #144]	; (8003154 <setRTCTimeDateFromNetwork+0x350>)
 80030c2:	4628      	mov	r0, r5
 80030c4:	f7fd f884 	bl	80001d0 <strcmp>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d145      	bne.n	8003158 <setRTCTimeDateFromNetwork+0x354>
 80030cc:	2303      	movs	r3, #3
 80030ce:	e79c      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
 80030d0:	200011a0 	.word	0x200011a0
 80030d4:	08027db0 	.word	0x08027db0
 80030d8:	0802d3b1 	.word	0x0802d3b1
 80030dc:	0802e347 	.word	0x0802e347
 80030e0:	0802e377 	.word	0x0802e377
 80030e4:	0802e3e3 	.word	0x0802e3e3
 80030e8:	0802e364 	.word	0x0802e364
 80030ec:	0802d9cf 	.word	0x0802d9cf
 80030f0:	20000008 	.word	0x20000008
 80030f4:	0802dbd3 	.word	0x0802dbd3
 80030f8:	0802e369 	.word	0x0802e369
 80030fc:	0802dc37 	.word	0x0802dc37
 8003100:	0802dc05 	.word	0x0802dc05
 8003104:	0802dc1d 	.word	0x0802dc1d
 8003108:	0802e399 	.word	0x0802e399
 800310c:	08027dca 	.word	0x08027dca
 8003110:	0802e3fe 	.word	0x0802e3fe
 8003114:	0802e418 	.word	0x0802e418
 8003118:	0802e4f6 	.word	0x0802e4f6
 800311c:	0802e529 	.word	0x0802e529
 8003120:	0802f869 	.word	0x0802f869
 8003124:	0802e486 	.word	0x0802e486
 8003128:	20001170 	.word	0x20001170
 800312c:	0802e4a3 	.word	0x0802e4a3
 8003130:	0802e4c6 	.word	0x0802e4c6
 8003134:	0802e41f 	.word	0x0802e41f
 8003138:	0802e4a8 	.word	0x0802e4a8
 800313c:	0802e4ad 	.word	0x0802e4ad
 8003140:	0802e4b2 	.word	0x0802e4b2
 8003144:	0802e4b7 	.word	0x0802e4b7
 8003148:	0802e4bc 	.word	0x0802e4bc
 800314c:	0802e4c1 	.word	0x0802e4c1
 8003150:	0802e4ca 	.word	0x0802e4ca
 8003154:	0802e4ce 	.word	0x0802e4ce
                if (strcmp(month, "Apr") == 0) { sDate.Month = RTC_MONTH_APRIL; } else
 8003158:	4923      	ldr	r1, [pc, #140]	; (80031e8 <setRTCTimeDateFromNetwork+0x3e4>)
 800315a:	4628      	mov	r0, r5
 800315c:	f7fd f838 	bl	80001d0 <strcmp>
 8003160:	b908      	cbnz	r0, 8003166 <setRTCTimeDateFromNetwork+0x362>
 8003162:	2304      	movs	r3, #4
 8003164:	e751      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                  if (strcmp(month, "May") == 0) { sDate.Month = RTC_MONTH_MAY; } else
 8003166:	4921      	ldr	r1, [pc, #132]	; (80031ec <setRTCTimeDateFromNetwork+0x3e8>)
 8003168:	4628      	mov	r0, r5
 800316a:	f7fd f831 	bl	80001d0 <strcmp>
 800316e:	b908      	cbnz	r0, 8003174 <setRTCTimeDateFromNetwork+0x370>
 8003170:	2305      	movs	r3, #5
 8003172:	e74a      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                    if (strcmp(month, "Jun") == 0) { sDate.Month = RTC_MONTH_JUNE; } else
 8003174:	491e      	ldr	r1, [pc, #120]	; (80031f0 <setRTCTimeDateFromNetwork+0x3ec>)
 8003176:	4628      	mov	r0, r5
 8003178:	f7fd f82a 	bl	80001d0 <strcmp>
 800317c:	b908      	cbnz	r0, 8003182 <setRTCTimeDateFromNetwork+0x37e>
 800317e:	2306      	movs	r3, #6
 8003180:	e743      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                      if (strcmp(month, "Jul") == 0) { sDate.Month = RTC_MONTH_JULY; } else
 8003182:	491c      	ldr	r1, [pc, #112]	; (80031f4 <setRTCTimeDateFromNetwork+0x3f0>)
 8003184:	4628      	mov	r0, r5
 8003186:	f7fd f823 	bl	80001d0 <strcmp>
 800318a:	b908      	cbnz	r0, 8003190 <setRTCTimeDateFromNetwork+0x38c>
 800318c:	2307      	movs	r3, #7
 800318e:	e73c      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                        if (strcmp(month, "Aug") == 0) { sDate.Month = RTC_MONTH_AUGUST; } else
 8003190:	4919      	ldr	r1, [pc, #100]	; (80031f8 <setRTCTimeDateFromNetwork+0x3f4>)
 8003192:	4628      	mov	r0, r5
 8003194:	f7fd f81c 	bl	80001d0 <strcmp>
 8003198:	b908      	cbnz	r0, 800319e <setRTCTimeDateFromNetwork+0x39a>
 800319a:	2308      	movs	r3, #8
 800319c:	e735      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                          if (strcmp(month, "Sep") == 0) { sDate.Month = RTC_MONTH_SEPTEMBER; } else
 800319e:	4917      	ldr	r1, [pc, #92]	; (80031fc <setRTCTimeDateFromNetwork+0x3f8>)
 80031a0:	4628      	mov	r0, r5
 80031a2:	f7fd f815 	bl	80001d0 <strcmp>
 80031a6:	b908      	cbnz	r0, 80031ac <setRTCTimeDateFromNetwork+0x3a8>
 80031a8:	2309      	movs	r3, #9
 80031aa:	e72e      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                            if (strcmp(month, "Oct") == 0) { sDate.Month = RTC_MONTH_OCTOBER; } else
 80031ac:	4914      	ldr	r1, [pc, #80]	; (8003200 <setRTCTimeDateFromNetwork+0x3fc>)
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7fd f80e 	bl	80001d0 <strcmp>
 80031b4:	b908      	cbnz	r0, 80031ba <setRTCTimeDateFromNetwork+0x3b6>
 80031b6:	2310      	movs	r3, #16
 80031b8:	e727      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                              if (strcmp(month, "Nov") == 0) { sDate.Month = RTC_MONTH_NOVEMBER; } else
 80031ba:	4912      	ldr	r1, [pc, #72]	; (8003204 <setRTCTimeDateFromNetwork+0x400>)
 80031bc:	4628      	mov	r0, r5
 80031be:	f7fd f807 	bl	80001d0 <strcmp>
 80031c2:	b908      	cbnz	r0, 80031c8 <setRTCTimeDateFromNetwork+0x3c4>
 80031c4:	2311      	movs	r3, #17
 80031c6:	e720      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 80031c8:	490f      	ldr	r1, [pc, #60]	; (8003208 <setRTCTimeDateFromNetwork+0x404>)
 80031ca:	4628      	mov	r0, r5
 80031cc:	f7fd f800 	bl	80001d0 <strcmp>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	f47f af1c 	bne.w	800300e <setRTCTimeDateFromNetwork+0x20a>
 80031d6:	2312      	movs	r3, #18
 80031d8:	e717      	b.n	800300a <setRTCTimeDateFromNetwork+0x206>
  if ( (ret != NET_OK) || (rc != TD_OK) )
 80031da:	2800      	cmp	r0, #0
 80031dc:	f43f ae8e 	beq.w	8002efc <setRTCTimeDateFromNetwork+0xf8>
 80031e0:	4623      	mov	r3, r4
  int rc = TD_OK;
 80031e2:	462c      	mov	r4, r5
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 80031e4:	461d      	mov	r5, r3
 80031e6:	e634      	b.n	8002e52 <setRTCTimeDateFromNetwork+0x4e>
 80031e8:	0802e4d2 	.word	0x0802e4d2
 80031ec:	0802e4d6 	.word	0x0802e4d6
 80031f0:	0802e4da 	.word	0x0802e4da
 80031f4:	0802e4de 	.word	0x0802e4de
 80031f8:	0802e4e2 	.word	0x0802e4e2
 80031fc:	0802e4e6 	.word	0x0802e4e6
 8003200:	0802e4ea 	.word	0x0802e4ea
 8003204:	0802e4ee 	.word	0x0802e4ee
 8003208:	0802e4f2 	.word	0x0802e4f2

0800320c <time>:


#elif defined (__GNUC__)
time_t time(time_t * pointer)
{
  return (time_t)TimingSystemGetSystemTime();
 800320c:	f7fd becc 	b.w	8000fa8 <TimingSystemGetSystemTime>

08003210 <net_if_init>:
int net_if_deinit(void * if_ctxt);
int net_if_reinit(void * if_ctxt);

/* Functions Definition ------------------------------------------------------*/
int net_if_init(void * if_ctxt)
{
 8003210:	b570      	push	{r4, r5, r6, lr}
  WIFI_Status_t wifiRes;
  uint8_t macAddress[6];
  int wifiConnectCounter = 0;
  bool skip_reconf = false;

  printf("\n*** WIFI connection ***\n\n");
 8003212:	4841      	ldr	r0, [pc, #260]	; (8003318 <net_if_init+0x108>)
{
 8003214:	b092      	sub	sp, #72	; 0x48
  printf("\n*** WIFI connection ***\n\n");
 8003216:	f020 fa01 	bl	802361c <puts>

  skip_reconf = (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) == HAL_OK);
 800321a:	f10d 0217 	add.w	r2, sp, #23
 800321e:	a907      	add	r1, sp, #28
 8003220:	a806      	add	r0, sp, #24
 8003222:	f7fe f999 	bl	8001558 <checkWiFiCredentials>

  if (skip_reconf == true)
 8003226:	b168      	cbz	r0, 8003244 <net_if_init+0x34>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    printf("Your WiFi parameters need to be entered to proceed.\n");
 8003228:	483c      	ldr	r0, [pc, #240]	; (800331c <net_if_init+0x10c>)
 800322a:	f020 f9f7 	bl	802361c <puts>
    do
    {
      updateWiFiCredentials();
 800322e:	f7fe f9c3 	bl	80015b8 <updateWiFiCredentials>
    } while (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK);
 8003232:	f10d 0217 	add.w	r2, sp, #23
 8003236:	a907      	add	r1, sp, #28
 8003238:	a806      	add	r0, sp, #24
 800323a:	f7fe f98d 	bl	8001558 <checkWiFiCredentials>
 800323e:	2800      	cmp	r0, #0
 8003240:	d1f5      	bne.n	800322e <net_if_init+0x1e>
 8003242:	e008      	b.n	8003256 <net_if_init+0x46>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update"
 8003244:	4836      	ldr	r0, [pc, #216]	; (8003320 <net_if_init+0x110>)
 8003246:	f020 f9e9 	bl	802361c <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 800324a:	f241 3088 	movw	r0, #5000	; 0x1388
 800324e:	f000 ff51 	bl	80040f4 <Button_WaitForPush>
  if (skip_reconf == false)
 8003252:	2800      	cmp	r0, #0
 8003254:	d1e8      	bne.n	8003228 <net_if_init+0x18>
  }
  
  /*  Wifi Module initialization */
  printf("Initializing the WiFi module\n");
 8003256:	4833      	ldr	r0, [pc, #204]	; (8003324 <net_if_init+0x114>)
 8003258:	f020 f9e0 	bl	802361c <puts>
  
  wifiRes = WIFI_Init();
 800325c:	f001 fd32 	bl	8004cc4 <WIFI_Init>
  if ( WIFI_STATUS_OK != wifiRes )
 8003260:	b128      	cbz	r0, 800326e <net_if_init+0x5e>
  {
    printf("Failed to initialize WIFI module\n");
 8003262:	4831      	ldr	r0, [pc, #196]	; (8003328 <net_if_init+0x118>)
 8003264:	f020 f9da 	bl	802361c <puts>
  else
  {
    printf("\nFailed to connect to AP %s\n",ssid);
  }
  
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	e051      	b.n	8003312 <net_if_init+0x102>
  WIFI_GetModuleName(moduleinfo);
 800326e:	a80a      	add	r0, sp, #40	; 0x28
 8003270:	f001 fe24 	bl	8004ebc <WIFI_GetModuleName>
  printf("Module initialized successfully: %s",moduleinfo);
 8003274:	a90a      	add	r1, sp, #40	; 0x28
 8003276:	482d      	ldr	r0, [pc, #180]	; (800332c <net_if_init+0x11c>)
 8003278:	f020 f948 	bl	802350c <iprintf>
  WIFI_GetModuleID(moduleinfo);
 800327c:	a80a      	add	r0, sp, #40	; 0x28
 800327e:	f001 fe13 	bl	8004ea8 <WIFI_GetModuleID>
  printf(" %s",moduleinfo);
 8003282:	a90a      	add	r1, sp, #40	; 0x28
 8003284:	482a      	ldr	r0, [pc, #168]	; (8003330 <net_if_init+0x120>)
 8003286:	f020 f941 	bl	802350c <iprintf>
  WIFI_GetModuleFwRevision(moduleinfo);
 800328a:	a80a      	add	r0, sp, #40	; 0x28
 800328c:	f001 fe02 	bl	8004e94 <WIFI_GetModuleFwRevision>
  printf(" %s\n",moduleinfo);
 8003290:	a90a      	add	r1, sp, #40	; 0x28
 8003292:	4828      	ldr	r0, [pc, #160]	; (8003334 <net_if_init+0x124>)
 8003294:	f020 f93a 	bl	802350c <iprintf>
  printf("Retrieving the WiFi module MAC address:");
 8003298:	4827      	ldr	r0, [pc, #156]	; (8003338 <net_if_init+0x128>)
 800329a:	f020 f937 	bl	802350c <iprintf>
  wifiRes = WIFI_GetMAC_Address( (uint8_t*)macAddress);
 800329e:	a808      	add	r0, sp, #32
 80032a0:	f001 fd48 	bl	8004d34 <WIFI_GetMAC_Address>
  if ( WIFI_STATUS_OK == wifiRes)
 80032a4:	bb60      	cbnz	r0, 8003300 <net_if_init+0xf0>
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 80032a6:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 80032aa:	9002      	str	r0, [sp, #8]
 80032ac:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80032b0:	9001      	str	r0, [sp, #4]
 80032b2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80032b6:	9000      	str	r0, [sp, #0]
 80032b8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80032bc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80032c0:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80032c4:	481d      	ldr	r0, [pc, #116]	; (800333c <net_if_init+0x12c>)
 80032c6:	f020 f921 	bl	802350c <iprintf>
  printf("\n");
 80032ca:	200a      	movs	r0, #10
 80032cc:	f020 f936 	bl	802353c <putchar>
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80032d0:	4e1b      	ldr	r6, [pc, #108]	; (8003340 <net_if_init+0x130>)
  int wifiConnectCounter = 0;
 80032d2:	2500      	movs	r5, #0
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80032d4:	3501      	adds	r5, #1
 80032d6:	2303      	movs	r3, #3
 80032d8:	462a      	mov	r2, r5
 80032da:	9906      	ldr	r1, [sp, #24]
 80032dc:	4630      	mov	r0, r6
 80032de:	f020 f915 	bl	802350c <iprintf>
    wifiRes = WIFI_Connect(ssid, psk, security_mode);
 80032e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80032e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032ea:	f001 fd0f 	bl	8004d0c <WIFI_Connect>
    if (wifiRes == WIFI_STATUS_OK) break;
 80032ee:	4604      	mov	r4, r0
 80032f0:	b150      	cbz	r0, 8003308 <net_if_init+0xf8>
  while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80032f2:	2d03      	cmp	r5, #3
 80032f4:	d1ee      	bne.n	80032d4 <net_if_init+0xc4>
    printf("\nFailed to connect to AP %s\n",ssid);
 80032f6:	9906      	ldr	r1, [sp, #24]
 80032f8:	4812      	ldr	r0, [pc, #72]	; (8003344 <net_if_init+0x134>)
 80032fa:	f020 f907 	bl	802350c <iprintf>
 80032fe:	e7b3      	b.n	8003268 <net_if_init+0x58>
       printf("Failed to get MAC address\n");
 8003300:	4811      	ldr	r0, [pc, #68]	; (8003348 <net_if_init+0x138>)
 8003302:	f020 f98b 	bl	802361c <puts>
 8003306:	e7e0      	b.n	80032ca <net_if_init+0xba>
    printf("\nConnected to AP %s\n",ssid);
 8003308:	9906      	ldr	r1, [sp, #24]
 800330a:	4810      	ldr	r0, [pc, #64]	; (800334c <net_if_init+0x13c>)
 800330c:	f020 f8fe 	bl	802350c <iprintf>
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8003310:	4620      	mov	r0, r4
}
 8003312:	b012      	add	sp, #72	; 0x48
 8003314:	bd70      	pop	{r4, r5, r6, pc}
 8003316:	bf00      	nop
 8003318:	0802e548 	.word	0x0802e548
 800331c:	0802e562 	.word	0x0802e562
 8003320:	0802e596 	.word	0x0802e596
 8003324:	0802e603 	.word	0x0802e603
 8003328:	0802e620 	.word	0x0802e620
 800332c:	0802e641 	.word	0x0802e641
 8003330:	08030fed 	.word	0x08030fed
 8003334:	0802fa7f 	.word	0x0802fa7f
 8003338:	0802e665 	.word	0x0802e665
 800333c:	0802d29d 	.word	0x0802d29d
 8003340:	0802e6a7 	.word	0x0802e6a7
 8003344:	0802e6e5 	.word	0x0802e6e5
 8003348:	0802e68d 	.word	0x0802e68d
 800334c:	0802e6d0 	.word	0x0802e6d0

08003350 <net_if_deinit>:


int net_if_deinit(void * if_ctxt)
{
  return 0;
}
 8003350:	2000      	movs	r0, #0
 8003352:	4770      	bx	lr

08003354 <net_if_reinit>:


int net_if_reinit(void * if_ctxt)
{
 8003354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Ecn_t security_mode;
  WIFI_Status_t wifiRes;
  int wifiConnectCounter = 0;
  
  // wifiRes = WIFI_Disconnect(); // Disconnect() is not enough for the Inventek module which does not clean the previous state properly.
  wifiRes = WIFI_Init();
 8003356:	f001 fcb5 	bl	8004cc4 <WIFI_Init>
  if (wifiRes != WIFI_STATUS_OK)
 800335a:	b138      	cbz	r0, 800336c <net_if_reinit+0x18>
  {
    msg_error("WIFI_Init() failed.\n");
 800335c:	22af      	movs	r2, #175	; 0xaf
 800335e:	4917      	ldr	r1, [pc, #92]	; (80033bc <net_if_reinit+0x68>)
 8003360:	4817      	ldr	r0, [pc, #92]	; (80033c0 <net_if_reinit+0x6c>)
 8003362:	f020 f8d3 	bl	802350c <iprintf>
 8003366:	4817      	ldr	r0, [pc, #92]	; (80033c4 <net_if_reinit+0x70>)
 8003368:	f020 f958 	bl	802361c <puts>
  }
  
  if (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK)
 800336c:	f10d 0207 	add.w	r2, sp, #7
 8003370:	a903      	add	r1, sp, #12
 8003372:	a802      	add	r0, sp, #8
 8003374:	f7fe f8f0 	bl	8001558 <checkWiFiCredentials>
 8003378:	4604      	mov	r4, r0
 800337a:	b9a8      	cbnz	r0, 80033a8 <net_if_reinit+0x54>
  }
  else
  {
    do 
    {
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 800337c:	4e12      	ldr	r6, [pc, #72]	; (80033c8 <net_if_reinit+0x74>)
  int wifiConnectCounter = 0;
 800337e:	4605      	mov	r5, r0
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 8003380:	3501      	adds	r5, #1
 8003382:	462a      	mov	r2, r5
 8003384:	9902      	ldr	r1, [sp, #8]
 8003386:	2303      	movs	r3, #3
 8003388:	4630      	mov	r0, r6
 800338a:	f020 f8bf 	bl	802350c <iprintf>
      wifiRes = WIFI_Connect(ssid, psk, security_mode);
 800338e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003396:	f001 fcb9 	bl	8004d0c <WIFI_Connect>
      if (wifiRes == WIFI_STATUS_OK) break;
 800339a:	b140      	cbz	r0, 80033ae <net_if_reinit+0x5a>
    } 
    while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 800339c:	2d03      	cmp	r5, #3
 800339e:	d1ef      	bne.n	8003380 <net_if_reinit+0x2c>
    {
      printf("\nRe-connected to AP %s\n",ssid);
    }
    else
    {
      printf("\nFailed to re-connect to AP %s\n",ssid);
 80033a0:	9902      	ldr	r1, [sp, #8]
 80033a2:	480a      	ldr	r0, [pc, #40]	; (80033cc <net_if_reinit+0x78>)
 80033a4:	f020 f8b2 	bl	802350c <iprintf>
      ret = -1;
 80033a8:	f04f 34ff 	mov.w	r4, #4294967295
 80033ac:	e003      	b.n	80033b6 <net_if_reinit+0x62>
      printf("\nRe-connected to AP %s\n",ssid);
 80033ae:	9902      	ldr	r1, [sp, #8]
 80033b0:	4807      	ldr	r0, [pc, #28]	; (80033d0 <net_if_reinit+0x7c>)
 80033b2:	f020 f8ab 	bl	802350c <iprintf>
    }
  }
    
  return ret;
}
 80033b6:	4620      	mov	r0, r4
 80033b8:	b004      	add	sp, #16
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	08027df3 	.word	0x08027df3
 80033c0:	0802d3b1 	.word	0x0802d3b1
 80033c4:	0802e702 	.word	0x0802e702
 80033c8:	0802e6a7 	.word	0x0802e6a7
 80033cc:	0802e72e 	.word	0x0802e72e
 80033d0:	0802e716 	.word	0x0802e716

080033d4 <network_read>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes read on SUCCESS
 *         - -1 on FAILURE
 **/
int network_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 80033d4:	b510      	push	{r4, lr}
    int bytes;

    bytes = net_sock_recv((net_sockhnd_t)n->my_socket, buffer, len);
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	f7fe fdbc 	bl	8001f54 <net_sock_recv>
    if (bytes < 0)
 80033dc:	1e04      	subs	r4, r0, #0
 80033de:	da0a      	bge.n	80033f6 <network_read+0x22>
    {
        msg_error("net_sock_recv failed - %d\n", bytes);
 80033e0:	22e3      	movs	r2, #227	; 0xe3
 80033e2:	4906      	ldr	r1, [pc, #24]	; (80033fc <network_read+0x28>)
 80033e4:	4806      	ldr	r0, [pc, #24]	; (8003400 <network_read+0x2c>)
 80033e6:	f020 f891 	bl	802350c <iprintf>
 80033ea:	4621      	mov	r1, r4
 80033ec:	4805      	ldr	r0, [pc, #20]	; (8003404 <network_read+0x30>)
 80033ee:	f020 f88d 	bl	802350c <iprintf>
        bytes = -1;
 80033f2:	f04f 34ff 	mov.w	r4, #4294967295
    }

    return bytes;
}
 80033f6:	4620      	mov	r0, r4
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	bf00      	nop
 80033fc:	08027e04 	.word	0x08027e04
 8003400:	0802d3b1 	.word	0x0802d3b1
 8003404:	0802e74e 	.word	0x0802e74e

08003408 <network_write>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes written on SUCCESS
 *         - -1 on FAILURE
 **/
int network_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8003408:	b510      	push	{r4, lr}
    int rc;

    rc = net_sock_send((net_sockhnd_t)n->my_socket, buffer, len);
 800340a:	6800      	ldr	r0, [r0, #0]
 800340c:	f7fe fda8 	bl	8001f60 <net_sock_send>
    if (rc < 0)
 8003410:	1e04      	subs	r4, r0, #0
 8003412:	da0a      	bge.n	800342a <network_write+0x22>
    {
        msg_error("net_sock_send failed - %d\n", rc);
 8003414:	22f9      	movs	r2, #249	; 0xf9
 8003416:	4906      	ldr	r1, [pc, #24]	; (8003430 <network_write+0x28>)
 8003418:	4806      	ldr	r0, [pc, #24]	; (8003434 <network_write+0x2c>)
 800341a:	f020 f877 	bl	802350c <iprintf>
 800341e:	4621      	mov	r1, r4
 8003420:	4805      	ldr	r0, [pc, #20]	; (8003438 <network_write+0x30>)
 8003422:	f020 f873 	bl	802350c <iprintf>
        rc = -1;
 8003426:	f04f 34ff 	mov.w	r4, #4294967295
    }

    return rc;
}
 800342a:	4620      	mov	r0, r4
 800342c:	bd10      	pop	{r4, pc}
 800342e:	bf00      	nop
 8003430:	08027e11 	.word	0x08027e11
 8003434:	0802d3b1 	.word	0x0802d3b1
 8003438:	0802e769 	.word	0x0802e769

0800343c <allpurposeMessageHandler>:
{

	/**
	 * Print
	 */
	snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1), "%s", (char *)data->message->payload);
 800343c:	6803      	ldr	r3, [r0, #0]
 800343e:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <allpurposeMessageHandler+0xa8>)
 8003440:	68d9      	ldr	r1, [r3, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
{
 8003444:	b570      	push	{r4, r5, r6, lr}
	snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1), "%s", (char *)data->message->payload);
 8003446:	3101      	adds	r1, #1
 8003448:	4c27      	ldr	r4, [pc, #156]	; (80034e8 <allpurposeMessageHandler+0xac>)
 800344a:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
{
 800344e:	4605      	mov	r5, r0
	snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1), "%s", (char *)data->message->payload);
 8003450:	bf28      	it	cs
 8003452:	f44f 7116 	movcs.w	r1, #600	; 0x258
 8003456:	4620      	mov	r0, r4
 8003458:	f020 f924 	bl	80236a4 <sniprintf>
	msg_info("\nReceived message: topic: %.*s content: %s.\n", data->topicName->lenstring.len, data->topicName->lenstring.data, mqtt_msg);
 800345c:	6869      	ldr	r1, [r5, #4]
 800345e:	4823      	ldr	r0, [pc, #140]	; (80034ec <allpurposeMessageHandler+0xb0>)
 8003460:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 8003464:	4623      	mov	r3, r4
 8003466:	f020 f851 	bl	802350c <iprintf>



	cJSON *json = NULL;
	cJSON *root = cJSON_Parse(mqtt_msg);
 800346a:	4620      	mov	r0, r4
 800346c:	f01e fda4 	bl	8021fb8 <cJSON_Parse>

	json = cJSON_GetObjectItemCaseSensitive(root, "TelemetryInterval");
 8003470:	491f      	ldr	r1, [pc, #124]	; (80034f0 <allpurposeMessageHandler+0xb4>)
	cJSON *root = cJSON_Parse(mqtt_msg);
 8003472:	4605      	mov	r5, r0
	json = cJSON_GetObjectItemCaseSensitive(root, "TelemetryInterval");
 8003474:	f01e fda4 	bl	8021fc0 <cJSON_GetObjectItemCaseSensitive>
	if (json != NULL) {
 8003478:	4606      	mov	r6, r0
 800347a:	b140      	cbz	r0, 800348e <allpurposeMessageHandler+0x52>
		if (cJSON_IsNumber(json) == true)  {
 800347c:	f01e fdb0 	bl	8021fe0 <cJSON_IsNumber>
 8003480:	2801      	cmp	r0, #1
 8003482:	d11b      	bne.n	80034bc <allpurposeMessageHandler+0x80>
			status_data.TelemetryInterval = json->valueint;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <allpurposeMessageHandler+0xb8>)
 8003486:	6972      	ldr	r2, [r6, #20]
 8003488:	611a      	str	r2, [r3, #16]
			g_statusChanged = true;
 800348a:	f884 0258 	strb.w	r0, [r4, #600]	; 0x258
		else  {
			msg_error("JSON parsing error of TelemetryInterval value.\n");
		}
	}

	json = cJSON_GetObjectItemCaseSensitive(root, "Reboot");
 800348e:	491a      	ldr	r1, [pc, #104]	; (80034f8 <allpurposeMessageHandler+0xbc>)
 8003490:	4628      	mov	r0, r5
 8003492:	f01e fd95 	bl	8021fc0 <cJSON_GetObjectItemCaseSensitive>
	if (json != NULL) {
 8003496:	4606      	mov	r6, r0
 8003498:	b158      	cbz	r0, 80034b2 <allpurposeMessageHandler+0x76>
		if (cJSON_IsBool(json) == true) {
 800349a:	f01e fd9a 	bl	8021fd2 <cJSON_IsBool>
 800349e:	2801      	cmp	r0, #1
 80034a0:	d116      	bne.n	80034d0 <allpurposeMessageHandler+0x94>
			g_reboot = (cJSON_IsTrue(json) == true);
 80034a2:	4630      	mov	r0, r6
 80034a4:	f01e fd8f 	bl	8021fc6 <cJSON_IsTrue>
 80034a8:	1e43      	subs	r3, r0, #1
 80034aa:	4258      	negs	r0, r3
 80034ac:	4158      	adcs	r0, r3
 80034ae:	f884 0259 	strb.w	r0, [r4, #601]	; 0x259
		else {
			msg_error("JSON parsing error of Reboot value.\n");
		}
	}

	cJSON_Delete(root);
 80034b2:	4628      	mov	r0, r5
}
 80034b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cJSON_Delete(root);
 80034b8:	f01e bb82 	b.w	8021bc0 <cJSON_Delete>
			msg_error("JSON parsing error of TelemetryInterval value.\n");
 80034bc:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <allpurposeMessageHandler+0xc0>)
 80034c2:	480f      	ldr	r0, [pc, #60]	; (8003500 <allpurposeMessageHandler+0xc4>)
 80034c4:	f020 f822 	bl	802350c <iprintf>
 80034c8:	480e      	ldr	r0, [pc, #56]	; (8003504 <allpurposeMessageHandler+0xc8>)
 80034ca:	f020 f8a7 	bl	802361c <puts>
 80034ce:	e7de      	b.n	800348e <allpurposeMessageHandler+0x52>
			msg_error("JSON parsing error of Reboot value.\n");
 80034d0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80034d4:	4909      	ldr	r1, [pc, #36]	; (80034fc <allpurposeMessageHandler+0xc0>)
 80034d6:	480a      	ldr	r0, [pc, #40]	; (8003500 <allpurposeMessageHandler+0xc4>)
 80034d8:	f020 f818 	bl	802350c <iprintf>
 80034dc:	480a      	ldr	r0, [pc, #40]	; (8003508 <allpurposeMessageHandler+0xcc>)
 80034de:	f020 f89d 	bl	802361c <puts>
 80034e2:	e7e6      	b.n	80034b2 <allpurposeMessageHandler+0x76>
 80034e4:	08030fee 	.word	0x08030fee
 80034e8:	20000834 	.word	0x20000834
 80034ec:	0802e784 	.word	0x0802e784
 80034f0:	0802e7b1 	.word	0x0802e7b1
 80034f4:	2000000c 	.word	0x2000000c
 80034f8:	0802e7f2 	.word	0x0802e7f2
 80034fc:	08027e1f 	.word	0x08027e1f
 8003500:	0802d3b1 	.word	0x0802d3b1
 8003504:	0802e7c3 	.word	0x0802e7c3
 8003508:	0802e7f9 	.word	0x0802e7f9

0800350c <cloud_device_enter_credentials>:
{
 800350c:	b500      	push	{lr}
 800350e:	b0ef      	sub	sp, #444	; 0x1bc
    memset(&iot_config, 0, sizeof(iot_config_t));
 8003510:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003514:	2100      	movs	r1, #0
 8003516:	4668      	mov	r0, sp
 8003518:	f01e ff09 	bl	802232e <memset>
    printf("\nEnter the connection string of your device:\n"
 800351c:	480e      	ldr	r0, [pc, #56]	; (8003558 <cloud_device_enter_credentials+0x4c>)
 800351e:	f020 f87d 	bl	802361c <puts>
    getInputString(iot_config.device_name, USER_CONF_DEVICE_NAME_LENGTH);
 8003522:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003526:	a802      	add	r0, sp, #8
 8003528:	f7fd ffda 	bl	80014e0 <getInputString>
    msg_info("read: --->\n%s\n<---\n", iot_config.device_name);
 800352c:	a902      	add	r1, sp, #8
 800352e:	480b      	ldr	r0, [pc, #44]	; (800355c <cloud_device_enter_credentials+0x50>)
 8003530:	f01f ffec 	bl	802350c <iprintf>
    if (setIoTDeviceConfig(&iot_config) != 0)
 8003534:	4668      	mov	r0, sp
 8003536:	f7fe fa23 	bl	8001980 <setIoTDeviceConfig>
 800353a:	b148      	cbz	r0, 8003550 <cloud_device_enter_credentials+0x44>
        msg_error("Failed programming the IoT device configuration to Flash.\n");
 800353c:	22b4      	movs	r2, #180	; 0xb4
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <cloud_device_enter_credentials+0x54>)
 8003540:	4808      	ldr	r0, [pc, #32]	; (8003564 <cloud_device_enter_credentials+0x58>)
 8003542:	f01f ffe3 	bl	802350c <iprintf>
 8003546:	4808      	ldr	r0, [pc, #32]	; (8003568 <cloud_device_enter_credentials+0x5c>)
 8003548:	f020 f868 	bl	802361c <puts>
        ret = -1;
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003550:	b06f      	add	sp, #444	; 0x1bc
 8003552:	f85d fb04 	ldr.w	pc, [sp], #4
 8003556:	bf00      	nop
 8003558:	0802e81d 	.word	0x0802e81d
 800355c:	0802d6fa 	.word	0x0802d6fa
 8003560:	08027e38 	.word	0x08027e38
 8003564:	0802d3b1 	.word	0x0802d3b1
 8003568:	0802e925 	.word	0x0802e925

0800356c <stiot_publish>:

/**
 * MQTT publish API abstraction called by the metering loop.
 */
int stiot_publish(void* mqtt_ctxt, const char* topic, const char* msg)
{
 800356c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800356e:	4614      	mov	r4, r2
 8003570:	4606      	mov	r6, r0
    int rc;
    MQTTMessage mqmsg;
    memset(&mqmsg, 0, sizeof(MQTTMessage));
 8003572:	2210      	movs	r2, #16
{
 8003574:	460d      	mov	r5, r1
    memset(&mqmsg, 0, sizeof(MQTTMessage));
 8003576:	4668      	mov	r0, sp
 8003578:	2100      	movs	r1, #0
 800357a:	f01e fed8 	bl	802232e <memset>
    mqmsg.qos = QOS0;
    mqmsg.payload = (char*)msg;
    mqmsg.payloadlen = strlen(msg);
 800357e:	4620      	mov	r0, r4
    mqmsg.payload = (char*)msg;
 8003580:	9402      	str	r4, [sp, #8]
    mqmsg.payloadlen = strlen(msg);
 8003582:	f7fc fe2f 	bl	80001e4 <strlen>

    rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 8003586:	466a      	mov	r2, sp
    mqmsg.payloadlen = strlen(msg);
 8003588:	9003      	str	r0, [sp, #12]
    rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 800358a:	4629      	mov	r1, r5
 800358c:	4630      	mov	r0, r6
 800358e:	f009 f9da 	bl	800c946 <MQTTPublish>
    if (rc != MQSUCCESS)
 8003592:	4604      	mov	r4, r0
 8003594:	b150      	cbz	r0, 80035ac <stiot_publish+0x40>
    {
        msg_error("Failed publishing %s on %s\n", (char*)(mqmsg.payload), topic);
 8003596:	f44f 7246 	mov.w	r2, #792	; 0x318
 800359a:	4906      	ldr	r1, [pc, #24]	; (80035b4 <stiot_publish+0x48>)
 800359c:	4806      	ldr	r0, [pc, #24]	; (80035b8 <stiot_publish+0x4c>)
 800359e:	f01f ffb5 	bl	802350c <iprintf>
 80035a2:	462a      	mov	r2, r5
 80035a4:	9902      	ldr	r1, [sp, #8]
 80035a6:	4805      	ldr	r0, [pc, #20]	; (80035bc <stiot_publish+0x50>)
 80035a8:	f01f ffb0 	bl	802350c <iprintf>
    }
    return rc;
}
 80035ac:	4620      	mov	r0, r4
 80035ae:	b004      	add	sp, #16
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	bf00      	nop
 80035b4:	08027e57 	.word	0x08027e57
 80035b8:	0802d3b1 	.word	0x0802d3b1
 80035bc:	0802e95f 	.word	0x0802e95f

080035c0 <string_allocate_from_token>:

/** Look for a 'key=value' pair in the passed configuration string, and return a new buffer
 *  holding the 'value' field.
 */
int string_allocate_from_token(char** pDestString, char* tokenName, const char* sourceString)
{
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	4607      	mov	r7, r0
    int ret = 0;
    char* key = NULL;
    char* value = NULL;

    if ((key = strstr(sourceString, tokenName)) != NULL)
 80035c4:	4610      	mov	r0, r2
{
 80035c6:	460c      	mov	r4, r1
    if ((key = strstr(sourceString, tokenName)) != NULL)
 80035c8:	f020 f96b 	bl	80238a2 <strstr>
 80035cc:	4605      	mov	r5, r0
 80035ce:	b1a8      	cbz	r0, 80035fc <string_allocate_from_token+0x3c>
    {
        int size = 0;
        value = key + strlen(tokenName);    /* '=' key=value separator is part of tokenName. */
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7fc fe07 	bl	80001e4 <strlen>
 80035d6:	4405      	add	r5, r0
        if ((key = strstr(value, ";")) != NULL)
 80035d8:	213b      	movs	r1, #59	; 0x3b
 80035da:	4628      	mov	r0, r5
 80035dc:	f020 f925 	bl	802382a <strchr>
 80035e0:	b170      	cbz	r0, 8003600 <string_allocate_from_token+0x40>
        {
            size = key - value;
 80035e2:	1b44      	subs	r4, r0, r5
        }
        *pDestString = malloc(size + 1);
 80035e4:	1c60      	adds	r0, r4, #1
 80035e6:	f01e fe4d 	bl	8022284 <malloc>
 80035ea:	4606      	mov	r6, r0
 80035ec:	6038      	str	r0, [r7, #0]
        if (*pDestString != NULL)
 80035ee:	b148      	cbz	r0, 8003604 <string_allocate_from_token+0x44>
        {
            memcpy(*pDestString, value, size);
 80035f0:	4622      	mov	r2, r4
 80035f2:	4629      	mov	r1, r5
 80035f4:	f01e fe77 	bl	80222e6 <memcpy>
            (*pDestString)[size] = '\0';
 80035f8:	2300      	movs	r3, #0
 80035fa:	5533      	strb	r3, [r6, r4]
            msg_error("Allocation failed\n");
        }
    }

    return ret;
}
 80035fc:	2000      	movs	r0, #0
 80035fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        int size = 0;
 8003600:	4604      	mov	r4, r0
 8003602:	e7ef      	b.n	80035e4 <string_allocate_from_token+0x24>
            msg_error("Allocation failed\n");
 8003604:	f240 3237 	movw	r2, #823	; 0x337
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <string_allocate_from_token+0x58>)
 800360a:	4804      	ldr	r0, [pc, #16]	; (800361c <string_allocate_from_token+0x5c>)
 800360c:	f01f ff7e 	bl	802350c <iprintf>
 8003610:	4803      	ldr	r0, [pc, #12]	; (8003620 <string_allocate_from_token+0x60>)
 8003612:	f020 f803 	bl	802361c <puts>
 8003616:	e7f1      	b.n	80035fc <string_allocate_from_token+0x3c>
 8003618:	08027e65 	.word	0x08027e65
 800361c:	0802d3b1 	.word	0x0802d3b1
 8003620:	0802e97b 	.word	0x0802e97b

08003624 <free_device_config>:


/** Free a device_config_t allocated by parse_and_fill_device_config().
 */
void free_device_config(device_config_t* config)
{
 8003624:	b510      	push	{r4, lr}
    if (config != NULL)
 8003626:	4604      	mov	r4, r0
 8003628:	b1e0      	cbz	r0, 8003664 <free_device_config+0x40>
    {
        if (config->HostName != NULL) free(config->HostName);
 800362a:	6800      	ldr	r0, [r0, #0]
 800362c:	b108      	cbz	r0, 8003632 <free_device_config+0xe>
 800362e:	f01e fe31 	bl	8022294 <free>
        if (config->HostPort != NULL) free(config->HostPort);
 8003632:	6860      	ldr	r0, [r4, #4]
 8003634:	b108      	cbz	r0, 800363a <free_device_config+0x16>
 8003636:	f01e fe2d 	bl	8022294 <free>
        if (config->ConnSecurity != NULL) free(config->ConnSecurity);
 800363a:	68a0      	ldr	r0, [r4, #8]
 800363c:	b108      	cbz	r0, 8003642 <free_device_config+0x1e>
 800363e:	f01e fe29 	bl	8022294 <free>
        if (config->MQClientId != NULL) free(config->MQClientId);
 8003642:	68e0      	ldr	r0, [r4, #12]
 8003644:	b108      	cbz	r0, 800364a <free_device_config+0x26>
 8003646:	f01e fe25 	bl	8022294 <free>
        if (config->MQUserName != NULL) free(config->MQUserName);
 800364a:	6920      	ldr	r0, [r4, #16]
 800364c:	b108      	cbz	r0, 8003652 <free_device_config+0x2e>
 800364e:	f01e fe21 	bl	8022294 <free>
        if (config->MQUserPwd != NULL) free(config->MQUserPwd);
 8003652:	6960      	ldr	r0, [r4, #20]
 8003654:	b108      	cbz	r0, 800365a <free_device_config+0x36>
 8003656:	f01e fe1d 	bl	8022294 <free>
#ifdef LITMUS_LOOP
        if (config->LoopTopicId != NULL) free(config->LoopTopicId);
#endif

        free(config);
 800365a:	4620      	mov	r0, r4
    }
    else
    {
        msg_warning("Attemped to free a non-allocated config structure.\n");
    }
}
 800365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        free(config);
 8003660:	f01e be18 	b.w	8022294 <free>
}
 8003664:	bd10      	pop	{r4, pc}
	...

08003668 <parse_and_fill_device_config>:
{
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	4606      	mov	r6, r0
    if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 800366c:	4608      	mov	r0, r1
{
 800366e:	460f      	mov	r7, r1
    if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 8003670:	f7fc fdb8 	bl	80001e4 <strlen>
 8003674:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8003678:	d90c      	bls.n	8003694 <parse_and_fill_device_config+0x2c>
        msg_error("Cannot parse the configuration string:  It is not null-terminated!\n");
 800367a:	f240 324b 	movw	r2, #843	; 0x34b
 800367e:	492a      	ldr	r1, [pc, #168]	; (8003728 <parse_and_fill_device_config+0xc0>)
 8003680:	482a      	ldr	r0, [pc, #168]	; (800372c <parse_and_fill_device_config+0xc4>)
 8003682:	f01f ff43 	bl	802350c <iprintf>
 8003686:	482a      	ldr	r0, [pc, #168]	; (8003730 <parse_and_fill_device_config+0xc8>)
            msg_error("Null parameter\n");
 8003688:	f01f ffc8 	bl	802361c <puts>
    int ret = -1;
 800368c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003690:	4620      	mov	r0, r4
 8003692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pConfig == NULL)
 8003694:	b93e      	cbnz	r6, 80036a6 <parse_and_fill_device_config+0x3e>
            msg_error("Null parameter\n");
 8003696:	f240 3251 	movw	r2, #849	; 0x351
 800369a:	4923      	ldr	r1, [pc, #140]	; (8003728 <parse_and_fill_device_config+0xc0>)
 800369c:	4823      	ldr	r0, [pc, #140]	; (800372c <parse_and_fill_device_config+0xc4>)
 800369e:	f01f ff35 	bl	802350c <iprintf>
 80036a2:	4824      	ldr	r0, [pc, #144]	; (8003734 <parse_and_fill_device_config+0xcc>)
 80036a4:	e7f0      	b.n	8003688 <parse_and_fill_device_config+0x20>
            config = malloc(sizeof(device_config_t));
 80036a6:	2018      	movs	r0, #24
 80036a8:	f01e fdec 	bl	8022284 <malloc>
            memset(config, 0, sizeof(device_config_t));
 80036ac:	2218      	movs	r2, #24
            config = malloc(sizeof(device_config_t));
 80036ae:	4605      	mov	r5, r0
            memset(config, 0, sizeof(device_config_t));
 80036b0:	2100      	movs	r1, #0
 80036b2:	f01e fe3c 	bl	802232e <memset>
            ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 80036b6:	463a      	mov	r2, r7
 80036b8:	491f      	ldr	r1, [pc, #124]	; (8003738 <parse_and_fill_device_config+0xd0>)
 80036ba:	4628      	mov	r0, r5
 80036bc:	f7ff ff80 	bl	80035c0 <string_allocate_from_token>
            ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 80036c0:	463a      	mov	r2, r7
            ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 80036c2:	4604      	mov	r4, r0
            ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 80036c4:	491d      	ldr	r1, [pc, #116]	; (800373c <parse_and_fill_device_config+0xd4>)
 80036c6:	1d28      	adds	r0, r5, #4
 80036c8:	f7ff ff7a 	bl	80035c0 <string_allocate_from_token>
            ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 80036cc:	463a      	mov	r2, r7
            ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 80036ce:	4304      	orrs	r4, r0
            ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 80036d0:	491b      	ldr	r1, [pc, #108]	; (8003740 <parse_and_fill_device_config+0xd8>)
 80036d2:	f105 0008 	add.w	r0, r5, #8
 80036d6:	f7ff ff73 	bl	80035c0 <string_allocate_from_token>
            ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 80036da:	463a      	mov	r2, r7
            ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 80036dc:	4304      	orrs	r4, r0
            ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 80036de:	4919      	ldr	r1, [pc, #100]	; (8003744 <parse_and_fill_device_config+0xdc>)
 80036e0:	f105 000c 	add.w	r0, r5, #12
 80036e4:	f7ff ff6c 	bl	80035c0 <string_allocate_from_token>
            ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 80036e8:	463a      	mov	r2, r7
            ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 80036ea:	4304      	orrs	r4, r0
            ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <parse_and_fill_device_config+0xe0>)
 80036ee:	f105 0010 	add.w	r0, r5, #16
 80036f2:	f7ff ff65 	bl	80035c0 <string_allocate_from_token>
            ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 80036f6:	463a      	mov	r2, r7
            ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 80036f8:	4304      	orrs	r4, r0
            ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 80036fa:	4914      	ldr	r1, [pc, #80]	; (800374c <parse_and_fill_device_config+0xe4>)
 80036fc:	f105 0014 	add.w	r0, r5, #20
 8003700:	f7ff ff5e 	bl	80035c0 <string_allocate_from_token>
            if (ret != 0)
 8003704:	4304      	orrs	r4, r0
 8003706:	d00c      	beq.n	8003722 <parse_and_fill_device_config+0xba>
                msg_error("Failed parsing the device configuration string.\n");
 8003708:	f44f 7259 	mov.w	r2, #868	; 0x364
 800370c:	4906      	ldr	r1, [pc, #24]	; (8003728 <parse_and_fill_device_config+0xc0>)
 800370e:	4807      	ldr	r0, [pc, #28]	; (800372c <parse_and_fill_device_config+0xc4>)
 8003710:	f01f fefc 	bl	802350c <iprintf>
 8003714:	480e      	ldr	r0, [pc, #56]	; (8003750 <parse_and_fill_device_config+0xe8>)
 8003716:	f01f ff81 	bl	802361c <puts>
                free_device_config(config);
 800371a:	4628      	mov	r0, r5
 800371c:	f7ff ff82 	bl	8003624 <free_device_config>
 8003720:	e7b6      	b.n	8003690 <parse_and_fill_device_config+0x28>
                *pConfig = config;
 8003722:	6035      	str	r5, [r6, #0]
    return ret;
 8003724:	e7b4      	b.n	8003690 <parse_and_fill_device_config+0x28>
 8003726:	bf00      	nop
 8003728:	08027e80 	.word	0x08027e80
 800372c:	0802d3b1 	.word	0x0802d3b1
 8003730:	0802e98d 	.word	0x0802e98d
 8003734:	0802e9d0 	.word	0x0802e9d0
 8003738:	0802e9df 	.word	0x0802e9df
 800373c:	0802e9e9 	.word	0x0802e9e9
 8003740:	0802e9f3 	.word	0x0802e9f3
 8003744:	0802ea01 	.word	0x0802ea01
 8003748:	0802ea0d 	.word	0x0802ea0d
 800374c:	0802ea19 	.word	0x0802ea19
 8003750:	0802ea24 	.word	0x0802ea24

08003754 <app_needs_device_keypair>:
{
 8003754:	b513      	push	{r0, r1, r4, lr}
    const char* config_string = NULL;
 8003756:	2300      	movs	r3, #0
    if (getIoTDeviceConfig(&config_string) != 0)
 8003758:	4668      	mov	r0, sp
    device_config_t* device_config = NULL;
 800375a:	e9cd 3300 	strd	r3, r3, [sp]
    if (getIoTDeviceConfig(&config_string) != 0)
 800375e:	f7fe f93b 	bl	80019d8 <getIoTDeviceConfig>
 8003762:	b150      	cbz	r0, 800377a <app_needs_device_keypair+0x26>
        msg_error("Failed retrieving the device configuration string.\n");
 8003764:	22c2      	movs	r2, #194	; 0xc2
 8003766:	4911      	ldr	r1, [pc, #68]	; (80037ac <app_needs_device_keypair+0x58>)
 8003768:	4811      	ldr	r0, [pc, #68]	; (80037b0 <app_needs_device_keypair+0x5c>)
 800376a:	f01f fecf 	bl	802350c <iprintf>
 800376e:	4811      	ldr	r0, [pc, #68]	; (80037b4 <app_needs_device_keypair+0x60>)
            msg_error("Could not parse the connection security settings from the configuration string.\n");
 8003770:	f01f ff54 	bl	802361c <puts>
    conn_sec_t security = CONN_SEC_UNDEFINED;
 8003774:	f04f 34ff 	mov.w	r4, #4294967295
 8003778:	e00c      	b.n	8003794 <app_needs_device_keypair+0x40>
        if (parse_and_fill_device_config(&device_config, config_string) == 0)
 800377a:	9900      	ldr	r1, [sp, #0]
 800377c:	a801      	add	r0, sp, #4
 800377e:	f7ff ff73 	bl	8003668 <parse_and_fill_device_config>
 8003782:	b960      	cbnz	r0, 800379e <app_needs_device_keypair+0x4a>
            security = (conn_sec_t)atoi(device_config->ConnSecurity);
 8003784:	9b01      	ldr	r3, [sp, #4]
 8003786:	6898      	ldr	r0, [r3, #8]
 8003788:	f01e fc31 	bl	8021fee <atoi>
 800378c:	b244      	sxtb	r4, r0
            free_device_config(device_config);
 800378e:	9801      	ldr	r0, [sp, #4]
 8003790:	f7ff ff48 	bl	8003624 <free_device_config>
}
 8003794:	1ee3      	subs	r3, r4, #3
 8003796:	4258      	negs	r0, r3
 8003798:	4158      	adcs	r0, r3
 800379a:	b002      	add	sp, #8
 800379c:	bd10      	pop	{r4, pc}
            msg_error("Could not parse the connection security settings from the configuration string.\n");
 800379e:	22cd      	movs	r2, #205	; 0xcd
 80037a0:	4902      	ldr	r1, [pc, #8]	; (80037ac <app_needs_device_keypair+0x58>)
 80037a2:	4803      	ldr	r0, [pc, #12]	; (80037b0 <app_needs_device_keypair+0x5c>)
 80037a4:	f01f feb2 	bl	802350c <iprintf>
 80037a8:	4803      	ldr	r0, [pc, #12]	; (80037b8 <app_needs_device_keypair+0x64>)
 80037aa:	e7e1      	b.n	8003770 <app_needs_device_keypair+0x1c>
 80037ac:	08027e9d 	.word	0x08027e9d
 80037b0:	0802d3b1 	.word	0x0802d3b1
 80037b4:	0802ea54 	.word	0x0802ea54
 80037b8:	0802ea87 	.word	0x0802ea87

080037bc <comp_left_ms>:
int32_t comp_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
    int32_t ret = 0;
    uint32_t wrap_end = 0;

    if (now < init)
 80037bc:	4281      	cmp	r1, r0
    { /* Timer wrap-around detected */
      /* printf("Timer: wrap-around detected from %d to %d\n", init, now); */
        wrap_end = UINT32_MAX - init;
 80037be:	bf38      	it	cc
 80037c0:	43c3      	mvncc	r3, r0
    }
    ret = wrap_end - (now - init) + timeout;
 80037c2:	4410      	add	r0, r2
    uint32_t wrap_end = 0;
 80037c4:	bf28      	it	cs
 80037c6:	2300      	movcs	r3, #0
    ret = wrap_end - (now - init) + timeout;
 80037c8:	1a40      	subs	r0, r0, r1

    return ret;
}
 80037ca:	4418      	add	r0, r3
 80037cc:	4770      	bx	lr
	...

080037d0 <genericmqtt_client_XCube_sample_run>:
{
 80037d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_continueRunning = true;
 80037d4:	4c7f      	ldr	r4, [pc, #508]	; (80039d4 <genericmqtt_client_XCube_sample_run+0x204>)
    memset(&pub_data, 0, sizeof(pub_data));
 80037d6:	4880      	ldr	r0, [pc, #512]	; (80039d8 <genericmqtt_client_XCube_sample_run+0x208>)
 80037d8:	4d80      	ldr	r5, [pc, #512]	; (80039dc <genericmqtt_client_XCube_sample_run+0x20c>)
{
 80037da:	b0d9      	sub	sp, #356	; 0x164
    const char* connectionString = NULL;
 80037dc:	2100      	movs	r1, #0
    g_continueRunning = true;
 80037de:	2301      	movs	r3, #1
    memset(&pub_data, 0, sizeof(pub_data));
 80037e0:	2240      	movs	r2, #64	; 0x40
    device_config_t* device_config = NULL;
 80037e2:	e9cd 1118 	strd	r1, r1, [sp, #96]	; 0x60
    const char* device_cert = NULL;
 80037e6:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
    const char* device_key = NULL;
 80037ea:	911c      	str	r1, [sp, #112]	; 0x70
    g_continueRunning = true;
 80037ec:	f884 325a 	strb.w	r3, [r4, #602]	; 0x25a
    g_publishData = false;
 80037f0:	f884 125b 	strb.w	r1, [r4, #603]	; 0x25b
    g_statusChanged = true;
 80037f4:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
    g_reboot = false;
 80037f8:	f884 1259 	strb.w	r1, [r4, #601]	; 0x259
    g_connection_needed_score = 1;
 80037fc:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
    memset(&pub_data, 0, sizeof(pub_data));
 8003800:	f01e fd95 	bl	802232e <memset>
    ret = platform_init();
 8003804:	f7fd fc50 	bl	80010a8 <platform_init>
    if (ret != 0) {
 8003808:	b308      	cbz	r0, 800384e <genericmqtt_client_XCube_sample_run+0x7e>
        msg_error("Failed to initialize the platform.\n");
 800380a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800380e:	4974      	ldr	r1, [pc, #464]	; (80039e0 <genericmqtt_client_XCube_sample_run+0x210>)
 8003810:	4874      	ldr	r0, [pc, #464]	; (80039e4 <genericmqtt_client_XCube_sample_run+0x214>)
 8003812:	f01f fe7b 	bl	802350c <iprintf>
 8003816:	4874      	ldr	r0, [pc, #464]	; (80039e8 <genericmqtt_client_XCube_sample_run+0x218>)
 8003818:	f01f ff00 	bl	802361c <puts>
        msg_error("Cannot retrieve the connection string from the user configuration storage.\n");
 800381c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8003820:	496f      	ldr	r1, [pc, #444]	; (80039e0 <genericmqtt_client_XCube_sample_run+0x210>)
 8003822:	4870      	ldr	r0, [pc, #448]	; (80039e4 <genericmqtt_client_XCube_sample_run+0x214>)
 8003824:	f01f fe72 	bl	802350c <iprintf>
 8003828:	4870      	ldr	r0, [pc, #448]	; (80039ec <genericmqtt_client_XCube_sample_run+0x21c>)
 800382a:	f01f fef7 	bl	802361c <puts>
    free_device_config(device_config);
 800382e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003830:	f7ff fef8 	bl	8003624 <free_device_config>
    platform_deinit();
 8003834:	f7fd fd1c 	bl	8001270 <platform_deinit>
    if (g_reboot == true) {
 8003838:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 800383c:	b123      	cbz	r3, 8003848 <genericmqtt_client_XCube_sample_run+0x78>
        msg_info("Calling HAL_NVIC_SystemReset()\n");
 800383e:	486c      	ldr	r0, [pc, #432]	; (80039f0 <genericmqtt_client_XCube_sample_run+0x220>)
 8003840:	f01f feec 	bl	802361c <puts>
        HAL_NVIC_SystemReset();
 8003844:	f005 f96c 	bl	8008b20 <HAL_NVIC_SystemReset>
}
 8003848:	b059      	add	sp, #356	; 0x164
 800384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = ( getIoTDeviceConfig(&connectionString ) != 0);
 800384e:	a818      	add	r0, sp, #96	; 0x60
 8003850:	f7fe f8c2 	bl	80019d8 <getIoTDeviceConfig>
        ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 8003854:	9918      	ldr	r1, [sp, #96]	; 0x60
        ret = ( getIoTDeviceConfig(&connectionString ) != 0);
 8003856:	4606      	mov	r6, r0
        ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 8003858:	a819      	add	r0, sp, #100	; 0x64
 800385a:	f7ff ff05 	bl	8003668 <parse_and_fill_device_config>
        connection_security = (conn_sec_t)atoi(device_config->ConnSecurity);
 800385e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003860:	4306      	orrs	r6, r0
 8003862:	6898      	ldr	r0, [r3, #8]
 8003864:	f01e fbc3 	bl	8021fee <atoi>
 8003868:	fa4f f880 	sxtb.w	r8, r0
    if (ret != 0) {
 800386c:	2e00      	cmp	r6, #0
 800386e:	d1d5      	bne.n	800381c <genericmqtt_client_XCube_sample_run+0x4c>
        if (net_get_mac_address(hnet, &mac) == NET_OK) {
 8003870:	4f60      	ldr	r7, [pc, #384]	; (80039f4 <genericmqtt_client_XCube_sample_run+0x224>)
        net_macaddr_t mac = { 0 };
 8003872:	961e      	str	r6, [sp, #120]	; 0x78
        if (net_get_mac_address(hnet, &mac) == NET_OK) {
 8003874:	a91e      	add	r1, sp, #120	; 0x78
 8003876:	6838      	ldr	r0, [r7, #0]
        net_macaddr_t mac = { 0 };
 8003878:	f8ad 607c 	strh.w	r6, [sp, #124]	; 0x7c
        if (net_get_mac_address(hnet, &mac) == NET_OK) {
 800387c:	f7fe fa6a 	bl	8001d54 <net_get_mac_address>
 8003880:	2800      	cmp	r0, #0
 8003882:	d14e      	bne.n	8003922 <genericmqtt_client_XCube_sample_run+0x152>
        	sprintf(status_data.mac, "%02X%02X%02X%02X%02X%02X", mac.mac[0], mac.mac[1], mac.mac[2], mac.mac[3], mac.mac[4], mac.mac[5]);
 8003884:	f89d 107d 	ldrb.w	r1, [sp, #125]	; 0x7d
 8003888:	9103      	str	r1, [sp, #12]
 800388a:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 800388e:	9102      	str	r1, [sp, #8]
 8003890:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 8003894:	9101      	str	r1, [sp, #4]
 8003896:	f89d 107a 	ldrb.w	r1, [sp, #122]	; 0x7a
 800389a:	9100      	str	r1, [sp, #0]
 800389c:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 80038a0:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 80038a4:	4954      	ldr	r1, [pc, #336]	; (80039f8 <genericmqtt_client_XCube_sample_run+0x228>)
 80038a6:	4628      	mov	r0, r5
 80038a8:	f01f ff30 	bl	802370c <siprintf>
        strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 80038ac:	494b      	ldr	r1, [pc, #300]	; (80039dc <genericmqtt_client_XCube_sample_run+0x20c>)
                msg_error("net_sock_destroy() failed.\n");
 80038ae:	4e4c      	ldr	r6, [pc, #304]	; (80039e0 <genericmqtt_client_XCube_sample_run+0x210>)
        strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 80038b0:	220c      	movs	r2, #12
 80038b2:	f101 0014 	add.w	r0, r1, #20
 80038b6:	f01f ffdf 	bl	8023878 <strncpy>
        status_data.TelemetryInterval = MODEL_DEFAULT_TELEMETRYINTERVAL;
 80038ba:	2305      	movs	r3, #5
 80038bc:	f1b8 0f00 	cmp.w	r8, #0
 80038c0:	612b      	str	r3, [r5, #16]
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2302      	movne	r3, #2
 80038c8:	9317      	str	r3, [sp, #92]	; 0x5c
            if ((net_get_ip_address(hnet, &ip) == NET_ERR) || (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET)) {
 80038ca:	a923      	add	r1, sp, #140	; 0x8c
 80038cc:	6838      	ldr	r0, [r7, #0]
 80038ce:	f7fe fa11 	bl	8001cf4 <net_get_ip_address>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d003      	beq.n	80038de <genericmqtt_client_XCube_sample_run+0x10e>
 80038d6:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 80038da:	2b03      	cmp	r3, #3
 80038dc:	dd30      	ble.n	8003940 <genericmqtt_client_XCube_sample_run+0x170>
                msg_info("Network link %s down. Trying to reconnect.\n", (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) ? "may be" : "");
 80038de:	f8d4 125c 	ldr.w	r1, [r4, #604]	; 0x25c
 80038e2:	4a46      	ldr	r2, [pc, #280]	; (80039fc <genericmqtt_client_XCube_sample_run+0x22c>)
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <genericmqtt_client_XCube_sample_run+0x230>)
 80038e6:	4847      	ldr	r0, [pc, #284]	; (8003a04 <genericmqtt_client_XCube_sample_run+0x234>)
 80038e8:	2903      	cmp	r1, #3
 80038ea:	bfcc      	ite	gt
 80038ec:	4611      	movgt	r1, r2
 80038ee:	4619      	movle	r1, r3
 80038f0:	f01f fe0c 	bl	802350c <iprintf>
                if (net_reinit(hnet, (net_if_reinit)) != 0) {
 80038f4:	4944      	ldr	r1, [pc, #272]	; (8003a08 <genericmqtt_client_XCube_sample_run+0x238>)
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	f7fe f9de 	bl	8001cb8 <net_reinit>
 80038fc:	b1b0      	cbz	r0, 800392c <genericmqtt_client_XCube_sample_run+0x15c>
                    msg_error("Netif re-initialization failed.\n");
 80038fe:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003902:	4631      	mov	r1, r6
 8003904:	4837      	ldr	r0, [pc, #220]	; (80039e4 <genericmqtt_client_XCube_sample_run+0x214>)
 8003906:	f01f fe01 	bl	802350c <iprintf>
 800390a:	4840      	ldr	r0, [pc, #256]	; (8003a0c <genericmqtt_client_XCube_sample_run+0x23c>)
                msg_error("net_sock_destroy() failed.\n");
 800390c:	f01f fe86 	bl	802361c <puts>
        } while (!g_reboot && (g_connection_needed_score > 0));
 8003910:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003914:	2b00      	cmp	r3, #0
 8003916:	d18a      	bne.n	800382e <genericmqtt_client_XCube_sample_run+0x5e>
 8003918:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 800391c:	2b00      	cmp	r3, #0
 800391e:	dcd4      	bgt.n	80038ca <genericmqtt_client_XCube_sample_run+0xfa>
 8003920:	e785      	b.n	800382e <genericmqtt_client_XCube_sample_run+0x5e>
            sprintf(status_data.mac, "%s", "UnknownMAC");
 8003922:	493b      	ldr	r1, [pc, #236]	; (8003a10 <genericmqtt_client_XCube_sample_run+0x240>)
 8003924:	4628      	mov	r0, r5
 8003926:	f01f ff8d 	bl	8023844 <strcpy>
 800392a:	e7bf      	b.n	80038ac <genericmqtt_client_XCube_sample_run+0xdc>
                    msg_info("Netif re-initialized successfully.\n");
 800392c:	4839      	ldr	r0, [pc, #228]	; (8003a14 <genericmqtt_client_XCube_sample_run+0x244>)
 800392e:	f01f fe75 	bl	802361c <puts>
                    HAL_Delay(1000);
 8003932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003936:	f005 f893 	bl	8008a60 <HAL_Delay>
                    g_connection_needed_score = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
            ret = net_sock_create(hnet, &socket, (connection_security == CONN_SEC_NONE) ? NET_PROTO_TCP : NET_PROTO_TLS);
 8003940:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	a91d      	add	r1, sp, #116	; 0x74
 8003946:	f7fe fa2f 	bl	8001da8 <net_sock_create>
            if (ret != NET_OK) {
 800394a:	4682      	mov	sl, r0
 800394c:	2800      	cmp	r0, #0
 800394e:	d037      	beq.n	80039c0 <genericmqtt_client_XCube_sample_run+0x1f0>
                msg_error("Could not create the socket.\n");
 8003950:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003954:	4631      	mov	r1, r6
 8003956:	4823      	ldr	r0, [pc, #140]	; (80039e4 <genericmqtt_client_XCube_sample_run+0x214>)
 8003958:	f01f fdd8 	bl	802350c <iprintf>
 800395c:	482e      	ldr	r0, [pc, #184]	; (8003a18 <genericmqtt_client_XCube_sample_run+0x248>)
 800395e:	f01f fe5d 	bl	802361c <puts>
                msg_error("Could not retrieve the security connection settings and set the socket options.\n");
 8003962:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003966:	4631      	mov	r1, r6
 8003968:	481e      	ldr	r0, [pc, #120]	; (80039e4 <genericmqtt_client_XCube_sample_run+0x214>)
 800396a:	f01f fdcf 	bl	802350c <iprintf>
 800396e:	482b      	ldr	r0, [pc, #172]	; (8003a1c <genericmqtt_client_XCube_sample_run+0x24c>)
 8003970:	f01f fe54 	bl	802361c <puts>
                msg_error("Could not open the socket at %s port %d.\n", device_config->HostName, atoi(device_config->HostPort));
 8003974:	f240 12b7 	movw	r2, #439	; 0x1b7
 8003978:	4631      	mov	r1, r6
 800397a:	481a      	ldr	r0, [pc, #104]	; (80039e4 <genericmqtt_client_XCube_sample_run+0x214>)
 800397c:	f01f fdc6 	bl	802350c <iprintf>
 8003980:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003982:	e9d3 9000 	ldrd	r9, r0, [r3]
 8003986:	f01e fb32 	bl	8021fee <atoi>
 800398a:	4649      	mov	r1, r9
 800398c:	4602      	mov	r2, r0
 800398e:	4824      	ldr	r0, [pc, #144]	; (8003a20 <genericmqtt_client_XCube_sample_run+0x250>)
 8003990:	f01f fdbc 	bl	802350c <iprintf>
                g_connection_needed_score++;
 8003994:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
                HAL_Delay(1000);
 8003998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                g_connection_needed_score++;
 800399c:	3301      	adds	r3, #1
 800399e:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
                HAL_Delay(1000);
 80039a2:	f005 f85d 	bl	8008a60 <HAL_Delay>
            if (NET_OK != net_sock_destroy(socket)){
 80039a6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80039a8:	f7fe fae6 	bl	8001f78 <net_sock_destroy>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d0af      	beq.n	8003910 <genericmqtt_client_XCube_sample_run+0x140>
                msg_error("net_sock_destroy() failed.\n");
 80039b0:	f240 22f9 	movw	r2, #761	; 0x2f9
 80039b4:	4631      	mov	r1, r6
 80039b6:	480b      	ldr	r0, [pc, #44]	; (80039e4 <genericmqtt_client_XCube_sample_run+0x214>)
 80039b8:	f01f fda8 	bl	802350c <iprintf>
 80039bc:	4819      	ldr	r0, [pc, #100]	; (8003a24 <genericmqtt_client_XCube_sample_run+0x254>)
 80039be:	e7a5      	b.n	800390c <genericmqtt_client_XCube_sample_run+0x13c>
                switch (connection_security) {
 80039c0:	f1b8 0f03 	cmp.w	r8, #3
 80039c4:	f200 8149 	bhi.w	8003c5a <genericmqtt_client_XCube_sample_run+0x48a>
 80039c8:	e8df f018 	tbh	[pc, r8, lsl #1]
 80039cc:	00fa0072 	.word	0x00fa0072
 80039d0:	002e012a 	.word	0x002e012a
 80039d4:	20000834 	.word	0x20000834
 80039d8:	20000020 	.word	0x20000020
 80039dc:	2000000c 	.word	0x2000000c
 80039e0:	08027eb6 	.word	0x08027eb6
 80039e4:	0802d3b1 	.word	0x0802d3b1
 80039e8:	0802eae4 	.word	0x0802eae4
 80039ec:	0802eb07 	.word	0x0802eb07
 80039f0:	0802efd5 	.word	0x0802efd5
 80039f4:	200011a0 	.word	0x200011a0
 80039f8:	0802eb52 	.word	0x0802eb52
 80039fc:	0802ead7 	.word	0x0802ead7
 8003a00:	0802fdc9 	.word	0x0802fdc9
 8003a04:	0802eb76 	.word	0x0802eb76
 8003a08:	08003355 	.word	0x08003355
 8003a0c:	0802eba2 	.word	0x0802eba2
 8003a10:	0802eb6b 	.word	0x0802eb6b
 8003a14:	0802ebc2 	.word	0x0802ebc2
 8003a18:	0802e347 	.word	0x0802e347
 8003a1c:	0802ec0d 	.word	0x0802ec0d
 8003a20:	0802ec5d 	.word	0x0802ec5d
 8003a24:	0802e206 	.word	0x0802e206
                    ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0)) || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003a28:	f7fd febe 	bl	80017a8 <checkTLSRootCA>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	f040 80bf 	bne.w	8003bb0 <genericmqtt_client_XCube_sample_run+0x3e0>
 8003a32:	aa1c      	add	r2, sp, #112	; 0x70
 8003a34:	a91b      	add	r1, sp, #108	; 0x6c
 8003a36:	a81a      	add	r0, sp, #104	; 0x68
 8003a38:	f7fe f80a 	bl	8001a50 <getTLSKeys>
 8003a3c:	f110 0a00 	adds.w	sl, r0, #0
 8003a40:	bf18      	it	ne
 8003a42:	f04f 0a01 	movne.w	sl, #1
                    ret |= net_sock_setopt(socket, "tls_server_name", (void*)device_config->HostName, strlen(device_config->HostName) + 1);
 8003a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a48:	f8d3 9000 	ldr.w	r9, [r3]
 8003a4c:	4648      	mov	r0, r9
 8003a4e:	f7fc fbc9 	bl	80001e4 <strlen>
 8003a52:	464a      	mov	r2, r9
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	4996      	ldr	r1, [pc, #600]	; (8003cb0 <genericmqtt_client_XCube_sample_run+0x4e0>)
 8003a58:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003a5a:	f7fe f9d7 	bl	8001e0c <net_sock_setopt>
                    ret |= net_sock_setopt(socket, "tls_ca_certs", (void*)ca_cert, strlen(ca_cert) + 1);
 8003a5e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
                    ret |= net_sock_setopt(socket, "tls_server_name", (void*)device_config->HostName, strlen(device_config->HostName) + 1);
 8003a62:	ea4a 0a00 	orr.w	sl, sl, r0
                    ret |= net_sock_setopt(socket, "tls_ca_certs", (void*)ca_cert, strlen(ca_cert) + 1);
 8003a66:	4648      	mov	r0, r9
 8003a68:	f7fc fbbc 	bl	80001e4 <strlen>
 8003a6c:	464a      	mov	r2, r9
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	4990      	ldr	r1, [pc, #576]	; (8003cb4 <genericmqtt_client_XCube_sample_run+0x4e4>)
 8003a72:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003a74:	f7fe f9ca 	bl	8001e0c <net_sock_setopt>
                    ret |= net_sock_setopt(socket, "tls_dev_cert", (void*)device_cert, strlen(device_cert) + 1);
 8003a78:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
                    ret |= net_sock_setopt(socket, "tls_ca_certs", (void*)ca_cert, strlen(ca_cert) + 1);
 8003a7c:	ea4a 0a00 	orr.w	sl, sl, r0
                    ret |= net_sock_setopt(socket, "tls_dev_cert", (void*)device_cert, strlen(device_cert) + 1);
 8003a80:	4648      	mov	r0, r9
 8003a82:	f7fc fbaf 	bl	80001e4 <strlen>
 8003a86:	464a      	mov	r2, r9
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	498b      	ldr	r1, [pc, #556]	; (8003cb8 <genericmqtt_client_XCube_sample_run+0x4e8>)
 8003a8c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003a8e:	f7fe f9bd 	bl	8001e0c <net_sock_setopt>
                    ret |= net_sock_setopt(socket, "tls_dev_key", (void*)device_key, strlen(device_key) + 1);
 8003a92:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
                    ret |= net_sock_setopt(socket, "tls_dev_cert", (void*)device_cert, strlen(device_cert) + 1);
 8003a96:	ea4a 0a00 	orr.w	sl, sl, r0
                    ret |= net_sock_setopt(socket, "tls_dev_key", (void*)device_key, strlen(device_key) + 1);
 8003a9a:	4648      	mov	r0, r9
 8003a9c:	f7fc fba2 	bl	80001e4 <strlen>
 8003aa0:	4986      	ldr	r1, [pc, #536]	; (8003cbc <genericmqtt_client_XCube_sample_run+0x4ec>)
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	464a      	mov	r2, r9
                    ret |= net_sock_setopt(socket, "tls_ca_certs", (void*)ca_cert, strlen(ca_cert) + 1);
 8003aa6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003aa8:	f7fe f9b0 	bl	8001e0c <net_sock_setopt>
 8003aac:	ea4a 0a00 	orr.w	sl, sl, r0
                ret |= net_sock_setopt(socket, "sock_noblocking", NULL, 0);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4982      	ldr	r1, [pc, #520]	; (8003cc0 <genericmqtt_client_XCube_sample_run+0x4f0>)
 8003ab6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003ab8:	f7fe f9a8 	bl	8001e0c <net_sock_setopt>
            if (ret != NET_OK) {
 8003abc:	ea5a 0a00 	orrs.w	sl, sl, r0
 8003ac0:	f47f af4f 	bne.w	8003962 <genericmqtt_client_XCube_sample_run+0x192>
                ret = net_sock_open(socket, device_config->HostName, atoi(device_config->HostPort), 0);
 8003ac4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ac6:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8003aca:	e9d3 9000 	ldrd	r9, r0, [r3]
 8003ace:	f01e fa8e 	bl	8021fee <atoi>
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4653      	mov	r3, sl
 8003ad8:	4658      	mov	r0, fp
 8003ada:	f7fe f991 	bl	8001e00 <net_sock_open>
            if (ret != NET_OK) {
 8003ade:	4681      	mov	r9, r0
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	f47f af47 	bne.w	8003974 <genericmqtt_client_XCube_sample_run+0x1a4>
                network.my_socket = socket;
 8003ae6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ae8:	9320      	str	r3, [sp, #128]	; 0x80
                network.mqttread  = (network_read);
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <genericmqtt_client_XCube_sample_run+0x4f4>)
                MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT, mqtt_send_buffer, MQTT_SEND_BUFFER_SIZE, mqtt_read_buffer, MQTT_READ_BUFFER_SIZE);
 8003aec:	4a76      	ldr	r2, [pc, #472]	; (8003cc8 <genericmqtt_client_XCube_sample_run+0x4f8>)
                network.mqttread  = (network_read);
 8003aee:	9321      	str	r3, [sp, #132]	; 0x84
                network.mqttwrite = (network_write);
 8003af0:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <genericmqtt_client_XCube_sample_run+0x4fc>)
 8003af2:	9322      	str	r3, [sp, #136]	; 0x88
                MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT, mqtt_send_buffer, MQTT_SEND_BUFFER_SIZE, mqtt_read_buffer, MQTT_READ_BUFFER_SIZE);
 8003af4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003af8:	e9cd 3200 	strd	r3, r2, [sp]
 8003afc:	9302      	str	r3, [sp, #8]
 8003afe:	a920      	add	r1, sp, #128	; 0x80
 8003b00:	f5a2 7316 	sub.w	r3, r2, #600	; 0x258
 8003b04:	a83e      	add	r0, sp, #248	; 0xf8
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	f008 fdfe 	bl	800c70a <MQTTClientInit>
                MQTTPacket_connectData options = MQTTPacket_connectData_initializer;
 8003b0e:	2258      	movs	r2, #88	; 0x58
 8003b10:	496f      	ldr	r1, [pc, #444]	; (8003cd0 <genericmqtt_client_XCube_sample_run+0x500>)
 8003b12:	a828      	add	r0, sp, #160	; 0xa0
 8003b14:	f01e fbe7 	bl	80222e6 <memcpy>
                options.clientID.cstring = device_config->MQClientId;
 8003b18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	922b      	str	r2, [sp, #172]	; 0xac
                ret = MQTTConnect(&client, &options);
 8003b1e:	a928      	add	r1, sp, #160	; 0xa0
                options.username.cstring = device_config->MQUserName;
 8003b20:	691a      	ldr	r2, [r3, #16]
                options.password.cstring = device_config->MQUserPwd;
 8003b22:	695b      	ldr	r3, [r3, #20]
                options.username.cstring = device_config->MQUserName;
 8003b24:	9238      	str	r2, [sp, #224]	; 0xe0
                ret = MQTTConnect(&client, &options);
 8003b26:	a83e      	add	r0, sp, #248	; 0xf8
                options.password.cstring = device_config->MQUserPwd;
 8003b28:	933b      	str	r3, [sp, #236]	; 0xec
                ret = MQTTConnect(&client, &options);
 8003b2a:	f008 fe75 	bl	800c818 <MQTTConnect>
                if (ret != 0) {
 8003b2e:	4682      	mov	sl, r0
 8003b30:	2800      	cmp	r0, #0
 8003b32:	f000 809d 	beq.w	8003c70 <genericmqtt_client_XCube_sample_run+0x4a0>
                    msg_error("MQTTConnect() failed: %d\n", ret);
 8003b36:	4631      	mov	r1, r6
 8003b38:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8003b3c:	4865      	ldr	r0, [pc, #404]	; (8003cd4 <genericmqtt_client_XCube_sample_run+0x504>)
 8003b3e:	f01f fce5 	bl	802350c <iprintf>
 8003b42:	4651      	mov	r1, sl
 8003b44:	4864      	ldr	r0, [pc, #400]	; (8003cd8 <genericmqtt_client_XCube_sample_run+0x508>)
 8003b46:	f01f fce1 	bl	802350c <iprintf>
                    msg_error("Failed subscribing to the %s topic.\n", mqtt_subtopic);
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 8003b50:	4860      	ldr	r0, [pc, #384]	; (8003cd4 <genericmqtt_client_XCube_sample_run+0x504>)
 8003b52:	f01f fcdb 	bl	802350c <iprintf>
 8003b56:	4961      	ldr	r1, [pc, #388]	; (8003cdc <genericmqtt_client_XCube_sample_run+0x50c>)
 8003b58:	4861      	ldr	r0, [pc, #388]	; (8003ce0 <genericmqtt_client_XCube_sample_run+0x510>)
 8003b5a:	f01f fcd7 	bl	802350c <iprintf>
                    msg_error("Yield failed.\n");
 8003b5e:	f240 12f1 	movw	r2, #497	; 0x1f1
 8003b62:	4631      	mov	r1, r6
 8003b64:	485b      	ldr	r0, [pc, #364]	; (8003cd4 <genericmqtt_client_XCube_sample_run+0x504>)
 8003b66:	f01f fcd1 	bl	802350c <iprintf>
 8003b6a:	485e      	ldr	r0, [pc, #376]	; (8003ce4 <genericmqtt_client_XCube_sample_run+0x514>)
 8003b6c:	f01f fd56 	bl	802361c <puts>
                if (b_mqtt_connected == true) {
 8003b70:	f1b9 0f00 	cmp.w	r9, #0
 8003b74:	d00c      	beq.n	8003b90 <genericmqtt_client_XCube_sample_run+0x3c0>
                    ret = MQTTDisconnect(&client);
 8003b76:	a83e      	add	r0, sp, #248	; 0xf8
 8003b78:	f008 ff49 	bl	800ca0e <MQTTDisconnect>
                    if (ret != MQSUCCESS) {
 8003b7c:	b140      	cbz	r0, 8003b90 <genericmqtt_client_XCube_sample_run+0x3c0>
                        msg_error("MQTTDisconnect() failed.\n");
 8003b7e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8003b82:	4631      	mov	r1, r6
 8003b84:	4853      	ldr	r0, [pc, #332]	; (8003cd4 <genericmqtt_client_XCube_sample_run+0x504>)
 8003b86:	f01f fcc1 	bl	802350c <iprintf>
 8003b8a:	4857      	ldr	r0, [pc, #348]	; (8003ce8 <genericmqtt_client_XCube_sample_run+0x518>)
 8003b8c:	f01f fd46 	bl	802361c <puts>
                if (NET_OK != net_sock_close(socket)) {
 8003b90:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b92:	f7fe f9eb 	bl	8001f6c <net_sock_close>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f43f af05 	beq.w	80039a6 <genericmqtt_client_XCube_sample_run+0x1d6>
                    msg_error("net_sock_close() failed.\n");
 8003b9c:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	484c      	ldr	r0, [pc, #304]	; (8003cd4 <genericmqtt_client_XCube_sample_run+0x504>)
 8003ba4:	f01f fcb2 	bl	802350c <iprintf>
 8003ba8:	4850      	ldr	r0, [pc, #320]	; (8003cec <genericmqtt_client_XCube_sample_run+0x51c>)
 8003baa:	f01f fd37 	bl	802361c <puts>
 8003bae:	e6fa      	b.n	80039a6 <genericmqtt_client_XCube_sample_run+0x1d6>
                    ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0)) || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003bb0:	f7fd fe12 	bl	80017d8 <checkTLSDeviceConfig>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	f43f af3c 	beq.w	8003a32 <genericmqtt_client_XCube_sample_run+0x262>
 8003bba:	f04f 0a01 	mov.w	sl, #1
 8003bbe:	e742      	b.n	8003a46 <genericmqtt_client_XCube_sample_run+0x276>
                    ret |= net_sock_setopt(socket, "tls_server_noverification", NULL, 0);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	494a      	ldr	r1, [pc, #296]	; (8003cf0 <genericmqtt_client_XCube_sample_run+0x520>)
 8003bc6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003bc8:	f7fe f920 	bl	8001e0c <net_sock_setopt>
 8003bcc:	4682      	mov	sl, r0
                    ret |= (checkTLSRootCA() != 0)
 8003bce:	f7fd fdeb 	bl	80017a8 <checkTLSRootCA>
                        || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	bb08      	cbnz	r0, 8003c1a <genericmqtt_client_XCube_sample_run+0x44a>
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	a81a      	add	r0, sp, #104	; 0x68
 8003bda:	f7fd ff39 	bl	8001a50 <getTLSKeys>
 8003bde:	f110 0900 	adds.w	r9, r0, #0
 8003be2:	bf18      	it	ne
 8003be4:	f04f 0901 	movne.w	r9, #1
                    ret |= net_sock_setopt(socket, "tls_server_name", (void*)device_config->HostName, strlen(device_config->HostName) + 1);
 8003be8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bea:	f8d3 b000 	ldr.w	fp, [r3]
 8003bee:	4658      	mov	r0, fp
 8003bf0:	f7fc faf8 	bl	80001e4 <strlen>
 8003bf4:	465a      	mov	r2, fp
 8003bf6:	1c43      	adds	r3, r0, #1
 8003bf8:	492d      	ldr	r1, [pc, #180]	; (8003cb0 <genericmqtt_client_XCube_sample_run+0x4e0>)
 8003bfa:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003bfc:	f7fe f906 	bl	8001e0c <net_sock_setopt>
 8003c00:	ea49 0000 	orr.w	r0, r9, r0
                    ret |= net_sock_setopt(socket, "tls_ca_certs", (void*)ca_cert, strlen(ca_cert) + 1);
 8003c04:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
                    ret |= net_sock_setopt(socket, "tls_server_name", (void*)device_config->HostName, strlen(device_config->HostName) + 1);
 8003c08:	ea40 0a0a 	orr.w	sl, r0, sl
                    ret |= net_sock_setopt(socket, "tls_ca_certs", (void*)ca_cert, strlen(ca_cert) + 1);
 8003c0c:	4648      	mov	r0, r9
 8003c0e:	f7fc fae9 	bl	80001e4 <strlen>
 8003c12:	464a      	mov	r2, r9
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	4927      	ldr	r1, [pc, #156]	; (8003cb4 <genericmqtt_client_XCube_sample_run+0x4e4>)
 8003c18:	e745      	b.n	8003aa6 <genericmqtt_client_XCube_sample_run+0x2d6>
                        || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003c1a:	f04f 0901 	mov.w	r9, #1
 8003c1e:	e7e3      	b.n	8003be8 <genericmqtt_client_XCube_sample_run+0x418>
                    ret |= (checkTLSRootCA() != 0)
 8003c20:	f7fd fdc2 	bl	80017a8 <checkTLSRootCA>
                        || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003c24:	4602      	mov	r2, r0
 8003c26:	b9a8      	cbnz	r0, 8003c54 <genericmqtt_client_XCube_sample_run+0x484>
 8003c28:	4601      	mov	r1, r0
 8003c2a:	a81a      	add	r0, sp, #104	; 0x68
 8003c2c:	f7fd ff10 	bl	8001a50 <getTLSKeys>
 8003c30:	f110 0a00 	adds.w	sl, r0, #0
 8003c34:	bf18      	it	ne
 8003c36:	f04f 0a01 	movne.w	sl, #1
                    ret |= net_sock_setopt(socket, "tls_server_name", (void*)device_config->HostName, strlen(device_config->HostName) + 1);
 8003c3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c3c:	f8d3 9000 	ldr.w	r9, [r3]
 8003c40:	4648      	mov	r0, r9
 8003c42:	f7fc facf 	bl	80001e4 <strlen>
 8003c46:	464a      	mov	r2, r9
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	4919      	ldr	r1, [pc, #100]	; (8003cb0 <genericmqtt_client_XCube_sample_run+0x4e0>)
 8003c4c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c4e:	f7fe f8dd 	bl	8001e0c <net_sock_setopt>
 8003c52:	e7d7      	b.n	8003c04 <genericmqtt_client_XCube_sample_run+0x434>
                        || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003c54:	f04f 0a01 	mov.w	sl, #1
 8003c58:	e7ef      	b.n	8003c3a <genericmqtt_client_XCube_sample_run+0x46a>
                    msg_error("Invalid connection security mode. - %d\n", connection_security);
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	f240 12a9 	movw	r2, #425	; 0x1a9
 8003c60:	481c      	ldr	r0, [pc, #112]	; (8003cd4 <genericmqtt_client_XCube_sample_run+0x504>)
 8003c62:	f01f fc53 	bl	802350c <iprintf>
 8003c66:	4641      	mov	r1, r8
 8003c68:	4822      	ldr	r0, [pc, #136]	; (8003cf4 <genericmqtt_client_XCube_sample_run+0x524>)
 8003c6a:	f01f fc4f 	bl	802350c <iprintf>
 8003c6e:	e71f      	b.n	8003ab0 <genericmqtt_client_XCube_sample_run+0x2e0>
                    snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
                    g_connection_needed_score = 0;
 8003c72:	f8c4 025c 	str.w	r0, [r4, #604]	; 0x25c
                    snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <genericmqtt_client_XCube_sample_run+0x528>)
 8003c7a:	4818      	ldr	r0, [pc, #96]	; (8003cdc <genericmqtt_client_XCube_sample_run+0x50c>)
 8003c7c:	2164      	movs	r1, #100	; 0x64
 8003c7e:	f01f fd11 	bl	80236a4 <sniprintf>
                    ret = MQTTSubscribe(&client, mqtt_subtopic, QOS0, (allpurposeMessageHandler));
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <genericmqtt_client_XCube_sample_run+0x52c>)
 8003c84:	4915      	ldr	r1, [pc, #84]	; (8003cdc <genericmqtt_client_XCube_sample_run+0x50c>)
 8003c86:	4652      	mov	r2, sl
 8003c88:	a83e      	add	r0, sp, #248	; 0xf8
 8003c8a:	f008 fe55 	bl	800c938 <MQTTSubscribe>
                if (ret != MQSUCCESS) {
 8003c8e:	b110      	cbz	r0, 8003c96 <genericmqtt_client_XCube_sample_run+0x4c6>
                    b_mqtt_connected = true;
 8003c90:	f04f 0901 	mov.w	r9, #1
 8003c94:	e759      	b.n	8003b4a <genericmqtt_client_XCube_sample_run+0x37a>
                    msg_info("Subscribed to %s.\n", mqtt_subtopic);
 8003c96:	4911      	ldr	r1, [pc, #68]	; (8003cdc <genericmqtt_client_XCube_sample_run+0x50c>)
 8003c98:	4819      	ldr	r0, [pc, #100]	; (8003d00 <genericmqtt_client_XCube_sample_run+0x530>)
 8003c9a:	f01f fc37 	bl	802350c <iprintf>
                    ret = MQTTYield(&client, 500);
 8003c9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003ca2:	a83e      	add	r0, sp, #248	; 0xf8
 8003ca4:	f008 fd51 	bl	800c74a <MQTTYield>
                if (ret != MQSUCCESS) {
 8003ca8:	b360      	cbz	r0, 8003d04 <genericmqtt_client_XCube_sample_run+0x534>
                    b_mqtt_connected = true;
 8003caa:	f04f 0901 	mov.w	r9, #1
 8003cae:	e756      	b.n	8003b5e <genericmqtt_client_XCube_sample_run+0x38e>
 8003cb0:	0802dc37 	.word	0x0802dc37
 8003cb4:	0802dbd3 	.word	0x0802dbd3
 8003cb8:	0802dbe0 	.word	0x0802dbe0
 8003cbc:	0802dbed 	.word	0x0802dbed
 8003cc0:	0802dc55 	.word	0x0802dc55
 8003cc4:	080033d5 	.word	0x080033d5
 8003cc8:	20000cec 	.word	0x20000cec
 8003ccc:	08003409 	.word	0x08003409
 8003cd0:	08027edc 	.word	0x08027edc
 8003cd4:	0802d3b1 	.word	0x0802d3b1
 8003cd8:	0802ec87 	.word	0x0802ec87
 8003cdc:	20000f44 	.word	0x20000f44
 8003ce0:	0802ecb5 	.word	0x0802ecb5
 8003ce4:	0802eced 	.word	0x0802eced
 8003ce8:	0802efa3 	.word	0x0802efa3
 8003cec:	0802efbc 	.word	0x0802efbc
 8003cf0:	0802dc1d 	.word	0x0802dc1d
 8003cf4:	0802ebe5 	.word	0x0802ebe5
 8003cf8:	0802eca1 	.word	0x0802eca1
 8003cfc:	0800343d 	.word	0x0800343d
 8003d00:	0802ecda 	.word	0x0802ecda
                    uint32_t last_telemetry_time_ms = HAL_GetTick();
 8003d04:	f004 fea6 	bl	8008a54 <HAL_GetTick>
                            BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 8003d08:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8003fd0 <genericmqtt_client_XCube_sample_run+0x800>
                    uint32_t last_telemetry_time_ms = HAL_GetTick();
 8003d0c:	4682      	mov	sl, r0
                        uint8_t command = Button_WaitForMultiPush(500);
 8003d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d12:	f000 fa0b 	bl	800412c <Button_WaitForMultiPush>
                        if (command == BP_MULTIPLE_PUSH){              		/* If long button push, toggle the telemetry publication. */
 8003d16:	2802      	cmp	r0, #2
                        uint8_t command = Button_WaitForMultiPush(500);
 8003d18:	4683      	mov	fp, r0
                        if (command == BP_MULTIPLE_PUSH){              		/* If long button push, toggle the telemetry publication. */
 8003d1a:	d10d      	bne.n	8003d38 <genericmqtt_client_XCube_sample_run+0x568>
                            g_publishData = !g_publishData;
 8003d1c:	f894 325b 	ldrb.w	r3, [r4, #603]	; 0x25b
                            msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003d20:	4997      	ldr	r1, [pc, #604]	; (8003f80 <genericmqtt_client_XCube_sample_run+0x7b0>)
 8003d22:	4a98      	ldr	r2, [pc, #608]	; (8003f84 <genericmqtt_client_XCube_sample_run+0x7b4>)
 8003d24:	4898      	ldr	r0, [pc, #608]	; (8003f88 <genericmqtt_client_XCube_sample_run+0x7b8>)
                            g_publishData = !g_publishData;
 8003d26:	f083 0301 	eor.w	r3, r3, #1
                            msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf08      	it	eq
 8003d2e:	4611      	moveq	r1, r2
                            g_publishData = !g_publishData;
 8003d30:	f884 325b 	strb.w	r3, [r4, #603]	; 0x25b
                            msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003d34:	f01f fbea 	bl	802350c <iprintf>
                        int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003d38:	f004 fe8c 	bl	8008a54 <HAL_GetTick>
 8003d3c:	692b      	ldr	r3, [r5, #16]
 8003d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d42:	435a      	muls	r2, r3
 8003d44:	4601      	mov	r1, r0
 8003d46:	4650      	mov	r0, sl
 8003d48:	f7ff fd38 	bl	80037bc <comp_left_ms>
                        if (((g_publishData == true) && (left_ms <= 0)) || (b_sample_data == true))
 8003d4c:	f894 325b 	ldrb.w	r3, [r4, #603]	; 0x25b
 8003d50:	b10b      	cbz	r3, 8003d56 <genericmqtt_client_XCube_sample_run+0x586>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	dd02      	ble.n	8003d5c <genericmqtt_client_XCube_sample_run+0x58c>
 8003d56:	f1bb 0f01 	cmp.w	fp, #1
 8003d5a:	d16f      	bne.n	8003e3c <genericmqtt_client_XCube_sample_run+0x66c>
                            last_telemetry_time_ms = HAL_GetTick();
 8003d5c:	f004 fe7a 	bl	8008a54 <HAL_GetTick>
 8003d60:	4682      	mov	sl, r0
                            pub_data.temperature = BSP_TSENSOR_ReadTemp();
 8003d62:	f001 fad9 	bl	8005318 <BSP_TSENSOR_ReadTemp>
 8003d66:	ed85 0a11 	vstr	s0, [r5, #68]	; 0x44
                            pub_data.humidity = BSP_HSENSOR_ReadHumidity();
 8003d6a:	f001 fa77 	bl	800525c <BSP_HSENSOR_ReadHumidity>
 8003d6e:	ed85 0a12 	vstr	s0, [r5, #72]	; 0x48
                            pub_data.pressure = BSP_PSENSOR_ReadPressure();
 8003d72:	f001 fab7 	bl	80052e4 <BSP_PSENSOR_ReadPressure>
 8003d76:	ed85 0a13 	vstr	s0, [r5, #76]	; 0x4c
                            pub_data.proximity = VL53L0X_PROXIMITY_GetDistance();
 8003d7a:	f000 fccf 	bl	800471c <VL53L0X_PROXIMITY_GetDistance>
 8003d7e:	6528      	str	r0, [r5, #80]	; 0x50
                            BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 8003d80:	4882      	ldr	r0, [pc, #520]	; (8003f8c <genericmqtt_client_XCube_sample_run+0x7bc>)
 8003d82:	f001 fa2f 	bl	80051e4 <BSP_ACCELERO_AccGetXYZ>
                            BSP_GYRO_GetXYZ(pub_data.GYR_Value);
 8003d86:	4882      	ldr	r0, [pc, #520]	; (8003f90 <genericmqtt_client_XCube_sample_run+0x7c0>)
 8003d88:	f001 fa4a 	bl	8005220 <BSP_GYRO_GetXYZ>
                            BSP_MAGNETO_GetXYZ(pub_data.MAG_Value);
 8003d8c:	4881      	ldr	r0, [pc, #516]	; (8003f94 <genericmqtt_client_XCube_sample_run+0x7c4>)
 8003d8e:	f001 fa8b 	bl	80052a8 <BSP_MAGNETO_GetXYZ>
                            pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003d92:	2000      	movs	r0, #0
 8003d94:	f7ff fa3a 	bl	800320c <time>
                            snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/sensors/%s", device_config->MQClientId);
 8003d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d9a:	4a7f      	ldr	r2, [pc, #508]	; (8003f98 <genericmqtt_client_XCube_sample_run+0x7c8>)
                            pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003d9c:	6268      	str	r0, [r5, #36]	; 0x24
                            snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/sensors/%s", device_config->MQClientId);
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	487e      	ldr	r0, [pc, #504]	; (8003f9c <genericmqtt_client_XCube_sample_run+0x7cc>)
 8003da2:	2164      	movs	r1, #100	; 0x64
 8003da4:	f01f fc7e 	bl	80236a4 <sniprintf>
                            ret = snprintf(mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"state\": {\n  \"reported\": {\n"
 8003da8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003daa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	e9cd 9314 	strd	r9, r3, [sp, #80]	; 0x50
 8003db2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003db4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003db6:	f9b5 3040 	ldrsh.w	r3, [r5, #64]	; 0x40
 8003dba:	9312      	str	r3, [sp, #72]	; 0x48
 8003dbc:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 8003dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8003dc2:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 8003dc6:	9310      	str	r3, [sp, #64]	; 0x40
 8003dc8:	f7fc fbce 	bl	8000568 <__aeabi_f2d>
 8003dcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003dd0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003dd2:	f7fc fbc9 	bl	8000568 <__aeabi_f2d>
 8003dd6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003dda:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003ddc:	f7fc fbc4 	bl	8000568 <__aeabi_f2d>
 8003de0:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8003de4:	9309      	str	r3, [sp, #36]	; 0x24
 8003de6:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8003dea:	9308      	str	r3, [sp, #32]
 8003dec:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8003df0:	9307      	str	r3, [sp, #28]
 8003df2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003df6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003df8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8003dfa:	9306      	str	r3, [sp, #24]
 8003dfc:	f7fc fbb4 	bl	8000568 <__aeabi_f2d>
 8003e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e04:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8003e06:	f7fc fbaf 	bl	8000568 <__aeabi_f2d>
 8003e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e0e:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8003e10:	f7fc fbaa 	bl	8000568 <__aeabi_f2d>
 8003e14:	4a62      	ldr	r2, [pc, #392]	; (8003fa0 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003e16:	e9cd 0100 	strd	r0, r1, [sp]
 8003e1a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003e1e:	4861      	ldr	r0, [pc, #388]	; (8003fa4 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003e20:	f01f fc40 	bl	80236a4 <sniprintf>
                            if ((ret < 0) || (ret >= MQTT_MSG_BUFFER_SIZE)) {
 8003e24:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8003e28:	d352      	bcc.n	8003ed0 <genericmqtt_client_XCube_sample_run+0x700>
                                msg_error("Telemetry message formatting error.\n");
 8003e2a:	f240 2292 	movw	r2, #658	; 0x292
 8003e2e:	4631      	mov	r1, r6
 8003e30:	485d      	ldr	r0, [pc, #372]	; (8003fa8 <genericmqtt_client_XCube_sample_run+0x7d8>)
 8003e32:	f01f fb6b 	bl	802350c <iprintf>
 8003e36:	485d      	ldr	r0, [pc, #372]	; (8003fac <genericmqtt_client_XCube_sample_run+0x7dc>)
                                    msg_error("Yield failed. Reconnection needed?.\n");
 8003e38:	f01f fbf0 	bl	802361c <puts>
                        if (g_statusChanged)
 8003e3c:	f894 3258 	ldrb.w	r3, [r4, #600]	; 0x258
 8003e40:	b30b      	cbz	r3, 8003e86 <genericmqtt_client_XCube_sample_run+0x6b6>
                            snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/status", device_config->MQClientId);
 8003e42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e44:	4a5a      	ldr	r2, [pc, #360]	; (8003fb0 <genericmqtt_client_XCube_sample_run+0x7e0>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4854      	ldr	r0, [pc, #336]	; (8003f9c <genericmqtt_client_XCube_sample_run+0x7cc>)
 8003e4a:	2164      	movs	r1, #100	; 0x64
 8003e4c:	f01f fc2a 	bl	80236a4 <sniprintf>
                            uint32_t ts = time(NULL); /* last_telemetry_time_ms; */
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7ff f9db 	bl	800320c <time>
                            ret = snprintf(mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"state\": {\n  \"reported\": {\n"
 8003e56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e58:	4a56      	ldr	r2, [pc, #344]	; (8003fb4 <genericmqtt_client_XCube_sample_run+0x7e4>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
                            uint32_t ts = time(NULL); /* last_telemetry_time_ms; */
 8003e5c:	9000      	str	r0, [sp, #0]
                            ret = snprintf(mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"state\": {\n  \"reported\": {\n"
 8003e5e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003e62:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003e66:	692b      	ldr	r3, [r5, #16]
 8003e68:	484e      	ldr	r0, [pc, #312]	; (8003fa4 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003e6a:	f01f fc1b 	bl	80236a4 <sniprintf>
                            if ((ret < 0) || (ret >= MQTT_MSG_BUFFER_SIZE)) {
 8003e6e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8003e72:	d360      	bcc.n	8003f36 <genericmqtt_client_XCube_sample_run+0x766>
                                msg_error("Telemetry message formatting error.\n");
 8003e74:	f240 22c6 	movw	r2, #710	; 0x2c6
 8003e78:	4631      	mov	r1, r6
 8003e7a:	484b      	ldr	r0, [pc, #300]	; (8003fa8 <genericmqtt_client_XCube_sample_run+0x7d8>)
 8003e7c:	f01f fb46 	bl	802350c <iprintf>
 8003e80:	484a      	ldr	r0, [pc, #296]	; (8003fac <genericmqtt_client_XCube_sample_run+0x7dc>)
 8003e82:	f01f fbcb 	bl	802361c <puts>
                        ret = MQTTYield(&client, 500);
 8003e86:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003e8a:	a83e      	add	r0, sp, #248	; 0xf8
 8003e8c:	f008 fc5d 	bl	800c74a <MQTTYield>
                        if (ret != MQSUCCESS) {
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d070      	beq.n	8003f76 <genericmqtt_client_XCube_sample_run+0x7a6>
                            msg_error("Yield failed. Reconnection needed.\n");
 8003e94:	f240 22dd 	movw	r2, #733	; 0x2dd
 8003e98:	4631      	mov	r1, r6
 8003e9a:	4843      	ldr	r0, [pc, #268]	; (8003fa8 <genericmqtt_client_XCube_sample_run+0x7d8>)
 8003e9c:	f01f fb36 	bl	802350c <iprintf>
 8003ea0:	4845      	ldr	r0, [pc, #276]	; (8003fb8 <genericmqtt_client_XCube_sample_run+0x7e8>)
 8003ea2:	f01f fbbb 	bl	802361c <puts>
                            g_connection_needed_score++;
 8003ea6:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
                    } while (g_continueRunning && !g_reboot && (g_connection_needed_score == 0));
 8003eb0:	f894 325a 	ldrb.w	r3, [r4, #602]	; 0x25a
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f43f ae5e 	beq.w	8003b76 <genericmqtt_client_XCube_sample_run+0x3a6>
 8003eba:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f47f ae59 	bne.w	8003b76 <genericmqtt_client_XCube_sample_run+0x3a6>
 8003ec4:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f43f af20 	beq.w	8003d0e <genericmqtt_client_XCube_sample_run+0x53e>
 8003ece:	e652      	b.n	8003b76 <genericmqtt_client_XCube_sample_run+0x3a6>
                                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);
 8003ed0:	4a34      	ldr	r2, [pc, #208]	; (8003fa4 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003ed2:	a83e      	add	r0, sp, #248	; 0xf8
 8003ed4:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003ed8:	f7ff fb48 	bl	800356c <stiot_publish>
                                if (ret == MQSUCCESS)  {
 8003edc:	b9e0      	cbnz	r0, 8003f18 <genericmqtt_client_XCube_sample_run+0x748>
                                	Led_Blink(50, 25, 5);
 8003ede:	2205      	movs	r2, #5
 8003ee0:	2119      	movs	r1, #25
 8003ee2:	2032      	movs	r0, #50	; 0x32
 8003ee4:	f000 f8da 	bl	800409c <Led_Blink>
                                    msg_info("#\n");
 8003ee8:	4834      	ldr	r0, [pc, #208]	; (8003fbc <genericmqtt_client_XCube_sample_run+0x7ec>)
 8003eea:	f01f fb97 	bl	802361c <puts>
                                    msg_info("publication topic: %s \npayload: %s\n", mqtt_pubtopic, mqtt_msg);
 8003eee:	4a2d      	ldr	r2, [pc, #180]	; (8003fa4 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003ef0:	4833      	ldr	r0, [pc, #204]	; (8003fc0 <genericmqtt_client_XCube_sample_run+0x7f0>)
 8003ef2:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003ef6:	f01f fb09 	bl	802350c <iprintf>
                                ret = MQTTYield(&client, 500);
 8003efa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003efe:	a83e      	add	r0, sp, #248	; 0xf8
 8003f00:	f008 fc23 	bl	800c74a <MQTTYield>
                                if (ret != MQSUCCESS)  {
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d099      	beq.n	8003e3c <genericmqtt_client_XCube_sample_run+0x66c>
                                    msg_error("Yield failed. Reconnection needed?.\n");
 8003f08:	f240 22a9 	movw	r2, #681	; 0x2a9
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4826      	ldr	r0, [pc, #152]	; (8003fa8 <genericmqtt_client_XCube_sample_run+0x7d8>)
 8003f10:	f01f fafc 	bl	802350c <iprintf>
 8003f14:	482b      	ldr	r0, [pc, #172]	; (8003fc4 <genericmqtt_client_XCube_sample_run+0x7f4>)
 8003f16:	e78f      	b.n	8003e38 <genericmqtt_client_XCube_sample_run+0x668>
                                    msg_error("Telemetry publication failed.\n");
 8003f18:	f240 22a3 	movw	r2, #675	; 0x2a3
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	4822      	ldr	r0, [pc, #136]	; (8003fa8 <genericmqtt_client_XCube_sample_run+0x7d8>)
 8003f20:	f01f faf4 	bl	802350c <iprintf>
 8003f24:	4828      	ldr	r0, [pc, #160]	; (8003fc8 <genericmqtt_client_XCube_sample_run+0x7f8>)
 8003f26:	f01f fb79 	bl	802361c <puts>
                                    g_connection_needed_score++;
 8003f2a:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8003f34:	e7e1      	b.n	8003efa <genericmqtt_client_XCube_sample_run+0x72a>
                                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);
 8003f36:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003f38:	a83e      	add	r0, sp, #248	; 0xf8
 8003f3a:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003f3e:	f7ff fb15 	bl	800356c <stiot_publish>
                                if (ret != MQSUCCESS)  {
 8003f42:	4683      	mov	fp, r0
 8003f44:	b170      	cbz	r0, 8003f64 <genericmqtt_client_XCube_sample_run+0x794>
                                    msg_error("Status publication failed.\n");
 8003f46:	f240 22ce 	movw	r2, #718	; 0x2ce
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4816      	ldr	r0, [pc, #88]	; (8003fa8 <genericmqtt_client_XCube_sample_run+0x7d8>)
 8003f4e:	f01f fadd 	bl	802350c <iprintf>
 8003f52:	481e      	ldr	r0, [pc, #120]	; (8003fcc <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003f54:	f01f fb62 	bl	802361c <puts>
                                    g_connection_needed_score++;
 8003f58:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8003f62:	e790      	b.n	8003e86 <genericmqtt_client_XCube_sample_run+0x6b6>
                                    msg_info("publication topic: %s \npayload: %s\n", mqtt_pubtopic, mqtt_msg);
 8003f64:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003f66:	4816      	ldr	r0, [pc, #88]	; (8003fc0 <genericmqtt_client_XCube_sample_run+0x7f0>)
 8003f68:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003f6c:	f01f face 	bl	802350c <iprintf>
                                    g_statusChanged = false;
 8003f70:	f884 b258 	strb.w	fp, [r4, #600]	; 0x258
 8003f74:	e787      	b.n	8003e86 <genericmqtt_client_XCube_sample_run+0x6b6>
                            msg_info(".");
 8003f76:	202e      	movs	r0, #46	; 0x2e
 8003f78:	f01f fae0 	bl	802353c <putchar>
 8003f7c:	e798      	b.n	8003eb0 <genericmqtt_client_XCube_sample_run+0x6e0>
 8003f7e:	bf00      	nop
 8003f80:	0802eade 	.word	0x0802eade
 8003f84:	0802f226 	.word	0x0802f226
 8003f88:	0802ecfb 	.word	0x0802ecfb
 8003f8c:	20000034 	.word	0x20000034
 8003f90:	2000003c 	.word	0x2000003c
 8003f94:	20000048 	.word	0x20000048
 8003f98:	0802ed23 	.word	0x0802ed23
 8003f9c:	20000fa8 	.word	0x20000fa8
 8003fa0:	0802ed2f 	.word	0x0802ed2f
 8003fa4:	20000834 	.word	0x20000834
 8003fa8:	0802d3b1 	.word	0x0802d3b1
 8003fac:	0802ee5a 	.word	0x0802ee5a
 8003fb0:	0802eee6 	.word	0x0802eee6
 8003fb4:	0802eef9 	.word	0x0802eef9
 8003fb8:	0802ef80 	.word	0x0802ef80
 8003fbc:	0802ee7e 	.word	0x0802ee7e
 8003fc0:	0802ee80 	.word	0x0802ee80
 8003fc4:	0802eec2 	.word	0x0802eec2
 8003fc8:	0802eea4 	.word	0x0802eea4
 8003fcc:	0802ef65 	.word	0x0802ef65
 8003fd0:	20000020 	.word	0x20000020

08003fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800400c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fda:	e003      	b.n	8003fe4 <LoopCopyDataInit>

08003fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fe2:	3104      	adds	r1, #4

08003fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fe4:	480b      	ldr	r0, [pc, #44]	; (8004014 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fec:	d3f6      	bcc.n	8003fdc <CopyDataInit>
	ldr	r2, =_sbss
 8003fee:	4a0b      	ldr	r2, [pc, #44]	; (800401c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ff0:	e002      	b.n	8003ff8 <LoopFillZerobss>

08003ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ff4:	f842 3b04 	str.w	r3, [r2], #4

08003ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <LoopForever+0x16>)
	cmp	r2, r3
 8003ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ffc:	d3f9      	bcc.n	8003ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ffe:	f004 fcdb 	bl	80089b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004002:	f01e f8eb 	bl	80221dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004006:	f000 f8ef 	bl	80041e8 <main>

0800400a <LoopForever>:

LoopForever:
    b LoopForever
 800400a:	e7fe      	b.n	800400a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800400c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004010:	080335c8 	.word	0x080335c8
	ldr	r0, =_sdata
 8004014:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004018:	20000818 	.word	0x20000818
	ldr	r2, =_sbss
 800401c:	20000818 	.word	0x20000818
	ldr	r3, = _ebss
 8004020:	200019dc 	.word	0x200019dc

08004024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004024:	e7fe      	b.n	8004024 <ADC1_2_IRQHandler>

08004026 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8004026:	b510      	push	{r4, lr}
 8004028:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 800402a:	f000 f8a9 	bl	8004180 <__io_getchar>
 800402e:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8004030:	2001      	movs	r0, #1
 8004032:	bd10      	pop	{r4, pc}

08004034 <_write>:

int _write(int file, char *ptr, int len)
{
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	460e      	mov	r6, r1
 8004038:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800403a:	460c      	mov	r4, r1
 800403c:	1ba3      	subs	r3, r4, r6
 800403e:	429d      	cmp	r5, r3
 8004040:	dc01      	bgt.n	8004046 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004042:	4628      	mov	r0, r5
 8004044:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8004046:	f814 0b01 	ldrb.w	r0, [r4], #1
 800404a:	f000 f885 	bl	8004158 <__io_putchar>
 800404e:	e7f5      	b.n	800403c <_write+0x8>

08004050 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004050:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <_sbrk+0x2c>)
 8004054:	6819      	ldr	r1, [r3, #0]
{
 8004056:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004058:	b909      	cbnz	r1, 800405e <_sbrk+0xe>
		heap_end = &end;
 800405a:	4909      	ldr	r1, [pc, #36]	; (8004080 <_sbrk+0x30>)
 800405c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800405e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004060:	4669      	mov	r1, sp
 8004062:	4402      	add	r2, r0
 8004064:	428a      	cmp	r2, r1
 8004066:	d906      	bls.n	8004076 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004068:	f01d ffce 	bl	8022008 <__errno>
 800406c:	230c      	movs	r3, #12
 800406e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004074:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004076:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004078:	e7fc      	b.n	8004074 <_sbrk+0x24>
 800407a:	bf00      	nop
 800407c:	2000100c 	.word	0x2000100c
 8004080:	200019e0 	.word	0x200019e0

08004084 <_close>:

int _close(int file)
{
	return -1;
}
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	4770      	bx	lr

0800408a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800408a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800408e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004090:	2000      	movs	r0, #0
 8004092:	4770      	bx	lr

08004094 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004094:	2001      	movs	r0, #1
 8004096:	4770      	bx	lr

08004098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004098:	2000      	movs	r0, #0
 800409a:	4770      	bx	lr

0800409c <Led_Blink>:
/**
 * @brief Blink LED for 'count' cycles of 'period' period and 'duty' ON duration.
 * duty < 0 tells to start with an OFF state.
 */
void Led_Blink(int period, int duty, int count)
{
 800409c:	b570      	push	{r4, r5, r6, lr}
    if ((duty > 0) && (period >= duty))
 800409e:	1e0c      	subs	r4, r1, #0
{
 80040a0:	4615      	mov	r5, r2
    if ((duty > 0) && (period >= duty))
 80040a2:	dd12      	ble.n	80040ca <Led_Blink+0x2e>
 80040a4:	4284      	cmp	r4, r0
 80040a6:	dc0f      	bgt.n	80040c8 <Led_Blink+0x2c>
        do
        {
            Led_SetState(true);
            HAL_Delay(duty);
            Led_SetState(false);
            HAL_Delay(period - duty);
 80040a8:	1b06      	subs	r6, r0, r4
        BSP_LED_On(LED_GREEN);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f000 ff9c 	bl	8004fe8 <BSP_LED_On>
            HAL_Delay(duty);
 80040b0:	4620      	mov	r0, r4
 80040b2:	f004 fcd5 	bl	8008a60 <HAL_Delay>
        BSP_LED_Off(LED_GREEN);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f000 ffa0 	bl	8004ffc <BSP_LED_Off>
            HAL_Delay(period - duty);
 80040bc:	4630      	mov	r0, r6
 80040be:	f004 fccf 	bl	8008a60 <HAL_Delay>
        } while (count--);
 80040c2:	f115 35ff 	adds.w	r5, r5, #4294967295
 80040c6:	d2f0      	bcs.n	80040aa <Led_Blink+0xe>
            HAL_Delay(period + duty);
            Led_SetState(true);
            HAL_Delay(-duty);
        } while (count--);
    }
}
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
    if ((duty < 0) && (period >= -duty))
 80040ca:	d0fd      	beq.n	80040c8 <Led_Blink+0x2c>
 80040cc:	4266      	negs	r6, r4
 80040ce:	4286      	cmp	r6, r0
 80040d0:	dcfa      	bgt.n	80040c8 <Led_Blink+0x2c>
            HAL_Delay(period + duty);
 80040d2:	4404      	add	r4, r0
        BSP_LED_Off(LED_GREEN);
 80040d4:	2000      	movs	r0, #0
 80040d6:	f000 ff91 	bl	8004ffc <BSP_LED_Off>
            HAL_Delay(period + duty);
 80040da:	4620      	mov	r0, r4
 80040dc:	f004 fcc0 	bl	8008a60 <HAL_Delay>
        BSP_LED_On(LED_GREEN);
 80040e0:	2000      	movs	r0, #0
 80040e2:	f000 ff81 	bl	8004fe8 <BSP_LED_On>
            HAL_Delay(-duty);
 80040e6:	4630      	mov	r0, r6
 80040e8:	f004 fcba 	bl	8008a60 <HAL_Delay>
        } while (count--);
 80040ec:	f115 35ff 	adds.w	r5, r5, #4294967295
 80040f0:	d2f0      	bcs.n	80040d4 <Led_Blink+0x38>
 80040f2:	e7e9      	b.n	80040c8 <Led_Blink+0x2c>

080040f4 <Button_WaitForPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForPush(uint32_t delay)
{
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4605      	mov	r5, r0
    uint32_t time_out = HAL_GetTick() + delay;
 80040f8:	f004 fcac 	bl	8008a54 <HAL_GetTick>
    do
    {
        if (button_flags > 1)
 80040fc:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <Button_WaitForPush+0x34>)
    uint32_t time_out = HAL_GetTick() + delay;
 80040fe:	4405      	add	r5, r0
        if (button_flags > 1)
 8004100:	7823      	ldrb	r3, [r4, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d903      	bls.n	800410e <Button_WaitForPush+0x1a>
        {
            button_flags = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	7023      	strb	r3, [r4, #0]
            return BP_MULTIPLE_PUSH;
 800410a:	2002      	movs	r0, #2
            button_flags = 0;
            return BP_SINGLE_PUSH;
        }
    } while (HAL_GetTick() < time_out);
    return BP_NOT_PUSHED;
}
 800410c:	bd38      	pop	{r3, r4, r5, pc}
        if (button_flags == 1)
 800410e:	7820      	ldrb	r0, [r4, #0]
 8004110:	b2c0      	uxtb	r0, r0
 8004112:	2801      	cmp	r0, #1
 8004114:	d102      	bne.n	800411c <Button_WaitForPush+0x28>
            button_flags = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	7023      	strb	r3, [r4, #0]
            return BP_SINGLE_PUSH;
 800411a:	e7f7      	b.n	800410c <Button_WaitForPush+0x18>
    } while (HAL_GetTick() < time_out);
 800411c:	f004 fc9a 	bl	8008a54 <HAL_GetTick>
 8004120:	42a8      	cmp	r0, r5
 8004122:	d3ed      	bcc.n	8004100 <Button_WaitForPush+0xc>
    return BP_NOT_PUSHED;
 8004124:	2000      	movs	r0, #0
 8004126:	e7f1      	b.n	800410c <Button_WaitForPush+0x18>
 8004128:	20001014 	.word	0x20001014

0800412c <Button_WaitForMultiPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForMultiPush(uint32_t delay)
{
 800412c:	b508      	push	{r3, lr}
    HAL_Delay(delay);
 800412e:	f004 fc97 	bl	8008a60 <HAL_Delay>

    if (button_flags > 1)
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <Button_WaitForMultiPush+0x28>)
 8004134:	7813      	ldrb	r3, [r2, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d903      	bls.n	8004142 <Button_WaitForMultiPush+0x16>
    {
        button_flags = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	7013      	strb	r3, [r2, #0]
        return BP_MULTIPLE_PUSH;
 800413e:	2002      	movs	r0, #2
    {
        button_flags = 0;
        return BP_SINGLE_PUSH;
    }
    return BP_NOT_PUSHED;
}
 8004140:	bd08      	pop	{r3, pc}
    if (button_flags == 1)
 8004142:	7810      	ldrb	r0, [r2, #0]
 8004144:	b2c3      	uxtb	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	f04f 0000 	mov.w	r0, #0
        button_flags = 0;
 800414c:	bf04      	itt	eq
 800414e:	7010      	strbeq	r0, [r2, #0]
        return BP_SINGLE_PUSH;
 8004150:	4618      	moveq	r0, r3
 8004152:	e7f5      	b.n	8004140 <Button_WaitForMultiPush+0x14>
 8004154:	20001014 	.word	0x20001014

08004158 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800415a:	ac02      	add	r4, sp, #8
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t*)&ch, 1, 30000))
 800415c:	4d07      	ldr	r5, [pc, #28]	; (800417c <__io_putchar+0x24>)
{
 800415e:	f844 0d04 	str.w	r0, [r4, #-4]!
    while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t*)&ch, 1, 30000))
 8004162:	f247 5330 	movw	r3, #30000	; 0x7530
 8004166:	2201      	movs	r2, #1
 8004168:	4621      	mov	r1, r4
 800416a:	4628      	mov	r0, r5
 800416c:	f007 ffe6 	bl	800c13c <HAL_UART_Transmit>
 8004170:	2800      	cmp	r0, #0
 8004172:	d1f6      	bne.n	8004162 <__io_putchar+0xa>
    {
      ;
    }
    return ch;
}
 8004174:	9801      	ldr	r0, [sp, #4]
 8004176:	b003      	add	sp, #12
 8004178:	bd30      	pop	{r4, r5, pc}
 800417a:	bf00      	nop
 800417c:	20001018 	.word	0x20001018

08004180 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
    GETCHAR_PROTOTYPE
{
 8004180:	b537      	push	{r0, r1, r2, r4, r5, lr}
    /* Place your implementation of fgetc here */
    /* e.g. read a character on USART and loop until the end of read */
    uint8_t ch = 0;
 8004182:	ac02      	add	r4, sp, #8
 8004184:	2300      	movs	r3, #0
 8004186:	f804 3d01 	strb.w	r3, [r4, #-1]!
    while (HAL_OK != HAL_UART_Receive(&console_uart, (uint8_t*)&ch, 1, 30000))
 800418a:	4d07      	ldr	r5, [pc, #28]	; (80041a8 <__io_getchar+0x28>)
 800418c:	f247 5330 	movw	r3, #30000	; 0x7530
 8004190:	2201      	movs	r2, #1
 8004192:	4621      	mov	r1, r4
 8004194:	4628      	mov	r0, r5
 8004196:	f008 f828 	bl	800c1ea <HAL_UART_Receive>
 800419a:	2800      	cmp	r0, #0
 800419c:	d1f6      	bne.n	800418c <__io_getchar+0xc>
    {
      ;
    }
    return ch;
}
 800419e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80041a2:	b003      	add	sp, #12
 80041a4:	bd30      	pop	{r4, r5, pc}
 80041a6:	bf00      	nop
 80041a8:	20001018 	.word	0x20001018

080041ac <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    switch (GPIO_Pin)
 80041ac:	2802      	cmp	r0, #2
 80041ae:	d008      	beq.n	80041c2 <HAL_GPIO_EXTI_Callback+0x16>
 80041b0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80041b4:	d107      	bne.n	80041c6 <HAL_GPIO_EXTI_Callback+0x1a>
    button_flags++;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80041b8:	7813      	ldrb	r3, [r2, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	7013      	strb	r3, [r2, #0]
 80041c0:	4770      	bx	lr
			break;
		}

		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80041c2:	f000 bd75 	b.w	8004cb0 <SPI_WIFI_ISR>
		default:
		{
			break;
		}
    }
}
 80041c6:	4770      	bx	lr
 80041c8:	20001014 	.word	0x20001014

080041cc <SPI3_IRQHandler>:


void SPI3_IRQHandler(void)
{
    HAL_SPI_IRQHandler(&hspi);
 80041cc:	4801      	ldr	r0, [pc, #4]	; (80041d4 <SPI3_IRQHandler+0x8>)
 80041ce:	f007 bd19 	b.w	800bc04 <HAL_SPI_IRQHandler>
 80041d2:	bf00      	nop
 80041d4:	200011e4 	.word	0x200011e4

080041d8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80041d8:	b508      	push	{r3, lr}
    while (1)
    {
        BSP_LED_Toggle(LED_GREEN);
 80041da:	2000      	movs	r0, #0
 80041dc:	f000 ff18 	bl	8005010 <BSP_LED_Toggle>
        HAL_Delay(200);
 80041e0:	20c8      	movs	r0, #200	; 0xc8
 80041e2:	f004 fc3d 	bl	8008a60 <HAL_Delay>
 80041e6:	e7f8      	b.n	80041da <Error_Handler+0x2>

080041e8 <main>:
int main(void) {
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	b098      	sub	sp, #96	; 0x60
		HAL_Init();
 80041ec:	f004 fc1e 	bl	8008a2c <HAL_Init>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 80041f0:	2614      	movs	r6, #20
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80041f2:	23b0      	movs	r3, #176	; 0xb0
    RCC_OscInitStruct.PLL.PLLM = 6;
 80041f4:	2206      	movs	r2, #6
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80041f6:	f04f 0c00 	mov.w	ip, #0
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041fa:	2501      	movs	r5, #1
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80041fc:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLN = 20;
 8004200:	e9cd 2613 	strd	r2, r6, [sp, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004204:	2302      	movs	r3, #2
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004206:	2207      	movs	r2, #7
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004208:	a807      	add	r0, sp, #28
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 800420a:	9607      	str	r6, [sp, #28]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800420c:	9509      	str	r5, [sp, #36]	; 0x24
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800420e:	950d      	str	r5, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004210:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004214:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004218:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800421a:	f005 fd5d 	bl	8009cd8 <HAL_RCC_OscConfig>
 800421e:	b108      	cbz	r0, 8004224 <main+0x3c>
        Error_Handler();
 8004220:	f7ff ffda 	bl	80041d8 <Error_Handler>
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004224:	240f      	movs	r4, #15
 8004226:	2303      	movs	r3, #3
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004228:	e9cd 0004 	strd	r0, r0, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800422c:	9006      	str	r0, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800422e:	2104      	movs	r1, #4
 8004230:	a802      	add	r0, sp, #8
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004232:	e9cd 4302 	strd	r4, r3, [sp, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004236:	f005 ff81 	bl	800a13c <HAL_RCC_ClockConfig>
 800423a:	4604      	mov	r4, r0
 800423c:	2800      	cmp	r0, #0
 800423e:	d1ef      	bne.n	8004220 <main+0x38>
    HAL_RCCEx_EnableMSIPLLMode();
 8004240:	f006 fb3e 	bl	800a8c0 <HAL_RCCEx_EnableMSIPLLMode>
	    Periph_Config();
 8004244:	f000 f89a 	bl	800437c <Periph_Config>
	    BSP_LED_Init(LED_GREEN);
 8004248:	4620      	mov	r0, r4
 800424a:	f000 feab 	bl	8004fa4 <BSP_LED_Init>
	    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800424e:	4620      	mov	r0, r4
 8004250:	4629      	mov	r1, r5
 8004252:	f000 fee7 	bl	8005024 <BSP_PB_Init>
	    hrng.Instance = RNG;
 8004256:	4840      	ldr	r0, [pc, #256]	; (8004358 <main+0x170>)
 8004258:	4b40      	ldr	r3, [pc, #256]	; (800435c <main+0x174>)
 800425a:	6003      	str	r3, [r0, #0]
	    if (HAL_RNG_Init(&hrng) != HAL_OK)  {
 800425c:	f006 fb38 	bl	800a8d0 <HAL_RNG_Init>
 8004260:	2800      	cmp	r0, #0
 8004262:	d1dd      	bne.n	8004220 <main+0x38>
    hrtc.Instance = RTC;
 8004264:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <main+0x178>)
 8004266:	4a3f      	ldr	r2, [pc, #252]	; (8004364 <main+0x17c>)
    hrtc.Init.SynchPrediv = 255;
 8004268:	217f      	movs	r1, #127	; 0x7f
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800426a:	e9c3 2000 	strd	r2, r0, [r3]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800426e:	e9c3 0004 	strd	r0, r0, [r3, #16]
    hrtc.Init.SynchPrediv = 255;
 8004272:	22ff      	movs	r2, #255	; 0xff
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004274:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004278:	4618      	mov	r0, r3
    hrtc.Init.SynchPrediv = 255;
 800427a:	e9c3 1202 	strd	r1, r2, [r3, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800427e:	f006 fb9a 	bl	800a9b6 <HAL_RTC_Init>
 8004282:	4604      	mov	r4, r0
 8004284:	2800      	cmp	r0, #0
 8004286:	d1cb      	bne.n	8004220 <main+0x38>
    console_uart.Instance = USART1;
 8004288:	4937      	ldr	r1, [pc, #220]	; (8004368 <main+0x180>)
    console_uart.Init.BaudRate = 115200;
 800428a:	4a38      	ldr	r2, [pc, #224]	; (800436c <main+0x184>)
    console_uart.Init.Parity = UART_PARITY_NONE;
 800428c:	6148      	str	r0, [r1, #20]
    console_uart.Init.BaudRate = 115200;
 800428e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004292:	e9c1 2301 	strd	r2, r3, [r1, #4]
    console_uart.Init.Mode = UART_MODE_TX_RX;
 8004296:	230c      	movs	r3, #12
    console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004298:	e9c1 3006 	strd	r3, r0, [r1, #24]
    console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800429c:	6288      	str	r0, [r1, #40]	; 0x28
    console_uart.Init.StopBits = UART_STOPBITS_1;
 800429e:	e9c1 0003 	strd	r0, r0, [r1, #12]
    console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042a2:	e9c1 0008 	strd	r0, r0, [r1, #32]
    BSP_COM_Init(COM1, &console_uart);
 80042a6:	3104      	adds	r1, #4
 80042a8:	f000 fefa 	bl	80050a0 <BSP_COM_Init>
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80042ac:	4632      	mov	r2, r6
 80042ae:	4621      	mov	r1, r4
 80042b0:	a807      	add	r0, sp, #28
 80042b2:	f01e f83c 	bl	802232e <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <main+0x188>)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 80042b8:	482e      	ldr	r0, [pc, #184]	; (8004374 <main+0x18c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042bc:	f042 0204 	orr.w	r2, r2, #4
 80042c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80042c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042c4:	f002 0204 	and.w	r2, r2, #4
 80042c8:	9200      	str	r2, [sp, #0]
 80042ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80042d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042d6:	f002 0201 	and.w	r2, r2, #1
 80042da:	9201      	str	r2, [sp, #4]
 80042dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e0:	f042 0202 	orr.w	r2, r2, #2
 80042e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80042e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	9302      	str	r3, [sp, #8]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 80042ee:	4622      	mov	r2, r4
 80042f0:	f240 213f 	movw	r1, #575	; 0x23f
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f4:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 80042f6:	f004 ff43 	bl	8009180 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 80042fa:	4622      	mov	r2, r4
 80042fc:	2130      	movs	r1, #48	; 0x30
 80042fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004302:	f004 ff3d 	bl	8009180 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_14, GPIO_PIN_RESET);
 8004306:	4622      	mov	r2, r4
 8004308:	f244 0104 	movw	r1, #16388	; 0x4004
 800430c:	481a      	ldr	r0, [pc, #104]	; (8004378 <main+0x190>)
 800430e:	f004 ff37 	bl	8009180 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8004312:	f240 233f 	movw	r3, #575	; 0x23f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004316:	a907      	add	r1, sp, #28
 8004318:	4816      	ldr	r0, [pc, #88]	; (8004374 <main+0x18c>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800431a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004322:	f004 fe4b 	bl	8008fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8004326:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004328:	a907      	add	r1, sp, #28
 800432a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800432e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004336:	f004 fe41 	bl	8008fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_14;
 800433a:	f244 0304 	movw	r3, #16388	; 0x4004
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433e:	a907      	add	r1, sp, #28
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <main+0x190>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004342:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004346:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434a:	f004 fe37 	bl	8008fbc <HAL_GPIO_Init>
	genericmqtt_client_XCube_sample_run();
 800434e:	f7ff fa3f 	bl	80037d0 <genericmqtt_client_XCube_sample_run>
}
 8004352:	4620      	mov	r0, r4
 8004354:	b018      	add	sp, #96	; 0x60
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	20001194 	.word	0x20001194
 800435c:	50060800 	.word	0x50060800
 8004360:	20001170 	.word	0x20001170
 8004364:	40002800 	.word	0x40002800
 8004368:	20001014 	.word	0x20001014
 800436c:	40013800 	.word	0x40013800
 8004370:	40021000 	.word	0x40021000
 8004374:	48000800 	.word	0x48000800
 8004378:	48000400 	.word	0x48000400

0800437c <Periph_Config>:
/**
  * Initializes the Global MSP.
  */

 void Periph_Config(void)
 {
 800437c:	b500      	push	{lr}
 800437e:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection  = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <Periph_Config+0x50>)
 8004382:	9302      	str	r3, [sp, #8]
                                       |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
                                       |RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection  = RCC_USART1CLKSOURCE_PCLK2;
 8004384:	2300      	movs	r3, #0
 8004386:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection  = RCC_USART3CLKSOURCE_PCLK1;
 8004388:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.I2c2ClockSelection    = RCC_I2C2CLKSOURCE_PCLK1;
 800438a:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.RngClockSelection     = RCC_RNGCLKSOURCE_MSI;
 800438c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8004390:	931f      	str	r3, [sp, #124]	; 0x7c

  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004392:	a802      	add	r0, sp, #8
  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;
 8004394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004398:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800439a:	f006 f8ab 	bl	800a4f4 <HAL_RCCEx_PeriphCLKConfig>
 800439e:	b108      	cbz	r0, 80043a4 <Periph_Config+0x28>
  {
    Error_Handler();
 80043a0:	f7ff ff1a 	bl	80041d8 <Error_Handler>
  }

   __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <Periph_Config+0x54>)
 80043a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	9301      	str	r3, [sp, #4]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80043b6:	f44f 7000 	mov.w	r0, #512	; 0x200
   __HAL_RCC_PWR_CLK_ENABLE();
 80043ba:	9b01      	ldr	r3, [sp, #4]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80043bc:	f005 fbae 	bl	8009b1c <HAL_PWREx_ControlVoltageScaling>
 80043c0:	b108      	cbz	r0, 80043c6 <Periph_Config+0x4a>
  {
    Error_Handler();
 80043c2:	f7ff ff09 	bl	80041d8 <Error_Handler>
  }
}
 80043c6:	b025      	add	sp, #148	; 0x94
 80043c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80043cc:	00060085 	.word	0x00060085
 80043d0:	40021000 	.word	0x40021000

080043d4 <HAL_RNG_MspInit>:


void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80043d4:	6802      	ldr	r2, [r0, #0]
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RNG_MspInit+0x28>)
 80043d8:	429a      	cmp	r2, r3
{
 80043da:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 80043dc:	d10c      	bne.n	80043f8 <HAL_RNG_MspInit+0x24>
  {
      /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80043de:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80043e2:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 80043e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	9b01      	ldr	r3, [sp, #4]
  }
}
 80043f8:	b002      	add	sp, #8
 80043fa:	4770      	bx	lr
 80043fc:	50060800 	.word	0x50060800

08004400 <HAL_RTC_MspInit>:
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004400:	6802      	ldr	r2, [r0, #0]
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RTC_MspInit+0x18>)
 8004404:	429a      	cmp	r2, r3
  {
    __HAL_RCC_RTC_ENABLE();
 8004406:	bf01      	itttt	eq
 8004408:	4a04      	ldreq	r2, [pc, #16]	; (800441c <HAL_RTC_MspInit+0x1c>)
 800440a:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 800440e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8004412:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
  }
}
 8004416:	4770      	bx	lr
 8004418:	40002800 	.word	0x40002800
 800441c:	40021000 	.word	0x40021000

08004420 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004420:	4770      	bx	lr

08004422 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004422:	e7fe      	b.n	8004422 <HardFault_Handler>

08004424 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004424:	e7fe      	b.n	8004424 <MemManage_Handler>

08004426 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004426:	e7fe      	b.n	8004426 <BusFault_Handler>

08004428 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004428:	e7fe      	b.n	8004428 <UsageFault_Handler>

0800442a <SVC_Handler>:
 800442a:	4770      	bx	lr

0800442c <DebugMon_Handler>:
 800442c:	4770      	bx	lr

0800442e <PendSV_Handler>:
 800442e:	4770      	bx	lr

08004430 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004430:	b508      	push	{r3, lr}
	HAL_IncTick();
 8004432:	f004 fb07 	bl	8008a44 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
}
 8004436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 800443a:	f004 bb9a 	b.w	8008b72 <HAL_SYSTICK_IRQHandler>

0800443e <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800443e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004442:	f004 bea7 	b.w	8009194 <HAL_GPIO_EXTI_IRQHandler>

08004446 <EXTI1_IRQHandler>:
}


void EXTI1_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004446:	2002      	movs	r0, #2
 8004448:	f004 bea4 	b.w	8009194 <HAL_GPIO_EXTI_IRQHandler>

0800444c <_I2CWrite>:
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);

/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800444c:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800444e:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004452:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800445c:	b293      	uxth	r3, r2
 800445e:	460a      	mov	r2, r1
 8004460:	4621      	mov	r1, r4
 8004462:	f005 f891 	bl	8009588 <HAL_I2C_Master_Transmit>
    
    return status;
}
 8004466:	b002      	add	sp, #8
 8004468:	bd10      	pop	{r4, pc}

0800446a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800446a:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800446c:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8004470:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800447a:	b293      	uxth	r3, r2
 800447c:	460a      	mov	r2, r1
 800447e:	f044 0101 	orr.w	r1, r4, #1
 8004482:	f005 f917 	bl	80096b4 <HAL_I2C_Master_Receive>
    
    return status;
}
 8004486:	b002      	add	sp, #8
 8004488:	bd10      	pop	{r4, pc}

0800448a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 800448a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800448c:	ab02      	add	r3, sp, #8
 800448e:	4615      	mov	r5, r2
 8004490:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004494:	2201      	movs	r2, #1
 8004496:	4619      	mov	r1, r3
{
 8004498:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800449a:	f7ff ffd7 	bl	800444c <_I2CWrite>
    
    if (status_int)
 800449e:	b928      	cbnz	r0, 80044ac <VL53L0X_RdByte+0x22>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 80044a0:	2201      	movs	r2, #1
 80044a2:	4629      	mov	r1, r5
 80044a4:	4620      	mov	r0, r4
 80044a6:	f7ff ffe0 	bl	800446a <_I2CRead>
    
    if (status_int != 0)
 80044aa:	b108      	cbz	r0, 80044b0 <VL53L0X_RdByte+0x26>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80044ac:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 80044b0:	b003      	add	sp, #12
 80044b2:	bd30      	pop	{r4, r5, pc}

080044b4 <VL53L0X_WriteMulti>:
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80044b4:	2b3f      	cmp	r3, #63	; 0x3f
{
 80044b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b8:	460f      	mov	r7, r1
 80044ba:	4606      	mov	r6, r0
 80044bc:	4611      	mov	r1, r2
 80044be:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 80044c0:	d811      	bhi.n	80044e6 <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 80044c2:	4d0a      	ldr	r5, [pc, #40]	; (80044ec <VL53L0X_WriteMulti+0x38>)
 80044c4:	4628      	mov	r0, r5
    memcpy(&_I2CBuffer[1], pdata, count);
 80044c6:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 80044c8:	f800 7b01 	strb.w	r7, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 80044cc:	f01d ff0b 	bl	80222e6 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80044d0:	1c62      	adds	r2, r4, #1
 80044d2:	4629      	mov	r1, r5
 80044d4:	4630      	mov	r0, r6
 80044d6:	f7ff ffb9 	bl	800444c <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80044da:	2800      	cmp	r0, #0
 80044dc:	bf0c      	ite	eq
 80044de:	2000      	moveq	r0, #0
 80044e0:	f06f 0013 	mvnne.w	r0, #19
    }
    
    return Status;
}
 80044e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 80044e6:	f06f 0003 	mvn.w	r0, #3
 80044ea:	e7fb      	b.n	80044e4 <VL53L0X_WriteMulti+0x30>
 80044ec:	200011a4 	.word	0x200011a4

080044f0 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 80044f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f2:	ac02      	add	r4, sp, #8
 80044f4:	4616      	mov	r6, r2
 80044f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 80044fa:	2201      	movs	r2, #1
 80044fc:	4621      	mov	r1, r4
{
 80044fe:	4605      	mov	r5, r0
 8004500:	461f      	mov	r7, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8004502:	f7ff ffa3 	bl	800444c <_I2CWrite>
    
    if (status_int != 0) {
 8004506:	b928      	cbnz	r0, 8004514 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8004508:	463a      	mov	r2, r7
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	f7ff ffac 	bl	800446a <_I2CRead>
    
    if (status_int != 0) {
 8004512:	b108      	cbz	r0, 8004518 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004514:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8004518:	b003      	add	sp, #12
 800451a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800451c <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800451c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800451e:	ab02      	add	r3, sp, #8
 8004520:	4615      	mov	r5, r2
 8004522:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004526:	2201      	movs	r2, #1
 8004528:	4619      	mov	r1, r3
{
 800452a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800452c:	f7ff ff8e 	bl	800444c <_I2CWrite>

    if (status_int)
 8004530:	b118      	cbz	r0, 800453a <VL53L0X_RdWord+0x1e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004532:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 8004536:	b002      	add	sp, #8
 8004538:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800453a:	4c07      	ldr	r4, [pc, #28]	; (8004558 <VL53L0X_RdWord+0x3c>)
 800453c:	2202      	movs	r2, #2
 800453e:	4621      	mov	r1, r4
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff ff92 	bl	800446a <_I2CRead>
    if (status_int != 0)
 8004546:	2800      	cmp	r0, #0
 8004548:	d1f3      	bne.n	8004532 <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800454a:	7822      	ldrb	r2, [r4, #0]
 800454c:	7863      	ldrb	r3, [r4, #1]
 800454e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004552:	802b      	strh	r3, [r5, #0]
 8004554:	e7ef      	b.n	8004536 <VL53L0X_RdWord+0x1a>
 8004556:	bf00      	nop
 8004558:	200011a4 	.word	0x200011a4

0800455c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800455c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800455e:	ab02      	add	r3, sp, #8
 8004560:	4615      	mov	r5, r2
 8004562:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004566:	2201      	movs	r2, #1
 8004568:	4619      	mov	r1, r3
{
 800456a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800456c:	f7ff ff6e 	bl	800444c <_I2CWrite>
    
    if (status_int != 0) {
 8004570:	b118      	cbz	r0, 800457a <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004572:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 8004576:	b002      	add	sp, #8
 8004578:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800457a:	4c0a      	ldr	r4, [pc, #40]	; (80045a4 <VL53L0X_RdDWord+0x48>)
 800457c:	2204      	movs	r2, #4
 800457e:	4621      	mov	r1, r4
 8004580:	4630      	mov	r0, r6
 8004582:	f7ff ff72 	bl	800446a <_I2CRead>
    if (status_int != 0) {
 8004586:	2800      	cmp	r0, #0
 8004588:	d1f3      	bne.n	8004572 <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800458a:	7863      	ldrb	r3, [r4, #1]
 800458c:	7822      	ldrb	r2, [r4, #0]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8004594:	78e2      	ldrb	r2, [r4, #3]
 8004596:	4413      	add	r3, r2
 8004598:	78a2      	ldrb	r2, [r4, #2]
 800459a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	e7e9      	b.n	8004576 <VL53L0X_RdDWord+0x1a>
 80045a2:	bf00      	nop
 80045a4:	200011a4 	.word	0x200011a4

080045a8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 80045a8:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <VL53L0X_WrByte+0x1c>)
 80045ac:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 80045ae:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80045b0:	4619      	mov	r1, r3
 80045b2:	2202      	movs	r2, #2
 80045b4:	f7ff ff4a 	bl	800444c <_I2CWrite>
    
    if (status_int != 0) {
 80045b8:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 80045ba:	bf14      	ite	ne
 80045bc:	f06f 0013 	mvnne.w	r0, #19
 80045c0:	2000      	moveq	r0, #0
 80045c2:	bd08      	pop	{r3, pc}
 80045c4:	200011a4 	.word	0x200011a4

080045c8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 80045c8:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <VL53L0X_WrWord+0x20>)
 80045cc:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 80045ce:	0a11      	lsrs	r1, r2, #8
 80045d0:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80045d2:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80045d4:	4619      	mov	r1, r3
 80045d6:	2203      	movs	r2, #3
 80045d8:	f7ff ff38 	bl	800444c <_I2CWrite>
    
    if (status_int != 0) {
 80045dc:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 80045de:	bf14      	ite	ne
 80045e0:	f06f 0013 	mvnne.w	r0, #19
 80045e4:	2000      	moveq	r0, #0
 80045e6:	bd08      	pop	{r3, pc}
 80045e8:	200011a4 	.word	0x200011a4

080045ec <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 80045ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ee:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80045f0:	f10d 0207 	add.w	r2, sp, #7
{
 80045f4:	4606      	mov	r6, r0
 80045f6:	460f      	mov	r7, r1
 80045f8:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 80045fa:	f7ff ff46 	bl	800448a <VL53L0X_RdByte>
    
    if (Status) {
 80045fe:	b948      	cbnz	r0, 8004614 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8004600:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004604:	402a      	ands	r2, r5
 8004606:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8004608:	4639      	mov	r1, r7
 800460a:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 800460c:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004610:	f7ff ffca 	bl	80045a8 <VL53L0X_WrByte>
done:
    return Status;
}
 8004614:	b003      	add	sp, #12
 8004616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004618 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 8004618:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    /* do nothing */
    VL53L0X_OsDelay();
 800461a:	2002      	movs	r0, #2
 800461c:	f004 fa20 	bl	8008a60 <HAL_Delay>
    return status;
}
 8004620:	2000      	movs	r0, #0
 8004622:	bd08      	pop	{r3, pc}

08004624 <SetupSingleShot.part.0>:
}

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
 8004624:	b513      	push	{r0, r1, r4, lr}
 8004626:	4604      	mov	r4, r0
  uint8_t preRangeVcselPeriod = 14;
  uint8_t finalRangeVcselPeriod = 10;
                          
  if (pDev->Present)
  {
    status = VL53L0X_StaticInit(pDev);
 8004628:	f001 fe18 	bl	800625c <VL53L0X_StaticInit>
    if (status)
 800462c:	b110      	cbz	r0, 8004634 <SetupSingleShot.part.0+0x10>
    {
      printf("VL53L0X_StaticInit failed\n");
 800462e:	4833      	ldr	r0, [pc, #204]	; (80046fc <SetupSingleShot.part.0+0xd8>)
 8004630:	f01e fff4 	bl	802361c <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8004634:	f10d 0202 	add.w	r2, sp, #2
 8004638:	f10d 0101 	add.w	r1, sp, #1
 800463c:	4620      	mov	r0, r4
 800463e:	f001 fbdf 	bl	8005e00 <VL53L0X_PerformRefCalibration>
    if (status)
 8004642:	b110      	cbz	r0, 800464a <SetupSingleShot.part.0+0x26>
    {
      printf("VL53L0X_PerformRefCalibration failed\n");
 8004644:	482e      	ldr	r0, [pc, #184]	; (8004700 <SetupSingleShot.part.0+0xdc>)
 8004646:	f01e ffe9 	bl	802361c <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800464a:	f10d 0203 	add.w	r2, sp, #3
 800464e:	a901      	add	r1, sp, #4
 8004650:	4620      	mov	r0, r4
 8004652:	f001 ff08 	bl	8006466 <VL53L0X_PerformRefSpadManagement>
    if (status)
 8004656:	b110      	cbz	r0, 800465e <SetupSingleShot.part.0+0x3a>
    {
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8004658:	482a      	ldr	r0, [pc, #168]	; (8004704 <SetupSingleShot.part.0+0xe0>)
 800465a:	f01e ffdf 	bl	802361c <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 800465e:	2100      	movs	r1, #0
 8004660:	4620      	mov	r0, r4
 8004662:	f001 f977 	bl	8005954 <VL53L0X_SetDeviceMode>
    if (status)
 8004666:	b110      	cbz	r0, 800466e <SetupSingleShot.part.0+0x4a>
    {
      printf("VL53L0X_SetDeviceMode failed\n");
 8004668:	4827      	ldr	r0, [pc, #156]	; (8004708 <SetupSingleShot.part.0+0xe4>)
 800466a:	f01e ffd7 	bl	802361c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 800466e:	2201      	movs	r2, #1
 8004670:	2100      	movs	r1, #0
 8004672:	4620      	mov	r0, r4
 8004674:	f001 fa4a 	bl	8005b0c <VL53L0X_SetLimitCheckEnable>
    if (status)
 8004678:	b110      	cbz	r0, 8004680 <SetupSingleShot.part.0+0x5c>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800467a:	4824      	ldr	r0, [pc, #144]	; (800470c <SetupSingleShot.part.0+0xe8>)
 800467c:	f01e ffce 	bl	802361c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 8004680:	2201      	movs	r2, #1
 8004682:	4611      	mov	r1, r2
 8004684:	4620      	mov	r0, r4
 8004686:	f001 fa41 	bl	8005b0c <VL53L0X_SetLimitCheckEnable>
    if (status)
 800468a:	b110      	cbz	r0, 8004692 <SetupSingleShot.part.0+0x6e>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800468c:	481f      	ldr	r0, [pc, #124]	; (800470c <SetupSingleShot.part.0+0xe8>)
 800468e:	f01e ffc5 	bl	802361c <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8004692:	f641 1299 	movw	r2, #6553	; 0x1999
 8004696:	2101      	movs	r1, #1
 8004698:	4620      	mov	r0, r4
 800469a:	f001 fa84 	bl	8005ba6 <VL53L0X_SetLimitCheckValue>
    
    if (status)
 800469e:	b110      	cbz	r0, 80046a6 <SetupSingleShot.part.0+0x82>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80046a0:	481b      	ldr	r0, [pc, #108]	; (8004710 <SetupSingleShot.part.0+0xec>)
 80046a2:	f01e ffbb 	bl	802361c <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80046a6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80046aa:	2100      	movs	r1, #0
 80046ac:	4620      	mov	r0, r4
 80046ae:	f001 fa7a 	bl	8005ba6 <VL53L0X_SetLimitCheckValue>
    if (status)
 80046b2:	b110      	cbz	r0, 80046ba <SetupSingleShot.part.0+0x96>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80046b4:	4816      	ldr	r0, [pc, #88]	; (8004710 <SetupSingleShot.part.0+0xec>)
 80046b6:	f01e ffb1 	bl	802361c <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 80046ba:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80046be:	4620      	mov	r0, r4
 80046c0:	f001 f964 	bl	800598c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if (status)
 80046c4:	b110      	cbz	r0, 80046cc <SetupSingleShot.part.0+0xa8>
    {
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80046c6:	4813      	ldr	r0, [pc, #76]	; (8004714 <SetupSingleShot.part.0+0xf0>)
 80046c8:	f01e ffa8 	bl	802361c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80046cc:	2212      	movs	r2, #18
 80046ce:	2100      	movs	r1, #0
 80046d0:	4620      	mov	r0, r4
 80046d2:	f001 f95d 	bl	8005990 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 80046d6:	b110      	cbz	r0, 80046de <SetupSingleShot.part.0+0xba>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80046d8:	480f      	ldr	r0, [pc, #60]	; (8004718 <SetupSingleShot.part.0+0xf4>)
 80046da:	f01e ff9f 	bl	802361c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80046de:	220e      	movs	r2, #14
 80046e0:	2101      	movs	r1, #1
 80046e2:	4620      	mov	r0, r4
 80046e4:	f001 f954 	bl	8005990 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 80046e8:	b110      	cbz	r0, 80046f0 <SetupSingleShot.part.0+0xcc>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80046ea:	480b      	ldr	r0, [pc, #44]	; (8004718 <SetupSingleShot.part.0+0xf4>)
 80046ec:	f01e ff96 	bl	802361c <puts>
    }
    
    pDev->LeakyFirst = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  }
}
 80046f6:	b002      	add	sp, #8
 80046f8:	bd10      	pop	{r4, pc}
 80046fa:	bf00      	nop
 80046fc:	0802eff4 	.word	0x0802eff4
 8004700:	0802f00e 	.word	0x0802f00e
 8004704:	0802f033 	.word	0x0802f033
 8004708:	0802f05b 	.word	0x0802f05b
 800470c:	0802f078 	.word	0x0802f078
 8004710:	0802f09b 	.word	0x0802f09b
 8004714:	0802f0bd 	.word	0x0802f0bd
 8004718:	0802f0f3 	.word	0x0802f0f3

0800471c <VL53L0X_PROXIMITY_GetDistance>:
{
 800471c:	b500      	push	{lr}
 800471e:	b089      	sub	sp, #36	; 0x24
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8004720:	a901      	add	r1, sp, #4
 8004722:	4804      	ldr	r0, [pc, #16]	; (8004734 <VL53L0X_PROXIMITY_GetDistance+0x18>)
 8004724:	f001 fcec 	bl	8006100 <VL53L0X_PerformSingleRangingMeasurement>
}
 8004728:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800472c:	b009      	add	sp, #36	; 0x24
 800472e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004732:	bf00      	nop
 8004734:	20000064 	.word	0x20000064

08004738 <VL53L0X_PROXIMITY_MspInit>:
{
 8004738:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800473a:	4d0c      	ldr	r5, [pc, #48]	; (800476c <VL53L0X_PROXIMITY_MspInit+0x34>)
{
 800473c:	b086      	sub	sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800473e:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004740:	2401      	movs	r4, #1
 8004742:	2640      	movs	r6, #64	; 0x40
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004744:	a901      	add	r1, sp, #4
 8004746:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004748:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800474a:	e9cd 6401 	strd	r6, r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800474e:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004750:	f004 fc34 	bl	8008fbc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8004754:	4622      	mov	r2, r4
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	f004 fd11 	bl	8009180 <HAL_GPIO_WritePin>
  HAL_Delay(1000);  
 800475e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004762:	f004 f97d 	bl	8008a60 <HAL_Delay>
}
 8004766:	b006      	add	sp, #24
 8004768:	bd70      	pop	{r4, r5, r6, pc}
 800476a:	bf00      	nop
 800476c:	48000800 	.word	0x48000800

08004770 <VL53L0X_PROXIMITY_Init>:
{
 8004770:	b510      	push	{r4, lr}
 8004772:	b09a      	sub	sp, #104	; 0x68
  uint16_t vl53l0x_id = 0; 
 8004774:	2400      	movs	r4, #0
 8004776:	f8ad 4002 	strh.w	r4, [sp, #2]
  SENSOR_IO_Init();
 800477a:	f000 fcd5 	bl	8005128 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 800477e:	f7ff ffdb 	bl	8004738 <VL53L0X_PROXIMITY_MspInit>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004782:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8004784:	4c14      	ldr	r4, [pc, #80]	; (80047d8 <VL53L0X_PROXIMITY_Init+0x68>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004786:	2263      	movs	r2, #99	; 0x63
 8004788:	a801      	add	r0, sp, #4
 800478a:	f01d fdd0 	bl	802232e <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800478e:	a901      	add	r1, sp, #4
 8004790:	4620      	mov	r0, r4
 8004792:	f001 f8dd 	bl	8005950 <VL53L0X_GetDeviceInfo>
 8004796:	b9e0      	cbnz	r0, 80047d2 <VL53L0X_PROXIMITY_Init+0x62>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8004798:	f10d 0202 	add.w	r2, sp, #2
 800479c:	21c0      	movs	r1, #192	; 0xc0
 800479e:	4620      	mov	r0, r4
 80047a0:	f7ff febc 	bl	800451c <VL53L0X_RdWord>
 80047a4:	b988      	cbnz	r0, 80047ca <VL53L0X_PROXIMITY_Init+0x5a>
      if (vl53l0x_id == VL53L0X_ID)
 80047a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80047aa:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d109      	bne.n	80047c6 <VL53L0X_PROXIMITY_Init+0x56>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 80047b2:	4620      	mov	r0, r4
 80047b4:	f001 faaa 	bl	8005d0c <VL53L0X_DataInit>
 80047b8:	b928      	cbnz	r0, 80047c6 <VL53L0X_PROXIMITY_Init+0x56>
          Dev.Present = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	4620      	mov	r0, r4
 80047be:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
 80047c2:	f7ff ff2f 	bl	8004624 <SetupSingleShot.part.0>
}
 80047c6:	b01a      	add	sp, #104	; 0x68
 80047c8:	bd10      	pop	{r4, pc}
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 80047ca:	4804      	ldr	r0, [pc, #16]	; (80047dc <VL53L0X_PROXIMITY_Init+0x6c>)
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80047cc:	f01e ff26 	bl	802361c <puts>
}
 80047d0:	e7f9      	b.n	80047c6 <VL53L0X_PROXIMITY_Init+0x56>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80047d2:	4803      	ldr	r0, [pc, #12]	; (80047e0 <VL53L0X_PROXIMITY_Init+0x70>)
 80047d4:	e7fa      	b.n	80047cc <VL53L0X_PROXIMITY_Init+0x5c>
 80047d6:	bf00      	nop
 80047d8:	20000064 	.word	0x20000064
 80047dc:	0802f116 	.word	0x0802f116
 80047e0:	0802f143 	.word	0x0802f143

080047e4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80047e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t       loop_per_us;
  static  uint32_t cycle_per_loop=0;

  // calibration happen on first call for a duration of 1 ms * nbcycle per loop 
  // 10 cycle for STM32L4
  if (cycle_per_loop == 0 ) 
 80047e6:	4c16      	ldr	r4, [pc, #88]	; (8004840 <SPI_WIFI_DelayUs+0x5c>)
 80047e8:	4f16      	ldr	r7, [pc, #88]	; (8004844 <SPI_WIFI_DelayUs+0x60>)
 80047ea:	6823      	ldr	r3, [r4, #0]
{
 80047ec:	4606      	mov	r6, r0
  if (cycle_per_loop == 0 ) 
 80047ee:	b98b      	cbnz	r3, 8004814 <SPI_WIFI_DelayUs+0x30>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047f6:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t   t; 
     ct=cycle_per_ms;
 80047fa:	9301      	str	r3, [sp, #4]
     t=HAL_GetTick();
 80047fc:	f004 f92a 	bl	8008a54 <HAL_GetTick>
 8004800:	4605      	mov	r5, r0
     while(ct) ct--;
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	b99b      	cbnz	r3, 800482e <SPI_WIFI_DelayUs+0x4a>
     cycle_per_loop=HAL_GetTick()-t;  
 8004806:	f004 f925 	bl	8008a54 <HAL_GetTick>
     if (cycle_per_loop==0) cycle_per_loop=1;
 800480a:	1b40      	subs	r0, r0, r5
 800480c:	bf0a      	itet	eq
 800480e:	2301      	moveq	r3, #1
     cycle_per_loop=HAL_GetTick()-t;  
 8004810:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop==0) cycle_per_loop=1;
 8004812:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <SPI_WIFI_DelayUs+0x64>)
 8004816:	6838      	ldr	r0, [r7, #0]
 8004818:	fbb0 f0f3 	udiv	r0, r0, r3
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 8004822:	4370      	muls	r0, r6
 8004824:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 8004826:	9b01      	ldr	r3, [sp, #4]
 8004828:	b92b      	cbnz	r3, 8004836 <SPI_WIFI_DelayUs+0x52>
  return;
}
 800482a:	b003      	add	sp, #12
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 800482e:	9b01      	ldr	r3, [sp, #4]
 8004830:	3b01      	subs	r3, #1
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	e7e5      	b.n	8004802 <SPI_WIFI_DelayUs+0x1e>
  while(ct) ct--;
 8004836:	9b01      	ldr	r3, [sp, #4]
 8004838:	3b01      	subs	r3, #1
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	e7f3      	b.n	8004826 <SPI_WIFI_DelayUs+0x42>
 800483e:	bf00      	nop
 8004840:	20001090 	.word	0x20001090
 8004844:	20000590 	.word	0x20000590
 8004848:	000f4240 	.word	0x000f4240

0800484c <wait_spi_tx_event>:
{
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4606      	mov	r6, r0
  int tickstart = HAL_GetTick();
 8004850:	f004 f900 	bl	8008a54 <HAL_GetTick>
  while (spi_tx_event==1)
 8004854:	4c07      	ldr	r4, [pc, #28]	; (8004874 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 8004856:	4605      	mov	r5, r0
  while (spi_tx_event==1)
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d001      	beq.n	8004862 <wait_spi_tx_event+0x16>
  return 0; 
 800485e:	2000      	movs	r0, #0
}
 8004860:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 8004862:	f004 f8f7 	bl	8008a54 <HAL_GetTick>
 8004866:	1b40      	subs	r0, r0, r5
 8004868:	42b0      	cmp	r0, r6
 800486a:	d9f5      	bls.n	8004858 <wait_spi_tx_event+0xc>
      return -1;
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	e7f6      	b.n	8004860 <wait_spi_tx_event+0x14>
 8004872:	bf00      	nop
 8004874:	20001090 	.word	0x20001090

08004878 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8004878:	4b44      	ldr	r3, [pc, #272]	; (800498c <SPI_WIFI_MspInit+0x114>)
{
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 800487e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 8004880:	4e43      	ldr	r6, [pc, #268]	; (8004990 <SPI_WIFI_MspInit+0x118>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004882:	4f44      	ldr	r7, [pc, #272]	; (8004994 <SPI_WIFI_MspInit+0x11c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8004884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004888:	659a      	str	r2, [r3, #88]	; 0x58
 800488a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 800488c:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_SPI3_CLK_ENABLE();
 800488e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004892:	9201      	str	r2, [sp, #4]
 8004894:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004898:	f042 0202 	orr.w	r2, r2, #2
 800489c:	64da      	str	r2, [r3, #76]	; 0x4c
 800489e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048a0:	f002 0202 	and.w	r2, r2, #2
 80048a4:	9202      	str	r2, [sp, #8]
 80048a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048aa:	f042 0204 	orr.w	r2, r2, #4
 80048ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80048b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048b2:	f002 0204 	and.w	r2, r2, #4
 80048b6:	9203      	str	r2, [sp, #12]
 80048b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80048ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048bc:	f042 0210 	orr.w	r2, r2, #16
 80048c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80048c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c4:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80048c8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80048ca:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80048cc:	4630      	mov	r0, r6
 80048ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80048d2:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 80048d4:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80048d6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80048d8:	f004 fc52 	bl	8009180 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80048dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80048e0:	a905      	add	r1, sp, #20
 80048e2:	4630      	mov	r0, r6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80048e4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80048e8:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80048ec:	f004 fb66 	bl	8008fbc <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80048f0:	4b29      	ldr	r3, [pc, #164]	; (8004998 <SPI_WIFI_MspInit+0x120>)
 80048f2:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80048f4:	a905      	add	r1, sp, #20
 80048f6:	4638      	mov	r0, r7
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80048f8:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80048fc:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004900:	f004 fb5c 	bl	8008fbc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8004904:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004908:	a905      	add	r1, sp, #20
 800490a:	4638      	mov	r0, r7
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800490c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004910:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_Init.Alternate = 0;
 8004914:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004916:	f004 fb51 	bl	8008fbc <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 800491a:	4622      	mov	r2, r4
 800491c:	4621      	mov	r1, r4
 800491e:	4638      	mov	r0, r7
 8004920:	f004 fc2e 	bl	8009180 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004924:	a905      	add	r1, sp, #20
 8004926:	4638      	mov	r0, r7
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004928:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800492c:	f04f 0806 	mov.w	r8, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004930:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004934:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004938:	f004 fb40 	bl	8008fbc <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800493c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004940:	a905      	add	r1, sp, #20
 8004942:	4638      	mov	r0, r7
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004944:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004948:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800494c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004950:	f004 fb34 	bl	8008fbc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8004954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004958:	a905      	add	r1, sp, #20
 800495a:	4638      	mov	r0, r7
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800495c:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004960:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004964:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004968:	f004 fb28 	bl	8008fbc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 800496c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004970:	a905      	add	r1, sp, #20
 8004972:	4638      	mov	r0, r7
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004974:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004978:	e9cd 4407 	strd	r4, r4, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800497c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004980:	f004 fb1c 	bl	8008fbc <HAL_GPIO_Init>
}
 8004984:	b00a      	add	sp, #40	; 0x28
 8004986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	48000400 	.word	0x48000400
 8004994:	48001000 	.word	0x48001000
 8004998:	10110000 	.word	0x10110000

0800499c <SPI_WIFI_ResetModule>:
{
 800499c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 800499e:	f004 f859 	bl	8008a54 <HAL_GetTick>
  WIFI_RESET_MODULE();
 80049a2:	2200      	movs	r2, #0
 80049a4:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 80049a8:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 80049aa:	482e      	ldr	r0, [pc, #184]	; (8004a64 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 80049ac:	4e2e      	ldr	r6, [pc, #184]	; (8004a68 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 80049ae:	f004 fbe7 	bl	8009180 <HAL_GPIO_WritePin>
 80049b2:	200a      	movs	r0, #10
 80049b4:	f004 f854 	bl	8008a60 <HAL_Delay>
 80049b8:	2201      	movs	r2, #1
 80049ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049be:	4829      	ldr	r0, [pc, #164]	; (8004a64 <SPI_WIFI_ResetModule+0xc8>)
 80049c0:	f004 fbde 	bl	8009180 <HAL_GPIO_WritePin>
 80049c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049c8:	f004 f84a 	bl	8008a60 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80049cc:	2200      	movs	r2, #0
 80049ce:	2101      	movs	r1, #1
 80049d0:	4824      	ldr	r0, [pc, #144]	; (8004a64 <SPI_WIFI_ResetModule+0xc8>)
 80049d2:	f004 fbd5 	bl	8009180 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80049d6:	200f      	movs	r0, #15
 80049d8:	f7ff ff04 	bl	80047e4 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 80049dc:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 80049de:	2102      	movs	r1, #2
 80049e0:	4820      	ldr	r0, [pc, #128]	; (8004a64 <SPI_WIFI_ResetModule+0xc8>)
 80049e2:	f004 fbc7 	bl	8009174 <HAL_GPIO_ReadPin>
 80049e6:	2801      	cmp	r0, #1
 80049e8:	4602      	mov	r2, r0
 80049ea:	d020      	beq.n	8004a2e <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS(); 
 80049ec:	2201      	movs	r2, #1
 80049ee:	4611      	mov	r1, r2
 80049f0:	481c      	ldr	r0, [pc, #112]	; (8004a64 <SPI_WIFI_ResetModule+0xc8>)
 80049f2:	f004 fbc5 	bl	8009180 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80049f6:	f89d 3000 	ldrb.w	r3, [sp]
 80049fa:	2b15      	cmp	r3, #21
 80049fc:	d12e      	bne.n	8004a5c <SPI_WIFI_ResetModule+0xc0>
 80049fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004a02:	2b15      	cmp	r3, #21
 8004a04:	d12a      	bne.n	8004a5c <SPI_WIFI_ResetModule+0xc0>
 8004a06:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004a0a:	2b0d      	cmp	r3, #13
 8004a0c:	d126      	bne.n	8004a5c <SPI_WIFI_ResetModule+0xc0>
 8004a0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004a12:	2b0a      	cmp	r3, #10
 8004a14:	d122      	bne.n	8004a5c <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8004a16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a1c:	d11e      	bne.n	8004a5c <SPI_WIFI_ResetModule+0xc0>
 8004a1e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004a22:	3820      	subs	r0, #32
 8004a24:	bf18      	it	ne
 8004a26:	f04f 30ff 	movne.w	r0, #4294967295
}
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8004a2e:	eb0d 0104 	add.w	r1, sp, r4
 8004a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a36:	4630      	mov	r0, r6
 8004a38:	f006 fc4d 	bl	800b2d6 <HAL_SPI_Receive>
 8004a3c:	4607      	mov	r7, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004a3e:	f004 f809 	bl	8008a54 <HAL_GetTick>
 8004a42:	1b40      	subs	r0, r0, r5
    count += 2;
 8004a44:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004a46:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8004a4a:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004a4c:	d201      	bcs.n	8004a52 <SPI_WIFI_ResetModule+0xb6>
 8004a4e:	2f00      	cmp	r7, #0
 8004a50:	d0c5      	beq.n	80049de <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS(); 
 8004a52:	2201      	movs	r2, #1
 8004a54:	4611      	mov	r1, r2
 8004a56:	4803      	ldr	r0, [pc, #12]	; (8004a64 <SPI_WIFI_ResetModule+0xc8>)
 8004a58:	f004 fb92 	bl	8009180 <HAL_GPIO_WritePin>
    return -1;
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e7e3      	b.n	8004a2a <SPI_WIFI_ResetModule+0x8e>
 8004a62:	bf00      	nop
 8004a64:	48001000 	.word	0x48001000
 8004a68:	200011e4 	.word	0x200011e4

08004a6c <SPI_WIFI_Init>:
{
 8004a6c:	b538      	push	{r3, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8004a6e:	4605      	mov	r5, r0
 8004a70:	bb78      	cbnz	r0, 8004ad2 <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8004a72:	4c1b      	ldr	r4, [pc, #108]	; (8004ae0 <SPI_WIFI_Init+0x74>)
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <SPI_WIFI_Init+0x78>)
 8004a76:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fefd 	bl	8004878 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8004a7e:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8004a82:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8004a86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004a8a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a92:	2310      	movs	r3, #16
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004a94:	4620      	mov	r0, r4
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004a96:	6165      	str	r5, [r4, #20]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004a98:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8004a9c:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 8004aa0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004aa4:	f006 f9ef 	bl	800ae86 <HAL_SPI_Init>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	b9b0      	cbnz	r0, 8004ada <SPI_WIFI_Init+0x6e>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8004aac:	4602      	mov	r2, r0
 8004aae:	210f      	movs	r1, #15
 8004ab0:	2007      	movs	r0, #7
 8004ab2:	f003 fff5 	bl	8008aa0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8004ab6:	2007      	movs	r0, #7
 8004ab8:	f004 f826 	bl	8008b08 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 1, 0);
 8004abc:	4622      	mov	r2, r4
 8004abe:	2101      	movs	r1, #1
 8004ac0:	2033      	movs	r0, #51	; 0x33
 8004ac2:	f003 ffed 	bl	8008aa0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8004ac6:	2033      	movs	r0, #51	; 0x33
 8004ac8:	f004 f81e 	bl	8008b08 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8004acc:	200a      	movs	r0, #10
 8004ace:	f7ff fe89 	bl	80047e4 <SPI_WIFI_DelayUs>
}
 8004ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8004ad6:	f7ff bf61 	b.w	800499c <SPI_WIFI_ResetModule>
}
 8004ada:	f04f 30ff 	mov.w	r0, #4294967295
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	200011e4 	.word	0x200011e4
 8004ae4:	40003c00 	.word	0x40003c00

08004ae8 <SPI_WIFI_DeInit>:
{
 8004ae8:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8004aea:	4802      	ldr	r0, [pc, #8]	; (8004af4 <SPI_WIFI_DeInit+0xc>)
 8004aec:	f006 fa2a 	bl	800af44 <HAL_SPI_DeInit>
}
 8004af0:	2000      	movs	r0, #0
 8004af2:	bd08      	pop	{r3, pc}
 8004af4:	200011e4 	.word	0x200011e4

08004af8 <SPI_WIFI_ReceiveData>:
{
 8004af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS(); 
 8004afe:	2201      	movs	r2, #1
{
 8004b00:	4606      	mov	r6, r0
 8004b02:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS(); 
 8004b04:	4834      	ldr	r0, [pc, #208]	; (8004bd8 <SPI_WIFI_ReceiveData+0xe0>)
  while (cmddata_rdy_rising_event==1)
 8004b06:	4c35      	ldr	r4, [pc, #212]	; (8004bdc <SPI_WIFI_ReceiveData+0xe4>)
  WIFI_DISABLE_NSS(); 
 8004b08:	4611      	mov	r1, r2
 8004b0a:	f004 fb39 	bl	8009180 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8004b0e:	2003      	movs	r0, #3
 8004b10:	f7ff fe68 	bl	80047e4 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8004b14:	f003 ff9e 	bl	8008a54 <HAL_GetTick>
 8004b18:	46a1      	mov	r9, r4
 8004b1a:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 8004b1c:	68a3      	ldr	r3, [r4, #8]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d019      	beq.n	8004b56 <SPI_WIFI_ReceiveData+0x5e>
  WIFI_ENABLE_NSS(); 
 8004b22:	2200      	movs	r2, #0
 8004b24:	2101      	movs	r1, #1
 8004b26:	482c      	ldr	r0, [pc, #176]	; (8004bd8 <SPI_WIFI_ReceiveData+0xe0>)
  while (WIFI_IS_CMDDATA_READY())
 8004b28:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004bd8 <SPI_WIFI_ReceiveData+0xe0>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004b2c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8004be0 <SPI_WIFI_ReceiveData+0xe8>
  WIFI_ENABLE_NSS(); 
 8004b30:	f004 fb26 	bl	8009180 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004b34:	200f      	movs	r0, #15
 8004b36:	f7ff fe55 	bl	80047e4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8004b3a:	2400      	movs	r4, #0
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4658      	mov	r0, fp
 8004b40:	f004 fb18 	bl	8009174 <HAL_GPIO_ReadPin>
 8004b44:	2801      	cmp	r0, #1
 8004b46:	b225      	sxth	r5, r4
 8004b48:	d00d      	beq.n	8004b66 <SPI_WIFI_ReceiveData+0x6e>
  WIFI_DISABLE_NSS(); 
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4822      	ldr	r0, [pc, #136]	; (8004bd8 <SPI_WIFI_ReceiveData+0xe0>)
 8004b50:	f004 fb16 	bl	8009180 <HAL_GPIO_WritePin>
  return length;
 8004b54:	e01b      	b.n	8004b8e <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004b56:	f003 ff7d 	bl	8008a54 <HAL_GetTick>
 8004b5a:	1b40      	subs	r0, r0, r5
 8004b5c:	4580      	cmp	r8, r0
 8004b5e:	d2dd      	bcs.n	8004b1c <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8004b60:	f06f 0502 	mvn.w	r5, #2
 8004b64:	e013      	b.n	8004b8e <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 8004b66:	42a7      	cmp	r7, r4
 8004b68:	dc01      	bgt.n	8004b6e <SPI_WIFI_ReceiveData+0x76>
 8004b6a:	2f00      	cmp	r7, #0
 8004b6c:	d1ed      	bne.n	8004b4a <SPI_WIFI_ReceiveData+0x52>
      spi_rx_event=1;
 8004b6e:	2501      	movs	r5, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004b70:	462a      	mov	r2, r5
 8004b72:	a901      	add	r1, sp, #4
 8004b74:	4650      	mov	r0, sl
      spi_rx_event=1;
 8004b76:	f8c9 500c 	str.w	r5, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004b7a:	f006 fd9d 	bl	800b6b8 <HAL_SPI_Receive_IT>
 8004b7e:	b150      	cbz	r0, 8004b96 <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8004b80:	462a      	mov	r2, r5
 8004b82:	4629      	mov	r1, r5
 8004b84:	4814      	ldr	r0, [pc, #80]	; (8004bd8 <SPI_WIFI_ReceiveData+0xe0>)
 8004b86:	f004 fafb 	bl	8009180 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8004b8a:	f04f 35ff 	mov.w	r5, #4294967295
}
 8004b8e:	4628      	mov	r0, r5
 8004b90:	b003      	add	sp, #12
 8004b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8004b96:	f003 ff5d 	bl	8008a54 <HAL_GetTick>
 8004b9a:	4605      	mov	r5, r0
  while (spi_rx_event==1)
 8004b9c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d104      	bne.n	8004bae <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004ba4:	f003 ff56 	bl	8008a54 <HAL_GetTick>
 8004ba8:	1b40      	subs	r0, r0, r5
 8004baa:	4580      	cmp	r8, r0
 8004bac:	d2f6      	bcs.n	8004b9c <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8004bae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004bb2:	5533      	strb	r3, [r6, r4]
      pData[1] = tmp[1];
 8004bb4:	1933      	adds	r3, r6, r4
 8004bb6:	3402      	adds	r4, #2
 8004bb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004bbc:	705a      	strb	r2, [r3, #1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8004bbe:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 8004bc2:	d1bb      	bne.n	8004b3c <SPI_WIFI_ReceiveData+0x44>
        WIFI_DISABLE_NSS();
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4803      	ldr	r0, [pc, #12]	; (8004bd8 <SPI_WIFI_ReceiveData+0xe0>)
 8004bca:	f004 fad9 	bl	8009180 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004bce:	f06f 0503 	mvn.w	r5, #3
        SPI_WIFI_ResetModule();    
 8004bd2:	f7ff fee3 	bl	800499c <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004bd6:	e7da      	b.n	8004b8e <SPI_WIFI_ReceiveData+0x96>
 8004bd8:	48001000 	.word	0x48001000
 8004bdc:	20001090 	.word	0x20001090
 8004be0:	200011e4 	.word	0x200011e4

08004be4 <SPI_WIFI_SendData>:
{
 8004be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004be8:	4606      	mov	r6, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	4690      	mov	r8, r2
  int tickstart = HAL_GetTick();
 8004bee:	f003 ff31 	bl	8008a54 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 8004bf2:	4d23      	ldr	r5, [pc, #140]	; (8004c80 <SPI_WIFI_SendData+0x9c>)
  int tickstart = HAL_GetTick();
 8004bf4:	4681      	mov	r9, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f004 fabb 	bl	8009174 <HAL_GPIO_ReadPin>
 8004bfe:	2801      	cmp	r0, #1
 8004c00:	4607      	mov	r7, r0
 8004c02:	d118      	bne.n	8004c36 <SPI_WIFI_SendData+0x52>
  cmddata_rdy_rising_event=1;
 8004c04:	4d1f      	ldr	r5, [pc, #124]	; (8004c84 <SPI_WIFI_SendData+0xa0>)
  WIFI_ENABLE_NSS();
 8004c06:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 8004c08:	60a8      	str	r0, [r5, #8]
  WIFI_ENABLE_NSS();
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	481c      	ldr	r0, [pc, #112]	; (8004c80 <SPI_WIFI_SendData+0x9c>)
 8004c0e:	f004 fab7 	bl	8009180 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004c12:	200f      	movs	r0, #15
 8004c14:	f7ff fde6 	bl	80047e4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8004c18:	2c01      	cmp	r4, #1
 8004c1a:	d918      	bls.n	8004c4e <SPI_WIFI_SendData+0x6a>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004c1c:	0862      	lsrs	r2, r4, #1
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4819      	ldr	r0, [pc, #100]	; (8004c88 <SPI_WIFI_SendData+0xa4>)
    spi_tx_event=1;
 8004c22:	606f      	str	r7, [r5, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004c24:	f006 fc6e 	bl	800b504 <HAL_SPI_Transmit_IT>
 8004c28:	b170      	cbz	r0, 8004c48 <SPI_WIFI_SendData+0x64>
      WIFI_DISABLE_NSS();
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4814      	ldr	r0, [pc, #80]	; (8004c80 <SPI_WIFI_SendData+0x9c>)
 8004c30:	f004 faa6 	bl	8009180 <HAL_GPIO_WritePin>
 8004c34:	e005      	b.n	8004c42 <SPI_WIFI_SendData+0x5e>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004c36:	f003 ff0d 	bl	8008a54 <HAL_GetTick>
 8004c3a:	eba0 0009 	sub.w	r0, r0, r9
 8004c3e:	4580      	cmp	r8, r0
 8004c40:	d2d9      	bcs.n	8004bf6 <SPI_WIFI_SendData+0x12>
    return ES_WIFI_ERROR_SPI_FAILED;
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	e018      	b.n	8004c7a <SPI_WIFI_SendData+0x96>
    wait_spi_tx_event(timeout);
 8004c48:	4640      	mov	r0, r8
 8004c4a:	f7ff fdff 	bl	800484c <wait_spi_tx_event>
  if ( len & 1)
 8004c4e:	07e3      	lsls	r3, r4, #31
 8004c50:	d512      	bpl.n	8004c78 <SPI_WIFI_SendData+0x94>
    Padding[0] = pdata[len-1];
 8004c52:	4426      	add	r6, r4
    spi_tx_event=1;
 8004c54:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8004c56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c5a:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004c5e:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8004c60:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004c62:	4809      	ldr	r0, [pc, #36]	; (8004c88 <SPI_WIFI_SendData+0xa4>)
    Padding[1] = '\n';
 8004c64:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_tx_event=1;
 8004c68:	606a      	str	r2, [r5, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004c6a:	f006 fc4b 	bl	800b504 <HAL_SPI_Transmit_IT>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1db      	bne.n	8004c2a <SPI_WIFI_SendData+0x46>
    wait_spi_tx_event(timeout);
 8004c72:	4640      	mov	r0, r8
 8004c74:	f7ff fdea 	bl	800484c <wait_spi_tx_event>
  return len;
 8004c78:	b220      	sxth	r0, r4
}
 8004c7a:	b003      	add	sp, #12
 8004c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c80:	48001000 	.word	0x48001000
 8004c84:	20001090 	.word	0x20001090
 8004c88:	200011e4 	.word	0x200011e4

08004c8c <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8004c8c:	f003 bee8 	b.w	8008a60 <HAL_Delay>

08004c90 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8004c90:	4b02      	ldr	r3, [pc, #8]	; (8004c9c <HAL_SPI_RxCpltCallback+0xc>)
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	b10a      	cbz	r2, 8004c9a <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event=0;
 8004c96:	2200      	movs	r2, #0
 8004c98:	60da      	str	r2, [r3, #12]
  }
}
 8004c9a:	4770      	bx	lr
 8004c9c:	20001090 	.word	0x20001090

08004ca0 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8004ca0:	4b02      	ldr	r3, [pc, #8]	; (8004cac <HAL_SPI_TxCpltCallback+0xc>)
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	b10a      	cbz	r2, 8004caa <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event=0;
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	605a      	str	r2, [r3, #4]
  }
}
 8004caa:	4770      	bx	lr
 8004cac:	20001090 	.word	0x20001090

08004cb0 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <SPI_WIFI_ISR+0x10>)
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8004cb6:	bf04      	itt	eq
 8004cb8:	2200      	moveq	r2, #0
 8004cba:	609a      	streq	r2, [r3, #8]
   }
}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20001090 	.word	0x20001090

08004cc4 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8004cc4:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <WIFI_Init+0x30>)
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <WIFI_Init+0x34>)
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <WIFI_Init+0x38>)
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <WIFI_Init+0x3c>)
 8004cd2:	490c      	ldr	r1, [pc, #48]	; (8004d04 <WIFI_Init+0x40>)
 8004cd4:	480c      	ldr	r0, [pc, #48]	; (8004d08 <WIFI_Init+0x44>)
 8004cd6:	f003 fa21 	bl	800811c <ES_WIFI_RegisterBusIO>
 8004cda:	b940      	cbnz	r0, 8004cee <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004cdc:	480a      	ldr	r0, [pc, #40]	; (8004d08 <WIFI_Init+0x44>)
 8004cde:	f003 f9bb 	bl	8008058 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004ce2:	3000      	adds	r0, #0
 8004ce4:	bf18      	it	ne
 8004ce6:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8004ce8:	b003      	add	sp, #12
 8004cea:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004cee:	2001      	movs	r0, #1
 8004cf0:	e7fa      	b.n	8004ce8 <WIFI_Init+0x24>
 8004cf2:	bf00      	nop
 8004cf4:	08004af9 	.word	0x08004af9
 8004cf8:	08004be5 	.word	0x08004be5
 8004cfc:	08004ae9 	.word	0x08004ae9
 8004d00:	08004c8d 	.word	0x08004c8d
 8004d04:	08004a6d 	.word	0x08004a6d
 8004d08:	20001248 	.word	0x20001248

08004d0c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8004d0c:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8004d0e:	4613      	mov	r3, r2
 8004d10:	460a      	mov	r2, r1
 8004d12:	4601      	mov	r1, r0
 8004d14:	4806      	ldr	r0, [pc, #24]	; (8004d30 <WIFI_Connect+0x24>)
 8004d16:	f003 fa17 	bl	8008148 <ES_WIFI_Connect>
 8004d1a:	b930      	cbnz	r0, 8004d2a <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004d1c:	4804      	ldr	r0, [pc, #16]	; (8004d30 <WIFI_Connect+0x24>)
 8004d1e:	f003 fa6f 	bl	8008200 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004d22:	3000      	adds	r0, #0
 8004d24:	bf18      	it	ne
 8004d26:	2001      	movne	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8004d28:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	e7fc      	b.n	8004d28 <WIFI_Connect+0x1c>
 8004d2e:	bf00      	nop
 8004d30:	20001248 	.word	0x20001248

08004d34 <WIFI_GetMAC_Address>:
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8004d34:	4601      	mov	r1, r0
{
 8004d36:	b508      	push	{r3, lr}
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8004d38:	4803      	ldr	r0, [pc, #12]	; (8004d48 <WIFI_GetMAC_Address+0x14>)
 8004d3a:	f003 fad5 	bl	80082e8 <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004d3e:	3000      	adds	r0, #0
 8004d40:	bf18      	it	ne
 8004d42:	2001      	movne	r0, #1
 8004d44:	bd08      	pop	{r3, pc}
 8004d46:	bf00      	nop
 8004d48:	20001248 	.word	0x20001248

08004d4c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8004d4c:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004d4e:	4c06      	ldr	r4, [pc, #24]	; (8004d68 <WIFI_GetIP_Address+0x1c>)
{
 8004d50:	4605      	mov	r5, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004d52:	4620      	mov	r0, r4
 8004d54:	f003 fa38 	bl	80081c8 <ES_WIFI_IsConnected>
 8004d58:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8004d5a:	bf03      	ittte	eq
 8004d5c:	f8d4 30d5 	ldreq.w	r3, [r4, #213]	; 0xd5
 8004d60:	602b      	streq	r3, [r5, #0]
    ret = WIFI_STATUS_OK;
 8004d62:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8004d64:	2001      	movne	r0, #1
  }
  return ret;
}
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20001248 	.word	0x20001248

08004d6c <WIFI_GetHostAddress>:
  */
WIFI_Status_t WIFI_GetHostAddress(const char *location, uint8_t *ipaddr)
{
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  
  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 8004d6c:	460a      	mov	r2, r1
{
 8004d6e:	b508      	push	{r3, lr}
  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 8004d70:	4601      	mov	r1, r0
 8004d72:	4803      	ldr	r0, [pc, #12]	; (8004d80 <WIFI_GetHostAddress+0x14>)
 8004d74:	f003 fad6 	bl	8008324 <ES_WIFI_DNS_LookUp>
  {
    return WIFI_STATUS_OK;
  }
  
  return ret;
}
 8004d78:	3000      	adds	r0, #0
 8004d7a:	bf18      	it	ne
 8004d7c:	2001      	movne	r0, #1
 8004d7e:	bd08      	pop	{r3, pc}
 8004d80:	20001248 	.word	0x20001248

08004d84 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8004d84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8004d86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004d8a:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8004d8e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8004d92:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004d96:	3100      	adds	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8004d98:	781a      	ldrb	r2, [r3, #0]
 8004d9a:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004d9e:	bf18      	it	ne
 8004da0:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8004da2:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8004da4:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004da8:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8004dac:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004db0:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8004db2:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004db4:	4806      	ldr	r0, [pc, #24]	; (8004dd0 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8004db6:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8004db8:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8004dbc:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004dc0:	f003 fad0 	bl	8008364 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004dc4:	3000      	adds	r0, #0
 8004dc6:	bf18      	it	ne
 8004dc8:	2001      	movne	r0, #1
 8004dca:	b007      	add	sp, #28
 8004dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dd0:	20001248 	.word	0x20001248

08004dd4 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8004dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8004dd6:	f88d 0005 	strb.w	r0, [sp, #5]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004dda:	a901      	add	r1, sp, #4
 8004ddc:	4804      	ldr	r0, [pc, #16]	; (8004df0 <WIFI_CloseClientConnection+0x1c>)
 8004dde:	f003 fb23 	bl	8008428 <ES_WIFI_StopClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret; 
}
 8004de2:	3000      	adds	r0, #0
 8004de4:	bf18      	it	ne
 8004de6:	2001      	movne	r0, #1
 8004de8:	b007      	add	sp, #28
 8004dea:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dee:	bf00      	nop
 8004df0:	20001248 	.word	0x20001248

08004df4 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8004df4:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004df6:	9c04      	ldr	r4, [sp, #16]
 8004df8:	e9cd 3400 	strd	r3, r4, [sp]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	460a      	mov	r2, r1
 8004e00:	4601      	mov	r1, r0
 8004e02:	4804      	ldr	r0, [pc, #16]	; (8004e14 <WIFI_SendData+0x20>)
 8004e04:	f003 fb30 	bl	8008468 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8004e08:	3000      	adds	r0, #0
 8004e0a:	bf18      	it	ne
 8004e0c:	2001      	movne	r0, #1
 8004e0e:	b002      	add	sp, #8
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	bf00      	nop
 8004e14:	20001248 	.word	0x20001248

08004e18 <WIFI_SendDataTo>:



WIFI_Status_t WIFI_SendDataTo(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t port)
{
 8004e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_SendDataTo(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004e1a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004e1e:	9403      	str	r4, [sp, #12]
 8004e20:	9c07      	ldr	r4, [sp, #28]
 8004e22:	9402      	str	r4, [sp, #8]
 8004e24:	9c06      	ldr	r4, [sp, #24]
 8004e26:	e9cd 3400 	strd	r3, r4, [sp]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	460a      	mov	r2, r1
 8004e2e:	4601      	mov	r1, r0
 8004e30:	4803      	ldr	r0, [pc, #12]	; (8004e40 <WIFI_SendDataTo+0x28>)
 8004e32:	f003 fb97 	bl	8008564 <ES_WIFI_SendDataTo>
  {
    ret = WIFI_STATUS_OK;
  }

  return ret;
}
 8004e36:	3000      	adds	r0, #0
 8004e38:	bf18      	it	ne
 8004e3a:	2001      	movne	r0, #1
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bd10      	pop	{r4, pc}
 8004e40:	20001248 	.word	0x20001248

08004e44 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8004e44:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004e46:	9c04      	ldr	r4, [sp, #16]
 8004e48:	e9cd 3400 	strd	r3, r4, [sp]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	460a      	mov	r2, r1
 8004e50:	4601      	mov	r1, r0
 8004e52:	4804      	ldr	r0, [pc, #16]	; (8004e64 <WIFI_ReceiveData+0x20>)
 8004e54:	f003 fc22 	bl	800869c <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004e58:	3000      	adds	r0, #0
 8004e5a:	bf18      	it	ne
 8004e5c:	2001      	movne	r0, #1
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	bf00      	nop
 8004e64:	20001248 	.word	0x20001248

08004e68 <WIFI_ReceiveDataFrom>:


WIFI_Status_t WIFI_ReceiveDataFrom(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t *port)
{
 8004e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveDataFrom(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004e6a:	9c08      	ldr	r4, [sp, #32]
 8004e6c:	9403      	str	r4, [sp, #12]
 8004e6e:	9c07      	ldr	r4, [sp, #28]
 8004e70:	9402      	str	r4, [sp, #8]
 8004e72:	9c06      	ldr	r4, [sp, #24]
 8004e74:	e9cd 3400 	strd	r3, r4, [sp]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	460a      	mov	r2, r1
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4804      	ldr	r0, [pc, #16]	; (8004e90 <WIFI_ReceiveDataFrom+0x28>)
 8004e80:	f003 fc94 	bl	80087ac <ES_WIFI_ReceiveDataFrom>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004e84:	3000      	adds	r0, #0
 8004e86:	bf18      	it	ne
 8004e88:	2001      	movne	r0, #1
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	20001248 	.word	0x20001248

08004e94 <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 8004e94:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 8004e96:	2218      	movs	r2, #24
 8004e98:	4902      	ldr	r1, [pc, #8]	; (8004ea4 <WIFI_GetModuleFwRevision+0x10>)
 8004e9a:	f01e fced 	bl	8023878 <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	bd08      	pop	{r3, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20001268 	.word	0x20001268

08004ea8 <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 8004ea8:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 8004eaa:	2220      	movs	r2, #32
 8004eac:	4902      	ldr	r1, [pc, #8]	; (8004eb8 <WIFI_GetModuleID+0x10>)
 8004eae:	f01e fce3 	bl	8023878 <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	bd08      	pop	{r3, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20001248 	.word	0x20001248

08004ebc <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 8004ebc:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	4902      	ldr	r1, [pc, #8]	; (8004ecc <WIFI_GetModuleName+0x10>)
 8004ec2:	f01e fcd9 	bl	8023878 <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	bd08      	pop	{r3, pc}
 8004eca:	bf00      	nop
 8004ecc:	200012b0 	.word	0x200012b0

08004ed0 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ed2:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004ed4:	4c2a      	ldr	r4, [pc, #168]	; (8004f80 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	; (8004f84 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ed8:	4d2b      	ldr	r5, [pc, #172]	; (8004f88 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004eda:	4f2c      	ldr	r7, [pc, #176]	; (8004f8c <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004edc:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ede:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 8004ee8:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004eec:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ef0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004ef2:	f043 0302 	orr.w	r3, r3, #2
 8004ef6:	64eb      	str	r3, [r5, #76]	; 0x4c
 8004ef8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8004efa:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004f04:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004f06:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004f0a:	2312      	movs	r3, #18
 8004f0c:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004f10:	2003      	movs	r0, #3
 8004f12:	2304      	movs	r3, #4
 8004f14:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f18:	a903      	add	r1, sp, #12
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f004 f84e 	bl	8008fbc <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f20:	a903      	add	r1, sp, #12
 8004f22:	4638      	mov	r0, r7
 8004f24:	f004 f84a 	bl	8008fbc <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004f28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f2e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004f30:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f36:	9302      	str	r3, [sp, #8]
 8004f38:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8004f3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f40:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8004f42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004f44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004f48:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	210f      	movs	r1, #15
 8004f4e:	2021      	movs	r0, #33	; 0x21
 8004f50:	f003 fda6 	bl	8008aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004f54:	2021      	movs	r0, #33	; 0x21
 8004f56:	f003 fdd7 	bl	8008b08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	210f      	movs	r1, #15
 8004f5e:	2022      	movs	r0, #34	; 0x22
 8004f60:	f003 fd9e 	bl	8008aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004f64:	2022      	movs	r0, #34	; 0x22
 8004f66:	f003 fdcf 	bl	8008b08 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f004 faa0 	bl	80094b0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8004f70:	4631      	mov	r1, r6
 8004f72:	4620      	mov	r0, r4
 8004f74:	f004 fda4 	bl	8009ac0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8004f78:	b009      	add	sp, #36	; 0x24
 8004f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7c:	40005800 	.word	0x40005800
 8004f80:	20001968 	.word	0x20001968
 8004f84:	00702681 	.word	0x00702681
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	48000400 	.word	0x48000400

08004f90 <I2Cx_Error.isra.2.constprop.7>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
 8004f90:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004f92:	4803      	ldr	r0, [pc, #12]	; (8004fa0 <I2Cx_Error.isra.2.constprop.7+0x10>)
 8004f94:	f004 fade 	bl	8009554 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
}
 8004f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init(i2c_handler);
 8004f9c:	f7ff bf98 	b.w	8004ed0 <I2Cx_Init.constprop.8>
 8004fa0:	20001968 	.word	0x20001968

08004fa4 <BSP_LED_Init>:
{
 8004fa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8004fa6:	b948      	cbnz	r0, 8004fbc <BSP_LED_Init+0x18>
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <BSP_LED_Init+0x3c>)
 8004faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fac:	f042 0202 	orr.w	r2, r2, #2
 8004fb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <BSP_LED_Init+0x40>)
 8004fd0:	a901      	add	r1, sp, #4
 8004fd2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004fd6:	f003 fff1 	bl	8008fbc <HAL_GPIO_Init>
}
 8004fda:	b007      	add	sp, #28
 8004fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	200001ec 	.word	0x200001ec

08004fe8 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <BSP_LED_On+0x10>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ff0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004ff4:	f004 b8c4 	b.w	8009180 <HAL_GPIO_WritePin>
 8004ff8:	200001ec 	.word	0x200001ec

08004ffc <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <BSP_LED_Off+0x10>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005004:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005008:	f004 b8ba 	b.w	8009180 <HAL_GPIO_WritePin>
 800500c:	200001ec 	.word	0x200001ec

08005010 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005010:	4b03      	ldr	r3, [pc, #12]	; (8005020 <BSP_LED_Toggle+0x10>)
 8005012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005016:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800501a:	f004 b8b6 	b.w	800918a <HAL_GPIO_TogglePin>
 800501e:	bf00      	nop
 8005020:	200001ec 	.word	0x200001ec

08005024 <BSP_PB_Init>:
{
 8005024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <BSP_PB_Init+0x70>)
 8005028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800502a:	f042 0204 	orr.w	r2, r2, #4
 800502e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 800503a:	b989      	cbnz	r1, 8005060 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800503c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005040:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005044:	2101      	movs	r1, #1
 8005046:	2302      	movs	r3, #2
 8005048:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800504c:	4b12      	ldr	r3, [pc, #72]	; (8005098 <BSP_PB_Init+0x74>)
 800504e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005052:	a901      	add	r1, sp, #4
 8005054:	6840      	ldr	r0, [r0, #4]
 8005056:	f003 ffb1 	bl	8008fbc <HAL_GPIO_Init>
}
 800505a:	b007      	add	sp, #28
 800505c:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8005060:	2901      	cmp	r1, #1
 8005062:	d1fa      	bne.n	800505a <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8005064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005068:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506a:	2303      	movs	r3, #3
 800506c:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <BSP_PB_Init+0x78>)
 8005070:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 8005074:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005076:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800507a:	a901      	add	r1, sp, #4
 800507c:	6840      	ldr	r0, [r0, #4]
 800507e:	f003 ff9d 	bl	8008fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005082:	2200      	movs	r2, #0
 8005084:	210f      	movs	r1, #15
 8005086:	2028      	movs	r0, #40	; 0x28
 8005088:	f003 fd0a 	bl	8008aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800508c:	2028      	movs	r0, #40	; 0x28
 800508e:	f003 fd3b 	bl	8008b08 <HAL_NVIC_EnableIRQ>
}
 8005092:	e7e2      	b.n	800505a <BSP_PB_Init+0x36>
 8005094:	40021000 	.word	0x40021000
 8005098:	200001ec 	.word	0x200001ec
 800509c:	10110000 	.word	0x10110000

080050a0 <BSP_COM_Init>:
{
 80050a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a2:	460e      	mov	r6, r1
 80050a4:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80050a6:	b9d8      	cbnz	r0, 80050e0 <BSP_COM_Init+0x40>
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <BSP_COM_Init+0x80>)
 80050aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ac:	f042 0202 	orr.w	r2, r2, #2
 80050b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80050b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050b4:	f002 0202 	and.w	r2, r2, #2
 80050b8:	9200      	str	r2, [sp, #0]
 80050ba:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80050bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050be:	f042 0202 	orr.w	r2, r2, #2
 80050c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80050c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050c6:	f002 0202 	and.w	r2, r2, #2
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80050ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d4:	661a      	str	r2, [r3, #96]	; 0x60
 80050d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80050e0:	4c10      	ldr	r4, [pc, #64]	; (8005124 <BSP_COM_Init+0x84>)
 80050e2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80050e6:	2502      	movs	r5, #2
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	e9cd 3503 	strd	r3, r5, [sp, #12]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80050ee:	2707      	movs	r7, #7
  gpio_init_structure.Pull = GPIO_NOPULL;
 80050f0:	2300      	movs	r3, #0
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80050f2:	a903      	add	r1, sp, #12
 80050f4:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80050f6:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80050f8:	9506      	str	r5, [sp, #24]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80050fa:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80050fc:	f003 ff5e 	bl	8008fbc <HAL_GPIO_Init>
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8005100:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8005102:	a903      	add	r1, sp, #12
 8005104:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8005106:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005108:	e9cd 3503 	strd	r3, r5, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800510c:	f003 ff56 	bl	8008fbc <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	6033      	str	r3, [r6, #0]
  HAL_UART_Init(huart);
 8005114:	4630      	mov	r0, r6
 8005116:	f007 f909 	bl	800c32c <HAL_UART_Init>
}
 800511a:	b009      	add	sp, #36	; 0x24
 800511c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	200001ec 	.word	0x200001ec

08005128 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8005128:	f7ff bed2 	b.w	8004ed0 <I2Cx_Init.constprop.8>

0800512c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800512c:	b510      	push	{r4, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005132:	2301      	movs	r3, #1
{
 8005134:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800513c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005140:	9400      	str	r4, [sp, #0]
 8005142:	460a      	mov	r2, r1
 8005144:	4601      	mov	r1, r0
 8005146:	4804      	ldr	r0, [pc, #16]	; (8005158 <SENSOR_IO_Write+0x2c>)
 8005148:	f004 fb4a 	bl	80097e0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800514c:	b108      	cbz	r0, 8005152 <SENSOR_IO_Write+0x26>
    I2Cx_Error(i2c_handler, Addr);
 800514e:	f7ff ff1f 	bl	8004f90 <I2Cx_Error.isra.2.constprop.7>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8005152:	b006      	add	sp, #24
 8005154:	bd10      	pop	{r4, pc}
 8005156:	bf00      	nop
 8005158:	20001968 	.word	0x20001968

0800515c <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800515c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 800515e:	aa06      	add	r2, sp, #24
 8005160:	2300      	movs	r3, #0
 8005162:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005166:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800516a:	2301      	movs	r3, #1
 800516c:	9200      	str	r2, [sp, #0]
 800516e:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8005172:	460a      	mov	r2, r1
 8005174:	4601      	mov	r1, r0
 8005176:	4805      	ldr	r0, [pc, #20]	; (800518c <SENSOR_IO_Read+0x30>)
 8005178:	f004 fbe8 	bl	800994c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800517c:	b108      	cbz	r0, 8005182 <SENSOR_IO_Read+0x26>
    I2Cx_Error(i2c_handler, Addr);
 800517e:	f7ff ff07 	bl	8004f90 <I2Cx_Error.isra.2.constprop.7>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8005182:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8005186:	b007      	add	sp, #28
 8005188:	f85d fb04 	ldr.w	pc, [sp], #4
 800518c:	20001968 	.word	0x20001968

08005190 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005192:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005196:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800519a:	9200      	str	r2, [sp, #0]
 800519c:	2301      	movs	r3, #1
 800519e:	460a      	mov	r2, r1
 80051a0:	4601      	mov	r1, r0
 80051a2:	4805      	ldr	r0, [pc, #20]	; (80051b8 <SENSOR_IO_ReadMultiple+0x28>)
 80051a4:	f004 fbd2 	bl	800994c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80051a8:	4604      	mov	r4, r0
 80051aa:	b108      	cbz	r0, 80051b0 <SENSOR_IO_ReadMultiple+0x20>
    I2Cx_Error(i2c_handler, Addr);
 80051ac:	f7ff fef0 	bl	8004f90 <I2Cx_Error.isra.2.constprop.7>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80051b0:	4620      	mov	r0, r4
 80051b2:	b004      	add	sp, #16
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	bf00      	nop
 80051b8:	20001968 	.word	0x20001968

080051bc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80051bc:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80051be:	4c07      	ldr	r4, [pc, #28]	; (80051dc <BSP_ACCELERO_Init+0x20>)
 80051c0:	68a3      	ldr	r3, [r4, #8]
 80051c2:	4798      	blx	r3
 80051c4:	286a      	cmp	r0, #106	; 0x6a
 80051c6:	d107      	bne.n	80051d8 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80051ca:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 80051ce:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80051d4:	2000      	movs	r0, #0
  }  

  return ret;
}
 80051d6:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 80051d8:	2001      	movs	r0, #1
 80051da:	e7fc      	b.n	80051d6 <BSP_ACCELERO_Init+0x1a>
 80051dc:	200002a0 	.word	0x200002a0
 80051e0:	200010a0 	.word	0x200010a0

080051e4 <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <BSP_ACCELERO_AccGetXYZ+0x10>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b113      	cbz	r3, 80051f0 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	b103      	cbz	r3, 80051f0 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80051ee:	4718      	bx	r3
    }
  }
}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	200010a0 	.word	0x200010a0

080051f8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80051f8:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80051fa:	4c07      	ldr	r4, [pc, #28]	; (8005218 <BSP_GYRO_Init+0x20>)
 80051fc:	68a3      	ldr	r3, [r4, #8]
 80051fe:	4798      	blx	r3
 8005200:	286a      	cmp	r0, #106	; 0x6a
 8005202:	d107      	bne.n	8005214 <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8005206:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800520a:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	4798      	blx	r3
    
    ret = GYRO_OK;
 8005210:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8005212:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 8005214:	2001      	movs	r0, #1
 8005216:	e7fc      	b.n	8005212 <BSP_GYRO_Init+0x1a>
 8005218:	2000026c 	.word	0x2000026c
 800521c:	200010a4 	.word	0x200010a4

08005220 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv != NULL)
 8005220:	4b03      	ldr	r3, [pc, #12]	; (8005230 <BSP_GYRO_GetXYZ+0x10>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	b113      	cbz	r3, 800522c <BSP_GYRO_GetXYZ+0xc>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	b103      	cbz	r3, 800522c <BSP_GYRO_GetXYZ+0xc>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800522a:	4718      	bx	r3
    }
  }
}
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	200010a4 	.word	0x200010a4

08005234 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8005234:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8005236:	4c07      	ldr	r4, [pc, #28]	; (8005254 <BSP_HSENSOR_Init+0x20>)
 8005238:	20be      	movs	r0, #190	; 0xbe
 800523a:	6863      	ldr	r3, [r4, #4]
 800523c:	4798      	blx	r3
 800523e:	28bc      	cmp	r0, #188	; 0xbc
 8005240:	d106      	bne.n	8005250 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8005244:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 8005246:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	4798      	blx	r3
    ret = HSENSOR_OK;
 800524c:	2000      	movs	r0, #0
  }
  
  return ret;
}
 800524e:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 8005250:	2001      	movs	r0, #1
  return ret;
 8005252:	e7fc      	b.n	800524e <BSP_HSENSOR_Init+0x1a>
 8005254:	20000210 	.word	0x20000210
 8005258:	200010a8 	.word	0x200010a8

0800525c <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <BSP_HSENSOR_ReadHumidity+0xc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	20be      	movs	r0, #190	; 0xbe
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4718      	bx	r3
 8005266:	bf00      	nop
 8005268:	200010a8 	.word	0x200010a8

0800526c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800526c:	b513      	push	{r0, r1, r4, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800526e:	4c0b      	ldr	r4, [pc, #44]	; (800529c <BSP_MAGNETO_Init+0x30>)
 8005270:	68a3      	ldr	r3, [r4, #8]
 8005272:	4798      	blx	r3
 8005274:	283d      	cmp	r0, #61	; 0x3d
 8005276:	d10e      	bne.n	8005296 <BSP_MAGNETO_Init+0x2a>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <BSP_MAGNETO_Init+0x34>)
 800527a:	601c      	str	r4, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <BSP_MAGNETO_Init+0x38>)
 800527e:	9300      	str	r3, [sp, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	f88d 3004 	strb.w	r3, [sp, #4]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8005286:	aa02      	add	r2, sp, #8
 8005288:	e912 0003 	ldmdb	r2, {r0, r1}
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8005290:	2000      	movs	r0, #0
  } 

  return ret;  
}
 8005292:	b002      	add	sp, #8
 8005294:	bd10      	pop	{r4, pc}
    ret = MAGNETO_ERROR;
 8005296:	2001      	movs	r0, #1
 8005298:	e7fb      	b.n	8005292 <BSP_MAGNETO_Init+0x26>
 800529a:	bf00      	nop
 800529c:	2000021c 	.word	0x2000021c
 80052a0:	200010ac 	.word	0x200010ac
 80052a4:	08000058 	.word	0x08000058

080052a8 <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <BSP_MAGNETO_GetXYZ+0x10>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	b113      	cbz	r3, 80052b4 <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	b103      	cbz	r3, 80052b4 <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80052b2:	4718      	bx	r3
    }
  }
}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	200010ac 	.word	0x200010ac

080052bc <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80052bc:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80052be:	4c07      	ldr	r4, [pc, #28]	; (80052dc <BSP_PSENSOR_Init+0x20>)
 80052c0:	20ba      	movs	r0, #186	; 0xba
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	4798      	blx	r3
 80052c6:	28b1      	cmp	r0, #177	; 0xb1
 80052c8:	d106      	bne.n	80052d8 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80052cc:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 80052ce:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	4798      	blx	r3
    ret = PSENSOR_OK;
 80052d4:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80052d6:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 80052d8:	2001      	movs	r0, #1
  return ret;
 80052da:	e7fc      	b.n	80052d6 <BSP_PSENSOR_Init+0x1a>
 80052dc:	20000260 	.word	0x20000260
 80052e0:	200010b0 	.word	0x200010b0

080052e4 <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80052e4:	4b02      	ldr	r3, [pc, #8]	; (80052f0 <BSP_PSENSOR_ReadPressure+0xc>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	20ba      	movs	r0, #186	; 0xba
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4718      	bx	r3
 80052ee:	bf00      	nop
 80052f0:	200010b0 	.word	0x200010b0

080052f4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80052f4:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80052f6:	4c06      	ldr	r4, [pc, #24]	; (8005310 <BSP_TSENSOR_Init+0x1c>)
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <BSP_TSENSOR_Init+0x20>)
 80052fa:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80052fc:	f7ff ff14 	bl	8005128 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	2100      	movs	r1, #0
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	20be      	movs	r0, #190	; 0xbe
 8005308:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 800530a:	2000      	movs	r0, #0
 800530c:	bd10      	pop	{r4, pc}
 800530e:	bf00      	nop
 8005310:	200010b4 	.word	0x200010b4
 8005314:	20000200 	.word	0x20000200

08005318 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8005318:	4b02      	ldr	r3, [pc, #8]	; (8005324 <BSP_TSENSOR_ReadTemp+0xc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	20be      	movs	r0, #190	; 0xbe
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4718      	bx	r3
 8005322:	bf00      	nop
 8005324:	200010b4 	.word	0x200010b4

08005328 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8005328:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800532a:	b2c4      	uxtb	r4, r0
 800532c:	2120      	movs	r1, #32
 800532e:	4620      	mov	r0, r4
 8005330:	f7ff ff14 	bl	800515c <SENSOR_IO_Read>
 8005334:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005338:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 800533c:	4620      	mov	r0, r4
 800533e:	2120      	movs	r1, #32
}
 8005340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005344:	f7ff bef2 	b.w	800512c <SENSOR_IO_Write>

08005348 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8005348:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800534a:	b2c4      	uxtb	r4, r0
 800534c:	2120      	movs	r1, #32
 800534e:	4620      	mov	r0, r4
 8005350:	f7ff ff04 	bl	800515c <SENSOR_IO_Read>
 8005354:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005358:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 800535c:	4620      	mov	r0, r4
 800535e:	2120      	movs	r1, #32
}
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005364:	f7ff bee2 	b.w	800512c <SENSOR_IO_Write>

08005368 <HTS221_H_ReadID>:
{  
 8005368:	b510      	push	{r4, lr}
 800536a:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 800536c:	f7ff fedc 	bl	8005128 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8005370:	b2e0      	uxtb	r0, r4
 8005372:	210f      	movs	r1, #15
}
 8005374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8005378:	f7ff bef0 	b.w	800515c <SENSOR_IO_Read>

0800537c <HTS221_H_ReadHumidity>:
{
 800537c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8005380:	fa5f f880 	uxtb.w	r8, r0
 8005384:	2302      	movs	r3, #2
 8005386:	aa01      	add	r2, sp, #4
 8005388:	21b0      	movs	r1, #176	; 0xb0
 800538a:	4640      	mov	r0, r8
 800538c:	f7ff ff00 	bl	8005190 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005390:	2302      	movs	r3, #2
 8005392:	aa01      	add	r2, sp, #4
 8005394:	21b6      	movs	r1, #182	; 0xb6
 8005396:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8005398:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 800539c:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80053a0:	f7ff fef6 	bl	8005190 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053a4:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80053a8:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80053ac:	2302      	movs	r3, #2
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053ae:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80053b2:	aa01      	add	r2, sp, #4
 80053b4:	21ba      	movs	r1, #186	; 0xba
 80053b6:	4640      	mov	r0, r8
 80053b8:	f7ff feea 	bl	8005190 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053bc:	b227      	sxth	r7, r4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80053c2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80053c6:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053c8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80053cc:	21a8      	movs	r1, #168	; 0xa8
 80053ce:	2302      	movs	r3, #2
 80053d0:	4640      	mov	r0, r8
 80053d2:	f7ff fedd 	bl	8005190 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80053da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80053de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80053e2:	b21b      	sxth	r3, r3
 80053e4:	1bdb      	subs	r3, r3, r7
 80053e6:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 80053ea:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 80053ec:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80053ee:	1bab      	subs	r3, r5, r6
 80053f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f4:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053f8:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80053fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053fe:	1be4      	subs	r4, r4, r7
 8005400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005404:	ee07 4a10 	vmov	s14, r4
 8005408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800540c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8005410:	ee07 6a90 	vmov	s15, r6
 8005414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8005418:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005450 <HTS221_H_ReadHumidity+0xd4>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800541c:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8005420:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005424:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8005428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	dc07      	bgt.n	8005442 <HTS221_H_ReadHumidity+0xc6>
        : tmp_f;
 8005432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d504      	bpl.n	8005446 <HTS221_H_ReadHumidity+0xca>
 800543c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8005454 <HTS221_H_ReadHumidity+0xd8>
 8005440:	e001      	b.n	8005446 <HTS221_H_ReadHumidity+0xca>
        : ( tmp_f <    0.0f ) ?    0.0f
 8005442:	eef0 7a47 	vmov.f32	s15, s14
}
 8005446:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800544a:	b002      	add	sp, #8
 800544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005450:	447a0000 	.word	0x447a0000
 8005454:	00000000 	.word	0x00000000

08005458 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8005458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800545c:	fa5f f880 	uxtb.w	r8, r0
 8005460:	aa01      	add	r2, sp, #4
 8005462:	2302      	movs	r3, #2
 8005464:	21b2      	movs	r1, #178	; 0xb2
 8005466:	4640      	mov	r0, r8
 8005468:	f7ff fe92 	bl	8005190 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800546c:	2135      	movs	r1, #53	; 0x35
 800546e:	4640      	mov	r0, r8
 8005470:	f7ff fe74 	bl	800515c <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005474:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8005476:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800547a:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800547e:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005480:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8005484:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8005488:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800548a:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800548c:	2304      	movs	r3, #4
 800548e:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8005492:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8005494:	21bc      	movs	r1, #188	; 0xbc
 8005496:	4640      	mov	r0, r8
 8005498:	f7ff fe7a 	bl	8005190 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800549c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80054a0:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80054a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054a8:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80054ac:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80054b0:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80054b2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80054b6:	21aa      	movs	r1, #170	; 0xaa
 80054b8:	2302      	movs	r3, #2
 80054ba:	4640      	mov	r0, r8
 80054bc:	f7ff fe68 	bl	8005190 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80054c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054cc:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 80054d2:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	1bab      	subs	r3, r5, r6
 80054da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054de:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80054e2:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80054e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e8:	1be4      	subs	r4, r4, r7
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	ee07 4a10 	vmov	s14, r4
 80054f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80054fa:	ee07 6a90 	vmov	s15, r6
 80054fe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8005502:	ee36 0a80 	vadd.f32	s0, s13, s0
 8005506:	b002      	add	sp, #8
 8005508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800550c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800550c:	b507      	push	{r0, r1, r2, lr}
 800550e:	ab02      	add	r3, sp, #8
 8005510:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8005514:	2120      	movs	r1, #32
 8005516:	f89d 2000 	ldrb.w	r2, [sp]
 800551a:	203c      	movs	r0, #60	; 0x3c
 800551c:	f7ff fe06 	bl	800512c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8005520:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005524:	2121      	movs	r1, #33	; 0x21
 8005526:	203c      	movs	r0, #60	; 0x3c
 8005528:	f7ff fe00 	bl	800512c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800552c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8005530:	2122      	movs	r1, #34	; 0x22
 8005532:	203c      	movs	r0, #60	; 0x3c
 8005534:	f7ff fdfa 	bl	800512c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8005538:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800553c:	2123      	movs	r1, #35	; 0x23
 800553e:	203c      	movs	r0, #60	; 0x3c
 8005540:	f7ff fdf4 	bl	800512c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005544:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005548:	2124      	movs	r1, #36	; 0x24
 800554a:	203c      	movs	r0, #60	; 0x3c
}
 800554c:	b003      	add	sp, #12
 800554e:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005552:	f7ff bdeb 	b.w	800512c <SENSOR_IO_Write>

08005556 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8005556:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005558:	2122      	movs	r1, #34	; 0x22
 800555a:	203c      	movs	r0, #60	; 0x3c
 800555c:	f7ff fdfe 	bl	800515c <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8005560:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005564:	f042 0203 	orr.w	r2, r2, #3
 8005568:	2122      	movs	r1, #34	; 0x22
 800556a:	203c      	movs	r0, #60	; 0x3c
}
 800556c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005570:	f7ff bddc 	b.w	800512c <SENSOR_IO_Write>

08005574 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8005574:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005576:	2122      	movs	r1, #34	; 0x22
{  
 8005578:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800557a:	203c      	movs	r0, #60	; 0x3c
 800557c:	f7ff fdee 	bl	800515c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8005580:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 8005584:	b10c      	cbz	r4, 800558a <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8005586:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800558a:	2122      	movs	r1, #34	; 0x22
 800558c:	203c      	movs	r0, #60	; 0x3c
}
 800558e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005592:	f7ff bdcb 	b.w	800512c <SENSOR_IO_Write>

08005596 <LIS3MDL_MagReadID>:
{
 8005596:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8005598:	f7ff fdc6 	bl	8005128 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800559c:	210f      	movs	r1, #15
 800559e:	203c      	movs	r0, #60	; 0x3c
}
 80055a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80055a4:	f7ff bdda 	b.w	800515c <SENSOR_IO_Read>

080055a8 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80055a8:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80055aa:	2121      	movs	r1, #33	; 0x21
{
 80055ac:	b085      	sub	sp, #20
 80055ae:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80055b0:	203c      	movs	r0, #60	; 0x3c
 80055b2:	f7ff fdd3 	bl	800515c <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80055b6:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80055b8:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80055ba:	aa02      	add	r2, sp, #8
 80055bc:	21a8      	movs	r1, #168	; 0xa8
 80055be:	203c      	movs	r0, #60	; 0x3c
 80055c0:	f7ff fde6 	bl	8005190 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80055c4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80055c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80055cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80055d0:	f8ad 3000 	strh.w	r3, [sp]
 80055d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80055d8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80055dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80055e0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80055e4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80055e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80055ec:	f004 0460 	and.w	r4, r4, #96	; 0x60
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80055f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  switch(ctrlm & 0x60)
 80055f4:	2c20      	cmp	r4, #32
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80055f6:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 80055fa:	d021      	beq.n	8005640 <LIS3MDL_MagReadXYZ+0x98>
 80055fc:	d803      	bhi.n	8005606 <LIS3MDL_MagReadXYZ+0x5e>
 80055fe:	b14c      	cbz	r4, 8005614 <LIS3MDL_MagReadXYZ+0x6c>
  float sensitivity = 0;
 8005600:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800564c <LIS3MDL_MagReadXYZ+0xa4>
 8005604:	e008      	b.n	8005618 <LIS3MDL_MagReadXYZ+0x70>
  switch(ctrlm & 0x60)
 8005606:	2c40      	cmp	r4, #64	; 0x40
 8005608:	d01d      	beq.n	8005646 <LIS3MDL_MagReadXYZ+0x9e>
 800560a:	2c60      	cmp	r4, #96	; 0x60
 800560c:	d1f8      	bne.n	8005600 <LIS3MDL_MagReadXYZ+0x58>
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800560e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005650 <LIS3MDL_MagReadXYZ+0xa8>
    break;    
 8005612:	e001      	b.n	8005618 <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8005614:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005654 <LIS3MDL_MagReadXYZ+0xac>
 8005618:	2300      	movs	r3, #0
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800561a:	f93d 2013 	ldrsh.w	r2, [sp, r3, lsl #1]
 800561e:	ee07 2a90 	vmov	s15, r2
 8005622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800562a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800562e:	ee17 2a90 	vmov	r2, s15
 8005632:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8005636:	3301      	adds	r3, #1
  for(i=0; i<3; i++)
 8005638:	2b03      	cmp	r3, #3
 800563a:	d1ee      	bne.n	800561a <LIS3MDL_MagReadXYZ+0x72>
  }
}
 800563c:	b005      	add	sp, #20
 800563e:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8005640:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005658 <LIS3MDL_MagReadXYZ+0xb0>
    break;
 8005644:	e7e8      	b.n	8005618 <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8005646:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800565c <LIS3MDL_MagReadXYZ+0xb4>
    break;
 800564a:	e7e5      	b.n	8005618 <LIS3MDL_MagReadXYZ+0x70>
 800564c:	00000000 	.word	0x00000000
 8005650:	3f147ae1 	.word	0x3f147ae1
 8005654:	3e0f5c29 	.word	0x3e0f5c29
 8005658:	3e947ae1 	.word	0x3e947ae1
 800565c:	3edc28f6 	.word	0x3edc28f6

08005660 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8005660:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8005662:	b2c4      	uxtb	r4, r0
 8005664:	2128      	movs	r1, #40	; 0x28
 8005666:	4620      	mov	r0, r4
 8005668:	f7ff fd78 	bl	800515c <SENSOR_IO_Read>
 800566c:	2129      	movs	r1, #41	; 0x29
 800566e:	4605      	mov	r5, r0
 8005670:	4620      	mov	r0, r4
 8005672:	f7ff fd73 	bl	800515c <SENSOR_IO_Read>
 8005676:	212a      	movs	r1, #42	; 0x2a
 8005678:	4606      	mov	r6, r0
 800567a:	4620      	mov	r0, r4
 800567c:	f7ff fd6e 	bl	800515c <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8005680:	0400      	lsls	r0, r0, #16
 8005682:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8005686:	4328      	orrs	r0, r5

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8005688:	0203      	lsls	r3, r0, #8
    tmp |= 0xFF000000;
 800568a:	bf48      	it	mi
 800568c:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8005690:	2364      	movs	r3, #100	; 0x64
 8005692:	4358      	muls	r0, r3
 8005694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005698:	fb90 f0f3 	sdiv	r0, r0, r3

  return (float)((float)raw_press / 100.0f);
 800569c:	ee07 0a90 	vmov	s15, r0
 80056a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 80056a4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80056b0 <LPS22HB_P_ReadPressure+0x50>
 80056a8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80056ac:	bd70      	pop	{r4, r5, r6, pc}
 80056ae:	bf00      	nop
 80056b0:	42c80000 	.word	0x42c80000

080056b4 <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 80056b4:	b538      	push	{r3, r4, r5, lr}
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 80056b6:	b2c5      	uxtb	r5, r0
 80056b8:	212b      	movs	r1, #43	; 0x2b
 80056ba:	4628      	mov	r0, r5
 80056bc:	f7ff fd4e 	bl	800515c <SENSOR_IO_Read>
 80056c0:	212c      	movs	r1, #44	; 0x2c
 80056c2:	4604      	mov	r4, r0
 80056c4:	4628      	mov	r0, r5
 80056c6:	f7ff fd49 	bl	800515c <SENSOR_IO_Read>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 80056ca:	eb04 2000 	add.w	r0, r4, r0, lsl #8

  raw_data = (tmp * 10) / 100;
 80056ce:	b280      	uxth	r0, r0
 80056d0:	240a      	movs	r4, #10
 80056d2:	fb90 f0f4 	sdiv	r0, r0, r4
  
  return ((float)(raw_data / 10.0f));
 80056d6:	b203      	sxth	r3, r0
 80056d8:	ee00 3a10 	vmov	s0, r3
 80056dc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 80056e0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80056e4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80056e8:	bd38      	pop	{r3, r4, r5, pc}

080056ea <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80056ea:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80056ec:	b2c4      	uxtb	r4, r0
 80056ee:	211a      	movs	r1, #26
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff fd33 	bl	800515c <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 80056f6:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	4620      	mov	r0, r4
 8005700:	211a      	movs	r1, #26
 8005702:	f7ff fd13 	bl	800512c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8005706:	2110      	movs	r1, #16
 8005708:	4620      	mov	r0, r4
 800570a:	f7ff fd27 	bl	800515c <SENSOR_IO_Read>
 800570e:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8005712:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8005716:	4620      	mov	r0, r4
 8005718:	2110      	movs	r1, #16
}  
 800571a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800571e:	f7ff bd05 	b.w	800512c <SENSOR_IO_Write>

08005722 <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 8005722:	f7ff bfe2 	b.w	80056ea <LPS22HB_Init>

08005726 <LPS22HB_T_Init>:
  LPS22HB_Init(DeviceAddr);
 8005726:	f7ff bfe0 	b.w	80056ea <LPS22HB_Init>

0800572a <LPS22HB_P_ReadID>:
{  
 800572a:	b510      	push	{r4, lr}
 800572c:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 800572e:	f7ff fcfb 	bl	8005128 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8005732:	b2e0      	uxtb	r0, r4
 8005734:	210f      	movs	r1, #15
}
 8005736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800573a:	f7ff bd0f 	b.w	800515c <SENSOR_IO_Read>

0800573e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800573e:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005740:	2110      	movs	r1, #16
{  
 8005742:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005744:	20d4      	movs	r0, #212	; 0xd4
 8005746:	f7ff fd09 	bl	800515c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 800574a:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 800574e:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	2110      	movs	r1, #16
 8005754:	20d4      	movs	r0, #212	; 0xd4
 8005756:	f7ff fce9 	bl	800512c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800575a:	2112      	movs	r1, #18
 800575c:	20d4      	movs	r0, #212	; 0xd4
 800575e:	f7ff fcfd 	bl	800515c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8005762:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005766:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 800576a:	2112      	movs	r1, #18
 800576c:	20d4      	movs	r0, #212	; 0xd4
}
 800576e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005772:	f7ff bcdb 	b.w	800512c <SENSOR_IO_Write>

08005776 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8005776:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005778:	2110      	movs	r1, #16
 800577a:	20d4      	movs	r0, #212	; 0xd4
 800577c:	f7ff fcee 	bl	800515c <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8005780:	2110      	movs	r1, #16
 8005782:	f000 020f 	and.w	r2, r0, #15
}
 8005786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800578a:	20d4      	movs	r0, #212	; 0xd4
 800578c:	f7ff bcce 	b.w	800512c <SENSOR_IO_Write>

08005790 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8005790:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005792:	2115      	movs	r1, #21
{
 8005794:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005796:	20d4      	movs	r0, #212	; 0xd4
 8005798:	f7ff fce0 	bl	800515c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800579c:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 80057a0:	b10c      	cbz	r4, 80057a6 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80057a2:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80057a6:	2115      	movs	r1, #21
 80057a8:	20d4      	movs	r0, #212	; 0xd4
}
 80057aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80057ae:	f7ff bcbd 	b.w	800512c <SENSOR_IO_Write>

080057b2 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80057b2:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80057b4:	2111      	movs	r1, #17
{  
 80057b6:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80057b8:	20d4      	movs	r0, #212	; 0xd4
 80057ba:	f7ff fccf 	bl	800515c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80057be:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80057c2:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	2111      	movs	r1, #17
 80057c8:	20d4      	movs	r0, #212	; 0xd4
 80057ca:	f7ff fcaf 	bl	800512c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80057ce:	2112      	movs	r1, #18
 80057d0:	20d4      	movs	r0, #212	; 0xd4
 80057d2:	f7ff fcc3 	bl	800515c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80057d6:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80057da:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 80057de:	2112      	movs	r1, #18
 80057e0:	20d4      	movs	r0, #212	; 0xd4
}
 80057e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80057e6:	f7ff bca1 	b.w	800512c <SENSOR_IO_Write>

080057ea <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80057ea:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80057ec:	2111      	movs	r1, #17
 80057ee:	20d4      	movs	r0, #212	; 0xd4
 80057f0:	f7ff fcb4 	bl	800515c <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80057f4:	2111      	movs	r1, #17
 80057f6:	f000 020f 	and.w	r2, r0, #15
}
 80057fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80057fe:	20d4      	movs	r0, #212	; 0xd4
 8005800:	f7ff bc94 	b.w	800512c <SENSOR_IO_Write>

08005804 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8005804:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8005806:	2116      	movs	r1, #22
{  
 8005808:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800580a:	20d4      	movs	r0, #212	; 0xd4
 800580c:	f7ff fca6 	bl	800515c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8005810:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 8005814:	b10c      	cbz	r4, 800581a <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8005816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800581a:	2116      	movs	r1, #22
 800581c:	20d4      	movs	r0, #212	; 0xd4
}
 800581e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8005822:	f7ff bc83 	b.w	800512c <SENSOR_IO_Write>

08005826 <LSM6DSL_AccReadID>:
{  
 8005826:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 8005828:	f7ff fc7e 	bl	8005128 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800582c:	210f      	movs	r1, #15
 800582e:	20d4      	movs	r0, #212	; 0xd4
}
 8005830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8005834:	f7ff bc92 	b.w	800515c <SENSOR_IO_Read>

08005838 <LSM6DSL_GyroReadID>:
 8005838:	f7ff bff5 	b.w	8005826 <LSM6DSL_AccReadID>

0800583c <LSM6DSL_AccReadXYZ>:
{
 800583c:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800583e:	2110      	movs	r1, #16
{
 8005840:	b085      	sub	sp, #20
 8005842:	4605      	mov	r5, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005844:	20d4      	movs	r0, #212	; 0xd4
 8005846:	f7ff fc89 	bl	800515c <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800584a:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800584c:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800584e:	aa02      	add	r2, sp, #8
 8005850:	2128      	movs	r1, #40	; 0x28
 8005852:	20d4      	movs	r0, #212	; 0xd4
 8005854:	f7ff fc9c 	bl	8005190 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005858:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800585c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005860:	4817      	ldr	r0, [pc, #92]	; (80058c0 <LSM6DSL_AccReadXYZ+0x84>)
 8005862:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005866:	f8ad 3000 	strh.w	r3, [sp]
 800586a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800586e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005872:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005876:	f8ad 3002 	strh.w	r3, [sp, #2]
 800587a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800587e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005882:	f004 040c 	and.w	r4, r4, #12
 8005886:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800588a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800588e:	ed90 7a00 	vldr	s14, [r0]
 8005892:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005896:	2300      	movs	r3, #0
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8005898:	f93d 2013 	ldrsh.w	r2, [sp, r3, lsl #1]
 800589c:	ee07 2a90 	vmov	s15, r2
 80058a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ac:	ee17 2a90 	vmov	r2, s15
 80058b0:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 80058b4:	3301      	adds	r3, #1
  for(i=0; i<3; i++)
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d1ee      	bne.n	8005898 <LSM6DSL_AccReadXYZ+0x5c>
}
 80058ba:	b005      	add	sp, #20
 80058bc:	bd30      	pop	{r4, r5, pc}
 80058be:	bf00      	nop
 80058c0:	08027f34 	.word	0x08027f34

080058c4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80058c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058c6:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80058c8:	2111      	movs	r1, #17
 80058ca:	20d4      	movs	r0, #212	; 0xd4
 80058cc:	f7ff fc46 	bl	800515c <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80058d0:	466a      	mov	r2, sp
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80058d2:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80058d4:	2306      	movs	r3, #6
 80058d6:	2122      	movs	r1, #34	; 0x22
 80058d8:	20d4      	movs	r0, #212	; 0xd4
 80058da:	f7ff fc59 	bl	8005190 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80058de:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80058e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80058e6:	4819      	ldr	r0, [pc, #100]	; (800594c <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80058e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80058ec:	b21b      	sxth	r3, r3
 80058ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80058f2:	ee07 3a10 	vmov	s14, r3
 80058f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80058fe:	b21b      	sxth	r3, r3
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005908:	f89d 3000 	ldrb.w	r3, [sp]
 800590c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8005910:	b21b      	sxth	r3, r3
 8005912:	f005 050c 	and.w	r5, r5, #12
 8005916:	ee06 3a90 	vmov	s13, r3
 800591a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800591e:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 8005922:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005926:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800592a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800592e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005932:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005936:	ee67 7a86 	vmul.f32	s15, s15, s12
 800593a:	edc4 6a00 	vstr	s13, [r4]
 800593e:	ed84 7a01 	vstr	s14, [r4, #4]
 8005942:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8005946:	b003      	add	sp, #12
 8005948:	bd30      	pop	{r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	08027f34 	.word	0x08027f34

08005950 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8005950:	f002 ba08 	b.w	8007d64 <VL53L0X_get_device_info>

08005954 <VL53L0X_SetDeviceMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005954:	2915      	cmp	r1, #21
 8005956:	d807      	bhi.n	8005968 <VL53L0X_SetDeviceMode+0x14>
 8005958:	2201      	movs	r2, #1
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <VL53L0X_SetDeviceMode+0x1c>)
 800595c:	408a      	lsls	r2, r1
 800595e:	4013      	ands	r3, r2
 8005960:	b113      	cbz	r3, 8005968 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005962:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005964:	2000      	movs	r0, #0
		break;
 8005966:	4770      	bx	lr
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005968:	f06f 0007 	mvn.w	r0, #7
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	0030000b 	.word	0x0030000b

08005974 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005974:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005976:	460a      	mov	r2, r1
{
 8005978:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800597a:	2109      	movs	r1, #9
 800597c:	f7fe fd85 	bl	800448a <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005980:	b918      	cbnz	r0, 800598a <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 8005982:	7823      	ldrb	r3, [r4, #0]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 800598a:	bd10      	pop	{r4, pc}

0800598c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800598c:	f001 be3d 	b.w	800760a <VL53L0X_set_measurement_timing_budget_micro_seconds>

08005990 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005990:	f001 bd18 	b.w	80073c4 <VL53L0X_set_vcsel_pulse_period>

08005994 <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005994:	f001 be20 	b.w	80075d8 <VL53L0X_get_vcsel_pulse_period>

08005998 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800599a:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 800599c:	aa02      	add	r2, sp, #8
 800599e:	2300      	movs	r3, #0
{
 80059a0:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 80059a2:	f802 3d01 	strb.w	r3, [r2, #-1]!
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80059a6:	2101      	movs	r1, #1
{
 80059a8:	4606      	mov	r6, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80059aa:	f7fe fd6e 	bl	800448a <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 80059ae:	4605      	mov	r5, r0
 80059b0:	b9d8      	cbnz	r0, 80059ea <VL53L0X_SetSequenceStepEnable+0x52>
		if (SequenceStepEnabled == 1) {
 80059b2:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 80059b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 80059b8:	d126      	bne.n	8005a08 <VL53L0X_SetSequenceStepEnable+0x70>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80059ba:	2c04      	cmp	r4, #4
 80059bc:	d83a      	bhi.n	8005a34 <VL53L0X_SetSequenceStepEnable+0x9c>
 80059be:	e8df f004 	tbb	[pc, r4]
 80059c2:	1703      	.short	0x1703
 80059c4:	1d1a      	.short	0x1d1a
 80059c6:	20          	.byte	0x20
 80059c7:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80059c8:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d00c      	beq.n	80059ea <VL53L0X_SetSequenceStepEnable+0x52>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 80059d0:	4622      	mov	r2, r4
 80059d2:	2101      	movs	r1, #1
 80059d4:	4630      	mov	r0, r6
 80059d6:	f7fe fde7 	bl	80045a8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80059da:	4605      	mov	r5, r0
 80059dc:	b928      	cbnz	r0, 80059ea <VL53L0X_SetSequenceStepEnable+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80059de:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80059e2:	6971      	ldr	r1, [r6, #20]
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff ffd1 	bl	800598c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 80059ea:	4628      	mov	r0, r5
 80059ec:	b003      	add	sp, #12
 80059ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 80059f0:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 80059f4:	e7ea      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x04;
 80059f6:	f043 0404 	orr.w	r4, r3, #4
				break;
 80059fa:	e7e7      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x40;
 80059fc:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 8005a00:	e7e4      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x80;
 8005a02:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 8005a06:	e7e1      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 8005a08:	2c04      	cmp	r4, #4
 8005a0a:	d813      	bhi.n	8005a34 <VL53L0X_SetSequenceStepEnable+0x9c>
 8005a0c:	e8df f004 	tbb	[pc, r4]
 8005a10:	0c090603 	.word	0x0c090603
 8005a14:	0f          	.byte	0x0f
 8005a15:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8005a16:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 8005a1a:	e7d7      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xd7;
 8005a1c:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 8005a20:	e7d4      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xfb;
 8005a22:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 8005a26:	e7d1      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xbf;
 8005a28:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 8005a2c:	e7ce      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0x7f;
 8005a2e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 8005a32:	e7cb      	b.n	80059cc <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 8005a34:	f06f 0503 	mvn.w	r5, #3
 8005a38:	e7d7      	b.n	80059ea <VL53L0X_SetSequenceStepEnable+0x52>

08005a3a <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005a3a:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005a3c:	aa02      	add	r2, sp, #8
 8005a3e:	2300      	movs	r3, #0
{
 8005a40:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 8005a42:	f802 3d01 	strb.w	r3, [r2, #-1]!
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005a46:	2101      	movs	r1, #1
 8005a48:	f7fe fd1f 	bl	800448a <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005a4c:	b978      	cbnz	r0, 8005a6e <VL53L0X_GetSequenceStepEnables+0x34>
		Status = sequence_step_enabled(Dev,
 8005a4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005a52:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005a56:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005a58:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005a5c:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005a5e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8005a62:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005a64:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005a68:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005a6a:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005a6c:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005a6e:	b002      	add	sp, #8
 8005a70:	bd10      	pop	{r4, pc}

08005a72 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8005a72:	b513      	push	{r0, r1, r4, lr}
 8005a74:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8005a76:	aa01      	add	r2, sp, #4
 8005a78:	f001 fbfc 	bl	8007274 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8005a7c:	b978      	cbnz	r0, 8005a9e <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8005a7e:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8005a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a88:	fb02 3311 	mls	r3, r2, r1, r3
 8005a8c:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8005a90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a98:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8005a9c:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005a9e:	b002      	add	sp, #8
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005aa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aa4:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005aa6:	f10d 0202 	add.w	r2, sp, #2
 8005aaa:	21f8      	movs	r1, #248	; 0xf8
{
 8005aac:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005aae:	f7fe fd35 	bl	800451c <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005ab2:	b970      	cbnz	r0, 8005ad2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8005ab4:	aa01      	add	r2, sp, #4
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f7fe fd4f 	bl	800455c <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005abe:	b940      	cbnz	r0, 8005ad2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8005ac0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005ac4:	b11a      	cbz	r2, 8005ace <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005ac6:	9b01      	ldr	r3, [sp, #4]
 8005ac8:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005acc:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005ad2:	b003      	add	sp, #12
 8005ad4:	bd30      	pop	{r4, r5, pc}

08005ad6 <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005ad6:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8005ad8:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005ada:	2000      	movs	r0, #0
 8005adc:	4770      	bx	lr

08005ade <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ae0:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005ae2:	f10d 0206 	add.w	r2, sp, #6
 8005ae6:	2120      	movs	r1, #32
{
 8005ae8:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 8005aea:	f7fe fd17 	bl	800451c <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005aee:	b928      	cbnz	r0, 8005afc <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8005af0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005af4:	b923      	cbnz	r3, 8005b00 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005af6:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005af8:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005afa:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005afc:	b003      	add	sp, #12
 8005afe:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005b00:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005b02:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005b04:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005b06:	2301      	movs	r3, #1
 8005b08:	7723      	strb	r3, [r4, #28]
 8005b0a:	e7f7      	b.n	8005afc <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08005b0c <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005b0c:	2905      	cmp	r1, #5
{
 8005b0e:	b570      	push	{r4, r5, r6, lr}
 8005b10:	4604      	mov	r4, r0
 8005b12:	460e      	mov	r6, r1
 8005b14:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005b16:	d835      	bhi.n	8005b84 <VL53L0X_SetLimitCheckEnable+0x78>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8005b18:	b162      	cbz	r2, 8005b34 <VL53L0X_SetLimitCheckEnable+0x28>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b1a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005b1e:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 8005b22:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 8005b24:	1e70      	subs	r0, r6, #1
 8005b26:	2804      	cmp	r0, #4
 8005b28:	d807      	bhi.n	8005b3a <VL53L0X_SetLimitCheckEnable+0x2e>
 8005b2a:	e8df f000 	tbb	[pc, r0]
 8005b2e:	170e      	.short	0x170e
 8005b30:	1d1a      	.short	0x1d1a
 8005b32:	24          	.byte	0x24
 8005b33:	00          	.byte	0x00
			LimitCheckEnableInt = 0;
 8005b34:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7f4      	b.n	8005b24 <VL53L0X_SetLimitCheckEnable+0x18>

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b3a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8005b3e:	4434      	add	r4, r6
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 8005b40:	b9e5      	cbnz	r5, 8005b7c <VL53L0X_SetLimitCheckEnable+0x70>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b42:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b46:	2000      	movs	r0, #0
 8005b48:	e007      	b.n	8005b5a <VL53L0X_SetLimitCheckEnable+0x4e>
			Status = VL53L0X_WrWord(Dev,
 8005b4a:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005b4e:	2144      	movs	r1, #68	; 0x44
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7fe fd39 	bl	80045c8 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0f1      	beq.n	8005b3e <VL53L0X_SetLimitCheckEnable+0x32>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b5c:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
 8005b60:	e7ed      	b.n	8005b3e <VL53L0X_SetLimitCheckEnable+0x32>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b62:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
 8005b66:	e7ea      	b.n	8005b3e <VL53L0X_SetLimitCheckEnable+0x32>
			Status = VL53L0X_UpdateByte(Dev,
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 8005b6c:	2160      	movs	r1, #96	; 0x60
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7fe fd3c 	bl	80045ec <VL53L0X_UpdateByte>
			break;
 8005b74:	e7ef      	b.n	8005b56 <VL53L0X_SetLimitCheckEnable+0x4a>
			Status = VL53L0X_UpdateByte(Dev,
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	22ef      	movs	r2, #239	; 0xef
 8005b7a:	e7f7      	b.n	8005b6c <VL53L0X_SetLimitCheckEnable+0x60>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005b82:	e7e0      	b.n	8005b46 <VL53L0X_SetLimitCheckEnable+0x3a>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b84:	f06f 0003 	mvn.w	r0, #3
 8005b88:	e7e7      	b.n	8005b5a <VL53L0X_SetLimitCheckEnable+0x4e>

08005b8a <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005b8a:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b8c:	bf8c      	ite	hi
 8005b8e:	f06f 0003 	mvnhi.w	r0, #3
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b92:	1840      	addls	r0, r0, r1
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	bf97      	itett	ls
 8005b9a:	f890 1028 	ldrbls.w	r1, [r0, #40]	; 0x28
		*pLimitCheckEnable = 0;
 8005b9e:	7013      	strbhi	r3, [r2, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005ba0:	7011      	strbls	r1, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ba2:	4618      	movls	r0, r3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005ba4:	4770      	bx	lr

08005ba6 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005ba6:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005ba8:	1843      	adds	r3, r0, r1
{
 8005baa:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005bac:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8005bb0:	460e      	mov	r6, r1
 8005bb2:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8005bb4:	b918      	cbnz	r0, 8005bbe <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bb6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005bba:	6362      	str	r2, [r4, #52]	; 0x34
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
 8005bbe:	2905      	cmp	r1, #5
 8005bc0:	d81b      	bhi.n	8005bfa <VL53L0X_SetLimitCheckValue+0x54>
 8005bc2:	e8df f001 	tbb	[pc, r1]
 8005bc6:	0903      	.short	0x0903
 8005bc8:	16161412 	.word	0x16161412
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bcc:	6362      	str	r2, [r4, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bce:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	6365      	str	r5, [r4, #52]	; 0x34
 8005bd6:	e7f1      	b.n	8005bbc <VL53L0X_SetLimitCheckValue+0x16>
			Status = VL53L0X_WrWord(Dev,
 8005bd8:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005bdc:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7fe fcf2 	bl	80045c8 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0f2      	beq.n	8005bce <VL53L0X_SetLimitCheckValue+0x28>
 8005be8:	e7e8      	b.n	8005bbc <VL53L0X_SetLimitCheckValue+0x16>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bea:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005bec:	e7ef      	b.n	8005bce <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bee:	6422      	str	r2, [r4, #64]	; 0x40
 8005bf0:	e7ed      	b.n	8005bce <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 8005bf2:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005bf6:	2164      	movs	r1, #100	; 0x64
 8005bf8:	e7f1      	b.n	8005bde <VL53L0X_SetLimitCheckValue+0x38>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005bfa:	f06f 0003 	mvn.w	r0, #3
 8005bfe:	e7dd      	b.n	8005bbc <VL53L0X_SetLimitCheckValue+0x16>

08005c00 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c02:	4604      	mov	r4, r0
 8005c04:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005c06:	2905      	cmp	r1, #5
 8005c08:	d82c      	bhi.n	8005c64 <VL53L0X_GetLimitCheckValue+0x64>
 8005c0a:	e8df f001 	tbb	[pc, r1]
 8005c0e:	0703      	.short	0x0703
 8005c10:	1b1b1917 	.word	0x1b1b1917

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c14:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e021      	b.n	8005c60 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 8005c1c:	f10d 0206 	add.w	r2, sp, #6
 8005c20:	2144      	movs	r1, #68	; 0x44
 8005c22:	f7fe fc7b 	bl	800451c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005c26:	b9d8      	cbnz	r0, 8005c60 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005c28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 8005c2c:	0253      	lsls	r3, r2, #9
 8005c2e:	b19a      	cbz	r2, 8005c58 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 8005c30:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005c32:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005c34:	2301      	movs	r3, #1
 8005c36:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005c3a:	e011      	b.n	8005c60 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c3c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005c3e:	e7ea      	b.n	8005c16 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c42:	e7e8      	b.n	8005c16 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8005c44:	f10d 0206 	add.w	r2, sp, #6
 8005c48:	2164      	movs	r1, #100	; 0x64
 8005c4a:	f7fe fc67 	bl	800451c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005c4e:	b938      	cbnz	r0, 8005c60 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005c50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005c54:	025b      	lsls	r3, r3, #9
 8005c56:	e7de      	b.n	8005c16 <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005c58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8005c5a:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005c5c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8005c60:	b003      	add	sp, #12
 8005c62:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c64:	f06f 0003 	mvn.w	r0, #3
 8005c68:	e7fa      	b.n	8005c60 <VL53L0X_GetLimitCheckValue+0x60>

08005c6a <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c6c:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005c6e:	f10d 0207 	add.w	r2, sp, #7
 8005c72:	2101      	movs	r1, #1
{
 8005c74:	4605      	mov	r5, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005c76:	f7fe fc08 	bl	800448a <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8005c7a:	b958      	cbnz	r0, 8005c94 <VL53L0X_GetWrapAroundCheckEnable+0x2a>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005c7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c80:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		if (data & (0x01 << 7))
 8005c84:	061b      	lsls	r3, r3, #24
			*pWrapAroundCheckEnable = 0x01;
 8005c86:	bf46      	itte	mi
 8005c88:	2301      	movmi	r3, #1
 8005c8a:	7023      	strbmi	r3, [r4, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
 8005c8c:	7020      	strbpl	r0, [r4, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005c8e:	7823      	ldrb	r3, [r4, #0]
 8005c90:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c94:	b003      	add	sp, #12
 8005c96:	bd30      	pop	{r4, r5, pc}

08005c98 <VL53L0X_GetDeviceParameters>:
{
 8005c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005c9c:	7c03      	ldrb	r3, [r0, #16]
{
 8005c9e:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005ca0:	f801 3b08 	strb.w	r3, [r1], #8
{
 8005ca4:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005ca6:	f7ff fefc 	bl	8005aa2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8005caa:	bb38      	cbnz	r0, 8005cfc <VL53L0X_GetDeviceParameters+0x64>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005cac:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005cae:	f104 0110 	add.w	r1, r4, #16
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f7ff ff13 	bl	8005ade <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8005cb8:	bb00      	cbnz	r0, 8005cfc <VL53L0X_GetDeviceParameters+0x64>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005cba:	f104 0114 	add.w	r1, r4, #20
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 fbd3 	bl	800646a <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8005cc4:	b9d0      	cbnz	r0, 8005cfc <VL53L0X_GetDeviceParameters+0x64>
 8005cc6:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8005cca:	f104 0818 	add.w	r8, r4, #24
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005cce:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005cd0:	463a      	mov	r2, r7
 8005cd2:	b2b1      	uxth	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7ff ff93 	bl	8005c00 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8005cda:	b978      	cbnz	r0, 8005cfc <VL53L0X_GetDeviceParameters+0x64>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005cdc:	19ab      	adds	r3, r5, r6
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005cde:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
		*pLimitCheckEnable = Temp8;
 8005ce4:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ce8:	2e06      	cmp	r6, #6
 8005cea:	f107 0704 	add.w	r7, r7, #4
 8005cee:	d1ef      	bne.n	8005cd0 <VL53L0X_GetDeviceParameters+0x38>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005cf0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f7ff ffb8 	bl	8005c6a <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005cfa:	b108      	cbz	r0, 8005d00 <VL53L0X_GetDeviceParameters+0x68>
}
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005d00:	1d21      	adds	r1, r4, #4
 8005d02:	4628      	mov	r0, r5
}
 8005d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005d08:	f001 bce2 	b.w	80076d0 <VL53L0X_get_measurement_timing_budget_micro_seconds>

08005d0c <VL53L0X_DataInit>:
{
 8005d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005d0e:	2200      	movs	r2, #0
{
 8005d10:	4605      	mov	r5, r0
 8005d12:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005d14:	2188      	movs	r1, #136	; 0x88
 8005d16:	f7fe fc47 	bl	80045a8 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d1e:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005d22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d26:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005d2a:	4a31      	ldr	r2, [pc, #196]	; (8005df0 <VL53L0X_DataInit+0xe4>)
 8005d2c:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005d30:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005d32:	4a30      	ldr	r2, [pc, #192]	; (8005df4 <VL53L0X_DataInit+0xe8>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005d34:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005d38:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005d3c:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005d3e:	4669      	mov	r1, sp
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7ff ffa9 	bl	8005c98 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8005d46:	4607      	mov	r7, r0
 8005d48:	b970      	cbnz	r0, 8005d68 <VL53L0X_DataInit+0x5c>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005d4a:	f8ad 0000 	strh.w	r0, [sp]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005d4e:	466c      	mov	r4, sp
 8005d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d52:	f105 0610 	add.w	r6, r5, #16
 8005d56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005d64:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005d68:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <VL53L0X_DataInit+0xec>)
 8005d6a:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005d6e:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <VL53L0X_DataInit+0xf0>)
 8005d70:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005d74:	2301      	movs	r3, #1
 8005d76:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005d7a:	2400      	movs	r4, #0
		if (Status == VL53L0X_ERROR_NONE)
 8005d7c:	bbaf      	cbnz	r7, 8005dea <VL53L0X_DataInit+0xde>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005d7e:	b2a1      	uxth	r1, r4
 8005d80:	2201      	movs	r2, #1
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff fec2 	bl	8005b0c <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005d88:	3401      	adds	r4, #1
 8005d8a:	2c06      	cmp	r4, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005d8c:	4607      	mov	r7, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005d8e:	d1f5      	bne.n	8005d7c <VL53L0X_DataInit+0x70>
	if (Status == VL53L0X_ERROR_NONE)
 8005d90:	bb58      	cbnz	r0, 8005dea <VL53L0X_DataInit+0xde>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d92:	8568      	strh	r0, [r5, #42]	; 0x2a
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005d94:	4602      	mov	r2, r0
 8005d96:	2104      	movs	r1, #4
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f7ff feb7 	bl	8005b0c <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005d9e:	4607      	mov	r7, r0
 8005da0:	bb18      	cbnz	r0, 8005dea <VL53L0X_DataInit+0xde>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005da2:	4602      	mov	r2, r0
 8005da4:	2105      	movs	r1, #5
 8005da6:	4628      	mov	r0, r5
 8005da8:	f7ff feb0 	bl	8005b0c <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005dac:	4607      	mov	r7, r0
 8005dae:	b9e0      	cbnz	r0, 8005dea <VL53L0X_DataInit+0xde>
 8005db0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005db4:	636b      	str	r3, [r5, #52]	; 0x34
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f7ff fef2 	bl	8005ba6 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005dc2:	4607      	mov	r7, r0
 8005dc4:	b988      	cbnz	r0, 8005dea <VL53L0X_DataInit+0xde>
 8005dc6:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005dca:	22ff      	movs	r2, #255	; 0xff
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005dcc:	e9c5 300f 	strd	r3, r0, [r5, #60]	; 0x3c
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005dd0:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f7fe fbe6 	bl	80045a8 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8005de2:	4607      	mov	r7, r0
 8005de4:	b908      	cbnz	r0, 8005dea <VL53L0X_DataInit+0xde>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005de6:	f885 0115 	strb.w	r0, [r5, #277]	; 0x115
}
 8005dea:	4638      	mov	r0, r7
 8005dec:	b011      	add	sp, #68	; 0x44
 8005dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df0:	00016b85 	.word	0x00016b85
 8005df4:	000970a4 	.word	0x000970a4
 8005df8:	03840064 	.word	0x03840064
 8005dfc:	0a0001f4 	.word	0x0a0001f4

08005e00 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005e00:	2301      	movs	r3, #1
 8005e02:	f000 bd5b 	b.w	80068bc <VL53L0X_perform_ref_calibration>

08005e06 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0a:	b08e      	sub	sp, #56	; 0x38
 8005e0c:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005e0e:	230c      	movs	r3, #12
 8005e10:	aa04      	add	r2, sp, #16
 8005e12:	2114      	movs	r1, #20
{
 8005e14:	4606      	mov	r6, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005e16:	f7fe fb6b 	bl	80044f0 <VL53L0X_ReadMulti>
 8005e1a:	4684      	mov	ip, r0

	if (Status == VL53L0X_ERROR_NONE) {
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d175      	bne.n	8005f0c <VL53L0X_GetRangingMeasurementData+0x106>
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005e20:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005e24:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005e28:	f89d 1018 	ldrb.w	r1, [sp, #24]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005e2c:	f89d 501a 	ldrb.w	r5, [sp, #26]
 8005e30:	f89d 701b 	ldrb.w	r7, [sp, #27]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005e34:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005e36:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005e3a:	f89d 3019 	ldrb.w	r3, [sp, #25]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005e3e:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005e40:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005e48:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e4a:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8005e4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005e52:	6060      	str	r0, [r4, #4]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005e54:	eb07 2705 	add.w	r7, r7, r5, lsl #8
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e58:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005e5c:	b292      	uxth	r2, r2
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005e5e:	f8b6 514e 	ldrh.w	r5, [r6, #334]	; 0x14e
		DeviceRangeStatus = localBuffer[0];
 8005e62:	f89d 1010 	ldrb.w	r1, [sp, #16]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005e66:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e68:	b29b      	uxth	r3, r3
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005e6a:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005e6c:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005e6e:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005e72:	b2bf      	uxth	r7, r7
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005e74:	f896 c131 	ldrb.w	ip, [r6, #305]	; 0x131
		if (LinearityCorrectiveGain != 1000) {
 8005e78:	d00c      	beq.n	8005e94 <VL53L0X_GetRangingMeasurementData+0x8e>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005e7a:	fb07 f005 	mul.w	r0, r7, r5
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005e7e:	7f37      	ldrb	r7, [r6, #28]
				* tmpuint16 + 500) / 1000);
 8005e80:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005e84:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8005e88:	fb90 f0f5 	sdiv	r0, r0, r5
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005e8c:	6a35      	ldr	r5, [r6, #32]
			if (XTalkCompensationEnable) {
 8005e8e:	2f00      	cmp	r7, #0
 8005e90:	d140      	bne.n	8005f14 <VL53L0X_GetRangingMeasurementData+0x10e>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8005e92:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8005e94:	f1bc 0f00 	cmp.w	ip, #0
 8005e98:	d046      	beq.n	8005f28 <VL53L0X_GetRangingMeasurementData+0x122>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005e9a:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8005e9c:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005e9e:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005ea0:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005ea2:	f10d 000f 	add.w	r0, sp, #15
 8005ea6:	e9cd 4000 	strd	r4, r0, [sp]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f001 fe40 	bl	8007b30 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005eb0:	4684      	mov	ip, r0
 8005eb2:	bb58      	cbnz	r0, 8005f0c <VL53L0X_GetRangingMeasurementData+0x106>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005eb4:	f89d e00f 	ldrb.w	lr, [sp, #15]
 8005eb8:	f884 e018 	strb.w	lr, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005ebc:	f106 0550 	add.w	r5, r6, #80	; 0x50
 8005ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ec2:	af07      	add	r7, sp, #28
 8005ec4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005ec6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005eca:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005ece:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005ed2:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
			pRangingMeasurementData->RangeMilliMeter;
 8005ed6:	f8b4 a008 	ldrh.w	sl, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart;
 8005eda:	7de3      	ldrb	r3, [r4, #23]
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005edc:	f8b4 900a 	ldrh.w	r9, [r4, #10]
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005ee0:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005ee4:	6860      	ldr	r0, [r4, #4]
 8005ee6:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
 8005eea:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 8005eee:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8005ef2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8005ef6:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 8005efa:	ac07      	add	r4, sp, #28
 8005efc:	9008      	str	r0, [sp, #32]
 8005efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f00:	3650      	adds	r6, #80	; 0x50
 8005f02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005f04:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005f08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005f0c:	4660      	mov	r0, ip
 8005f0e:	b00e      	add	sp, #56	; 0x38
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					* EffectiveSpadRtnCount) >> 8))
 8005f14:	b2ad      	uxth	r5, r5
 8005f16:	435d      	muls	r5, r3
 8005f18:	122d      	asrs	r5, r5, #8
				if ((SignalRate
 8005f1a:	42aa      	cmp	r2, r5
 8005f1c:	d107      	bne.n	8005f2e <VL53L0X_GetRangingMeasurementData+0x128>
					if (RangeFractionalEnable)
 8005f1e:	f1bc 0f00 	cmp.w	ip, #0
 8005f22:	d10a      	bne.n	8005f3a <VL53L0X_GetRangingMeasurementData+0x134>
						XtalkRangeMilliMeter = 8888
 8005f24:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005f28:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e7b8      	b.n	8005ea0 <VL53L0X_GetRangingMeasurementData+0x9a>
					(tmpuint16 * SignalRate)
 8005f2e:	b280      	uxth	r0, r0
 8005f30:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 8005f32:	1b55      	subs	r5, r2, r5
						/ (SignalRate
 8005f34:	fbb0 f0f5 	udiv	r0, r0, r5
 8005f38:	e7ab      	b.n	8005e92 <VL53L0X_GetRangingMeasurementData+0x8c>
						XtalkRangeMilliMeter = 8888;
 8005f3a:	f242 27b8 	movw	r7, #8888	; 0x22b8
 8005f3e:	e7ac      	b.n	8005e9a <VL53L0X_GetRangingMeasurementData+0x94>

08005f40 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f42:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005f44:	210e      	movs	r1, #14
 8005f46:	f10d 0206 	add.w	r2, sp, #6
{
 8005f4a:	461d      	mov	r5, r3
 8005f4c:	4606      	mov	r6, r0
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005f4e:	4c0b      	ldr	r4, [pc, #44]	; (8005f7c <VL53L0X_GetInterruptThresholds+0x3c>)
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005f50:	f7fe fae4 	bl	800451c <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005f54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005f58:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8005f5c:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005f5e:	b950      	cbnz	r0, 8005f76 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005f60:	f10d 0206 	add.w	r2, sp, #6
 8005f64:	210c      	movs	r1, #12
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7fe fad8 	bl	800451c <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005f6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005f70:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8005f74:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005f76:	b003      	add	sp, #12
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	1ffe0000 	.word	0x1ffe0000

08005f80 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8005f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005f82:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 8005f86:	3b01      	subs	r3, #1
 8005f88:	2b02      	cmp	r3, #2
{
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 8005f8e:	d833      	bhi.n	8005ff8 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005f90:	ab01      	add	r3, sp, #4
 8005f92:	466a      	mov	r2, sp
 8005f94:	2101      	movs	r1, #1
 8005f96:	f7ff ffd3 	bl	8005f40 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8005f9a:	9b00      	ldr	r3, [sp, #0]
 8005f9c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005fa0:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 8005fa2:	d803      	bhi.n	8005fac <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005faa:	d906      	bls.n	8005fba <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8005fac:	b92d      	cbnz	r5, 8005fba <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8005fae:	b13c      	cbz	r4, 8005fc0 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005fb0:	4912      	ldr	r1, [pc, #72]	; (8005ffc <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f001 fbf1 	bl	800779a <VL53L0X_load_tuning_settings>
 8005fb8:	4605      	mov	r5, r0
}
 8005fba:	4628      	mov	r0, r5
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	21ff      	movs	r1, #255	; 0xff
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f7fe faef 	bl	80045a8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005fca:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005fcc:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005fce:	2170      	movs	r1, #112	; 0x70
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f7fe fae9 	bl	80045a8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005fd6:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005fd8:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005fda:	21ff      	movs	r1, #255	; 0xff
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7fe fae3 	bl	80045a8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005fe2:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005fe4:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	2180      	movs	r1, #128	; 0x80
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7fe fadc 	bl	80045a8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ff0:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005ff2:	4320      	orrs	r0, r4
 8005ff4:	b245      	sxtb	r5, r0
 8005ff6:	e7e0      	b.n	8005fba <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ff8:	2500      	movs	r5, #0
 8005ffa:	e7de      	b.n	8005fba <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8005ffc:	200002d4 	.word	0x200002d4

08006000 <VL53L0X_StartMeasurement>:
{
 8006000:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch (DeviceMode) {
 8006002:	7c01      	ldrb	r1, [r0, #16]
 8006004:	2901      	cmp	r1, #1
{
 8006006:	4604      	mov	r4, r0
	switch (DeviceMode) {
 8006008:	d028      	beq.n	800605c <VL53L0X_StartMeasurement+0x5c>
 800600a:	d304      	bcc.n	8006016 <VL53L0X_StartMeasurement+0x16>
 800600c:	2903      	cmp	r1, #3
 800600e:	d032      	beq.n	8006076 <VL53L0X_StartMeasurement+0x76>
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006010:	f06f 0007 	mvn.w	r0, #7
 8006014:	e007      	b.n	8006026 <VL53L0X_StartMeasurement+0x26>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006016:	2201      	movs	r2, #1
 8006018:	2100      	movs	r1, #0
 800601a:	f7fe fac5 	bl	80045a8 <VL53L0X_WrByte>
		Byte = StartStopByte;
 800601e:	2301      	movs	r3, #1
 8006020:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8006024:	b198      	cbz	r0, 800604e <VL53L0X_StartMeasurement+0x4e>
}
 8006026:	b003      	add	sp, #12
 8006028:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 800602a:	4601      	mov	r1, r0
 800602c:	f10d 0207 	add.w	r2, sp, #7
 8006030:	4620      	mov	r0, r4
 8006032:	f7fe fa2a 	bl	800448a <VL53L0X_RdByte>
			} while (((Byte & StartStopByte) == StartStopByte)
 8006036:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800603a:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 800603c:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006040:	d507      	bpl.n	8006052 <VL53L0X_StartMeasurement+0x52>
				&& (Status == VL53L0X_ERROR_NONE)
 8006042:	b930      	cbnz	r0, 8006052 <VL53L0X_StartMeasurement+0x52>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006044:	2dc8      	cmp	r5, #200	; 0xc8
 8006046:	d1f0      	bne.n	800602a <VL53L0X_StartMeasurement+0x2a>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006048:	f06f 0006 	mvn.w	r0, #6
 800604c:	e7eb      	b.n	8006026 <VL53L0X_StartMeasurement+0x26>
			LoopNb = 0;
 800604e:	4605      	mov	r5, r0
 8006050:	e7f1      	b.n	8006036 <VL53L0X_StartMeasurement+0x36>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006052:	2dc8      	cmp	r5, #200	; 0xc8
 8006054:	bf08      	it	eq
 8006056:	f06f 0006 	mvneq.w	r0, #6
 800605a:	e7e4      	b.n	8006026 <VL53L0X_StartMeasurement+0x26>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800605c:	f7ff ff90 	bl	8005f80 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8006060:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8006062:	2100      	movs	r1, #0
 8006064:	4620      	mov	r0, r4
 8006066:	f7fe fa9f 	bl	80045a8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800606a:	2800      	cmp	r0, #0
 800606c:	d1db      	bne.n	8006026 <VL53L0X_StartMeasurement+0x26>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800606e:	2304      	movs	r3, #4
 8006070:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8006074:	e7d7      	b.n	8006026 <VL53L0X_StartMeasurement+0x26>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006076:	2101      	movs	r1, #1
 8006078:	f7ff ff82 	bl	8005f80 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 800607c:	2204      	movs	r2, #4
 800607e:	e7f0      	b.n	8006062 <VL53L0X_StartMeasurement+0x62>

08006080 <VL53L0X_PerformSingleMeasurement>:
{
 8006080:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006082:	7c05      	ldrb	r5, [r0, #16]
{
 8006084:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006086:	b125      	cbz	r5, 8006092 <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fd5a 	bl	8006b42 <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 800608e:	b128      	cbz	r0, 800609c <VL53L0X_PerformSingleMeasurement+0x1c>
}
 8006090:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8006092:	f7ff ffb5 	bl	8006000 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8006096:	2800      	cmp	r0, #0
 8006098:	d0f6      	beq.n	8006088 <VL53L0X_PerformSingleMeasurement+0x8>
 800609a:	e7f9      	b.n	8006090 <VL53L0X_PerformSingleMeasurement+0x10>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800609c:	2d00      	cmp	r5, #0
 800609e:	d1f7      	bne.n	8006090 <VL53L0X_PerformSingleMeasurement+0x10>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80060a0:	2303      	movs	r3, #3
 80060a2:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 80060a6:	e7f3      	b.n	8006090 <VL53L0X_PerformSingleMeasurement+0x10>

080060a8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80060a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060aa:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80060ac:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 80060ae:	2201      	movs	r2, #1
 80060b0:	210b      	movs	r1, #11
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7fe fa78 	bl	80045a8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80060b8:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 80060ba:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 80060bc:	210b      	movs	r1, #11
 80060be:	4630      	mov	r0, r6
 80060c0:	f7fe fa72 	bl	80045a8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80060c4:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 80060c8:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 80060ca:	2113      	movs	r1, #19
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7fe f9dc 	bl	800448a <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80060d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 80060d6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 80060d8:	4320      	orrs	r0, r4
		LoopCount++;
 80060da:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 80060dc:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 80060de:	b240      	sxtb	r0, r0
		LoopCount++;
 80060e0:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 80060e2:	d005      	beq.n	80060f0 <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 80060e4:	2d03      	cmp	r5, #3
 80060e6:	d008      	beq.n	80060fa <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d0e0      	beq.n	80060ae <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 80060ec:	b002      	add	sp, #8
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80060f0:	2d03      	cmp	r5, #3
 80060f2:	bf08      	it	eq
 80060f4:	f06f 000b 	mvneq.w	r0, #11
 80060f8:	e7f8      	b.n	80060ec <VL53L0X_ClearInterruptMask+0x44>
 80060fa:	f06f 000b 	mvn.w	r0, #11
 80060fe:	e7f5      	b.n	80060ec <VL53L0X_ClearInterruptMask+0x44>

08006100 <VL53L0X_PerformSingleRangingMeasurement>:
{
 8006100:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006102:	2300      	movs	r3, #0
 8006104:	7403      	strb	r3, [r0, #16]
{
 8006106:	4604      	mov	r4, r0
 8006108:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800610a:	f7ff ffb9 	bl	8006080 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 800610e:	b950      	cbnz	r0, 8006126 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006110:	4629      	mov	r1, r5
 8006112:	4620      	mov	r0, r4
 8006114:	f7ff fe77 	bl	8005e06 <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8006118:	b928      	cbnz	r0, 8006126 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800611a:	4601      	mov	r1, r0
 800611c:	4620      	mov	r0, r4
}
 800611e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006122:	f7ff bfc1 	b.w	80060a8 <VL53L0X_ClearInterruptMask>
}
 8006126:	bd38      	pop	{r3, r4, r5, pc}

08006128 <VL53L0X_SetGpioConfig.part.2>:
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006128:	2915      	cmp	r1, #21
VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
 800612a:	b570      	push	{r4, r5, r6, lr}
 800612c:	4605      	mov	r5, r0
 800612e:	4614      	mov	r4, r2
 8006130:	461e      	mov	r6, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006132:	d167      	bne.n	8006204 <VL53L0X_SetGpioConfig.part.2+0xdc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006134:	2201      	movs	r2, #1
 8006136:	21ff      	movs	r1, #255	; 0xff
 8006138:	f7fe fa36 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800613c:	2200      	movs	r2, #0
 800613e:	4611      	mov	r1, r2
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006140:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006142:	4628      	mov	r0, r5
 8006144:	f7fe fa30 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006148:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800614a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800614c:	21ff      	movs	r1, #255	; 0xff
 800614e:	4628      	mov	r0, r5
 8006150:	f7fe fa2a 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006154:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006156:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006158:	2201      	movs	r2, #1
 800615a:	2180      	movs	r1, #128	; 0x80
 800615c:	4628      	mov	r0, r5
 800615e:	f7fe fa23 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006162:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006164:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006166:	2202      	movs	r2, #2
 8006168:	2185      	movs	r1, #133	; 0x85
 800616a:	4628      	mov	r0, r5
 800616c:	f7fe fa1c 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006170:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006172:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006174:	2204      	movs	r2, #4
 8006176:	21ff      	movs	r1, #255	; 0xff
 8006178:	4628      	mov	r0, r5
 800617a:	f7fe fa15 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800617e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006180:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006182:	2200      	movs	r2, #0
 8006184:	21cd      	movs	r1, #205	; 0xcd
 8006186:	4628      	mov	r0, r5
 8006188:	f7fe fa0e 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800618c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800618e:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006190:	2211      	movs	r2, #17
 8006192:	21cc      	movs	r1, #204	; 0xcc
 8006194:	4628      	mov	r0, r5
 8006196:	f7fe fa07 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800619a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800619c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800619e:	2207      	movs	r2, #7
 80061a0:	21ff      	movs	r1, #255	; 0xff
 80061a2:	4628      	mov	r0, r5
 80061a4:	f7fe fa00 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80061a8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80061aa:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80061ac:	2200      	movs	r2, #0
 80061ae:	21be      	movs	r1, #190	; 0xbe
 80061b0:	4628      	mov	r0, r5
 80061b2:	f7fe f9f9 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80061b6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80061b8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80061ba:	2206      	movs	r2, #6
 80061bc:	21ff      	movs	r1, #255	; 0xff
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fe f9f2 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80061c4:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80061c6:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80061c8:	2209      	movs	r2, #9
 80061ca:	21cc      	movs	r1, #204	; 0xcc
 80061cc:	4628      	mov	r0, r5
 80061ce:	f7fe f9eb 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80061d2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80061d4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061d6:	2200      	movs	r2, #0
 80061d8:	21ff      	movs	r1, #255	; 0xff
 80061da:	4628      	mov	r0, r5
 80061dc:	f7fe f9e4 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80061e0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061e2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80061e4:	2201      	movs	r2, #1
 80061e6:	21ff      	movs	r1, #255	; 0xff
 80061e8:	4628      	mov	r0, r5
 80061ea:	f7fe f9dd 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061ee:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061f0:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80061f2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061f4:	4611      	mov	r1, r2
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7fe f9d6 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80061fc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061fe:	4320      	orrs	r0, r4
 8006200:	b240      	sxtb	r0, r0
}
 8006202:	bd70      	pop	{r4, r5, r6, pc}
			switch (Functionality) {
 8006204:	2a04      	cmp	r2, #4
 8006206:	d826      	bhi.n	8006256 <VL53L0X_SetGpioConfig.part.2+0x12e>
 8006208:	e8df f002 	tbb	[pc, r2]
 800620c:	031d1f21 	.word	0x031d1f21
 8006210:	23          	.byte	0x23
 8006211:	00          	.byte	0x00
				data = 0x03;
 8006212:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8006214:	210a      	movs	r1, #10
 8006216:	4628      	mov	r0, r5
 8006218:	f7fe f9c6 	bl	80045a8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800621c:	2800      	cmp	r0, #0
 800621e:	d1f0      	bne.n	8006202 <VL53L0X_SetGpioConfig.part.2+0xda>
				data = (uint8_t)(1 << 4);
 8006220:	2e00      	cmp	r6, #0
			Status = VL53L0X_UpdateByte(Dev,
 8006222:	bf14      	ite	ne
 8006224:	2310      	movne	r3, #16
 8006226:	2300      	moveq	r3, #0
 8006228:	22ef      	movs	r2, #239	; 0xef
 800622a:	2184      	movs	r1, #132	; 0x84
 800622c:	4628      	mov	r0, r5
 800622e:	f7fe f9dd 	bl	80045ec <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006232:	2800      	cmp	r0, #0
 8006234:	d1e5      	bne.n	8006202 <VL53L0X_SetGpioConfig.part.2+0xda>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006236:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800623a:	4601      	mov	r1, r0
 800623c:	4628      	mov	r0, r5
}
 800623e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006242:	f7ff bf31 	b.w	80060a8 <VL53L0X_ClearInterruptMask>
				data = 0x02;
 8006246:	2202      	movs	r2, #2
 8006248:	e7e4      	b.n	8006214 <VL53L0X_SetGpioConfig.part.2+0xec>
				data = 0x01;
 800624a:	2201      	movs	r2, #1
 800624c:	e7e2      	b.n	8006214 <VL53L0X_SetGpioConfig.part.2+0xec>
				data = 0x00;
 800624e:	2200      	movs	r2, #0
 8006250:	e7e0      	b.n	8006214 <VL53L0X_SetGpioConfig.part.2+0xec>
				data = 0x04;
 8006252:	2204      	movs	r2, #4
 8006254:	e7de      	b.n	8006214 <VL53L0X_SetGpioConfig.part.2+0xec>
				Status =
 8006256:	f06f 000a 	mvn.w	r0, #10
 800625a:	e7d2      	b.n	8006202 <VL53L0X_SetGpioConfig.part.2+0xda>

0800625c <VL53L0X_StaticInit>:
{
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	b094      	sub	sp, #80	; 0x50
 8006260:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006262:	2240      	movs	r2, #64	; 0x40
 8006264:	2100      	movs	r1, #0
 8006266:	a804      	add	r0, sp, #16
 8006268:	f01c f861 	bl	802232e <memset>
	uint16_t tempword = 0;
 800626c:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 800626e:	2101      	movs	r1, #1
 8006270:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 8006272:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t tempbyte = 0;
 8006276:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t isApertureSpads = 0;
 800627a:	f88d 3004 	strb.w	r3, [sp, #4]
	uint32_t refSpadCount = 0;
 800627e:	9302      	str	r3, [sp, #8]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006280:	f000 fcad 	bl	8006bde <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006284:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 8006288:	2a01      	cmp	r2, #1
 800628a:	d806      	bhi.n	800629a <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800628c:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8006290:	f040 80ad 	bne.w	80063ee <VL53L0X_StaticInit+0x192>
		((ApertureSpads == 1) && (count > 32)) ||
 8006294:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 8006296:	f240 80ac 	bls.w	80063f2 <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800629a:	aa01      	add	r2, sp, #4
 800629c:	a902      	add	r1, sp, #8
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 fb27 	bl	80068f2 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80062a4:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80062a6:	2800      	cmp	r0, #0
 80062a8:	f040 809e 	bne.w	80063e8 <VL53L0X_StaticInit+0x18c>
		if (UseInternalTuningSettings == 0)
 80062ac:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 80a2 	bne.w	80063fa <VL53L0X_StaticInit+0x19e>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80062b6:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80062ba:	4628      	mov	r0, r5
 80062bc:	f001 fa6d 	bl	800779a <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 80062c0:	4604      	mov	r4, r0
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f040 8090 	bne.w	80063e8 <VL53L0X_StaticInit+0x18c>
 80062c8:	4623      	mov	r3, r4
 80062ca:	4621      	mov	r1, r4
 80062cc:	2204      	movs	r2, #4
 80062ce:	4628      	mov	r0, r5
 80062d0:	f7ff ff2a 	bl	8006128 <VL53L0X_SetGpioConfig.part.2>
	if (Status == VL53L0X_ERROR_NONE) {
 80062d4:	4604      	mov	r4, r0
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f040 8086 	bne.w	80063e8 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062dc:	2201      	movs	r2, #1
 80062de:	21ff      	movs	r1, #255	; 0xff
 80062e0:	4628      	mov	r0, r5
 80062e2:	f7fe f961 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80062e6:	f10d 0206 	add.w	r2, sp, #6
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062ea:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80062ec:	2184      	movs	r1, #132	; 0x84
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7fe f914 	bl	800451c <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80062f4:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80062f6:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80062f8:	21ff      	movs	r1, #255	; 0xff
 80062fa:	4628      	mov	r0, r5
 80062fc:	f7fe f954 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006300:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006302:	4330      	orrs	r0, r6
 8006304:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8006306:	2c00      	cmp	r4, #0
 8006308:	d16e      	bne.n	80063e8 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800630a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006314:	a904      	add	r1, sp, #16
 8006316:	4628      	mov	r0, r5
 8006318:	f7ff fcbe 	bl	8005c98 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 800631c:	4604      	mov	r4, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	d162      	bne.n	80063e8 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006322:	f10d 0103 	add.w	r1, sp, #3
 8006326:	4628      	mov	r0, r5
 8006328:	f7ff fb24 	bl	8005974 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 800632c:	4604      	mov	r4, r0
 800632e:	2800      	cmp	r0, #0
 8006330:	d15a      	bne.n	80063e8 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006332:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006336:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800633a:	ae04      	add	r6, sp, #16
 800633c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800633e:	f105 0410 	add.w	r4, r5, #16
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006348:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800634a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800634c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8006354:	f10d 0203 	add.w	r2, sp, #3
 8006358:	2101      	movs	r1, #1
 800635a:	4628      	mov	r0, r5
 800635c:	f7fe f895 	bl	800448a <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006360:	4604      	mov	r4, r0
 8006362:	2800      	cmp	r0, #0
 8006364:	d140      	bne.n	80063e8 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006366:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800636a:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800636e:	4602      	mov	r2, r0
 8006370:	4601      	mov	r1, r0
 8006372:	4628      	mov	r0, r5
 8006374:	f7ff fb10 	bl	8005998 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8006378:	4604      	mov	r4, r0
 800637a:	bba8      	cbnz	r0, 80063e8 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800637c:	4602      	mov	r2, r0
 800637e:	2102      	movs	r1, #2
 8006380:	4628      	mov	r0, r5
 8006382:	f7ff fb09 	bl	8005998 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8006386:	4604      	mov	r4, r0
 8006388:	bb70      	cbnz	r0, 80063e8 <VL53L0X_StaticInit+0x18c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800638a:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800638c:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800638e:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006392:	f10d 0205 	add.w	r2, sp, #5
 8006396:	4628      	mov	r0, r5
 8006398:	f001 f91e 	bl	80075d8 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 800639c:	4604      	mov	r4, r0
 800639e:	bb18      	cbnz	r0, 80063e8 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80063a4:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80063a8:	f10d 0205 	add.w	r2, sp, #5
 80063ac:	2101      	movs	r1, #1
 80063ae:	4628      	mov	r0, r5
 80063b0:	f001 f912 	bl	80075d8 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80063b4:	4604      	mov	r4, r0
 80063b6:	b9b8      	cbnz	r0, 80063e8 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80063bc:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 80063c0:	aa03      	add	r2, sp, #12
 80063c2:	2103      	movs	r1, #3
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7ff fb54 	bl	8005a72 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80063ca:	4604      	mov	r4, r0
 80063cc:	b960      	cbnz	r0, 80063e8 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 80063d4:	aa03      	add	r2, sp, #12
 80063d6:	2104      	movs	r1, #4
 80063d8:	4628      	mov	r0, r5
 80063da:	f7ff fb4a 	bl	8005a72 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80063de:	4604      	mov	r4, r0
 80063e0:	b910      	cbnz	r0, 80063e8 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 80063e8:	4620      	mov	r0, r4
 80063ea:	b014      	add	sp, #80	; 0x50
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 80063ee:	290c      	cmp	r1, #12
 80063f0:	e751      	b.n	8006296 <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 f90f 	bl	8006616 <VL53L0X_set_reference_spads>
 80063f8:	e754      	b.n	80062a4 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 80063fa:	4901      	ldr	r1, [pc, #4]	; (8006400 <VL53L0X_StaticInit+0x1a4>)
 80063fc:	e75d      	b.n	80062ba <VL53L0X_StaticInit+0x5e>
 80063fe:	bf00      	nop
 8006400:	2000048a 	.word	0x2000048a

08006404 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006404:	b513      	push	{r0, r1, r4, lr}
 8006406:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006408:	f10d 0207 	add.w	r2, sp, #7
 800640c:	2113      	movs	r1, #19
 800640e:	f7fe f83c 	bl	800448a <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8006412:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 8006416:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 800641a:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 800641e:	bf18      	it	ne
 8006420:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8006424:	6022      	str	r2, [r4, #0]
}
 8006426:	b002      	add	sp, #8
 8006428:	bd10      	pop	{r4, pc}

0800642a <VL53L0X_GetMeasurementDataReady>:
{
 800642a:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 800642c:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8006430:	2b04      	cmp	r3, #4
{
 8006432:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8006434:	d10b      	bne.n	800644e <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006436:	a901      	add	r1, sp, #4
 8006438:	f7ff ffe4 	bl	8006404 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d101      	bne.n	8006446 <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	7023      	strb	r3, [r4, #0]
}
 800644a:	b002      	add	sp, #8
 800644c:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800644e:	aa01      	add	r2, sp, #4
 8006450:	2114      	movs	r1, #20
 8006452:	f7fe f81a 	bl	800448a <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8006456:	2800      	cmp	r0, #0
 8006458:	d1f7      	bne.n	800644a <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 800645a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800645e:	07db      	lsls	r3, r3, #31
 8006460:	d4ef      	bmi.n	8006442 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8006462:	7020      	strb	r0, [r4, #0]
 8006464:	e7f1      	b.n	800644a <VL53L0X_GetMeasurementDataReady+0x20>

08006466 <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006466:	f000 ba44 	b.w	80068f2 <VL53L0X_perform_ref_spad_management>

0800646a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800646a:	b513      	push	{r0, r1, r4, lr}
 800646c:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800646e:	f10d 0206 	add.w	r2, sp, #6
 8006472:	2128      	movs	r1, #40	; 0x28
 8006474:	f7fe f852 	bl	800451c <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006478:	b970      	cbnz	r0, 8006498 <VL53L0X_get_offset_calibration_data_micro_meter+0x2e>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800647a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800647e:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006486:	f04f 02fa 	mov.w	r2, #250	; 0xfa
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800648a:	bf26      	itte	cs
 800648c:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
					* 250;
 8006490:	fb13 f302 	smulbbcs	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006494:	4353      	mulcc	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006496:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 8006498:	b002      	add	sp, #8
 800649a:	bd10      	pop	{r4, pc}

0800649c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 800649e:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	*next = -1;
 80064a2:	f04f 34ff 	mov.w	r4, #4294967295
 80064a6:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 80064a8:	f002 0207 	and.w	r2, r2, #7

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80064ac:	4666      	mov	r6, ip
	uint8_t success = 0;
 80064ae:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80064b0:	428e      	cmp	r6, r1
 80064b2:	d200      	bcs.n	80064b6 <get_next_good_spad+0x1a>
 80064b4:	b107      	cbz	r7, 80064b8 <get_next_good_spad+0x1c>
			}
			dataByte >>= 1;
			fineIndex++;
		}
	}
}
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dataByte = goodSpadArray[coarseIndex];
 80064b8:	5d85      	ldrb	r5, [r0, r6]
		if (coarseIndex == startIndex) {
 80064ba:	4566      	cmp	r6, ip
			dataByte >>= fineOffset;
 80064bc:	bf03      	ittte	eq
 80064be:	4115      	asreq	r5, r2
 80064c0:	b2ed      	uxtbeq	r5, r5
			fineIndex = fineOffset;
 80064c2:	4614      	moveq	r4, r2
		fineIndex = 0;
 80064c4:	463c      	movne	r4, r7
			if ((dataByte & 0x1) == 1) {
 80064c6:	f015 0f01 	tst.w	r5, #1
 80064ca:	d005      	beq.n	80064d8 <get_next_good_spad+0x3c>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80064cc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80064d0:	601c      	str	r4, [r3, #0]
				success = 1;
 80064d2:	2701      	movs	r7, #1
				coarseIndex++) {
 80064d4:	3601      	adds	r6, #1
 80064d6:	e7eb      	b.n	80064b0 <get_next_good_spad+0x14>
			fineIndex++;
 80064d8:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 80064da:	2c08      	cmp	r4, #8
			dataByte >>= 1;
 80064dc:	ea4f 0555 	mov.w	r5, r5, lsr #1
		while (fineIndex < cSpadsPerByte) {
 80064e0:	d1f1      	bne.n	80064c6 <get_next_good_spad+0x2a>
 80064e2:	e7f7      	b.n	80064d4 <get_next_good_spad+0x38>

080064e4 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 80064e6:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80064e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 80064ec:	3000      	adds	r0, #0
 80064ee:	bf18      	it	ne
 80064f0:	2001      	movne	r0, #1
 80064f2:	4770      	bx	lr
 80064f4:	20000580 	.word	0x20000580

080064f8 <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80064f8:	08d3      	lsrs	r3, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 80064fa:	428b      	cmp	r3, r1
	fineIndex = spadIndex % cSpadsPerByte;
 80064fc:	f002 0207 	and.w	r2, r2, #7
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006500:	bf3f      	itttt	cc
 8006502:	2101      	movcc	r1, #1
 8006504:	4091      	lslcc	r1, r2
 8006506:	5cc2      	ldrbcc	r2, [r0, r3]
 8006508:	430a      	orrcc	r2, r1
 800650a:	bf3a      	itte	cc
 800650c:	54c2      	strbcc	r2, [r0, r3]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800650e:	2000      	movcc	r0, #0
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006510:	f06f 0031 	mvncs.w	r0, #49	; 0x31

	return status;
}
 8006514:	4770      	bx	lr

08006516 <set_ref_spad_map>:
	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006516:	460a      	mov	r2, r1
 8006518:	2306      	movs	r3, #6
 800651a:	21b0      	movs	r1, #176	; 0xb0
 800651c:	f7fd bfca 	b.w	80044b4 <VL53L0X_WriteMulti>

08006520 <get_ref_spad_map>:
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006520:	460a      	mov	r2, r1
 8006522:	2306      	movs	r3, #6
 8006524:	21b0      	movs	r1, #176	; 0xb0
 8006526:	f7fd bfe3 	b.w	80044f0 <VL53L0X_ReadMulti>

0800652a <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800652a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652e:	b087      	sub	sp, #28
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006530:	f10d 0918 	add.w	r9, sp, #24
{
 8006534:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006536:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int32_t nextGoodSpad = offset;
 8006538:	f849 4d0c 	str.w	r4, [r9, #-12]!
{
 800653c:	4682      	mov	sl, r0
 800653e:	468b      	mov	fp, r1
 8006540:	9201      	str	r2, [sp, #4]
 8006542:	461d      	mov	r5, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8006544:	f04f 0800 	mov.w	r8, #0
 8006548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800654a:	4598      	cmp	r8, r3
 800654c:	d114      	bne.n	8006578 <enable_ref_spads+0x4e>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800654e:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 8006550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006552:	601c      	str	r4, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006554:	b968      	cbnz	r0, 8006572 <enable_ref_spads+0x48>
		status = set_ref_spad_map(Dev, spadArray);
 8006556:	4629      	mov	r1, r5
 8006558:	4650      	mov	r0, sl
 800655a:	f7ff ffdc 	bl	8006516 <set_ref_spad_map>
 800655e:	4604      	mov	r4, r0


	if (status == VL53L0X_ERROR_NONE) {
 8006560:	b938      	cbnz	r0, 8006572 <enable_ref_spads+0x48>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006562:	ae04      	add	r6, sp, #16
 8006564:	4631      	mov	r1, r6
 8006566:	4650      	mov	r0, sl
 8006568:	f7ff ffda 	bl	8006520 <get_ref_spad_map>

		i = 0;
 800656c:	4623      	mov	r3, r4

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800656e:	429f      	cmp	r7, r3
 8006570:	d11c      	bne.n	80065ac <enable_ref_spads+0x82>
			}
			i++;
		}
	}
	return status;
}
 8006572:	b007      	add	sp, #28
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006578:	464b      	mov	r3, r9
 800657a:	4622      	mov	r2, r4
 800657c:	4639      	mov	r1, r7
 800657e:	9801      	ldr	r0, [sp, #4]
 8006580:	f7ff ff8c 	bl	800649c <get_next_good_spad>
		if (nextGoodSpad == -1) {
 8006584:	9e03      	ldr	r6, [sp, #12]
 8006586:	1c73      	adds	r3, r6, #1
 8006588:	d00d      	beq.n	80065a6 <enable_ref_spads+0x7c>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800658a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800658c:	18f0      	adds	r0, r6, r3
 800658e:	f7ff ffa9 	bl	80064e4 <is_aperture>
 8006592:	4558      	cmp	r0, fp
 8006594:	d107      	bne.n	80065a6 <enable_ref_spads+0x7c>
		enable_spad_bit(spadArray, size, currentSpad);
 8006596:	4632      	mov	r2, r6
 8006598:	4628      	mov	r0, r5
 800659a:	f7ff ffad 	bl	80064f8 <enable_spad_bit>
		currentSpad++;
 800659e:	1c74      	adds	r4, r6, #1
	for (index = 0; index < spadCount; index++) {
 80065a0:	f108 0801 	add.w	r8, r8, #1
 80065a4:	e7d0      	b.n	8006548 <enable_ref_spads+0x1e>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80065a6:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80065aa:	e7d1      	b.n	8006550 <enable_ref_spads+0x26>
			if (spadArray[i] != checkSpadArray[i]) {
 80065ac:	5ce9      	ldrb	r1, [r5, r3]
 80065ae:	5cf2      	ldrb	r2, [r6, r3]
 80065b0:	4291      	cmp	r1, r2
 80065b2:	d101      	bne.n	80065b8 <enable_ref_spads+0x8e>
			i++;
 80065b4:	3301      	adds	r3, #1
 80065b6:	e7da      	b.n	800656e <enable_ref_spads+0x44>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80065b8:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80065bc:	e7d9      	b.n	8006572 <enable_ref_spads+0x48>

080065be <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80065be:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 80065c0:	22c0      	movs	r2, #192	; 0xc0
{
 80065c2:	b088      	sub	sp, #32
 80065c4:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 80065c6:	2101      	movs	r1, #1
{
 80065c8:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80065ca:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
		status = VL53L0X_WrByte(Dev,
 80065ce:	f7fd ffeb 	bl	80045a8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80065d2:	b9f0      	cbnz	r0, 8006612 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80065d4:	a901      	add	r1, sp, #4
 80065d6:	4620      	mov	r0, r4
 80065d8:	f7ff fd92 	bl	8006100 <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80065dc:	b9c8      	cbnz	r0, 8006612 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065de:	2201      	movs	r2, #1
 80065e0:	21ff      	movs	r1, #255	; 0xff
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7fd ffe0 	bl	80045a8 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 80065e8:	b998      	cbnz	r0, 8006612 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 80065ea:	4632      	mov	r2, r6
 80065ec:	21b6      	movs	r1, #182	; 0xb6
 80065ee:	4620      	mov	r0, r4
 80065f0:	f7fd ff94 	bl	800451c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80065f4:	b968      	cbnz	r0, 8006612 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065f6:	4602      	mov	r2, r0
 80065f8:	21ff      	movs	r1, #255	; 0xff
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7fd ffd4 	bl	80045a8 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 8006600:	b938      	cbnz	r0, 8006612 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006602:	462a      	mov	r2, r5
 8006604:	2101      	movs	r1, #1
 8006606:	4620      	mov	r0, r4
 8006608:	f7fd ffce 	bl	80045a8 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800660c:	b908      	cbnz	r0, 8006612 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800660e:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 8006612:	b008      	add	sp, #32
 8006614:	bd70      	pop	{r4, r5, r6, pc}

08006616 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006616:	b570      	push	{r4, r5, r6, lr}
 8006618:	460e      	mov	r6, r1
 800661a:	b088      	sub	sp, #32
 800661c:	4615      	mov	r5, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800661e:	21ff      	movs	r1, #255	; 0xff
 8006620:	2201      	movs	r2, #1
{
 8006622:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006624:	f7fd ffc0 	bl	80045a8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006628:	4602      	mov	r2, r0
 800662a:	b9a8      	cbnz	r0, 8006658 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 800662c:	214f      	movs	r1, #79	; 0x4f
 800662e:	4620      	mov	r0, r4
 8006630:	f7fd ffba 	bl	80045a8 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006634:	b980      	cbnz	r0, 8006658 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8006636:	222c      	movs	r2, #44	; 0x2c
 8006638:	214e      	movs	r1, #78	; 0x4e
 800663a:	4620      	mov	r0, r4
 800663c:	f7fd ffb4 	bl	80045a8 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006640:	4602      	mov	r2, r0
 8006642:	b948      	cbnz	r0, 8006658 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006644:	21ff      	movs	r1, #255	; 0xff
 8006646:	4620      	mov	r0, r4
 8006648:	f7fd ffae 	bl	80045a8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800664c:	b920      	cbnz	r0, 8006658 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 800664e:	22b4      	movs	r2, #180	; 0xb4
 8006650:	21b6      	movs	r1, #182	; 0xb6
 8006652:	4620      	mov	r0, r4
 8006654:	f7fd ffa8 	bl	80045a8 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006658:	2200      	movs	r2, #0
 800665a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800665e:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128

	if (isApertureSpads) {
 8006662:	b9dd      	cbnz	r5, 800669c <VL53L0X_set_reference_spads+0x86>
	uint32_t currentSpadIndex = 0;
 8006664:	462a      	mov	r2, r5
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8006666:	ab07      	add	r3, sp, #28
 8006668:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800666c:	9202      	str	r2, [sp, #8]
 800666e:	2306      	movs	r3, #6
 8006670:	22b4      	movs	r2, #180	; 0xb4
 8006672:	e9cd 3200 	strd	r3, r2, [sp]
 8006676:	4629      	mov	r1, r5
 8006678:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800667c:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff ff52 	bl	800652a <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006686:	b930      	cbnz	r0, 8006696 <VL53L0X_set_reference_spads+0x80>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006688:	2301      	movs	r3, #1
 800668a:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800668e:	f884 6113 	strb.w	r6, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006692:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 8006696:	b008      	add	sp, #32
 8006698:	bd70      	pop	{r4, r5, r6, pc}
			currentSpadIndex++;
 800669a:	3201      	adds	r2, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800669c:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
 80066a0:	f7ff ff20 	bl	80064e4 <is_aperture>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d1de      	bne.n	8006666 <VL53L0X_set_reference_spads+0x50>
 80066a8:	2a2c      	cmp	r2, #44	; 0x2c
 80066aa:	d1f6      	bne.n	800669a <VL53L0X_set_reference_spads+0x84>
 80066ac:	e7db      	b.n	8006666 <VL53L0X_set_reference_spads+0x50>

080066ae <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80066ae:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80066b0:	f041 0201 	orr.w	r2, r1, #1
 80066b4:	2100      	movs	r1, #0
{
 80066b6:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80066b8:	f7fd ff76 	bl	80045a8 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80066bc:	b978      	cbnz	r0, 80066de <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 fa3f 	bl	8006b42 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 80066c4:	b958      	cbnz	r0, 80066de <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80066c6:	4601      	mov	r1, r0
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff fced 	bl	80060a8 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 80066ce:	b930      	cbnz	r0, 80066de <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80066d0:	4602      	mov	r2, r0
 80066d2:	4601      	mov	r1, r0
 80066d4:	4620      	mov	r0, r4

	return Status;
}
 80066d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80066da:	f7fd bf65 	b.w	80045a8 <VL53L0X_WrByte>
}
 80066de:	bd10      	pop	{r4, pc}

080066e0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80066e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 80066e4:	f04f 0b00 	mov.w	fp, #0
{
 80066e8:	4689      	mov	r9, r1
 80066ea:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066ec:	21ff      	movs	r1, #255	; 0xff
 80066ee:	2201      	movs	r2, #1
{
 80066f0:	4605      	mov	r5, r0
 80066f2:	461f      	mov	r7, r3
 80066f4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 80066f8:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 80066fc:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006700:	f7fd ff52 	bl	80045a8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006704:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006706:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006708:	4659      	mov	r1, fp
 800670a:	4628      	mov	r0, r5
 800670c:	f7fd ff4c 	bl	80045a8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006710:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006712:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006714:	21ff      	movs	r1, #255	; 0xff
 8006716:	4628      	mov	r0, r5
 8006718:	f7fd ff46 	bl	80045a8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800671c:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800671e:	4304      	orrs	r4, r0
 8006720:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	d030      	beq.n	800678a <VL53L0X_ref_calibration_io+0xaa>
		if (vhv_enable)
 8006728:	f1ba 0f00 	cmp.w	sl, #0
 800672c:	d006      	beq.n	800673c <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800672e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006730:	21cb      	movs	r1, #203	; 0xcb
 8006732:	4628      	mov	r0, r5
 8006734:	f7fd fea9 	bl	800448a <VL53L0X_RdByte>
 8006738:	4304      	orrs	r4, r0
 800673a:	b264      	sxtb	r4, r4
		if (phase_enable)
 800673c:	b13e      	cbz	r6, 800674e <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800673e:	f10d 0207 	add.w	r2, sp, #7
 8006742:	21ee      	movs	r1, #238	; 0xee
 8006744:	4628      	mov	r0, r5
 8006746:	f7fd fea0 	bl	800448a <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800674a:	4304      	orrs	r4, r0
 800674c:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800674e:	2201      	movs	r2, #1
 8006750:	21ff      	movs	r1, #255	; 0xff
 8006752:	4628      	mov	r0, r5
 8006754:	f7fd ff28 	bl	80045a8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006758:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800675a:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800675c:	2100      	movs	r1, #0
 800675e:	4628      	mov	r0, r5
 8006760:	f7fd ff22 	bl	80045a8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006764:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006766:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006768:	2200      	movs	r2, #0
 800676a:	21ff      	movs	r1, #255	; 0xff
 800676c:	4628      	mov	r0, r5
 800676e:	f7fd ff1b 	bl	80045a8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006772:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006774:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800677a:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800677c:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 8006780:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006782:	7013      	strb	r3, [r2, #0]
}
 8006784:	b003      	add	sp, #12
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 800678a:	f1ba 0f00 	cmp.w	sl, #0
 800678e:	d006      	beq.n	800679e <VL53L0X_ref_calibration_io+0xbe>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006790:	4642      	mov	r2, r8
 8006792:	21cb      	movs	r1, #203	; 0xcb
 8006794:	4628      	mov	r0, r5
 8006796:	f7fd ff07 	bl	80045a8 <VL53L0X_WrByte>
 800679a:	4304      	orrs	r4, r0
 800679c:	b264      	sxtb	r4, r4
		if (phase_enable)
 800679e:	2e00      	cmp	r6, #0
 80067a0:	d0d5      	beq.n	800674e <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80067a2:	463b      	mov	r3, r7
 80067a4:	2280      	movs	r2, #128	; 0x80
 80067a6:	21ee      	movs	r1, #238	; 0xee
 80067a8:	4628      	mov	r0, r5
 80067aa:	f7fd ff1f 	bl	80045ec <VL53L0X_UpdateByte>
 80067ae:	e7cc      	b.n	800674a <VL53L0X_ref_calibration_io+0x6a>

080067b0 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80067b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067b4:	b087      	sub	sp, #28
 80067b6:	4691      	mov	r9, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 80067b8:	2200      	movs	r2, #0
{
 80067ba:	4605      	mov	r5, r0
 80067bc:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 80067be:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80067c2:	461f      	mov	r7, r3
 80067c4:	b31b      	cbz	r3, 800680e <VL53L0X_perform_vhv_calibration+0x5e>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80067c6:	f890 6130 	ldrb.w	r6, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80067ca:	2201      	movs	r2, #1
 80067cc:	4611      	mov	r1, r2
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7fd feea 	bl	80045a8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80067d4:	4604      	mov	r4, r0
 80067d6:	bb58      	cbnz	r0, 8006830 <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80067d8:	2140      	movs	r1, #64	; 0x40
 80067da:	4628      	mov	r0, r5
 80067dc:	f7ff ff67 	bl	80066ae <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80067e0:	4604      	mov	r4, r0
 80067e2:	bb28      	cbnz	r0, 8006830 <VL53L0X_perform_vhv_calibration+0x80>
 80067e4:	f1b9 0f01 	cmp.w	r9, #1
 80067e8:	d113      	bne.n	8006812 <VL53L0X_perform_vhv_calibration+0x62>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80067ea:	f10d 0317 	add.w	r3, sp, #23
 80067ee:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80067f2:	e9cd 8300 	strd	r8, r3, [sp]
 80067f6:	4602      	mov	r2, r0
 80067f8:	4603      	mov	r3, r0
 80067fa:	4649      	mov	r1, r9
 80067fc:	4628      	mov	r0, r5
 80067fe:	f7ff ff6f 	bl	80066e0 <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006802:	b140      	cbz	r0, 8006816 <VL53L0X_perform_vhv_calibration+0x66>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006804:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8006806:	4620      	mov	r0, r4
 8006808:	b007      	add	sp, #28
 800680a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 800680e:	461e      	mov	r6, r3
 8006810:	e7db      	b.n	80067ca <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8006812:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006816:	2f00      	cmp	r7, #0
 8006818:	d0f5      	beq.n	8006806 <VL53L0X_perform_vhv_calibration+0x56>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800681a:	4632      	mov	r2, r6
 800681c:	2101      	movs	r1, #1
 800681e:	4628      	mov	r0, r5
 8006820:	f7fd fec2 	bl	80045a8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006824:	4604      	mov	r4, r0
 8006826:	2800      	cmp	r0, #0
 8006828:	d1ed      	bne.n	8006806 <VL53L0X_perform_vhv_calibration+0x56>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800682a:	f885 6130 	strb.w	r6, [r5, #304]	; 0x130
 800682e:	e7ea      	b.n	8006806 <VL53L0X_perform_vhv_calibration+0x56>
		*pVhvSettings = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	f888 3000 	strb.w	r3, [r8]
 8006836:	e7e6      	b.n	8006806 <VL53L0X_perform_vhv_calibration+0x56>

08006838 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800683c:	4605      	mov	r5, r0
 800683e:	b087      	sub	sp, #28
 8006840:	4688      	mov	r8, r1
 8006842:	4691      	mov	r9, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006844:	461f      	mov	r7, r3
 8006846:	b323      	cbz	r3, 8006892 <VL53L0X_perform_phase_calibration+0x5a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006848:	f890 6130 	ldrb.w	r6, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800684c:	2202      	movs	r2, #2
 800684e:	2101      	movs	r1, #1
 8006850:	4628      	mov	r0, r5
 8006852:	f7fd fea9 	bl	80045a8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006856:	4604      	mov	r4, r0
 8006858:	bb60      	cbnz	r0, 80068b4 <VL53L0X_perform_phase_calibration+0x7c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800685a:	4601      	mov	r1, r0
 800685c:	4628      	mov	r0, r5
 800685e:	f7ff ff26 	bl	80066ae <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006862:	4604      	mov	r4, r0
 8006864:	bb30      	cbnz	r0, 80068b4 <VL53L0X_perform_phase_calibration+0x7c>
 8006866:	f1b9 0f01 	cmp.w	r9, #1
 800686a:	d114      	bne.n	8006896 <VL53L0X_perform_phase_calibration+0x5e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800686c:	f10d 0317 	add.w	r3, sp, #23
 8006870:	e9cd 0902 	strd	r0, r9, [sp, #8]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4602      	mov	r2, r0
 8006878:	4603      	mov	r3, r0
 800687a:	f8cd 8004 	str.w	r8, [sp, #4]
 800687e:	4649      	mov	r1, r9
 8006880:	4628      	mov	r0, r5
 8006882:	f7ff ff2d 	bl	80066e0 <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006886:	b140      	cbz	r0, 800689a <VL53L0X_perform_phase_calibration+0x62>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006888:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 800688a:	4620      	mov	r0, r4
 800688c:	b007      	add	sp, #28
 800688e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 8006892:	461e      	mov	r6, r3
 8006894:	e7da      	b.n	800684c <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 8006896:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800689a:	2f00      	cmp	r7, #0
 800689c:	d0f5      	beq.n	800688a <VL53L0X_perform_phase_calibration+0x52>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800689e:	4632      	mov	r2, r6
 80068a0:	2101      	movs	r1, #1
 80068a2:	4628      	mov	r0, r5
 80068a4:	f7fd fe80 	bl	80045a8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 80068a8:	4604      	mov	r4, r0
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d1ed      	bne.n	800688a <VL53L0X_perform_phase_calibration+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80068ae:	f885 6130 	strb.w	r6, [r5, #304]	; 0x130
 80068b2:	e7ea      	b.n	800688a <VL53L0X_perform_phase_calibration+0x52>
		*pPhaseCal = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	f888 3000 	strb.w	r3, [r8]
 80068ba:	e7e6      	b.n	800688a <VL53L0X_perform_phase_calibration+0x52>

080068bc <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	461e      	mov	r6, r3
 80068c0:	4617      	mov	r7, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80068c2:	2300      	movs	r3, #0
 80068c4:	4632      	mov	r2, r6
{
 80068c6:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80068c8:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
	Status = VL53L0X_perform_vhv_calibration(
 80068cc:	f7ff ff70 	bl	80067b0 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80068d0:	b970      	cbnz	r0, 80068f0 <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 80068d2:	4603      	mov	r3, r0
 80068d4:	4632      	mov	r2, r6
 80068d6:	4639      	mov	r1, r7
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff ffad 	bl	8006838 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80068de:	b938      	cbnz	r0, 80068f0 <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80068e0:	462a      	mov	r2, r5
 80068e2:	2101      	movs	r1, #1
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7fd fe5f 	bl	80045a8 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80068ea:	b908      	cbnz	r0, 80068f0 <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80068ec:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 80068f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068f2 <VL53L0X_perform_ref_spad_management>:
{
 80068f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSpadIndex = 0;
 80068f6:	2300      	movs	r3, #0
{
 80068f8:	b093      	sub	sp, #76	; 0x4c
 80068fa:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80068fe:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8006902:	f8a0 3128 	strh.w	r3, [r0, #296]	; 0x128
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006906:	2201      	movs	r2, #1
 8006908:	21ff      	movs	r1, #255	; 0xff
{
 800690a:	4605      	mov	r5, r0
	int32_t nextGoodSpad = 0;
 800690c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	uint8_t VhvSettings = 0;
 8006910:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	uint8_t PhaseCal = 0;
 8006914:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006918:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800691c:	f7fd fe44 	bl	80045a8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006920:	4604      	mov	r4, r0
 8006922:	2800      	cmp	r0, #0
 8006924:	f040 8106 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		Status = VL53L0X_WrByte(Dev,
 8006928:	4602      	mov	r2, r0
 800692a:	214f      	movs	r1, #79	; 0x4f
 800692c:	4628      	mov	r0, r5
 800692e:	f7fd fe3b 	bl	80045a8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006932:	4604      	mov	r4, r0
 8006934:	2800      	cmp	r0, #0
 8006936:	f040 80fd 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		Status = VL53L0X_WrByte(Dev,
 800693a:	222c      	movs	r2, #44	; 0x2c
 800693c:	214e      	movs	r1, #78	; 0x4e
 800693e:	4628      	mov	r0, r5
 8006940:	f7fd fe32 	bl	80045a8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006944:	4604      	mov	r4, r0
 8006946:	2800      	cmp	r0, #0
 8006948:	f040 80f4 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800694c:	4602      	mov	r2, r0
 800694e:	21ff      	movs	r1, #255	; 0xff
 8006950:	4628      	mov	r0, r5
 8006952:	f7fd fe29 	bl	80045a8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006956:	4604      	mov	r4, r0
 8006958:	2800      	cmp	r0, #0
 800695a:	f040 80eb 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		Status = VL53L0X_WrByte(Dev,
 800695e:	22b4      	movs	r2, #180	; 0xb4
 8006960:	21b6      	movs	r1, #182	; 0xb6
 8006962:	4628      	mov	r0, r5
 8006964:	f7fd fe20 	bl	80045a8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006968:	4604      	mov	r4, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	f040 80e2 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		Status = VL53L0X_WrByte(Dev,
 8006970:	4602      	mov	r2, r0
 8006972:	2180      	movs	r1, #128	; 0x80
 8006974:	4628      	mov	r0, r5
 8006976:	f7fd fe17 	bl	80045a8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800697a:	4604      	mov	r4, r0
 800697c:	2800      	cmp	r0, #0
 800697e:	f040 80d9 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006982:	4603      	mov	r3, r0
 8006984:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 8006988:	a90d      	add	r1, sp, #52	; 0x34
 800698a:	4628      	mov	r0, r5
 800698c:	f7ff ff96 	bl	80068bc <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8006990:	4604      	mov	r4, r0
 8006992:	2800      	cmp	r0, #0
 8006994:	f040 80ce 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		lastSpadIndex = currentSpadIndex;
 8006998:	af12      	add	r7, sp, #72	; 0x48
					Dev->Data.SpadData.RefGoodSpadMap,
 800699a:	f505 7395 	add.w	r3, r5, #298	; 0x12a
		lastSpadIndex = currentSpadIndex;
 800699e:	f847 0d10 	str.w	r0, [r7, #-16]!
					Dev->Data.SpadData.RefGoodSpadMap,
 80069a2:	9307      	str	r3, [sp, #28]
		Status = enable_ref_spads(Dev,
 80069a4:	2303      	movs	r3, #3
 80069a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80069aa:	21b4      	movs	r1, #180	; 0xb4
 80069ac:	2306      	movs	r3, #6
					Dev->Data.SpadData.RefSpadEnables,
 80069ae:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80069b2:	e9cd 3100 	strd	r3, r1, [sp]
 80069b6:	9704      	str	r7, [sp, #16]
 80069b8:	4601      	mov	r1, r0
 80069ba:	464b      	mov	r3, r9
 80069bc:	9a07      	ldr	r2, [sp, #28]
 80069be:	4628      	mov	r0, r5
 80069c0:	f7ff fdb3 	bl	800652a <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 80069c4:	4604      	mov	r4, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f040 80b4 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
		Status = perform_ref_signal_measurement(Dev,
 80069cc:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80069d0:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 80069d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 80069d4:	f7ff fdf3 	bl	80065be <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 80069d8:	4604      	mov	r4, r0
 80069da:	2800      	cmp	r0, #0
 80069dc:	f040 80aa 	bne.w	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
 80069e0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80069e4:	4543      	cmp	r3, r8
 80069e6:	d94d      	bls.n	8006a84 <VL53L0X_perform_ref_spad_management+0x192>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80069e8:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
 80069ec:	f8a5 0128 	strh.w	r0, [r5, #296]	; 0x128
			while ((is_aperture(startSelect + currentSpadIndex)
 80069f0:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 80069f4:	f7ff fd76 	bl	80064e4 <is_aperture>
 80069f8:	b180      	cbz	r0, 8006a1c <VL53L0X_perform_ref_spad_management+0x12a>
			Status = enable_ref_spads(Dev,
 80069fa:	2306      	movs	r3, #6
 80069fc:	22b4      	movs	r2, #180	; 0xb4
 80069fe:	9704      	str	r7, [sp, #16]
 8006a00:	2703      	movs	r7, #3
 8006a02:	e9cd 3200 	strd	r3, r2, [sp]
 8006a06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	9a07      	ldr	r2, [sp, #28]
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4628      	mov	r0, r5
 8006a12:	f7ff fd8a 	bl	800652a <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a16:	b128      	cbz	r0, 8006a24 <VL53L0X_perform_ref_spad_management+0x132>
			Status = perform_ref_signal_measurement(Dev,
 8006a18:	4604      	mov	r4, r0
	return Status;
 8006a1a:	e08b      	b.n	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006a1c:	2e2b      	cmp	r6, #43	; 0x2b
 8006a1e:	d8ec      	bhi.n	80069fa <VL53L0X_perform_ref_spad_management+0x108>
				currentSpadIndex++;
 8006a20:	3601      	adds	r6, #1
 8006a22:	e7e5      	b.n	80069f0 <VL53L0X_perform_ref_spad_management+0xfe>
				Status = perform_ref_signal_measurement(Dev,
 8006a24:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006a28:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 8006a2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 8006a2c:	f7ff fdc7 	bl	80065be <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d1f1      	bne.n	8006a18 <VL53L0X_perform_ref_spad_management+0x126>
 8006a34:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8006a38:	4543      	cmp	r3, r8
 8006a3a:	d97f      	bls.n	8006b3c <VL53L0X_perform_ref_spad_management+0x24a>
					isApertureSpads_int = 1;
 8006a3c:	f04f 0a01 	mov.w	sl, #1
			needAptSpads = 1;
 8006a40:	f04f 0b01 	mov.w	fp, #1
 8006a44:	e022      	b.n	8006a8c <VL53L0X_perform_ref_spad_management+0x19a>
				memcpy(lastSpadArray,
 8006a46:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8006a4a:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
 8006a4e:	9010      	str	r0, [sp, #64]	; 0x40
 8006a50:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			(refSpadCount_int)++;
 8006a54:	9f08      	ldr	r7, [sp, #32]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006a56:	9209      	str	r2, [sp, #36]	; 0x24
 8006a58:	e02a      	b.n	8006ab0 <VL53L0X_perform_ref_spad_management+0x1be>
			(refSpadCount_int)++;
 8006a5a:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 8006a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5e:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a62:	f883 a000 	strb.w	sl, [r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006a66:	2301      	movs	r3, #1
 8006a68:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 8006a7c:	e05a      	b.n	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a7e:	f06f 0431 	mvn.w	r4, #49	; 0x31
 8006a82:	e057      	b.n	8006b34 <VL53L0X_perform_ref_spad_management+0x242>
	uint8_t	 isApertureSpads_int = 0;
 8006a84:	f04f 0a00 	mov.w	sl, #0
	uint32_t refSpadCount_int = 0;
 8006a88:	4657      	mov	r7, sl
			needAptSpads = 0;
 8006a8a:	46d3      	mov	fp, sl
		(peakSignalRateRef < targetRefRate)) {
 8006a8c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a90:	4542      	cmp	r2, r8
 8006a92:	d2e3      	bcs.n	8006a5c <VL53L0X_perform_ref_spad_management+0x16a>
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006a94:	eba2 0208 	sub.w	r2, r2, r8
 8006a98:	2a00      	cmp	r2, #0
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006a9a:	f8d9 0000 	ldr.w	r0, [r9]
 8006a9e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8006aa2:	9010      	str	r0, [sp, #64]	; 0x40
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006aa4:	bfb8      	it	lt
 8006aa6:	4252      	neglt	r2, r2
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006aa8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006aac:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 8006aae:	2703      	movs	r7, #3
			get_next_good_spad(
 8006ab0:	ab0f      	add	r3, sp, #60	; 0x3c
 8006ab2:	4632      	mov	r2, r6
 8006ab4:	2106      	movs	r1, #6
 8006ab6:	9807      	ldr	r0, [sp, #28]
 8006ab8:	f7ff fcf0 	bl	800649c <get_next_good_spad>
			if (nextGoodSpad == -1) {
 8006abc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006abe:	1c73      	adds	r3, r6, #1
 8006ac0:	d0dd      	beq.n	8006a7e <VL53L0X_perform_ref_spad_management+0x18c>
			(refSpadCount_int)++;
 8006ac2:	1c7b      	adds	r3, r7, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006ac4:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
			(refSpadCount_int)++;
 8006ac8:	9308      	str	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006aca:	f7ff fd0b 	bl	80064e4 <is_aperture>
 8006ace:	4558      	cmp	r0, fp
 8006ad0:	4682      	mov	sl, r0
 8006ad2:	d1d4      	bne.n	8006a7e <VL53L0X_perform_ref_spad_management+0x18c>
			Status = enable_spad_bit(
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	2106      	movs	r1, #6
 8006ad8:	4648      	mov	r0, r9
 8006ada:	f7ff fd0d 	bl	80064f8 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d19a      	bne.n	8006a18 <VL53L0X_perform_ref_spad_management+0x126>
				Status = set_ref_spad_map(Dev,
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	4628      	mov	r0, r5
				currentSpadIndex++;
 8006ae6:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 8006ae8:	f7ff fd15 	bl	8006516 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d193      	bne.n	8006a18 <VL53L0X_perform_ref_spad_management+0x126>
			Status = perform_ref_signal_measurement(Dev,
 8006af0:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7ff fd62 	bl	80065be <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d18c      	bne.n	8006a18 <VL53L0X_perform_ref_spad_management+0x126>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006afe:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8006b02:	eba1 0208 	sub.w	r2, r1, r8
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	bfb8      	it	lt
 8006b0a:	4252      	neglt	r2, r2
			if (peakSignalRateRef > targetRefRate) {
 8006b0c:	4541      	cmp	r1, r8
 8006b0e:	d99a      	bls.n	8006a46 <VL53L0X_perform_ref_spad_management+0x154>
				if (signalRateDiff > lastSignalRateDiff) {
 8006b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d9a1      	bls.n	8006a5a <VL53L0X_perform_ref_spad_management+0x168>
					Status = set_ref_spad_map(Dev,
 8006b16:	a910      	add	r1, sp, #64	; 0x40
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f7ff fcfc 	bl	8006516 <set_ref_spad_map>
					memcpy(
 8006b1e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8006b22:	f8a5 1128 	strh.w	r1, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8006b26:	4602      	mov	r2, r0
					memcpy(
 8006b28:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b2a:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	d094      	beq.n	8006a5c <VL53L0X_perform_ref_spad_management+0x16a>
 8006b32:	4614      	mov	r4, r2
}
 8006b34:	4620      	mov	r0, r4
 8006b36:	b013      	add	sp, #76	; 0x4c
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t	 isApertureSpads_int = 0;
 8006b3c:	4682      	mov	sl, r0
	uint32_t refSpadCount_int = 0;
 8006b3e:	4607      	mov	r7, r0
 8006b40:	e77e      	b.n	8006a40 <VL53L0X_perform_ref_spad_management+0x14e>

08006b42 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8006b44:	ad02      	add	r5, sp, #8
 8006b46:	2300      	movs	r3, #0
 8006b48:	f805 3d01 	strb.w	r3, [r5, #-1]!
{
 8006b4c:	4606      	mov	r6, r0
	uint8_t NewDataReady = 0;
 8006b4e:	24c8      	movs	r4, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006b50:	4629      	mov	r1, r5
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff fc69 	bl	800642a <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8006b58:	b958      	cbnz	r0, 8006b72 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d007      	beq.n	8006b72 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006b62:	3c01      	subs	r4, #1
 8006b64:	d003      	beq.n	8006b6e <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8006b66:	4630      	mov	r0, r6
 8006b68:	f7fd fd56 	bl	8004618 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006b6c:	e7f0      	b.n	8006b50 <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006b6e:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8006b72:	b002      	add	sp, #8
 8006b74:	bd70      	pop	{r4, r5, r6, pc}

08006b76 <VL53L0X_isqrt>:
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8006b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006b7a:	4283      	cmp	r3, r0
 8006b7c:	d803      	bhi.n	8006b86 <VL53L0X_isqrt+0x10>
	uint32_t  res = 0;
 8006b7e:	2200      	movs	r2, #0
		bit >>= 2;


	while (bit != 0) {
 8006b80:	b91b      	cbnz	r3, 8006b8a <VL53L0X_isqrt+0x14>

		bit >>= 2;
	}

	return res;
}
 8006b82:	4610      	mov	r0, r2
 8006b84:	4770      	bx	lr
		bit >>= 2;
 8006b86:	089b      	lsrs	r3, r3, #2
 8006b88:	e7f7      	b.n	8006b7a <VL53L0X_isqrt+0x4>
		if (num >= res + bit) {
 8006b8a:	18d1      	adds	r1, r2, r3
 8006b8c:	4281      	cmp	r1, r0
 8006b8e:	ea4f 0252 	mov.w	r2, r2, lsr #1
			res = (res >> 1) + bit;
 8006b92:	bf9c      	itt	ls
 8006b94:	18d2      	addls	r2, r2, r3
			num -= res + bit;
 8006b96:	1a40      	subls	r0, r0, r1
		bit >>= 2;
 8006b98:	089b      	lsrs	r3, r3, #2
 8006b9a:	e7f1      	b.n	8006b80 <VL53L0X_isqrt+0xa>

08006b9c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006b9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2183      	movs	r1, #131	; 0x83
{
 8006ba2:	4606      	mov	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006ba4:	f7fd fd00 	bl	80045a8 <VL53L0X_WrByte>
 8006ba8:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006baa:	b978      	cbnz	r0, 8006bcc <VL53L0X_device_read_strobe+0x30>
 8006bac:	25c8      	movs	r5, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006bae:	f10d 0207 	add.w	r2, sp, #7
 8006bb2:	2183      	movs	r1, #131	; 0x83
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7fd fc68 	bl	800448a <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006bbe:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006bc0:	b923      	cbnz	r3, 8006bcc <VL53L0X_device_read_strobe+0x30>
 8006bc2:	b918      	cbnz	r0, 8006bcc <VL53L0X_device_read_strobe+0x30>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006bc4:	3d01      	subs	r5, #1
 8006bc6:	d1f2      	bne.n	8006bae <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 8006bc8:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006bcc:	2201      	movs	r2, #1
 8006bce:	2183      	movs	r1, #131	; 0x83
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7fd fce9 	bl	80045a8 <VL53L0X_WrByte>
 8006bd6:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 8006bd8:	b240      	sxtb	r0, r0
 8006bda:	b002      	add	sp, #8
 8006bdc:	bd70      	pop	{r4, r5, r6, pc}

08006bde <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006be2:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 8006be6:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 8006be8:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006bec:	2e07      	cmp	r6, #7
{
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4688      	mov	r8, r1
	uint32_t PartUIDLower = 0;
 8006bf2:	e9cd 9907 	strd	r9, r9, [sp, #28]
	if (ReadDataFromDeviceDone != 7) {
 8006bf6:	f000 8295 	beq.w	8007124 <VL53L0X_get_info_from_device+0x546>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	2180      	movs	r1, #128	; 0x80
 8006bfe:	f7fd fcd3 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c02:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c04:	4607      	mov	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c06:	21ff      	movs	r1, #255	; 0xff
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7fd fccd 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c0e:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c10:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c12:	4649      	mov	r1, r9
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7fd fcc7 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c1a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c1c:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006c1e:	2206      	movs	r2, #6
 8006c20:	21ff      	movs	r1, #255	; 0xff
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7fd fcc0 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c28:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006c2a:	4307      	orrs	r7, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006c2c:	f10d 0215 	add.w	r2, sp, #21
 8006c30:	2183      	movs	r1, #131	; 0x83
 8006c32:	4620      	mov	r0, r4
 8006c34:	f7fd fc29 	bl	800448a <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006c38:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006c3c:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006c3e:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006c40:	f042 0204 	orr.w	r2, r2, #4
 8006c44:	2183      	movs	r1, #131	; 0x83
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7fd fcae 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006c4c:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006c4e:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006c50:	2207      	movs	r2, #7
 8006c52:	21ff      	movs	r1, #255	; 0xff
 8006c54:	4620      	mov	r0, r4
 8006c56:	f7fd fca7 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006c5a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006c60:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7fd fca0 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006c68:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006c6a:	4307      	orrs	r7, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7fd fcd3 	bl	8004618 <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006c72:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_PollingDelay(Dev);
 8006c74:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c76:	2201      	movs	r2, #1
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7fd fc94 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 8006c80:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c82:	4338      	orrs	r0, r7

		if (((option & 1) == 1) &&
 8006c84:	f018 0a01 	ands.w	sl, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c88:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8006c8a:	f000 8243 	beq.w	8007114 <VL53L0X_get_info_from_device+0x536>
 8006c8e:	07f3      	lsls	r3, r6, #31
 8006c90:	f100 8243 	bmi.w	800711a <VL53L0X_get_info_from_device+0x53c>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006c94:	226b      	movs	r2, #107	; 0x6b
 8006c96:	2194      	movs	r1, #148	; 0x94
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7fd fc85 	bl	80045a8 <VL53L0X_WrByte>
 8006c9e:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7ff ff7b 	bl	8006b9c <VL53L0X_device_read_strobe>
 8006ca6:	4338      	orrs	r0, r7
 8006ca8:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006caa:	aa06      	add	r2, sp, #24
 8006cac:	2190      	movs	r1, #144	; 0x90
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f7fd fc54 	bl	800455c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cb4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cb6:	4305      	orrs	r5, r0

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006cb8:	9806      	ldr	r0, [sp, #24]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006cba:	2224      	movs	r2, #36	; 0x24
 8006cbc:	2194      	movs	r1, #148	; 0x94
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006cbe:	f3c0 2b06 	ubfx	fp, r0, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006cc2:	f3c0 39c0 	ubfx	r9, r0, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7fd fc6e 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ccc:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006cce:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f7ff ff63 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006cd6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cd8:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cda:	aa06      	add	r2, sp, #24
 8006cdc:	2190      	movs	r1, #144	; 0x90
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7fd fc3c 	bl	800455c <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006ce4:	9b06      	ldr	r3, [sp, #24]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006ce6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006cea:	0e1a      	lsrs	r2, r3, #24
 8006cec:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006cf0:	0c1a      	lsrs	r2, r3, #16
 8006cf2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cf6:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006cf8:	0a1a      	lsrs	r2, r3, #8

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006cfa:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cfc:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006cfe:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006d02:	4620      	mov	r0, r4
 8006d04:	2225      	movs	r2, #37	; 0x25
 8006d06:	f7fd fc4f 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d0a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006d0c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff ff44 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006d14:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d16:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d18:	aa06      	add	r2, sp, #24
 8006d1a:	2190      	movs	r1, #144	; 0x90
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7fd fc1d 	bl	800455c <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006d22:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d24:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006d26:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d28:	4305      	orrs	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006d2a:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d2c:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006d2e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006d36:	f018 0302 	ands.w	r3, r8, #2
 8006d3a:	9302      	str	r3, [sp, #8]
 8006d3c:	f000 80db 	beq.w	8006ef6 <VL53L0X_get_info_from_device+0x318>
 8006d40:	f016 0702 	ands.w	r7, r6, #2
 8006d44:	f040 80d7 	bne.w	8006ef6 <VL53L0X_get_info_from_device+0x318>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006d48:	2202      	movs	r2, #2
 8006d4a:	2194      	movs	r1, #148	; 0x94
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f7fd fc2b 	bl	80045a8 <VL53L0X_WrByte>
 8006d52:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d54:	4620      	mov	r0, r4
 8006d56:	f7ff ff21 	bl	8006b9c <VL53L0X_device_read_strobe>
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	4318      	orrs	r0, r3
 8006d5e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006d60:	f10d 0216 	add.w	r2, sp, #22
 8006d64:	2190      	movs	r1, #144	; 0x90
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7fd fb8f 	bl	800448a <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d6c:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006d6e:	227b      	movs	r2, #123	; 0x7b
 8006d70:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006d72:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7fd fc17 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006d7a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006d7c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff ff0c 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006d84:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d86:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006d88:	f10d 0217 	add.w	r2, sp, #23
 8006d8c:	2190      	movs	r1, #144	; 0x90
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f7fd fb7b 	bl	800448a <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d94:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006d96:	2277      	movs	r2, #119	; 0x77
 8006d98:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006d9a:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f7fd fc03 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006da2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006da4:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006da6:	4620      	mov	r0, r4
 8006da8:	f7ff fef8 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006dac:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dae:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006db0:	aa06      	add	r2, sp, #24
 8006db2:	2190      	movs	r1, #144	; 0x90
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7fd fbd1 	bl	800455c <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006dba:	9b06      	ldr	r3, [sp, #24]
 8006dbc:	0e5a      	lsrs	r2, r3, #25
 8006dbe:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006dc2:	f3c3 4286 	ubfx	r2, r3, #18, #7
 8006dc6:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006dca:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 8006dce:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dd2:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006dd4:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006dde:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006de0:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006de2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006de6:	4620      	mov	r0, r4
 8006de8:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006dea:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006dee:	f7fd fbdb 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006df2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006df4:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff fed0 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006dfc:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dfe:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e00:	aa06      	add	r2, sp, #24
 8006e02:	2190      	movs	r1, #144	; 0x90
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7fd fba9 	bl	800455c <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006e0a:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8006e0c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006e10:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8006e14:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006e18:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8006e1c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006e20:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8006e24:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006e28:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8006e2c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e30:	b26d      	sxtb	r5, r5
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006e32:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006e36:	019b      	lsls	r3, r3, #6
 8006e38:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006e3c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e3e:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006e40:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006e44:	4620      	mov	r0, r4
 8006e46:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006e48:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006e4c:	f7fd fbac 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e50:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006e52:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7ff fea1 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006e5a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e5c:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e5e:	aa06      	add	r2, sp, #24
 8006e60:	2190      	movs	r1, #144	; 0x90
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7fd fb7a 	bl	800455c <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006e68:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8006e6a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006e6e:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8006e72:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006e76:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8006e7a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006e7e:	f3c3 3206 	ubfx	r2, r3, #12, #7
 8006e82:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e86:	b26d      	sxtb	r5, r5
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006e88:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006e92:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e94:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006e96:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006e9e:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006ea2:	f7fd fb81 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ea6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006ea8:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff fe76 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006eb0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006eb2:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006eb4:	aa06      	add	r2, sp, #24
 8006eb6:	2190      	movs	r1, #144	; 0x90
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f7fd fb4f 	bl	800455c <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006ebe:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8006ec0:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 8006ec4:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 8006ec8:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 8006ecc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006ed0:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ed4:	b26d      	sxtb	r5, r5
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006ed6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006eda:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ede:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006ee0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006ee4:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006ee8:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006eec:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006eee:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006ef2:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 8006ef6:	f018 0304 	ands.w	r3, r8, #4
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	f000 810f 	beq.w	800711e <VL53L0X_get_info_from_device+0x540>
 8006f00:	0777      	lsls	r7, r6, #29
 8006f02:	f100 810c 	bmi.w	800711e <VL53L0X_get_info_from_device+0x540>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006f06:	227b      	movs	r2, #123	; 0x7b
 8006f08:	2194      	movs	r1, #148	; 0x94
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7fd fb4c 	bl	80045a8 <VL53L0X_WrByte>
 8006f10:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f12:	4620      	mov	r0, r4
 8006f14:	f7ff fe42 	bl	8006b9c <VL53L0X_device_read_strobe>
 8006f18:	4338      	orrs	r0, r7
 8006f1a:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006f1c:	aa07      	add	r2, sp, #28
 8006f1e:	2190      	movs	r1, #144	; 0x90
 8006f20:	4620      	mov	r0, r4
 8006f22:	f7fd fb1b 	bl	800455c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f26:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006f28:	227c      	movs	r2, #124	; 0x7c
 8006f2a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006f2c:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f7fd fb3a 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006f34:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006f36:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7ff fe2f 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006f3e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f40:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006f42:	aa08      	add	r2, sp, #32
 8006f44:	2190      	movs	r1, #144	; 0x90
 8006f46:	4620      	mov	r0, r4
 8006f48:	f7fd fb08 	bl	800455c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f4c:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006f4e:	2273      	movs	r2, #115	; 0x73
 8006f50:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006f52:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7fd fb27 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006f5a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006f5c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f7ff fe1c 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006f64:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f66:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f68:	aa06      	add	r2, sp, #24
 8006f6a:	2190      	movs	r1, #144	; 0x90
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f7fd faf5 	bl	800455c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f72:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006f74:	2274      	movs	r2, #116	; 0x74
 8006f76:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f78:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006f7a:	4620      	mov	r0, r4
				0x0000000ff) << 8;
 8006f7c:	9f06      	ldr	r7, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006f7e:	f7fd fb13 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f82:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006f84:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f86:	4620      	mov	r0, r4
 8006f88:	f7ff fe08 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006f8c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f8e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f90:	aa06      	add	r2, sp, #24
 8006f92:	2190      	movs	r1, #144	; 0x90
 8006f94:	4620      	mov	r0, r4
 8006f96:	f7fd fae1 	bl	800455c <VL53L0X_RdDWord>
				0x0000000ff) << 8;
 8006f9a:	023f      	lsls	r7, r7, #8

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006f9c:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006fa0:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006fa2:	2275      	movs	r2, #117	; 0x75
 8006fa4:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fa6:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006fa8:	b2bf      	uxth	r7, r7
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006faa:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006fac:	431f      	orrs	r7, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006fae:	f7fd fafb 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fb2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006fb4:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7ff fdf0 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006fbc:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006fbe:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fc0:	aa06      	add	r2, sp, #24
 8006fc2:	2190      	movs	r1, #144	; 0x90
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7fd fac9 	bl	800455c <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006fca:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006fcc:	b26d      	sxtb	r5, r5
							<< 8;
 8006fce:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006fd0:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006fd2:	2276      	movs	r2, #118	; 0x76
 8006fd4:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fd6:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006fd8:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006fda:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006fdc:	f7fd fae4 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fe0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006fe2:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f7ff fdd9 	bl	8006b9c <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006fea:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006fec:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fee:	aa06      	add	r2, sp, #24
 8006ff0:	2190      	movs	r1, #144	; 0x90
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7fd fab2 	bl	800455c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ff8:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006ffa:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006ffe:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007000:	4305      	orrs	r5, r0
 8007002:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007004:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007006:	2200      	movs	r2, #0
 8007008:	2181      	movs	r1, #129	; 0x81
 800700a:	4620      	mov	r0, r4
 800700c:	9303      	str	r3, [sp, #12]
 800700e:	f7fd facb 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007012:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007014:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007016:	21ff      	movs	r1, #255	; 0xff
 8007018:	4620      	mov	r0, r4
 800701a:	f7fd fac5 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800701e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007020:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007022:	f10d 0215 	add.w	r2, sp, #21
 8007026:	2183      	movs	r1, #131	; 0x83
 8007028:	4620      	mov	r0, r4
 800702a:	f7fd fa2e 	bl	800448a <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800702e:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007032:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007034:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007036:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800703a:	2183      	movs	r1, #131	; 0x83
 800703c:	4620      	mov	r0, r4
 800703e:	f7fd fab3 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007042:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007044:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007046:	2201      	movs	r2, #1
 8007048:	21ff      	movs	r1, #255	; 0xff
 800704a:	4620      	mov	r0, r4
 800704c:	f7fd faac 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007050:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007052:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007054:	2201      	movs	r2, #1
 8007056:	2100      	movs	r1, #0
 8007058:	4620      	mov	r0, r4
 800705a:	f7fd faa5 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800705e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007060:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007062:	2200      	movs	r2, #0
 8007064:	21ff      	movs	r1, #255	; 0xff
 8007066:	4620      	mov	r0, r4
 8007068:	f7fd fa9e 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800706c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800706e:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007070:	2200      	movs	r2, #0
 8007072:	2180      	movs	r1, #128	; 0x80
 8007074:	4620      	mov	r0, r4
 8007076:	f7fd fa97 	bl	80045a8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800707a:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800707c:	4305      	orrs	r5, r0
 800707e:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	2d00      	cmp	r5, #0
 8007084:	d142      	bne.n	800710c <VL53L0X_get_info_from_device+0x52e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007086:	f1ba 0f00 	cmp.w	sl, #0
 800708a:	d011      	beq.n	80070b0 <VL53L0X_get_info_from_device+0x4d2>
 800708c:	07f0      	lsls	r0, r6, #31
 800708e:	d40f      	bmi.n	80070b0 <VL53L0X_get_info_from_device+0x4d2>
			((ReadDataFromDeviceDone & 1) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007090:	f884 b113 	strb.w	fp, [r4, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007094:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
 8007098:	f504 7195 	add.w	r1, r4, #298	; 0x12a
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800709c:	462a      	mov	r2, r5
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800709e:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80070a2:	f812 000c 	ldrb.w	r0, [r2, ip]
 80070a6:	f801 0b01 	strb.w	r0, [r1], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80070aa:	3201      	adds	r2, #1
 80070ac:	2a06      	cmp	r2, #6
 80070ae:	d1f8      	bne.n	80070a2 <VL53L0X_get_info_from_device+0x4c4>
			}
		}

		if (((option & 2) == 2) &&
 80070b0:	9a02      	ldr	r2, [sp, #8]
 80070b2:	b182      	cbz	r2, 80070d6 <VL53L0X_get_info_from_device+0x4f8>
 80070b4:	07b1      	lsls	r1, r6, #30
 80070b6:	d40e      	bmi.n	80070d6 <VL53L0X_get_info_from_device+0x4f8>
			((ReadDataFromDeviceDone & 2) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070b8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80070bc:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070c0:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80070c4:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80070c8:	a90b      	add	r1, sp, #44	; 0x2c
 80070ca:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 80070ce:	9302      	str	r3, [sp, #8]
 80070d0:	f01c fbb8 	bl	8023844 <strcpy>
 80070d4:	9b02      	ldr	r3, [sp, #8]

		}

		if (((option & 4) == 4) &&
 80070d6:	9a01      	ldr	r2, [sp, #4]
 80070d8:	b1a2      	cbz	r2, 8007104 <VL53L0X_get_info_from_device+0x526>
 80070da:	0772      	lsls	r2, r6, #29
 80070dc:	d412      	bmi.n	8007104 <VL53L0X_get_info_from_device+0x526>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070de:	9a07      	ldr	r2, [sp, #28]
 80070e0:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80070e4:	027f      	lsls	r7, r7, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070e6:	9a08      	ldr	r2, [sp, #32]
 80070e8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070ec:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 80070f0:	b13b      	cbz	r3, 8007102 <VL53L0X_get_info_from_device+0x524>
					OffsetFixed1104_mm =
 80070f2:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80070f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070fa:	4353      	muls	r3, r2
 80070fc:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 80070fe:	425b      	negs	r3, r3
 8007100:	b21b      	sxth	r3, r3
			}

			PALDevDataSet(Dev,
 8007102:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007104:	ea46 0608 	orr.w	r6, r6, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007108:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800710c:	4628      	mov	r0, r5
 800710e:	b011      	add	sp, #68	; 0x44
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8007114:	46d1      	mov	r9, sl
	uint8_t ReferenceSpadCount = 0;
 8007116:	46d3      	mov	fp, sl
 8007118:	e60d      	b.n	8006d36 <VL53L0X_get_info_from_device+0x158>
 800711a:	46cb      	mov	fp, r9
 800711c:	e60b      	b.n	8006d36 <VL53L0X_get_info_from_device+0x158>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800711e:	2700      	movs	r7, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007120:	463b      	mov	r3, r7
 8007122:	e770      	b.n	8007006 <VL53L0X_get_info_from_device+0x428>
 8007124:	464d      	mov	r5, r9
	return Status;
 8007126:	e7f1      	b.n	800710c <VL53L0X_get_info_from_device+0x52e>

08007128 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8007128:	b150      	cbz	r0, 8007140 <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 800712a:	3801      	subs	r0, #1
 800712c:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800712e:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8007132:	b29a      	uxth	r2, r3
 8007134:	f103 0301 	add.w	r3, r3, #1
 8007138:	d103      	bne.n	8007142 <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 800713a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800713e:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 8007140:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8007142:	0840      	lsrs	r0, r0, #1
 8007144:	e7f3      	b.n	800712e <VL53L0X_encode_timeout+0x6>

08007146 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007146:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007148:	0a00      	lsrs	r0, r0, #8
 800714a:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800714e:	3001      	adds	r0, #1
 8007150:	4770      	bx	lr
	...

08007154 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007154:	4808      	ldr	r0, [pc, #32]	; (8007178 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 800715a:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800715c:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007164:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007168:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800716c:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 8007170:	fbb0 f0f2 	udiv	r0, r0, r2
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	003a2f00 	.word	0x003a2f00

0800717c <set_sequence_step_timeout.part.1>:

	return Status;
}


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 800717c:	b5f0      	push	{r4, r5, r6, r7, lr}
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800717e:	2903      	cmp	r1, #3
VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 8007180:	b085      	sub	sp, #20
 8007182:	4605      	mov	r5, r0
 8007184:	4617      	mov	r7, r2
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007186:	d11f      	bne.n	80071c8 <set_sequence_step_timeout.part.1+0x4c>

			if (Status == VL53L0X_ERROR_NONE) {
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007188:	f10d 0205 	add.w	r2, sp, #5
 800718c:	2100      	movs	r1, #0
 800718e:	f7fe fc01 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007192:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007196:	4639      	mov	r1, r7
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007198:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 800719a:	4628      	mov	r0, r5
 800719c:	f7ff ffda 	bl	8007154 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80071a0:	b280      	uxth	r0, r0
 80071a2:	f7ff ffc1 	bl	8007128 <VL53L0X_encode_timeout>
 80071a6:	4602      	mov	r2, r0
 80071a8:	f8ad 0006 	strh.w	r0, [sp, #6]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071ac:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80071b0:	b93c      	cbnz	r4, 80071c2 <set_sequence_step_timeout.part.1+0x46>
				Status = VL53L0X_WrWord(Dev,
 80071b2:	2151      	movs	r1, #81	; 0x51
 80071b4:	4628      	mov	r0, r5
 80071b6:	f7fd fa07 	bl	80045c8 <VL53L0X_WrWord>
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80071ba:	4604      	mov	r4, r0
 80071bc:	b908      	cbnz	r0, 80071c2 <set_sequence_step_timeout.part.1+0x46>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80071be:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 80071c2:	4620      	mov	r0, r4
 80071c4:	b005      	add	sp, #20
 80071c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80071c8:	2904      	cmp	r1, #4
 80071ca:	d13b      	bne.n	8007244 <set_sequence_step_timeout.part.1+0xc8>
			VL53L0X_GetSequenceStepEnables(Dev,
 80071cc:	a902      	add	r1, sp, #8
 80071ce:	f7fe fc34 	bl	8005a3a <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 80071d2:	f89d 600b 	ldrb.w	r6, [sp, #11]
 80071d6:	b1b6      	cbz	r6, 8007206 <set_sequence_step_timeout.part.1+0x8a>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80071d8:	f10d 0205 	add.w	r2, sp, #5
 80071dc:	2100      	movs	r1, #0
 80071de:	4628      	mov	r0, r5
 80071e0:	f7fe fbd8 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 80071e4:	4604      	mov	r4, r0
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d1eb      	bne.n	80071c2 <set_sequence_step_timeout.part.1+0x46>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80071ea:	f10d 0206 	add.w	r2, sp, #6
 80071ee:	2151      	movs	r1, #81	; 0x51
 80071f0:	4628      	mov	r0, r5
 80071f2:	f7fd f993 	bl	800451c <VL53L0X_RdWord>
 80071f6:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 80071f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80071fc:	f7ff ffa3 	bl	8007146 <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 8007200:	b286      	uxth	r6, r0
			if (Status == VL53L0X_ERROR_NONE) {
 8007202:	2c00      	cmp	r4, #0
 8007204:	d1dd      	bne.n	80071c2 <set_sequence_step_timeout.part.1+0x46>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007206:	f10d 0205 	add.w	r2, sp, #5
 800720a:	2101      	movs	r1, #1
 800720c:	4628      	mov	r0, r5
 800720e:	f7fe fbc1 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8007212:	4604      	mov	r4, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d1d4      	bne.n	80071c2 <set_sequence_step_timeout.part.1+0x46>
					VL53L0X_calc_timeout_mclks(Dev,
 8007218:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800721c:	4639      	mov	r1, r7
 800721e:	4628      	mov	r0, r5
 8007220:	f7ff ff98 	bl	8007154 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007224:	fa16 f080 	uxtah	r0, r6, r0
				FinalRangeEncodedTimeOut =
 8007228:	b280      	uxth	r0, r0
 800722a:	f7ff ff7d 	bl	8007128 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800722e:	2171      	movs	r1, #113	; 0x71
 8007230:	4602      	mov	r2, r0
 8007232:	4628      	mov	r0, r5
 8007234:	f7fd f9c8 	bl	80045c8 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 8007238:	4604      	mov	r4, r0
 800723a:	2800      	cmp	r0, #0
 800723c:	d1c1      	bne.n	80071c2 <set_sequence_step_timeout.part.1+0x46>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800723e:	f8c5 70dc 	str.w	r7, [r5, #220]	; 0xdc
 8007242:	e7be      	b.n	80071c2 <set_sequence_step_timeout.part.1+0x46>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007244:	f06f 0403 	mvn.w	r4, #3
 8007248:	e7bb      	b.n	80071c2 <set_sequence_step_timeout.part.1+0x46>
	...

0800724c <VL53L0X_calc_timeout_us>:
{
 800724c:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 800724e:	4b08      	ldr	r3, [pc, #32]	; (8007270 <VL53L0X_calc_timeout_us+0x24>)
 8007250:	435a      	muls	r2, r3
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007252:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8007256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		+ (macro_period_ns / 2)) / 1000;
 800725a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800725e:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 8007262:	fbb2 f2f4 	udiv	r2, r2, r4
 8007266:	fb01 2203 	mla	r2, r1, r3, r2
}
 800726a:	fbb2 f0f0 	udiv	r0, r2, r0
 800726e:	bd10      	pop	{r4, pc}
 8007270:	003a2f00 	.word	0x003a2f00

08007274 <get_sequence_step_timeout>:
{
 8007274:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007278:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 800727a:	f04f 0400 	mov.w	r4, #0
{
 800727e:	4606      	mov	r6, r0
 8007280:	4690      	mov	r8, r2
	uint8_t EncodedTimeOutByte = 0;
 8007282:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8007286:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800728a:	d81d      	bhi.n	80072c8 <get_sequence_step_timeout+0x54>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800728c:	f10d 0202 	add.w	r2, sp, #2
 8007290:	4621      	mov	r1, r4
 8007292:	f7fe fb7f 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8007296:	4605      	mov	r5, r0
 8007298:	b930      	cbnz	r0, 80072a8 <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 800729a:	f10d 0203 	add.w	r2, sp, #3
 800729e:	2146      	movs	r1, #70	; 0x46
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7fd f8f2 	bl	800448a <VL53L0X_RdByte>
 80072a6:	4605      	mov	r5, r0
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80072a8:	f89d 0003 	ldrb.w	r0, [sp, #3]
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80072ac:	f7ff ff4b 	bl	8007146 <VL53L0X_decode_timeout>
			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80072b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80072b4:	b281      	uxth	r1, r0
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7ff ffc8 	bl	800724c <VL53L0X_calc_timeout_us>
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80072bc:	f8c8 0000 	str.w	r0, [r8]
}
 80072c0:	4628      	mov	r0, r5
 80072c2:	b004      	add	sp, #16
 80072c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80072c8:	2903      	cmp	r1, #3
 80072ca:	d118      	bne.n	80072fe <get_sequence_step_timeout+0x8a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80072cc:	f10d 0202 	add.w	r2, sp, #2
 80072d0:	4621      	mov	r1, r4
 80072d2:	f7fe fb5f 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80072d6:	4605      	mov	r5, r0
 80072d8:	2800      	cmp	r0, #0
 80072da:	d14a      	bne.n	8007372 <get_sequence_step_timeout+0xfe>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80072dc:	4601      	mov	r1, r0
 80072de:	f10d 0202 	add.w	r2, sp, #2
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7fe fb56 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80072e8:	4605      	mov	r5, r0
 80072ea:	b928      	cbnz	r0, 80072f8 <get_sequence_step_timeout+0x84>
				Status = VL53L0X_RdWord(Dev,
 80072ec:	aa01      	add	r2, sp, #4
 80072ee:	2151      	movs	r1, #81	; 0x51
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7fd f913 	bl	800451c <VL53L0X_RdWord>
 80072f6:	4605      	mov	r5, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80072f8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80072fc:	e7d6      	b.n	80072ac <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80072fe:	2904      	cmp	r1, #4
 8007300:	d139      	bne.n	8007376 <get_sequence_step_timeout+0x102>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007302:	a902      	add	r1, sp, #8
 8007304:	f7fe fb99 	bl	8005a3a <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007308:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800730c:	b1c9      	cbz	r1, 8007342 <get_sequence_step_timeout+0xce>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800730e:	f10d 0202 	add.w	r2, sp, #2
 8007312:	4621      	mov	r1, r4
 8007314:	4630      	mov	r0, r6
 8007316:	f7fe fb3d 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
 800731a:	4605      	mov	r5, r0
 800731c:	4607      	mov	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 800731e:	bb30      	cbnz	r0, 800736e <get_sequence_step_timeout+0xfa>
				Status = VL53L0X_RdWord(Dev,
 8007320:	aa01      	add	r2, sp, #4
 8007322:	2151      	movs	r1, #81	; 0x51
 8007324:	4630      	mov	r0, r6
 8007326:	f7fd f8f9 	bl	800451c <VL53L0X_RdWord>
 800732a:	4605      	mov	r5, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800732c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8007330:	f7ff ff09 	bl	8007146 <VL53L0X_decode_timeout>
 8007334:	b284      	uxth	r4, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8007336:	b12d      	cbz	r5, 8007344 <get_sequence_step_timeout+0xd0>
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007338:	1b3c      	subs	r4, r7, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800733a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800733e:	b2a1      	uxth	r1, r4
 8007340:	e7b9      	b.n	80072b6 <get_sequence_step_timeout+0x42>
		PreRangeTimeOutMClks = 0;
 8007342:	460c      	mov	r4, r1
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007344:	f10d 0202 	add.w	r2, sp, #2
 8007348:	2101      	movs	r1, #1
 800734a:	4630      	mov	r0, r6
 800734c:	f7fe fb22 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8007350:	4605      	mov	r5, r0
 8007352:	b960      	cbnz	r0, 800736e <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_RdWord(Dev,
 8007354:	f10d 0206 	add.w	r2, sp, #6
 8007358:	2171      	movs	r1, #113	; 0x71
 800735a:	4630      	mov	r0, r6
 800735c:	f7fd f8de 	bl	800451c <VL53L0X_RdWord>
 8007360:	4605      	mov	r5, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007362:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007366:	f7ff feee 	bl	8007146 <VL53L0X_decode_timeout>
 800736a:	b287      	uxth	r7, r0
 800736c:	e7e4      	b.n	8007338 <get_sequence_step_timeout+0xc4>
	uint16_t FinalRangeTimeOutMClks = 0;
 800736e:	2700      	movs	r7, #0
 8007370:	e7e2      	b.n	8007338 <get_sequence_step_timeout+0xc4>
	uint32_t TimeoutMicroSeconds = 0;
 8007372:	4620      	mov	r0, r4
 8007374:	e7a2      	b.n	80072bc <get_sequence_step_timeout+0x48>
 8007376:	4620      	mov	r0, r4
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007378:	4625      	mov	r5, r4
 800737a:	e79f      	b.n	80072bc <get_sequence_step_timeout+0x48>

0800737c <set_sequence_step_timeout>:
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800737c:	2902      	cmp	r1, #2
{
 800737e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007380:	4604      	mov	r4, r0
 8007382:	4615      	mov	r5, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007384:	d81b      	bhi.n	80073be <set_sequence_step_timeout+0x42>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007386:	f10d 0207 	add.w	r2, sp, #7
 800738a:	2100      	movs	r1, #0
 800738c:	f7fe fb02 	bl	8005994 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8007390:	b998      	cbnz	r0, 80073ba <set_sequence_step_timeout+0x3e>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007392:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007396:	4629      	mov	r1, r5
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff fedb 	bl	8007154 <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
 800739e:	b283      	uxth	r3, r0
 80073a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut =
 80073a4:	bf9a      	itte	ls
 80073a6:	f100 32ff 	addls.w	r2, r0, #4294967295
 80073aa:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 80073ac:	22ff      	movhi	r2, #255	; 0xff
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073ae:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
			Status = VL53L0X_WrByte(Dev,
 80073b2:	2146      	movs	r1, #70	; 0x46
 80073b4:	4620      	mov	r0, r4
 80073b6:	f7fd f8f7 	bl	80045a8 <VL53L0X_WrByte>
}
 80073ba:	b003      	add	sp, #12
 80073bc:	bd30      	pop	{r4, r5, pc}
 80073be:	f7ff fedd 	bl	800717c <set_sequence_step_timeout.part.1>
 80073c2:	e7fa      	b.n	80073ba <set_sequence_step_timeout+0x3e>

080073c4 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80073c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80073c8:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80073ca:	f012 0701 	ands.w	r7, r2, #1
{
 80073ce:	4605      	mov	r5, r0
 80073d0:	4688      	mov	r8, r1
 80073d2:	4616      	mov	r6, r2
	uint8_t PhaseCalInt = 0;
 80073d4:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80073d8:	d104      	bne.n	80073e4 <VL53L0X_set_vcsel_pulse_period+0x20>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80073da:	b931      	cbnz	r1, 80073ea <VL53L0X_set_vcsel_pulse_period+0x26>
 80073dc:	f1a2 030c 	sub.w	r3, r2, #12
 80073e0:	2b06      	cmp	r3, #6
 80073e2:	d93e      	bls.n	8007462 <VL53L0X_set_vcsel_pulse_period+0x9e>
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073e4:	f06f 0003 	mvn.w	r0, #3
 80073e8:	e038      	b.n	800745c <VL53L0X_set_vcsel_pulse_period+0x98>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80073ea:	2901      	cmp	r1, #1
 80073ec:	f040 80d1 	bne.w	8007592 <VL53L0X_set_vcsel_pulse_period+0x1ce>
 80073f0:	f1a2 0308 	sub.w	r3, r2, #8
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	d8f5      	bhi.n	80073e4 <VL53L0X_set_vcsel_pulse_period+0x20>
		if (VCSELPulsePeriodPCLK == 8) {
 80073f8:	2a08      	cmp	r2, #8
 80073fa:	d17d      	bne.n	80074f8 <VL53L0X_set_vcsel_pulse_period+0x134>
			Status = VL53L0X_WrByte(Dev,
 80073fc:	2210      	movs	r2, #16
 80073fe:	2148      	movs	r1, #72	; 0x48
 8007400:	f7fd f8d2 	bl	80045a8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007404:	4632      	mov	r2, r6
 8007406:	2147      	movs	r1, #71	; 0x47
 8007408:	4628      	mov	r0, r5
 800740a:	f7fd f8cd 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800740e:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8007410:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8007412:	2132      	movs	r1, #50	; 0x32
 8007414:	4628      	mov	r0, r5
 8007416:	f7fd f8c7 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800741a:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
 800741c:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 800741e:	2130      	movs	r1, #48	; 0x30
 8007420:	4628      	mov	r0, r5
 8007422:	f7fd f8c1 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007426:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8007428:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800742a:	4642      	mov	r2, r8
 800742c:	21ff      	movs	r1, #255	; 0xff
 800742e:	4628      	mov	r0, r5
 8007430:	f7fd f8ba 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007434:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007436:	4304      	orrs	r4, r0
 8007438:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800743a:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 800743c:	2130      	movs	r1, #48	; 0x30
 800743e:	4628      	mov	r0, r5
 8007440:	f7fd f8b2 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007444:	463a      	mov	r2, r7
			Status |= VL53L0X_WrByte(Dev,
 8007446:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007448:	21ff      	movs	r1, #255	; 0xff
 800744a:	4628      	mov	r0, r5
 800744c:	f7fd f8ac 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007450:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007452:	4320      	orrs	r0, r4
 8007454:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8007456:	2800      	cmp	r0, #0
 8007458:	f000 80ba 	beq.w	80075d0 <VL53L0X_set_vcsel_pulse_period+0x20c>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 800745c:	b004      	add	sp, #16
 800745e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (VCSELPulsePeriodPCLK == 12) {
 8007462:	2a0c      	cmp	r2, #12
 8007464:	d13c      	bne.n	80074e0 <VL53L0X_set_vcsel_pulse_period+0x11c>
			Status = VL53L0X_WrByte(Dev,
 8007466:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
 8007468:	2157      	movs	r1, #87	; 0x57
 800746a:	f7fd f89d 	bl	80045a8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800746e:	2208      	movs	r2, #8
 8007470:	2156      	movs	r1, #86	; 0x56
 8007472:	4628      	mov	r0, r5
 8007474:	f7fd f898 	bl	80045a8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8007478:	2800      	cmp	r0, #0
 800747a:	d1ef      	bne.n	800745c <VL53L0X_set_vcsel_pulse_period+0x98>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800747c:	0874      	lsrs	r4, r6, #1
 800747e:	3c01      	subs	r4, #1
 8007480:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 8007482:	aa02      	add	r2, sp, #8
 8007484:	2103      	movs	r1, #3
 8007486:	4628      	mov	r0, r5
 8007488:	f7ff fef4 	bl	8007274 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 800748c:	b9b0      	cbnz	r0, 80074bc <VL53L0X_set_vcsel_pulse_period+0xf8>
				Status = get_sequence_step_timeout(Dev,
 800748e:	aa03      	add	r2, sp, #12
 8007490:	2102      	movs	r1, #2
 8007492:	4628      	mov	r0, r5
 8007494:	f7ff feee 	bl	8007274 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8007498:	b980      	cbnz	r0, 80074bc <VL53L0X_set_vcsel_pulse_period+0xf8>
				Status = VL53L0X_WrByte(Dev,
 800749a:	4622      	mov	r2, r4
 800749c:	2150      	movs	r1, #80	; 0x50
 800749e:	4628      	mov	r0, r5
 80074a0:	f7fd f882 	bl	80045a8 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 80074a4:	b950      	cbnz	r0, 80074bc <VL53L0X_set_vcsel_pulse_period+0xf8>
 80074a6:	9a02      	ldr	r2, [sp, #8]
 80074a8:	2103      	movs	r1, #3
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7ff fe66 	bl	800717c <set_sequence_step_timeout.part.1>
			if (Status == VL53L0X_ERROR_NONE)
 80074b0:	b920      	cbnz	r0, 80074bc <VL53L0X_set_vcsel_pulse_period+0xf8>
				Status = set_sequence_step_timeout(Dev,
 80074b2:	9a03      	ldr	r2, [sp, #12]
 80074b4:	2102      	movs	r1, #2
 80074b6:	4628      	mov	r0, r5
 80074b8:	f7ff ff60 	bl	800737c <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80074bc:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d1cb      	bne.n	800745c <VL53L0X_set_vcsel_pulse_period+0x98>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80074c4:	6969      	ldr	r1, [r5, #20]
 80074c6:	4628      	mov	r0, r5
 80074c8:	f7fe fa60 	bl	800598c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d1c5      	bne.n	800745c <VL53L0X_set_vcsel_pulse_period+0x98>
		Status = VL53L0X_perform_phase_calibration(
 80074d0:	4602      	mov	r2, r0
 80074d2:	2301      	movs	r3, #1
 80074d4:	f10d 0103 	add.w	r1, sp, #3
 80074d8:	4628      	mov	r0, r5
 80074da:	f7ff f9ad 	bl	8006838 <VL53L0X_perform_phase_calibration>
 80074de:	e7bd      	b.n	800745c <VL53L0X_set_vcsel_pulse_period+0x98>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80074e0:	2a0e      	cmp	r2, #14
 80074e2:	d101      	bne.n	80074e8 <VL53L0X_set_vcsel_pulse_period+0x124>
			Status = VL53L0X_WrByte(Dev,
 80074e4:	2230      	movs	r2, #48	; 0x30
 80074e6:	e7bf      	b.n	8007468 <VL53L0X_set_vcsel_pulse_period+0xa4>
		} else if (VCSELPulsePeriodPCLK == 16) {
 80074e8:	2a10      	cmp	r2, #16
 80074ea:	d101      	bne.n	80074f0 <VL53L0X_set_vcsel_pulse_period+0x12c>
			Status = VL53L0X_WrByte(Dev,
 80074ec:	2240      	movs	r2, #64	; 0x40
 80074ee:	e7bb      	b.n	8007468 <VL53L0X_set_vcsel_pulse_period+0xa4>
		} else if (VCSELPulsePeriodPCLK == 18) {
 80074f0:	2a12      	cmp	r2, #18
 80074f2:	d14e      	bne.n	8007592 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 80074f4:	2250      	movs	r2, #80	; 0x50
 80074f6:	e7b7      	b.n	8007468 <VL53L0X_set_vcsel_pulse_period+0xa4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80074f8:	2a0a      	cmp	r2, #10
 80074fa:	d120      	bne.n	800753e <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 80074fc:	2228      	movs	r2, #40	; 0x28
 80074fe:	2148      	movs	r1, #72	; 0x48
 8007500:	f7fd f852 	bl	80045a8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007504:	2208      	movs	r2, #8
 8007506:	2147      	movs	r1, #71	; 0x47
 8007508:	4628      	mov	r0, r5
 800750a:	f7fd f84d 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800750e:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8007510:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8007512:	2132      	movs	r1, #50	; 0x32
 8007514:	4628      	mov	r0, r5
 8007516:	f7fd f847 	bl	80045a8 <VL53L0X_WrByte>
 800751a:	4304      	orrs	r4, r0
 800751c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800751e:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8007520:	2130      	movs	r1, #48	; 0x30
 8007522:	4628      	mov	r0, r5
 8007524:	f7fd f840 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007528:	4642      	mov	r2, r8
			Status |= VL53L0X_WrByte(Dev,
 800752a:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800752c:	21ff      	movs	r1, #255	; 0xff
 800752e:	4628      	mov	r0, r5
 8007530:	f7fd f83a 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007534:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007536:	4304      	orrs	r4, r0
 8007538:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800753a:	2220      	movs	r2, #32
 800753c:	e77e      	b.n	800743c <VL53L0X_set_vcsel_pulse_period+0x78>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800753e:	2a0c      	cmp	r2, #12
 8007540:	d112      	bne.n	8007568 <VL53L0X_set_vcsel_pulse_period+0x1a4>
			Status = VL53L0X_WrByte(Dev,
 8007542:	2238      	movs	r2, #56	; 0x38
 8007544:	2148      	movs	r1, #72	; 0x48
 8007546:	f7fd f82f 	bl	80045a8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800754a:	2208      	movs	r2, #8
 800754c:	2147      	movs	r1, #71	; 0x47
 800754e:	4628      	mov	r0, r5
 8007550:	f7fd f82a 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007554:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8007556:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8007558:	2132      	movs	r1, #50	; 0x32
 800755a:	4628      	mov	r0, r5
 800755c:	f7fd f824 	bl	80045a8 <VL53L0X_WrByte>
 8007560:	4304      	orrs	r4, r0
 8007562:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8007564:	2208      	movs	r2, #8
 8007566:	e7db      	b.n	8007520 <VL53L0X_set_vcsel_pulse_period+0x15c>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007568:	2a0e      	cmp	r2, #14
 800756a:	d112      	bne.n	8007592 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 800756c:	2248      	movs	r2, #72	; 0x48
 800756e:	4611      	mov	r1, r2
 8007570:	f7fd f81a 	bl	80045a8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007574:	2208      	movs	r2, #8
 8007576:	2147      	movs	r1, #71	; 0x47
 8007578:	4628      	mov	r0, r5
 800757a:	f7fd f815 	bl	80045a8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800757e:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8007580:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8007582:	2132      	movs	r1, #50	; 0x32
 8007584:	4628      	mov	r0, r5
 8007586:	f7fd f80f 	bl	80045a8 <VL53L0X_WrByte>
 800758a:	4304      	orrs	r4, r0
 800758c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800758e:	2207      	movs	r2, #7
 8007590:	e7c6      	b.n	8007520 <VL53L0X_set_vcsel_pulse_period+0x15c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007592:	0874      	lsrs	r4, r6, #1
 8007594:	3c01      	subs	r4, #1
 8007596:	b2e4      	uxtb	r4, r4
		switch (VcselPeriodType) {
 8007598:	f1b8 0f00 	cmp.w	r8, #0
 800759c:	f43f af71 	beq.w	8007482 <VL53L0X_set_vcsel_pulse_period+0xbe>
 80075a0:	f1b8 0f01 	cmp.w	r8, #1
 80075a4:	f47f af1e 	bne.w	80073e4 <VL53L0X_set_vcsel_pulse_period+0x20>
			Status = get_sequence_step_timeout(Dev,
 80075a8:	aa01      	add	r2, sp, #4
 80075aa:	2104      	movs	r1, #4
 80075ac:	4628      	mov	r0, r5
 80075ae:	f7ff fe61 	bl	8007274 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 80075b2:	b950      	cbnz	r0, 80075ca <VL53L0X_set_vcsel_pulse_period+0x206>
				Status = VL53L0X_WrByte(Dev,
 80075b4:	4622      	mov	r2, r4
 80075b6:	2170      	movs	r1, #112	; 0x70
 80075b8:	4628      	mov	r0, r5
 80075ba:	f7fc fff5 	bl	80045a8 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 80075be:	b920      	cbnz	r0, 80075ca <VL53L0X_set_vcsel_pulse_period+0x206>
 80075c0:	9a01      	ldr	r2, [sp, #4]
 80075c2:	2104      	movs	r1, #4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f7ff fdd9 	bl	800717c <set_sequence_step_timeout.part.1>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80075ca:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
 80075ce:	e777      	b.n	80074c0 <VL53L0X_set_vcsel_pulse_period+0xfc>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80075d0:	0874      	lsrs	r4, r6, #1
 80075d2:	3c01      	subs	r4, #1
 80075d4:	b2e4      	uxtb	r4, r4
 80075d6:	e7e7      	b.n	80075a8 <VL53L0X_set_vcsel_pulse_period+0x1e4>

080075d8 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80075d8:	b513      	push	{r0, r1, r4, lr}
 80075da:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80075dc:	b121      	cbz	r1, 80075e8 <VL53L0X_get_vcsel_pulse_period+0x10>
 80075de:	2901      	cmp	r1, #1
 80075e0:	d00f      	beq.n	8007602 <VL53L0X_get_vcsel_pulse_period+0x2a>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075e2:	f06f 0003 	mvn.w	r0, #3
 80075e6:	e00a      	b.n	80075fe <VL53L0X_get_vcsel_pulse_period+0x26>
		Status = VL53L0X_RdByte(Dev,
 80075e8:	f10d 0207 	add.w	r2, sp, #7
 80075ec:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 80075ee:	f7fc ff4c 	bl	800448a <VL53L0X_RdByte>
	}

	if (Status == VL53L0X_ERROR_NONE)
 80075f2:	b920      	cbnz	r0, 80075fe <VL53L0X_get_vcsel_pulse_period+0x26>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80075f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80075f8:	3301      	adds	r3, #1
 80075fa:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 80075fc:	7023      	strb	r3, [r4, #0]
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 80075fe:	b002      	add	sp, #8
 8007600:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 8007602:	f10d 0207 	add.w	r2, sp, #7
 8007606:	2170      	movs	r1, #112	; 0x70
 8007608:	e7f1      	b.n	80075ee <VL53L0X_get_vcsel_pulse_period+0x16>

0800760a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800760a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800760c:	2300      	movs	r3, #0
{
 800760e:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007610:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007614:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007618:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800761c:	4299      	cmp	r1, r3
{
 800761e:	4606      	mov	r6, r0
 8007620:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8007622:	d804      	bhi.n	800762e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 8007624:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007628:	4628      	mov	r0, r5
 800762a:	b005      	add	sp, #20
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800762e:	a902      	add	r1, sp, #8
 8007630:	f7fe fa03 	bl	8005a3a <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 8007634:	4605      	mov	r5, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	d1f6      	bne.n	8007628 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 800763a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	FinalRangeTimingBudgetMicroSeconds =
 800763e:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
	if (Status == VL53L0X_ERROR_NONE &&
 8007642:	b92b      	cbnz	r3, 8007650 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		(SchedulerSequenceSteps.TccOn  ||
 8007644:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007648:	b913      	cbnz	r3, 8007650 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		SchedulerSequenceSteps.MsrcOn ||
 800764a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800764e:	b1cb      	cbz	r3, 8007684 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7a>
		Status = get_sequence_step_timeout(Dev,
 8007650:	466a      	mov	r2, sp
 8007652:	2102      	movs	r1, #2
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff fe0d 	bl	8007274 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 800765a:	2800      	cmp	r0, #0
 800765c:	d136      	bne.n	80076cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
		if (SchedulerSequenceSteps.TccOn) {
 800765e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007662:	b12b      	cbz	r3, 8007670 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x66>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007664:	9b00      	ldr	r3, [sp, #0]
 8007666:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 800766a:	429c      	cmp	r4, r3
 800766c:	d9da      	bls.n	8007624 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 800766e:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8007670:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007674:	b313      	cbz	r3, 80076bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xb2>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 800767c:	005b      	lsls	r3, r3, #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800767e:	429c      	cmp	r4, r3
 8007680:	d9d0      	bls.n	8007624 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8007682:	1ae4      	subs	r4, r4, r3
	if (SchedulerSequenceSteps.PreRangeOn) {
 8007684:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007688:	b15b      	cbz	r3, 80076a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x98>
		Status = get_sequence_step_timeout(Dev,
 800768a:	aa01      	add	r2, sp, #4
 800768c:	2103      	movs	r1, #3
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff fdf0 	bl	8007274 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800769a:	42a3      	cmp	r3, r4
 800769c:	d2c2      	bcs.n	8007624 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 800769e:	b9a8      	cbnz	r0, 80076cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80076a0:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 80076a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0be      	beq.n	8007628 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 80076aa:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 80076ae:	2104      	movs	r1, #4
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff fd63 	bl	800717c <set_sequence_step_timeout.part.1>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80076b6:	6177      	str	r7, [r6, #20]
 80076b8:	4605      	mov	r5, r0
 80076ba:	e7b5      	b.n	8007628 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80076bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0df      	beq.n	8007684 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7a>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80076ca:	e7d8      	b.n	800767e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x74>
 80076cc:	4605      	mov	r5, r0
 80076ce:	e7ab      	b.n	8007628 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

080076d0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80076d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80076d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
 80076d6:	b086      	sub	sp, #24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	e9cd 2302 	strd	r2, r3, [sp, #8]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80076de:	f640 3336 	movw	r3, #2870	; 0xb36
 80076e2:	600b      	str	r3, [r1, #0]
{
 80076e4:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80076e6:	a904      	add	r1, sp, #16
{
 80076e8:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80076ea:	f7fe f9a6 	bl	8005a3a <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 80076ee:	4605      	mov	r5, r0
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d136      	bne.n	8007762 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80076f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80076f8:	b92b      	cbnz	r3, 8007706 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
 80076fa:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80076fe:	b913      	cbnz	r3, 8007706 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
		SchedulerSequenceSteps.MsrcOn ||
 8007700:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007704:	b1cb      	cbz	r3, 800773a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8007706:	aa02      	add	r2, sp, #8
 8007708:	2102      	movs	r1, #2
 800770a:	4630      	mov	r0, r6
 800770c:	f7ff fdb2 	bl	8007274 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007710:	2800      	cmp	r0, #0
 8007712:	d140      	bne.n	8007796 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8007714:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007718:	b12b      	cbz	r3, 8007726 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 800771a:	9b02      	ldr	r3, [sp, #8]
 800771c:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	4413      	add	r3, r2
 8007724:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007726:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800772a:	b1eb      	cbz	r3, 8007768 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800772c:	9b02      	ldr	r3, [sp, #8]
 800772e:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 8007738:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 800773a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800773e:	b9eb      	cbnz	r3, 800777c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007740:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007744:	b15b      	cbz	r3, 800775e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
			Status = get_sequence_step_timeout(Dev,
 8007746:	aa01      	add	r2, sp, #4
 8007748:	2104      	movs	r1, #4
 800774a:	4630      	mov	r0, r6
 800774c:	f7ff fd92 	bl	8007274 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				(FinalRangeTimeoutMicroSeconds +
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	4413      	add	r3, r2
 800775a:	6023      	str	r3, [r4, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800775c:	b9d8      	cbnz	r0, 8007796 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007762:	4628      	mov	r0, r5
 8007764:	b006      	add	sp, #24
 8007766:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007768:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0e4      	beq.n	800773a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8007770:	9b02      	ldr	r3, [sp, #8]
 8007772:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	4413      	add	r3, r2
 800777a:	e7dd      	b.n	8007738 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 800777c:	aa03      	add	r2, sp, #12
 800777e:	2103      	movs	r1, #3
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff fd77 	bl	8007274 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	4413      	add	r3, r2
 8007790:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8007792:	2800      	cmp	r0, #0
 8007794:	d0d4      	beq.n	8007740 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
 8007796:	4605      	mov	r5, r0
 8007798:	e7e3      	b.n	8007762 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

0800779a <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800779a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800779e:	2200      	movs	r2, #0
{
 80077a0:	4605      	mov	r5, r0
 80077a2:	460e      	mov	r6, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077a4:	4610      	mov	r0, r2
 80077a6:	af01      	add	r7, sp, #4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80077a8:	5cb3      	ldrb	r3, [r6, r2]
 80077aa:	18b4      	adds	r4, r6, r2
 80077ac:	b103      	cbz	r3, 80077b0 <VL53L0X_load_tuning_settings+0x16>
 80077ae:	b110      	cbz	r0, 80077b6 <VL53L0X_load_tuning_settings+0x1c>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80077b0:	b002      	add	sp, #8
 80077b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Index++;
 80077b6:	f102 0801 	add.w	r8, r2, #1
		if (NumberOfWrites == 0xFF) {
 80077ba:	2bff      	cmp	r3, #255	; 0xff
 80077bc:	f816 1008 	ldrb.w	r1, [r6, r8]
 80077c0:	d12a      	bne.n	8007818 <VL53L0X_load_tuning_settings+0x7e>
			Index++;
 80077c2:	f102 0802 	add.w	r8, r2, #2
 80077c6:	f816 3008 	ldrb.w	r3, [r6, r8]
			switch (SelectParam) {
 80077ca:	2903      	cmp	r1, #3
 80077cc:	d838      	bhi.n	8007840 <VL53L0X_load_tuning_settings+0xa6>
 80077ce:	e8df f001 	tbb	[pc, r1]
 80077d2:	0b02      	.short	0x0b02
 80077d4:	1b13      	.short	0x1b13
				Index++;
 80077d6:	f102 0804 	add.w	r8, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80077da:	78e2      	ldrb	r2, [r4, #3]
 80077dc:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80077e0:	f8a5 3134 	strh.w	r3, [r5, #308]	; 0x134
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077e4:	4642      	mov	r2, r8
 80077e6:	e7df      	b.n	80077a8 <VL53L0X_load_tuning_settings+0xe>
				Index++;
 80077e8:	f102 0804 	add.w	r8, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80077ec:	78e2      	ldrb	r2, [r4, #3]
 80077ee:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80077f2:	f8a5 3136 	strh.w	r3, [r5, #310]	; 0x136
				break;
 80077f6:	e7f5      	b.n	80077e4 <VL53L0X_load_tuning_settings+0x4a>
				Index++;
 80077f8:	f102 0804 	add.w	r8, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80077fc:	78e2      	ldrb	r2, [r4, #3]
 80077fe:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007802:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
				break;
 8007806:	e7ed      	b.n	80077e4 <VL53L0X_load_tuning_settings+0x4a>
				Index++;
 8007808:	f102 0804 	add.w	r8, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800780c:	78e2      	ldrb	r2, [r4, #3]
 800780e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007812:	f8a5 313a 	strh.w	r3, [r5, #314]	; 0x13a
				break;
 8007816:	e7e5      	b.n	80077e4 <VL53L0X_load_tuning_settings+0x4a>
		} else if (NumberOfWrites <= 4) {
 8007818:	2b04      	cmp	r3, #4
 800781a:	d811      	bhi.n	8007840 <VL53L0X_load_tuning_settings+0xa6>
			Index++;
 800781c:	3202      	adds	r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 800781e:	4283      	cmp	r3, r0
 8007820:	dc06      	bgt.n	8007830 <VL53L0X_load_tuning_settings+0x96>
 8007822:	eb03 0802 	add.w	r8, r3, r2
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007826:	4628      	mov	r0, r5
 8007828:	463a      	mov	r2, r7
 800782a:	f7fc fe43 	bl	80044b4 <VL53L0X_WriteMulti>
 800782e:	e7d9      	b.n	80077e4 <VL53L0X_load_tuning_settings+0x4a>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007830:	eb04 0c00 	add.w	ip, r4, r0
 8007834:	f89c c002 	ldrb.w	ip, [ip, #2]
 8007838:	f807 c000 	strb.w	ip, [r7, r0]
			for (i = 0; i < NumberOfWrites; i++) {
 800783c:	3001      	adds	r0, #1
 800783e:	e7ee      	b.n	800781e <VL53L0X_load_tuning_settings+0x84>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007840:	f06f 0003 	mvn.w	r0, #3
 8007844:	e7ce      	b.n	80077e4 <VL53L0X_load_tuning_settings+0x4a>

08007846 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007846:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007848:	2300      	movs	r3, #0
{
 800784a:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 800784c:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800784e:	f10d 0107 	add.w	r1, sp, #7
{
 8007852:	4605      	mov	r5, r0
 8007854:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007856:	f7fe f93e 	bl	8005ad6 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 800785a:	b940      	cbnz	r0, 800786e <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 800785c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007860:	b12b      	cbz	r3, 800786e <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007862:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8007864:	6a2b      	ldr	r3, [r5, #32]
 8007866:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007868:	3380      	adds	r3, #128	; 0x80
 800786a:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 800786c:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 800786e:	b002      	add	sp, #8
 8007870:	bd70      	pop	{r4, r5, r6, pc}

08007872 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007872:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007874:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8007876:	6013      	str	r3, [r2, #0]
{
 8007878:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 800787a:	aa01      	add	r2, sp, #4
 800787c:	f7ff ffe3 	bl	8007846 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007880:	b918      	cbnz	r0, 800788a <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	4413      	add	r3, r2
 8007888:	6023      	str	r3, [r4, #0]

	return Status;
}
 800788a:	b002      	add	sp, #8
 800788c:	bd10      	pop	{r4, pc}
	...

08007890 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 8007892:	f8b0 5150 	ldrh.w	r5, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007896:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
 800789a:	436c      	muls	r4, r5

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800789c:	3480      	adds	r4, #128	; 0x80
 800789e:	0a24      	lsrs	r4, r4, #8
{
 80078a0:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
	SignalAt0mm *= dmaxCalRange_mm;
 80078a4:	4365      	muls	r5, r4

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 80078a6:	b152      	cbz	r2, 80078be <VL53L0X_calc_dmax+0x2e>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80078a8:	028c      	lsls	r4, r1, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80078aa:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80078ae:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80078b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80078b6:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80078b8:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80078bc:	0c22      	lsrs	r2, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80078be:	9c06      	ldr	r4, [sp, #24]
 80078c0:	435c      	muls	r4, r3
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80078c2:	f506 4100 	add.w	r1, r6, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80078c6:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80078ca:	0c24      	lsrs	r4, r4, #16
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80078cc:	0c09      	lsrs	r1, r1, #16
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80078ce:	fb04 f304 	mul.w	r3, r4, r4
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80078d2:	3103      	adds	r1, #3
 80078d4:	2406      	movs	r4, #6
 80078d6:	fbb1 f1f4 	udiv	r1, r1, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80078da:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 80078de:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80078e2:	bf3f      	itttt	cc
 80078e4:	3603      	addcc	r6, #3
 80078e6:	fbb6 f6f4 	udivcc	r6, r6, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80078ea:	ebc6 06c6 	rsbcc	r6, r6, r6, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80078ee:	f506 4100 	addcc.w	r1, r6, #32768	; 0x8000
 80078f2:	bf36      	itet	cc
 80078f4:	0c0c      	lsrcc	r4, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 80078f6:	4918      	ldrcs	r1, [pc, #96]	; (8007958 <VL53L0X_calc_dmax+0xc8>)

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80078f8:	fb04 f104 	mulcc.w	r1, r4, r4
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80078fc:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (peakVcselDuration_us/2);
 8007900:	eb03 0457 	add.w	r4, r3, r7, lsr #1
 8007904:	440c      	add	r4, r1
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007906:	0980      	lsrs	r0, r0, #6
	minSignalNeeded /= peakVcselDuration_us;
 8007908:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 14;
 800790c:	03a4      	lsls	r4, r4, #14
	minSignalNeeded /= minSignalNeeded_p4;
 800790e:	23fe      	movs	r3, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007910:	347f      	adds	r4, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8007912:	fbb4 f4f3 	udiv	r4, r4, r3
	minSignalNeeded *= minSignalNeeded_p1;
 8007916:	4354      	muls	r4, r2
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007918:	f7ff f92d 	bl	8006b76 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800791c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8007920:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8007924:	fbb4 f4f6 	udiv	r4, r4, r6
	minSignalNeeded <<= 4;
 8007928:	0124      	lsls	r4, r4, #4
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800792a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800792e:	4607      	mov	r7, r0
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007930:	fbb4 f6f6 	udiv	r6, r4, r6

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007934:	b136      	cbz	r6, 8007944 <VL53L0X_calc_dmax+0xb4>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007936:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800793a:	fbb4 f4f3 	udiv	r4, r4, r3
 800793e:	442c      	add	r4, r5
 8007940:	fbb4 f6f6 	udiv	r6, r4, r6
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007944:	4630      	mov	r0, r6
 8007946:	f7ff f916 	bl	8006b76 <VL53L0X_isqrt>
 800794a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794c:	42b8      	cmp	r0, r7
 800794e:	bf94      	ite	ls
 8007950:	6018      	strls	r0, [r3, #0]
 8007952:	601f      	strhi	r7, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007954:	2000      	movs	r0, #0
 8007956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007958:	fff00000 	.word	0xfff00000

0800795c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	b08d      	sub	sp, #52	; 0x34
 8007962:	4606      	mov	r6, r0
 8007964:	9305      	str	r3, [sp, #20]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007966:	6a03      	ldr	r3, [r0, #32]
 8007968:	930a      	str	r3, [sp, #40]	; 0x28
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;

	correctedSignalRate_mcps =
 800796a:	e9d1 3703 	ldrd	r3, r7, [r1, #12]
{
 800796e:	4689      	mov	r9, r1
 8007970:	4692      	mov	sl, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007972:	aa0b      	add	r2, sp, #44	; 0x2c
	correctedSignalRate_mcps =
 8007974:	9307      	str	r3, [sp, #28]
	Status = VL53L0X_get_total_signal_rate(
 8007976:	f7ff ff7c 	bl	8007872 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800797a:	aa0a      	add	r2, sp, #40	; 0x28
 800797c:	4649      	mov	r1, r9
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff61 	bl	8007846 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8007984:	4605      	mov	r5, r0
 8007986:	bb60      	cbnz	r0, 80079e2 <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007988:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800798c:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
 8007990:	4622      	mov	r2, r4
 8007992:	4630      	mov	r0, r6
 8007994:	f7ff fbde 	bl	8007154 <VL53L0X_calc_timeout_mclks>
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007998:	f8d6 10e4 	ldr.w	r1, [r6, #228]	; 0xe4
 800799c:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80079a0:	4683      	mov	fp, r0
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff fbd6 	bl	8007154 <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80079a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80079aa:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 80079ae:	2c08      	cmp	r4, #8
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80079b0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80079b4:	fb04 f803 	mul.w	r8, r4, r3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80079b8:	f508 4800 	add.w	r8, r8, #32768	; 0x8000
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80079bc:	f103 0380 	add.w	r3, r3, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80079c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
			vcselWidth = 2;
 80079c4:	bf14      	ite	ne
 80079c6:	2103      	movne	r1, #3
 80079c8:	2102      	moveq	r1, #2
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 80079ca:	ea5f 4c18 	movs.w	ip, r8, lsr #16
		totalSignalRate_mcps <<= 8;
 80079ce:	9204      	str	r2, [sp, #16]
 80079d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80079d2:	4a53      	ldr	r2, [pc, #332]	; (8007b20 <VL53L0X_calc_sigma_estimate+0x1c4>)
	if (peakSignalRate_kcps == 0) {
 80079d4:	d109      	bne.n	80079ea <VL53L0X_calc_sigma_estimate+0x8e>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 80079d6:	9b05      	ldr	r3, [sp, #20]
		*pSigmaEstimate = cSigmaEstMax;
 80079d8:	f8ca 2000 	str.w	r2, [sl]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80079dc:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		*pDmax_mm = 0;
 80079e0:	601d      	str	r5, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80079e2:	4628      	mov	r0, r5
 80079e4:	b00d      	add	sp, #52	; 0x34
 80079e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80079ea:	4458      	add	r0, fp
		peakVcselDuration_us = vcselWidth * 2048 *
 80079ec:	02c0      	lsls	r0, r0, #11
 80079ee:	4341      	muls	r1, r0
		peakVcselDuration_us *= cPllPeriod_ps;
 80079f0:	f240 6b77 	movw	fp, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80079f4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80079f8:	0a1b      	lsrs	r3, r3, #8
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80079fa:	fbb1 f1f4 	udiv	r1, r1, r4
		peakVcselDuration_us *= cPllPeriod_ps;
 80079fe:	fb0b fb01 	mul.w	fp, fp, r1
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007a02:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007a06:	4947      	ldr	r1, [pc, #284]	; (8007b24 <VL53L0X_calc_sigma_estimate+0x1c8>)
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007a08:	fbbb fbf4 	udiv	fp, fp, r4
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007a0c:	fb0b f303 	mul.w	r3, fp, r3
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007a10:	3380      	adds	r3, #128	; 0x80
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007a12:	4367      	muls	r7, r4
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007a14:	fb04 f50e 	mul.w	r5, r4, lr
		if (vcselTotalEventsRtn < 1)
 8007a18:	0a1b      	lsrs	r3, r3, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007a1a:	ea07 0701 	and.w	r7, r7, r1
 8007a1e:	fbb7 fcfc 	udiv	ip, r7, ip
 8007a22:	4f41      	ldr	r7, [pc, #260]	; (8007b28 <VL53L0X_calc_sigma_estimate+0x1cc>)
 8007a24:	9209      	str	r2, [sp, #36]	; 0x24
			vcselTotalEventsRtn = 1;
 8007a26:	bf08      	it	eq
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	f5b5 1f48 	cmp.w	r5, #3276800	; 0x320000
 8007a2e:	bf28      	it	cs
 8007a30:	f44f 1548 	movcs.w	r5, #3276800	; 0x320000
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007a34:	200c      	movs	r0, #12
 8007a36:	45bc      	cmp	ip, r7
 8007a38:	bf28      	it	cs
 8007a3a:	46bc      	movcs	ip, r7
 8007a3c:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007a3e:	f44f 7716 	mov.w	r7, #600	; 0x258
 8007a42:	fb07 f70c 	mul.w	r7, r7, ip
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007a46:	9108      	str	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007a48:	f7ff f895 	bl	8006b76 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007a4c:	9908      	ldr	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007a4e:	9006      	str	r0, [sp, #24]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007a50:	ea08 0801 	and.w	r8, r8, r1
 8007a54:	eba8 0005 	sub.w	r0, r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8007a58:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007a5c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8007a60:	4b32      	ldr	r3, [pc, #200]	; (8007b2c <VL53L0X_calc_sigma_estimate+0x1d0>)
			xTalkCompRate_kcps) + 500)/1000;
 8007a62:	44a8      	add	r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8007a64:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007a68:	fbb8 f8f4 	udiv	r8, r8, r4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007a6c:	fbb0 f0f4 	udiv	r0, r0, r4
		diff1_mcps <<= 8;
 8007a70:	0200      	lsls	r0, r0, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007a72:	fbb0 f0f8 	udiv	r0, r0, r8
		xTalkCorrection <<= 8;
 8007a76:	0205      	lsls	r5, r0, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007a78:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007a7c:	4359      	muls	r1, r3
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007a7e:	f241 235c 	movw	r3, #4700	; 0x125c
 8007a82:	fbb1 f3f3 	udiv	r3, r1, r3
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007a86:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007a88:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8007a8c:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 8007a8e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8007a92:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8007a94:	436d      	muls	r5, r5
		pwMult >>= 14;
 8007a96:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8007a98:	f44f 7848 	mov.w	r8, #800	; 0x320
 8007a9c:	fb08 f005 	mul.w	r0, r8, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007aa0:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007aa4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007aa8:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 8007aaa:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007aac:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007aae:	fb00 3000 	mla	r0, r0, r0, r3
 8007ab2:	f7ff f860 	bl	8006b76 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 8007ab6:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007ab8:	2364      	movs	r3, #100	; 0x64
 8007aba:	3032      	adds	r0, #50	; 0x32
 8007abc:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007ac0:	9b06      	ldr	r3, [sp, #24]
		sigmaEstRtn		 += 5000;
 8007ac2:	f640 31b5 	movw	r1, #2997	; 0xbb5
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007ac6:	005b      	lsls	r3, r3, #1
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007ac8:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstRtn		 += 5000;
 8007acc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ad0:	fb01 3000 	mla	r0, r1, r0, r3
		sigmaEstRtn		 /= 10000;
 8007ad4:	f242 7310 	movw	r3, #10000	; 0x2710
 8007ad8:	fbb0 f0f3 	udiv	r0, r0, r3
 8007adc:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 8007ae0:	bf28      	it	cs
 8007ae2:	f44f 4070 	movcs.w	r0, #61440	; 0xf000
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007ae6:	f241 1304 	movw	r3, #4356	; 0x1104
 8007aea:	fb00 3000 	mla	r0, r0, r0, r3
 8007aee:	f7ff f842 	bl	8006b76 <VL53L0X_isqrt>
 8007af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
		Status = VL53L0X_calc_dmax(
 8007af4:	9b05      	ldr	r3, [sp, #20]
 8007af6:	9904      	ldr	r1, [sp, #16]
		sigmaEstimate	 = 1000 * sqrtResult;
 8007af8:	4360      	muls	r0, r4
 8007afa:	4282      	cmp	r2, r0
 8007afc:	bf28      	it	cs
 8007afe:	4602      	movcs	r2, r0
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007b00:	f8ca 2000 	str.w	r2, [sl]
		Status = VL53L0X_calc_dmax(
 8007b04:	e9cd b302 	strd	fp, r3, [sp, #8]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007b08:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	e9cd 8700 	strd	r8, r7, [sp]
 8007b12:	9a07      	ldr	r2, [sp, #28]
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7ff febb 	bl	8007890 <VL53L0X_calc_dmax>
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	e761      	b.n	80079e2 <VL53L0X_calc_sigma_estimate+0x86>
 8007b1e:	bf00      	nop
 8007b20:	028f87ae 	.word	0x028f87ae
 8007b24:	ffff0000 	.word	0xffff0000
 8007b28:	00666666 	.word	0x00666666
 8007b2c:	0006999a 	.word	0x0006999a

08007b30 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	b08b      	sub	sp, #44	; 0x2c
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007b36:	ea4f 09d1 	mov.w	r9, r1, lsr #3
{
 8007b3a:	469b      	mov	fp, r3
	uint8_t SigmaLimitCheckEnable = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007b42:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007b46:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007b4a:	f88d 3011 	strb.w	r3, [sp, #17]
	uint16_t tmpWord = 0;
 8007b4e:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint32_t Dmax_mm = 0;
 8007b52:	9309      	str	r3, [sp, #36]	; 0x24
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007b54:	f009 070f 	and.w	r7, r9, #15

	if (DeviceRangeStatusInternal == 0 ||
 8007b58:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 8007b5c:	40fb      	lsrs	r3, r7
{
 8007b5e:	9201      	str	r2, [sp, #4]
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007b60:	f003 0301 	and.w	r3, r3, #1
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b64:	2201      	movs	r2, #1
 8007b66:	21ff      	movs	r1, #255	; 0xff
{
 8007b68:	4604      	mov	r4, r0
 8007b6a:	9e15      	ldr	r6, [sp, #84]	; 0x54
		NoneFlag = 1;
 8007b6c:	9300      	str	r3, [sp, #0]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b6e:	f7fc fd1b 	bl	80045a8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8007b72:	b928      	cbnz	r0, 8007b80 <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 8007b74:	f10d 0212 	add.w	r2, sp, #18
 8007b78:	21b6      	movs	r1, #182	; 0xb6
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fc fcce 	bl	800451c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007b80:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8007b84:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 8007b88:	b920      	cbnz	r0, 8007b94 <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	21ff      	movs	r1, #255	; 0xff
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7fc fd0a 	bl	80045a8 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007b94:	f8c4 a144 	str.w	sl, [r4, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007b98:	b928      	cbnz	r0, 8007ba6 <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	f10d 020e 	add.w	r2, sp, #14
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7fd fff2 	bl	8005b8a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007ba6:	f89d 500e 	ldrb.w	r5, [sp, #14]
 8007baa:	b1d5      	cbz	r5, 8007be2 <VL53L0X_get_pal_range_status+0xb2>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f040 808c 	bne.w	8007cca <VL53L0X_get_pal_range_status+0x19a>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007bb2:	ab09      	add	r3, sp, #36	; 0x24
 8007bb4:	aa05      	add	r2, sp, #20
 8007bb6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7ff fecf 	bl	800795c <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f040 8083 	bne.w	8007cca <VL53L0X_get_pal_range_status+0x19a>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc8:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007bca:	4601      	mov	r1, r0
 8007bcc:	aa06      	add	r2, sp, #24
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f7fe f816 	bl	8005c00 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007bd4:	9d06      	ldr	r5, [sp, #24]
 8007bd6:	b125      	cbz	r5, 8007be2 <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 8007bd8:	9b05      	ldr	r3, [sp, #20]
 8007bda:	429d      	cmp	r5, r3
 8007bdc:	bf2c      	ite	cs
 8007bde:	2500      	movcs	r5, #0
 8007be0:	2501      	movcc	r5, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007be2:	b920      	cbnz	r0, 8007bee <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007be4:	aa04      	add	r2, sp, #16
 8007be6:	2102      	movs	r1, #2
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7fd ffce 	bl	8005b8a <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007bee:	f89d 8010 	ldrb.w	r8, [sp, #16]
 8007bf2:	f1b8 0f00 	cmp.w	r8, #0
 8007bf6:	d00f      	beq.n	8007c18 <VL53L0X_get_pal_range_status+0xe8>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d16a      	bne.n	8007cd2 <VL53L0X_get_pal_range_status+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007bfc:	aa07      	add	r2, sp, #28
 8007bfe:	2102      	movs	r1, #2
 8007c00:	4620      	mov	r0, r4
 8007c02:	f7fd fffd 	bl	8005c00 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8007c06:	9b07      	ldr	r3, [sp, #28]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d060      	beq.n	8007cce <VL53L0X_get_pal_range_status+0x19e>
	uint8_t SignalRefClipflag = 0;
 8007c0c:	4553      	cmp	r3, sl
 8007c0e:	bf2c      	ite	cs
 8007c10:	f04f 0800 	movcs.w	r8, #0
 8007c14:	f04f 0801 	movcc.w	r8, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007c18:	b928      	cbnz	r0, 8007c26 <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007c1a:	f10d 0211 	add.w	r2, sp, #17
 8007c1e:	2103      	movs	r1, #3
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7fd ffb2 	bl	8005b8a <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007c26:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007c2a:	f1ba 0f00 	cmp.w	sl, #0
 8007c2e:	d016      	beq.n	8007c5e <VL53L0X_get_pal_range_status+0x12e>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d177      	bne.n	8007d24 <VL53L0X_get_pal_range_status+0x1f4>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007c34:	f1bb 0f00 	cmp.w	fp, #0
 8007c38:	d003      	beq.n	8007c42 <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007c3a:	9b01      	ldr	r3, [sp, #4]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	fbb3 fbfb 	udiv	fp, r3, fp
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007c42:	aa08      	add	r2, sp, #32
 8007c44:	2103      	movs	r1, #3
 8007c46:	4620      	mov	r0, r4
 8007c48:	f7fd ffda 	bl	8005c00 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007c4c:	9a08      	ldr	r2, [sp, #32]
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d042      	beq.n	8007cd8 <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007c52:	455a      	cmp	r2, fp
 8007c54:	bf94      	ite	ls
 8007c56:	f04f 0a00 	movls.w	sl, #0
 8007c5a:	f04f 0a01 	movhi.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c5e:	b920      	cbnz	r0, 8007c6a <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 8007c60:	9b00      	ldr	r3, [sp, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d03a      	beq.n	8007cdc <VL53L0X_get_pal_range_status+0x1ac>
			*pPalRangeStatus = 255;	 /* NONE */
 8007c66:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007c68:	7032      	strb	r2, [r6, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007c6a:	7832      	ldrb	r2, [r6, #0]
 8007c6c:	b90a      	cbnz	r2, 8007c72 <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c70:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007c72:	f10d 020f 	add.w	r2, sp, #15
 8007c76:	2101      	movs	r1, #1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f7fd ff86 	bl	8005b8a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c7e:	bb08      	cbnz	r0, 8007cc4 <VL53L0X_get_pal_range_status+0x194>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007c80:	f89d 200e 	ldrb.w	r2, [sp, #14]
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007c84:	f89d 3011 	ldrb.w	r3, [sp, #17]
			Temp8 = 1;
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	bf08      	it	eq
 8007c8c:	2501      	moveq	r5, #1
		if ((DeviceRangeStatusInternal == 4) ||
 8007c8e:	2f04      	cmp	r7, #4
 8007c90:	bf18      	it	ne
 8007c92:	f89d 200f 	ldrbne.w	r2, [sp, #15]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007c96:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
			Temp8 = 1;
 8007c9a:	bf1a      	itte	ne
 8007c9c:	fab2 f282 	clzne	r2, r2
 8007ca0:	0952      	lsrne	r2, r2, #5
 8007ca2:	2201      	moveq	r2, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007ca4:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007ca8:	f89d 2010 	ldrb.w	r2, [sp, #16]
			Temp8 = 1;
 8007cac:	2a00      	cmp	r2, #0
 8007cae:	bf08      	it	eq
 8007cb0:	f04f 0801 	moveq.w	r8, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf08      	it	eq
 8007cb8:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007cbc:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007cc0:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8007cc4:	b00b      	add	sp, #44	; 0x2c
 8007cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cca:	2500      	movs	r5, #0
 8007ccc:	e78f      	b.n	8007bee <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 8007cce:	4698      	mov	r8, r3
 8007cd0:	e7a2      	b.n	8007c18 <VL53L0X_get_pal_range_status+0xe8>
 8007cd2:	f04f 0800 	mov.w	r8, #0
 8007cd6:	e7a6      	b.n	8007c26 <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007cd8:	4692      	mov	sl, r2
 8007cda:	e7c0      	b.n	8007c5e <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007cdc:	1e7a      	subs	r2, r7, #1
 8007cde:	2a02      	cmp	r2, #2
 8007ce0:	d801      	bhi.n	8007ce6 <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 5; /* HW fail */
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	e7c0      	b.n	8007c68 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007ce6:	2f06      	cmp	r7, #6
 8007ce8:	d001      	beq.n	8007cee <VL53L0X_get_pal_range_status+0x1be>
 8007cea:	2f09      	cmp	r7, #9
 8007cec:	d101      	bne.n	8007cf2 <VL53L0X_get_pal_range_status+0x1c2>
			*pPalRangeStatus = 4;  /* Phase fail */
 8007cee:	2204      	movs	r2, #4
 8007cf0:	e7ba      	b.n	8007c68 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007cf2:	f009 090d 	and.w	r9, r9, #13
 8007cf6:	f1b9 0f08 	cmp.w	r9, #8
 8007cfa:	d002      	beq.n	8007d02 <VL53L0X_get_pal_range_status+0x1d2>
					DeviceRangeStatusInternal == 10 ||
 8007cfc:	f1b8 0f01 	cmp.w	r8, #1
 8007d00:	d101      	bne.n	8007d06 <VL53L0X_get_pal_range_status+0x1d6>
			*pPalRangeStatus = 3;  /* Min range */
 8007d02:	2203      	movs	r2, #3
 8007d04:	e7b0      	b.n	8007c68 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007d06:	2f04      	cmp	r7, #4
 8007d08:	d002      	beq.n	8007d10 <VL53L0X_get_pal_range_status+0x1e0>
 8007d0a:	f1ba 0f01 	cmp.w	sl, #1
 8007d0e:	d101      	bne.n	8007d14 <VL53L0X_get_pal_range_status+0x1e4>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007d10:	2202      	movs	r2, #2
 8007d12:	e7a9      	b.n	8007c68 <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 8007d14:	2d01      	cmp	r5, #1
 8007d16:	d101      	bne.n	8007d1c <VL53L0X_get_pal_range_status+0x1ec>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007d18:	2201      	movs	r2, #1
 8007d1a:	e7a5      	b.n	8007c68 <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	7032      	strb	r2, [r6, #0]
 8007d20:	46aa      	mov	sl, r5
 8007d22:	e7a2      	b.n	8007c6a <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007d24:	f04f 0a00 	mov.w	sl, #0
 8007d28:	e79f      	b.n	8007c6a <VL53L0X_get_pal_range_status+0x13a>
	...

08007d2c <VL53L0X_check_part_used>:
/* Functions Definition ------------------------------------------------------*/

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007d30:	2102      	movs	r1, #2
{
 8007d32:	4606      	mov	r6, r0
 8007d34:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007d36:	f7fe ff52 	bl	8006bde <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	b940      	cbnz	r0, 8007d50 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8007d3e:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 8007d42:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007d46:	b92b      	cbnz	r3, 8007d54 <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8007d48:	4905      	ldr	r1, [pc, #20]	; (8007d60 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 8007d4a:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007d4c:	f01b fd7a 	bl	8023844 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007d50:	4628      	mov	r0, r5
 8007d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8007d54:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8007d58:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007d5a:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 8007d5e:	e7f5      	b.n	8007d4c <VL53L0X_check_part_used+0x20>
 8007d60:	0802fdc9 	.word	0x0802fdc9

08007d64 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d66:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007d68:	460a      	mov	r2, r1
 8007d6a:	f10d 0107 	add.w	r1, sp, #7
{
 8007d6e:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007d70:	f7ff ffdc 	bl	8007d2c <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 8007d74:	bb00      	cbnz	r0, 8007db8 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 8007d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007d7a:	b9fb      	cbnz	r3, 8007dbc <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007d7c:	4915      	ldr	r1, [pc, #84]	; (8007dd4 <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f01b fd60 	bl	8023844 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007d84:	4914      	ldr	r1, [pc, #80]	; (8007dd8 <VL53L0X_get_device_info+0x74>)
 8007d86:	f104 0020 	add.w	r0, r4, #32
 8007d8a:	f01b fd5b 	bl	8023844 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007d8e:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8007d92:	21c0      	movs	r1, #192	; 0xc0
 8007d94:	4628      	mov	r0, r5
 8007d96:	f7fc fb78 	bl	800448a <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d9a:	b968      	cbnz	r0, 8007db8 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 8007d9c:	f10d 0206 	add.w	r2, sp, #6
 8007da0:	21c2      	movs	r1, #194	; 0xc2
 8007da2:	4628      	mov	r0, r5
 8007da4:	f7fc fb71 	bl	800448a <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8007dae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007db2:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8007db4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 8007db8:	b003      	add	sp, #12
 8007dba:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 8007dbc:	2b22      	cmp	r3, #34	; 0x22
 8007dbe:	d803      	bhi.n	8007dc8 <VL53L0X_get_device_info+0x64>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d003      	beq.n	8007dcc <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007dc4:	4905      	ldr	r1, [pc, #20]	; (8007ddc <VL53L0X_get_device_info+0x78>)
 8007dc6:	e7da      	b.n	8007d7e <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 8007dc8:	2b26      	cmp	r3, #38	; 0x26
 8007dca:	d801      	bhi.n	8007dd0 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007dcc:	4904      	ldr	r1, [pc, #16]	; (8007de0 <VL53L0X_get_device_info+0x7c>)
 8007dce:	e7d6      	b.n	8007d7e <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007dd0:	4904      	ldr	r1, [pc, #16]	; (8007de4 <VL53L0X_get_device_info+0x80>)
 8007dd2:	e7d4      	b.n	8007d7e <VL53L0X_get_device_info+0x1a>
 8007dd4:	0802f16f 	.word	0x0802f16f
 8007dd8:	0802f1a8 	.word	0x0802f1a8
 8007ddc:	0802f17b 	.word	0x0802f17b
 8007de0:	0802f187 	.word	0x0802f187
 8007de4:	0802f193 	.word	0x0802f193

08007de8 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8007de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8007dea:	7803      	ldrb	r3, [r0, #0]
 8007dec:	2b2d      	cmp	r3, #45	; 0x2d
 8007dee:	d115      	bne.n	8007e1c <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8007df0:	3001      	adds	r0, #1
        minus = 1;
 8007df2:	2501      	movs	r5, #1
 8007df4:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8007df6:	462a      	mov	r2, r5
 8007df8:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007dfa:	270a      	movs	r7, #10
 8007dfc:	e003      	b.n	8007e06 <ParseNumber+0x1e>
        ptr++;
        i++;
 8007dfe:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007e00:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8007e04:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007e06:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007e0a:	3c30      	subs	r4, #48	; 0x30
 8007e0c:	b2e6      	uxtb	r6, r4
 8007e0e:	2e09      	cmp	r6, #9
 8007e10:	d9f5      	bls.n	8007dfe <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8007e12:	b101      	cbz	r1, 8007e16 <ParseNumber+0x2e>
        *cnt = i;
 8007e14:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8007e16:	b105      	cbz	r5, 8007e1a <ParseNumber+0x32>
        return 0 - sum;
 8007e18:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8007e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	e7e9      	b.n	8007df4 <ParseNumber+0xc>

08007e20 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8007e22:	2600      	movs	r6, #0

  while(* ptr) {
 8007e24:	7803      	ldrb	r3, [r0, #0]
 8007e26:	b903      	cbnz	r3, 8007e2a <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8007e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8007e2a:	2b3a      	cmp	r3, #58	; 0x3a
 8007e2c:	d029      	beq.n	8007e82 <ParseMAC+0x62>
 8007e2e:	4684      	mov	ip, r0
    uint32_t sum = 0;
 8007e30:	2400      	movs	r4, #0
 8007e32:	ebac 0500 	sub.w	r5, ip, r0
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007e36:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8007e3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	2a09      	cmp	r2, #9
 8007e42:	b2ed      	uxtb	r5, r5
 8007e44:	d909      	bls.n	8007e5a <ParseMAC+0x3a>
 8007e46:	f023 0720 	bic.w	r7, r3, #32
 8007e4a:	3f41      	subs	r7, #65	; 0x41
 8007e4c:	2f05      	cmp	r7, #5
 8007e4e:	d904      	bls.n	8007e5a <ParseMAC+0x3a>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007e50:	1c73      	adds	r3, r6, #1
 8007e52:	558c      	strb	r4, [r1, r6]
 8007e54:	b2de      	uxtb	r6, r3
    ptr = ptr + hexcnt;
 8007e56:	4428      	add	r0, r5
 8007e58:	e7e4      	b.n	8007e24 <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007e5a:	2a09      	cmp	r2, #9
        sum <<= 4;
 8007e5c:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007e60:	d905      	bls.n	8007e6e <ParseMAC+0x4e>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8007e62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e66:	2a05      	cmp	r2, #5
 8007e68:	d803      	bhi.n	8007e72 <ParseMAC+0x52>
        return (a - 'a') + 10;
 8007e6a:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8007e6c:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8007e6e:	4414      	add	r4, r2
 8007e70:	e7df      	b.n	8007e32 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8007e72:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e76:	2a05      	cmp	r2, #5
 8007e78:	d801      	bhi.n	8007e7e <ParseMAC+0x5e>
        return (a - 'A') + 10;
 8007e7a:	3b37      	subs	r3, #55	; 0x37
 8007e7c:	e7f6      	b.n	8007e6c <ParseMAC+0x4c>
    return 0;
 8007e7e:	2200      	movs	r2, #0
 8007e80:	e7f5      	b.n	8007e6e <ParseMAC+0x4e>
    hexcnt = 1;
 8007e82:	2501      	movs	r5, #1
 8007e84:	e7e7      	b.n	8007e56 <ParseMAC+0x36>

08007e86 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8007e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e88:	4604      	mov	r4, r0
 8007e8a:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8007e8c:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 8007e8e:	2701      	movs	r7, #1
  while(* ptr) {
 8007e90:	7823      	ldrb	r3, [r4, #0]
 8007e92:	b90b      	cbnz	r3, 8007e98 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8007e94:	b003      	add	sp, #12
 8007e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8007e98:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8007e9a:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8007e9e:	d007      	beq.n	8007eb0 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007ea0:	f10d 0107 	add.w	r1, sp, #7
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f7ff ff9f 	bl	8007de8 <ParseNumber>
 8007eaa:	1c6b      	adds	r3, r5, #1
 8007eac:	5570      	strb	r0, [r6, r5]
 8007eae:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8007eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007eb4:	441c      	add	r4, r3
 8007eb6:	e7eb      	b.n	8007e90 <ParseIP+0xa>

08007eb8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007ebc:	4608      	mov	r0, r1
{
 8007ebe:	460e      	mov	r6, r1
 8007ec0:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007ec2:	f7f8 f98f 	bl	80001e4 <strlen>
 8007ec6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007eca:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007ece:	b281      	uxth	r1, r0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4798      	blx	r3

  if( ret > 0)
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	dd19      	ble.n	8007f0c <AT_ExecuteCommand+0x54>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007ed8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007edc:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007ee0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	4798      	blx	r3
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8007ee8:	1e43      	subs	r3, r0, #1
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f240 5276 	movw	r2, #1398	; 0x576
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d80d      	bhi.n	8007f10 <AT_ExecuteCommand+0x58>
    {
      *(pdata + recv_len) = 0;
 8007ef4:	2400      	movs	r4, #0
 8007ef6:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8007ef8:	4909      	ldr	r1, [pc, #36]	; (8007f20 <AT_ExecuteCommand+0x68>)
 8007efa:	4628      	mov	r0, r5
 8007efc:	f01b fcd1 	bl	80238a2 <strstr>
 8007f00:	b950      	cbnz	r0, 8007f18 <AT_ExecuteCommand+0x60>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007f02:	4908      	ldr	r1, [pc, #32]	; (8007f24 <AT_ExecuteCommand+0x6c>)
 8007f04:	4628      	mov	r0, r5
 8007f06:	f01b fccc 	bl	80238a2 <strstr>
 8007f0a:	b938      	cbnz	r0, 8007f1c <AT_ExecuteCommand+0x64>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 8007f0c:	2004      	movs	r0, #4
}
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8007f10:	3004      	adds	r0, #4
 8007f12:	d1fb      	bne.n	8007f0c <AT_ExecuteCommand+0x54>
      return ES_WIFI_STATUS_MODULE_CRASH;
 8007f14:	2006      	movs	r0, #6
 8007f16:	e7fa      	b.n	8007f0e <AT_ExecuteCommand+0x56>
        return ES_WIFI_STATUS_OK;
 8007f18:	4620      	mov	r0, r4
 8007f1a:	e7f8      	b.n	8007f0e <AT_ExecuteCommand+0x56>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007f1c:	2005      	movs	r0, #5
 8007f1e:	e7f6      	b.n	8007f0e <AT_ExecuteCommand+0x56>
 8007f20:	0802f5a6 	.word	0x0802f5a6
 8007f24:	0802f5af 	.word	0x0802f5af

08007f28 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8007f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2c:	4605      	mov	r5, r0
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 8007f2e:	4608      	mov	r0, r1
{
 8007f30:	4688      	mov	r8, r1
 8007f32:	4691      	mov	r9, r2
 8007f34:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8007f36:	f7f8 f955 	bl	80001e4 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007f3a:	f010 0401 	ands.w	r4, r0, #1
{
 8007f3e:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 8007f40:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007f44:	d126      	bne.n	8007f94 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8007f46:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8007f4a:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 8007f4e:	4651      	mov	r1, sl
 8007f50:	4640      	mov	r0, r8
 8007f52:	4798      	blx	r3
  if (n == cmd_len)
 8007f54:	b280      	uxth	r0, r0
 8007f56:	4582      	cmp	sl, r0
 8007f58:	d123      	bne.n	8007fa2 <AT_RequestSendData+0x7a>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007f5a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8007f5e:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 8007f62:	4639      	mov	r1, r7
 8007f64:	4648      	mov	r0, r9
 8007f66:	4798      	blx	r3
    if (send_len == len)
 8007f68:	42b8      	cmp	r0, r7
 8007f6a:	d113      	bne.n	8007f94 <AT_RequestSendData+0x6c>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007f6c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8007f70:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 8007f74:	4621      	mov	r1, r4
 8007f76:	4630      	mov	r0, r6
 8007f78:	4798      	blx	r3
      if (recv_len > 0)
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	dd0d      	ble.n	8007f9a <AT_RequestSendData+0x72>
      {
        *(pdata+recv_len) = 0;
 8007f7e:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8007f80:	490b      	ldr	r1, [pc, #44]	; (8007fb0 <AT_RequestSendData+0x88>)
 8007f82:	4630      	mov	r0, r6
 8007f84:	f01b fc8d 	bl	80238a2 <strstr>
 8007f88:	b968      	cbnz	r0, 8007fa6 <AT_RequestSendData+0x7e>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007f8a:	490a      	ldr	r1, [pc, #40]	; (8007fb4 <AT_RequestSendData+0x8c>)
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f01b fc88 	bl	80238a2 <strstr>
 8007f92:	b950      	cbnz	r0, 8007faa <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8007f94:	2002      	movs	r0, #2
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
}
 8007f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8007f9a:	3004      	adds	r0, #4
 8007f9c:	d1fa      	bne.n	8007f94 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8007f9e:	2006      	movs	r0, #6
 8007fa0:	e7f9      	b.n	8007f96 <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8007fa2:	2004      	movs	r0, #4
 8007fa4:	e7f7      	b.n	8007f96 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	e7f5      	b.n	8007f96 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007faa:	2005      	movs	r0, #5
 8007fac:	e7f3      	b.n	8007f96 <AT_RequestSendData+0x6e>
 8007fae:	bf00      	nop
 8007fb0:	0802f5a6 	.word	0x0802f5a6
 8007fb4:	0802f5af 	.word	0x0802f5af

08007fb8 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	4604      	mov	r4, r0
  int len;
  uint8_t *p=Obj->CmdData;
 8007fbe:	f500 7694 	add.w	r6, r0, #296	; 0x128
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007fc2:	4608      	mov	r0, r1
{
 8007fc4:	460d      	mov	r5, r1
 8007fc6:	4690      	mov	r8, r2
 8007fc8:	4699      	mov	r9, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007fca:	f7f8 f90b 	bl	80001e4 <strlen>
 8007fce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007fd2:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
{
 8007fd6:	9f08      	ldr	r7, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007fd8:	b281      	uxth	r1, r0
 8007fda:	4628      	mov	r0, r5
 8007fdc:	4798      	blx	r3
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	dc02      	bgt.n	8007fe8 <AT_RequestReceiveData+0x30>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8007fe2:	2004      	movs	r0, #4
}
 8007fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8007fe8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007fec:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 8007ff6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8007ffa:	2b0d      	cmp	r3, #13
 8007ffc:	d1f1      	bne.n	8007fe2 <AT_RequestReceiveData+0x2a>
 8007ffe:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8008002:	2b0a      	cmp	r3, #10
 8008004:	d1ed      	bne.n	8007fe2 <AT_RequestReceiveData+0x2a>
    len-=2;
 8008006:	3802      	subs	r0, #2
    if (len >= AT_OK_STRING_LEN)
 8008008:	2807      	cmp	r0, #7
 800800a:	d9ea      	bls.n	8007fe2 <AT_RequestReceiveData+0x2a>
    p+=2;
 800800c:	f504 7495 	add.w	r4, r4, #298	; 0x12a
 8008010:	4420      	add	r0, r4
     while(len && (p[len-1]==0x15)) len--;
 8008012:	4284      	cmp	r4, r0
 8008014:	eba0 0304 	sub.w	r3, r0, r4
 8008018:	d017      	beq.n	800804a <AT_RequestReceiveData+0x92>
 800801a:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 800801e:	2a15      	cmp	r2, #21
 8008020:	d0f7      	beq.n	8008012 <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 8008022:	2600      	movs	r6, #0
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8008024:	f1a3 0508 	sub.w	r5, r3, #8
     p[len] = '\0';
 8008028:	54e6      	strb	r6, [r4, r3]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800802a:	490a      	ldr	r1, [pc, #40]	; (8008054 <AT_RequestReceiveData+0x9c>)
 800802c:	1960      	adds	r0, r4, r5
 800802e:	f01b fc38 	bl	80238a2 <strstr>
 8008032:	b160      	cbz	r0, 800804e <AT_RequestReceiveData+0x96>
 8008034:	b2aa      	uxth	r2, r5
 8008036:	454a      	cmp	r2, r9
 8008038:	bf28      	it	cs
 800803a:	464a      	movcs	r2, r9
 800803c:	803a      	strh	r2, [r7, #0]
       memcpy(pdata, p, *ReadData);
 800803e:	4621      	mov	r1, r4
 8008040:	4640      	mov	r0, r8
 8008042:	f01a f950 	bl	80222e6 <memcpy>
       return ES_WIFI_STATUS_OK;
 8008046:	4630      	mov	r0, r6
 8008048:	e7cc      	b.n	8007fe4 <AT_RequestReceiveData+0x2c>
 800804a:	2300      	movs	r3, #0
 800804c:	e7e9      	b.n	8008022 <AT_RequestReceiveData+0x6a>
       *ReadData = 0;
 800804e:	8038      	strh	r0, [r7, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008050:	2005      	movs	r0, #5
 8008052:	e7c7      	b.n	8007fe4 <AT_RequestReceiveData+0x2c>
 8008054:	0802f5a6 	.word	0x0802f5a6

08008058 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8008058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800805c:	f247 5330 	movw	r3, #30000	; 0x7530
 8008060:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0
{
 8008064:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8008066:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800806a:	2000      	movs	r0, #0
 800806c:	4798      	blx	r3
 800806e:	2800      	cmp	r0, #0
 8008070:	d14b      	bne.n	800810a <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8008072:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8008076:	4926      	ldr	r1, [pc, #152]	; (8008110 <ES_WIFI_Init+0xb8>)
 8008078:	4620      	mov	r0, r4
 800807a:	f7ff ff1d 	bl	8007eb8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 800807e:	4605      	mov	r5, r0
 8008080:	b960      	cbnz	r0, 800809c <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8008082:	4924      	ldr	r1, [pc, #144]	; (8008114 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8008084:	4f24      	ldr	r7, [pc, #144]	; (8008118 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8008086:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008114 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 800808a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800808e:	f01c fa47 	bl	8024520 <strtok>
 8008092:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008094:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8008098:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 800809a:	b910      	cbnz	r0, 80080a2 <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 800809c:	4628      	mov	r0, r5
 800809e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 80080a2:	2b06      	cmp	r3, #6
 80080a4:	d824      	bhi.n	80080f0 <ES_WIFI_Init+0x98>
 80080a6:	e8df f003 	tbb	[pc, r3]
 80080aa:	0a04      	.short	0x0a04
 80080ac:	1e19140f 	.word	0x1e19140f
 80080b0:	29          	.byte	0x29
 80080b1:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80080b2:	4601      	mov	r1, r0
 80080b4:	2220      	movs	r2, #32
 80080b6:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80080b8:	f01b fbde 	bl	8023878 <strncpy>
 80080bc:	e018      	b.n	80080f0 <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80080be:	4601      	mov	r1, r0
 80080c0:	2218      	movs	r2, #24
 80080c2:	f104 0020 	add.w	r0, r4, #32
 80080c6:	e7f7      	b.n	80080b8 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80080c8:	4601      	mov	r1, r0
 80080ca:	2210      	movs	r2, #16
 80080cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80080d0:	e7f2      	b.n	80080b8 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80080d2:	4601      	mov	r1, r0
 80080d4:	2210      	movs	r2, #16
 80080d6:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80080da:	e7ed      	b.n	80080b8 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80080dc:	4601      	mov	r1, r0
 80080de:	2210      	movs	r2, #16
 80080e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080e4:	e7e8      	b.n	80080b8 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80080e6:	2100      	movs	r1, #0
 80080e8:	f7ff fe7e 	bl	8007de8 <ParseNumber>
 80080ec:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 80080f0:	4649      	mov	r1, r9
 80080f2:	2000      	movs	r0, #0
 80080f4:	f01c fa14 	bl	8024520 <strtok>
 80080f8:	3601      	adds	r6, #1
 80080fa:	e7cd      	b.n	8008098 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 80080fc:	4639      	mov	r1, r7
 80080fe:	f01c fa0f 	bl	8024520 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008102:	2220      	movs	r2, #32
 8008104:	4601      	mov	r1, r0
 8008106:	4640      	mov	r0, r8
 8008108:	e7d6      	b.n	80080b8 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800810a:	2502      	movs	r5, #2
 800810c:	e7c6      	b.n	800809c <ES_WIFI_Init+0x44>
 800810e:	bf00      	nop
 8008110:	0802f5b7 	.word	0x0802f5b7
 8008114:	080303da 	.word	0x080303da
 8008118:	0802ff1c 	.word	0x0802ff1c

0800811c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8008122:	b178      	cbz	r0, 8008144 <ES_WIFI_RegisterBusIO+0x28>
 8008124:	b171      	cbz	r1, 8008144 <ES_WIFI_RegisterBusIO+0x28>
 8008126:	b16a      	cbz	r2, 8008144 <ES_WIFI_RegisterBusIO+0x28>
 8008128:	b165      	cbz	r5, 8008144 <ES_WIFI_RegisterBusIO+0x28>
 800812a:	b15c      	cbz	r4, 8008144 <ES_WIFI_RegisterBusIO+0x28>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 800812c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8008130:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8008134:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8008138:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800813c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8008140:	2000      	movs	r0, #0
}
 8008142:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8008144:	2002      	movs	r0, #2
 8008146:	e7fc      	b.n	8008142 <ES_WIFI_RegisterBusIO+0x26>

08008148 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800814a:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 800814e:	4605      	mov	r5, r0
 8008150:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8008152:	4620      	mov	r0, r4
 8008154:	460a      	mov	r2, r1
 8008156:	4918      	ldr	r1, [pc, #96]	; (80081b8 <ES_WIFI_Connect+0x70>)
{
 8008158:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800815a:	f01b fad7 	bl	802370c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800815e:	4622      	mov	r2, r4
 8008160:	4621      	mov	r1, r4
 8008162:	4628      	mov	r0, r5
 8008164:	f7ff fea8 	bl	8007eb8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008168:	bb20      	cbnz	r0, 80081b4 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800816a:	463a      	mov	r2, r7
 800816c:	4913      	ldr	r1, [pc, #76]	; (80081bc <ES_WIFI_Connect+0x74>)
 800816e:	4620      	mov	r0, r4
 8008170:	f01b facc 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008174:	4622      	mov	r2, r4
 8008176:	4621      	mov	r1, r4
 8008178:	4628      	mov	r0, r5
 800817a:	f7ff fe9d 	bl	8007eb8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 800817e:	b9c8      	cbnz	r0, 80081b4 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8008180:	4632      	mov	r2, r6
 8008182:	490f      	ldr	r1, [pc, #60]	; (80081c0 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8008184:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8008188:	4620      	mov	r0, r4
 800818a:	f01b fabf 	bl	802370c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800818e:	4622      	mov	r2, r4
 8008190:	4621      	mov	r1, r4
 8008192:	4628      	mov	r0, r5
 8008194:	f7ff fe90 	bl	8007eb8 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8008198:	b960      	cbnz	r0, 80081b4 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800819a:	490a      	ldr	r1, [pc, #40]	; (80081c4 <ES_WIFI_Connect+0x7c>)
 800819c:	4620      	mov	r0, r4
 800819e:	f01b fb51 	bl	8023844 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081a2:	4622      	mov	r2, r4
 80081a4:	4621      	mov	r1, r4
 80081a6:	4628      	mov	r0, r5
 80081a8:	f7ff fe86 	bl	8007eb8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80081ac:	b910      	cbnz	r0, 80081b4 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80081b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b6:	bf00      	nop
 80081b8:	0802f5e0 	.word	0x0802f5e0
 80081bc:	0802f5e7 	.word	0x0802f5e7
 80081c0:	0802f5ee 	.word	0x0802f5ee
 80081c4:	0802f5f5 	.word	0x0802f5f5

080081c8 <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"CS\r");
 80081c8:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80081cc:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 80081ce:	490b      	ldr	r1, [pc, #44]	; (80081fc <ES_WIFI_IsConnected+0x34>)
{
 80081d0:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 80081d2:	4610      	mov	r0, r2
 80081d4:	f01b fb36 	bl	8023844 <strcpy>
 80081d8:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081da:	4601      	mov	r1, r0
 80081dc:	4620      	mov	r0, r4
 80081de:	f7ff fe6b 	bl	8007eb8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80081e2:	b938      	cbnz	r0, 80081f4 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80081e4:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80081e8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80081ec:	4253      	negs	r3, r2
 80081ee:	4153      	adcs	r3, r2
 80081f0:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 80081f4:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	bf00      	nop
 80081fc:	0802f5f9 	.word	0x0802f5f9

08008200 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 8008200:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8008204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8008208:	4935      	ldr	r1, [pc, #212]	; (80082e0 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 800820a:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 800820c:	4610      	mov	r0, r2
 800820e:	f01b fb19 	bl	8023844 <strcpy>
 8008212:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008214:	4601      	mov	r1, r0
 8008216:	4620      	mov	r0, r4
 8008218:	f7ff fe4e 	bl	8007eb8 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 800821c:	4606      	mov	r6, r0
 800821e:	b960      	cbnz	r0, 800823a <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8008220:	4930      	ldr	r1, [pc, #192]	; (80082e4 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 8008222:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80082e4 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 8008226:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800822a:	f01c f979 	bl	8024520 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800822e:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8008232:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8008234:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8008238:	b910      	cbnz	r0, 8008240 <ES_WIFI_GetNetworkSettings+0x40>
  }
  
  UNLOCK_WIFI();
  return ret;
}
 800823a:	4630      	mov	r0, r6
 800823c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8008240:	2d0b      	cmp	r5, #11
 8008242:	d80c      	bhi.n	800825e <ES_WIFI_GetNetworkSettings+0x5e>
 8008244:	e8df f005 	tbb	[pc, r5]
 8008248:	241e1906 	.word	0x241e1906
 800824c:	3835302a 	.word	0x3835302a
 8008250:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8008254:	4601      	mov	r1, r0
 8008256:	2221      	movs	r2, #33	; 0x21
 8008258:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800825a:	f01b fb0d 	bl	8023878 <strncpy>
    ptr = strtok(NULL, ",");
 800825e:	4649      	mov	r1, r9
 8008260:	2000      	movs	r0, #0
 8008262:	f01c f95d 	bl	8024520 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008266:	2800      	cmp	r0, #0
 8008268:	d0e7      	beq.n	800823a <ES_WIFI_GetNetworkSettings+0x3a>
 800826a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800826e:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8008270:	bf14      	ite	ne
 8008272:	3501      	addne	r5, #1
      num++;
 8008274:	3502      	addeq	r5, #2
 8008276:	b2ed      	uxtb	r5, r5
 8008278:	e7de      	b.n	8008238 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800827a:	4601      	mov	r1, r0
 800827c:	2221      	movs	r2, #33	; 0x21
 800827e:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8008282:	e7ea      	b.n	800825a <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8008284:	2100      	movs	r1, #0
 8008286:	f7ff fdaf 	bl	8007de8 <ParseNumber>
 800828a:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
 800828e:	e7e6      	b.n	800825e <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8008290:	2100      	movs	r1, #0
 8008292:	f7ff fda9 	bl	8007de8 <ParseNumber>
 8008296:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 800829a:	e7e0      	b.n	800825e <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800829c:	2100      	movs	r1, #0
 800829e:	f7ff fda3 	bl	8007de8 <ParseNumber>
 80082a2:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
 80082a6:	e7da      	b.n	800825e <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 80082a8:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 80082ac:	f7ff fdeb 	bl	8007e86 <ParseIP>
 80082b0:	e7d5      	b.n	800825e <ES_WIFI_GetNetworkSettings+0x5e>
 80082b2:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 80082b6:	e7f9      	b.n	80082ac <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80082b8:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 80082bc:	e7f6      	b.n	80082ac <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 80082be:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 80082c2:	e7f3      	b.n	80082ac <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 80082c4:	4641      	mov	r1, r8
 80082c6:	e7f1      	b.n	80082ac <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80082c8:	2100      	movs	r1, #0
 80082ca:	f7ff fd8d 	bl	8007de8 <ParseNumber>
 80082ce:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
 80082d2:	e7c4      	b.n	800825e <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80082d4:	2100      	movs	r1, #0
 80082d6:	f7ff fd87 	bl	8007de8 <ParseNumber>
 80082da:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
 80082de:	e7be      	b.n	800825e <ES_WIFI_GetNetworkSettings+0x5e>
 80082e0:	0802f601 	.word	0x0802f601
 80082e4:	080303da 	.word	0x080303da

080082e8 <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"Z5\r");
 80082e8:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4604      	mov	r4, r0
 80082f0:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 80082f2:	4610      	mov	r0, r2
 80082f4:	4909      	ldr	r1, [pc, #36]	; (800831c <ES_WIFI_GetMACAddress+0x34>)
 80082f6:	f01b faa5 	bl	8023844 <strcpy>
 80082fa:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082fc:	4601      	mov	r1, r0
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fdda 	bl	8007eb8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008304:	4605      	mov	r5, r0
 8008306:	b938      	cbnz	r0, 8008318 <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8008308:	4905      	ldr	r1, [pc, #20]	; (8008320 <ES_WIFI_GetMACAddress+0x38>)
 800830a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800830e:	f01c f907 	bl	8024520 <strtok>
    ParseMAC(ptr, mac) ;
 8008312:	4631      	mov	r1, r6
 8008314:	f7ff fd84 	bl	8007e20 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 8008318:	4628      	mov	r0, r5
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	0802f646 	.word	0x0802f646
 8008320:	0802f869 	.word	0x0802f869

08008324 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8008324:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8008326:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 800832a:	4604      	mov	r4, r0
 800832c:	4616      	mov	r6, r2
  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 800832e:	4628      	mov	r0, r5
 8008330:	460a      	mov	r2, r1
 8008332:	490a      	ldr	r1, [pc, #40]	; (800835c <ES_WIFI_DNS_LookUp+0x38>)
 8008334:	f01b f9ea 	bl	802370c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008338:	462a      	mov	r2, r5
 800833a:	4629      	mov	r1, r5
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff fdbb 	bl	8007eb8 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008342:	4605      	mov	r5, r0
 8008344:	b938      	cbnz	r0, 8008356 <ES_WIFI_DNS_LookUp+0x32>
  {
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 8008346:	4906      	ldr	r1, [pc, #24]	; (8008360 <ES_WIFI_DNS_LookUp+0x3c>)
 8008348:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800834c:	f01c f8e8 	bl	8024520 <strtok>
    ParseIP(ptr, ipaddress);
 8008350:	4631      	mov	r1, r6
 8008352:	f7ff fd98 	bl	8007e86 <ParseIP>
  }
  UNLOCK_WIFI();
  return ret;
}
 8008356:	4628      	mov	r0, r5
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	bf00      	nop
 800835c:	0802f69a 	.word	0x0802f69a
 8008360:	0802ff1c 	.word	0x0802ff1c

08008364 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008364:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008366:	f500 7494 	add.w	r4, r0, #296	; 0x128
 800836a:	784a      	ldrb	r2, [r1, #1]
{
 800836c:	4606      	mov	r6, r0
 800836e:	460d      	mov	r5, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008370:	4620      	mov	r0, r4
 8008372:	4927      	ldr	r1, [pc, #156]	; (8008410 <ES_WIFI_StartClientConnection+0xac>)
 8008374:	f01b f9ca 	bl	802370c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008378:	4622      	mov	r2, r4
 800837a:	4621      	mov	r1, r4
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff fd9b 	bl	8007eb8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008382:	2800      	cmp	r0, #0
 8008384:	d142      	bne.n	800840c <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8008386:	782a      	ldrb	r2, [r5, #0]
 8008388:	4922      	ldr	r1, [pc, #136]	; (8008414 <ES_WIFI_StartClientConnection+0xb0>)
 800838a:	4620      	mov	r0, r4
 800838c:	f01b f9be 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008390:	4622      	mov	r2, r4
 8008392:	4621      	mov	r1, r4
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff fd8f 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 800839a:	2800      	cmp	r0, #0
 800839c:	d136      	bne.n	800840c <ES_WIFI_StartClientConnection+0xa8>
 800839e:	88aa      	ldrh	r2, [r5, #4]
 80083a0:	bb4a      	cbnz	r2, 80083f6 <ES_WIFI_StartClientConnection+0x92>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80083a2:	886a      	ldrh	r2, [r5, #2]
 80083a4:	b14a      	cbz	r2, 80083ba <ES_WIFI_StartClientConnection+0x56>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80083a6:	491c      	ldr	r1, [pc, #112]	; (8008418 <ES_WIFI_StartClientConnection+0xb4>)
 80083a8:	4620      	mov	r0, r4
 80083aa:	f01b f9af 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083ae:	4622      	mov	r2, r4
 80083b0:	4621      	mov	r1, r4
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7ff fd80 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 80083b8:	bb40      	cbnz	r0, 800840c <ES_WIFI_StartClientConnection+0xa8>
 80083ba:	782b      	ldrb	r3, [r5, #0]
 80083bc:	b97b      	cbnz	r3, 80083de <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80083be:	7a69      	ldrb	r1, [r5, #9]
 80083c0:	9101      	str	r1, [sp, #4]
 80083c2:	7a29      	ldrb	r1, [r5, #8]
 80083c4:	79aa      	ldrb	r2, [r5, #6]
 80083c6:	9100      	str	r1, [sp, #0]
 80083c8:	79eb      	ldrb	r3, [r5, #7]
 80083ca:	4914      	ldr	r1, [pc, #80]	; (800841c <ES_WIFI_StartClientConnection+0xb8>)
 80083cc:	4620      	mov	r0, r4
 80083ce:	f01b f99d 	bl	802370c <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083d2:	4622      	mov	r2, r4
 80083d4:	4621      	mov	r1, r4
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7ff fd6e 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80083dc:	b9b0      	cbnz	r0, 800840c <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80083de:	4910      	ldr	r1, [pc, #64]	; (8008420 <ES_WIFI_StartClientConnection+0xbc>)
 80083e0:	4620      	mov	r0, r4
 80083e2:	f01b fa2f 	bl	8023844 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083e6:	4622      	mov	r2, r4
 80083e8:	4621      	mov	r1, r4
 80083ea:	4630      	mov	r0, r6
  }
  
  UNLOCK_WIFI();
  return ret;
}
 80083ec:	b002      	add	sp, #8
 80083ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083f2:	f7ff bd61 	b.w	8007eb8 <AT_ExecuteCommand>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80083f6:	490b      	ldr	r1, [pc, #44]	; (8008424 <ES_WIFI_StartClientConnection+0xc0>)
 80083f8:	4620      	mov	r0, r4
 80083fa:	f01b f987 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083fe:	4622      	mov	r2, r4
 8008400:	4621      	mov	r1, r4
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff fd58 	bl	8007eb8 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 8008408:	2800      	cmp	r0, #0
 800840a:	d0ca      	beq.n	80083a2 <ES_WIFI_StartClientConnection+0x3e>
}
 800840c:	b002      	add	sp, #8
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	0802f6a1 	.word	0x0802f6a1
 8008414:	0802f6a8 	.word	0x0802f6a8
 8008418:	0802f6b6 	.word	0x0802f6b6
 800841c:	0802f6c3 	.word	0x0802f6c3
 8008420:	0802f6bd 	.word	0x0802f6bd
 8008424:	0802f6af 	.word	0x0802f6af

08008428 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008428:	b538      	push	{r3, r4, r5, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800842a:	f500 7494 	add.w	r4, r0, #296	; 0x128
 800842e:	784a      	ldrb	r2, [r1, #1]
 8008430:	490b      	ldr	r1, [pc, #44]	; (8008460 <ES_WIFI_StopClientConnection+0x38>)
{
 8008432:	4605      	mov	r5, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008434:	4620      	mov	r0, r4
 8008436:	f01b f969 	bl	802370c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800843a:	4622      	mov	r2, r4
 800843c:	4621      	mov	r1, r4
 800843e:	4628      	mov	r0, r5
 8008440:	f7ff fd3a 	bl	8007eb8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008444:	b950      	cbnz	r0, 800845c <ES_WIFI_StopClientConnection+0x34>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8008446:	4907      	ldr	r1, [pc, #28]	; (8008464 <ES_WIFI_StopClientConnection+0x3c>)
 8008448:	4620      	mov	r0, r4
 800844a:	f01b f9fb 	bl	8023844 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800844e:	4622      	mov	r2, r4
 8008450:	4621      	mov	r1, r4
 8008452:	4628      	mov	r0, r5
  }
  UNLOCK_WIFI();
  return ret;
}
 8008454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008458:	f7ff bd2e 	b.w	8007eb8 <AT_ExecuteCommand>
}
 800845c:	bd38      	pop	{r3, r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	0802f6a1 	.word	0x0802f6a1
 8008464:	0802f6d3 	.word	0x0802f6d3

08008468 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8008468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800846c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008470:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8008474:	bf28      	it	cs
 8008476:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800847a:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 800847e:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8008480:	f8a8 3000 	strh.w	r3, [r8]
{
 8008484:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008486:	4620      	mov	r0, r4
 8008488:	460a      	mov	r2, r1
 800848a:	492c      	ldr	r1, [pc, #176]	; (800853c <ES_WIFI_SendData+0xd4>)
 800848c:	461f      	mov	r7, r3
 800848e:	f01b f93d 	bl	802370c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008492:	4622      	mov	r2, r4
 8008494:	4621      	mov	r1, r4
 8008496:	4630      	mov	r0, r6
 8008498:	f7ff fd0e 	bl	8007eb8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800849c:	4605      	mov	r5, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d144      	bne.n	800852c <ES_WIFI_SendData+0xc4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 80084a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084a4:	4926      	ldr	r1, [pc, #152]	; (8008540 <ES_WIFI_SendData+0xd8>)
 80084a6:	4620      	mov	r0, r4
 80084a8:	f01b f930 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084ac:	4622      	mov	r2, r4
 80084ae:	4621      	mov	r1, r4
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff fd01 	bl	8007eb8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80084b6:	4605      	mov	r5, r0
 80084b8:	bb80      	cbnz	r0, 800851c <ES_WIFI_SendData+0xb4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80084ba:	463a      	mov	r2, r7
 80084bc:	4921      	ldr	r1, [pc, #132]	; (8008544 <ES_WIFI_SendData+0xdc>)
 80084be:	4620      	mov	r0, r4
 80084c0:	f01b f924 	bl	802370c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80084c4:	9400      	str	r4, [sp, #0]
 80084c6:	463b      	mov	r3, r7
 80084c8:	464a      	mov	r2, r9
 80084ca:	4621      	mov	r1, r4
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff fd2b 	bl	8007f28 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 80084d2:	4605      	mov	r5, r0
 80084d4:	b998      	cbnz	r0, 80084fe <ES_WIFI_SendData+0x96>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80084d6:	491c      	ldr	r1, [pc, #112]	; (8008548 <ES_WIFI_SendData+0xe0>)
 80084d8:	4620      	mov	r0, r4
 80084da:	f01b f9e2 	bl	80238a2 <strstr>
 80084de:	b1c8      	cbz	r0, 8008514 <ES_WIFI_SendData+0xac>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80084e0:	491a      	ldr	r1, [pc, #104]	; (800854c <ES_WIFI_SendData+0xe4>)
 80084e2:	481b      	ldr	r0, [pc, #108]	; (8008550 <ES_WIFI_SendData+0xe8>)
 80084e4:	f240 7279 	movw	r2, #1913	; 0x779
 80084e8:	f01b f810 	bl	802350c <iprintf>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4819      	ldr	r0, [pc, #100]	; (8008554 <ES_WIFI_SendData+0xec>)
 80084f0:	f01b f80c 	bl	802350c <iprintf>
   DEBUG("P0 command failed\n"); 
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8a8 3000 	strh.w	r3, [r8]
 80084fa:	2502      	movs	r5, #2
 80084fc:	e00a      	b.n	8008514 <ES_WIFI_SendData+0xac>
        DEBUG("Send Data command failed\n");  
 80084fe:	f240 727f 	movw	r2, #1919	; 0x77f
 8008502:	4912      	ldr	r1, [pc, #72]	; (800854c <ES_WIFI_SendData+0xe4>)
 8008504:	4812      	ldr	r0, [pc, #72]	; (8008550 <ES_WIFI_SendData+0xe8>)
 8008506:	f01b f801 	bl	802350c <iprintf>
 800850a:	4813      	ldr	r0, [pc, #76]	; (8008558 <ES_WIFI_SendData+0xf0>)
   DEBUG("P0 command failed\n"); 
 800850c:	f01b f886 	bl	802361c <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8008510:	2d02      	cmp	r5, #2
 8008512:	d0ef      	beq.n	80084f4 <ES_WIFI_SendData+0x8c>
  }
  UNLOCK_WIFI();
  return ret;
}
 8008514:	4628      	mov	r0, r5
 8008516:	b003      	add	sp, #12
 8008518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n"); 
 800851c:	f240 7284 	movw	r2, #1924	; 0x784
 8008520:	490a      	ldr	r1, [pc, #40]	; (800854c <ES_WIFI_SendData+0xe4>)
 8008522:	480b      	ldr	r0, [pc, #44]	; (8008550 <ES_WIFI_SendData+0xe8>)
 8008524:	f01a fff2 	bl	802350c <iprintf>
 8008528:	480c      	ldr	r0, [pc, #48]	; (800855c <ES_WIFI_SendData+0xf4>)
 800852a:	e7ef      	b.n	800850c <ES_WIFI_SendData+0xa4>
   DEBUG("P0 command failed\n"); 
 800852c:	f240 7289 	movw	r2, #1929	; 0x789
 8008530:	4906      	ldr	r1, [pc, #24]	; (800854c <ES_WIFI_SendData+0xe4>)
 8008532:	4807      	ldr	r0, [pc, #28]	; (8008550 <ES_WIFI_SendData+0xe8>)
 8008534:	f01a ffea 	bl	802350c <iprintf>
 8008538:	4809      	ldr	r0, [pc, #36]	; (8008560 <ES_WIFI_SendData+0xf8>)
 800853a:	e7e7      	b.n	800850c <ES_WIFI_SendData+0xa4>
 800853c:	0802f6a1 	.word	0x0802f6a1
 8008540:	0802f856 	.word	0x0802f856
 8008544:	0802f85e 	.word	0x0802f85e
 8008548:	0802f867 	.word	0x0802f867
 800854c:	0802f70f 	.word	0x0802f70f
 8008550:	0802f767 	.word	0x0802f767
 8008554:	0802f86c 	.word	0x0802f86c
 8008558:	0802f887 	.word	0x0802f887
 800855c:	0802f8a0 	.word	0x0802f8a0
 8008560:	0802f8b2 	.word	0x0802f8b2

08008564 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8008564:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008568:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 800856c:	4606      	mov	r6, r0
 800856e:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008570:	4620      	mov	r0, r4
 8008572:	460a      	mov	r2, r1
 8008574:	493f      	ldr	r1, [pc, #252]	; (8008674 <ES_WIFI_SendDataTo+0x110>)
{
 8008576:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800857a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800857e:	461f      	mov	r7, r3
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008580:	f01b f8c4 	bl	802370c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008584:	4622      	mov	r2, r4
 8008586:	4621      	mov	r1, r4
 8008588:	4630      	mov	r0, r6
 800858a:	f7ff fc95 	bl	8007eb8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 800858e:	4605      	mov	r5, r0
 8008590:	2800      	cmp	r0, #0
 8008592:	d15a      	bne.n	800864a <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8008594:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8008598:	4937      	ldr	r1, [pc, #220]	; (8008678 <ES_WIFI_SendDataTo+0x114>)
 800859a:	4620      	mov	r0, r4
 800859c:	f01b f8b6 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085a0:	4622      	mov	r2, r4
 80085a2:	4621      	mov	r1, r4
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff fc87 	bl	8007eb8 <AT_ExecuteCommand>
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 80085aa:	4605      	mov	r5, r0
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d14c      	bne.n	800864a <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 80085b0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80085b4:	4931      	ldr	r1, [pc, #196]	; (800867c <ES_WIFI_SendDataTo+0x118>)
 80085b6:	4620      	mov	r0, r4
 80085b8:	f01b f8a8 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085bc:	4622      	mov	r2, r4
 80085be:	4621      	mov	r1, r4
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff fc79 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80085c6:	4605      	mov	r5, r0
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d13e      	bne.n	800864a <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 80085cc:	f898 1003 	ldrb.w	r1, [r8, #3]
 80085d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80085d4:	f898 2000 	ldrb.w	r2, [r8]
 80085d8:	9101      	str	r1, [sp, #4]
 80085da:	f898 1002 	ldrb.w	r1, [r8, #2]
 80085de:	9100      	str	r1, [sp, #0]
 80085e0:	4620      	mov	r0, r4
 80085e2:	4927      	ldr	r1, [pc, #156]	; (8008680 <ES_WIFI_SendDataTo+0x11c>)
 80085e4:	f01b f892 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085e8:	4622      	mov	r2, r4
 80085ea:	4621      	mov	r1, r4
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff fc63 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80085f2:	4605      	mov	r5, r0
 80085f4:	bb48      	cbnz	r0, 800864a <ES_WIFI_SendDataTo+0xe6>
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", Timeout);
 80085f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085f8:	4922      	ldr	r1, [pc, #136]	; (8008684 <ES_WIFI_SendDataTo+0x120>)
 80085fa:	4620      	mov	r0, r4
 80085fc:	f01b f886 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008600:	4622      	mov	r2, r4
 8008602:	4621      	mov	r1, r4
 8008604:	4630      	mov	r0, r6
 8008606:	f7ff fc57 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 800860a:	4605      	mov	r5, r0
 800860c:	b9e8      	cbnz	r0, 800864a <ES_WIFI_SendDataTo+0xe6>
 800860e:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 8008612:	bf28      	it	cs
 8008614:	f44f 6796 	movcs.w	r7, #1200	; 0x4b0
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8008618:	463a      	mov	r2, r7
 800861a:	491b      	ldr	r1, [pc, #108]	; (8008688 <ES_WIFI_SendDataTo+0x124>)
 800861c:	4620      	mov	r0, r4
 800861e:	f01b f875 	bl	802370c <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008622:	9400      	str	r4, [sp, #0]
 8008624:	463b      	mov	r3, r7
 8008626:	4652      	mov	r2, sl
 8008628:	4621      	mov	r1, r4
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff fc7c 	bl	8007f28 <AT_RequestSendData>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008630:	4605      	mov	r5, r0
 8008632:	b950      	cbnz	r0, 800864a <ES_WIFI_SendDataTo+0xe6>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8008634:	4915      	ldr	r1, [pc, #84]	; (800868c <ES_WIFI_SendDataTo+0x128>)
 8008636:	4620      	mov	r0, r4
 8008638:	f01b f933 	bl	80238a2 <strstr>
    if(ptr != NULL)
 800863c:	b198      	cbz	r0, 8008666 <ES_WIFI_SendDataTo+0x102>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 800863e:	f506 65d4 	add.w	r5, r6, #1696	; 0x6a0
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8008642:	42a8      	cmp	r0, r5
 8008644:	bf34      	ite	cc
 8008646:	2502      	movcc	r5, #2
 8008648:	2504      	movcs	r5, #4
  {
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
 800864a:	f240 72d9 	movw	r2, #2009	; 0x7d9
 800864e:	4910      	ldr	r1, [pc, #64]	; (8008690 <ES_WIFI_SendDataTo+0x12c>)
 8008650:	4810      	ldr	r0, [pc, #64]	; (8008694 <ES_WIFI_SendDataTo+0x130>)
 8008652:	f01a ff5b 	bl	802350c <iprintf>
 8008656:	4621      	mov	r1, r4
 8008658:	480f      	ldr	r0, [pc, #60]	; (8008698 <ES_WIFI_SendDataTo+0x134>)
 800865a:	f01a ff57 	bl	802350c <iprintf>
    *SentLen = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	f8a9 3000 	strh.w	r3, [r9]
 8008664:	e001      	b.n	800866a <ES_WIFI_SendDataTo+0x106>
    *SentLen = Reqlen;
 8008666:	f8a9 7000 	strh.w	r7, [r9]
  }

  UNLOCK_WIFI();
  return ret;
}
 800866a:	4628      	mov	r0, r5
 800866c:	b002      	add	sp, #8
 800866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008672:	bf00      	nop
 8008674:	0802f6a1 	.word	0x0802f6a1
 8008678:	0802f6af 	.word	0x0802f6af
 800867c:	0802f6b6 	.word	0x0802f6b6
 8008680:	0802f6c3 	.word	0x0802f6c3
 8008684:	0802f856 	.word	0x0802f856
 8008688:	0802f85e 	.word	0x0802f85e
 800868c:	0802f867 	.word	0x0802f867
 8008690:	0802f70f 	.word	0x0802f70f
 8008694:	0802f767 	.word	0x0802f767
 8008698:	0802f8c4 	.word	0x0802f8c4

0800869c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800869c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80086a0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 80086a4:	4606      	mov	r6, r0
 80086a6:	4692      	mov	sl, r2
 80086a8:	461f      	mov	r7, r3
 80086aa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80086ae:	d864      	bhi.n	800877a <ES_WIFI_ReceiveData+0xde>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80086b0:	f500 7494 	add.w	r4, r0, #296	; 0x128
 80086b4:	460a      	mov	r2, r1
 80086b6:	4620      	mov	r0, r4
 80086b8:	4931      	ldr	r1, [pc, #196]	; (8008780 <ES_WIFI_ReceiveData+0xe4>)
 80086ba:	f01b f827 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086be:	4622      	mov	r2, r4
 80086c0:	4621      	mov	r1, r4
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff fbf8 	bl	8007eb8 <AT_ExecuteCommand>
 80086c8:	4605      	mov	r5, r0
 80086ca:	4681      	mov	r9, r0

    if(ret == ES_WIFI_STATUS_OK)
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d146      	bne.n	800875e <ES_WIFI_ReceiveData+0xc2>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80086d0:	463a      	mov	r2, r7
 80086d2:	492c      	ldr	r1, [pc, #176]	; (8008784 <ES_WIFI_ReceiveData+0xe8>)
 80086d4:	4620      	mov	r0, r4
 80086d6:	f01b f819 	bl	802370c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086da:	4622      	mov	r2, r4
 80086dc:	4621      	mov	r1, r4
 80086de:	4630      	mov	r0, r6
 80086e0:	f7ff fbea 	bl	8007eb8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80086e4:	4605      	mov	r5, r0
 80086e6:	bb70      	cbnz	r0, 8008746 <ES_WIFI_ReceiveData+0xaa>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 80086e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ea:	4927      	ldr	r1, [pc, #156]	; (8008788 <ES_WIFI_ReceiveData+0xec>)
 80086ec:	4620      	mov	r0, r4
 80086ee:	f01b f80d 	bl	802370c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086f2:	4622      	mov	r2, r4
 80086f4:	4621      	mov	r1, r4
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff fbde 	bl	8007eb8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80086fc:	4605      	mov	r5, r0
 80086fe:	b9d0      	cbnz	r0, 8008736 <ES_WIFI_ReceiveData+0x9a>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8008700:	4922      	ldr	r1, [pc, #136]	; (800878c <ES_WIFI_ReceiveData+0xf0>)
 8008702:	4620      	mov	r0, r4
 8008704:	f01b f89e 	bl	8023844 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008708:	f8cd 8000 	str.w	r8, [sp]
 800870c:	463b      	mov	r3, r7
 800870e:	4652      	mov	r2, sl
 8008710:	4621      	mov	r1, r4
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff fc50 	bl	8007fb8 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 8008718:	4605      	mov	r5, r0
 800871a:	b140      	cbz	r0, 800872e <ES_WIFI_ReceiveData+0x92>
          {
            DEBUG("AT_RequestReceiveData  failed\n"); 
 800871c:	f640 0202 	movw	r2, #2050	; 0x802
 8008720:	491b      	ldr	r1, [pc, #108]	; (8008790 <ES_WIFI_ReceiveData+0xf4>)
 8008722:	481c      	ldr	r0, [pc, #112]	; (8008794 <ES_WIFI_ReceiveData+0xf8>)
 8008724:	f01a fef2 	bl	802350c <iprintf>
 8008728:	481b      	ldr	r0, [pc, #108]	; (8008798 <ES_WIFI_ReceiveData+0xfc>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n"); 
 800872a:	f01a ff77 	bl	802361c <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 800872e:	4628      	mov	r0, r5
 8008730:	b002      	add	sp, #8
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n"); 
 8008736:	f640 0207 	movw	r2, #2055	; 0x807
 800873a:	4915      	ldr	r1, [pc, #84]	; (8008790 <ES_WIFI_ReceiveData+0xf4>)
 800873c:	4815      	ldr	r0, [pc, #84]	; (8008794 <ES_WIFI_ReceiveData+0xf8>)
 800873e:	f01a fee5 	bl	802350c <iprintf>
 8008742:	4816      	ldr	r0, [pc, #88]	; (800879c <ES_WIFI_ReceiveData+0x100>)
 8008744:	e7f1      	b.n	800872a <ES_WIFI_ReceiveData+0x8e>
        DEBUG("setting requested len failed\n"); 
 8008746:	f640 020c 	movw	r2, #2060	; 0x80c
 800874a:	4911      	ldr	r1, [pc, #68]	; (8008790 <ES_WIFI_ReceiveData+0xf4>)
 800874c:	4811      	ldr	r0, [pc, #68]	; (8008794 <ES_WIFI_ReceiveData+0xf8>)
 800874e:	f01a fedd 	bl	802350c <iprintf>
 8008752:	4813      	ldr	r0, [pc, #76]	; (80087a0 <ES_WIFI_ReceiveData+0x104>)
 8008754:	f01a ff62 	bl	802361c <puts>
        *Receivedlen = 0;
 8008758:	f8a8 9000 	strh.w	r9, [r8]
 800875c:	e7e7      	b.n	800872e <ES_WIFI_ReceiveData+0x92>
      DEBUG("setting socket for read failed\n"); 
 800875e:	f640 0212 	movw	r2, #2066	; 0x812
 8008762:	490b      	ldr	r1, [pc, #44]	; (8008790 <ES_WIFI_ReceiveData+0xf4>)
 8008764:	480b      	ldr	r0, [pc, #44]	; (8008794 <ES_WIFI_ReceiveData+0xf8>)
 8008766:	f01a fed1 	bl	802350c <iprintf>
 800876a:	480e      	ldr	r0, [pc, #56]	; (80087a4 <ES_WIFI_ReceiveData+0x108>)
 800876c:	f01a ff56 	bl	802361c <puts>
      issue15++;
 8008770:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <ES_WIFI_ReceiveData+0x10c>)
 8008772:	6813      	ldr	r3, [r2, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	e7d9      	b.n	800872e <ES_WIFI_ReceiveData+0x92>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800877a:	2502      	movs	r5, #2
 800877c:	e7d7      	b.n	800872e <ES_WIFI_ReceiveData+0x92>
 800877e:	bf00      	nop
 8008780:	0802f6a1 	.word	0x0802f6a1
 8008784:	0802f8d4 	.word	0x0802f8d4
 8008788:	0802f8db 	.word	0x0802f8db
 800878c:	0802f8e3 	.word	0x0802f8e3
 8008790:	0802f70f 	.word	0x0802f70f
 8008794:	0802f767 	.word	0x0802f767
 8008798:	0802f8e7 	.word	0x0802f8e7
 800879c:	0802f905 	.word	0x0802f905
 80087a0:	0802f91c 	.word	0x0802f91c
 80087a4:	0802f939 	.word	0x0802f939
 80087a8:	200010b8 	.word	0x200010b8

080087ac <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 80087ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087b0:	b089      	sub	sp, #36	; 0x24
 80087b2:	4698      	mov	r8, r3
 80087b4:	9f10      	ldr	r7, [sp, #64]	; 0x40
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 80087b6:	2300      	movs	r3, #0
  LOCK_WIFI();  

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80087b8:	f5b8 6f96 	cmp.w	r8, #1200	; 0x4b0
{
 80087bc:	4606      	mov	r6, r0
 80087be:	4691      	mov	r9, r2
  *Receivedlen = 0;
 80087c0:	803b      	strh	r3, [r7, #0]
 80087c2:	f500 7494 	add.w	r4, r0, #296	; 0x128
  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80087c6:	d821      	bhi.n	800880c <ES_WIFI_ReceiveDataFrom+0x60>
  {
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80087c8:	460a      	mov	r2, r1
 80087ca:	4620      	mov	r0, r4
 80087cc:	496d      	ldr	r1, [pc, #436]	; (8008984 <ES_WIFI_ReceiveDataFrom+0x1d8>)
 80087ce:	f01a ff9d 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087d2:	4622      	mov	r2, r4
 80087d4:	4621      	mov	r1, r4
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff fb6e 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 80087dc:	4605      	mov	r5, r0
 80087de:	b9b0      	cbnz	r0, 800880e <ES_WIFI_ReceiveDataFrom+0x62>
  {
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80087e0:	4642      	mov	r2, r8
 80087e2:	4969      	ldr	r1, [pc, #420]	; (8008988 <ES_WIFI_ReceiveDataFrom+0x1dc>)
 80087e4:	4620      	mov	r0, r4
 80087e6:	f01a ff91 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087ea:	4622      	mov	r2, r4
 80087ec:	4621      	mov	r1, r4
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff fb62 	bl	8007eb8 <AT_ExecuteCommand>
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80087f4:	4605      	mov	r5, r0
 80087f6:	b1a0      	cbz	r0, 8008822 <ES_WIFI_ReceiveDataFrom+0x76>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  else
  {
    DEBUG("R1 failed.\n");
 80087f8:	f640 0238 	movw	r2, #2104	; 0x838
 80087fc:	4963      	ldr	r1, [pc, #396]	; (800898c <ES_WIFI_ReceiveDataFrom+0x1e0>)
 80087fe:	4864      	ldr	r0, [pc, #400]	; (8008990 <ES_WIFI_ReceiveDataFrom+0x1e4>)
 8008800:	f01a fe84 	bl	802350c <iprintf>
 8008804:	4863      	ldr	r0, [pc, #396]	; (8008994 <ES_WIFI_ReceiveDataFrom+0x1e8>)
 8008806:	f01a ff09 	bl	802361c <puts>
 800880a:	e016      	b.n	800883a <ES_WIFI_ReceiveDataFrom+0x8e>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800880c:	2502      	movs	r5, #2
    DEBUG("P0 failed.\n");
 800880e:	f640 022e 	movw	r2, #2094	; 0x82e
 8008812:	495e      	ldr	r1, [pc, #376]	; (800898c <ES_WIFI_ReceiveDataFrom+0x1e0>)
 8008814:	485e      	ldr	r0, [pc, #376]	; (8008990 <ES_WIFI_ReceiveDataFrom+0x1e4>)
 8008816:	f01a fe79 	bl	802350c <iprintf>
 800881a:	485f      	ldr	r0, [pc, #380]	; (8008998 <ES_WIFI_ReceiveDataFrom+0x1ec>)
 800881c:	f01a fefe 	bl	802361c <puts>
 8008820:	e7ea      	b.n	80087f8 <ES_WIFI_ReceiveDataFrom+0x4c>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8008822:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008824:	495d      	ldr	r1, [pc, #372]	; (800899c <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008826:	4620      	mov	r0, r4
 8008828:	f01a ff70 	bl	802370c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800882c:	4622      	mov	r2, r4
 800882e:	4621      	mov	r1, r4
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff fb41 	bl	8007eb8 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008836:	4605      	mov	r5, r0
 8008838:	b148      	cbz	r0, 800884e <ES_WIFI_ReceiveDataFrom+0xa2>
    sprintf((char*)Obj->CmdData,"R0\r");
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
  }
  else
  {
    DEBUG("R2 failed.\n");
 800883a:	f640 0242 	movw	r2, #2114	; 0x842
 800883e:	4953      	ldr	r1, [pc, #332]	; (800898c <ES_WIFI_ReceiveDataFrom+0x1e0>)
 8008840:	4853      	ldr	r0, [pc, #332]	; (8008990 <ES_WIFI_ReceiveDataFrom+0x1e4>)
 8008842:	f01a fe63 	bl	802350c <iprintf>
 8008846:	4856      	ldr	r0, [pc, #344]	; (80089a0 <ES_WIFI_ReceiveDataFrom+0x1f4>)
 8008848:	f01a fee8 	bl	802361c <puts>
 800884c:	e00c      	b.n	8008868 <ES_WIFI_ReceiveDataFrom+0xbc>
    sprintf((char*)Obj->CmdData,"R0\r");
 800884e:	4955      	ldr	r1, [pc, #340]	; (80089a4 <ES_WIFI_ReceiveDataFrom+0x1f8>)
 8008850:	4620      	mov	r0, r4
 8008852:	f01a fff7 	bl	8023844 <strcpy>
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008856:	9700      	str	r7, [sp, #0]
 8008858:	4643      	mov	r3, r8
 800885a:	464a      	mov	r2, r9
 800885c:	4621      	mov	r1, r4
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff fbaa 	bl	8007fb8 <AT_RequestReceiveData>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008864:	4605      	mov	r5, r0
 8008866:	b160      	cbz	r0, 8008882 <ES_WIFI_ReceiveDataFrom+0xd6>
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
 8008868:	f640 0262 	movw	r2, #2146	; 0x862
 800886c:	4947      	ldr	r1, [pc, #284]	; (800898c <ES_WIFI_ReceiveDataFrom+0x1e0>)
 800886e:	4848      	ldr	r0, [pc, #288]	; (8008990 <ES_WIFI_ReceiveDataFrom+0x1e4>)
 8008870:	f01a fe4c 	bl	802350c <iprintf>
 8008874:	4621      	mov	r1, r4
 8008876:	484c      	ldr	r0, [pc, #304]	; (80089a8 <ES_WIFI_ReceiveDataFrom+0x1fc>)
 8008878:	f01a fe48 	bl	802350c <iprintf>
    *Receivedlen = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	803b      	strh	r3, [r7, #0]
 8008880:	e043      	b.n	800890a <ES_WIFI_ReceiveDataFrom+0x15e>
    if (*Receivedlen > Reqlen)
 8008882:	883b      	ldrh	r3, [r7, #0]
 8008884:	4543      	cmp	r3, r8
 8008886:	d90a      	bls.n	800889e <ES_WIFI_ReceiveDataFrom+0xf2>
      DEBUG("AT_RequestReceiveData overflow\n.");
 8008888:	f640 0249 	movw	r2, #2121	; 0x849
 800888c:	493f      	ldr	r1, [pc, #252]	; (800898c <ES_WIFI_ReceiveDataFrom+0x1e0>)
 800888e:	4840      	ldr	r0, [pc, #256]	; (8008990 <ES_WIFI_ReceiveDataFrom+0x1e4>)
 8008890:	f01a fe3c 	bl	802350c <iprintf>
 8008894:	4845      	ldr	r0, [pc, #276]	; (80089ac <ES_WIFI_ReceiveDataFrom+0x200>)
 8008896:	f01a fe39 	bl	802350c <iprintf>
      ret = ES_WIFI_STATUS_ERROR;
 800889a:	2502      	movs	r5, #2
 800889c:	e7e4      	b.n	8008868 <ES_WIFI_ReceiveDataFrom+0xbc>
      if (*Receivedlen > 0)
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d033      	beq.n	800890a <ES_WIFI_ReceiveDataFrom+0x15e>
        sprintf((char*)Obj->CmdData,"P?\r");
 80088a2:	4943      	ldr	r1, [pc, #268]	; (80089b0 <ES_WIFI_ReceiveDataFrom+0x204>)
 80088a4:	4620      	mov	r0, r4
 80088a6:	f01a ffcd 	bl	8023844 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80088aa:	4622      	mov	r2, r4
 80088ac:	4621      	mov	r1, r4
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7ff fb02 	bl	8007eb8 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80088b4:	4605      	mov	r5, r0
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d1d6      	bne.n	8008868 <ES_WIFI_ReceiveDataFrom+0xbc>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 80088ba:	4601      	mov	r1, r0
 80088bc:	2214      	movs	r2, #20
 80088be:	a803      	add	r0, sp, #12
 80088c0:	f019 fd35 	bl	802232e <memset>
  ptr = strtok(pdata + 2, ",");
 80088c4:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 80088c8:	493a      	ldr	r1, [pc, #232]	; (80089b4 <ES_WIFI_ReceiveDataFrom+0x208>)
    ptr = strtok(NULL, ",");
 80088ca:	4e3a      	ldr	r6, [pc, #232]	; (80089b4 <ES_WIFI_ReceiveDataFrom+0x208>)
  ptr = strtok(pdata + 2, ",");
 80088cc:	f01b fe28 	bl	8024520 <strtok>
  uint8_t num = 0;
 80088d0:	462c      	mov	r4, r5
  while (ptr != NULL) {
 80088d2:	b198      	cbz	r0, 80088fc <ES_WIFI_ReceiveDataFrom+0x150>
    switch (num++) {
 80088d4:	2c09      	cmp	r4, #9
 80088d6:	d80b      	bhi.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
 80088d8:	e8df f004 	tbb	[pc, r4]
 80088dc:	26201b05 	.word	0x26201b05
 80088e0:	3a342e28 	.word	0x3a342e28
 80088e4:	4640      	.short	0x4640
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 80088e6:	2100      	movs	r1, #0
 80088e8:	f7ff fa7e 	bl	8007de8 <ParseNumber>
 80088ec:	f88d 000c 	strb.w	r0, [sp, #12]
    ptr = strtok(NULL, ",");
 80088f0:	4631      	mov	r1, r6
 80088f2:	2000      	movs	r0, #0
 80088f4:	f01b fe14 	bl	8024520 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d13b      	bne.n	8008974 <ES_WIFI_ReceiveDataFrom+0x1c8>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 80088fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088fe:	9a05      	ldr	r2, [sp, #20]
 8008900:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8008902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008904:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008908:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 800890a:	4628      	mov	r0, r5
 800890c:	b009      	add	sp, #36	; 0x24
 800890e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8008912:	f10d 010d 	add.w	r1, sp, #13
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008916:	f7ff fab6 	bl	8007e86 <ParseIP>
 800891a:	e7e9      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 800891c:	2100      	movs	r1, #0
 800891e:	f7ff fa63 	bl	8007de8 <ParseNumber>
 8008922:	f8ad 0012 	strh.w	r0, [sp, #18]
 8008926:	e7e3      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008928:	a905      	add	r1, sp, #20
 800892a:	e7f4      	b.n	8008916 <ES_WIFI_ReceiveDataFrom+0x16a>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 800892c:	2100      	movs	r1, #0
 800892e:	f7ff fa5b 	bl	8007de8 <ParseNumber>
 8008932:	f8ad 0018 	strh.w	r0, [sp, #24]
 8008936:	e7db      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8008938:	2100      	movs	r1, #0
 800893a:	f7ff fa55 	bl	8007de8 <ParseNumber>
 800893e:	f88d 001a 	strb.w	r0, [sp, #26]
 8008942:	e7d5      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8008944:	2100      	movs	r1, #0
 8008946:	f7ff fa4f 	bl	8007de8 <ParseNumber>
 800894a:	f88d 001b 	strb.w	r0, [sp, #27]
 800894e:	e7cf      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8008950:	2100      	movs	r1, #0
 8008952:	f7ff fa49 	bl	8007de8 <ParseNumber>
 8008956:	f88d 001c 	strb.w	r0, [sp, #28]
 800895a:	e7c9      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 800895c:	2100      	movs	r1, #0
 800895e:	f7ff fa43 	bl	8007de8 <ParseNumber>
 8008962:	f88d 001d 	strb.w	r0, [sp, #29]
 8008966:	e7c3      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8008968:	2100      	movs	r1, #0
 800896a:	f7ff fa3d 	bl	8007de8 <ParseNumber>
 800896e:	f88d 001e 	strb.w	r0, [sp, #30]
 8008972:	e7bd      	b.n	80088f0 <ES_WIFI_ReceiveDataFrom+0x144>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008974:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8008978:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 800897a:	bf14      	ite	ne
 800897c:	3401      	addne	r4, #1
      num++;
 800897e:	3402      	addeq	r4, #2
 8008980:	b2e4      	uxtb	r4, r4
 8008982:	e7a6      	b.n	80088d2 <ES_WIFI_ReceiveDataFrom+0x126>
 8008984:	0802f6a1 	.word	0x0802f6a1
 8008988:	0802f8d4 	.word	0x0802f8d4
 800898c:	0802f70f 	.word	0x0802f70f
 8008990:	0802f767 	.word	0x0802f767
 8008994:	0802f963 	.word	0x0802f963
 8008998:	0802f958 	.word	0x0802f958
 800899c:	0802f8db 	.word	0x0802f8db
 80089a0:	0802f96e 	.word	0x0802f96e
 80089a4:	0802f8e3 	.word	0x0802f8e3
 80089a8:	0802f99a 	.word	0x0802f99a
 80089ac:	0802f979 	.word	0x0802f979
 80089b0:	0802f79b 	.word	0x0802f79b
 80089b4:	080303da 	.word	0x080303da

080089b8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089b8:	490f      	ldr	r1, [pc, #60]	; (80089f8 <SystemInit+0x40>)
 80089ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80089be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80089c6:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <SystemInit+0x44>)
 80089c8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80089ca:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80089cc:	f042 0201 	orr.w	r2, r2, #1
 80089d0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80089d2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80089da:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80089de:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80089e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089ec:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80089ee:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECTOR_TABLE;
 80089f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089f4:	608b      	str	r3, [r1, #8]

}
 80089f6:	4770      	bx	lr
 80089f8:	e000ed00 	.word	0xe000ed00
 80089fc:	40021000 	.word	0x40021000

08008a00 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a04:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008a06:	4b08      	ldr	r3, [pc, #32]	; (8008a28 <HAL_InitTick+0x24>)
{
 8008a08:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a14:	f000 f896 	bl	8008b44 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	f000 f83e 	bl	8008aa0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8008a24:	2000      	movs	r0, #0
 8008a26:	bd10      	pop	{r4, pc}
 8008a28:	20000590 	.word	0x20000590

08008a2c <HAL_Init>:
{
 8008a2c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a2e:	2003      	movs	r0, #3
 8008a30:	f000 f824 	bl	8008a7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a34:	200f      	movs	r0, #15
 8008a36:	f7ff ffe5 	bl	8008a04 <HAL_InitTick>
  HAL_MspInit();
 8008a3a:	f7ff ffe1 	bl	8008a00 <HAL_MspInit>
}
 8008a3e:	2000      	movs	r0, #0
 8008a40:	bd08      	pop	{r3, pc}
	...

08008a44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8008a44:	4a02      	ldr	r2, [pc, #8]	; (8008a50 <HAL_IncTick+0xc>)
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	6013      	str	r3, [r2, #0]
}
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	200019b4 	.word	0x200019b4

08008a54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008a54:	4b01      	ldr	r3, [pc, #4]	; (8008a5c <HAL_GetTick+0x8>)
 8008a56:	6818      	ldr	r0, [r3, #0]
}
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	200019b4 	.word	0x200019b4

08008a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008a64:	f7ff fff6 	bl	8008a54 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a68:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8008a6a:	4605      	mov	r5, r0
  {
    wait++;
 8008a6c:	bf18      	it	ne
 8008a6e:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8008a70:	f7ff fff0 	bl	8008a54 <HAL_GetTick>
 8008a74:	1b40      	subs	r0, r0, r5
 8008a76:	42a0      	cmp	r0, r4
 8008a78:	d3fa      	bcc.n	8008a70 <HAL_Delay+0x10>
  {
  }
}
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}

08008a7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a7c:	4a07      	ldr	r2, [pc, #28]	; (8008a9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008a7e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008a84:	041b      	lsls	r3, r3, #16
 8008a86:	0c1b      	lsrs	r3, r3, #16
 8008a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008a8c:	0200      	lsls	r0, r0, #8
 8008a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8008a96:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008a98:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008a9a:	4770      	bx	lr
 8008a9c:	e000ed00 	.word	0xe000ed00

08008aa0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008aa0:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008aa2:	b570      	push	{r4, r5, r6, lr}
 8008aa4:	68dc      	ldr	r4, [r3, #12]
 8008aa6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008aaa:	f1c4 0507 	rsb	r5, r4, #7
 8008aae:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ab0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ab4:	bf28      	it	cs
 8008ab6:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ab8:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008abc:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008abe:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ac2:	bf8c      	ite	hi
 8008ac4:	3c03      	subhi	r4, #3
 8008ac6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ac8:	ea21 0303 	bic.w	r3, r1, r3
 8008acc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ace:	fa06 f404 	lsl.w	r4, r6, r4
 8008ad2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8008ad6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ad8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008adc:	bfa8      	it	ge
 8008ade:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8008ae2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ae6:	bfbc      	itt	lt
 8008ae8:	f000 000f 	andlt.w	r0, r0, #15
 8008aec:	4a05      	ldrlt	r2, [pc, #20]	; (8008b04 <HAL_NVIC_SetPriority+0x64>)
 8008aee:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af0:	bfaa      	itet	ge
 8008af2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
 8008afe:	bf00      	nop
 8008b00:	e000ed00 	.word	0xe000ed00
 8008b04:	e000ed14 	.word	0xe000ed14

08008b08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008b08:	0942      	lsrs	r2, r0, #5
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f000 001f 	and.w	r0, r0, #31
 8008b10:	fa03 f000 	lsl.w	r0, r3, r0
 8008b14:	4b01      	ldr	r3, [pc, #4]	; (8008b1c <HAL_NVIC_EnableIRQ+0x14>)
 8008b16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008b1a:	4770      	bx	lr
 8008b1c:	e000e100 	.word	0xe000e100

08008b20 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008b20:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008b24:	4905      	ldr	r1, [pc, #20]	; (8008b3c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008b26:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008b28:	68ca      	ldr	r2, [r1, #12]
 8008b2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60cb      	str	r3, [r1, #12]
 8008b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008b36:	bf00      	nop
 8008b38:	e7fd      	b.n	8008b36 <HAL_NVIC_SystemReset+0x16>
 8008b3a:	bf00      	nop
 8008b3c:	e000ed00 	.word	0xe000ed00
 8008b40:	05fa0004 	.word	0x05fa0004

08008b44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b44:	3801      	subs	r0, #1
 8008b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008b4a:	d20a      	bcs.n	8008b62 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b4c:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b4e:	4a07      	ldr	r2, [pc, #28]	; (8008b6c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b50:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b52:	21f0      	movs	r1, #240	; 0xf0
 8008b54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b58:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b5a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b5c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008b62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	e000e010 	.word	0xe000e010
 8008b6c:	e000ed00 	.word	0xe000ed00

08008b70 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8008b70:	4770      	bx	lr

08008b72 <HAL_SYSTICK_IRQHandler>:
{
 8008b72:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008b74:	f7ff fffc 	bl	8008b70 <HAL_SYSTICK_Callback>
}
 8008b78:	bd08      	pop	{r3, pc}

08008b7a <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b7a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8008b7e:	2a02      	cmp	r2, #2
{
 8008b80:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b82:	d003      	beq.n	8008b8c <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b84:	2204      	movs	r2, #4
 8008b86:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8008b88:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8008b8a:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b8c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008b8e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b90:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8008b92:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b94:	f021 010e 	bic.w	r1, r1, #14
 8008b98:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008b9a:	6811      	ldr	r1, [r2, #0]
 8008b9c:	f021 0101 	bic.w	r1, r1, #1
 8008ba0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ba2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8008baa:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8008bac:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8008bae:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008bb2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8008bb6:	b113      	cbz	r3, 8008bbe <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8008bb8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008bba:	4620      	mov	r0, r4
 8008bbc:	e7e5      	b.n	8008b8a <HAL_DMA_Abort_IT+0x10>
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	e7e3      	b.n	8008b8a <HAL_DMA_Abort_IT+0x10>
	...

08008bc4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))
 8008bc4:	4b32      	ldr	r3, [pc, #200]	; (8008c90 <FLASH_SetErrorCode+0xcc>)
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	0792      	lsls	r2, r2, #30
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OP;
 8008bca:	bf41      	itttt	mi
 8008bcc:	4931      	ldrmi	r1, [pc, #196]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008bce:	684a      	ldrmi	r2, [r1, #4]
 8008bd0:	f042 0201 	orrmi.w	r2, r2, #1
 8008bd4:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR))
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	071b      	lsls	r3, r3, #28
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008bda:	bf41      	itttt	mi
 8008bdc:	4a2d      	ldrmi	r2, [pc, #180]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008bde:	6853      	ldrmi	r3, [r2, #4]
 8008be0:	f043 0302 	orrmi.w	r3, r3, #2
 8008be4:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008be6:	4b2a      	ldr	r3, [pc, #168]	; (8008c90 <FLASH_SetErrorCode+0xcc>)
 8008be8:	691a      	ldr	r2, [r3, #16]
 8008bea:	06d0      	lsls	r0, r2, #27
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008bec:	bf41      	itttt	mi
 8008bee:	4929      	ldrmi	r1, [pc, #164]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008bf0:	684a      	ldrmi	r2, [r1, #4]
 8008bf2:	f042 0204 	orrmi.w	r2, r2, #4
 8008bf6:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	0699      	lsls	r1, r3, #26
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008bfc:	bf41      	itttt	mi
 8008bfe:	4a25      	ldrmi	r2, [pc, #148]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c00:	6853      	ldrmi	r3, [r2, #4]
 8008c02:	f043 0308 	orrmi.w	r3, r3, #8
 8008c06:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8008c08:	4b21      	ldr	r3, [pc, #132]	; (8008c90 <FLASH_SetErrorCode+0xcc>)
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	0652      	lsls	r2, r2, #25
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZ;
 8008c0e:	bf41      	itttt	mi
 8008c10:	4920      	ldrmi	r1, [pc, #128]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c12:	684a      	ldrmi	r2, [r1, #4]
 8008c14:	f042 0210 	orrmi.w	r2, r2, #16
 8008c18:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	061b      	lsls	r3, r3, #24
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008c1e:	bf41      	itttt	mi
 8008c20:	4a1c      	ldrmi	r2, [pc, #112]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c22:	6853      	ldrmi	r3, [r2, #4]
 8008c24:	f043 0320 	orrmi.w	r3, r3, #32
 8008c28:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR))
 8008c2a:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <FLASH_SetErrorCode+0xcc>)
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	05d0      	lsls	r0, r2, #23
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_MIS;
 8008c30:	bf41      	itttt	mi
 8008c32:	4918      	ldrmi	r1, [pc, #96]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c34:	684a      	ldrmi	r2, [r1, #4]
 8008c36:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8008c3a:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR))
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	0599      	lsls	r1, r3, #22
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_FAST;
 8008c40:	bf41      	itttt	mi
 8008c42:	4a14      	ldrmi	r2, [pc, #80]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c44:	6853      	ldrmi	r3, [r2, #4]
 8008c46:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8008c4a:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8008c4c:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <FLASH_SetErrorCode+0xcc>)
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	0452      	lsls	r2, r2, #17
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008c52:	bf41      	itttt	mi
 8008c54:	490f      	ldrmi	r1, [pc, #60]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c56:	684a      	ldrmi	r2, [r1, #4]
 8008c58:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8008c5c:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	041b      	lsls	r3, r3, #16
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008c62:	bf41      	itttt	mi
 8008c64:	4a0b      	ldrmi	r2, [pc, #44]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c66:	6853      	ldrmi	r3, [r2, #4]
 8008c68:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8008c6c:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8008c6e:	4b08      	ldr	r3, [pc, #32]	; (8008c90 <FLASH_SetErrorCode+0xcc>)
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	2a00      	cmp	r2, #0
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_ECCD;
 8008c74:	bfbf      	itttt	lt
 8008c76:	4907      	ldrlt	r1, [pc, #28]	; (8008c94 <FLASH_SetErrorCode+0xd0>)
 8008c78:	684a      	ldrlt	r2, [r1, #4]
 8008c7a:	f442 6280 	orrlt.w	r2, r2, #1024	; 0x400
 8008c7e:	604a      	strlt	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
  }
#endif
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008c86:	619a      	str	r2, [r3, #24]
 8008c88:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8008c8c:	611a      	str	r2, [r3, #16]
} 
 8008c8e:	4770      	bx	lr
 8008c90:	40022000 	.word	0x40022000
 8008c94:	200019b8 	.word	0x200019b8

08008c98 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008c98:	4a07      	ldr	r2, [pc, #28]	; (8008cb8 <FLASH_Program_Fast+0x20>)
 8008c9a:	6953      	ldr	r3, [r2, #20]
 8008c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ca0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ca2:	b672      	cpsid	i
 8008ca4:	f501 7380 	add.w	r3, r1, #256	; 0x100
 8008ca8:	1a40      	subs	r0, r0, r1
  __disable_irq();
  
  /* Program the double word of the row */
  do
  {
    *dest_addr++ = *src_addr++;
 8008caa:	680a      	ldr	r2, [r1, #0]
 8008cac:	500a      	str	r2, [r1, r0]
 8008cae:	3104      	adds	r1, #4
  } while (--row_index != 0);
 8008cb0:	4299      	cmp	r1, r3
 8008cb2:	d1fa      	bne.n	8008caa <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8008cb4:	b662      	cpsie	i

  /* Re-enable the interrupts */
  __enable_irq();
}
 8008cb6:	4770      	bx	lr
 8008cb8:	40022000 	.word	0x40022000

08008cbc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <HAL_FLASH_Unlock+0x1c>)
 8008cbe:	695a      	ldr	r2, [r3, #20]
 8008cc0:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008cc2:	bfbf      	itttt	lt
 8008cc4:	4a05      	ldrlt	r2, [pc, #20]	; (8008cdc <HAL_FLASH_Unlock+0x20>)
 8008cc6:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008cc8:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8008ccc:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008cce:	bfba      	itte	lt
 8008cd0:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd2:	0fc0      	lsrlt	r0, r0, #31
 8008cd4:	2000      	movge	r0, #0
}
 8008cd6:	4770      	bx	lr
 8008cd8:	40022000 	.word	0x40022000
 8008cdc:	45670123 	.word	0x45670123

08008ce0 <FLASH_WaitForLastOperation>:
{
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008ce4:	f7ff feb6 	bl	8008a54 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008ce8:	4c1e      	ldr	r4, [pc, #120]	; (8008d64 <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8008cea:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	03d8      	lsls	r0, r3, #15
 8008cf0:	d426      	bmi.n	8008d40 <FLASH_WaitForLastOperation+0x60>
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	0799      	lsls	r1, r3, #30
 8008cf6:	d41f      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	071a      	lsls	r2, r3, #28
 8008cfc:	d41c      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008cfe:	6923      	ldr	r3, [r4, #16]
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008d00:	06db      	lsls	r3, r3, #27
 8008d02:	d419      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	069e      	lsls	r6, r3, #26
 8008d08:	d416      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008d0a:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008d0c:	065d      	lsls	r5, r3, #25
 8008d0e:	d413      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	0618      	lsls	r0, r3, #24
 8008d14:	d410      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008d16:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008d18:	05d9      	lsls	r1, r3, #23
 8008d1a:	d40d      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	059a      	lsls	r2, r3, #22
 8008d20:	d40a      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008d22:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008d24:	045b      	lsls	r3, r3, #17
 8008d26:	d407      	bmi.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008d28:	490e      	ldr	r1, [pc, #56]	; (8008d64 <FLASH_WaitForLastOperation+0x84>)
 8008d2a:	690a      	ldr	r2, [r1, #16]
 8008d2c:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8008d30:	d102      	bne.n	8008d38 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD)))
 8008d32:	698b      	ldr	r3, [r1, #24]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	da0c      	bge.n	8008d52 <FLASH_WaitForLastOperation+0x72>
    FLASH_SetErrorCode();
 8008d38:	f7ff ff44 	bl	8008bc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008d3c:	2001      	movs	r0, #1
}
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8008d40:	1c6b      	adds	r3, r5, #1
 8008d42:	d0d3      	beq.n	8008cec <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8008d44:	f7ff fe86 	bl	8008a54 <HAL_GetTick>
 8008d48:	1b80      	subs	r0, r0, r6
 8008d4a:	42a8      	cmp	r0, r5
 8008d4c:	d3ce      	bcc.n	8008cec <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8008d4e:	2003      	movs	r0, #3
 8008d50:	e7f5      	b.n	8008d3e <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008d52:	6908      	ldr	r0, [r1, #16]
 8008d54:	f010 0001 	ands.w	r0, r0, #1
 8008d58:	d0f1      	beq.n	8008d3e <FLASH_WaitForLastOperation+0x5e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	610b      	str	r3, [r1, #16]
  return HAL_OK;  
 8008d5e:	4610      	mov	r0, r2
 8008d60:	e7ed      	b.n	8008d3e <FLASH_WaitForLastOperation+0x5e>
 8008d62:	bf00      	nop
 8008d64:	40022000 	.word	0x40022000

08008d68 <HAL_FLASH_Program>:
{
 8008d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8008d6c:	4c24      	ldr	r4, [pc, #144]	; (8008e00 <HAL_FLASH_Program+0x98>)
{
 8008d6e:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8008d70:	7823      	ldrb	r3, [r4, #0]
 8008d72:	2b01      	cmp	r3, #1
{
 8008d74:	4607      	mov	r7, r0
 8008d76:	4688      	mov	r8, r1
 8008d78:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8008d7a:	d03f      	beq.n	8008dfc <HAL_FLASH_Program+0x94>
 8008d7c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d7e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8008d82:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d84:	f7ff ffac 	bl	8008ce0 <FLASH_WaitForLastOperation>
 8008d88:	4606      	mov	r6, r0
  if(status == HAL_OK)
 8008d8a:	bb20      	cbnz	r0, 8008dd6 <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d8c:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008d8e:	481d      	ldr	r0, [pc, #116]	; (8008e04 <HAL_FLASH_Program+0x9c>)
 8008d90:	6805      	ldr	r5, [r0, #0]
 8008d92:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008d96:	bf17      	itett	ne
 8008d98:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008d9a:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008d9c:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8008da0:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008da2:	bf1c      	itt	ne
 8008da4:	2302      	movne	r3, #2
 8008da6:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008da8:	b9d7      	cbnz	r7, 8008de0 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008daa:	6945      	ldr	r5, [r0, #20]
 8008dac:	f045 0501 	orr.w	r5, r5, #1
 8008db0:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008db2:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 8008db6:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008db8:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008dbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008dc0:	f7ff ff8e 	bl	8008ce0 <FLASH_WaitForLastOperation>
 8008dc4:	4606      	mov	r6, r0
    if (prog_bit != 0)
 8008dc6:	b125      	cbz	r5, 8008dd2 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008dc8:	4a0e      	ldr	r2, [pc, #56]	; (8008e04 <HAL_FLASH_Program+0x9c>)
 8008dca:	6953      	ldr	r3, [r2, #20]
 8008dcc:	ea23 0505 	bic.w	r5, r3, r5
 8008dd0:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8008dd2:	f000 f851 	bl	8008e78 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	7023      	strb	r3, [r4, #0]
}
 8008dda:	4630      	mov	r0, r6
 8008ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008de0:	1e7b      	subs	r3, r7, #1
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d901      	bls.n	8008dea <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8008de6:	2500      	movs	r5, #0
 8008de8:	e7e8      	b.n	8008dbc <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008dea:	4649      	mov	r1, r9
 8008dec:	4640      	mov	r0, r8
 8008dee:	f7ff ff53 	bl	8008c98 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008df2:	2f02      	cmp	r7, #2
 8008df4:	d1f7      	bne.n	8008de6 <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8008df6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8008dfa:	e7df      	b.n	8008dbc <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8008dfc:	2602      	movs	r6, #2
 8008dfe:	e7ec      	b.n	8008dda <HAL_FLASH_Program+0x72>
 8008e00:	200019b8 	.word	0x200019b8
 8008e04:	40022000 	.word	0x40022000

08008e08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008e08:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <FLASH_MassErase+0x28>)
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != RESET)
 8008e0a:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008e0e:	bf1e      	ittt	ne
 8008e10:	695a      	ldrne	r2, [r3, #20]
 8008e12:	f042 0204 	orrne.w	r2, r2, #4
 8008e16:	615a      	strne	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != RESET)
 8008e18:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8008e1a:	bf42      	ittt	mi
 8008e1c:	695a      	ldrmi	r2, [r3, #20]
 8008e1e:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 8008e22:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008e24:	695a      	ldr	r2, [r3, #20]
 8008e26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e2a:	615a      	str	r2, [r3, #20]
}
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40022000 	.word	0x40022000

08008e34 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008e34:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <FLASH_PageErase+0x40>)
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != RESET)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008e36:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != RESET)
 8008e38:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008e3c:	bf14      	ite	ne
 8008e3e:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8008e42:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8008e46:	615a      	str	r2, [r3, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (Page << POSITION_VAL(FLASH_CR_PNB)));
 8008e48:	695a      	ldr	r2, [r3, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4a:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8008e4e:	fa91 f1a1 	rbit	r1, r1
 8008e52:	fab1 f181 	clz	r1, r1
 8008e56:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8008e5a:	4088      	lsls	r0, r1
 8008e5c:	4310      	orrs	r0, r2
 8008e5e:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008e60:	695a      	ldr	r2, [r3, #20]
 8008e62:	f042 0202 	orr.w	r2, r2, #2
 8008e66:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008e68:	695a      	ldr	r2, [r3, #20]
 8008e6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e6e:	615a      	str	r2, [r3, #20]
}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40022000 	.word	0x40022000

08008e78 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8008e78:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <FLASH_FlushCaches+0x54>)
 8008e7a:	7f1a      	ldrb	r2, [r3, #28]
 8008e7c:	2a01      	cmp	r2, #1
 8008e7e:	d002      	beq.n	8008e86 <FLASH_FlushCaches+0xe>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8008e80:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8008e82:	2a03      	cmp	r2, #3
 8008e84:	d10c      	bne.n	8008ea0 <FLASH_FlushCaches+0x28>
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008e86:	4a12      	ldr	r2, [pc, #72]	; (8008ed0 <FLASH_FlushCaches+0x58>)
 8008e88:	6811      	ldr	r1, [r2, #0]
 8008e8a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008e8e:	6011      	str	r1, [r2, #0]
 8008e90:	6811      	ldr	r1, [r2, #0]
 8008e92:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8008e96:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e98:	6811      	ldr	r1, [r2, #0]
 8008e9a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008e9e:	6011      	str	r1, [r2, #0]
  }
  
  /* Flush data cache */
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8008ea0:	7f1a      	ldrb	r2, [r3, #28]
 8008ea2:	2a02      	cmp	r2, #2
 8008ea4:	d002      	beq.n	8008eac <FLASH_FlushCaches+0x34>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8008ea6:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8008ea8:	2a03      	cmp	r2, #3
 8008eaa:	d10c      	bne.n	8008ec6 <FLASH_FlushCaches+0x4e>
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008eac:	4a08      	ldr	r2, [pc, #32]	; (8008ed0 <FLASH_FlushCaches+0x58>)
 8008eae:	6811      	ldr	r1, [r2, #0]
 8008eb0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008eb4:	6011      	str	r1, [r2, #0]
 8008eb6:	6811      	ldr	r1, [r2, #0]
 8008eb8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008ebc:	6011      	str	r1, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ebe:	6811      	ldr	r1, [r2, #0]
 8008ec0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008ec4:	6011      	str	r1, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	771a      	strb	r2, [r3, #28]
}
 8008eca:	4770      	bx	lr
 8008ecc:	200019b8 	.word	0x200019b8
 8008ed0:	40022000 	.word	0x40022000

08008ed4 <HAL_FLASHEx_Erase>:
{
 8008ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8008ed8:	4c35      	ldr	r4, [pc, #212]	; (8008fb0 <HAL_FLASHEx_Erase+0xdc>)
 8008eda:	7823      	ldrb	r3, [r4, #0]
 8008edc:	2b01      	cmp	r3, #1
{
 8008ede:	4606      	mov	r6, r0
 8008ee0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8008ee2:	d062      	beq.n	8008faa <HAL_FLASHEx_Erase+0xd6>
 8008ee4:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008ee6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8008eea:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008eec:	f7ff fef8 	bl	8008ce0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	bb40      	cbnz	r0, 8008f46 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008ef4:	4b2f      	ldr	r3, [pc, #188]	; (8008fb4 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ef6:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008efe:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008f00:	d026      	beq.n	8008f50 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008f02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f06:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	0551      	lsls	r1, r2, #21
 8008f0c:	d506      	bpl.n	8008f1c <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f14:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008f16:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008f18:	7723      	strb	r3, [r4, #28]
 8008f1a:	e000      	b.n	8008f1e <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008f1c:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008f1e:	6833      	ldr	r3, [r6, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d11f      	bne.n	8008f64 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8008f24:	6870      	ldr	r0, [r6, #4]
 8008f26:	f7ff ff6f 	bl	8008e08 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008f2e:	f7ff fed7 	bl	8008ce0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8008f32:	4a20      	ldr	r2, [pc, #128]	; (8008fb4 <HAL_FLASHEx_Erase+0xe0>)
 8008f34:	6953      	ldr	r3, [r2, #20]
 8008f36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f3a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f3e:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8008f40:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8008f42:	f7ff ff99 	bl	8008e78 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008f46:	2300      	movs	r3, #0
 8008f48:	7023      	strb	r3, [r4, #0]
}
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008f50:	0552      	lsls	r2, r2, #21
 8008f52:	d505      	bpl.n	8008f60 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f5a:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e7db      	b.n	8008f18 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008f60:	7720      	strb	r0, [r4, #28]
 8008f62:	e7dc      	b.n	8008f1e <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFF;
 8008f64:	f04f 33ff 	mov.w	r3, #4294967295
 8008f68:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008f6c:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008f6e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008fb4 <HAL_FLASHEx_Erase+0xe0>
 8008f72:	f8df a044 	ldr.w	sl, [pc, #68]	; 8008fb8 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008f76:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	42bb      	cmp	r3, r7
 8008f7e:	d9e0      	bls.n	8008f42 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8008f80:	6871      	ldr	r1, [r6, #4]
 8008f82:	4638      	mov	r0, r7
 8008f84:	f7ff ff56 	bl	8008e34 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008f8c:	f7ff fea8 	bl	8008ce0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008f90:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008f94:	ea03 030a 	and.w	r3, r3, sl
 8008f98:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8008f9c:	b118      	cbz	r0, 8008fa6 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8008f9e:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008fa2:	4605      	mov	r5, r0
          break;
 8008fa4:	e7cd      	b.n	8008f42 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008fa6:	3701      	adds	r7, #1
 8008fa8:	e7e5      	b.n	8008f76 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 8008faa:	2502      	movs	r5, #2
 8008fac:	e7cd      	b.n	8008f4a <HAL_FLASHEx_Erase+0x76>
 8008fae:	bf00      	nop
 8008fb0:	200019b8 	.word	0x200019b8
 8008fb4:	40022000 	.word	0x40022000
 8008fb8:	fffff805 	.word	0xfffff805

08008fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8008fc2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fc4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009170 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008fc8:	4c67      	ldr	r4, [pc, #412]	; (8009168 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8008fca:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8008fcc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8008fce:	9a01      	ldr	r2, [sp, #4]
 8008fd0:	40da      	lsrs	r2, r3
 8008fd2:	d102      	bne.n	8008fda <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8008fd4:	b005      	add	sp, #20
 8008fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008fda:	2601      	movs	r6, #1
    if(iocurrent)
 8008fdc:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008fde:	409e      	lsls	r6, r3
    if(iocurrent)
 8008fe0:	ea16 0c02 	ands.w	ip, r6, r2
 8008fe4:	f000 80b1 	beq.w	800914a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fe8:	684a      	ldr	r2, [r1, #4]
 8008fea:	f022 0710 	bic.w	r7, r2, #16
 8008fee:	2f02      	cmp	r7, #2
 8008ff0:	d116      	bne.n	8009020 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8008ff2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8008ff6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008ffa:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8008ffe:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009002:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8009006:	f04f 0e0f 	mov.w	lr, #15
 800900a:	fa0e fe0a 	lsl.w	lr, lr, sl
 800900e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009012:	690d      	ldr	r5, [r1, #16]
 8009014:	fa05 f50a 	lsl.w	r5, r5, sl
 8009018:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800901c:	f8c9 5020 	str.w	r5, [r9, #32]
 8009020:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8009024:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8009026:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800902a:	fa05 f50e 	lsl.w	r5, r5, lr
 800902e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009030:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8009034:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009038:	fa0a f90e 	lsl.w	r9, sl, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800903c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800903e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009042:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8009044:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009048:	d811      	bhi.n	800906e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800904a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800904c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8009050:	68cf      	ldr	r7, [r1, #12]
 8009052:	fa07 f70e 	lsl.w	r7, r7, lr
 8009056:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800905a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800905c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800905e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009062:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8009066:	409f      	lsls	r7, r3
 8009068:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 800906c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800906e:	f1ba 0f03 	cmp.w	sl, #3
 8009072:	d107      	bne.n	8009084 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8009074:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009076:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800907a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800907e:	409f      	lsls	r7, r3
 8009080:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8009082:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8009084:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8009086:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009088:	688e      	ldr	r6, [r1, #8]
 800908a:	fa06 f60e 	lsl.w	r6, r6, lr
 800908e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8009090:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009092:	00d5      	lsls	r5, r2, #3
 8009094:	d559      	bpl.n	800914a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009096:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800909a:	f045 0501 	orr.w	r5, r5, #1
 800909e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80090a2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80090a6:	f023 0603 	bic.w	r6, r3, #3
 80090aa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80090ae:	f005 0501 	and.w	r5, r5, #1
 80090b2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80090b6:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80090b8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090bc:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80090be:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80090c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80090c4:	270f      	movs	r7, #15
 80090c6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80090ca:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80090ce:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80090d2:	d03c      	beq.n	800914e <HAL_GPIO_Init+0x192>
 80090d4:	4d25      	ldr	r5, [pc, #148]	; (800916c <HAL_GPIO_Init+0x1b0>)
 80090d6:	42a8      	cmp	r0, r5
 80090d8:	d03b      	beq.n	8009152 <HAL_GPIO_Init+0x196>
 80090da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80090de:	42a8      	cmp	r0, r5
 80090e0:	d039      	beq.n	8009156 <HAL_GPIO_Init+0x19a>
 80090e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80090e6:	42a8      	cmp	r0, r5
 80090e8:	d037      	beq.n	800915a <HAL_GPIO_Init+0x19e>
 80090ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80090ee:	42a8      	cmp	r0, r5
 80090f0:	d035      	beq.n	800915e <HAL_GPIO_Init+0x1a2>
 80090f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80090f6:	42a8      	cmp	r0, r5
 80090f8:	d033      	beq.n	8009162 <HAL_GPIO_Init+0x1a6>
 80090fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80090fe:	42a8      	cmp	r0, r5
 8009100:	bf14      	ite	ne
 8009102:	2507      	movne	r5, #7
 8009104:	2506      	moveq	r5, #6
 8009106:	fa05 f50e 	lsl.w	r5, r5, lr
 800910a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800910c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800910e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8009110:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009114:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8009116:	bf54      	ite	pl
 8009118:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800911a:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->IMR1 = temp;
 800911e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8009120:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009122:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8009124:	bf54      	ite	pl
 8009126:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8009128:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->EMR1 = temp;
 800912c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800912e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009130:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8009132:	bf54      	ite	pl
 8009134:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8009136:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->RTSR1 = temp;
 800913a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800913c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800913e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8009140:	bf54      	ite	pl
 8009142:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8009144:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->FTSR1 = temp;
 8009148:	60e5      	str	r5, [r4, #12]
    position++;
 800914a:	3301      	adds	r3, #1
 800914c:	e73f      	b.n	8008fce <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800914e:	2500      	movs	r5, #0
 8009150:	e7d9      	b.n	8009106 <HAL_GPIO_Init+0x14a>
 8009152:	2501      	movs	r5, #1
 8009154:	e7d7      	b.n	8009106 <HAL_GPIO_Init+0x14a>
 8009156:	2502      	movs	r5, #2
 8009158:	e7d5      	b.n	8009106 <HAL_GPIO_Init+0x14a>
 800915a:	2503      	movs	r5, #3
 800915c:	e7d3      	b.n	8009106 <HAL_GPIO_Init+0x14a>
 800915e:	2504      	movs	r5, #4
 8009160:	e7d1      	b.n	8009106 <HAL_GPIO_Init+0x14a>
 8009162:	2505      	movs	r5, #5
 8009164:	e7cf      	b.n	8009106 <HAL_GPIO_Init+0x14a>
 8009166:	bf00      	nop
 8009168:	40010400 	.word	0x40010400
 800916c:	48000400 	.word	0x48000400
 8009170:	40021000 	.word	0x40021000

08009174 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009174:	6903      	ldr	r3, [r0, #16]
 8009176:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009178:	bf14      	ite	ne
 800917a:	2001      	movne	r0, #1
 800917c:	2000      	moveq	r0, #0
 800917e:	4770      	bx	lr

08009180 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009180:	b10a      	cbz	r2, 8009186 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009182:	6181      	str	r1, [r0, #24]
 8009184:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009186:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8009188:	4770      	bx	lr

0800918a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800918a:	6943      	ldr	r3, [r0, #20]
 800918c:	4059      	eors	r1, r3
 800918e:	6141      	str	r1, [r0, #20]
}
 8009190:	4770      	bx	lr
	...

08009194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009194:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009196:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8009198:	6959      	ldr	r1, [r3, #20]
 800919a:	4201      	tst	r1, r0
 800919c:	d002      	beq.n	80091a4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800919e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80091a0:	f7fb f804 	bl	80041ac <HAL_GPIO_EXTI_Callback>
  }
}
 80091a4:	bd08      	pop	{r3, pc}
 80091a6:	bf00      	nop
 80091a8:	40010400 	.word	0x40010400

080091ac <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091ac:	6803      	ldr	r3, [r0, #0]
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80091b2:	bf44      	itt	mi
 80091b4:	2200      	movmi	r2, #0
 80091b6:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80091bc:	bf5e      	ittt	pl
 80091be:	699a      	ldrpl	r2, [r3, #24]
 80091c0:	f042 0201 	orrpl.w	r2, r2, #1
 80091c4:	619a      	strpl	r2, [r3, #24]
  }
}
 80091c6:	4770      	bx	lr

080091c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80091c8:	b530      	push	{r4, r5, lr}
 80091ca:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80091cc:	6804      	ldr	r4, [r0, #0]
 80091ce:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f3c1 0209 	ubfx	r2, r1, #0, #10
 80091d8:	431a      	orrs	r2, r3
 80091da:	4b04      	ldr	r3, [pc, #16]	; (80091ec <I2C_TransferConfig+0x24>)
 80091dc:	6860      	ldr	r0, [r4, #4]
 80091de:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80091e2:	ea20 0003 	bic.w	r0, r0, r3
 80091e6:	4302      	orrs	r2, r0
 80091e8:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80091ea:	bd30      	pop	{r4, r5, pc}
 80091ec:	03ff63ff 	.word	0x03ff63ff

080091f0 <I2C_WaitOnFlagUntilTimeout>:
{
 80091f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f4:	9f06      	ldr	r7, [sp, #24]
 80091f6:	4604      	mov	r4, r0
 80091f8:	4688      	mov	r8, r1
 80091fa:	4616      	mov	r6, r2
 80091fc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	6993      	ldr	r3, [r2, #24]
 8009202:	ea38 0303 	bics.w	r3, r8, r3
 8009206:	bf0c      	ite	eq
 8009208:	2301      	moveq	r3, #1
 800920a:	2300      	movne	r3, #0
 800920c:	42b3      	cmp	r3, r6
 800920e:	d001      	beq.n	8009214 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8009210:	2000      	movs	r0, #0
 8009212:	e00b      	b.n	800922c <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8009214:	1c6b      	adds	r3, r5, #1
 8009216:	d0f3      	beq.n	8009200 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009218:	b955      	cbnz	r5, 8009230 <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State = HAL_I2C_STATE_READY;
 800921a:	2320      	movs	r3, #32
 800921c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009220:	2300      	movs	r3, #0
 8009222:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009226:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800922a:	2003      	movs	r0, #3
}
 800922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009230:	f7ff fc10 	bl	8008a54 <HAL_GetTick>
 8009234:	1bc0      	subs	r0, r0, r7
 8009236:	42a8      	cmp	r0, r5
 8009238:	d9e1      	bls.n	80091fe <I2C_WaitOnFlagUntilTimeout+0xe>
 800923a:	e7ee      	b.n	800921a <I2C_WaitOnFlagUntilTimeout+0x2a>

0800923c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800923c:	6803      	ldr	r3, [r0, #0]
{
 800923e:	b570      	push	{r4, r5, r6, lr}
 8009240:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009242:	6998      	ldr	r0, [r3, #24]
 8009244:	f010 0010 	ands.w	r0, r0, #16
{
 8009248:	460d      	mov	r5, r1
 800924a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800924c:	d112      	bne.n	8009274 <I2C_IsAcknowledgeFailed+0x38>
}
 800924e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8009250:	1c69      	adds	r1, r5, #1
 8009252:	d010      	beq.n	8009276 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009254:	b125      	cbz	r5, 8009260 <I2C_IsAcknowledgeFailed+0x24>
 8009256:	f7ff fbfd 	bl	8008a54 <HAL_GetTick>
 800925a:	1b80      	subs	r0, r0, r6
 800925c:	4285      	cmp	r5, r0
 800925e:	d209      	bcs.n	8009274 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8009260:	2320      	movs	r3, #32
 8009262:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009266:	2300      	movs	r3, #0
 8009268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800926c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8009270:	2003      	movs	r0, #3
 8009272:	e7ec      	b.n	800924e <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	6999      	ldr	r1, [r3, #24]
 8009278:	068a      	lsls	r2, r1, #26
 800927a:	d5e9      	bpl.n	8009250 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800927c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800927e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009280:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8009282:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009284:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8009286:	f7ff ff91 	bl	80091ac <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800928a:	6822      	ldr	r2, [r4, #0]
 800928c:	6853      	ldr	r3, [r2, #4]
 800928e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8009292:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8009296:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80092a0:	2304      	movs	r3, #4
 80092a2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80092a6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80092aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 80092b2:	2001      	movs	r0, #1
 80092b4:	e7cb      	b.n	800924e <I2C_IsAcknowledgeFailed+0x12>

080092b6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80092b6:	b570      	push	{r4, r5, r6, lr}
 80092b8:	4604      	mov	r4, r0
 80092ba:	460d      	mov	r5, r1
 80092bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	075b      	lsls	r3, r3, #29
 80092c4:	d40e      	bmi.n	80092e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80092c6:	4632      	mov	r2, r6
 80092c8:	4629      	mov	r1, r5
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7ff ffb6 	bl	800923c <I2C_IsAcknowledgeFailed>
 80092d0:	b9f0      	cbnz	r0, 8009310 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	0691      	lsls	r1, r2, #26
 80092d8:	d51c      	bpl.n	8009314 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80092da:	699a      	ldr	r2, [r3, #24]
 80092dc:	0752      	lsls	r2, r2, #29
 80092de:	d503      	bpl.n	80092e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80092e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80092e2:	b10a      	cbz	r2, 80092e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80092e4:	2000      	movs	r0, #0
}
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092e8:	2120      	movs	r1, #32
 80092ea:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80092f2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80092f6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80092fa:	f022 0201 	bic.w	r2, r2, #1
 80092fe:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009300:	2300      	movs	r3, #0
 8009302:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009304:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8009308:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800930c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8009310:	2001      	movs	r0, #1
 8009312:	e7e8      	b.n	80092e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009314:	b95d      	cbnz	r5, 800932e <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009316:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009318:	f043 0320 	orr.w	r3, r3, #32
 800931c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800931e:	2320      	movs	r3, #32
 8009320:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8009324:	2300      	movs	r3, #0
 8009326:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 800932a:	2003      	movs	r0, #3
 800932c:	e7db      	b.n	80092e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800932e:	f7ff fb91 	bl	8008a54 <HAL_GetTick>
 8009332:	1b80      	subs	r0, r0, r6
 8009334:	42a8      	cmp	r0, r5
 8009336:	d9c2      	bls.n	80092be <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8009338:	e7ed      	b.n	8009316 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>

0800933a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800933a:	b570      	push	{r4, r5, r6, lr}
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
 8009340:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	079b      	lsls	r3, r3, #30
 8009348:	d501      	bpl.n	800934e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800934a:	2000      	movs	r0, #0
 800934c:	e015      	b.n	800937a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800934e:	4632      	mov	r2, r6
 8009350:	4629      	mov	r1, r5
 8009352:	4620      	mov	r0, r4
 8009354:	f7ff ff72 	bl	800923c <I2C_IsAcknowledgeFailed>
 8009358:	b9b0      	cbnz	r0, 8009388 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800935a:	1c6a      	adds	r2, r5, #1
 800935c:	d0f1      	beq.n	8009342 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800935e:	b96d      	cbnz	r5, 800937c <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009360:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009362:	f043 0320 	orr.w	r3, r3, #32
 8009366:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009368:	2320      	movs	r3, #32
 800936a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800936e:	2300      	movs	r3, #0
 8009370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009374:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009378:	2003      	movs	r0, #3
}
 800937a:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800937c:	f7ff fb6a 	bl	8008a54 <HAL_GetTick>
 8009380:	1b80      	subs	r0, r0, r6
 8009382:	42a8      	cmp	r0, r5
 8009384:	d9dd      	bls.n	8009342 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8009386:	e7eb      	b.n	8009360 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8009388:	2001      	movs	r0, #1
 800938a:	e7f6      	b.n	800937a <I2C_WaitOnTXISFlagUntilTimeout+0x40>

0800938c <I2C_RequestMemoryWrite>:
{
 800938c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800938e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009390:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009392:	4b18      	ldr	r3, [pc, #96]	; (80093f4 <I2C_RequestMemoryWrite+0x68>)
 8009394:	9300      	str	r3, [sp, #0]
{
 8009396:	4604      	mov	r4, r0
 8009398:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800939a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800939e:	b2fa      	uxtb	r2, r7
 80093a0:	f7ff ff12 	bl	80091c8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a4:	4632      	mov	r2, r6
 80093a6:	9908      	ldr	r1, [sp, #32]
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff ffc6 	bl	800933a <I2C_WaitOnTXISFlagUntilTimeout>
 80093ae:	b128      	cbz	r0, 80093bc <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d110      	bne.n	80093d8 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 80093b6:	2001      	movs	r0, #1
}
 80093b8:	b003      	add	sp, #12
 80093ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093bc:	2f01      	cmp	r7, #1
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	d10c      	bne.n	80093dc <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80093c2:	b2ed      	uxtb	r5, r5
 80093c4:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80093c6:	9b08      	ldr	r3, [sp, #32]
 80093c8:	9600      	str	r6, [sp, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	2180      	movs	r1, #128	; 0x80
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff ff0e 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d0ef      	beq.n	80093b8 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 80093d8:	2003      	movs	r0, #3
 80093da:	e7ed      	b.n	80093b8 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80093dc:	0a2a      	lsrs	r2, r5, #8
 80093de:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093e0:	9908      	ldr	r1, [sp, #32]
 80093e2:	4632      	mov	r2, r6
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff ffa8 	bl	800933a <I2C_WaitOnTXISFlagUntilTimeout>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d1e0      	bne.n	80093b0 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	e7e7      	b.n	80093c2 <I2C_RequestMemoryWrite+0x36>
 80093f2:	bf00      	nop
 80093f4:	80002000 	.word	0x80002000

080093f8 <I2C_RequestMemoryRead>:
{
 80093f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80093fc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80093fe:	4b17      	ldr	r3, [pc, #92]	; (800945c <I2C_RequestMemoryRead+0x64>)
 8009400:	9300      	str	r3, [sp, #0]
{
 8009402:	4604      	mov	r4, r0
 8009404:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009406:	2300      	movs	r3, #0
 8009408:	b2fa      	uxtb	r2, r7
 800940a:	f7ff fedd 	bl	80091c8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800940e:	4632      	mov	r2, r6
 8009410:	9908      	ldr	r1, [sp, #32]
 8009412:	4620      	mov	r0, r4
 8009414:	f7ff ff91 	bl	800933a <I2C_WaitOnTXISFlagUntilTimeout>
 8009418:	b128      	cbz	r0, 8009426 <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800941a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800941c:	2b04      	cmp	r3, #4
 800941e:	d110      	bne.n	8009442 <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8009420:	2001      	movs	r0, #1
}
 8009422:	b003      	add	sp, #12
 8009424:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009426:	2f01      	cmp	r7, #1
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	d10c      	bne.n	8009446 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800942c:	b2ed      	uxtb	r5, r5
 800942e:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009430:	9b08      	ldr	r3, [sp, #32]
 8009432:	9600      	str	r6, [sp, #0]
 8009434:	2200      	movs	r2, #0
 8009436:	2140      	movs	r1, #64	; 0x40
 8009438:	4620      	mov	r0, r4
 800943a:	f7ff fed9 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 800943e:	2800      	cmp	r0, #0
 8009440:	d0ef      	beq.n	8009422 <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8009442:	2003      	movs	r0, #3
 8009444:	e7ed      	b.n	8009422 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009446:	0a2a      	lsrs	r2, r5, #8
 8009448:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800944a:	9908      	ldr	r1, [sp, #32]
 800944c:	4632      	mov	r2, r6
 800944e:	4620      	mov	r0, r4
 8009450:	f7ff ff73 	bl	800933a <I2C_WaitOnTXISFlagUntilTimeout>
 8009454:	2800      	cmp	r0, #0
 8009456:	d1e0      	bne.n	800941a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	e7e7      	b.n	800942c <I2C_RequestMemoryRead+0x34>
 800945c:	80002000 	.word	0x80002000

08009460 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4604      	mov	r4, r0
 8009464:	460d      	mov	r5, r1
 8009466:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	069b      	lsls	r3, r3, #26
 800946e:	d501      	bpl.n	8009474 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009470:	2000      	movs	r0, #0
 8009472:	e013      	b.n	800949c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009474:	4632      	mov	r2, r6
 8009476:	4629      	mov	r1, r5
 8009478:	4620      	mov	r0, r4
 800947a:	f7ff fedf 	bl	800923c <I2C_IsAcknowledgeFailed>
 800947e:	b9a0      	cbnz	r0, 80094aa <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009480:	b96d      	cbnz	r5, 800949e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009482:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009484:	f043 0320 	orr.w	r3, r3, #32
 8009488:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800948a:	2320      	movs	r3, #32
 800948c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009490:	2300      	movs	r3, #0
 8009492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800949a:	2003      	movs	r0, #3
}
 800949c:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800949e:	f7ff fad9 	bl	8008a54 <HAL_GetTick>
 80094a2:	1b80      	subs	r0, r0, r6
 80094a4:	42a8      	cmp	r0, r5
 80094a6:	d9df      	bls.n	8009468 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80094a8:	e7eb      	b.n	8009482 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80094aa:	2001      	movs	r0, #1
 80094ac:	e7f6      	b.n	800949c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

080094ae <HAL_I2C_MspInit>:
}
 80094ae:	4770      	bx	lr

080094b0 <HAL_I2C_Init>:
{
 80094b0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80094b2:	4604      	mov	r4, r0
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d04a      	beq.n	800954e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80094bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80094c0:	b91b      	cbnz	r3, 80094ca <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80094c2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80094c6:	f7ff fff2 	bl	80094ae <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80094ca:	2324      	movs	r3, #36	; 0x24
 80094cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	f022 0201 	bic.w	r2, r2, #1
 80094d8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80094da:	6862      	ldr	r2, [r4, #4]
 80094dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80094e0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094e8:	609a      	str	r2, [r3, #8]
 80094ea:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80094ee:	2901      	cmp	r1, #1
 80094f0:	d124      	bne.n	800953c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80094f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094f6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80094fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009502:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800950a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800950c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009510:	430a      	orrs	r2, r1
 8009512:	69a1      	ldr	r1, [r4, #24]
 8009514:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009518:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800951a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800951e:	430a      	orrs	r2, r1
 8009520:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	f042 0201 	orr.w	r2, r2, #1
 8009528:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800952a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800952c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800952e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009530:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009534:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009536:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800953a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800953c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009540:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009542:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009544:	bf04      	itt	eq
 8009546:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800954a:	605a      	streq	r2, [r3, #4]
 800954c:	e7d4      	b.n	80094f8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800954e:	2001      	movs	r0, #1
 8009550:	e7f3      	b.n	800953a <HAL_I2C_Init+0x8a>

08009552 <HAL_I2C_MspDeInit>:
 8009552:	4770      	bx	lr

08009554 <HAL_I2C_DeInit>:
{
 8009554:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009556:	4604      	mov	r4, r0
 8009558:	b198      	cbz	r0, 8009582 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800955a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800955c:	2324      	movs	r3, #36	; 0x24
 800955e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	f023 0301 	bic.w	r3, r3, #1
 8009568:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800956a:	f7ff fff2 	bl	8009552 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800956e:	2000      	movs	r0, #0
 8009570:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8009572:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8009576:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800957a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800957c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8009580:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009582:	2001      	movs	r0, #1
 8009584:	e7fc      	b.n	8009580 <HAL_I2C_DeInit+0x2c>
	...

08009588 <HAL_I2C_Master_Transmit>:
{
 8009588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800958c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800958e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009592:	2b20      	cmp	r3, #32
{
 8009594:	4604      	mov	r4, r0
 8009596:	460e      	mov	r6, r1
 8009598:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800959a:	f040 8087 	bne.w	80096ac <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 800959e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	f000 8082 	beq.w	80096ac <HAL_I2C_Master_Transmit+0x124>
 80095a8:	2701      	movs	r7, #1
 80095aa:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80095ae:	f7ff fa51 	bl	8008a54 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095b2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80095b4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095b6:	9000      	str	r0, [sp, #0]
 80095b8:	463a      	mov	r2, r7
 80095ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095be:	4620      	mov	r0, r4
 80095c0:	f7ff fe16 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d147      	bne.n	8009658 <HAL_I2C_Master_Transmit+0xd0>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80095c8:	2321      	movs	r3, #33	; 0x21
 80095ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80095ce:	2310      	movs	r3, #16
 80095d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095d4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80095d6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80095dc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095e0:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80095e2:	6360      	str	r0, [r4, #52]	; 0x34
 80095e4:	4b32      	ldr	r3, [pc, #200]	; (80096b0 <HAL_I2C_Master_Transmit+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095e6:	d925      	bls.n	8009634 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095e8:	22ff      	movs	r2, #255	; 0xff
 80095ea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80095ec:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80095ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80095f2:	4631      	mov	r1, r6
 80095f4:	4620      	mov	r0, r4
 80095f6:	f7ff fde7 	bl	80091c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80095fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80095fe:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009600:	462a      	mov	r2, r5
 8009602:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009604:	b9f3      	cbnz	r3, 8009644 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009606:	f7ff ff2b 	bl	8009460 <I2C_WaitOnSTOPFlagUntilTimeout>
 800960a:	b9f0      	cbnz	r0, 800964a <HAL_I2C_Master_Transmit+0xc2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	2120      	movs	r1, #32
 8009610:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009618:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800961c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009620:	f022 0201 	bic.w	r2, r2, #1
 8009624:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009626:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800962a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800962e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009632:	e00e      	b.n	8009652 <HAL_I2C_Master_Transmit+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8009634:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009636:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009638:	b292      	uxth	r2, r2
 800963a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800963c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	e7d6      	b.n	80095f2 <HAL_I2C_Master_Transmit+0x6a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009644:	f7ff fe79 	bl	800933a <I2C_WaitOnTXISFlagUntilTimeout>
 8009648:	b140      	cbz	r0, 800965c <HAL_I2C_Master_Transmit+0xd4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800964a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800964c:	2b04      	cmp	r3, #4
 800964e:	d103      	bne.n	8009658 <HAL_I2C_Master_Transmit+0xd0>
          return HAL_ERROR;
 8009650:	2001      	movs	r0, #1
}
 8009652:	b003      	add	sp, #12
 8009654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8009658:	2003      	movs	r0, #3
 800965a:	e7fa      	b.n	8009652 <HAL_I2C_Master_Transmit+0xca>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800965c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	6262      	str	r2, [r4, #36]	; 0x24
 8009662:	6822      	ldr	r2, [r4, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8009668:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800966a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800966c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800966e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009670:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009672:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009674:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009676:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009678:	2a00      	cmp	r2, #0
 800967a:	d1be      	bne.n	80095fa <HAL_I2C_Master_Transmit+0x72>
 800967c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800967e:	b29b      	uxth	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0ba      	beq.n	80095fa <HAL_I2C_Master_Transmit+0x72>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009684:	9500      	str	r5, [sp, #0]
 8009686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009688:	2180      	movs	r1, #128	; 0x80
 800968a:	4620      	mov	r0, r4
 800968c:	f7ff fdb0 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 8009690:	2800      	cmp	r0, #0
 8009692:	d1e1      	bne.n	8009658 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009694:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009696:	2bff      	cmp	r3, #255	; 0xff
 8009698:	d903      	bls.n	80096a2 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800969a:	22ff      	movs	r2, #255	; 0xff
 800969c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800969e:	9000      	str	r0, [sp, #0]
 80096a0:	e7a5      	b.n	80095ee <HAL_I2C_Master_Transmit+0x66>
          hi2c->XferSize = hi2c->XferCount;
 80096a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80096a4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80096a6:	b292      	uxth	r2, r2
 80096a8:	8522      	strh	r2, [r4, #40]	; 0x28
 80096aa:	e7c7      	b.n	800963c <HAL_I2C_Master_Transmit+0xb4>
    return HAL_BUSY;
 80096ac:	2002      	movs	r0, #2
 80096ae:	e7d0      	b.n	8009652 <HAL_I2C_Master_Transmit+0xca>
 80096b0:	80002000 	.word	0x80002000

080096b4 <HAL_I2C_Master_Receive>:
{
 80096b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096b8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80096ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80096be:	2b20      	cmp	r3, #32
{
 80096c0:	4604      	mov	r4, r0
 80096c2:	460e      	mov	r6, r1
 80096c4:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80096c6:	f040 8087 	bne.w	80097d8 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 80096ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	f000 8082 	beq.w	80097d8 <HAL_I2C_Master_Receive+0x124>
 80096d4:	2701      	movs	r7, #1
 80096d6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80096da:	f7ff f9bb 	bl	8008a54 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096de:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80096e0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096e2:	9000      	str	r0, [sp, #0]
 80096e4:	463a      	mov	r2, r7
 80096e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7ff fd80 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d147      	bne.n	8009784 <HAL_I2C_Master_Receive+0xd0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80096f4:	2322      	movs	r3, #34	; 0x22
 80096f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80096fa:	2310      	movs	r3, #16
 80096fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009700:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009702:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009706:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8009708:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800970c:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800970e:	6360      	str	r0, [r4, #52]	; 0x34
 8009710:	4b32      	ldr	r3, [pc, #200]	; (80097dc <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009712:	d925      	bls.n	8009760 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009718:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800971a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800971e:	4631      	mov	r1, r6
 8009720:	4620      	mov	r0, r4
 8009722:	f7ff fd51 	bl	80091c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009726:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009728:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 800972a:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800972c:	462a      	mov	r2, r5
 800972e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009730:	b9f3      	cbnz	r3, 8009770 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009732:	f7ff fe95 	bl	8009460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009736:	b9f0      	cbnz	r0, 8009776 <HAL_I2C_Master_Receive+0xc2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	2120      	movs	r1, #32
 800973c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009744:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009748:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800974c:	f022 0201 	bic.w	r2, r2, #1
 8009750:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009752:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009756:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800975a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800975e:	e00e      	b.n	800977e <HAL_I2C_Master_Receive+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8009760:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009762:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009764:	b292      	uxth	r2, r2
 8009766:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	e7d6      	b.n	800971e <HAL_I2C_Master_Receive+0x6a>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009770:	f7ff fda1 	bl	80092b6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009774:	b140      	cbz	r0, 8009788 <HAL_I2C_Master_Receive+0xd4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009776:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009778:	2b04      	cmp	r3, #4
 800977a:	d103      	bne.n	8009784 <HAL_I2C_Master_Receive+0xd0>
          return HAL_ERROR;
 800977c:	2001      	movs	r0, #1
}
 800977e:	b003      	add	sp, #12
 8009780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8009784:	2003      	movs	r0, #3
 8009786:	e7fa      	b.n	800977e <HAL_I2C_Master_Receive+0xca>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800978c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800978e:	1c59      	adds	r1, r3, #1
 8009790:	6261      	str	r1, [r4, #36]	; 0x24
 8009792:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8009794:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009798:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800979a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800979c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800979e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80097a0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80097a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	d1be      	bne.n	8009726 <HAL_I2C_Master_Receive+0x72>
 80097a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0ba      	beq.n	8009726 <HAL_I2C_Master_Receive+0x72>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097b0:	9500      	str	r5, [sp, #0]
 80097b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b4:	2180      	movs	r1, #128	; 0x80
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7ff fd1a 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1e1      	bne.n	8009784 <HAL_I2C_Master_Receive+0xd0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80097c2:	2bff      	cmp	r3, #255	; 0xff
 80097c4:	d903      	bls.n	80097ce <HAL_I2C_Master_Receive+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80097c6:	22ff      	movs	r2, #255	; 0xff
 80097c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80097ca:	9000      	str	r0, [sp, #0]
 80097cc:	e7a5      	b.n	800971a <HAL_I2C_Master_Receive+0x66>
          hi2c->XferSize = hi2c->XferCount;
 80097ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097d0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80097d2:	b292      	uxth	r2, r2
 80097d4:	8522      	strh	r2, [r4, #40]	; 0x28
 80097d6:	e7c7      	b.n	8009768 <HAL_I2C_Master_Receive+0xb4>
    return HAL_BUSY;
 80097d8:	2002      	movs	r0, #2
 80097da:	e7d0      	b.n	800977e <HAL_I2C_Master_Receive+0xca>
 80097dc:	80002400 	.word	0x80002400

080097e0 <HAL_I2C_Mem_Write>:
{
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80097ea:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80097ec:	2b20      	cmp	r3, #32
{
 80097ee:	4604      	mov	r4, r0
 80097f0:	460f      	mov	r7, r1
 80097f2:	9203      	str	r2, [sp, #12]
 80097f4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80097f8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80097fc:	f040 80a3 	bne.w	8009946 <HAL_I2C_Mem_Write+0x166>
    if ((pData == NULL) || (Size == 0U))
 8009800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009802:	b91b      	cbnz	r3, 800980c <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8009804:	2001      	movs	r0, #1
}
 8009806:	b005      	add	sp, #20
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 800980c:	f1ba 0f00 	cmp.w	sl, #0
 8009810:	d0f8      	beq.n	8009804 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8009812:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009816:	2b01      	cmp	r3, #1
 8009818:	f000 8095 	beq.w	8009946 <HAL_I2C_Mem_Write+0x166>
 800981c:	2501      	movs	r5, #1
 800981e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009822:	f7ff f917 	bl	8008a54 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009826:	2319      	movs	r3, #25
 8009828:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800982a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800982c:	462a      	mov	r2, r5
 800982e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009832:	4620      	mov	r0, r4
 8009834:	f7ff fcdc 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 8009838:	4680      	mov	r8, r0
 800983a:	b9c8      	cbnz	r0, 8009870 <HAL_I2C_Mem_Write+0x90>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800983c:	2321      	movs	r3, #33	; 0x21
 800983e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800984a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800984c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800984e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8009850:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009854:	e9cd 9600 	strd	r9, r6, [sp]
 8009858:	465b      	mov	r3, fp
 800985a:	9a03      	ldr	r2, [sp, #12]
 800985c:	4639      	mov	r1, r7
 800985e:	4620      	mov	r0, r4
 8009860:	f7ff fd94 	bl	800938c <I2C_RequestMemoryWrite>
 8009864:	b130      	cbz	r0, 8009874 <HAL_I2C_Mem_Write+0x94>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009866:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009868:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800986c:	2b04      	cmp	r3, #4
 800986e:	d0c9      	beq.n	8009804 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 8009870:	2003      	movs	r0, #3
 8009872:	e7c8      	b.n	8009806 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009876:	2bff      	cmp	r3, #255	; 0xff
 8009878:	d910      	bls.n	800989c <HAL_I2C_Mem_Write+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800987a:	22ff      	movs	r2, #255	; 0xff
 800987c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800987e:	9000      	str	r0, [sp, #0]
 8009880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009884:	4639      	mov	r1, r7
 8009886:	4620      	mov	r0, r4
 8009888:	f7ff fc9e 	bl	80091c8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800988c:	4632      	mov	r2, r6
 800988e:	4649      	mov	r1, r9
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff fd52 	bl	800933a <I2C_WaitOnTXISFlagUntilTimeout>
 8009896:	b148      	cbz	r0, 80098ac <HAL_I2C_Mem_Write+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009898:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800989a:	e7e7      	b.n	800986c <HAL_I2C_Mem_Write+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 800989c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800989e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80098a0:	b292      	uxth	r2, r2
 80098a2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	e7eb      	b.n	8009884 <HAL_I2C_Mem_Write+0xa4>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80098ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	6262      	str	r2, [r4, #36]	; 0x24
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80098b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80098ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80098bc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80098be:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80098c0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80098c2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80098c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80098c6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80098c8:	b9b2      	cbnz	r2, 80098f8 <HAL_I2C_Mem_Write+0x118>
 80098ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	b19b      	cbz	r3, 80098f8 <HAL_I2C_Mem_Write+0x118>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80098d0:	9600      	str	r6, [sp, #0]
 80098d2:	464b      	mov	r3, r9
 80098d4:	2180      	movs	r1, #128	; 0x80
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7ff fc8a 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d1c7      	bne.n	8009870 <HAL_I2C_Mem_Write+0x90>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098e2:	2bff      	cmp	r3, #255	; 0xff
 80098e4:	d927      	bls.n	8009936 <HAL_I2C_Mem_Write+0x156>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098e6:	22ff      	movs	r2, #255	; 0xff
 80098e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098ea:	9000      	str	r0, [sp, #0]
 80098ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098f0:	4639      	mov	r1, r7
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff fc68 	bl	80091c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80098f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1c5      	bne.n	800988c <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009900:	4632      	mov	r2, r6
 8009902:	4649      	mov	r1, r9
 8009904:	4620      	mov	r0, r4
 8009906:	f7ff fdab 	bl	8009460 <I2C_WaitOnSTOPFlagUntilTimeout>
 800990a:	2800      	cmp	r0, #0
 800990c:	d1c4      	bne.n	8009898 <HAL_I2C_Mem_Write+0xb8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	2120      	movs	r1, #32
 8009912:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800991a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800991e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009922:	f022 0201 	bic.w	r2, r2, #1
 8009926:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009928:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800992c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009930:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009934:	e767      	b.n	8009806 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8009936:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009938:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800993a:	b292      	uxth	r2, r2
 800993c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800993e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	e7d4      	b.n	80098f0 <HAL_I2C_Mem_Write+0x110>
    return HAL_BUSY;
 8009946:	2002      	movs	r0, #2
 8009948:	e75d      	b.n	8009806 <HAL_I2C_Mem_Write+0x26>
	...

0800994c <HAL_I2C_Mem_Read>:
{
 800994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009950:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009952:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009956:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009958:	2b20      	cmp	r3, #32
{
 800995a:	4604      	mov	r4, r0
 800995c:	460f      	mov	r7, r1
 800995e:	9203      	str	r2, [sp, #12]
 8009960:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8009964:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009968:	f040 80a6 	bne.w	8009ab8 <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 800996c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800996e:	b91b      	cbnz	r3, 8009978 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 8009970:	2001      	movs	r0, #1
}
 8009972:	b005      	add	sp, #20
 8009974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8009978:	f1ba 0f00 	cmp.w	sl, #0
 800997c:	d0f8      	beq.n	8009970 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 800997e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009982:	2b01      	cmp	r3, #1
 8009984:	f000 8098 	beq.w	8009ab8 <HAL_I2C_Mem_Read+0x16c>
 8009988:	2501      	movs	r5, #1
 800998a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800998e:	f7ff f861 	bl	8008a54 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009992:	2319      	movs	r3, #25
 8009994:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009996:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009998:	462a      	mov	r2, r5
 800999a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff fc26 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 80099a4:	4680      	mov	r8, r0
 80099a6:	b9c8      	cbnz	r0, 80099dc <HAL_I2C_Mem_Read+0x90>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099a8:	2322      	movs	r3, #34	; 0x22
 80099aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099ae:	2340      	movs	r3, #64	; 0x40
 80099b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80099b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099b6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80099b8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80099ba:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80099bc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099c0:	e9cd 9600 	strd	r9, r6, [sp]
 80099c4:	465b      	mov	r3, fp
 80099c6:	9a03      	ldr	r2, [sp, #12]
 80099c8:	4639      	mov	r1, r7
 80099ca:	4620      	mov	r0, r4
 80099cc:	f7ff fd14 	bl	80093f8 <I2C_RequestMemoryRead>
 80099d0:	b130      	cbz	r0, 80099e0 <HAL_I2C_Mem_Read+0x94>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80099d4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099d8:	2b04      	cmp	r3, #4
 80099da:	d0c9      	beq.n	8009970 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 80099dc:	2003      	movs	r0, #3
 80099de:	e7c8      	b.n	8009972 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099e2:	2bff      	cmp	r3, #255	; 0xff
 80099e4:	4b35      	ldr	r3, [pc, #212]	; (8009abc <HAL_I2C_Mem_Read+0x170>)
 80099e6:	d943      	bls.n	8009a70 <HAL_I2C_Mem_Read+0x124>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099e8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80099ea:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099ec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80099ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80099f2:	4639      	mov	r1, r7
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7ff fbe7 	bl	80091c8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80099fa:	9600      	str	r6, [sp, #0]
 80099fc:	464b      	mov	r3, r9
 80099fe:	2200      	movs	r2, #0
 8009a00:	2104      	movs	r1, #4
 8009a02:	4620      	mov	r0, r4
 8009a04:	f7ff fbf4 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1e7      	bne.n	80099dc <HAL_I2C_Mem_Read+0x90>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a12:	1c59      	adds	r1, r3, #1
 8009a14:	6261      	str	r1, [r4, #36]	; 0x24
 8009a16:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8009a18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009a1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009a1c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009a1e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009a20:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009a22:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009a24:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009a26:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009a28:	b9b2      	cbnz	r2, 8009a58 <HAL_I2C_Mem_Read+0x10c>
 8009a2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	b19b      	cbz	r3, 8009a58 <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a30:	9600      	str	r6, [sp, #0]
 8009a32:	464b      	mov	r3, r9
 8009a34:	2180      	movs	r1, #128	; 0x80
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff fbda 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d1cd      	bne.n	80099dc <HAL_I2C_Mem_Read+0x90>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a42:	2bff      	cmp	r3, #255	; 0xff
 8009a44:	d91c      	bls.n	8009a80 <HAL_I2C_Mem_Read+0x134>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a46:	22ff      	movs	r2, #255	; 0xff
 8009a48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009a4a:	9000      	str	r0, [sp, #0]
 8009a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a50:	4639      	mov	r1, r7
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7ff fbb8 	bl	80091c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8009a58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1cc      	bne.n	80099fa <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a60:	4632      	mov	r2, r6
 8009a62:	4649      	mov	r1, r9
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff fcfb 	bl	8009460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a6a:	b188      	cbz	r0, 8009a90 <HAL_I2C_Mem_Read+0x144>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009a6e:	e7b3      	b.n	80099d8 <HAL_I2C_Mem_Read+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8009a70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009a72:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009a74:	b292      	uxth	r2, r2
 8009a76:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a7c:	b2d2      	uxtb	r2, r2
 8009a7e:	e7b8      	b.n	80099f2 <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8009a80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a82:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009a84:	b292      	uxth	r2, r2
 8009a86:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	e7df      	b.n	8009a50 <HAL_I2C_Mem_Read+0x104>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	2120      	movs	r1, #32
 8009a94:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009a9c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009aa0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009aaa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009aae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ab2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009ab6:	e75c      	b.n	8009972 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8009ab8:	2002      	movs	r0, #2
 8009aba:	e75a      	b.n	8009972 <HAL_I2C_Mem_Read+0x26>
 8009abc:	80002400 	.word	0x80002400

08009ac0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ac0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	2a20      	cmp	r2, #32
{
 8009ac8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aca:	d11d      	bne.n	8009b08 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009acc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d019      	beq.n	8009b08 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ad4:	2324      	movs	r3, #36	; 0x24
 8009ad6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ada:	6803      	ldr	r3, [r0, #0]
 8009adc:	681c      	ldr	r4, [r3, #0]
 8009ade:	f024 0401 	bic.w	r4, r4, #1
 8009ae2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ae4:	681c      	ldr	r4, [r3, #0]
 8009ae6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8009aea:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009aec:	681c      	ldr	r4, [r3, #0]
 8009aee:	4321      	orrs	r1, r4
 8009af0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	f041 0101 	orr.w	r1, r1, #1
 8009af8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009afa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009afc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009b00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009b04:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009b06:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009b08:	2002      	movs	r0, #2
 8009b0a:	e7fc      	b.n	8009b06 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009b0c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009b0c:	4b02      	ldr	r3, [pc, #8]	; (8009b18 <HAL_PWREx_GetVoltageRange+0xc>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8009b10:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	40007000 	.word	0x40007000

08009b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009b1c:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b1e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b24:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b28:	d11a      	bne.n	8009b60 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b2a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009b2e:	d013      	beq.n	8009b58 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b30:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009b32:	4912      	ldr	r1, [pc, #72]	; (8009b7c <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b34:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8009b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b3c:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009b3e:	4a10      	ldr	r2, [pc, #64]	; (8009b80 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8009b40:	6812      	ldr	r2, [r2, #0]
 8009b42:	fbb2 f1f1 	udiv	r1, r2, r1
 8009b46:	2232      	movs	r2, #50	; 0x32
 8009b48:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8009b4a:	b112      	cbz	r2, 8009b52 <HAL_PWREx_ControlVoltageScaling+0x36>
 8009b4c:	6959      	ldr	r1, [r3, #20]
 8009b4e:	0549      	lsls	r1, r1, #21
 8009b50:	d404      	bmi.n	8009b5c <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	055b      	lsls	r3, r3, #21
 8009b56:	d40d      	bmi.n	8009b74 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8009b58:	2000      	movs	r0, #0
 8009b5a:	4770      	bx	lr
        wait_loop_index--;
 8009b5c:	3a01      	subs	r2, #1
 8009b5e:	e7f4      	b.n	8009b4a <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009b60:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009b64:	bf1f      	itttt	ne
 8009b66:	681a      	ldrne	r2, [r3, #0]
 8009b68:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8009b6c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8009b70:	601a      	strne	r2, [r3, #0]
 8009b72:	e7f1      	b.n	8009b58 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8009b74:	2003      	movs	r0, #3
}  
 8009b76:	4770      	bx	lr
 8009b78:	40007000 	.word	0x40007000
 8009b7c:	000f4240 	.word	0x000f4240
 8009b80:	20000590 	.word	0x20000590

08009b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009b86:	4d1e      	ldr	r5, [pc, #120]	; (8009c00 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009b88:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009b8a:	00da      	lsls	r2, r3, #3
{
 8009b8c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009b8e:	d518      	bpl.n	8009bc2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009b90:	f7ff ffbc 	bl	8009b0c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009b98:	d123      	bne.n	8009be2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009b9a:	2c80      	cmp	r4, #128	; 0x80
 8009b9c:	d929      	bls.n	8009bf2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009b9e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ba0:	bf8c      	ite	hi
 8009ba2:	2002      	movhi	r0, #2
 8009ba4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009ba6:	4a17      	ldr	r2, [pc, #92]	; (8009c04 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8009ba8:	6813      	ldr	r3, [r2, #0]
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	4303      	orrs	r3, r0
 8009bb0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8009bb2:	6813      	ldr	r3, [r2, #0]
 8009bb4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8009bb8:	1a18      	subs	r0, r3, r0
 8009bba:	bf18      	it	ne
 8009bbc:	2001      	movne	r0, #1
 8009bbe:	b003      	add	sp, #12
 8009bc0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8009bc2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bc8:	65ab      	str	r3, [r5, #88]	; 0x58
 8009bca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bd0:	9301      	str	r3, [sp, #4]
 8009bd2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8009bd4:	f7ff ff9a 	bl	8009b0c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009bd8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bde:	65ab      	str	r3, [r5, #88]	; 0x58
 8009be0:	e7d8      	b.n	8009b94 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8009be2:	2c80      	cmp	r4, #128	; 0x80
 8009be4:	d807      	bhi.n	8009bf6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8009be6:	d008      	beq.n	8009bfa <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8009be8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8009bec:	4258      	negs	r0, r3
 8009bee:	4158      	adcs	r0, r3
 8009bf0:	e7d9      	b.n	8009ba6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	e7d7      	b.n	8009ba6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8009bf6:	2003      	movs	r0, #3
 8009bf8:	e7d5      	b.n	8009ba6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8009bfa:	2002      	movs	r0, #2
 8009bfc:	e7d3      	b.n	8009ba6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8009bfe:	bf00      	nop
 8009c00:	40021000 	.word	0x40021000
 8009c04:	40022000 	.word	0x40022000

08009c08 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009c08:	4b2f      	ldr	r3, [pc, #188]	; (8009cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	f012 0f0c 	tst.w	r2, #12
{
 8009c10:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009c12:	d009      	beq.n	8009c28 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009c1a:	2a0c      	cmp	r2, #12
 8009c1c:	d12d      	bne.n	8009c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	f002 0203 	and.w	r2, r2, #3
 8009c24:	2a01      	cmp	r2, #1
 8009c26:	d128      	bne.n	8009c7a <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009c28:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8009c2a:	4928      	ldr	r1, [pc, #160]	; (8009ccc <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009c2c:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009c2e:	bf55      	itete	pl
 8009c30:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009c34:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009c36:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009c3a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8009c3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8009c42:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8009c44:	f011 0f0c 	tst.w	r1, #12
 8009c48:	bf0c      	ite	eq
 8009c4a:	4610      	moveq	r0, r2
 8009c4c:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009c4e:	6899      	ldr	r1, [r3, #8]
 8009c50:	f001 010c 	and.w	r1, r1, #12
 8009c54:	290c      	cmp	r1, #12
 8009c56:	d130      	bne.n	8009cba <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c58:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c5a:	68d8      	ldr	r0, [r3, #12]
 8009c5c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8009c60:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c62:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8009c66:	2802      	cmp	r0, #2
 8009c68:	d019      	beq.n	8009c9e <HAL_RCC_GetSysClockFreq+0x96>
 8009c6a:	2803      	cmp	r0, #3
 8009c6c:	d026      	beq.n	8009cbc <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c6e:	fbb2 f2f1 	udiv	r2, r2, r1
 8009c72:	68d8      	ldr	r0, [r3, #12]
 8009c74:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8009c78:	e017      	b.n	8009caa <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	f002 020c 	and.w	r2, r2, #12
 8009c80:	2a04      	cmp	r2, #4
 8009c82:	d007      	beq.n	8009c94 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	f002 020c 	and.w	r2, r2, #12
 8009c8a:	2a08      	cmp	r2, #8
 8009c8c:	d104      	bne.n	8009c98 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8009c8e:	4810      	ldr	r0, [pc, #64]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009c90:	2200      	movs	r2, #0
 8009c92:	e7dc      	b.n	8009c4e <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8009c94:	480f      	ldr	r0, [pc, #60]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009c96:	e7fb      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8009c98:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	e7d7      	b.n	8009c4e <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c9e:	68da      	ldr	r2, [r3, #12]
 8009ca0:	480c      	ldr	r0, [pc, #48]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009ca2:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ca6:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8009cb0:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cb2:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009cb4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8009cb6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8009cba:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	4804      	ldr	r0, [pc, #16]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009cc0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8009cc4:	e7ef      	b.n	8009ca6 <HAL_RCC_GetSysClockFreq+0x9e>
 8009cc6:	bf00      	nop
 8009cc8:	40021000 	.word	0x40021000
 8009ccc:	08027f9c 	.word	0x08027f9c
 8009cd0:	007a1200 	.word	0x007a1200
 8009cd4:	00f42400 	.word	0x00f42400

08009cd8 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009cd8:	6803      	ldr	r3, [r0, #0]
{
 8009cda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009cde:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009ce0:	06d8      	lsls	r0, r3, #27
 8009ce2:	d53b      	bpl.n	8009d5c <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8009ce4:	4ca9      	ldr	r4, [pc, #676]	; (8009f8c <HAL_RCC_OscConfig+0x2b4>)
 8009ce6:	68a3      	ldr	r3, [r4, #8]
 8009ce8:	f013 0f0c 	tst.w	r3, #12
 8009cec:	d160      	bne.n	8009db0 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	0799      	lsls	r1, r3, #30
 8009cf2:	d505      	bpl.n	8009d00 <HAL_RCC_OscConfig+0x28>
 8009cf4:	69ab      	ldr	r3, [r5, #24]
 8009cf6:	b91b      	cbnz	r3, 8009d00 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8009cf8:	2001      	movs	r0, #1
}
 8009cfa:	b002      	add	sp, #8
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	6a28      	ldr	r0, [r5, #32]
 8009d04:	071a      	lsls	r2, r3, #28
 8009d06:	bf56      	itet	pl
 8009d08:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8009d0c:	6823      	ldrmi	r3, [r4, #0]
 8009d0e:	091b      	lsrpl	r3, r3, #4
 8009d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d14:	4298      	cmp	r0, r3
 8009d16:	d936      	bls.n	8009d86 <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d18:	f7ff ff34 	bl	8009b84 <RCC_SetFlashLatencyFromMSIRange>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d1eb      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	f043 0308 	orr.w	r3, r3, #8
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	6a2a      	ldr	r2, [r5, #32]
 8009d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d30:	4313      	orrs	r3, r2
 8009d32:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d34:	6863      	ldr	r3, [r4, #4]
 8009d36:	69ea      	ldr	r2, [r5, #28]
 8009d38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d40:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009d42:	f7ff ff61 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	4a91      	ldr	r2, [pc, #580]	; (8009f90 <HAL_RCC_OscConfig+0x2b8>)
 8009d4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009d4e:	5cd3      	ldrb	r3, [r2, r3]
 8009d50:	40d8      	lsrs	r0, r3
 8009d52:	4b90      	ldr	r3, [pc, #576]	; (8009f94 <HAL_RCC_OscConfig+0x2bc>)
 8009d54:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8009d56:	200f      	movs	r0, #15
 8009d58:	f7fe fe54 	bl	8008a04 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	07de      	lsls	r6, r3, #31
 8009d60:	d45b      	bmi.n	8009e1a <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	079c      	lsls	r4, r3, #30
 8009d66:	f100 80a3 	bmi.w	8009eb0 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	0719      	lsls	r1, r3, #28
 8009d6e:	f100 80e1 	bmi.w	8009f34 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d72:	682b      	ldr	r3, [r5, #0]
 8009d74:	075a      	lsls	r2, r3, #29
 8009d76:	f100 810f 	bmi.w	8009f98 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009d7a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009d7c:	2a00      	cmp	r2, #0
 8009d7e:	f040 8176 	bne.w	800a06e <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8009d82:	2000      	movs	r0, #0
 8009d84:	e7b9      	b.n	8009cfa <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	f043 0308 	orr.w	r3, r3, #8
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d94:	4303      	orrs	r3, r0
 8009d96:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d98:	6863      	ldr	r3, [r4, #4]
 8009d9a:	69ea      	ldr	r2, [r5, #28]
 8009d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009da0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009da4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009da6:	f7ff feed 	bl	8009b84 <RCC_SetFlashLatencyFromMSIRange>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0c9      	beq.n	8009d42 <HAL_RCC_OscConfig+0x6a>
 8009dae:	e7a3      	b.n	8009cf8 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009db0:	69ab      	ldr	r3, [r5, #24]
 8009db2:	b313      	cbz	r3, 8009dfa <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	f043 0301 	orr.w	r3, r3, #1
 8009dba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009dbc:	f7fe fe4a 	bl	8008a54 <HAL_GetTick>
 8009dc0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	079b      	lsls	r3, r3, #30
 8009dc6:	d511      	bpl.n	8009dec <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	f043 0308 	orr.w	r3, r3, #8
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	6a2a      	ldr	r2, [r5, #32]
 8009dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ddc:	6863      	ldr	r3, [r4, #4]
 8009dde:	69ea      	ldr	r2, [r5, #28]
 8009de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009de4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009de8:	6063      	str	r3, [r4, #4]
 8009dea:	e7b7      	b.n	8009d5c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009dec:	f7fe fe32 	bl	8008a54 <HAL_GetTick>
 8009df0:	1b80      	subs	r0, r0, r6
 8009df2:	2802      	cmp	r0, #2
 8009df4:	d9e5      	bls.n	8009dc2 <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8009df6:	2003      	movs	r0, #3
 8009df8:	e77f      	b.n	8009cfa <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009e02:	f7fe fe27 	bl	8008a54 <HAL_GetTick>
 8009e06:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	079f      	lsls	r7, r3, #30
 8009e0c:	d5a6      	bpl.n	8009d5c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e0e:	f7fe fe21 	bl	8008a54 <HAL_GetTick>
 8009e12:	1b80      	subs	r0, r0, r6
 8009e14:	2802      	cmp	r0, #2
 8009e16:	d9f7      	bls.n	8009e08 <HAL_RCC_OscConfig+0x130>
 8009e18:	e7ed      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8009e1a:	4c5c      	ldr	r4, [pc, #368]	; (8009f8c <HAL_RCC_OscConfig+0x2b4>)
 8009e1c:	68a3      	ldr	r3, [r4, #8]
 8009e1e:	f003 030c 	and.w	r3, r3, #12
 8009e22:	2b08      	cmp	r3, #8
 8009e24:	d009      	beq.n	8009e3a <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009e26:	68a3      	ldr	r3, [r4, #8]
 8009e28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8009e2c:	2b0c      	cmp	r3, #12
 8009e2e:	d10b      	bne.n	8009e48 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009e30:	68e3      	ldr	r3, [r4, #12]
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d106      	bne.n	8009e48 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	0398      	lsls	r0, r3, #14
 8009e3e:	d590      	bpl.n	8009d62 <HAL_RCC_OscConfig+0x8a>
 8009e40:	686b      	ldr	r3, [r5, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d18d      	bne.n	8009d62 <HAL_RCC_OscConfig+0x8a>
 8009e46:	e757      	b.n	8009cf8 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e48:	686b      	ldr	r3, [r5, #4]
 8009e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4e:	d110      	bne.n	8009e72 <HAL_RCC_OscConfig+0x19a>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009e58:	f7fe fdfc 	bl	8008a54 <HAL_GetTick>
 8009e5c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	0399      	lsls	r1, r3, #14
 8009e62:	f53f af7e 	bmi.w	8009d62 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e66:	f7fe fdf5 	bl	8008a54 <HAL_GetTick>
 8009e6a:	1b80      	subs	r0, r0, r6
 8009e6c:	2864      	cmp	r0, #100	; 0x64
 8009e6e:	d9f6      	bls.n	8009e5e <HAL_RCC_OscConfig+0x186>
 8009e70:	e7c1      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e76:	d104      	bne.n	8009e82 <HAL_RCC_OscConfig+0x1aa>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	e7e6      	b.n	8009e50 <HAL_RCC_OscConfig+0x178>
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009e88:	6022      	str	r2, [r4, #0]
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e90:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e0      	bne.n	8009e58 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8009e96:	f7fe fddd 	bl	8008a54 <HAL_GetTick>
 8009e9a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	039a      	lsls	r2, r3, #14
 8009ea0:	f57f af5f 	bpl.w	8009d62 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ea4:	f7fe fdd6 	bl	8008a54 <HAL_GetTick>
 8009ea8:	1b80      	subs	r0, r0, r6
 8009eaa:	2864      	cmp	r0, #100	; 0x64
 8009eac:	d9f6      	bls.n	8009e9c <HAL_RCC_OscConfig+0x1c4>
 8009eae:	e7a2      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8009eb0:	4c36      	ldr	r4, [pc, #216]	; (8009f8c <HAL_RCC_OscConfig+0x2b4>)
 8009eb2:	68a3      	ldr	r3, [r4, #8]
 8009eb4:	f003 030c 	and.w	r3, r3, #12
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d009      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8009ec2:	2b0c      	cmp	r3, #12
 8009ec4:	d113      	bne.n	8009eee <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009ec6:	68e3      	ldr	r3, [r4, #12]
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d10e      	bne.n	8009eee <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	055b      	lsls	r3, r3, #21
 8009ed4:	d503      	bpl.n	8009ede <HAL_RCC_OscConfig+0x206>
 8009ed6:	68eb      	ldr	r3, [r5, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f43f af0d 	beq.w	8009cf8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ede:	6863      	ldr	r3, [r4, #4]
 8009ee0:	692a      	ldr	r2, [r5, #16]
 8009ee2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8009ee6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009eea:	6063      	str	r3, [r4, #4]
 8009eec:	e73d      	b.n	8009d6a <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009eee:	68eb      	ldr	r3, [r5, #12]
 8009ef0:	b17b      	cbz	r3, 8009f12 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ef8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009efa:	f7fe fdab 	bl	8008a54 <HAL_GetTick>
 8009efe:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	055f      	lsls	r7, r3, #21
 8009f04:	d4eb      	bmi.n	8009ede <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f06:	f7fe fda5 	bl	8008a54 <HAL_GetTick>
 8009f0a:	1b80      	subs	r0, r0, r6
 8009f0c:	2802      	cmp	r0, #2
 8009f0e:	d9f7      	bls.n	8009f00 <HAL_RCC_OscConfig+0x228>
 8009f10:	e771      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009f1a:	f7fe fd9b 	bl	8008a54 <HAL_GetTick>
 8009f1e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	0558      	lsls	r0, r3, #21
 8009f24:	f57f af21 	bpl.w	8009d6a <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f28:	f7fe fd94 	bl	8008a54 <HAL_GetTick>
 8009f2c:	1b80      	subs	r0, r0, r6
 8009f2e:	2802      	cmp	r0, #2
 8009f30:	d9f6      	bls.n	8009f20 <HAL_RCC_OscConfig+0x248>
 8009f32:	e760      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f34:	696b      	ldr	r3, [r5, #20]
 8009f36:	4c15      	ldr	r4, [pc, #84]	; (8009f8c <HAL_RCC_OscConfig+0x2b4>)
 8009f38:	b19b      	cbz	r3, 8009f62 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8009f3a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009f3e:	f043 0301 	orr.w	r3, r3, #1
 8009f42:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009f46:	f7fe fd85 	bl	8008a54 <HAL_GetTick>
 8009f4a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8009f4c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009f50:	079b      	lsls	r3, r3, #30
 8009f52:	f53f af0e 	bmi.w	8009d72 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f56:	f7fe fd7d 	bl	8008a54 <HAL_GetTick>
 8009f5a:	1b80      	subs	r0, r0, r6
 8009f5c:	2802      	cmp	r0, #2
 8009f5e:	d9f5      	bls.n	8009f4c <HAL_RCC_OscConfig+0x274>
 8009f60:	e749      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8009f62:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009f66:	f023 0301 	bic.w	r3, r3, #1
 8009f6a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009f6e:	f7fe fd71 	bl	8008a54 <HAL_GetTick>
 8009f72:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8009f74:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009f78:	079f      	lsls	r7, r3, #30
 8009f7a:	f57f aefa 	bpl.w	8009d72 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f7e:	f7fe fd69 	bl	8008a54 <HAL_GetTick>
 8009f82:	1b80      	subs	r0, r0, r6
 8009f84:	2802      	cmp	r0, #2
 8009f86:	d9f5      	bls.n	8009f74 <HAL_RCC_OscConfig+0x29c>
 8009f88:	e735      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
 8009f8a:	bf00      	nop
 8009f8c:	40021000 	.word	0x40021000
 8009f90:	08027fcc 	.word	0x08027fcc
 8009f94:	20000590 	.word	0x20000590
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009f98:	4c66      	ldr	r4, [pc, #408]	; (800a134 <HAL_RCC_OscConfig+0x45c>)
 8009f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f9c:	00de      	lsls	r6, r3, #3
 8009f9e:	d427      	bmi.n	8009ff0 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fa6:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009fb2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009fb4:	4e60      	ldr	r6, [pc, #384]	; (800a138 <HAL_RCC_OscConfig+0x460>)
 8009fb6:	6833      	ldr	r3, [r6, #0]
 8009fb8:	05d8      	lsls	r0, r3, #23
 8009fba:	d51b      	bpl.n	8009ff4 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fbc:	68ab      	ldr	r3, [r5, #8]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d129      	bne.n	800a016 <HAL_RCC_OscConfig+0x33e>
 8009fc2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009fc6:	f043 0301 	orr.w	r3, r3, #1
 8009fca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8009fce:	f7fe fd41 	bl	8008a54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fd2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009fd6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8009fd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009fdc:	079a      	lsls	r2, r3, #30
 8009fde:	d540      	bpl.n	800a062 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8009fe0:	2f00      	cmp	r7, #0
 8009fe2:	f43f aeca 	beq.w	8009d7a <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fec:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fee:	e6c4      	b.n	8009d7a <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8009ff0:	2700      	movs	r7, #0
 8009ff2:	e7df      	b.n	8009fb4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ff4:	6833      	ldr	r3, [r6, #0]
 8009ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009ffc:	f7fe fd2a 	bl	8008a54 <HAL_GetTick>
 800a000:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a002:	6833      	ldr	r3, [r6, #0]
 800a004:	05d9      	lsls	r1, r3, #23
 800a006:	d4d9      	bmi.n	8009fbc <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a008:	f7fe fd24 	bl	8008a54 <HAL_GetTick>
 800a00c:	eba0 0008 	sub.w	r0, r0, r8
 800a010:	2802      	cmp	r0, #2
 800a012:	d9f6      	bls.n	800a002 <HAL_RCC_OscConfig+0x32a>
 800a014:	e6ef      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a016:	2b05      	cmp	r3, #5
 800a018:	d106      	bne.n	800a028 <HAL_RCC_OscConfig+0x350>
 800a01a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a01e:	f043 0304 	orr.w	r3, r3, #4
 800a022:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800a026:	e7cc      	b.n	8009fc2 <HAL_RCC_OscConfig+0x2ea>
 800a028:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800a034:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a038:	f022 0204 	bic.w	r2, r2, #4
 800a03c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1c4      	bne.n	8009fce <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800a044:	f7fe fd06 	bl	8008a54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a048:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a04c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800a04e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a052:	079b      	lsls	r3, r3, #30
 800a054:	d5c4      	bpl.n	8009fe0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a056:	f7fe fcfd 	bl	8008a54 <HAL_GetTick>
 800a05a:	1b80      	subs	r0, r0, r6
 800a05c:	4540      	cmp	r0, r8
 800a05e:	d9f6      	bls.n	800a04e <HAL_RCC_OscConfig+0x376>
 800a060:	e6c9      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a062:	f7fe fcf7 	bl	8008a54 <HAL_GetTick>
 800a066:	1b80      	subs	r0, r0, r6
 800a068:	4540      	cmp	r0, r8
 800a06a:	d9b5      	bls.n	8009fd8 <HAL_RCC_OscConfig+0x300>
 800a06c:	e6c3      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a06e:	4c31      	ldr	r4, [pc, #196]	; (800a134 <HAL_RCC_OscConfig+0x45c>)
 800a070:	68a3      	ldr	r3, [r4, #8]
 800a072:	f003 030c 	and.w	r3, r3, #12
 800a076:	2b0c      	cmp	r3, #12
 800a078:	f43f ae3e 	beq.w	8009cf8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 800a07c:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a07e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800a080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a084:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a086:	d137      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 800a088:	f7fe fce4 	bl	8008a54 <HAL_GetTick>
 800a08c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	019f      	lsls	r7, r3, #6
 800a092:	d42b      	bmi.n	800a0ec <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a094:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a096:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a09c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a09e:	3a01      	subs	r2, #1
 800a0a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a0a4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a0a6:	0912      	lsrs	r2, r2, #4
 800a0a8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800a0ac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800a0ae:	0852      	lsrs	r2, r2, #1
 800a0b0:	3a01      	subs	r2, #1
 800a0b2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a0b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a0b8:	0852      	lsrs	r2, r2, #1
 800a0ba:	3a01      	subs	r2, #1
 800a0bc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a0c0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0c8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a0ca:	68e3      	ldr	r3, [r4, #12]
 800a0cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0d0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a0d2:	f7fe fcbf 	bl	8008a54 <HAL_GetTick>
 800a0d6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	0198      	lsls	r0, r3, #6
 800a0dc:	f53f ae51 	bmi.w	8009d82 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e0:	f7fe fcb8 	bl	8008a54 <HAL_GetTick>
 800a0e4:	1b40      	subs	r0, r0, r5
 800a0e6:	2802      	cmp	r0, #2
 800a0e8:	d9f6      	bls.n	800a0d8 <HAL_RCC_OscConfig+0x400>
 800a0ea:	e684      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ec:	f7fe fcb2 	bl	8008a54 <HAL_GetTick>
 800a0f0:	1b80      	subs	r0, r0, r6
 800a0f2:	2802      	cmp	r0, #2
 800a0f4:	d9cb      	bls.n	800a08e <HAL_RCC_OscConfig+0x3b6>
 800a0f6:	e67e      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	0119      	lsls	r1, r3, #4
 800a0fc:	d406      	bmi.n	800a10c <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a0fe:	6823      	ldr	r3, [r4, #0]
           &&
 800a100:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a102:	bf5e      	ittt	pl
 800a104:	68e3      	ldrpl	r3, [r4, #12]
 800a106:	f023 0303 	bicpl.w	r3, r3, #3
 800a10a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a10c:	68e3      	ldr	r3, [r4, #12]
 800a10e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a116:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a118:	f7fe fc9c 	bl	8008a54 <HAL_GetTick>
 800a11c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	019b      	lsls	r3, r3, #6
 800a122:	f57f ae2e 	bpl.w	8009d82 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a126:	f7fe fc95 	bl	8008a54 <HAL_GetTick>
 800a12a:	1b40      	subs	r0, r0, r5
 800a12c:	2802      	cmp	r0, #2
 800a12e:	d9f6      	bls.n	800a11e <HAL_RCC_OscConfig+0x446>
 800a130:	e661      	b.n	8009df6 <HAL_RCC_OscConfig+0x11e>
 800a132:	bf00      	nop
 800a134:	40021000 	.word	0x40021000
 800a138:	40007000 	.word	0x40007000

0800a13c <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a13c:	4a55      	ldr	r2, [pc, #340]	; (800a294 <HAL_RCC_ClockConfig+0x158>)
 800a13e:	6813      	ldr	r3, [r2, #0]
 800a140:	f003 0307 	and.w	r3, r3, #7
 800a144:	428b      	cmp	r3, r1
{
 800a146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14a:	4605      	mov	r5, r0
 800a14c:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a14e:	d32a      	bcc.n	800a1a6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	07d9      	lsls	r1, r3, #31
 800a154:	d434      	bmi.n	800a1c0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a156:	6829      	ldr	r1, [r5, #0]
 800a158:	078a      	lsls	r2, r1, #30
 800a15a:	f100 8081 	bmi.w	800a260 <HAL_RCC_ClockConfig+0x124>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a15e:	4a4d      	ldr	r2, [pc, #308]	; (800a294 <HAL_RCC_ClockConfig+0x158>)
 800a160:	6813      	ldr	r3, [r2, #0]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	42b3      	cmp	r3, r6
 800a168:	f200 8082 	bhi.w	800a270 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a16c:	f011 0f04 	tst.w	r1, #4
 800a170:	4c49      	ldr	r4, [pc, #292]	; (800a298 <HAL_RCC_ClockConfig+0x15c>)
 800a172:	f040 8088 	bne.w	800a286 <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a176:	070b      	lsls	r3, r1, #28
 800a178:	d506      	bpl.n	800a188 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a17a:	68a3      	ldr	r3, [r4, #8]
 800a17c:	692a      	ldr	r2, [r5, #16]
 800a17e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a182:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a186:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a188:	f7ff fd3e 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800a18c:	68a3      	ldr	r3, [r4, #8]
 800a18e:	4a43      	ldr	r2, [pc, #268]	; (800a29c <HAL_RCC_ClockConfig+0x160>)
 800a190:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a194:	5cd3      	ldrb	r3, [r2, r3]
 800a196:	40d8      	lsrs	r0, r3
 800a198:	4b41      	ldr	r3, [pc, #260]	; (800a2a0 <HAL_RCC_ClockConfig+0x164>)
 800a19a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800a19c:	200f      	movs	r0, #15
 800a19e:	f7fe fc31 	bl	8008a04 <HAL_InitTick>
  return HAL_OK;
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	e00a      	b.n	800a1bc <HAL_RCC_ClockConfig+0x80>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1a6:	6813      	ldr	r3, [r2, #0]
 800a1a8:	f023 0307 	bic.w	r3, r3, #7
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a1b0:	6813      	ldr	r3, [r2, #0]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	428b      	cmp	r3, r1
 800a1b8:	d0ca      	beq.n	800a150 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800a1ba:	2001      	movs	r0, #1
}
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1c0:	686a      	ldr	r2, [r5, #4]
 800a1c2:	4c35      	ldr	r4, [pc, #212]	; (800a298 <HAL_RCC_ClockConfig+0x15c>)
 800a1c4:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a1c6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1c8:	d11b      	bne.n	800a202 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a1ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a1ce:	d0f4      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1d0:	68a3      	ldr	r3, [r4, #8]
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800a1da:	f7fe fc3b 	bl	8008a54 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1de:	686b      	ldr	r3, [r5, #4]
 800a1e0:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 800a1e2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1e4:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1e8:	d117      	bne.n	800a21a <HAL_RCC_ClockConfig+0xde>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1ea:	68a3      	ldr	r3, [r4, #8]
 800a1ec:	f003 030c 	and.w	r3, r3, #12
 800a1f0:	2b0c      	cmp	r3, #12
 800a1f2:	d0b0      	beq.n	800a156 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1f4:	f7fe fc2e 	bl	8008a54 <HAL_GetTick>
 800a1f8:	1bc0      	subs	r0, r0, r7
 800a1fa:	4540      	cmp	r0, r8
 800a1fc:	d9f5      	bls.n	800a1ea <HAL_RCC_ClockConfig+0xae>
          return HAL_TIMEOUT;
 800a1fe:	2003      	movs	r0, #3
 800a200:	e7dc      	b.n	800a1bc <HAL_RCC_ClockConfig+0x80>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a202:	2a02      	cmp	r2, #2
 800a204:	d102      	bne.n	800a20c <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800a206:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a20a:	e7e0      	b.n	800a1ce <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a20c:	b912      	cbnz	r2, 800a214 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800a20e:	f013 0f02 	tst.w	r3, #2
 800a212:	e7dc      	b.n	800a1ce <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a214:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a218:	e7d9      	b.n	800a1ce <HAL_RCC_ClockConfig+0x92>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d10a      	bne.n	800a234 <HAL_RCC_ClockConfig+0xf8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800a21e:	68a3      	ldr	r3, [r4, #8]
 800a220:	f003 030c 	and.w	r3, r3, #12
 800a224:	2b08      	cmp	r3, #8
 800a226:	d096      	beq.n	800a156 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a228:	f7fe fc14 	bl	8008a54 <HAL_GetTick>
 800a22c:	1bc0      	subs	r0, r0, r7
 800a22e:	4540      	cmp	r0, r8
 800a230:	d9f5      	bls.n	800a21e <HAL_RCC_ClockConfig+0xe2>
 800a232:	e7e4      	b.n	800a1fe <HAL_RCC_ClockConfig+0xc2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a234:	b973      	cbnz	r3, 800a254 <HAL_RCC_ClockConfig+0x118>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800a236:	68a3      	ldr	r3, [r4, #8]
 800a238:	f013 0f0c 	tst.w	r3, #12
 800a23c:	d08b      	beq.n	800a156 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a23e:	f7fe fc09 	bl	8008a54 <HAL_GetTick>
 800a242:	1bc0      	subs	r0, r0, r7
 800a244:	4540      	cmp	r0, r8
 800a246:	d9f6      	bls.n	800a236 <HAL_RCC_ClockConfig+0xfa>
 800a248:	e7d9      	b.n	800a1fe <HAL_RCC_ClockConfig+0xc2>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a24a:	f7fe fc03 	bl	8008a54 <HAL_GetTick>
 800a24e:	1bc0      	subs	r0, r0, r7
 800a250:	4540      	cmp	r0, r8
 800a252:	d8d4      	bhi.n	800a1fe <HAL_RCC_ClockConfig+0xc2>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800a254:	68a3      	ldr	r3, [r4, #8]
 800a256:	f003 030c 	and.w	r3, r3, #12
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d1f5      	bne.n	800a24a <HAL_RCC_ClockConfig+0x10e>
 800a25e:	e77a      	b.n	800a156 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a260:	4a0d      	ldr	r2, [pc, #52]	; (800a298 <HAL_RCC_ClockConfig+0x15c>)
 800a262:	68a8      	ldr	r0, [r5, #8]
 800a264:	6893      	ldr	r3, [r2, #8]
 800a266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a26a:	4303      	orrs	r3, r0
 800a26c:	6093      	str	r3, [r2, #8]
 800a26e:	e776      	b.n	800a15e <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a270:	6813      	ldr	r3, [r2, #0]
 800a272:	f023 0307 	bic.w	r3, r3, #7
 800a276:	4333      	orrs	r3, r6
 800a278:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a27a:	6813      	ldr	r3, [r2, #0]
 800a27c:	f003 0307 	and.w	r3, r3, #7
 800a280:	42b3      	cmp	r3, r6
 800a282:	d19a      	bne.n	800a1ba <HAL_RCC_ClockConfig+0x7e>
 800a284:	e772      	b.n	800a16c <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	68ea      	ldr	r2, [r5, #12]
 800a28a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a28e:	4313      	orrs	r3, r2
 800a290:	60a3      	str	r3, [r4, #8]
 800a292:	e770      	b.n	800a176 <HAL_RCC_ClockConfig+0x3a>
 800a294:	40022000 	.word	0x40022000
 800a298:	40021000 	.word	0x40021000
 800a29c:	08027fcc 	.word	0x08027fcc
 800a2a0:	20000590 	.word	0x20000590

0800a2a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a2a4:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 800a2a6:	4a05      	ldr	r2, [pc, #20]	; (800a2bc <HAL_RCC_GetPCLK1Freq+0x18>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a2ae:	5cd3      	ldrb	r3, [r2, r3]
 800a2b0:	4a03      	ldr	r2, [pc, #12]	; (800a2c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a2b2:	6810      	ldr	r0, [r2, #0]
}
 800a2b4:	40d8      	lsrs	r0, r3
 800a2b6:	4770      	bx	lr
 800a2b8:	40021000 	.word	0x40021000
 800a2bc:	08027fdc 	.word	0x08027fdc
 800a2c0:	20000590 	.word	0x20000590

0800a2c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 800a2c6:	4a05      	ldr	r2, [pc, #20]	; (800a2dc <HAL_RCC_GetPCLK2Freq+0x18>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a2ce:	5cd3      	ldrb	r3, [r2, r3]
 800a2d0:	4a03      	ldr	r2, [pc, #12]	; (800a2e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a2d2:	6810      	ldr	r0, [r2, #0]
}
 800a2d4:	40d8      	lsrs	r0, r3
 800a2d6:	4770      	bx	lr
 800a2d8:	40021000 	.word	0x40021000
 800a2dc:	08027fdc 	.word	0x08027fdc
 800a2e0:	20000590 	.word	0x20000590

0800a2e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a2e6:	4b44      	ldr	r3, [pc, #272]	; (800a3f8 <RCCEx_PLLSAI1_Config+0x114>)
 800a2e8:	68da      	ldr	r2, [r3, #12]
 800a2ea:	f012 0f03 	tst.w	r2, #3
{
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	460e      	mov	r6, r1
 800a2f2:	6800      	ldr	r0, [r0, #0]
 800a2f4:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a2f6:	d02a      	beq.n	800a34e <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	f002 0203 	and.w	r2, r2, #3
 800a2fe:	4282      	cmp	r2, r0
 800a300:	d13c      	bne.n	800a37c <RCCEx_PLLSAI1_Config+0x98>
       ||
 800a302:	2a00      	cmp	r2, #0
 800a304:	d03a      	beq.n	800a37c <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a306:	68db      	ldr	r3, [r3, #12]
       ||
 800a308:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a30a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a30e:	3301      	adds	r3, #1
       ||
 800a310:	4293      	cmp	r3, r2
 800a312:	d133      	bne.n	800a37c <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a31a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a31c:	f7fe fb9a 	bl	8008a54 <HAL_GetTick>
 800a320:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	011a      	lsls	r2, r3, #4
 800a326:	d432      	bmi.n	800a38e <RCCEx_PLLSAI1_Config+0xaa>
 800a328:	68ab      	ldr	r3, [r5, #8]
 800a32a:	021f      	lsls	r7, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a32c:	2e00      	cmp	r6, #0
 800a32e:	d035      	beq.n	800a39c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a330:	2e01      	cmp	r6, #1
 800a332:	d14e      	bne.n	800a3d2 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a334:	692a      	ldr	r2, [r5, #16]
 800a336:	6921      	ldr	r1, [r4, #16]
 800a338:	0852      	lsrs	r2, r2, #1
 800a33a:	1e53      	subs	r3, r2, #1
 800a33c:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800a340:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800a344:	433a      	orrs	r2, r7
 800a346:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 800a34a:	6122      	str	r2, [r4, #16]
 800a34c:	e031      	b.n	800a3b2 <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 800a34e:	2802      	cmp	r0, #2
 800a350:	d010      	beq.n	800a374 <RCCEx_PLLSAI1_Config+0x90>
 800a352:	2803      	cmp	r0, #3
 800a354:	d014      	beq.n	800a380 <RCCEx_PLLSAI1_Config+0x9c>
 800a356:	2801      	cmp	r0, #1
 800a358:	d110      	bne.n	800a37c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	079f      	lsls	r7, r3, #30
 800a35e:	d51c      	bpl.n	800a39a <RCCEx_PLLSAI1_Config+0xb6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a360:	68e3      	ldr	r3, [r4, #12]
 800a362:	686a      	ldr	r2, [r5, #4]
 800a364:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800a368:	3a01      	subs	r2, #1
 800a36a:	4318      	orrs	r0, r3
 800a36c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a370:	60e0      	str	r0, [r4, #12]
 800a372:	e7cf      	b.n	800a314 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a37a:	d1f1      	bne.n	800a360 <RCCEx_PLLSAI1_Config+0x7c>
 800a37c:	2001      	movs	r0, #1
 800a37e:	e00c      	b.n	800a39a <RCCEx_PLLSAI1_Config+0xb6>
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	0391      	lsls	r1, r2, #14
 800a384:	d4ec      	bmi.n	800a360 <RCCEx_PLLSAI1_Config+0x7c>
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800a38c:	e7f5      	b.n	800a37a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a38e:	f7fe fb61 	bl	8008a54 <HAL_GetTick>
 800a392:	1bc0      	subs	r0, r0, r7
 800a394:	2802      	cmp	r0, #2
 800a396:	d9c4      	bls.n	800a322 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800a398:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a39c:	6921      	ldr	r1, [r4, #16]
 800a39e:	68eb      	ldr	r3, [r5, #12]
 800a3a0:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800a3a4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800a3a8:	091b      	lsrs	r3, r3, #4
 800a3aa:	4339      	orrs	r1, r7
 800a3ac:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800a3b0:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3b8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a3ba:	f7fe fb4b 	bl	8008a54 <HAL_GetTick>
 800a3be:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	d512      	bpl.n	800a3ec <RCCEx_PLLSAI1_Config+0x108>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	69aa      	ldr	r2, [r5, #24]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	2000      	movs	r0, #0
  return status;
 800a3d0:	e7e3      	b.n	800a39a <RCCEx_PLLSAI1_Config+0xb6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a3d2:	696b      	ldr	r3, [r5, #20]
 800a3d4:	6922      	ldr	r2, [r4, #16]
 800a3d6:	085b      	lsrs	r3, r3, #1
 800a3d8:	1e59      	subs	r1, r3, #1
 800a3da:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800a3de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a3e2:	433b      	orrs	r3, r7
 800a3e4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	e7e2      	b.n	800a3b2 <RCCEx_PLLSAI1_Config+0xce>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a3ec:	f7fe fb32 	bl	8008a54 <HAL_GetTick>
 800a3f0:	1b80      	subs	r0, r0, r6
 800a3f2:	2802      	cmp	r0, #2
 800a3f4:	d9e4      	bls.n	800a3c0 <RCCEx_PLLSAI1_Config+0xdc>
 800a3f6:	e7cf      	b.n	800a398 <RCCEx_PLLSAI1_Config+0xb4>
 800a3f8:	40021000 	.word	0x40021000

0800a3fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a3fe:	4b3c      	ldr	r3, [pc, #240]	; (800a4f0 <RCCEx_PLLSAI2_Config+0xf4>)
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	f012 0f03 	tst.w	r2, #3
{
 800a406:	4605      	mov	r5, r0
 800a408:	460e      	mov	r6, r1
 800a40a:	6800      	ldr	r0, [r0, #0]
 800a40c:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a40e:	d027      	beq.n	800a460 <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	f002 0203 	and.w	r2, r2, #3
 800a416:	4282      	cmp	r2, r0
 800a418:	d139      	bne.n	800a48e <RCCEx_PLLSAI2_Config+0x92>
       ||
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	d037      	beq.n	800a48e <RCCEx_PLLSAI2_Config+0x92>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a41e:	68db      	ldr	r3, [r3, #12]
       ||
 800a420:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a422:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a426:	3301      	adds	r3, #1
       ||
 800a428:	4293      	cmp	r3, r2
 800a42a:	d130      	bne.n	800a48e <RCCEx_PLLSAI2_Config+0x92>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a432:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a434:	f7fe fb0e 	bl	8008a54 <HAL_GetTick>
 800a438:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	009a      	lsls	r2, r3, #2
 800a43e:	d42f      	bmi.n	800a4a0 <RCCEx_PLLSAI2_Config+0xa4>
 800a440:	68ab      	ldr	r3, [r5, #8]
 800a442:	0218      	lsls	r0, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a444:	b39e      	cbz	r6, 800a4ae <RCCEx_PLLSAI2_Config+0xb2>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a446:	6963      	ldr	r3, [r4, #20]
 800a448:	6929      	ldr	r1, [r5, #16]
 800a44a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a44e:	0849      	lsrs	r1, r1, #1
 800a450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a454:	3901      	subs	r1, #1
 800a456:	4303      	orrs	r3, r0
 800a458:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a45c:	6163      	str	r3, [r4, #20]
 800a45e:	e031      	b.n	800a4c4 <RCCEx_PLLSAI2_Config+0xc8>
    switch(PllSai2->PLLSAI2Source)
 800a460:	2802      	cmp	r0, #2
 800a462:	d010      	beq.n	800a486 <RCCEx_PLLSAI2_Config+0x8a>
 800a464:	2803      	cmp	r0, #3
 800a466:	d014      	beq.n	800a492 <RCCEx_PLLSAI2_Config+0x96>
 800a468:	2801      	cmp	r0, #1
 800a46a:	d110      	bne.n	800a48e <RCCEx_PLLSAI2_Config+0x92>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	079f      	lsls	r7, r3, #30
 800a470:	d51c      	bpl.n	800a4ac <RCCEx_PLLSAI2_Config+0xb0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a472:	68e3      	ldr	r3, [r4, #12]
 800a474:	686a      	ldr	r2, [r5, #4]
 800a476:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800a47a:	3a01      	subs	r2, #1
 800a47c:	4318      	orrs	r0, r3
 800a47e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a482:	60e0      	str	r0, [r4, #12]
 800a484:	e7d2      	b.n	800a42c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a48c:	d1f1      	bne.n	800a472 <RCCEx_PLLSAI2_Config+0x76>
 800a48e:	2001      	movs	r0, #1
 800a490:	e00c      	b.n	800a4ac <RCCEx_PLLSAI2_Config+0xb0>
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	0391      	lsls	r1, r2, #14
 800a496:	d4ec      	bmi.n	800a472 <RCCEx_PLLSAI2_Config+0x76>
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800a49e:	e7f5      	b.n	800a48c <RCCEx_PLLSAI2_Config+0x90>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a4a0:	f7fe fad8 	bl	8008a54 <HAL_GetTick>
 800a4a4:	1bc0      	subs	r0, r0, r7
 800a4a6:	2802      	cmp	r0, #2
 800a4a8:	d9c7      	bls.n	800a43a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800a4aa:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a4ae:	6962      	ldr	r2, [r4, #20]
 800a4b0:	68eb      	ldr	r3, [r5, #12]
 800a4b2:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800a4b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a4ba:	091b      	lsrs	r3, r3, #4
 800a4bc:	4302      	orrs	r2, r0
 800a4be:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800a4c2:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ca:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a4cc:	f7fe fac2 	bl	8008a54 <HAL_GetTick>
 800a4d0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	d505      	bpl.n	800a4e4 <RCCEx_PLLSAI2_Config+0xe8>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a4d8:	6963      	ldr	r3, [r4, #20]
 800a4da:	696a      	ldr	r2, [r5, #20]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	6163      	str	r3, [r4, #20]
 800a4e0:	2000      	movs	r0, #0
  return status;
 800a4e2:	e7e3      	b.n	800a4ac <RCCEx_PLLSAI2_Config+0xb0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a4e4:	f7fe fab6 	bl	8008a54 <HAL_GetTick>
 800a4e8:	1b80      	subs	r0, r0, r6
 800a4ea:	2802      	cmp	r0, #2
 800a4ec:	d9f1      	bls.n	800a4d2 <RCCEx_PLLSAI2_Config+0xd6>
 800a4ee:	e7dc      	b.n	800a4aa <RCCEx_PLLSAI2_Config+0xae>
 800a4f0:	40021000 	.word	0x40021000

0800a4f4 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a4f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a4f8:	6806      	ldr	r6, [r0, #0]
 800a4fa:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800a4fe:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a500:	d024      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a502:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a504:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a508:	d02c      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800a50a:	d802      	bhi.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800a50c:	b1c1      	cbz	r1, 800a540 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800a50e:	2601      	movs	r6, #1
 800a510:	e01c      	b.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a512:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a516:	d00d      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a518:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800a51c:	d1f7      	bne.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a51e:	4a4e      	ldr	r2, [pc, #312]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a520:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a522:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a526:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a52a:	430b      	orrs	r3, r1
 800a52c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800a530:	2600      	movs	r6, #0
 800a532:	e00b      	b.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a534:	4a48      	ldr	r2, [pc, #288]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a536:	68d3      	ldr	r3, [r2, #12]
 800a538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a53c:	60d3      	str	r3, [r2, #12]
 800a53e:	e7ee      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a540:	3004      	adds	r0, #4
 800a542:	f7ff fecf 	bl	800a2e4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a546:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a548:	2800      	cmp	r0, #0
 800a54a:	d0e8      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	04d8      	lsls	r0, r3, #19
 800a550:	d506      	bpl.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a552:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a554:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800a558:	d073      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a55a:	d808      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a55c:	b1a9      	cbz	r1, 800a58a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800a55e:	2601      	movs	r6, #1
 800a560:	4635      	mov	r5, r6
 800a562:	e021      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a564:	2100      	movs	r1, #0
 800a566:	3020      	adds	r0, #32
 800a568:	f7ff ff48 	bl	800a3fc <RCCEx_PLLSAI2_Config>
 800a56c:	e7eb      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a56e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800a572:	d004      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800a574:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800a578:	d1f1      	bne.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a57a:	4635      	mov	r5, r6
 800a57c:	e009      	b.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a57e:	4a36      	ldr	r2, [pc, #216]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a580:	68d3      	ldr	r3, [r2, #12]
 800a582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a586:	60d3      	str	r3, [r2, #12]
 800a588:	e7f7      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a58a:	1d20      	adds	r0, r4, #4
 800a58c:	f7ff feaa 	bl	800a2e4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a590:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a592:	2d00      	cmp	r5, #0
 800a594:	d15b      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a596:	4a30      	ldr	r2, [pc, #192]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a598:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a59a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a59e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	0399      	lsls	r1, r3, #14
 800a5ac:	f140 815a 	bpl.w	800a864 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5b0:	4f29      	ldr	r7, [pc, #164]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a5b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5b4:	00da      	lsls	r2, r3, #3
 800a5b6:	d44c      	bmi.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5be:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a5ca:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a65c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a5d2:	f8d9 3000 	ldr.w	r3, [r9]
 800a5d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5da:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800a5de:	f7fe fa39 	bl	8008a54 <HAL_GetTick>
 800a5e2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800a5e4:	f8d9 3000 	ldr.w	r3, [r9]
 800a5e8:	05db      	lsls	r3, r3, #23
 800a5ea:	d539      	bpl.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 800a5ec:	2d00      	cmp	r5, #0
 800a5ee:	d13e      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a5f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a5f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a5f8:	d015      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800a5fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d011      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800a606:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a60a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a60e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a612:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a61a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a61e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800a622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a626:	07d8      	lsls	r0, r3, #31
 800a628:	f100 810c 	bmi.w	800a844 <HAL_RCCEx_PeriphCLKConfig+0x350>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a62c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a630:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a638:	4313      	orrs	r3, r2
 800a63a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a63e:	4635      	mov	r5, r6
 800a640:	e015      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a642:	2100      	movs	r1, #0
 800a644:	f104 0020 	add.w	r0, r4, #32
 800a648:	f7ff fed8 	bl	800a3fc <RCCEx_PLLSAI2_Config>
 800a64c:	e7a0      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800a64e:	462e      	mov	r6, r5
 800a650:	e7aa      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800a652:	f04f 0800 	mov.w	r8, #0
 800a656:	e7ba      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xda>
 800a658:	40021000 	.word	0x40021000
 800a65c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a660:	f7fe f9f8 	bl	8008a54 <HAL_GetTick>
 800a664:	eba0 000a 	sub.w	r0, r0, sl
 800a668:	2802      	cmp	r0, #2
 800a66a:	d9bb      	bls.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800a66c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800a66e:	f1b8 0f00 	cmp.w	r8, #0
 800a672:	d003      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a67a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	07da      	lsls	r2, r3, #31
 800a680:	d508      	bpl.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a682:	498e      	ldr	r1, [pc, #568]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a684:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a686:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a68a:	f022 0203 	bic.w	r2, r2, #3
 800a68e:	4302      	orrs	r2, r0
 800a690:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a694:	079f      	lsls	r7, r3, #30
 800a696:	d508      	bpl.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a698:	4988      	ldr	r1, [pc, #544]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a69a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a69c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6a0:	f022 020c 	bic.w	r2, r2, #12
 800a6a4:	4302      	orrs	r2, r0
 800a6a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a6aa:	075e      	lsls	r6, r3, #29
 800a6ac:	d508      	bpl.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a6ae:	4983      	ldr	r1, [pc, #524]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a6b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a6b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a6ba:	4302      	orrs	r2, r0
 800a6bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a6c0:	0718      	lsls	r0, r3, #28
 800a6c2:	d508      	bpl.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a6c4:	497d      	ldr	r1, [pc, #500]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a6c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a6c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a6d0:	4302      	orrs	r2, r0
 800a6d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a6d6:	06d9      	lsls	r1, r3, #27
 800a6d8:	d508      	bpl.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a6da:	4978      	ldr	r1, [pc, #480]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a6dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a6de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a6e6:	4302      	orrs	r2, r0
 800a6e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6ec:	069a      	lsls	r2, r3, #26
 800a6ee:	d508      	bpl.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6f0:	4972      	ldr	r1, [pc, #456]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a6f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a6f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a6fc:	4302      	orrs	r2, r0
 800a6fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a702:	059f      	lsls	r7, r3, #22
 800a704:	d508      	bpl.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a706:	496d      	ldr	r1, [pc, #436]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a708:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a70a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a70e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a712:	4302      	orrs	r2, r0
 800a714:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a718:	055e      	lsls	r6, r3, #21
 800a71a:	d508      	bpl.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a71c:	4967      	ldr	r1, [pc, #412]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a71e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a720:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a724:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a728:	4302      	orrs	r2, r0
 800a72a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a72e:	0658      	lsls	r0, r3, #25
 800a730:	d508      	bpl.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a732:	4962      	ldr	r1, [pc, #392]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a734:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a736:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a73a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a73e:	4302      	orrs	r2, r0
 800a740:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a744:	0619      	lsls	r1, r3, #24
 800a746:	d508      	bpl.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a748:	495c      	ldr	r1, [pc, #368]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a74a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a74c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a750:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a754:	4302      	orrs	r2, r0
 800a756:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a75a:	05da      	lsls	r2, r3, #23
 800a75c:	d508      	bpl.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a75e:	4957      	ldr	r1, [pc, #348]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a766:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a76a:	4302      	orrs	r2, r0
 800a76c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a770:	049b      	lsls	r3, r3, #18
 800a772:	d50f      	bpl.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a774:	4a51      	ldr	r2, [pc, #324]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a776:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a778:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a77c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a780:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a782:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a786:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a78a:	d16d      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a78c:	68d3      	ldr	r3, [r2, #12]
 800a78e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a792:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	031f      	lsls	r7, r3, #12
 800a798:	d50f      	bpl.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a79a:	4a48      	ldr	r2, [pc, #288]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a79c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a79e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a7a2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a7a6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a7a8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a7ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a7b0:	d165      	bne.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7b2:	68d3      	ldr	r3, [r2, #12]
 800a7b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7b8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	035e      	lsls	r6, r3, #13
 800a7be:	d50f      	bpl.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7c0:	4a3e      	ldr	r2, [pc, #248]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a7c2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a7c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a7c8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a7cc:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a7ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a7d6:	d15d      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7d8:	68d3      	ldr	r3, [r2, #12]
 800a7da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7de:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	0458      	lsls	r0, r3, #17
 800a7e4:	d512      	bpl.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7e6:	4935      	ldr	r1, [pc, #212]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a7e8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a7ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a7ee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a7f2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a7f4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a7fc:	d155      	bne.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a7fe:	2102      	movs	r1, #2
 800a800:	1d20      	adds	r0, r4, #4
 800a802:	f7ff fd6f 	bl	800a2e4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a806:	2800      	cmp	r0, #0
 800a808:	bf18      	it	ne
 800a80a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a80c:	6822      	ldr	r2, [r4, #0]
 800a80e:	0411      	lsls	r1, r2, #16
 800a810:	d508      	bpl.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a812:	492a      	ldr	r1, [pc, #168]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a814:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a816:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a81a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a81e:	4303      	orrs	r3, r0
 800a820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a824:	03d3      	lsls	r3, r2, #15
 800a826:	d509      	bpl.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a828:	4a24      	ldr	r2, [pc, #144]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800a82a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a82e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a832:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a836:	430b      	orrs	r3, r1
 800a838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800a83c:	4628      	mov	r0, r5
 800a83e:	b002      	add	sp, #8
 800a840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tickstart = HAL_GetTick();
 800a844:	f7fe f906 	bl	8008a54 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a848:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a84c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800a84e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a852:	0799      	lsls	r1, r3, #30
 800a854:	f53f aeea 	bmi.w	800a62c <HAL_RCCEx_PeriphCLKConfig+0x138>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a858:	f7fe f8fc 	bl	8008a54 <HAL_GetTick>
 800a85c:	1b40      	subs	r0, r0, r5
 800a85e:	4548      	cmp	r0, r9
 800a860:	d9f5      	bls.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800a862:	e703      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x178>
 800a864:	4635      	mov	r5, r6
 800a866:	e709      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x188>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a868:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a86c:	d192      	bne.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a86e:	2101      	movs	r1, #1
 800a870:	1d20      	adds	r0, r4, #4
 800a872:	f7ff fd37 	bl	800a2e4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800a876:	2800      	cmp	r0, #0
 800a878:	bf18      	it	ne
 800a87a:	4605      	movne	r5, r0
 800a87c:	e78a      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a87e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a882:	d19a      	bne.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a884:	2101      	movs	r1, #1
 800a886:	1d20      	adds	r0, r4, #4
 800a888:	f7ff fd2c 	bl	800a2e4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a88c:	2800      	cmp	r0, #0
 800a88e:	bf18      	it	ne
 800a890:	4605      	movne	r5, r0
 800a892:	e792      	b.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a894:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a898:	d1a2      	bne.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a89a:	2101      	movs	r1, #1
 800a89c:	1d20      	adds	r0, r4, #4
 800a89e:	f7ff fd21 	bl	800a2e4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	bf18      	it	ne
 800a8a6:	4605      	movne	r5, r0
 800a8a8:	e79a      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a8aa:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a8ae:	d1ad      	bne.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x318>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a8b0:	2102      	movs	r1, #2
 800a8b2:	f104 0020 	add.w	r0, r4, #32
 800a8b6:	f7ff fda1 	bl	800a3fc <RCCEx_PLLSAI2_Config>
 800a8ba:	e7a4      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a8bc:	40021000 	.word	0x40021000

0800a8c0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a8c0:	4a02      	ldr	r2, [pc, #8]	; (800a8cc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800a8c2:	6813      	ldr	r3, [r2, #0]
 800a8c4:	f043 0304 	orr.w	r3, r3, #4
 800a8c8:	6013      	str	r3, [r2, #0]
}
 800a8ca:	4770      	bx	lr
 800a8cc:	40021000 	.word	0x40021000

0800a8d0 <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 800a8d0:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	b188      	cbz	r0, 800a8fa <HAL_RNG_Init+0x2a>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined(RNG_CR_CED)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* defined(RNG_CR_CED) */

  if(hrng->State == HAL_RNG_STATE_RESET)
 800a8d6:	7943      	ldrb	r3, [r0, #5]
 800a8d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a8dc:	b913      	cbnz	r3, 800a8e4 <HAL_RNG_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a8de:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a8e0:	f7f9 fd78 	bl	80043d4 <HAL_RNG_MspInit>
  }

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a8e4:	2302      	movs	r3, #2
  /* Clock Error Detection configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a8e6:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800a8e8:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800a8ea:	6813      	ldr	r3, [r2, #0]
 800a8ec:	f043 0304 	orr.w	r3, r3, #4
 800a8f0:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 800a8f6:	2000      	movs	r0, #0
}
 800a8f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7fc      	b.n	800a8f8 <HAL_RNG_Init+0x28>

0800a8fe <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit: pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a8fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;    
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng); 
 800a900:	7903      	ldrb	r3, [r0, #4]
 800a902:	2b01      	cmp	r3, #1
{
 800a904:	4604      	mov	r4, r0
 800a906:	460e      	mov	r6, r1
  __HAL_LOCK(hrng); 
 800a908:	d021      	beq.n	800a94e <HAL_RNG_GenerateRandomNumber+0x50>
  
  /* Check RNS peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 800a90a:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng); 
 800a90c:	2001      	movs	r0, #1
  if(hrng->State == HAL_RNG_STATE_READY)
 800a90e:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng); 
 800a910:	7120      	strb	r0, [r4, #4]
  if(hrng->State == HAL_RNG_STATE_READY)
 800a912:	d10f      	bne.n	800a934 <HAL_RNG_GenerateRandomNumber+0x36>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 800a914:	2302      	movs	r3, #2
 800a916:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a918:	f7fe f89c 	bl	8008a54 <HAL_GetTick>
 800a91c:	4607      	mov	r7, r0
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	6855      	ldr	r5, [r2, #4]
 800a922:	f015 0501 	ands.w	r5, r5, #1
 800a926:	d008      	beq.n	800a93a <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_TIMEOUT;
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a928:	6893      	ldr	r3, [r2, #8]
 800a92a:	60a3      	str	r3, [r4, #8]
    *random32bit = hrng->RandomNumber;
 800a92c:	6033      	str	r3, [r6, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 800a92e:	2301      	movs	r3, #1
 800a930:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800a932:	2000      	movs	r0, #0
  {
    status = HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a934:	2300      	movs	r3, #0
 800a936:	7123      	strb	r3, [r4, #4]

  return status;
 800a938:	e008      	b.n	800a94c <HAL_RNG_GenerateRandomNumber+0x4e>
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800a93a:	f7fe f88b 	bl	8008a54 <HAL_GetTick>
 800a93e:	1bc0      	subs	r0, r0, r7
 800a940:	2802      	cmp	r0, #2
 800a942:	d9ec      	bls.n	800a91e <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_ERROR;
 800a944:	2304      	movs	r3, #4
 800a946:	7163      	strb	r3, [r4, #5]
        __HAL_UNLOCK(hrng);
 800a948:	7125      	strb	r5, [r4, #4]
        return HAL_TIMEOUT;
 800a94a:	2003      	movs	r0, #3
}
 800a94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng); 
 800a94e:	2002      	movs	r0, #2
 800a950:	e7fc      	b.n	800a94c <HAL_RNG_GenerateRandomNumber+0x4e>

0800a952 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a952:	6802      	ldr	r2, [r0, #0]
{
 800a954:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a956:	68d3      	ldr	r3, [r2, #12]
 800a958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a95c:	60d3      	str	r3, [r2, #12]
{
 800a95e:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800a960:	f7fe f878 	bl	8008a54 <HAL_GetTick>
 800a964:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	069b      	lsls	r3, r3, #26
 800a96c:	d501      	bpl.n	800a972 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800a96e:	2000      	movs	r0, #0
}
 800a970:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a972:	f7fe f86f 	bl	8008a54 <HAL_GetTick>
 800a976:	1b40      	subs	r0, r0, r5
 800a978:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a97c:	d9f3      	bls.n	800a966 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800a97e:	2003      	movs	r0, #3
 800a980:	e7f6      	b.n	800a970 <HAL_RTC_WaitForSynchro+0x1e>

0800a982 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a982:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a984:	6803      	ldr	r3, [r0, #0]
 800a986:	68da      	ldr	r2, [r3, #12]
 800a988:	0652      	lsls	r2, r2, #25
{
 800a98a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a98c:	d501      	bpl.n	800a992 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800a98e:	2000      	movs	r0, #0
}
 800a990:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a992:	f04f 32ff 	mov.w	r2, #4294967295
 800a996:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800a998:	f7fe f85c 	bl	8008a54 <HAL_GetTick>
 800a99c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	065b      	lsls	r3, r3, #25
 800a9a4:	d4f3      	bmi.n	800a98e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a9a6:	f7fe f855 	bl	8008a54 <HAL_GetTick>
 800a9aa:	1b40      	subs	r0, r0, r5
 800a9ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a9b0:	d9f5      	bls.n	800a99e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800a9b2:	2003      	movs	r0, #3
 800a9b4:	e7ec      	b.n	800a990 <RTC_EnterInitMode+0xe>

0800a9b6 <HAL_RTC_Init>:
{
 800a9b6:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	b1d8      	cbz	r0, 800a9f4 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a9bc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a9c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a9c4:	b91b      	cbnz	r3, 800a9ce <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800a9c6:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800a9ca:	f7f9 fd19 	bl	8004400 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	22ca      	movs	r2, #202	; 0xca
 800a9d8:	625a      	str	r2, [r3, #36]	; 0x24
 800a9da:	2253      	movs	r2, #83	; 0x53
 800a9dc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7ff ffcf 	bl	800a982 <RTC_EnterInitMode>
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	b130      	cbz	r0, 800a9f8 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9ea:	22ff      	movs	r2, #255	; 0xff
 800a9ec:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a9ee:	2304      	movs	r3, #4
 800a9f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 800a9f4:	2501      	movs	r5, #1
 800a9f6:	e031      	b.n	800aa5c <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a9f8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a9fa:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a9fc:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800aa00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa04:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aa06:	6862      	ldr	r2, [r4, #4]
 800aa08:	6899      	ldr	r1, [r3, #8]
 800aa0a:	4302      	orrs	r2, r0
 800aa0c:	69a0      	ldr	r0, [r4, #24]
 800aa0e:	4302      	orrs	r2, r0
 800aa10:	430a      	orrs	r2, r1
 800aa12:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aa14:	68e2      	ldr	r2, [r4, #12]
 800aa16:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800aa18:	691a      	ldr	r2, [r3, #16]
 800aa1a:	68a1      	ldr	r1, [r4, #8]
 800aa1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aa20:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800aa22:	68da      	ldr	r2, [r3, #12]
 800aa24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa28:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	069b      	lsls	r3, r3, #26
 800aa2e:	d405      	bmi.n	800aa3c <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7ff ff8e 	bl	800a952 <HAL_RTC_WaitForSynchro>
 800aa36:	b108      	cbz	r0, 800aa3c <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	e7d6      	b.n	800a9ea <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800aa3c:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800aa3e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800aa40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa42:	f022 0203 	bic.w	r2, r2, #3
 800aa46:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800aa48:	69e2      	ldr	r2, [r4, #28]
 800aa4a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aa4c:	4302      	orrs	r2, r0
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa52:	22ff      	movs	r2, #255	; 0xff
 800aa54:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}

0800aa60 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800aa60:	2300      	movs	r3, #0

  while(Value >= 10)
 800aa62:	2809      	cmp	r0, #9
 800aa64:	d803      	bhi.n	800aa6e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800aa66:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800aa6a:	b2c0      	uxtb	r0, r0
 800aa6c:	4770      	bx	lr
    Value -= 10;
 800aa6e:	380a      	subs	r0, #10
    bcdhigh++;
 800aa70:	3301      	adds	r3, #1
    Value -= 10;
 800aa72:	b2c0      	uxtb	r0, r0
 800aa74:	e7f5      	b.n	800aa62 <RTC_ByteToBcd2+0x2>

0800aa76 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800aa76:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aa7a:	2b01      	cmp	r3, #1
{
 800aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa80:	4606      	mov	r6, r0
 800aa82:	460f      	mov	r7, r1
 800aa84:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 800aa88:	d032      	beq.n	800aaf0 <HAL_RTC_SetTime+0x7a>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	6801      	ldr	r1, [r0, #0]
 800aa8e:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa92:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 800aa96:	7838      	ldrb	r0, [r7, #0]
 800aa98:	787d      	ldrb	r5, [r7, #1]
 800aa9a:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa9c:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 800aa9e:	bb52      	cbnz	r2, 800aaf6 <HAL_RTC_SetTime+0x80>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aaa0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800aaa4:	bf08      	it	eq
 800aaa6:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aaa8:	f7ff ffda 	bl	800aa60 <RTC_ByteToBcd2>
 800aaac:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800aaae:	4628      	mov	r0, r5
 800aab0:	f7ff ffd6 	bl	800aa60 <RTC_ByteToBcd2>
 800aab4:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7ff ffd2 	bl	800aa60 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 800aabc:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aabe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800aac2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800aac6:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaca:	23ca      	movs	r3, #202	; 0xca
 800aacc:	624b      	str	r3, [r1, #36]	; 0x24
 800aace:	2353      	movs	r3, #83	; 0x53
 800aad0:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800aad2:	4630      	mov	r0, r6
 800aad4:	f7ff ff55 	bl	800a982 <RTC_EnterInitMode>
 800aad8:	6833      	ldr	r3, [r6, #0]
 800aada:	4605      	mov	r5, r0
 800aadc:	b1c0      	cbz	r0, 800ab10 <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aade:	22ff      	movs	r2, #255	; 0xff
 800aae0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aae2:	2304      	movs	r3, #4
 800aae4:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800aae8:	2300      	movs	r3, #0
 800aaea:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 800aaee:	2501      	movs	r5, #1
}
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aaf6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 800aafa:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 800aafe:	bf08      	it	eq
 800ab00:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab02:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ab06:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ab08:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab0a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800ab0e:	e7dc      	b.n	800aaca <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab10:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800ab14:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800ab18:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab20:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ab22:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 800ab26:	6899      	ldr	r1, [r3, #8]
 800ab28:	4302      	orrs	r2, r0
 800ab2a:	430a      	orrs	r2, r1
 800ab2c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab34:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	069b      	lsls	r3, r3, #26
 800ab3a:	d40c      	bmi.n	800ab56 <HAL_RTC_SetTime+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f7ff ff08 	bl	800a952 <HAL_RTC_WaitForSynchro>
 800ab42:	b140      	cbz	r0, 800ab56 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab44:	6833      	ldr	r3, [r6, #0]
 800ab46:	22ff      	movs	r2, #255	; 0xff
 800ab48:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ab4a:	2304      	movs	r3, #4
 800ab4c:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800ab50:	f886 5020 	strb.w	r5, [r6, #32]
 800ab54:	e7cb      	b.n	800aaee <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab56:	6833      	ldr	r3, [r6, #0]
 800ab58:	22ff      	movs	r2, #255	; 0xff
 800ab5a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 800ab62:	2300      	movs	r3, #0
 800ab64:	f886 3020 	strb.w	r3, [r6, #32]
   return HAL_OK;
 800ab68:	e7c2      	b.n	800aaf0 <HAL_RTC_SetTime+0x7a>

0800ab6a <HAL_RTC_SetDate>:
{
 800ab6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800ab6c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ab70:	2b01      	cmp	r3, #1
{
 800ab72:	4606      	mov	r6, r0
 800ab74:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 800ab78:	d034      	beq.n	800abe4 <HAL_RTC_SetDate+0x7a>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab80:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 800ab84:	780d      	ldrb	r5, [r1, #0]
 800ab86:	784c      	ldrb	r4, [r1, #1]
 800ab88:	788f      	ldrb	r7, [r1, #2]
 800ab8a:	78c8      	ldrb	r0, [r1, #3]
 800ab8c:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ab8e:	2a00      	cmp	r2, #0
 800ab90:	d14d      	bne.n	800ac2e <HAL_RTC_SetDate+0xc4>
 800ab92:	06e2      	lsls	r2, r4, #27
 800ab94:	d503      	bpl.n	800ab9e <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ab96:	f024 0410 	bic.w	r4, r4, #16
 800ab9a:	340a      	adds	r4, #10
 800ab9c:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ab9e:	f7ff ff5f 	bl	800aa60 <RTC_ByteToBcd2>
 800aba2:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800aba4:	7848      	ldrb	r0, [r1, #1]
 800aba6:	f7ff ff5b 	bl	800aa60 <RTC_ByteToBcd2>
 800abaa:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800abac:	4638      	mov	r0, r7
 800abae:	f7ff ff57 	bl	800aa60 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800abb2:	4328      	orrs	r0, r5
 800abb4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abb8:	6833      	ldr	r3, [r6, #0]
 800abba:	22ca      	movs	r2, #202	; 0xca
 800abbc:	625a      	str	r2, [r3, #36]	; 0x24
 800abbe:	2253      	movs	r2, #83	; 0x53
 800abc0:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800abc2:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff fedb 	bl	800a982 <RTC_EnterInitMode>
 800abcc:	6833      	ldr	r3, [r6, #0]
 800abce:	4605      	mov	r5, r0
 800abd0:	b150      	cbz	r0, 800abe8 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abd2:	22ff      	movs	r2, #255	; 0xff
 800abd4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800abd6:	2304      	movs	r3, #4
 800abd8:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800abdc:	2300      	movs	r3, #0
 800abde:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 800abe2:	2501      	movs	r5, #1
}
 800abe4:	4628      	mov	r0, r5
 800abe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800abe8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800abec:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800abf0:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abf8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	069b      	lsls	r3, r3, #26
 800abfe:	d40c      	bmi.n	800ac1a <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac00:	4630      	mov	r0, r6
 800ac02:	f7ff fea6 	bl	800a952 <HAL_RTC_WaitForSynchro>
 800ac06:	b140      	cbz	r0, 800ac1a <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800ac08:	6833      	ldr	r3, [r6, #0]
 800ac0a:	22ff      	movs	r2, #255	; 0xff
 800ac0c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac0e:	2304      	movs	r3, #4
 800ac10:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800ac14:	f886 5020 	strb.w	r5, [r6, #32]
 800ac18:	e7e3      	b.n	800abe2 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac1a:	6833      	ldr	r3, [r6, #0]
 800ac1c:	22ff      	movs	r2, #255	; 0xff
 800ac1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800ac20:	2301      	movs	r3, #1
 800ac22:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ac26:	2300      	movs	r3, #0
 800ac28:	f886 3020 	strb.w	r3, [r6, #32]
    return HAL_OK;
 800ac2c:	e7da      	b.n	800abe4 <HAL_RTC_SetDate+0x7a>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ac2e:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800ac32:	4338      	orrs	r0, r7
 800ac34:	e7c0      	b.n	800abb8 <HAL_RTC_SetDate+0x4e>

0800ac36 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ac36:	0903      	lsrs	r3, r0, #4
 800ac38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800ac3c:	f000 000f 	and.w	r0, r0, #15
 800ac40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800ac44:	b2c0      	uxtb	r0, r0
 800ac46:	4770      	bx	lr

0800ac48 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ac48:	6803      	ldr	r3, [r0, #0]
 800ac4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ac4c:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ac4e:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ac56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 800ac5a:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ac5c:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ac60:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ac62:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800ac64:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ac68:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ac6c:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800ac6e:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ac72:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800ac74:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ac76:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800ac78:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800ac7a:	b952      	cbnz	r2, 800ac92 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ac7c:	f7ff ffdb 	bl	800ac36 <RTC_Bcd2ToByte>
 800ac80:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ffd7 	bl	800ac36 <RTC_Bcd2ToByte>
 800ac88:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f7ff ffd3 	bl	800ac36 <RTC_Bcd2ToByte>
 800ac90:	7088      	strb	r0, [r1, #2]
}
 800ac92:	2000      	movs	r0, #0
 800ac94:	bd70      	pop	{r4, r5, r6, pc}

0800ac96 <HAL_RTC_GetDate>:
{
 800ac96:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ac98:	6803      	ldr	r3, [r0, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aca0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800aca4:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800aca6:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800acaa:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800acac:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800acb0:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800acb2:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800acb4:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800acb6:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800acb8:	b952      	cbnz	r2, 800acd0 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800acba:	f7ff ffbc 	bl	800ac36 <RTC_Bcd2ToByte>
 800acbe:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800acc0:	4628      	mov	r0, r5
 800acc2:	f7ff ffb8 	bl	800ac36 <RTC_Bcd2ToByte>
 800acc6:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800acc8:	4620      	mov	r0, r4
 800acca:	f7ff ffb4 	bl	800ac36 <RTC_Bcd2ToByte>
 800acce:	7088      	strb	r0, [r1, #2]
}
 800acd0:	2000      	movs	r0, #0
 800acd2:	bd38      	pop	{r3, r4, r5, pc}

0800acd4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800acd4:	6803      	ldr	r3, [r0, #0]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800acdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acde:	6842      	ldr	r2, [r0, #4]
 800ace0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800ace4:	d10a      	bne.n	800acfc <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800ace6:	6882      	ldr	r2, [r0, #8]
 800ace8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800acec:	d002      	beq.n	800acf4 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800acee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800acf2:	d103      	bne.n	800acfc <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800acfc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800acfe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ad02:	d107      	bne.n	800ad14 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad14:	2301      	movs	r3, #1
 800ad16:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800ad20:	2003      	movs	r0, #3
 800ad22:	4770      	bx	lr

0800ad24 <SPI_WaitFlagStateUntilTimeout>:
{
 800ad24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	460f      	mov	r7, r1
 800ad30:	4616      	mov	r6, r2
 800ad32:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad34:	682a      	ldr	r2, [r5, #0]
 800ad36:	6893      	ldr	r3, [r2, #8]
 800ad38:	ea37 0303 	bics.w	r3, r7, r3
 800ad3c:	bf0c      	ite	eq
 800ad3e:	2301      	moveq	r3, #1
 800ad40:	2300      	movne	r3, #0
 800ad42:	429e      	cmp	r6, r3
 800ad44:	d102      	bne.n	800ad4c <SPI_WaitFlagStateUntilTimeout+0x28>
}
 800ad46:	2000      	movs	r0, #0
 800ad48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800ad4c:	1c63      	adds	r3, r4, #1
 800ad4e:	d0f2      	beq.n	800ad36 <SPI_WaitFlagStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800ad50:	b924      	cbnz	r4, 800ad5c <SPI_WaitFlagStateUntilTimeout+0x38>
 800ad52:	4628      	mov	r0, r5
}
 800ad54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	f7ff bfbc 	b.w	800acd4 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800ad5c:	f7fd fe7a 	bl	8008a54 <HAL_GetTick>
 800ad60:	eba0 0008 	sub.w	r0, r0, r8
 800ad64:	42a0      	cmp	r0, r4
 800ad66:	d3e5      	bcc.n	800ad34 <SPI_WaitFlagStateUntilTimeout+0x10>
 800ad68:	e7f3      	b.n	800ad52 <SPI_WaitFlagStateUntilTimeout+0x2e>

0800ad6a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ad6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad72:	4607      	mov	r7, r0
 800ad74:	460e      	mov	r6, r1
 800ad76:	4615      	mov	r5, r2
 800ad78:	461c      	mov	r4, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	6890      	ldr	r0, [r2, #8]
 800ad7e:	4030      	ands	r0, r6
 800ad80:	42a8      	cmp	r0, r5
 800ad82:	d103      	bne.n	800ad8c <SPI_WaitFifoStateUntilTimeout+0x22>
      }
    }
  }

  return HAL_OK;
}
 800ad84:	2000      	movs	r0, #0
 800ad86:	b002      	add	sp, #8
 800ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ad8c:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800ad90:	d106      	bne.n	800ada0 <SPI_WaitFifoStateUntilTimeout+0x36>
 800ad92:	b92d      	cbnz	r5, 800ada0 <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800ad94:	7b13      	ldrb	r3, [r2, #12]
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 800ad9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 800ada0:	1c63      	adds	r3, r4, #1
 800ada2:	d0eb      	beq.n	800ad7c <SPI_WaitFifoStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800ada4:	b92c      	cbnz	r4, 800adb2 <SPI_WaitFifoStateUntilTimeout+0x48>
 800ada6:	4638      	mov	r0, r7
}
 800ada8:	b002      	add	sp, #8
 800adaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	f7ff bf91 	b.w	800acd4 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800adb2:	f7fd fe4f 	bl	8008a54 <HAL_GetTick>
 800adb6:	eba0 0008 	sub.w	r0, r0, r8
 800adba:	42a0      	cmp	r0, r4
 800adbc:	d3dd      	bcc.n	800ad7a <SPI_WaitFifoStateUntilTimeout+0x10>
 800adbe:	e7f2      	b.n	800ada6 <SPI_WaitFifoStateUntilTimeout+0x3c>

0800adc0 <SPI_EndRxTransaction>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adc0:	6843      	ldr	r3, [r0, #4]
 800adc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800adc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adc8:	4604      	mov	r4, r0
 800adca:	460e      	mov	r6, r1
 800adcc:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adce:	d10b      	bne.n	800ade8 <SPI_EndRxTransaction+0x28>
 800add0:	6883      	ldr	r3, [r0, #8]
 800add2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800add6:	d002      	beq.n	800adde <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800add8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800addc:	d104      	bne.n	800ade8 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800adde:	6822      	ldr	r2, [r4, #0]
 800ade0:	6813      	ldr	r3, [r2, #0]
 800ade2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade6:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ade8:	9700      	str	r7, [sp, #0]
 800adea:	4633      	mov	r3, r6
 800adec:	2200      	movs	r2, #0
 800adee:	2180      	movs	r1, #128	; 0x80
 800adf0:	4620      	mov	r0, r4
 800adf2:	f7ff ff97 	bl	800ad24 <SPI_WaitFlagStateUntilTimeout>
 800adf6:	4605      	mov	r5, r0
 800adf8:	b128      	cbz	r0, 800ae06 <SPI_EndRxTransaction+0x46>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800adfc:	f043 0320 	orr.w	r3, r3, #32
 800ae00:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae02:	2503      	movs	r5, #3
 800ae04:	e014      	b.n	800ae30 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae06:	6863      	ldr	r3, [r4, #4]
 800ae08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae0c:	d110      	bne.n	800ae30 <SPI_EndRxTransaction+0x70>
 800ae0e:	68a3      	ldr	r3, [r4, #8]
 800ae10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae14:	d002      	beq.n	800ae1c <SPI_EndRxTransaction+0x5c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae1a:	d109      	bne.n	800ae30 <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae1c:	9700      	str	r7, [sp, #0]
 800ae1e:	4633      	mov	r3, r6
 800ae20:	2200      	movs	r2, #0
 800ae22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7ff ff9f 	bl	800ad6a <SPI_WaitFifoStateUntilTimeout>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1e4      	bne.n	800adfa <SPI_EndRxTransaction+0x3a>
}
 800ae30:	4628      	mov	r0, r5
 800ae32:	b003      	add	sp, #12
 800ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae36 <SPI_EndRxTxTransaction>:
{
 800ae36:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae38:	460b      	mov	r3, r1
 800ae3a:	9200      	str	r2, [sp, #0]
{
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ae44:	2200      	movs	r2, #0
{
 800ae46:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae48:	f7ff ff8f 	bl	800ad6a <SPI_WaitFifoStateUntilTimeout>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	b128      	cbz	r0, 800ae5c <SPI_EndRxTxTransaction+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae50:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ae52:	f043 0320 	orr.w	r3, r3, #32
 800ae56:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae58:	2003      	movs	r0, #3
 800ae5a:	e011      	b.n	800ae80 <SPI_EndRxTxTransaction+0x4a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae5c:	9600      	str	r6, [sp, #0]
 800ae5e:	462b      	mov	r3, r5
 800ae60:	2180      	movs	r1, #128	; 0x80
 800ae62:	4620      	mov	r0, r4
 800ae64:	f7ff ff5e 	bl	800ad24 <SPI_WaitFlagStateUntilTimeout>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d1f0      	bne.n	800ae50 <SPI_EndRxTxTransaction+0x1a>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae6e:	9600      	str	r6, [sp, #0]
 800ae70:	462b      	mov	r3, r5
 800ae72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ae76:	4620      	mov	r0, r4
 800ae78:	f7ff ff77 	bl	800ad6a <SPI_WaitFifoStateUntilTimeout>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d1e7      	bne.n	800ae50 <SPI_EndRxTxTransaction+0x1a>
  }

  return HAL_OK;
}
 800ae80:	b002      	add	sp, #8
 800ae82:	bd70      	pop	{r4, r5, r6, pc}

0800ae84 <HAL_SPI_MspInit>:
}
 800ae84:	4770      	bx	lr

0800ae86 <HAL_SPI_Init>:
{
 800ae86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800ae88:	4604      	mov	r4, r0
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d053      	beq.n	800af36 <HAL_SPI_Init+0xb0>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae8e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800ae92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae96:	b91b      	cbnz	r3, 800aea0 <HAL_SPI_Init+0x1a>
    hspi->Lock = HAL_UNLOCKED;
 800ae98:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800ae9c:	f7ff fff2 	bl	800ae84 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800aea0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800aea2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800aea4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800aea8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aeaa:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800aeac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aeb0:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aeba:	d83e      	bhi.n	800af3a <HAL_SPI_Init+0xb4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aebc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aec0:	d000      	beq.n	800aec4 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aec2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aec6:	b92b      	cbnz	r3, 800aed4 <HAL_SPI_Init+0x4e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aec8:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800aecc:	bf8c      	ite	hi
 800aece:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800aed0:	2301      	movls	r3, #1
 800aed2:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800aed4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800aed8:	433b      	orrs	r3, r7
 800aeda:	6927      	ldr	r7, [r4, #16]
 800aedc:	69a1      	ldr	r1, [r4, #24]
 800aede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aee0:	433b      	orrs	r3, r7
 800aee2:	6967      	ldr	r7, [r4, #20]
 800aee4:	433b      	orrs	r3, r7
 800aee6:	69e7      	ldr	r7, [r4, #28]
 800aee8:	433b      	orrs	r3, r7
 800aeea:	6a27      	ldr	r7, [r4, #32]
 800aeec:	433b      	orrs	r3, r7
 800aeee:	4333      	orrs	r3, r6
 800aef0:	f401 7700 	and.w	r7, r1, #512	; 0x200
 800aef4:	433b      	orrs	r3, r7
 800aef6:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800aef8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aefa:	2b02      	cmp	r3, #2
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 800aefc:	bf02      	ittt	eq
 800aefe:	6813      	ldreq	r3, [r2, #0]
 800af00:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800af04:	6013      	streq	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800af06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af08:	431d      	orrs	r5, r3
 800af0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af0c:	0c09      	lsrs	r1, r1, #16
 800af0e:	431d      	orrs	r5, r3
 800af10:	f001 0104 	and.w	r1, r1, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af14:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800af18:	ea45 0501 	orr.w	r5, r5, r1
 800af1c:	ea40 0005 	orr.w	r0, r0, r5
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800af20:	bf08      	it	eq
 800af22:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800af24:	6050      	str	r0, [r2, #4]
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800af26:	bf08      	it	eq
 800af28:	6113      	streq	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af2a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800af2c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af2e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800af30:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800af34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800af36:	2001      	movs	r0, #1
 800af38:	e7fc      	b.n	800af34 <HAL_SPI_Init+0xae>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800af3a:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800af3c:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800af40:	e7be      	b.n	800aec0 <HAL_SPI_Init+0x3a>

0800af42 <HAL_SPI_MspDeInit>:
 800af42:	4770      	bx	lr

0800af44 <HAL_SPI_DeInit>:
{
 800af44:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800af46:	4604      	mov	r4, r0
 800af48:	b180      	cbz	r0, 800af6c <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800af4a:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800af4c:	2302      	movs	r3, #2
 800af4e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800af52:	6813      	ldr	r3, [r2, #0]
 800af54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af58:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800af5a:	f7ff fff2 	bl	800af42 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af5e:	2000      	movs	r0, #0
 800af60:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800af62:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800af66:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 800af6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800af6c:	2001      	movs	r0, #1
 800af6e:	e7fc      	b.n	800af6a <HAL_SPI_DeInit+0x26>

0800af70 <HAL_SPI_TransmitReceive>:
{
 800af70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af74:	b085      	sub	sp, #20
 800af76:	4698      	mov	r8, r3
  __IO uint16_t tmpreg = 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	f8ad 300e 	strh.w	r3, [sp, #14]
  __HAL_LOCK(hspi);
 800af7e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800af82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800af84:	2b01      	cmp	r3, #1
{
 800af86:	4604      	mov	r4, r0
 800af88:	460d      	mov	r5, r1
 800af8a:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800af8c:	f000 81a1 	beq.w	800b2d2 <HAL_SPI_TransmitReceive+0x362>
 800af90:	2301      	movs	r3, #1
 800af92:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800af96:	f7fd fd5d 	bl	8008a54 <HAL_GetTick>
  tmp  = hspi->State;
 800af9a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800af9e:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800afa0:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800afa2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800afa4:	4607      	mov	r7, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800afa6:	d00a      	beq.n	800afbe <HAL_SPI_TransmitReceive+0x4e>
 800afa8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800afac:	f040 818f 	bne.w	800b2ce <HAL_SPI_TransmitReceive+0x35e>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800afb0:	68a2      	ldr	r2, [r4, #8]
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	f040 818b 	bne.w	800b2ce <HAL_SPI_TransmitReceive+0x35e>
 800afb8:	2b04      	cmp	r3, #4
 800afba:	f040 8188 	bne.w	800b2ce <HAL_SPI_TransmitReceive+0x35e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	f000 816e 	beq.w	800b2a0 <HAL_SPI_TransmitReceive+0x330>
 800afc4:	f1b9 0f00 	cmp.w	r9, #0
 800afc8:	f000 816a 	beq.w	800b2a0 <HAL_SPI_TransmitReceive+0x330>
 800afcc:	f1b8 0f00 	cmp.w	r8, #0
 800afd0:	f000 8166 	beq.w	800b2a0 <HAL_SPI_TransmitReceive+0x330>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afd4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800afda:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afde:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800afe0:	bf1c      	itt	ne
 800afe2:	2305      	movne	r3, #5
 800afe4:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afe8:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800aff0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800aff4:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800aff8:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800affc:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800affe:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b002:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
 800b006:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b008:	d107      	bne.n	800b01a <HAL_SPI_TransmitReceive+0xaa>
    SPI_RESET_CRC(hspi);
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b010:	601a      	str	r2, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b018:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800b01a:	68e0      	ldr	r0, [r4, #12]
 800b01c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b020:	d803      	bhi.n	800b02a <HAL_SPI_TransmitReceive+0xba>
 800b022:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b026:	2a01      	cmp	r2, #1
 800b028:	d936      	bls.n	800b098 <HAL_SPI_TransmitReceive+0x128>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b030:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800b036:	bf5e      	ittt	pl
 800b038:	681a      	ldrpl	r2, [r3, #0]
 800b03a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800b03e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b040:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b044:	d97d      	bls.n	800b142 <HAL_SPI_TransmitReceive+0x1d2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800b046:	b119      	cbz	r1, 800b050 <HAL_SPI_TransmitReceive+0xe0>
 800b048:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b04a:	b292      	uxth	r2, r2
 800b04c:	2a01      	cmp	r2, #1
 800b04e:	d106      	bne.n	800b05e <HAL_SPI_TransmitReceive+0xee>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800b050:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b054:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800b056:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b058:	3b01      	subs	r3, #1
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800b05e:	f04f 0801 	mov.w	r8, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b062:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b064:	b29b      	uxth	r3, r3
 800b066:	b9db      	cbnz	r3, 800b0a0 <HAL_SPI_TransmitReceive+0x130>
 800b068:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	b9bb      	cbnz	r3, 800b0a0 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b076:	f040 80fc 	bne.w	800b272 <HAL_SPI_TransmitReceive+0x302>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b07a:	2201      	movs	r2, #1
 800b07c:	9700      	str	r7, [sp, #0]
 800b07e:	4633      	mov	r3, r6
 800b080:	4611      	mov	r1, r2
 800b082:	4620      	mov	r0, r4
 800b084:	f7ff fe4e 	bl	800ad24 <SPI_WaitFlagStateUntilTimeout>
 800b088:	2800      	cmp	r0, #0
 800b08a:	f000 80e7 	beq.w	800b25c <HAL_SPI_TransmitReceive+0x2ec>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b08e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b090:	f043 0302 	orr.w	r3, r3, #2
 800b094:	6623      	str	r3, [r4, #96]	; 0x60
 800b096:	e049      	b.n	800b12c <HAL_SPI_TransmitReceive+0x1bc>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b09e:	e7c7      	b.n	800b030 <HAL_SPI_TransmitReceive+0xc0>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b0a0:	f1b8 0f00 	cmp.w	r8, #0
 800b0a4:	d028      	beq.n	800b0f8 <HAL_SPI_TransmitReceive+0x188>
 800b0a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	b32b      	cbz	r3, 800b0f8 <HAL_SPI_TransmitReceive+0x188>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	0790      	lsls	r0, r2, #30
 800b0b2:	d521      	bpl.n	800b0f8 <HAL_SPI_TransmitReceive+0x188>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b0b4:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b0b8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800b0ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b0bc:	3a01      	subs	r2, #1
 800b0be:	b292      	uxth	r2, r2
 800b0c0:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b0c2:	f8b4 803e 	ldrh.w	r8, [r4, #62]	; 0x3e
 800b0c6:	fa1f f888 	uxth.w	r8, r8
 800b0ca:	f1b8 0f00 	cmp.w	r8, #0
 800b0ce:	d111      	bne.n	800b0f4 <HAL_SPI_TransmitReceive+0x184>
 800b0d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b0d2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b0d6:	d10f      	bne.n	800b0f8 <HAL_SPI_TransmitReceive+0x188>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	0751      	lsls	r1, r2, #29
 800b0dc:	d406      	bmi.n	800b0ec <HAL_SPI_TransmitReceive+0x17c>
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	0712      	lsls	r2, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b0e2:	bf42      	ittt	mi
 800b0e4:	681a      	ldrmi	r2, [r3, #0]
 800b0e6:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b0ea:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b0f2:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b0f4:	f04f 0800 	mov.w	r8, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b0f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	b173      	cbz	r3, 800b11e <HAL_SPI_TransmitReceive+0x1ae>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	07d0      	lsls	r0, r2, #31
 800b106:	d50a      	bpl.n	800b11e <HAL_SPI_TransmitReceive+0x1ae>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	f829 3b02 	strh.w	r3, [r9], #2
        hspi->RxXferCount--;
 800b10e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b112:	3b01      	subs	r3, #1
 800b114:	b29b      	uxth	r3, r3
 800b116:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800b11a:	f04f 0801 	mov.w	r8, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b11e:	1c71      	adds	r1, r6, #1
 800b120:	d09f      	beq.n	800b062 <HAL_SPI_TransmitReceive+0xf2>
 800b122:	f7fd fc97 	bl	8008a54 <HAL_GetTick>
 800b126:	1bc0      	subs	r0, r0, r7
 800b128:	42b0      	cmp	r0, r6
 800b12a:	d39a      	bcc.n	800b062 <HAL_SPI_TransmitReceive+0xf2>
          errorcode = HAL_TIMEOUT;
 800b12c:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b12e:	2301      	movs	r3, #1
 800b130:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b134:	2300      	movs	r3, #0
 800b136:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b13a:	4628      	mov	r0, r5
 800b13c:	b005      	add	sp, #20
 800b13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800b142:	b119      	cbz	r1, 800b14c <HAL_SPI_TransmitReceive+0x1dc>
 800b144:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b146:	b292      	uxth	r2, r2
 800b148:	2a01      	cmp	r2, #1
 800b14a:	d109      	bne.n	800b160 <HAL_SPI_TransmitReceive+0x1f0>
      if (hspi->TxXferCount > 1U)
 800b14c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b14e:	2a01      	cmp	r2, #1
 800b150:	d968      	bls.n	800b224 <HAL_SPI_TransmitReceive+0x2b4>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b152:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b156:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800b158:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b15a:	3b02      	subs	r3, #2
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800b160:	f04f 0801 	mov.w	r8, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b164:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b166:	b29b      	uxth	r3, r3
 800b168:	b92b      	cbnz	r3, 800b176 <HAL_SPI_TransmitReceive+0x206>
 800b16a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b16e:	b29b      	uxth	r3, r3
 800b170:	2b00      	cmp	r3, #0
 800b172:	f43f af7d 	beq.w	800b070 <HAL_SPI_TransmitReceive+0x100>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b176:	f1b8 0f00 	cmp.w	r8, #0
 800b17a:	d02c      	beq.n	800b1d6 <HAL_SPI_TransmitReceive+0x266>
 800b17c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b17e:	b29b      	uxth	r3, r3
 800b180:	b34b      	cbz	r3, 800b1d6 <HAL_SPI_TransmitReceive+0x266>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	689a      	ldr	r2, [r3, #8]
 800b186:	0792      	lsls	r2, r2, #30
 800b188:	d525      	bpl.n	800b1d6 <HAL_SPI_TransmitReceive+0x266>
        if (hspi->TxXferCount > 1U)
 800b18a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b18c:	2a01      	cmp	r2, #1
 800b18e:	d951      	bls.n	800b234 <HAL_SPI_TransmitReceive+0x2c4>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800b190:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b194:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800b196:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b198:	3b02      	subs	r3, #2
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b19e:	f8b4 803e 	ldrh.w	r8, [r4, #62]	; 0x3e
 800b1a2:	fa1f f888 	uxth.w	r8, r8
 800b1a6:	f1b8 0f00 	cmp.w	r8, #0
 800b1aa:	d112      	bne.n	800b1d2 <HAL_SPI_TransmitReceive+0x262>
 800b1ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b1ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b1b2:	d110      	bne.n	800b1d6 <HAL_SPI_TransmitReceive+0x266>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	0750      	lsls	r0, r2, #29
 800b1ba:	d406      	bmi.n	800b1ca <HAL_SPI_TransmitReceive+0x25a>
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	0711      	lsls	r1, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b1c0:	bf42      	ittt	mi
 800b1c2:	681a      	ldrmi	r2, [r3, #0]
 800b1c4:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b1c8:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b1d0:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b1d2:	f04f 0800 	mov.w	r8, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b1d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	b1d3      	cbz	r3, 800b214 <HAL_SPI_TransmitReceive+0x2a4>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	07d2      	lsls	r2, r2, #31
 800b1e4:	d516      	bpl.n	800b214 <HAL_SPI_TransmitReceive+0x2a4>
        if (hspi->RxXferCount > 1U)
 800b1e6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b1ea:	2a01      	cmp	r2, #1
 800b1ec:	d92a      	bls.n	800b244 <HAL_SPI_TransmitReceive+0x2d4>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b1ee:	68da      	ldr	r2, [r3, #12]
 800b1f0:	f829 2b02 	strh.w	r2, [r9], #2
          hspi->RxXferCount -= 2U;
 800b1f4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b1f8:	3a02      	subs	r2, #2
 800b1fa:	b292      	uxth	r2, r2
 800b1fc:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b200:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b204:	2a01      	cmp	r2, #1
 800b206:	d803      	bhi.n	800b210 <HAL_SPI_TransmitReceive+0x2a0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b20e:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800b210:	f04f 0801 	mov.w	r8, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b214:	1c73      	adds	r3, r6, #1
 800b216:	d0a5      	beq.n	800b164 <HAL_SPI_TransmitReceive+0x1f4>
 800b218:	f7fd fc1c 	bl	8008a54 <HAL_GetTick>
 800b21c:	1bc0      	subs	r0, r0, r7
 800b21e:	42b0      	cmp	r0, r6
 800b220:	d3a0      	bcc.n	800b164 <HAL_SPI_TransmitReceive+0x1f4>
 800b222:	e783      	b.n	800b12c <HAL_SPI_TransmitReceive+0x1bc>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b224:	782a      	ldrb	r2, [r5, #0]
 800b226:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800b228:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b22a:	3b01      	subs	r3, #1
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b230:	3501      	adds	r5, #1
 800b232:	e795      	b.n	800b160 <HAL_SPI_TransmitReceive+0x1f0>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b234:	782a      	ldrb	r2, [r5, #0]
 800b236:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800b238:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b23a:	3b01      	subs	r3, #1
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b240:	3501      	adds	r5, #1
 800b242:	e7ac      	b.n	800b19e <HAL_SPI_TransmitReceive+0x22e>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b244:	7b1b      	ldrb	r3, [r3, #12]
 800b246:	f889 3000 	strb.w	r3, [r9]
          hspi->RxXferCount--;
 800b24a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b24e:	3b01      	subs	r3, #1
 800b250:	b29b      	uxth	r3, r3
 800b252:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b256:	f109 0901 	add.w	r9, r9, #1
 800b25a:	e7d9      	b.n	800b210 <HAL_SPI_TransmitReceive+0x2a0>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b25c:	68e2      	ldr	r2, [r4, #12]
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b264:	d11e      	bne.n	800b2a4 <HAL_SPI_TransmitReceive+0x334>
      tmpreg = hspi->Instance->DR;
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b26a:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b26e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	6895      	ldr	r5, [r2, #8]
 800b276:	f015 0510 	ands.w	r5, r5, #16
 800b27a:	d007      	beq.n	800b28c <HAL_SPI_TransmitReceive+0x31c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b27c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b27e:	f043 0302 	orr.w	r3, r3, #2
 800b282:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b284:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b288:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 800b28a:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b28c:	463a      	mov	r2, r7
 800b28e:	4631      	mov	r1, r6
 800b290:	4620      	mov	r0, r4
 800b292:	f7ff fdd0 	bl	800ae36 <SPI_EndRxTxTransaction>
 800b296:	2800      	cmp	r0, #0
 800b298:	f43f af49 	beq.w	800b12e <HAL_SPI_TransmitReceive+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b29c:	2320      	movs	r3, #32
 800b29e:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b2a0:	2501      	movs	r5, #1
 800b2a2:	e744      	b.n	800b12e <HAL_SPI_TransmitReceive+0x1be>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b2a4:	7b1b      	ldrb	r3, [r3, #12]
 800b2a6:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 800b2aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b2ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d1de      	bne.n	800b272 <HAL_SPI_TransmitReceive+0x302>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	9700      	str	r7, [sp, #0]
 800b2b8:	4633      	mov	r3, r6
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7ff fd31 	bl	800ad24 <SPI_WaitFlagStateUntilTimeout>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f47f aee3 	bne.w	800b08e <HAL_SPI_TransmitReceive+0x11e>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	7b1b      	ldrb	r3, [r3, #12]
 800b2cc:	e7cd      	b.n	800b26a <HAL_SPI_TransmitReceive+0x2fa>
    errorcode = HAL_BUSY;
 800b2ce:	2502      	movs	r5, #2
 800b2d0:	e72d      	b.n	800b12e <HAL_SPI_TransmitReceive+0x1be>
  __HAL_LOCK(hspi);
 800b2d2:	2502      	movs	r5, #2
 800b2d4:	e731      	b.n	800b13a <HAL_SPI_TransmitReceive+0x1ca>

0800b2d6 <HAL_SPI_Receive>:
{
 800b2d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b2da:	461d      	mov	r5, r3
  __IO uint16_t tmpreg = 0U;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f8ad 300e 	strh.w	r3, [sp, #14]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b2e2:	6843      	ldr	r3, [r0, #4]
 800b2e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	460e      	mov	r6, r1
 800b2ec:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b2ee:	d10c      	bne.n	800b30a <HAL_SPI_Receive+0x34>
 800b2f0:	6883      	ldr	r3, [r0, #8]
 800b2f2:	b953      	cbnz	r3, 800b30a <HAL_SPI_Receive+0x34>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b2f4:	2304      	movs	r3, #4
 800b2f6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	9500      	str	r5, [sp, #0]
 800b2fe:	460a      	mov	r2, r1
 800b300:	f7ff fe36 	bl	800af70 <HAL_SPI_TransmitReceive>
}
 800b304:	b004      	add	sp, #16
 800b306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800b30a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b30e:	2b01      	cmp	r3, #1
 800b310:	f000 80f6 	beq.w	800b500 <HAL_SPI_Receive+0x22a>
 800b314:	2301      	movs	r3, #1
 800b316:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b31a:	f7fd fb9b 	bl	8008a54 <HAL_GetTick>
 800b31e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b320:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800b324:	b2c0      	uxtb	r0, r0
 800b326:	2801      	cmp	r0, #1
 800b328:	f040 80e8 	bne.w	800b4fc <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 800b32c:	2e00      	cmp	r6, #0
 800b32e:	f000 8092 	beq.w	800b456 <HAL_SPI_Receive+0x180>
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	f000 808e 	beq.w	800b456 <HAL_SPI_Receive+0x180>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b33a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b33c:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b33e:	2304      	movs	r3, #4
 800b340:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b344:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b34e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b350:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 800b354:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b356:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b358:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = Size;
 800b35c:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
 800b360:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b362:	d10d      	bne.n	800b380 <HAL_SPI_Receive+0xaa>
    SPI_RESET_CRC(hspi);
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b36a:	601a      	str	r2, [r3, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b372:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 800b374:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b378:	3a01      	subs	r2, #1
 800b37a:	b292      	uxth	r2, r2
 800b37c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b380:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b382:	685a      	ldr	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b384:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b388:	bf8c      	ite	hi
 800b38a:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b38e:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
 800b392:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b394:	68a2      	ldr	r2, [r4, #8]
 800b396:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b39a:	bf02      	ittt	eq
 800b39c:	681a      	ldreq	r2, [r3, #0]
 800b39e:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b3a2:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800b3a8:	bf5e      	ittt	pl
 800b3aa:	681a      	ldrpl	r2, [r3, #0]
 800b3ac:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800b3b0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b3b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b3b6:	d91e      	bls.n	800b3f6 <HAL_SPI_Receive+0x120>
    while (hspi->RxXferCount > 0U)
 800b3b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	b1fb      	cbz	r3, 800b400 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	07d1      	lsls	r1, r2, #31
 800b3c6:	d555      	bpl.n	800b474 <HAL_SPI_Receive+0x19e>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800b3ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b3da:	e7ed      	b.n	800b3b8 <HAL_SPI_Receive+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	07d2      	lsls	r2, r2, #31
 800b3e2:	d536      	bpl.n	800b452 <HAL_SPI_Receive+0x17c>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b3e4:	7b1b      	ldrb	r3, [r3, #12]
 800b3e6:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800b3ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800b3f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1ed      	bne.n	800b3dc <HAL_SPI_Receive+0x106>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b406:	d14a      	bne.n	800b49e <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	6813      	ldr	r3, [r2, #0]
 800b40c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b410:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b412:	2201      	movs	r2, #1
 800b414:	9700      	str	r7, [sp, #0]
 800b416:	462b      	mov	r3, r5
 800b418:	4611      	mov	r1, r2
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff fc82 	bl	800ad24 <SPI_WaitFlagStateUntilTimeout>
 800b420:	b9c0      	cbnz	r0, 800b454 <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b422:	68e2      	ldr	r2, [r4, #12]
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b42a:	bf8a      	itet	hi
 800b42c:	68db      	ldrhi	r3, [r3, #12]
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b42e:	7b1b      	ldrbls	r3, [r3, #12]
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b430:	8033      	strhhi	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b432:	f04f 0201 	mov.w	r2, #1
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b436:	bf98      	it	ls
 800b438:	7033      	strbls	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b43a:	9700      	str	r7, [sp, #0]
 800b43c:	462b      	mov	r3, r5
 800b43e:	4611      	mov	r1, r2
 800b440:	4620      	mov	r0, r4
 800b442:	f7ff fc6f 	bl	800ad24 <SPI_WaitFlagStateUntilTimeout>
 800b446:	b1f8      	cbz	r0, 800b488 <HAL_SPI_Receive+0x1b2>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b448:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b44a:	f043 0302 	orr.w	r3, r3, #2
 800b44e:	6623      	str	r3, [r4, #96]	; 0x60
 800b450:	e000      	b.n	800b454 <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b452:	b93d      	cbnz	r5, 800b464 <HAL_SPI_Receive+0x18e>
          errorcode = HAL_TIMEOUT;
 800b454:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b456:	2301      	movs	r3, #1
 800b458:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b45c:	2300      	movs	r3, #0
 800b45e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800b462:	e74f      	b.n	800b304 <HAL_SPI_Receive+0x2e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b464:	1c68      	adds	r0, r5, #1
 800b466:	d0c6      	beq.n	800b3f6 <HAL_SPI_Receive+0x120>
 800b468:	f7fd faf4 	bl	8008a54 <HAL_GetTick>
 800b46c:	1bc0      	subs	r0, r0, r7
 800b46e:	42a8      	cmp	r0, r5
 800b470:	d3c1      	bcc.n	800b3f6 <HAL_SPI_Receive+0x120>
 800b472:	e7ef      	b.n	800b454 <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b474:	2d00      	cmp	r5, #0
 800b476:	d0ed      	beq.n	800b454 <HAL_SPI_Receive+0x17e>
 800b478:	1c6a      	adds	r2, r5, #1
 800b47a:	d09d      	beq.n	800b3b8 <HAL_SPI_Receive+0xe2>
 800b47c:	f7fd faea 	bl	8008a54 <HAL_GetTick>
 800b480:	1bc0      	subs	r0, r0, r7
 800b482:	42a8      	cmp	r0, r5
 800b484:	d398      	bcc.n	800b3b8 <HAL_SPI_Receive+0xe2>
 800b486:	e7e5      	b.n	800b454 <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b488:	68e2      	ldr	r2, [r4, #12]
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b490:	d11d      	bne.n	800b4ce <HAL_SPI_Receive+0x1f8>
      tmpreg = hspi->Instance->DR;
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b496:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b49a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b49e:	463a      	mov	r2, r7
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7ff fc8c 	bl	800adc0 <SPI_EndRxTransaction>
 800b4a8:	b108      	cbz	r0, 800b4ae <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4aa:	2320      	movs	r3, #32
 800b4ac:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b4ae:	6822      	ldr	r2, [r4, #0]
 800b4b0:	6893      	ldr	r3, [r2, #8]
 800b4b2:	06db      	lsls	r3, r3, #27
 800b4b4:	d506      	bpl.n	800b4c4 <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b4b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b4b8:	f043 0302 	orr.w	r3, r3, #2
 800b4bc:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b4be:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b4c2:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b4c6:	3000      	adds	r0, #0
 800b4c8:	bf18      	it	ne
 800b4ca:	2001      	movne	r0, #1
error :
 800b4cc:	e7c3      	b.n	800b456 <HAL_SPI_Receive+0x180>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b4ce:	7b1b      	ldrb	r3, [r3, #12]
 800b4d0:	f8ad 300e 	strh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b4d4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 800b4d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b4dc:	d1df      	bne.n	800b49e <HAL_SPI_Receive+0x1c8>
 800b4de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d1dc      	bne.n	800b49e <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout, tickstart) != HAL_OK)
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	9700      	str	r7, [sp, #0]
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7ff fc19 	bl	800ad24 <SPI_WaitFlagStateUntilTimeout>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d1a8      	bne.n	800b448 <HAL_SPI_Receive+0x172>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	7b1b      	ldrb	r3, [r3, #12]
 800b4fa:	e7cc      	b.n	800b496 <HAL_SPI_Receive+0x1c0>
    errorcode = HAL_BUSY;
 800b4fc:	2002      	movs	r0, #2
 800b4fe:	e7aa      	b.n	800b456 <HAL_SPI_Receive+0x180>
  __HAL_LOCK(hspi);
 800b500:	2002      	movs	r0, #2
 800b502:	e6ff      	b.n	800b304 <HAL_SPI_Receive+0x2e>

0800b504 <HAL_SPI_Transmit_IT>:
{
 800b504:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800b506:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800b50a:	2801      	cmp	r0, #1
 800b50c:	d04a      	beq.n	800b5a4 <HAL_SPI_Transmit_IT+0xa0>
 800b50e:	2001      	movs	r0, #1
 800b510:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800b514:	2900      	cmp	r1, #0
 800b516:	d03d      	beq.n	800b594 <HAL_SPI_Transmit_IT+0x90>
 800b518:	2a00      	cmp	r2, #0
 800b51a:	d03b      	beq.n	800b594 <HAL_SPI_Transmit_IT+0x90>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b51c:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 800b520:	2801      	cmp	r0, #1
 800b522:	d13b      	bne.n	800b59c <HAL_SPI_Transmit_IT+0x98>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b524:	2003      	movs	r0, #3
 800b526:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b52a:	2000      	movs	r0, #0
 800b52c:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->TxXferSize  = Size;
 800b52e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b530:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b532:	68da      	ldr	r2, [r3, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b534:	6399      	str	r1, [r3, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b536:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b53a:	6899      	ldr	r1, [r3, #8]
    hspi->TxISR = SPI_TxISR_16BIT;
 800b53c:	bf8c      	ite	hi
 800b53e:	4a1a      	ldrhi	r2, [pc, #104]	; (800b5a8 <HAL_SPI_Transmit_IT+0xa4>)
    hspi->TxISR = SPI_TxISR_8BIT;
 800b540:	4a1a      	ldrls	r2, [pc, #104]	; (800b5ac <HAL_SPI_Transmit_IT+0xa8>)
 800b542:	651a      	str	r2, [r3, #80]	; 0x50
 800b544:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferCount = 0U;
 800b546:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b54a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800b54e:	bf08      	it	eq
 800b550:	6811      	ldreq	r1, [r2, #0]
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b552:	6418      	str	r0, [r3, #64]	; 0x40
    SPI_1LINE_TX(hspi);
 800b554:	bf08      	it	eq
 800b556:	f441 4180 	orreq.w	r1, r1, #16384	; 0x4000
  hspi->RxXferSize  = 0U;
 800b55a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b55e:	64d8      	str	r0, [r3, #76]	; 0x4c
    SPI_1LINE_TX(hspi);
 800b560:	bf08      	it	eq
 800b562:	6011      	streq	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b564:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b566:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b56a:	d107      	bne.n	800b57c <HAL_SPI_Transmit_IT+0x78>
    SPI_RESET_CRC(hspi);
 800b56c:	6811      	ldr	r1, [r2, #0]
 800b56e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b572:	6011      	str	r1, [r2, #0]
 800b574:	6811      	ldr	r1, [r2, #0]
 800b576:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b57a:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b57c:	6851      	ldr	r1, [r2, #4]
 800b57e:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 800b582:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b584:	6810      	ldr	r0, [r2, #0]
 800b586:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b58a:	d109      	bne.n	800b5a0 <HAL_SPI_Transmit_IT+0x9c>
    __HAL_SPI_ENABLE(hspi);
 800b58c:	6811      	ldr	r1, [r2, #0]
 800b58e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b592:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b594:	2200      	movs	r2, #0
 800b596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b59a:	4770      	bx	lr
    errorcode = HAL_BUSY;
 800b59c:	2002      	movs	r0, #2
 800b59e:	e7f9      	b.n	800b594 <HAL_SPI_Transmit_IT+0x90>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	e7f7      	b.n	800b594 <HAL_SPI_Transmit_IT+0x90>
  __HAL_LOCK(hspi);
 800b5a4:	2002      	movs	r0, #2
}
 800b5a6:	4770      	bx	lr
 800b5a8:	0800b835 	.word	0x0800b835
 800b5ac:	0800b803 	.word	0x0800b803

0800b5b0 <HAL_SPI_TransmitReceive_IT>:
{
 800b5b0:	b530      	push	{r4, r5, lr}
 800b5b2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800b5b4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800b5b8:	2801      	cmp	r0, #1
 800b5ba:	d072      	beq.n	800b6a2 <HAL_SPI_TransmitReceive_IT+0xf2>
 800b5bc:	2001      	movs	r0, #1
 800b5be:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp  = hspi->State;
 800b5c2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800b5c6:	b2c0      	uxtb	r0, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b5c8:	2801      	cmp	r0, #1
 800b5ca:	d008      	beq.n	800b5de <HAL_SPI_TransmitReceive_IT+0x2e>
 800b5cc:	6865      	ldr	r5, [r4, #4]
 800b5ce:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800b5d2:	d160      	bne.n	800b696 <HAL_SPI_TransmitReceive_IT+0xe6>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800b5d4:	68a5      	ldr	r5, [r4, #8]
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	d15d      	bne.n	800b696 <HAL_SPI_TransmitReceive_IT+0xe6>
 800b5da:	2804      	cmp	r0, #4
 800b5dc:	d15b      	bne.n	800b696 <HAL_SPI_TransmitReceive_IT+0xe6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	d05b      	beq.n	800b69a <HAL_SPI_TransmitReceive_IT+0xea>
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	d059      	beq.n	800b69a <HAL_SPI_TransmitReceive_IT+0xea>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d057      	beq.n	800b69a <HAL_SPI_TransmitReceive_IT+0xea>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5ea:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5ee:	6422      	str	r2, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5f0:	2804      	cmp	r0, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5f2:	68e2      	ldr	r2, [r4, #12]
  hspi->TxXferSize  = Size;
 800b5f4:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b5f6:	bf1c      	itt	ne
 800b5f8:	2005      	movne	r0, #5
 800b5fa:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5fe:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b602:	f04f 0000 	mov.w	r0, #0
  hspi->RxXferSize  = Size;
 800b606:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b60a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b60c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800b60e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b612:	bf8b      	itete	hi
 800b614:	4b24      	ldrhi	r3, [pc, #144]	; (800b6a8 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b616:	4b25      	ldrls	r3, [pc, #148]	; (800b6ac <HAL_SPI_TransmitReceive_IT+0xfc>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b618:	64e3      	strhi	r3, [r4, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b61a:	64e3      	strls	r3, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800b61c:	bf8c      	ite	hi
 800b61e:	4b24      	ldrhi	r3, [pc, #144]	; (800b6b0 <HAL_SPI_TransmitReceive_IT+0x100>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800b620:	4b24      	ldrls	r3, [pc, #144]	; (800b6b4 <HAL_SPI_TransmitReceive_IT+0x104>)
 800b622:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b626:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	d12b      	bne.n	800b688 <HAL_SPI_TransmitReceive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b630:	2101      	movs	r1, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b632:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b636:	64a1      	str	r1, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b638:	d803      	bhi.n	800b642 <HAL_SPI_TransmitReceive_IT+0x92>
 800b63a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b63c:	2902      	cmp	r1, #2
      hspi->CRCSize = 2U;
 800b63e:	bf08      	it	eq
 800b640:	64a1      	streq	r1, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b642:	6819      	ldr	r1, [r3, #0]
 800b644:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b648:	6019      	str	r1, [r3, #0]
 800b64a:	6819      	ldr	r1, [r3, #0]
 800b64c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b650:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 800b652:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b656:	d803      	bhi.n	800b660 <HAL_SPI_TransmitReceive_IT+0xb0>
 800b658:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b65c:	2a01      	cmp	r2, #1
 800b65e:	d916      	bls.n	800b68e <HAL_SPI_TransmitReceive_IT+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b666:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800b66e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b676:	d112      	bne.n	800b69e <HAL_SPI_TransmitReceive_IT+0xee>
    __HAL_SPI_ENABLE(hspi);
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b67e:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800b680:	2300      	movs	r3, #0
 800b682:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b686:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 800b688:	2100      	movs	r1, #0
 800b68a:	64a1      	str	r1, [r4, #72]	; 0x48
 800b68c:	e7e1      	b.n	800b652 <HAL_SPI_TransmitReceive_IT+0xa2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b694:	e7e7      	b.n	800b666 <HAL_SPI_TransmitReceive_IT+0xb6>
    errorcode = HAL_BUSY;
 800b696:	2002      	movs	r0, #2
 800b698:	e7f2      	b.n	800b680 <HAL_SPI_TransmitReceive_IT+0xd0>
    errorcode = HAL_ERROR;
 800b69a:	2001      	movs	r0, #1
 800b69c:	e7f0      	b.n	800b680 <HAL_SPI_TransmitReceive_IT+0xd0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e7ee      	b.n	800b680 <HAL_SPI_TransmitReceive_IT+0xd0>
  __HAL_LOCK(hspi);
 800b6a2:	2002      	movs	r0, #2
 800b6a4:	e7ef      	b.n	800b686 <HAL_SPI_TransmitReceive_IT+0xd6>
 800b6a6:	bf00      	nop
 800b6a8:	0800bb91 	.word	0x0800bb91
 800b6ac:	0800ba85 	.word	0x0800ba85
 800b6b0:	0800bb3b 	.word	0x0800bb3b
 800b6b4:	0800ba23 	.word	0x0800ba23

0800b6b8 <HAL_SPI_Receive_IT>:
{
 800b6b8:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b6ba:	6886      	ldr	r6, [r0, #8]
{
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	4613      	mov	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b6c2:	b956      	cbnz	r6, 800b6da <HAL_SPI_Receive_IT+0x22>
 800b6c4:	6842      	ldr	r2, [r0, #4]
 800b6c6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b6ca:	d106      	bne.n	800b6da <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b6cc:	2204      	movs	r2, #4
 800b6ce:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
}
 800b6d2:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b6d4:	460a      	mov	r2, r1
 800b6d6:	f7ff bf6b 	b.w	800b5b0 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 800b6da:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 800b6de:	2a01      	cmp	r2, #1
 800b6e0:	d05d      	beq.n	800b79e <HAL_SPI_Receive_IT+0xe6>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b6e2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 800b6e6:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 800b6e8:	b2c0      	uxtb	r0, r0
 800b6ea:	4290      	cmp	r0, r2
  __HAL_LOCK(hspi);
 800b6ec:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800b6f0:	d151      	bne.n	800b796 <HAL_SPI_Receive_IT+0xde>
  if ((pData == NULL) || (Size == 0U))
 800b6f2:	2d00      	cmp	r5, #0
 800b6f4:	d047      	beq.n	800b786 <HAL_SPI_Receive_IT+0xce>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d045      	beq.n	800b786 <HAL_SPI_Receive_IT+0xce>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6fa:	2100      	movs	r1, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->RxXferSize  = Size;
 800b702:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b706:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800b708:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b70c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = 0U;
 800b70e:	87e1      	strh	r1, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b710:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b712:	87a1      	strh	r1, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 800b714:	6521      	str	r1, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b716:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b718:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b71a:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b71c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b720:	bf8b      	itete	hi
 800b722:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b726:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b72a:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b72c:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800b72e:	bf8c      	ite	hi
 800b730:	4a1c      	ldrhi	r2, [pc, #112]	; (800b7a4 <HAL_SPI_Receive_IT+0xec>)
    hspi->RxISR = SPI_RxISR_8BIT;
 800b732:	4a1d      	ldrls	r2, [pc, #116]	; (800b7a8 <HAL_SPI_Receive_IT+0xf0>)
 800b734:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b736:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b73a:	bf02      	ittt	eq
 800b73c:	681a      	ldreq	r2, [r3, #0]
 800b73e:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b742:	601a      	streq	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b744:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b746:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b74a:	d121      	bne.n	800b790 <HAL_SPI_Receive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b74c:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b74e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b752:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b754:	d803      	bhi.n	800b75e <HAL_SPI_Receive_IT+0xa6>
 800b756:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b758:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 800b75a:	bf08      	it	eq
 800b75c:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b76c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b76e:	685a      	ldr	r2, [r3, #4]
 800b770:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b774:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b776:	6818      	ldr	r0, [r3, #0]
 800b778:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b77c:	d10d      	bne.n	800b79a <HAL_SPI_Receive_IT+0xe2>
    __HAL_SPI_ENABLE(hspi);
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b784:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800b786:	2300      	movs	r3, #0
 800b788:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b78c:	bc70      	pop	{r4, r5, r6}
 800b78e:	4770      	bx	lr
    hspi->CRCSize = 0U;
 800b790:	2200      	movs	r2, #0
 800b792:	64a2      	str	r2, [r4, #72]	; 0x48
 800b794:	e7eb      	b.n	800b76e <HAL_SPI_Receive_IT+0xb6>
    errorcode = HAL_BUSY;
 800b796:	2002      	movs	r0, #2
 800b798:	e7f5      	b.n	800b786 <HAL_SPI_Receive_IT+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b79a:	2000      	movs	r0, #0
 800b79c:	e7f3      	b.n	800b786 <HAL_SPI_Receive_IT+0xce>
  __HAL_LOCK(hspi);
 800b79e:	2002      	movs	r0, #2
 800b7a0:	e7f4      	b.n	800b78c <HAL_SPI_Receive_IT+0xd4>
 800b7a2:	bf00      	nop
 800b7a4:	0800b939 	.word	0x0800b939
 800b7a8:	0800b8bd 	.word	0x0800b8bd

0800b7ac <HAL_SPI_TxRxCpltCallback>:
 800b7ac:	4770      	bx	lr

0800b7ae <HAL_SPI_ErrorCallback>:
 800b7ae:	4770      	bx	lr

0800b7b0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b7b0:	b513      	push	{r0, r1, r4, lr}
 800b7b2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7b4:	f7fd f94e 	bl	8008a54 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b7b8:	6822      	ldr	r2, [r4, #0]
 800b7ba:	6853      	ldr	r3, [r2, #4]
 800b7bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7c0:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b7c2:	2164      	movs	r1, #100	; 0x64
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7ff fb35 	bl	800ae36 <SPI_EndRxTxTransaction>
 800b7cc:	b118      	cbz	r0, 800b7d6 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b7d0:	f043 0320 	orr.w	r3, r3, #32
 800b7d4:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	b933      	cbnz	r3, 800b7e8 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	68da      	ldr	r2, [r3, #12]
 800b7e0:	9201      	str	r2, [sp, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    HAL_SPI_ErrorCallback(hspi);
 800b7f0:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7f2:	b11b      	cbz	r3, 800b7fc <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 800b7f4:	f7ff ffdb 	bl	800b7ae <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 800b7f8:	b002      	add	sp, #8
 800b7fa:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 800b7fc:	f7f9 fa50 	bl	8004ca0 <HAL_SPI_TxCpltCallback>
}
 800b800:	e7fa      	b.n	800b7f8 <SPI_CloseTx_ISR+0x48>

0800b802 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b802:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	6382      	str	r2, [r0, #56]	; 0x38
 800b808:	6802      	ldr	r2, [r0, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	7313      	strb	r3, [r2, #12]
  hspi->TxXferCount--;
 800b80e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b810:	3b01      	subs	r3, #1
 800b812:	b29b      	uxth	r3, r3
 800b814:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800b816:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b818:	b29b      	uxth	r3, r3
 800b81a:	b953      	cbnz	r3, 800b832 <SPI_TxISR_8BIT+0x30>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b81c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b81e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b822:	bf01      	itttt	eq
 800b824:	6802      	ldreq	r2, [r0, #0]
 800b826:	6813      	ldreq	r3, [r2, #0]
 800b828:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b82c:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800b82e:	f7ff bfbf 	b.w	800b7b0 <SPI_CloseTx_ISR>
}
 800b832:	4770      	bx	lr

0800b834 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b834:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b836:	6802      	ldr	r2, [r0, #0]
 800b838:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b83c:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b83e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800b840:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b842:	3b01      	subs	r3, #1
 800b844:	b29b      	uxth	r3, r3
 800b846:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800b848:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	b94b      	cbnz	r3, 800b862 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b84e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b854:	bf02      	ittt	eq
 800b856:	6813      	ldreq	r3, [r2, #0]
 800b858:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b85c:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800b85e:	f7ff bfa7 	b.w	800b7b0 <SPI_CloseTx_ISR>
}
 800b862:	4770      	bx	lr

0800b864 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b864:	6802      	ldr	r2, [r0, #0]
 800b866:	6853      	ldr	r3, [r2, #4]
 800b868:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 800b86c:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b86e:	6053      	str	r3, [r2, #4]
{
 800b870:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b872:	f7fd f8ef 	bl	8008a54 <HAL_GetTick>
 800b876:	2164      	movs	r1, #100	; 0x64
 800b878:	4602      	mov	r2, r0
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7ff faa0 	bl	800adc0 <SPI_EndRxTransaction>
 800b880:	b118      	cbz	r0, 800b88a <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b882:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b884:	f043 0320 	orr.w	r3, r3, #32
 800b888:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b88a:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b88c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800b88e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b892:	6893      	ldr	r3, [r2, #8]
 800b894:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b898:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b89a:	d009      	beq.n	800b8b0 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b89c:	f043 0302 	orr.w	r3, r3, #2
 800b8a0:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b8a2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b8a6:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 800b8a8:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 800b8aa:	f7ff ff80 	bl	800b7ae <HAL_SPI_ErrorCallback>
}
 800b8ae:	e004      	b.n	800b8ba <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 800b8b0:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1f9      	bne.n	800b8aa <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 800b8b6:	f7f9 f9eb 	bl	8004c90 <HAL_SPI_RxCpltCallback>
}
 800b8ba:	bd10      	pop	{r4, pc}

0800b8bc <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 800b8bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b8be:	6802      	ldr	r2, [r0, #0]
 800b8c0:	1c59      	adds	r1, r3, #1
 800b8c2:	6401      	str	r1, [r0, #64]	; 0x40
 800b8c4:	7b12      	ldrb	r2, [r2, #12]
 800b8c6:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800b8c8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b8d4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d108      	bne.n	800b8f0 <SPI_RxISR_8BIT+0x34>
 800b8de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b8e4:	bf01      	itttt	eq
 800b8e6:	6802      	ldreq	r2, [r0, #0]
 800b8e8:	6813      	ldreq	r3, [r2, #0]
 800b8ea:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b8ee:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800b8f0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	b943      	cbnz	r3, 800b90a <SPI_RxISR_8BIT+0x4e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8fe:	d102      	bne.n	800b906 <SPI_RxISR_8BIT+0x4a>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800b900:	4b02      	ldr	r3, [pc, #8]	; (800b90c <SPI_RxISR_8BIT+0x50>)
 800b902:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b904:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800b906:	f7ff bfad 	b.w	800b864 <SPI_CloseRx_ISR>
}
 800b90a:	4770      	bx	lr
 800b90c:	0800b911 	.word	0x0800b911

0800b910 <SPI_RxISR_8BITCRC>:
{
 800b910:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800b912:	2300      	movs	r3, #0
 800b914:	f88d 3007 	strb.w	r3, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800b918:	6803      	ldr	r3, [r0, #0]
 800b91a:	7b1b      	ldrb	r3, [r3, #12]
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	f88d 3007 	strb.w	r3, [sp, #7]
  UNUSED(tmpreg);
 800b922:	f89d 3007 	ldrb.w	r3, [sp, #7]
  hspi->CRCSize--;
 800b926:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b928:	3b01      	subs	r3, #1
 800b92a:	6483      	str	r3, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800b92c:	b913      	cbnz	r3, 800b934 <SPI_RxISR_8BITCRC+0x24>
}
 800b92e:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 800b930:	f7ff bf98 	b.w	800b864 <SPI_CloseRx_ISR>
}
 800b934:	b002      	add	sp, #8
 800b936:	4770      	bx	lr

0800b938 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b938:	6802      	ldr	r2, [r0, #0]
 800b93a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b93c:	68d1      	ldr	r1, [r2, #12]
 800b93e:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b942:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800b944:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b948:	3b01      	subs	r3, #1
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b950:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b954:	b29b      	uxth	r3, r3
 800b956:	2b01      	cmp	r3, #1
 800b958:	d107      	bne.n	800b96a <SPI_RxISR_16BIT+0x32>
 800b95a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b95c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b960:	bf02      	ittt	eq
 800b962:	6813      	ldreq	r3, [r2, #0]
 800b964:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b968:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800b96a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b96e:	b29b      	uxth	r3, r3
 800b970:	b943      	cbnz	r3, 800b984 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b972:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b978:	d102      	bne.n	800b980 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800b97a:	4b03      	ldr	r3, [pc, #12]	; (800b988 <SPI_RxISR_16BIT+0x50>)
 800b97c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b97e:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800b980:	f7ff bf70 	b.w	800b864 <SPI_CloseRx_ISR>
}
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	0800b98d 	.word	0x0800b98d

0800b98c <SPI_RxISR_16BITCRC>:
{
 800b98c:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800b994:	6803      	ldr	r3, [r0, #0]
 800b996:	68da      	ldr	r2, [r3, #12]
 800b998:	b292      	uxth	r2, r2
 800b99a:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800b99e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b9a8:	605a      	str	r2, [r3, #4]
}
 800b9aa:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 800b9ac:	f7ff bf5a 	b.w	800b864 <SPI_CloseRx_ISR>

0800b9b0 <SPI_CloseRxTx_ISR>:
{
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800b9b4:	f7fd f84e 	bl	8008a54 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b9b8:	6822      	ldr	r2, [r4, #0]
 800b9ba:	6853      	ldr	r3, [r2, #4]
 800b9bc:	f023 0320 	bic.w	r3, r3, #32
 800b9c0:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b9c2:	2164      	movs	r1, #100	; 0x64
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f7ff fa35 	bl	800ae36 <SPI_EndRxTxTransaction>
 800b9cc:	b118      	cbz	r0, 800b9d6 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b9d0:	f043 0320 	orr.w	r3, r3, #32
 800b9d4:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b9d6:	6822      	ldr	r2, [r4, #0]
 800b9d8:	6893      	ldr	r3, [r2, #8]
 800b9da:	f013 0f10 	tst.w	r3, #16
 800b9de:	f04f 0301 	mov.w	r3, #1
 800b9e2:	d00c      	beq.n	800b9fe <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 800b9e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b9e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b9ea:	f043 0302 	orr.w	r3, r3, #2
 800b9ee:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b9f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b9f4:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f7ff fed9 	bl	800b7ae <HAL_SPI_ErrorCallback>
}
 800b9fc:	e00a      	b.n	800ba14 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b9fe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ba00:	b962      	cbnz	r2, 800ba1c <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ba02:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 800ba06:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ba0a:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 800ba0c:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ba0e:	d102      	bne.n	800ba16 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 800ba10:	f7f9 f93e 	bl	8004c90 <HAL_SPI_RxCpltCallback>
}
 800ba14:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 800ba16:	f7ff fec9 	bl	800b7ac <HAL_SPI_TxRxCpltCallback>
 800ba1a:	e7fb      	b.n	800ba14 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 800ba1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800ba20:	e7e9      	b.n	800b9f6 <SPI_CloseRxTx_ISR+0x46>

0800ba22 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 800ba22:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800ba24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba26:	6802      	ldr	r2, [r0, #0]
 800ba28:	2901      	cmp	r1, #1
 800ba2a:	d918      	bls.n	800ba5e <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba2c:	f833 1b02 	ldrh.w	r1, [r3], #2
 800ba30:	60d1      	str	r1, [r2, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba32:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800ba34:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba36:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ba3c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	b9f3      	cbnz	r3, 800ba80 <SPI_2linesTxISR_8BIT+0x5e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba42:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ba44:	6803      	ldr	r3, [r0, #0]
 800ba46:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ba4a:	d10f      	bne.n	800ba6c <SPI_2linesTxISR_8BIT+0x4a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba52:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba5a:	605a      	str	r2, [r3, #4]
      return;
 800ba5c:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800ba5e:	1c59      	adds	r1, r3, #1
 800ba60:	6381      	str	r1, [r0, #56]	; 0x38
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	7313      	strb	r3, [r2, #12]
    hspi->TxXferCount--;
 800ba66:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	e7e5      	b.n	800ba38 <SPI_2linesTxISR_8BIT+0x16>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba72:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 800ba74:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	b90b      	cbnz	r3, 800ba80 <SPI_2linesTxISR_8BIT+0x5e>
      SPI_CloseRxTx_ISR(hspi);
 800ba7c:	f7ff bf98 	b.w	800b9b0 <SPI_CloseRxTx_ISR>
}
 800ba80:	4770      	bx	lr
	...

0800ba84 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 800ba84:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 800ba88:	6802      	ldr	r2, [r0, #0]
 800ba8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ba8c:	2901      	cmp	r1, #1
 800ba8e:	d922      	bls.n	800bad6 <SPI_2linesRxISR_8BIT+0x52>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ba90:	68d1      	ldr	r1, [r2, #12]
 800ba92:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba96:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800ba98:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba9c:	3b02      	subs	r3, #2
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800baa4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d103      	bne.n	800bab6 <SPI_2linesRxISR_8BIT+0x32>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800baae:	6853      	ldr	r3, [r2, #4]
 800bab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bab4:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 800bab6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800baba:	b29b      	uxth	r3, r3
 800babc:	b9f3      	cbnz	r3, 800bafc <SPI_2linesRxISR_8BIT+0x78>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800babe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bac0:	6803      	ldr	r3, [r0, #0]
 800bac2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bac6:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bac8:	d110      	bne.n	800baec <SPI_2linesRxISR_8BIT+0x68>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800baca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bace:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800bad0:	4b0b      	ldr	r3, [pc, #44]	; (800bb00 <SPI_2linesRxISR_8BIT+0x7c>)
 800bad2:	64c3      	str	r3, [r0, #76]	; 0x4c
 800bad4:	4770      	bx	lr
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 800bad6:	1c59      	adds	r1, r3, #1
 800bad8:	6401      	str	r1, [r0, #64]	; 0x40
 800bada:	7b12      	ldrb	r2, [r2, #12]
 800badc:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 800bade:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bae2:	3b01      	subs	r3, #1
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800baea:	e7e4      	b.n	800bab6 <SPI_2linesRxISR_8BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800baec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800baf0:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 800baf2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	b90b      	cbnz	r3, 800bafc <SPI_2linesRxISR_8BIT+0x78>
      SPI_CloseRxTx_ISR(hspi);
 800baf8:	f7ff bf5a 	b.w	800b9b0 <SPI_CloseRxTx_ISR>
}
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	0800bb05 	.word	0x0800bb05

0800bb04 <SPI_2linesRxISR_8BITCRC>:
{
 800bb04:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800bb06:	2200      	movs	r2, #0
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bb08:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t tmpreg = 0U;
 800bb0a:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bb0e:	7b0a      	ldrb	r2, [r1, #12]
 800bb10:	b2d2      	uxtb	r2, r2
 800bb12:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg);
 800bb16:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800bb1a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800bb1c:	3a01      	subs	r2, #1
 800bb1e:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800bb20:	b94a      	cbnz	r2, 800bb36 <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bb22:	684a      	ldr	r2, [r1, #4]
 800bb24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bb28:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800bb2a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	b913      	cbnz	r3, 800bb36 <SPI_2linesRxISR_8BITCRC+0x32>
}
 800bb30:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 800bb32:	f7ff bf3d 	b.w	800b9b0 <SPI_CloseRxTx_ISR>
}
 800bb36:	b002      	add	sp, #8
 800bb38:	4770      	bx	lr

0800bb3a <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb3a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800bb3c:	6802      	ldr	r2, [r0, #0]
{
 800bb3e:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb40:	f831 4b02 	ldrh.w	r4, [r1], #2
 800bb44:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb46:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800bb48:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800bb4a:	3901      	subs	r1, #1
 800bb4c:	b289      	uxth	r1, r1
 800bb4e:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800bb50:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800bb52:	b289      	uxth	r1, r1
 800bb54:	b959      	cbnz	r1, 800bb6e <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb56:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800bb58:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bb5c:	d10a      	bne.n	800bb74 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bb5e:	6813      	ldr	r3, [r2, #0]
 800bb60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bb64:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bb66:	6853      	ldr	r3, [r2, #4]
 800bb68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb6c:	6053      	str	r3, [r2, #4]
}
 800bb6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb72:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bb74:	6851      	ldr	r1, [r2, #4]
 800bb76:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb7a:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800bb7c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1f3      	bne.n	800bb6e <SPI_2linesTxISR_16BIT+0x34>
}
 800bb86:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800bb8a:	f7ff bf11 	b.w	800b9b0 <SPI_CloseRxTx_ISR>
	...

0800bb90 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb90:	6801      	ldr	r1, [r0, #0]
 800bb92:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800bb94:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb96:	68cc      	ldr	r4, [r1, #12]
 800bb98:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb9c:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800bb9e:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bba2:	3a01      	subs	r2, #1
 800bba4:	b292      	uxth	r2, r2
 800bba6:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800bbaa:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bbae:	b292      	uxth	r2, r2
 800bbb0:	b92a      	cbnz	r2, 800bbbe <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbb2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bbb4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bbb8:	d104      	bne.n	800bbc4 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800bbba:	4a08      	ldr	r2, [pc, #32]	; (800bbdc <SPI_2linesRxISR_16BIT+0x4c>)
 800bbbc:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 800bbbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbc2:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bbc4:	684a      	ldr	r2, [r1, #4]
 800bbc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbca:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800bbcc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1f4      	bne.n	800bbbe <SPI_2linesRxISR_16BIT+0x2e>
}
 800bbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800bbd8:	f7ff beea 	b.w	800b9b0 <SPI_CloseRxTx_ISR>
 800bbdc:	0800bbe1 	.word	0x0800bbe1

0800bbe0 <SPI_2linesRxISR_16BITCRC>:
{
 800bbe0:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800bbe8:	6803      	ldr	r3, [r0, #0]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	b292      	uxth	r2, r2
 800bbee:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800bbf2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbfc:	605a      	str	r2, [r3, #4]
}
 800bbfe:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 800bc00:	f7ff bed6 	b.w	800b9b0 <SPI_CloseRxTx_ISR>

0800bc04 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800bc04:	6803      	ldr	r3, [r0, #0]
{
 800bc06:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800bc08:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800bc0a:	689a      	ldr	r2, [r3, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800bc0c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800bc10:	2d01      	cmp	r5, #1
{
 800bc12:	b085      	sub	sp, #20
 800bc14:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800bc16:	d106      	bne.n	800bc26 <HAL_SPI_IRQHandler+0x22>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800bc18:	064d      	lsls	r5, r1, #25
 800bc1a:	d504      	bpl.n	800bc26 <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 800bc1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 800bc1e:	b005      	add	sp, #20
 800bc20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 800bc24:	4718      	bx	r3
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800bc26:	0795      	lsls	r5, r2, #30
 800bc28:	d504      	bpl.n	800bc34 <HAL_SPI_IRQHandler+0x30>
 800bc2a:	0608      	lsls	r0, r1, #24
 800bc2c:	d502      	bpl.n	800bc34 <HAL_SPI_IRQHandler+0x30>
    hspi->TxISR(hspi);
 800bc2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bc30:	4620      	mov	r0, r4
 800bc32:	e7f4      	b.n	800bc1e <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800bc34:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800bc38:	d051      	beq.n	800bcde <HAL_SPI_IRQHandler+0xda>
 800bc3a:	068d      	lsls	r5, r1, #26
 800bc3c:	d54f      	bpl.n	800bcde <HAL_SPI_IRQHandler+0xda>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800bc3e:	0650      	lsls	r0, r2, #25
 800bc40:	d50f      	bpl.n	800bc62 <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bc42:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800bc46:	2803      	cmp	r0, #3
 800bc48:	f04f 0500 	mov.w	r5, #0
 800bc4c:	d041      	beq.n	800bcd2 <HAL_SPI_IRQHandler+0xce>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc4e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bc50:	f040 0004 	orr.w	r0, r0, #4
 800bc54:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc56:	9500      	str	r5, [sp, #0]
 800bc58:	68d8      	ldr	r0, [r3, #12]
 800bc5a:	9000      	str	r0, [sp, #0]
 800bc5c:	6898      	ldr	r0, [r3, #8]
 800bc5e:	9000      	str	r0, [sp, #0]
 800bc60:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 800bc62:	0695      	lsls	r5, r2, #26
 800bc64:	d50c      	bpl.n	800bc80 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc66:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bc68:	f040 0001 	orr.w	r0, r0, #1
 800bc6c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc6e:	2000      	movs	r0, #0
 800bc70:	9002      	str	r0, [sp, #8]
 800bc72:	6898      	ldr	r0, [r3, #8]
 800bc74:	9002      	str	r0, [sp, #8]
 800bc76:	6818      	ldr	r0, [r3, #0]
 800bc78:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800bc7c:	6018      	str	r0, [r3, #0]
 800bc7e:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800bc80:	05d0      	lsls	r0, r2, #23
 800bc82:	d508      	bpl.n	800bc96 <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc84:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bc86:	f042 0208 	orr.w	r2, r2, #8
 800bc8a:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	9203      	str	r2, [sp, #12]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	9203      	str	r2, [sp, #12]
 800bc94:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc96:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bc98:	b30a      	cbz	r2, 800bcde <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bca0:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800bca2:	2201      	movs	r2, #1
 800bca4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bca8:	078a      	lsls	r2, r1, #30
 800bcaa:	d01a      	beq.n	800bce2 <HAL_SPI_IRQHandler+0xde>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bcac:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800bcae:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bcb0:	f022 0203 	bic.w	r2, r2, #3
 800bcb4:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800bcb6:	b118      	cbz	r0, 800bcc0 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcb8:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <HAL_SPI_IRQHandler+0xe8>)
 800bcba:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800bcbc:	f7fc ff5d 	bl	8008b7a <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 800bcc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcc2:	b160      	cbz	r0, 800bcde <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcc4:	4b09      	ldr	r3, [pc, #36]	; (800bcec <HAL_SPI_IRQHandler+0xe8>)
 800bcc6:	6383      	str	r3, [r0, #56]	; 0x38
}
 800bcc8:	b005      	add	sp, #20
 800bcca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800bcce:	f7fc bf54 	b.w	8008b7a <HAL_DMA_Abort_IT>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcd2:	9501      	str	r5, [sp, #4]
 800bcd4:	68da      	ldr	r2, [r3, #12]
 800bcd6:	9201      	str	r2, [sp, #4]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	9b01      	ldr	r3, [sp, #4]
}
 800bcde:	b005      	add	sp, #20
 800bce0:	bd30      	pop	{r4, r5, pc}
        HAL_SPI_ErrorCallback(hspi);
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7ff fd63 	bl	800b7ae <HAL_SPI_ErrorCallback>
 800bce8:	e7f9      	b.n	800bcde <HAL_SPI_IRQHandler+0xda>
 800bcea:	bf00      	nop
 800bcec:	0800bcf1 	.word	0x0800bcf1

0800bcf0 <SPI_DMAAbortOnError>:
{
 800bcf0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcf2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800bcfa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800bcfc:	f7ff fd57 	bl	800b7ae <HAL_SPI_ErrorCallback>
}
 800bd00:	bd08      	pop	{r3, pc}

0800bd02 <HAL_UART_MspInit>:
  UNUSED(huart);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800bd02:	4770      	bx	lr

0800bd04 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 800bd04:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd06:	69c1      	ldr	r1, [r0, #28]
{
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd0c:	6883      	ldr	r3, [r0, #8]
 800bd0e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd10:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd12:	4303      	orrs	r3, r0
 800bd14:	6960      	ldr	r0, [r4, #20]
 800bd16:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd18:	48bb      	ldr	r0, [pc, #748]	; (800c008 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd1a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd1c:	4028      	ands	r0, r5
 800bd1e:	4303      	orrs	r3, r0
 800bd20:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd22:	6853      	ldr	r3, [r2, #4]
 800bd24:	68e0      	ldr	r0, [r4, #12]
 800bd26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bd2a:	4303      	orrs	r3, r0
 800bd2c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd2e:	4bb7      	ldr	r3, [pc, #732]	; (800c00c <UART_SetConfig+0x308>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd30:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd32:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd34:	bf1c      	itt	ne
 800bd36:	6a23      	ldrne	r3, [r4, #32]
 800bd38:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd3a:	6893      	ldr	r3, [r2, #8]
 800bd3c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bd40:	4303      	orrs	r3, r0
 800bd42:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd44:	4bb2      	ldr	r3, [pc, #712]	; (800c010 <UART_SetConfig+0x30c>)
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d119      	bne.n	800bd7e <UART_SetConfig+0x7a>
 800bd4a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800bd4e:	4ab1      	ldr	r2, [pc, #708]	; (800c014 <UART_SetConfig+0x310>)
 800bd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd54:	f003 0303 	and.w	r3, r3, #3
 800bd58:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd5a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bd5e:	f040 813b 	bne.w	800bfd8 <UART_SetConfig+0x2d4>
  {
    switch (clocksource)
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	f200 80d7 	bhi.w	800bf16 <UART_SetConfig+0x212>
 800bd68:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bd6c:	00d2011d 	.word	0x00d2011d
 800bd70:	00d50104 	.word	0x00d50104
 800bd74:	00d50117 	.word	0x00d50117
 800bd78:	00d500d5 	.word	0x00d500d5
 800bd7c:	003b      	.short	0x003b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd7e:	4ba6      	ldr	r3, [pc, #664]	; (800c018 <UART_SetConfig+0x314>)
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d109      	bne.n	800bd98 <UART_SetConfig+0x94>
 800bd84:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800bd88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bd8c:	4ba1      	ldr	r3, [pc, #644]	; (800c014 <UART_SetConfig+0x310>)
 800bd8e:	f002 020c 	and.w	r2, r2, #12
 800bd92:	4413      	add	r3, r2
 800bd94:	791b      	ldrb	r3, [r3, #4]
 800bd96:	e7e0      	b.n	800bd5a <UART_SetConfig+0x56>
 800bd98:	4ba0      	ldr	r3, [pc, #640]	; (800c01c <UART_SetConfig+0x318>)
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d126      	bne.n	800bdec <UART_SetConfig+0xe8>
 800bd9e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800bda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bdaa:	2b10      	cmp	r3, #16
 800bdac:	f000 80eb 	beq.w	800bf86 <UART_SetConfig+0x282>
 800bdb0:	d80b      	bhi.n	800bdca <UART_SetConfig+0xc6>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d056      	beq.n	800be64 <UART_SetConfig+0x160>
  if(UART_INSTANCE_LOWPOWER(huart))
 800bdb6:	4b95      	ldr	r3, [pc, #596]	; (800c00c <UART_SetConfig+0x308>)
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d064      	beq.n	800be86 <UART_SetConfig+0x182>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdbc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bdc0:	f000 80a9 	beq.w	800bf16 <UART_SetConfig+0x212>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 800bdc4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e0b1      	b.n	800bf2e <UART_SetConfig+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdca:	2b20      	cmp	r3, #32
 800bdcc:	f000 80cc 	beq.w	800bf68 <UART_SetConfig+0x264>
 800bdd0:	2b30      	cmp	r3, #48	; 0x30
 800bdd2:	d1f0      	bne.n	800bdb6 <UART_SetConfig+0xb2>
  if(UART_INSTANCE_LOWPOWER(huart))
 800bdd4:	4b8d      	ldr	r3, [pc, #564]	; (800c00c <UART_SetConfig+0x308>)
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d05b      	beq.n	800be92 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdda:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bdde:	f040 80be 	bne.w	800bf5e <UART_SetConfig+0x25a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bde2:	6860      	ldr	r0, [r4, #4]
 800bde4:	0843      	lsrs	r3, r0, #1
 800bde6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bdea:	e0c9      	b.n	800bf80 <UART_SetConfig+0x27c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdec:	4b8c      	ldr	r3, [pc, #560]	; (800c020 <UART_SetConfig+0x31c>)
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d10e      	bne.n	800be10 <UART_SetConfig+0x10c>
 800bdf2:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800bdf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdfe:	2b40      	cmp	r3, #64	; 0x40
 800be00:	f000 80c1 	beq.w	800bf86 <UART_SetConfig+0x282>
 800be04:	d9d5      	bls.n	800bdb2 <UART_SetConfig+0xae>
 800be06:	2b80      	cmp	r3, #128	; 0x80
 800be08:	f000 80ae 	beq.w	800bf68 <UART_SetConfig+0x264>
 800be0c:	2bc0      	cmp	r3, #192	; 0xc0
 800be0e:	e7e0      	b.n	800bdd2 <UART_SetConfig+0xce>
 800be10:	4b84      	ldr	r3, [pc, #528]	; (800c024 <UART_SetConfig+0x320>)
 800be12:	429a      	cmp	r2, r3
 800be14:	d111      	bne.n	800be3a <UART_SetConfig+0x136>
 800be16:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800be1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be26:	f000 80ae 	beq.w	800bf86 <UART_SetConfig+0x282>
 800be2a:	d9c2      	bls.n	800bdb2 <UART_SetConfig+0xae>
 800be2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be30:	f000 809a 	beq.w	800bf68 <UART_SetConfig+0x264>
 800be34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be38:	e7cb      	b.n	800bdd2 <UART_SetConfig+0xce>
 800be3a:	4b74      	ldr	r3, [pc, #464]	; (800c00c <UART_SetConfig+0x308>)
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d1bd      	bne.n	800bdbc <UART_SetConfig+0xb8>
 800be40:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800be44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be50:	f000 8099 	beq.w	800bf86 <UART_SetConfig+0x282>
 800be54:	d9ad      	bls.n	800bdb2 <UART_SetConfig+0xae>
 800be56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be5a:	f000 8085 	beq.w	800bf68 <UART_SetConfig+0x264>
 800be5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be62:	e7b6      	b.n	800bdd2 <UART_SetConfig+0xce>
  if(UART_INSTANCE_LOWPOWER(huart))
 800be64:	4b69      	ldr	r3, [pc, #420]	; (800c00c <UART_SetConfig+0x308>)
 800be66:	429a      	cmp	r2, r3
 800be68:	f040 809a 	bne.w	800bfa0 <UART_SetConfig+0x29c>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800be6c:	f7fe fa1a 	bl	800a2a4 <HAL_RCC_GetPCLK1Freq>
      break;
 800be70:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800be72:	b918      	cbnz	r0, 800be7c <UART_SetConfig+0x178>
 800be74:	4602      	mov	r2, r0
 800be76:	e007      	b.n	800be88 <UART_SetConfig+0x184>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800be78:	486b      	ldr	r0, [pc, #428]	; (800c028 <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 800be7a:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800be7c:	6862      	ldr	r2, [r4, #4]
 800be7e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800be82:	4281      	cmp	r1, r0
 800be84:	d909      	bls.n	800be9a <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 800be86:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be88:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800be8a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  
  return ret;
}
 800be8e:	4610      	mov	r0, r2
 800be90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(UART_INSTANCE_LOWPOWER(huart))
 800be92:	2308      	movs	r3, #8
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800be94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800be98:	e7f0      	b.n	800be7c <UART_SetConfig+0x178>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800be9a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800be9e:	d8f2      	bhi.n	800be86 <UART_SetConfig+0x182>
        switch (clocksource)
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d832      	bhi.n	800bf0a <UART_SetConfig+0x206>
 800bea4:	e8df f003 	tbb	[pc, r3]
 800bea8:	31123105 	.word	0x31123105
 800beac:	31313125 	.word	0x31313125
 800beb0:	28          	.byte	0x28
 800beb1:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800beb2:	f7fe f9f7 	bl	800a2a4 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800beb6:	6862      	ldr	r2, [r4, #4]
 800beb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bebc:	0856      	lsrs	r6, r2, #1
 800bebe:	2700      	movs	r7, #0
 800bec0:	fbe1 6700 	umlal	r6, r7, r1, r0
 800bec4:	2300      	movs	r3, #0
 800bec6:	4630      	mov	r0, r6
 800bec8:	4639      	mov	r1, r7
 800beca:	e007      	b.n	800bedc <UART_SetConfig+0x1d8>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800becc:	4e57      	ldr	r6, [pc, #348]	; (800c02c <UART_SetConfig+0x328>)
 800bece:	0855      	lsrs	r5, r2, #1
 800bed0:	2700      	movs	r7, #0
 800bed2:	1970      	adds	r0, r6, r5
 800bed4:	f04f 0300 	mov.w	r3, #0
 800bed8:	f147 0100 	adc.w	r1, r7, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800bedc:	f7f4 fee4 	bl	8000ca8 <__aeabi_uldivmod>
          break;
 800bee0:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bee2:	4b53      	ldr	r3, [pc, #332]	; (800c030 <UART_SetConfig+0x32c>)
 800bee4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800bee8:	4299      	cmp	r1, r3
 800beea:	d8cc      	bhi.n	800be86 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	60d8      	str	r0, [r3, #12]
 800bef0:	e7ca      	b.n	800be88 <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bef2:	f7fd fe89 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800bef6:	e7de      	b.n	800beb6 <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800bef8:	0850      	lsrs	r0, r2, #1
 800befa:	2600      	movs	r6, #0
 800befc:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800bf00:	f04f 0300 	mov.w	r3, #0
 800bf04:	f146 0100 	adc.w	r1, r6, #0
 800bf08:	e7e8      	b.n	800bedc <UART_SetConfig+0x1d8>
          ret = HAL_ERROR;
 800bf0a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	e7e8      	b.n	800bee2 <UART_SetConfig+0x1de>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bf10:	f7fe f9d8 	bl	800a2c4 <HAL_RCC_GetPCLK2Freq>
 800bf14:	e049      	b.n	800bfaa <UART_SetConfig+0x2a6>
      ret = HAL_ERROR;
 800bf16:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e04e      	b.n	800bfba <UART_SetConfig+0x2b6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800bf1c:	f7fe f9c2 	bl	800a2a4 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bf20:	6862      	ldr	r2, [r4, #4]
 800bf22:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800bf26:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf2a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf2c:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf2e:	f1a3 0010 	sub.w	r0, r3, #16
 800bf32:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800bf36:	4288      	cmp	r0, r1
 800bf38:	d8a5      	bhi.n	800be86 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 800bf3a:	6821      	ldr	r1, [r4, #0]
 800bf3c:	60cb      	str	r3, [r1, #12]
 800bf3e:	e7a3      	b.n	800be88 <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bf40:	f7fe f9c0 	bl	800a2c4 <HAL_RCC_GetPCLK2Freq>
 800bf44:	e7ec      	b.n	800bf20 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800bf46:	6860      	ldr	r0, [r4, #4]
 800bf48:	0843      	lsrs	r3, r0, #1
 800bf4a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800bf4e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bf52:	fbb3 f3f0 	udiv	r3, r3, r0
 800bf56:	e7e8      	b.n	800bf2a <UART_SetConfig+0x226>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bf58:	f7fd fe56 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800bf5c:	e7e0      	b.n	800bf20 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bf5e:	6860      	ldr	r0, [r4, #4]
 800bf60:	0843      	lsrs	r3, r0, #1
 800bf62:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bf66:	e7f4      	b.n	800bf52 <UART_SetConfig+0x24e>
  if(UART_INSTANCE_LOWPOWER(huart))
 800bf68:	4b28      	ldr	r3, [pc, #160]	; (800c00c <UART_SetConfig+0x308>)
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d084      	beq.n	800be78 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bf72:	d1e8      	bne.n	800bf46 <UART_SetConfig+0x242>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bf74:	6860      	ldr	r0, [r4, #4]
 800bf76:	0843      	lsrs	r3, r0, #1
 800bf78:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800bf7c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bf80:	fbb3 f3f0 	udiv	r3, r3, r0
 800bf84:	e017      	b.n	800bfb6 <UART_SetConfig+0x2b2>
  if(UART_INSTANCE_LOWPOWER(huart))
 800bf86:	4b21      	ldr	r3, [pc, #132]	; (800c00c <UART_SetConfig+0x308>)
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d103      	bne.n	800bf94 <UART_SetConfig+0x290>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800bf8c:	f7fd fe3c 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
      break;
 800bf90:	2304      	movs	r3, #4
 800bf92:	e76e      	b.n	800be72 <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bf98:	d1de      	bne.n	800bf58 <UART_SetConfig+0x254>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bf9a:	f7fd fe35 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800bf9e:	e004      	b.n	800bfaa <UART_SetConfig+0x2a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfa0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bfa4:	d1ba      	bne.n	800bf1c <UART_SetConfig+0x218>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800bfa6:	f7fe f97d 	bl	800a2a4 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bfaa:	6861      	ldr	r1, [r4, #4]
 800bfac:	084a      	lsrs	r2, r1, #1
 800bfae:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800bfb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfb6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfb8:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfba:	f1a3 0010 	sub.w	r0, r3, #16
 800bfbe:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800bfc2:	4288      	cmp	r0, r1
 800bfc4:	f63f af5f 	bhi.w	800be86 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 800bfc8:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800bfcc:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfce:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	60c3      	str	r3, [r0, #12]
 800bfd6:	e757      	b.n	800be88 <UART_SetConfig+0x184>
    switch (clocksource)
 800bfd8:	2b08      	cmp	r3, #8
 800bfda:	f63f af54 	bhi.w	800be86 <UART_SetConfig+0x182>
 800bfde:	a201      	add	r2, pc, #4	; (adr r2, 800bfe4 <UART_SetConfig+0x2e0>)
 800bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe4:	0800bf1d 	.word	0x0800bf1d
 800bfe8:	0800bf41 	.word	0x0800bf41
 800bfec:	0800bf47 	.word	0x0800bf47
 800bff0:	0800be87 	.word	0x0800be87
 800bff4:	0800bf59 	.word	0x0800bf59
 800bff8:	0800be87 	.word	0x0800be87
 800bffc:	0800be87 	.word	0x0800be87
 800c000:	0800be87 	.word	0x0800be87
 800c004:	0800bf5f 	.word	0x0800bf5f
 800c008:	efff69f3 	.word	0xefff69f3
 800c00c:	40008000 	.word	0x40008000
 800c010:	40013800 	.word	0x40013800
 800c014:	08027fe4 	.word	0x08027fe4
 800c018:	40004400 	.word	0x40004400
 800c01c:	40004800 	.word	0x40004800
 800c020:	40004c00 	.word	0x40004c00
 800c024:	40005000 	.word	0x40005000
 800c028:	00f42400 	.word	0x00f42400
 800c02c:	f4240000 	.word	0xf4240000
 800c030:	000ffcff 	.word	0x000ffcff

0800c034 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c034:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c036:	07da      	lsls	r2, r3, #31
{
 800c038:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c03a:	d506      	bpl.n	800c04a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c03c:	6801      	ldr	r1, [r0, #0]
 800c03e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c040:	684a      	ldr	r2, [r1, #4]
 800c042:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c046:	4322      	orrs	r2, r4
 800c048:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c04a:	079c      	lsls	r4, r3, #30
 800c04c:	d506      	bpl.n	800c05c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c04e:	6801      	ldr	r1, [r0, #0]
 800c050:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c052:	684a      	ldr	r2, [r1, #4]
 800c054:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c058:	4322      	orrs	r2, r4
 800c05a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c05c:	0759      	lsls	r1, r3, #29
 800c05e:	d506      	bpl.n	800c06e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c060:	6801      	ldr	r1, [r0, #0]
 800c062:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c064:	684a      	ldr	r2, [r1, #4]
 800c066:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c06a:	4322      	orrs	r2, r4
 800c06c:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c06e:	071a      	lsls	r2, r3, #28
 800c070:	d506      	bpl.n	800c080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c072:	6801      	ldr	r1, [r0, #0]
 800c074:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c076:	684a      	ldr	r2, [r1, #4]
 800c078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c07c:	4322      	orrs	r2, r4
 800c07e:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c080:	06dc      	lsls	r4, r3, #27
 800c082:	d506      	bpl.n	800c092 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c084:	6801      	ldr	r1, [r0, #0]
 800c086:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c088:	688a      	ldr	r2, [r1, #8]
 800c08a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c08e:	4322      	orrs	r2, r4
 800c090:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c092:	0699      	lsls	r1, r3, #26
 800c094:	d506      	bpl.n	800c0a4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c096:	6801      	ldr	r1, [r0, #0]
 800c098:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c09a:	688a      	ldr	r2, [r1, #8]
 800c09c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0a0:	4322      	orrs	r2, r4
 800c0a2:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0a4:	065a      	lsls	r2, r3, #25
 800c0a6:	d50f      	bpl.n	800c0c8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0a8:	6801      	ldr	r1, [r0, #0]
 800c0aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c0ac:	684a      	ldr	r2, [r1, #4]
 800c0ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c0b2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0b8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0ba:	d105      	bne.n	800c0c8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0bc:	684a      	ldr	r2, [r1, #4]
 800c0be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c0c0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c0c4:	4322      	orrs	r2, r4
 800c0c6:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0c8:	061b      	lsls	r3, r3, #24
 800c0ca:	d506      	bpl.n	800c0da <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0cc:	6802      	ldr	r2, [r0, #0]
 800c0ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c0d0:	6853      	ldr	r3, [r2, #4]
 800c0d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c0d6:	430b      	orrs	r3, r1
 800c0d8:	6053      	str	r3, [r2, #4]
  }
}
 800c0da:	bd10      	pop	{r4, pc}

0800c0dc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e0:	9d06      	ldr	r5, [sp, #24]
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460f      	mov	r7, r1
 800c0e6:	4616      	mov	r6, r2
 800c0e8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0ea:	6821      	ldr	r1, [r4, #0]
 800c0ec:	69ca      	ldr	r2, [r1, #28]
 800c0ee:	ea37 0302 	bics.w	r3, r7, r2
 800c0f2:	bf0c      	ite	eq
 800c0f4:	2201      	moveq	r2, #1
 800c0f6:	2200      	movne	r2, #0
 800c0f8:	42b2      	cmp	r2, r6
 800c0fa:	d001      	beq.n	800c100 <UART_WaitOnFlagUntilTimeout+0x24>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	e014      	b.n	800c12a <UART_WaitOnFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 800c100:	1c6b      	adds	r3, r5, #1
 800c102:	d0f3      	beq.n	800c0ec <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c104:	b99d      	cbnz	r5, 800c12e <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c10e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c110:	689a      	ldr	r2, [r3, #8]
 800c112:	f022 0201 	bic.w	r2, r2, #1
 800c116:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c118:	2320      	movs	r3, #32
 800c11a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800c11e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800c122:	2300      	movs	r3, #0
 800c124:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800c128:	2003      	movs	r0, #3
}
 800c12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c12e:	f7fc fc91 	bl	8008a54 <HAL_GetTick>
 800c132:	eba0 0008 	sub.w	r0, r0, r8
 800c136:	42a8      	cmp	r0, r5
 800c138:	d9d7      	bls.n	800c0ea <UART_WaitOnFlagUntilTimeout+0xe>
 800c13a:	e7e4      	b.n	800c106 <UART_WaitOnFlagUntilTimeout+0x2a>

0800c13c <HAL_UART_Transmit>:
{
 800c13c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c140:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800c142:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c146:	2b20      	cmp	r3, #32
{
 800c148:	4604      	mov	r4, r0
 800c14a:	460d      	mov	r5, r1
 800c14c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800c14e:	d14a      	bne.n	800c1e6 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 800c150:	2900      	cmp	r1, #0
 800c152:	d046      	beq.n	800c1e2 <HAL_UART_Transmit+0xa6>
 800c154:	2a00      	cmp	r2, #0
 800c156:	d044      	beq.n	800c1e2 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800c158:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d042      	beq.n	800c1e6 <HAL_UART_Transmit+0xaa>
 800c160:	2301      	movs	r3, #1
 800c162:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c166:	2300      	movs	r3, #0
 800c168:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c16a:	2321      	movs	r3, #33	; 0x21
 800c16c:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 800c170:	f7fc fc70 	bl	8008a54 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800c174:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800c178:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800c17a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800c17e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c182:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 800c184:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c186:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 800c188:	b952      	cbnz	r2, 800c1a0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c18a:	2140      	movs	r1, #64	; 0x40
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7ff ffa5 	bl	800c0dc <UART_WaitOnFlagUntilTimeout>
 800c192:	b958      	cbnz	r0, 800c1ac <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800c194:	2320      	movs	r3, #32
 800c196:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800c19a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 800c19e:	e006      	b.n	800c1ae <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2180      	movs	r1, #128	; 0x80
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f7ff ff99 	bl	800c0dc <UART_WaitOnFlagUntilTimeout>
 800c1aa:	b118      	cbz	r0, 800c1b4 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800c1ac:	2003      	movs	r0, #3
}
 800c1ae:	b002      	add	sp, #8
 800c1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1b4:	68a3      	ldr	r3, [r4, #8]
 800c1b6:	6822      	ldr	r2, [r4, #0]
 800c1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1bc:	d10d      	bne.n	800c1da <HAL_UART_Transmit+0x9e>
 800c1be:	6923      	ldr	r3, [r4, #16]
 800c1c0:	b95b      	cbnz	r3, 800c1da <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800c1c2:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ca:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800c1cc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800c1d8:	e7d1      	b.n	800c17e <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c1da:	782b      	ldrb	r3, [r5, #0]
 800c1dc:	8513      	strh	r3, [r2, #40]	; 0x28
 800c1de:	3501      	adds	r5, #1
 800c1e0:	e7f4      	b.n	800c1cc <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800c1e2:	2001      	movs	r0, #1
 800c1e4:	e7e3      	b.n	800c1ae <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800c1e6:	2002      	movs	r0, #2
 800c1e8:	e7e1      	b.n	800c1ae <HAL_UART_Transmit+0x72>

0800c1ea <HAL_UART_Receive>:
{
 800c1ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c1ee:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800c1f0:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800c1f4:	2b20      	cmp	r3, #32
{
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	460d      	mov	r5, r1
 800c1fa:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800c1fc:	d160      	bne.n	800c2c0 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 800c1fe:	2900      	cmp	r1, #0
 800c200:	d05c      	beq.n	800c2bc <HAL_UART_Receive+0xd2>
 800c202:	2a00      	cmp	r2, #0
 800c204:	d05a      	beq.n	800c2bc <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 800c206:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d058      	beq.n	800c2c0 <HAL_UART_Receive+0xd6>
 800c20e:	2301      	movs	r3, #1
 800c210:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c214:	2300      	movs	r3, #0
 800c216:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c218:	2322      	movs	r3, #34	; 0x22
 800c21a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 800c21e:	f7fc fc19 	bl	8008a54 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800c222:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800c224:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800c228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800c22c:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 800c22e:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800c232:	d115      	bne.n	800c260 <HAL_UART_Receive+0x76>
 800c234:	6923      	ldr	r3, [r4, #16]
 800c236:	b98b      	cbnz	r3, 800c25c <HAL_UART_Receive+0x72>
 800c238:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c23c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800c240:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800c244:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800c248:	b280      	uxth	r0, r0
 800c24a:	b9b8      	cbnz	r0, 800c27c <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 800c24c:	2320      	movs	r3, #32
 800c24e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 800c252:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800c256:	b002      	add	sp, #8
 800c258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800c25c:	23ff      	movs	r3, #255	; 0xff
 800c25e:	e7ed      	b.n	800c23c <HAL_UART_Receive+0x52>
 800c260:	b923      	cbnz	r3, 800c26c <HAL_UART_Receive+0x82>
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d0f9      	beq.n	800c25c <HAL_UART_Receive+0x72>
 800c268:	237f      	movs	r3, #127	; 0x7f
 800c26a:	e7e7      	b.n	800c23c <HAL_UART_Receive+0x52>
 800c26c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c270:	d1e6      	bne.n	800c240 <HAL_UART_Receive+0x56>
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0f7      	beq.n	800c268 <HAL_UART_Receive+0x7e>
 800c278:	233f      	movs	r3, #63	; 0x3f
 800c27a:	e7df      	b.n	800c23c <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c27c:	f8cd 8000 	str.w	r8, [sp]
 800c280:	463b      	mov	r3, r7
 800c282:	2200      	movs	r2, #0
 800c284:	2120      	movs	r1, #32
 800c286:	4620      	mov	r0, r4
 800c288:	f7ff ff28 	bl	800c0dc <UART_WaitOnFlagUntilTimeout>
 800c28c:	b9d0      	cbnz	r0, 800c2c4 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c28e:	68a2      	ldr	r2, [r4, #8]
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c296:	d10c      	bne.n	800c2b2 <HAL_UART_Receive+0xc8>
 800c298:	6922      	ldr	r2, [r4, #16]
 800c29a:	b952      	cbnz	r2, 800c2b2 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800c29c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c29e:	4033      	ands	r3, r6
 800c2a0:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800c2a4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800c2b0:	e7c8      	b.n	800c244 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c2b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2b4:	4033      	ands	r3, r6
 800c2b6:	702b      	strb	r3, [r5, #0]
 800c2b8:	3501      	adds	r5, #1
 800c2ba:	e7f3      	b.n	800c2a4 <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 800c2bc:	2001      	movs	r0, #1
 800c2be:	e7ca      	b.n	800c256 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800c2c0:	2002      	movs	r0, #2
 800c2c2:	e7c8      	b.n	800c256 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800c2c4:	2003      	movs	r0, #3
 800c2c6:	e7c6      	b.n	800c256 <HAL_UART_Receive+0x6c>

0800c2c8 <UART_CheckIdleState>:
{
 800c2c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800c2d0:	f7fc fbc0 	bl	8008a54 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800c2da:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2dc:	d417      	bmi.n	800c30e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	075b      	lsls	r3, r3, #29
 800c2e4:	d50a      	bpl.n	800c2fc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f7ff fef1 	bl	800c0dc <UART_WaitOnFlagUntilTimeout>
 800c2fa:	b9a0      	cbnz	r0, 800c326 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 800c2fc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c2fe:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800c300:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800c304:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800c308:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800c30c:	e00c      	b.n	800c328 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c30e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	4632      	mov	r2, r6
 800c316:	4603      	mov	r3, r0
 800c318:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c31c:	4620      	mov	r0, r4
 800c31e:	f7ff fedd 	bl	800c0dc <UART_WaitOnFlagUntilTimeout>
 800c322:	2800      	cmp	r0, #0
 800c324:	d0db      	beq.n	800c2de <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800c326:	2003      	movs	r0, #3
}
 800c328:	b002      	add	sp, #8
 800c32a:	bd70      	pop	{r4, r5, r6, pc}

0800c32c <HAL_UART_Init>:
{
 800c32c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800c32e:	4604      	mov	r4, r0
 800c330:	b360      	cbz	r0, 800c38c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800c332:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c336:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c33a:	b91b      	cbnz	r3, 800c344 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800c33c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800c340:	f7ff fcdf 	bl	800bd02 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c344:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c346:	2324      	movs	r3, #36	; 0x24
 800c348:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800c34c:	6813      	ldr	r3, [r2, #0]
 800c34e:	f023 0301 	bic.w	r3, r3, #1
 800c352:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c354:	4620      	mov	r0, r4
 800c356:	f7ff fcd5 	bl	800bd04 <UART_SetConfig>
 800c35a:	2801      	cmp	r0, #1
 800c35c:	d016      	beq.n	800c38c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c35e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c360:	b113      	cbz	r3, 800c368 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800c362:	4620      	mov	r0, r4
 800c364:	f7ff fe66 	bl	800c034 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c370:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c372:	689a      	ldr	r2, [r3, #8]
 800c374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c378:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800c380:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800c382:	601a      	str	r2, [r3, #0]
}
 800c384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800c388:	f7ff bf9e 	b.w	800c2c8 <UART_CheckIdleState>
}
 800c38c:	2001      	movs	r0, #1
 800c38e:	bd10      	pop	{r4, pc}

0800c390 <MQTTCloseSession>:

void MQTTCloseSession(MQTTClient* c)
{
    c->ping_outstanding = 0;
    c->isconnected = 0;
    if (c->cleansession)
 800c390:	6a42      	ldr	r2, [r0, #36]	; 0x24
    c->ping_outstanding = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	7703      	strb	r3, [r0, #28]
    c->isconnected = 0;
 800c396:	6203      	str	r3, [r0, #32]
    if (c->cleansession)
 800c398:	b122      	cbz	r2, 800c3a4 <MQTTCloseSession+0x14>
        c->messageHandlers[i].topicFilter = NULL;
 800c39a:	6283      	str	r3, [r0, #40]	; 0x28
 800c39c:	6303      	str	r3, [r0, #48]	; 0x30
 800c39e:	6383      	str	r3, [r0, #56]	; 0x38
 800c3a0:	6403      	str	r3, [r0, #64]	; 0x40
 800c3a2:	6483      	str	r3, [r0, #72]	; 0x48
        MQTTCleanSession(c);
}
 800c3a4:	4770      	bx	lr

0800c3a6 <sendPacket>:
{
 800c3a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	4688      	mov	r8, r1
 800c3ae:	4617      	mov	r7, r2
        sent = 0;
 800c3b0:	2400      	movs	r4, #0
    while (sent < length && !TimerIsExpired(timer))
 800c3b2:	4544      	cmp	r4, r8
 800c3b4:	da1b      	bge.n	800c3ee <sendPacket+0x48>
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	f7f6 fcab 	bl	8002d12 <TimerIsExpired>
 800c3bc:	b988      	cbnz	r0, 800c3e2 <sendPacket+0x3c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length - sent, TimerLeftMS(timer)); // length changed by length - sent for long packets and non blocking sockets
 800c3be:	f8d5 9054 	ldr.w	r9, [r5, #84]	; 0x54
 800c3c2:	6929      	ldr	r1, [r5, #16]
 800c3c4:	f8d9 a008 	ldr.w	sl, [r9, #8]
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	190e      	adds	r6, r1, r4
 800c3cc:	f7f6 fc8d 	bl	8002cea <TimerLeftMS>
 800c3d0:	eba8 0b04 	sub.w	fp, r8, r4
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	465a      	mov	r2, fp
 800c3d8:	4631      	mov	r1, r6
 800c3da:	4648      	mov	r0, r9
 800c3dc:	47d0      	blx	sl
        if (rc < 0)  // there was an error writing the data
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	da03      	bge.n	800c3ea <sendPacket+0x44>
        rc = FAILURE;
 800c3e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c3e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sent += rc;
 800c3ea:	4404      	add	r4, r0
 800c3ec:	e7e1      	b.n	800c3b2 <sendPacket+0xc>
    if (sent == length)
 800c3ee:	d1f8      	bne.n	800c3e2 <sendPacket+0x3c>
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800c3f0:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800c3f4:	69a9      	ldr	r1, [r5, #24]
 800c3f6:	f7f6 fc6d 	bl	8002cd4 <TimerCountdown>
        rc = MQSUCCESS;
 800c3fa:	2000      	movs	r0, #0
    return rc;
 800c3fc:	e7f3      	b.n	800c3e6 <sendPacket+0x40>
	...

0800c400 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c404:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800c406:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800c40a:	686e      	ldr	r6, [r5, #4]
{
 800c40c:	b091      	sub	sp, #68	; 0x44
 800c40e:	4604      	mov	r4, r0
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c410:	4608      	mov	r0, r1
{
 800c412:	460f      	mov	r7, r1
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c414:	f7f6 fc69 	bl	8002cea <TimerLeftMS>
 800c418:	2201      	movs	r2, #1
 800c41a:	4603      	mov	r3, r0
 800c41c:	4641      	mov	r1, r8
 800c41e:	4628      	mov	r0, r5
 800c420:	47b0      	blx	r6
    if (rc != 1)
 800c422:	2801      	cmp	r0, #1
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c424:	4606      	mov	r6, r0
    if (rc != 1)
 800c426:	d14f      	bne.n	800c4c8 <cycle+0xc8>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800c428:	4638      	mov	r0, r7
 800c42a:	f7f6 fc5e 	bl	8002cea <TimerLeftMS>
 800c42e:	f04f 0805 	mov.w	r8, #5
 800c432:	4681      	mov	r9, r0
    *value = 0;
 800c434:	2500      	movs	r5, #0
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800c436:	f1b8 0801 	subs.w	r8, r8, #1
 800c43a:	d012      	beq.n	800c462 <cycle+0x62>
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800c43c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c43e:	464b      	mov	r3, r9
 800c440:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	a90c      	add	r1, sp, #48	; 0x30
 800c448:	47d0      	blx	sl
        if (rc != 1)
 800c44a:	2801      	cmp	r0, #1
 800c44c:	d109      	bne.n	800c462 <cycle+0x62>
        *value += (i & 127) * multiplier;
 800c44e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c456:	fb06 5502 	mla	r5, r6, r2, r5
    } while ((i & 128) != 0);
 800c45a:	061a      	lsls	r2, r3, #24
        multiplier *= 128;
 800c45c:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((i & 128) != 0);
 800c460:	d4e9      	bmi.n	800c436 <cycle+0x36>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c462:	6960      	ldr	r0, [r4, #20]
 800c464:	4629      	mov	r1, r5
 800c466:	3001      	adds	r0, #1
 800c468:	f000 fc76 	bl	800cd58 <MQTTPacket_encode>
    if (rem_len > (c->readbuf_size - len))
 800c46c:	68e3      	ldr	r3, [r4, #12]
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c46e:	3001      	adds	r0, #1
    if (rem_len > (c->readbuf_size - len))
 800c470:	1a1b      	subs	r3, r3, r0
 800c472:	42ab      	cmp	r3, r5
 800c474:	d20a      	bcs.n	800c48c <cycle+0x8c>
        rc = BUFFER_OVERFLOW;
 800c476:	f06f 0501 	mvn.w	r5, #1
    }

exit:
    if (rc == MQSUCCESS)
        rc = packet_type;
    else if (c->isconnected)
 800c47a:	6a23      	ldr	r3, [r4, #32]
 800c47c:	b113      	cbz	r3, 800c484 <cycle+0x84>
        MQTTCloseSession(c);
 800c47e:	4620      	mov	r0, r4
 800c480:	f7ff ff86 	bl	800c390 <MQTTCloseSession>
    return rc;
}
 800c484:	4628      	mov	r0, r5
 800c486:	b011      	add	sp, #68	; 0x44
 800c488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (rem_len > 0)
 800c48c:	2d00      	cmp	r5, #0
 800c48e:	dd12      	ble.n	800c4b6 <cycle+0xb6>
      rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer));
 800c490:	6961      	ldr	r1, [r4, #20]
 800c492:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
 800c496:	180e      	adds	r6, r1, r0
 800c498:	4638      	mov	r0, r7
 800c49a:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800c49e:	f7f6 fc24 	bl	8002cea <TimerLeftMS>
 800c4a2:	462a      	mov	r2, r5
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	47c8      	blx	r9
      if (rc != rem_len)
 800c4ac:	42a8      	cmp	r0, r5
 800c4ae:	d002      	beq.n	800c4b6 <cycle+0xb6>
        rc = 0;
 800c4b0:	2600      	movs	r6, #0
        rc = MQSUCCESS;
 800c4b2:	2500      	movs	r5, #0
 800c4b4:	e0ae      	b.n	800c614 <cycle+0x214>
    header.byte = c->readbuf[0];
 800c4b6:	6963      	ldr	r3, [r4, #20]
    if (c->keepAliveInterval > 0)
 800c4b8:	69a1      	ldr	r1, [r4, #24]
    header.byte = c->readbuf[0];
 800c4ba:	781e      	ldrb	r6, [r3, #0]
    rc = header.bits.type;
 800c4bc:	0936      	lsrs	r6, r6, #4
    if (c->keepAliveInterval > 0)
 800c4be:	b119      	cbz	r1, 800c4c8 <cycle+0xc8>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800c4c0:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c4c4:	f7f6 fc06 	bl	8002cd4 <TimerCountdown>
    switch (packet_type)
 800c4c8:	2e0d      	cmp	r6, #13
 800c4ca:	f200 80f9 	bhi.w	800c6c0 <cycle+0x2c0>
 800c4ce:	a301      	add	r3, pc, #4	; (adr r3, 800c4d4 <cycle+0xd4>)
 800c4d0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 800c4d4:	0800c4b3 	.word	0x0800c4b3
 800c4d8:	0800c6c1 	.word	0x0800c6c1
 800c4dc:	0800c4b3 	.word	0x0800c4b3
 800c4e0:	0800c50d 	.word	0x0800c50d
 800c4e4:	0800c4b3 	.word	0x0800c4b3
 800c4e8:	0800c667 	.word	0x0800c667
 800c4ec:	0800c667 	.word	0x0800c667
 800c4f0:	0800c4b3 	.word	0x0800c4b3
 800c4f4:	0800c6c1 	.word	0x0800c6c1
 800c4f8:	0800c4b3 	.word	0x0800c4b3
 800c4fc:	0800c6c1 	.word	0x0800c6c1
 800c500:	0800c6c1 	.word	0x0800c6c1
 800c504:	0800c6c1 	.word	0x0800c6c1
 800c508:	0800c6a7 	.word	0x0800c6a7
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800c50c:	2300      	movs	r3, #0
 800c50e:	930f      	str	r3, [sp, #60]	; 0x3c
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c510:	68e3      	ldr	r3, [r4, #12]
 800c512:	9304      	str	r3, [sp, #16]
 800c514:	6963      	ldr	r3, [r4, #20]
 800c516:	9303      	str	r3, [sp, #12]
 800c518:	ab0f      	add	r3, sp, #60	; 0x3c
 800c51a:	9302      	str	r3, [sp, #8]
 800c51c:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 800c520:	ab0e      	add	r3, sp, #56	; 0x38
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	f8cd 8000 	str.w	r8, [sp]
 800c528:	ab0d      	add	r3, sp, #52	; 0x34
 800c52a:	f10d 0231 	add.w	r2, sp, #49	; 0x31
 800c52e:	a906      	add	r1, sp, #24
 800c530:	f10d 0032 	add.w	r0, sp, #50	; 0x32
 800c534:	f000 fb92 	bl	800cc5c <MQTTDeserialize_publish>
 800c538:	2801      	cmp	r0, #1
 800c53a:	d001      	beq.n	800c540 <cycle+0x140>
 800c53c:	4635      	mov	r5, r6
    return rc;
 800c53e:	e7a1      	b.n	800c484 <cycle+0x84>
            msg.qos = (enum QoS)intQoS;
 800c540:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 800c544:	9b06      	ldr	r3, [sp, #24]
 800c546:	f80a 3d10 	strb.w	r3, [sl, #-16]!
 800c54a:	4625      	mov	r5, r4
 800c54c:	f104 0928 	add.w	r9, r4, #40	; 0x28
    int rc = FAILURE;
 800c550:	f04f 3bff 	mov.w	fp, #4294967295
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c554:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c556:	b1c1      	cbz	r1, 800c58a <cycle+0x18a>
 800c558:	4640      	mov	r0, r8
 800c55a:	f000 fcd2 	bl	800cf02 <MQTTPacket_equals>
 800c55e:	2800      	cmp	r0, #0
 800c560:	f040 80b3 	bne.w	800c6ca <cycle+0x2ca>
    char* curn_end = curn + topicName->lenstring.len;
 800c564:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
 800c568:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c56a:	4419      	add	r1, r3
 800c56c:	3a01      	subs	r2, #1
    while (*curf && curn < curn_end)
 800c56e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c572:	2800      	cmp	r0, #0
 800c574:	f000 80a6 	beq.w	800c6c4 <cycle+0x2c4>
 800c578:	4299      	cmp	r1, r3
 800c57a:	d906      	bls.n	800c58a <cycle+0x18a>
        if (*curn == '/' && *curf != '/')
 800c57c:	f893 c000 	ldrb.w	ip, [r3]
 800c580:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800c584:	d123      	bne.n	800c5ce <cycle+0x1ce>
 800c586:	282f      	cmp	r0, #47	; 0x2f
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c588:	d030      	beq.n	800c5ec <cycle+0x1ec>
 800c58a:	3508      	adds	r5, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c58c:	454d      	cmp	r5, r9
 800c58e:	d1e1      	bne.n	800c554 <cycle+0x154>
    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800c590:	f1bb 0f00 	cmp.w	fp, #0
 800c594:	d008      	beq.n	800c5a8 <cycle+0x1a8>
 800c596:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c598:	b133      	cbz	r3, 800c5a8 <cycle+0x1a8>
    md->message = aMessage;
 800c59a:	a810      	add	r0, sp, #64	; 0x40
 800c59c:	aa0c      	add	r2, sp, #48	; 0x30
    md->topicName = aTopicName;
 800c59e:	f8cd 8020 	str.w	r8, [sp, #32]
    md->message = aMessage;
 800c5a2:	f840 2d24 	str.w	r2, [r0, #-36]!
        c->defaultMessageHandler(&md);
 800c5a6:	4798      	blx	r3
            if (msg.qos != QOS0)
 800c5a8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 800c5ac:	b395      	cbz	r5, 800c614 <cycle+0x214>
                if (msg.qos == QOS1)
 800c5ae:	2d01      	cmp	r5, #1
 800c5b0:	d120      	bne.n	800c5f4 <cycle+0x1f4>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800c5b2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	2204      	movs	r2, #4
 800c5ba:	2300      	movs	r3, #0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800c5bc:	68a1      	ldr	r1, [r4, #8]
 800c5be:	6920      	ldr	r0, [r4, #16]
 800c5c0:	f000 fd0a 	bl	800cfd8 <MQTTSerialize_ack>
                if (len <= 0)
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	dc1d      	bgt.n	800c604 <cycle+0x204>
        rc = FAILURE;
 800c5c8:	f04f 35ff 	mov.w	r5, #4294967295
 800c5cc:	e755      	b.n	800c47a <cycle+0x7a>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c5ce:	282b      	cmp	r0, #43	; 0x2b
 800c5d0:	d004      	beq.n	800c5dc <cycle+0x1dc>
 800c5d2:	2823      	cmp	r0, #35	; 0x23
 800c5d4:	d00c      	beq.n	800c5f0 <cycle+0x1f0>
 800c5d6:	4584      	cmp	ip, r0
 800c5d8:	e7d6      	b.n	800c588 <cycle+0x188>
            while (nextpos < curn_end && *nextpos != '/')
 800c5da:	4603      	mov	r3, r0
 800c5dc:	1c58      	adds	r0, r3, #1
 800c5de:	4288      	cmp	r0, r1
 800c5e0:	d004      	beq.n	800c5ec <cycle+0x1ec>
 800c5e2:	f893 c001 	ldrb.w	ip, [r3, #1]
 800c5e6:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800c5ea:	d1f6      	bne.n	800c5da <cycle+0x1da>
        curn++;
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	e7be      	b.n	800c56e <cycle+0x16e>
            curn = curn_end - 1;    // skip until end of string
 800c5f0:	1e4b      	subs	r3, r1, #1
 800c5f2:	e7fb      	b.n	800c5ec <cycle+0x1ec>
                else if (msg.qos == QOS2)
 800c5f4:	2d02      	cmp	r5, #2
 800c5f6:	d1e7      	bne.n	800c5c8 <cycle+0x1c8>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800c5f8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	2205      	movs	r2, #5
 800c600:	2300      	movs	r3, #0
 800c602:	e7db      	b.n	800c5bc <cycle+0x1bc>
                    rc = sendPacket(c, len, timer);
 800c604:	4601      	mov	r1, r0
 800c606:	463a      	mov	r2, r7
 800c608:	4620      	mov	r0, r4
 800c60a:	f7ff fecc 	bl	800c3a6 <sendPacket>
                if (rc == FAILURE)
 800c60e:	1c43      	adds	r3, r0, #1
                    rc = sendPacket(c, len, timer);
 800c610:	4605      	mov	r5, r0
                if (rc == FAILURE)
 800c612:	d0d9      	beq.n	800c5c8 <cycle+0x1c8>
    if (c->keepAliveInterval == 0)
 800c614:	69a3      	ldr	r3, [r4, #24]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d04e      	beq.n	800c6b8 <cycle+0x2b8>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800c61a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c61e:	f7f6 fb78 	bl	8002d12 <TimerIsExpired>
 800c622:	2800      	cmp	r0, #0
 800c624:	d042      	beq.n	800c6ac <cycle+0x2ac>
        if (c->ping_outstanding)
 800c626:	7f23      	ldrb	r3, [r4, #28]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1cd      	bne.n	800c5c8 <cycle+0x1c8>
            TimerInit(&timer);
 800c62c:	a80c      	add	r0, sp, #48	; 0x30
 800c62e:	f7f6 fb78 	bl	8002d22 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800c632:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c636:	a80c      	add	r0, sp, #48	; 0x30
 800c638:	f7f6 fb44 	bl	8002cc4 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800c63c:	68a1      	ldr	r1, [r4, #8]
 800c63e:	6920      	ldr	r0, [r4, #16]
 800c640:	f000 fb09 	bl	800cc56 <MQTTSerialize_pingreq>
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQSUCCESS) // send the ping packet
 800c644:	1e01      	subs	r1, r0, #0
 800c646:	dd37      	ble.n	800c6b8 <cycle+0x2b8>
 800c648:	aa0c      	add	r2, sp, #48	; 0x30
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7ff feab 	bl	800c3a6 <sendPacket>
 800c650:	2800      	cmp	r0, #0
 800c652:	d1b9      	bne.n	800c5c8 <cycle+0x1c8>
                c->ping_outstanding = 1;
 800c654:	2301      	movs	r3, #1
 800c656:	7723      	strb	r3, [r4, #28]
                TimerCountdownMS(&c->last_received, 5000);  // allow for a few seconds to receive the ping response
 800c658:	f241 3188 	movw	r1, #5000	; 0x1388
 800c65c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c660:	f7f6 fb30 	bl	8002cc4 <TimerCountdownMS>
 800c664:	e028      	b.n	800c6b8 <cycle+0x2b8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c666:	68e3      	ldr	r3, [r4, #12]
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	aa0c      	add	r2, sp, #48	; 0x30
 800c66c:	6963      	ldr	r3, [r4, #20]
 800c66e:	a907      	add	r1, sp, #28
 800c670:	a809      	add	r0, sp, #36	; 0x24
 800c672:	f000 fb37 	bl	800cce4 <MQTTDeserialize_ack>
 800c676:	2801      	cmp	r0, #1
 800c678:	d1a6      	bne.n	800c5c8 <cycle+0x1c8>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 800c67a:	2e05      	cmp	r6, #5
 800c67c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	bf14      	ite	ne
 800c684:	2207      	movne	r2, #7
 800c686:	2206      	moveq	r2, #6
 800c688:	68a1      	ldr	r1, [r4, #8]
 800c68a:	6920      	ldr	r0, [r4, #16]
 800c68c:	2300      	movs	r3, #0
 800c68e:	f000 fca3 	bl	800cfd8 <MQTTSerialize_ack>
 800c692:	1e01      	subs	r1, r0, #0
 800c694:	dd98      	ble.n	800c5c8 <cycle+0x1c8>
            else if ((rc = sendPacket(c, len, timer)) != MQSUCCESS) // send the PUBREL packet
 800c696:	463a      	mov	r2, r7
 800c698:	4620      	mov	r0, r4
 800c69a:	f7ff fe84 	bl	800c3a6 <sendPacket>
 800c69e:	4605      	mov	r5, r0
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d0b7      	beq.n	800c614 <cycle+0x214>
 800c6a4:	e790      	b.n	800c5c8 <cycle+0x1c8>
            c->ping_outstanding = 0;
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	7725      	strb	r5, [r4, #28]
            break;
 800c6aa:	e7b3      	b.n	800c614 <cycle+0x214>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800c6ac:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c6b0:	f7f6 fb2f 	bl	8002d12 <TimerIsExpired>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d1b6      	bne.n	800c626 <cycle+0x226>
    if (rc == MQSUCCESS)
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	f43f af3f 	beq.w	800c53c <cycle+0x13c>
 800c6be:	e6dc      	b.n	800c47a <cycle+0x7a>
    switch (packet_type)
 800c6c0:	4635      	mov	r5, r6
 800c6c2:	e6da      	b.n	800c47a <cycle+0x7a>
    return (curn == curn_end) && (*curf == '\0');
 800c6c4:	4299      	cmp	r1, r3
 800c6c6:	f47f af60 	bne.w	800c58a <cycle+0x18a>
            if (c->messageHandlers[i].fp != NULL)
 800c6ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f43f af5c 	beq.w	800c58a <cycle+0x18a>
    md->message = aMessage;
 800c6d2:	e9cd a807 	strd	sl, r8, [sp, #28]
                c->messageHandlers[i].fp(&md);
 800c6d6:	a807      	add	r0, sp, #28
 800c6d8:	4798      	blx	r3
                rc = MQSUCCESS;
 800c6da:	f04f 0b00 	mov.w	fp, #0
 800c6de:	e754      	b.n	800c58a <cycle+0x18a>

0800c6e0 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	460f      	mov	r7, r1
 800c6e6:	4615      	mov	r5, r2
    int rc = FAILURE;
 800c6e8:	f04f 34ff 	mov.w	r4, #4294967295

    do
    {
        if (TimerIsExpired(timer))
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7f6 fb10 	bl	8002d12 <TimerIsExpired>
 800c6f2:	b940      	cbnz	r0, 800c706 <waitfor+0x26>
            break; // we timed out
        rc = cycle(c, timer);
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7ff fe82 	bl	800c400 <cycle>
    }
    while (rc != packet_type && rc >= 0);
 800c6fc:	42b8      	cmp	r0, r7
        rc = cycle(c, timer);
 800c6fe:	4604      	mov	r4, r0
    while (rc != packet_type && rc >= 0);
 800c700:	d001      	beq.n	800c706 <waitfor+0x26>
 800c702:	2800      	cmp	r0, #0
 800c704:	daf2      	bge.n	800c6ec <waitfor+0xc>

    return rc;
}
 800c706:	4620      	mov	r0, r4
 800c708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c70a <MQTTClientInit>:
{
 800c70a:	b510      	push	{r4, lr}
    c->buf = sendbuf;
 800c70c:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
 800c70e:	9b02      	ldr	r3, [sp, #8]
 800c710:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
 800c712:	9b03      	ldr	r3, [sp, #12]
 800c714:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
 800c716:	9b04      	ldr	r3, [sp, #16]
    c->ipstack = network;
 800c718:	6541      	str	r1, [r0, #84]	; 0x54
    c->readbuf_size = readbuf_size;
 800c71a:	60c3      	str	r3, [r0, #12]
        c->messageHandlers[i].topicFilter = 0;
 800c71c:	2100      	movs	r1, #0
	  c->next_packetid = 1;
 800c71e:	2301      	movs	r3, #1
{
 800c720:	4604      	mov	r4, r0
        c->messageHandlers[i].topicFilter = 0;
 800c722:	6281      	str	r1, [r0, #40]	; 0x28
 800c724:	6301      	str	r1, [r0, #48]	; 0x30
 800c726:	6381      	str	r1, [r0, #56]	; 0x38
 800c728:	6401      	str	r1, [r0, #64]	; 0x40
 800c72a:	6481      	str	r1, [r0, #72]	; 0x48
    c->command_timeout_ms = command_timeout_ms;
 800c72c:	6042      	str	r2, [r0, #4]
    c->cleansession = 0;
 800c72e:	e9c0 1108 	strd	r1, r1, [r0, #32]
    c->ping_outstanding = 0;
 800c732:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
 800c734:	6501      	str	r1, [r0, #80]	; 0x50
	  c->next_packetid = 1;
 800c736:	f840 3b58 	str.w	r3, [r0], #88
    TimerInit(&c->last_sent);
 800c73a:	f7f6 faf2 	bl	8002d22 <TimerInit>
    TimerInit(&c->last_received);
 800c73e:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
 800c742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerInit(&c->last_received);
 800c746:	f7f6 baec 	b.w	8002d22 <TimerInit>

0800c74a <MQTTYield>:
{
 800c74a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c74c:	460d      	mov	r5, r1
 800c74e:	4604      	mov	r4, r0
    TimerInit(&timer);
 800c750:	4668      	mov	r0, sp
 800c752:	f7f6 fae6 	bl	8002d22 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800c756:	4629      	mov	r1, r5
 800c758:	4668      	mov	r0, sp
 800c75a:	f7f6 fab3 	bl	8002cc4 <TimerCountdownMS>
        if (cycle(c, &timer) < 0)
 800c75e:	4669      	mov	r1, sp
 800c760:	4620      	mov	r0, r4
 800c762:	f7ff fe4d 	bl	800c400 <cycle>
 800c766:	2800      	cmp	r0, #0
 800c768:	db07      	blt.n	800c77a <MQTTYield+0x30>
  	} while (!TimerIsExpired(&timer));
 800c76a:	4668      	mov	r0, sp
 800c76c:	f7f6 fad1 	bl	8002d12 <TimerIsExpired>
 800c770:	2800      	cmp	r0, #0
 800c772:	d0f4      	beq.n	800c75e <MQTTYield+0x14>
    int rc = MQSUCCESS;
 800c774:	2000      	movs	r0, #0
}
 800c776:	b003      	add	sp, #12
 800c778:	bd30      	pop	{r4, r5, pc}
            rc = FAILURE;
 800c77a:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 800c77e:	e7fa      	b.n	800c776 <MQTTYield+0x2c>

0800c780 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 800c780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c782:	b099      	sub	sp, #100	; 0x64
 800c784:	4604      	mov	r4, r0
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c786:	af02      	add	r7, sp, #8
{
 800c788:	460d      	mov	r5, r1
 800c78a:	4616      	mov	r6, r2
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c78c:	4921      	ldr	r1, [pc, #132]	; (800c814 <MQTTConnectWithResults+0x94>)
 800c78e:	2258      	movs	r2, #88	; 0x58
 800c790:	4638      	mov	r0, r7
 800c792:	f015 fda8 	bl	80222e6 <memcpy>
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 800c796:	6a23      	ldr	r3, [r4, #32]
 800c798:	b123      	cbz	r3, 800c7a4 <MQTTConnectWithResults+0x24>
    int rc = FAILURE;
 800c79a:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
}
 800c79e:	4628      	mov	r0, r5
 800c7a0:	b019      	add	sp, #100	; 0x64
 800c7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        options = &default_options; /* set default options if none were supplied */
 800c7a4:	2d00      	cmp	r5, #0
 800c7a6:	bf08      	it	eq
 800c7a8:	463d      	moveq	r5, r7
    TimerInit(&connect_timer);
 800c7aa:	4668      	mov	r0, sp
 800c7ac:	f7f6 fab9 	bl	8002d22 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800c7b0:	6861      	ldr	r1, [r4, #4]
 800c7b2:	4668      	mov	r0, sp
 800c7b4:	f7f6 fa86 	bl	8002cc4 <TimerCountdownMS>
    c->keepAliveInterval = options->keepAliveInterval;
 800c7b8:	8b29      	ldrh	r1, [r5, #24]
 800c7ba:	61a1      	str	r1, [r4, #24]
    c->cleansession = options->cleansession;
 800c7bc:	7eab      	ldrb	r3, [r5, #26]
 800c7be:	6263      	str	r3, [r4, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 800c7c0:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c7c4:	f7f6 fa86 	bl	8002cd4 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800c7c8:	68a1      	ldr	r1, [r4, #8]
 800c7ca:	6920      	ldr	r0, [r4, #16]
 800c7cc:	462a      	mov	r2, r5
 800c7ce:	f000 f955 	bl	800ca7c <MQTTSerialize_connect>
 800c7d2:	1e01      	subs	r1, r0, #0
 800c7d4:	dde1      	ble.n	800c79a <MQTTConnectWithResults+0x1a>
    if ((rc = sendPacket(c, len, &connect_timer)) != MQSUCCESS)  // send the connect packet
 800c7d6:	466a      	mov	r2, sp
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f7ff fde4 	bl	800c3a6 <sendPacket>
 800c7de:	4605      	mov	r5, r0
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d1dc      	bne.n	800c79e <MQTTConnectWithResults+0x1e>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800c7e4:	466a      	mov	r2, sp
 800c7e6:	2102      	movs	r1, #2
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f7ff ff79 	bl	800c6e0 <waitfor>
 800c7ee:	2802      	cmp	r0, #2
 800c7f0:	d1d3      	bne.n	800c79a <MQTTConnectWithResults+0x1a>
        data->sessionPresent = 0;
 800c7f2:	4630      	mov	r0, r6
        data->rc = 0;
 800c7f4:	7035      	strb	r5, [r6, #0]
        data->sessionPresent = 0;
 800c7f6:	f800 5f01 	strb.w	r5, [r0, #1]!
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	68e3      	ldr	r3, [r4, #12]
 800c7fe:	6962      	ldr	r2, [r4, #20]
 800c800:	f000 fa00 	bl	800cc04 <MQTTDeserialize_connack>
 800c804:	2801      	cmp	r0, #1
 800c806:	d1c8      	bne.n	800c79a <MQTTConnectWithResults+0x1a>
            rc = data->rc;
 800c808:	7835      	ldrb	r5, [r6, #0]
    if (rc == MQSUCCESS)
 800c80a:	2d00      	cmp	r5, #0
 800c80c:	d1c7      	bne.n	800c79e <MQTTConnectWithResults+0x1e>
        c->isconnected = 1;
 800c80e:	6220      	str	r0, [r4, #32]
        c->ping_outstanding = 0;
 800c810:	7725      	strb	r5, [r4, #28]
    return rc;
 800c812:	e7c4      	b.n	800c79e <MQTTConnectWithResults+0x1e>
 800c814:	08027ff8 	.word	0x08027ff8

0800c818 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800c818:	b507      	push	{r0, r1, r2, lr}
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800c81a:	aa01      	add	r2, sp, #4
 800c81c:	f7ff ffb0 	bl	800c780 <MQTTConnectWithResults>
}
 800c820:	b003      	add	sp, #12
 800c822:	f85d fb04 	ldr.w	pc, [sp], #4

0800c826 <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 800c826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82a:	4605      	mov	r5, r0
 800c82c:	4688      	mov	r8, r1
 800c82e:	4616      	mov	r6, r2
    int rc = FAILURE;
    int i = -1;

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c830:	2400      	movs	r4, #0
 800c832:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 800c836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c838:	b140      	cbz	r0, 800c84c <MQTTSetMessageHandler+0x26>
 800c83a:	4641      	mov	r1, r8
 800c83c:	f7f3 fcc8 	bl	80001d0 <strcmp>
 800c840:	b920      	cbnz	r0, 800c84c <MQTTSetMessageHandler+0x26>
        {
            if (messageHandler == NULL) /* remove existing */
 800c842:	b996      	cbnz	r6, 800c86a <MQTTSetMessageHandler+0x44>
            {
                c->messageHandlers[i].topicFilter = NULL;
                c->messageHandlers[i].fp = NULL;
 800c844:	e9c7 000a 	strd	r0, r0, [r7, #40]	; 0x28
            c->messageHandlers[i].topicFilter = topicFilter;
            c->messageHandlers[i].fp = messageHandler;
        }
    }
    return rc;
}
 800c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c84c:	3401      	adds	r4, #1
 800c84e:	2c05      	cmp	r4, #5
 800c850:	d1ef      	bne.n	800c832 <MQTTSetMessageHandler+0xc>
    if (messageHandler != NULL) {
 800c852:	b13e      	cbz	r6, 800c864 <MQTTSetMessageHandler+0x3e>
 800c854:	2400      	movs	r4, #0
                if (c->messageHandlers[i].topicFilter == NULL)
 800c856:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85c:	b12b      	cbz	r3, 800c86a <MQTTSetMessageHandler+0x44>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c85e:	3401      	adds	r4, #1
 800c860:	2c05      	cmp	r4, #5
 800c862:	d1f8      	bne.n	800c856 <MQTTSetMessageHandler+0x30>
    if (messageHandler != NULL) {
 800c864:	f04f 30ff 	mov.w	r0, #4294967295
 800c868:	e7ee      	b.n	800c848 <MQTTSetMessageHandler+0x22>
 800c86a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
            c->messageHandlers[i].fp = messageHandler;
 800c86e:	e9c4 860a 	strd	r8, r6, [r4, #40]	; 0x28
 800c872:	2000      	movs	r0, #0
    return rc;
 800c874:	e7e8      	b.n	800c848 <MQTTSetMessageHandler+0x22>

0800c876 <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 800c876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c87a:	4698      	mov	r8, r3
 800c87c:	b08f      	sub	sp, #60	; 0x3c
    int rc = FAILURE;
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
 800c87e:	2300      	movs	r3, #0
 800c880:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    topic.cstring = (char *)topicFilter;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800c884:	6a03      	ldr	r3, [r0, #32]
{
 800c886:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800c888:	f88d 2017 	strb.w	r2, [sp, #23]
 800c88c:	4604      	mov	r4, r0
 800c88e:	460f      	mov	r7, r1
    topic.cstring = (char *)topicFilter;
 800c890:	910b      	str	r1, [sp, #44]	; 0x2c
	  if (!c->isconnected)
 800c892:	b943      	cbnz	r3, 800c8a6 <MQTTSubscribeWithResults+0x30>
    else
        rc = FAILURE;

exit:
    if (rc == FAILURE)
        MQTTCloseSession(c);
 800c894:	4620      	mov	r0, r4
 800c896:	f7ff fd7b 	bl	800c390 <MQTTCloseSession>
 800c89a:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800c89e:	4628      	mov	r0, r5
 800c8a0:	b00f      	add	sp, #60	; 0x3c
 800c8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TimerInit(&timer);
 800c8a6:	a809      	add	r0, sp, #36	; 0x24
 800c8a8:	f7f6 fa3b 	bl	8002d22 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c8ac:	6861      	ldr	r1, [r4, #4]
 800c8ae:	a809      	add	r0, sp, #36	; 0x24
 800c8b0:	f7f6 fa08 	bl	8002cc4 <TimerCountdownMS>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c8b4:	6823      	ldr	r3, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800c8b6:	68a1      	ldr	r1, [r4, #8]
 800c8b8:	6920      	ldr	r0, [r4, #16]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8be:	4293      	cmp	r3, r2
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800c8c0:	f10d 0217 	add.w	r2, sp, #23
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c8c4:	bf14      	ite	ne
 800c8c6:	3301      	addne	r3, #1
 800c8c8:	2301      	moveq	r3, #1
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800c8ca:	9202      	str	r2, [sp, #8]
 800c8cc:	f04f 0901 	mov.w	r9, #1
 800c8d0:	aa0b      	add	r2, sp, #44	; 0x2c
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c8d2:	6023      	str	r3, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800c8d4:	9201      	str	r2, [sp, #4]
 800c8d6:	f8cd 9000 	str.w	r9, [sp]
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f000 fba2 	bl	800d026 <MQTTSerialize_subscribe>
    if (len <= 0)
 800c8e2:	1e01      	subs	r1, r0, #0
 800c8e4:	ddd6      	ble.n	800c894 <MQTTSubscribeWithResults+0x1e>
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800c8e6:	aa09      	add	r2, sp, #36	; 0x24
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f7ff fd5c 	bl	800c3a6 <sendPacket>
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	b9f8      	cbnz	r0, 800c932 <MQTTSubscribeWithResults+0xbc>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 800c8f2:	aa09      	add	r2, sp, #36	; 0x24
 800c8f4:	2109      	movs	r1, #9
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f7ff fef2 	bl	800c6e0 <waitfor>
 800c8fc:	2809      	cmp	r0, #9
 800c8fe:	d1c9      	bne.n	800c894 <MQTTSubscribeWithResults+0x1e>
        int count = 0;
 800c900:	aa0e      	add	r2, sp, #56	; 0x38
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800c902:	68e3      	ldr	r3, [r4, #12]
        int count = 0;
 800c904:	f842 5d18 	str.w	r5, [r2, #-24]!
        data->grantedQoS = QOS0;
 800c908:	7035      	strb	r5, [r6, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	6963      	ldr	r3, [r4, #20]
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	4649      	mov	r1, r9
 800c912:	4633      	mov	r3, r6
 800c914:	f10d 001e 	add.w	r0, sp, #30
 800c918:	f000 fbd6 	bl	800d0c8 <MQTTDeserialize_suback>
 800c91c:	4548      	cmp	r0, r9
 800c91e:	d1be      	bne.n	800c89e <MQTTSubscribeWithResults+0x28>
            if (data->grantedQoS != 0x80)
 800c920:	7833      	ldrb	r3, [r6, #0]
 800c922:	2b80      	cmp	r3, #128	; 0x80
 800c924:	d0bb      	beq.n	800c89e <MQTTSubscribeWithResults+0x28>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 800c926:	4642      	mov	r2, r8
 800c928:	4639      	mov	r1, r7
 800c92a:	4620      	mov	r0, r4
 800c92c:	f7ff ff7b 	bl	800c826 <MQTTSetMessageHandler>
 800c930:	4605      	mov	r5, r0
    if (rc == FAILURE)
 800c932:	1c6b      	adds	r3, r5, #1
 800c934:	d1b3      	bne.n	800c89e <MQTTSubscribeWithResults+0x28>
 800c936:	e7ad      	b.n	800c894 <MQTTSubscribeWithResults+0x1e>

0800c938 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 800c938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 800c93a:	ac03      	add	r4, sp, #12
 800c93c:	9400      	str	r4, [sp, #0]
 800c93e:	f7ff ff9a 	bl	800c876 <MQTTSubscribeWithResults>
}
 800c942:	b004      	add	sp, #16
 800c944:	bd10      	pop	{r4, pc}

0800c946 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800c946:	b570      	push	{r4, r5, r6, lr}
    int rc = FAILURE;
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800c948:	2300      	movs	r3, #0
{
 800c94a:	b08e      	sub	sp, #56	; 0x38
    MQTTString topic = MQTTString_initializer;
 800c94c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800c950:	6a03      	ldr	r3, [r0, #32]
    topic.cstring = (char *)topicName;
 800c952:	910b      	str	r1, [sp, #44]	; 0x2c
{
 800c954:	4604      	mov	r4, r0
 800c956:	4615      	mov	r5, r2
	  if (!c->isconnected)
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d052      	beq.n	800ca02 <MQTTPublish+0xbc>
		    goto exit;

    TimerInit(&timer);
 800c95c:	a809      	add	r0, sp, #36	; 0x24
 800c95e:	f7f6 f9e0 	bl	8002d22 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c962:	6861      	ldr	r1, [r4, #4]
 800c964:	a809      	add	r0, sp, #36	; 0x24
 800c966:	f7f6 f9ad 	bl	8002cc4 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800c96a:	782b      	ldrb	r3, [r5, #0]
 800c96c:	1e5a      	subs	r2, r3, #1
 800c96e:	2a01      	cmp	r2, #1
 800c970:	d808      	bhi.n	800c984 <MQTTPublish+0x3e>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c972:	6822      	ldr	r2, [r4, #0]
 800c974:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c978:	428a      	cmp	r2, r1
 800c97a:	bf14      	ite	ne
 800c97c:	3201      	addne	r2, #1
 800c97e:	2201      	moveq	r2, #1
 800c980:	6022      	str	r2, [r4, #0]
        message->id = getNextPacketId(c);
 800c982:	80aa      	strh	r2, [r5, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c984:	68ea      	ldr	r2, [r5, #12]
 800c986:	9206      	str	r2, [sp, #24]
 800c988:	68aa      	ldr	r2, [r5, #8]
 800c98a:	9205      	str	r2, [sp, #20]
 800c98c:	aa0e      	add	r2, sp, #56	; 0x38
 800c98e:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800c992:	ae02      	add	r6, sp, #8
 800c994:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800c998:	88aa      	ldrh	r2, [r5, #4]
 800c99a:	9201      	str	r2, [sp, #4]
 800c99c:	786a      	ldrb	r2, [r5, #1]
 800c99e:	9200      	str	r2, [sp, #0]
 800c9a0:	68a1      	ldr	r1, [r4, #8]
 800c9a2:	6920      	ldr	r0, [r4, #16]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f000 fac7 	bl	800cf38 <MQTTSerialize_publish>
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
 800c9aa:	1e01      	subs	r1, r0, #0
 800c9ac:	dd29      	ble.n	800ca02 <MQTTPublish+0xbc>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800c9ae:	aa09      	add	r2, sp, #36	; 0x24
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f7ff fcf8 	bl	800c3a6 <sendPacket>
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	bb08      	cbnz	r0, 800c9fe <MQTTPublish+0xb8>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800c9ba:	782b      	ldrb	r3, [r5, #0]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d115      	bne.n	800c9ec <MQTTPublish+0xa6>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800c9c0:	aa09      	add	r2, sp, #36	; 0x24
 800c9c2:	2104      	movs	r1, #4
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f7ff fe8b 	bl	800c6e0 <waitfor>
 800c9ca:	2804      	cmp	r0, #4
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800c9cc:	d119      	bne.n	800ca02 <MQTTPublish+0xbc>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c9ce:	68e3      	ldr	r3, [r4, #12]
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800c9d6:	6963      	ldr	r3, [r4, #20]
 800c9d8:	a908      	add	r1, sp, #32
 800c9da:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800c9de:	f000 f981 	bl	800cce4 <MQTTDeserialize_ack>
 800c9e2:	2801      	cmp	r0, #1
 800c9e4:	d10d      	bne.n	800ca02 <MQTTPublish+0xbc>
        MQTTCloseSession(c);
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	b00e      	add	sp, #56	; 0x38
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}
    else if (message->qos == QOS2)
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d1fa      	bne.n	800c9e6 <MQTTPublish+0xa0>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800c9f0:	aa09      	add	r2, sp, #36	; 0x24
 800c9f2:	2107      	movs	r1, #7
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7ff fe73 	bl	800c6e0 <waitfor>
 800c9fa:	2807      	cmp	r0, #7
 800c9fc:	e7e6      	b.n	800c9cc <MQTTPublish+0x86>
    if (rc == FAILURE)
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	d1f1      	bne.n	800c9e6 <MQTTPublish+0xa0>
        MQTTCloseSession(c);
 800ca02:	4620      	mov	r0, r4
 800ca04:	f7ff fcc4 	bl	800c390 <MQTTCloseSession>
 800ca08:	f04f 36ff 	mov.w	r6, #4294967295
    return rc;
 800ca0c:	e7eb      	b.n	800c9e6 <MQTTPublish+0xa0>

0800ca0e <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 800ca0e:	b513      	push	{r0, r1, r4, lr}
 800ca10:	4604      	mov	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 800ca12:	4668      	mov	r0, sp
 800ca14:	f7f6 f985 	bl	8002d22 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800ca18:	6861      	ldr	r1, [r4, #4]
 800ca1a:	4668      	mov	r0, sp
 800ca1c:	f7f6 f952 	bl	8002cc4 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 800ca20:	68a1      	ldr	r1, [r4, #8]
 800ca22:	6920      	ldr	r0, [r4, #16]
 800ca24:	f000 f914 	bl	800cc50 <MQTTSerialize_disconnect>
    if (len > 0)
 800ca28:	1e01      	subs	r1, r0, #0
 800ca2a:	dd0a      	ble.n	800ca42 <MQTTDisconnect+0x34>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 800ca2c:	466a      	mov	r2, sp
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7ff fcb9 	bl	800c3a6 <sendPacket>
 800ca34:	4601      	mov	r1, r0
    MQTTCloseSession(c);
 800ca36:	4620      	mov	r0, r4
 800ca38:	f7ff fcaa 	bl	800c390 <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800ca3c:	4608      	mov	r0, r1
 800ca3e:	b002      	add	sp, #8
 800ca40:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
 800ca42:	f04f 31ff 	mov.w	r1, #4294967295
 800ca46:	e7f6      	b.n	800ca36 <MQTTDisconnect+0x28>

0800ca48 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800ca48:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
 800ca4a:	2901      	cmp	r1, #1
{
 800ca4c:	4604      	mov	r4, r0
	MQTTHeader header = {0};
 800ca4e:	f04f 0300 	mov.w	r3, #0
	unsigned char *ptr = buf;
 800ca52:	9001      	str	r0, [sp, #4]
	if (buflen < 2)
 800ca54:	dd0e      	ble.n	800ca74 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
 800ca56:	f362 1307 	bfi	r3, r2, #4, #4
	writeChar(&ptr, header.byte); /* write header */
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	a801      	add	r0, sp, #4
 800ca5e:	f000 f9dd 	bl	800ce1c <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800ca62:	2100      	movs	r1, #0
 800ca64:	9801      	ldr	r0, [sp, #4]
 800ca66:	f000 f977 	bl	800cd58 <MQTTPacket_encode>
 800ca6a:	9b01      	ldr	r3, [sp, #4]
 800ca6c:	4418      	add	r0, r3
	rc = ptr - buf;
 800ca6e:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800ca70:	b002      	add	sp, #8
 800ca72:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800ca74:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800ca78:	e7fa      	b.n	800ca70 <MQTTSerialize_zero+0x28>
	...

0800ca7c <MQTTSerialize_connect>:
{
 800ca7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (options->MQTTVersion == 3)
 800ca80:	7a13      	ldrb	r3, [r2, #8]
	unsigned char *ptr = buf;
 800ca82:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 3)
 800ca84:	2b03      	cmp	r3, #3
{
 800ca86:	4680      	mov	r8, r0
 800ca88:	468a      	mov	sl, r1
 800ca8a:	4614      	mov	r4, r2
	MQTTHeader header = {0};
 800ca8c:	f04f 0900 	mov.w	r9, #0
	if (options->MQTTVersion == 3)
 800ca90:	f000 80a9 	beq.w	800cbe6 <MQTTSerialize_connect+0x16a>
		len = 10;
 800ca94:	2b04      	cmp	r3, #4
 800ca96:	bf14      	ite	ne
 800ca98:	464d      	movne	r5, r9
 800ca9a:	250a      	moveq	r5, #10
	len += MQTTstrlen(options->clientID)+2;
 800ca9c:	f104 060c 	add.w	r6, r4, #12
 800caa0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800caa4:	f000 fa21 	bl	800ceea <MQTTstrlen>
	if (options->willFlag)
 800caa8:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 800caaa:	3002      	adds	r0, #2
 800caac:	4405      	add	r5, r0
	if (options->willFlag)
 800caae:	b17b      	cbz	r3, 800cad0 <MQTTSerialize_connect+0x54>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800cab0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800cab4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cab8:	f000 fa17 	bl	800ceea <MQTTstrlen>
 800cabc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cac0:	4607      	mov	r7, r0
 800cac2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cac6:	f000 fa10 	bl	800ceea <MQTTstrlen>
 800caca:	4438      	add	r0, r7
 800cacc:	3004      	adds	r0, #4
 800cace:	4405      	add	r5, r0
	if (options->username.cstring || options->username.lenstring.data)
 800cad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cad2:	b90b      	cbnz	r3, 800cad8 <MQTTSerialize_connect+0x5c>
 800cad4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cad6:	b13b      	cbz	r3, 800cae8 <MQTTSerialize_connect+0x6c>
		len += MQTTstrlen(options->username)+2;
 800cad8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cadc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cae0:	f000 fa03 	bl	800ceea <MQTTstrlen>
 800cae4:	3002      	adds	r0, #2
 800cae6:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 800cae8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800caea:	b90b      	cbnz	r3, 800caf0 <MQTTSerialize_connect+0x74>
 800caec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800caee:	b13b      	cbz	r3, 800cb00 <MQTTSerialize_connect+0x84>
		len += MQTTstrlen(options->password)+2;
 800caf0:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800caf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800caf8:	f000 f9f7 	bl	800ceea <MQTTstrlen>
 800cafc:	3002      	adds	r0, #2
 800cafe:	4405      	add	r5, r0
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800cb00:	4628      	mov	r0, r5
 800cb02:	f000 f961 	bl	800cdc8 <MQTTPacket_len>
 800cb06:	4550      	cmp	r0, sl
 800cb08:	dc75      	bgt.n	800cbf6 <MQTTSerialize_connect+0x17a>
	header.bits.type = CONNECT;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	f363 1907 	bfi	r9, r3, #4, #4
	writeChar(&ptr, header.byte); /* write header */
 800cb10:	f009 011f 	and.w	r1, r9, #31
 800cb14:	a801      	add	r0, sp, #4
 800cb16:	f000 f981 	bl	800ce1c <writeChar>
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	9801      	ldr	r0, [sp, #4]
 800cb1e:	f000 f91b 	bl	800cd58 <MQTTPacket_encode>
 800cb22:	9b01      	ldr	r3, [sp, #4]
	if (options->MQTTVersion == 4)
 800cb24:	7a25      	ldrb	r5, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cb26:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 800cb28:	2d04      	cmp	r5, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cb2a:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 800cb2c:	d15d      	bne.n	800cbea <MQTTSerialize_connect+0x16e>
		writeCString(&ptr, "MQTT");
 800cb2e:	4933      	ldr	r1, [pc, #204]	; (800cbfc <MQTTSerialize_connect+0x180>)
 800cb30:	a801      	add	r0, sp, #4
 800cb32:	f000 f98c 	bl	800ce4e <writeCString>
		writeChar(&ptr, (char) 4);
 800cb36:	4629      	mov	r1, r5
		writeChar(&ptr, (char) 3);
 800cb38:	a801      	add	r0, sp, #4
 800cb3a:	f000 f96f 	bl	800ce1c <writeChar>
	flags.bits.cleansession = options->cleansession;
 800cb3e:	7ea3      	ldrb	r3, [r4, #26]
	flags.all = 0;
 800cb40:	2100      	movs	r1, #0
 800cb42:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 800cb46:	f363 0141 	bfi	r1, r3, #1, #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800cb4a:	7ee3      	ldrb	r3, [r4, #27]
 800cb4c:	3300      	adds	r3, #0
 800cb4e:	bf18      	it	ne
 800cb50:	2301      	movne	r3, #1
 800cb52:	f363 0182 	bfi	r1, r3, #2, #1
	if (flags.bits.will)
 800cb56:	0748      	lsls	r0, r1, #29
		flags.bits.willQoS = options->will.qos;
 800cb58:	bf41      	itttt	mi
 800cb5a:	f894 303d 	ldrbmi.w	r3, [r4, #61]	; 0x3d
 800cb5e:	f363 01c4 	bfimi	r1, r3, #3, #2
		flags.bits.willRetain = options->will.retained;
 800cb62:	f894 303c 	ldrbmi.w	r3, [r4, #60]	; 0x3c
 800cb66:	f363 1145 	bfimi	r1, r3, #5, #1
	if (options->username.cstring || options->username.lenstring.data)
 800cb6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb6c:	b90b      	cbnz	r3, 800cb72 <MQTTSerialize_connect+0xf6>
 800cb6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cb70:	b10b      	cbz	r3, 800cb76 <MQTTSerialize_connect+0xfa>
		flags.bits.username = 1;
 800cb72:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 800cb76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cb78:	b90b      	cbnz	r3, 800cb7e <MQTTSerialize_connect+0x102>
 800cb7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cb7c:	b10b      	cbz	r3, 800cb82 <MQTTSerialize_connect+0x106>
		flags.bits.password = 1;
 800cb7e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	writeChar(&ptr, flags.all);
 800cb82:	b2cd      	uxtb	r5, r1
 800cb84:	4629      	mov	r1, r5
 800cb86:	a801      	add	r0, sp, #4
 800cb88:	f000 f948 	bl	800ce1c <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800cb8c:	8b21      	ldrh	r1, [r4, #24]
 800cb8e:	a801      	add	r0, sp, #4
 800cb90:	f000 f94a 	bl	800ce28 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800cb94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cb98:	a801      	add	r0, sp, #4
 800cb9a:	f000 f96c 	bl	800ce76 <writeMQTTString>
	if (options->willFlag)
 800cb9e:	7ee3      	ldrb	r3, [r4, #27]
 800cba0:	b15b      	cbz	r3, 800cbba <MQTTSerialize_connect+0x13e>
		writeMQTTString(&ptr, options->will.topicName);
 800cba2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800cba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cba8:	a801      	add	r0, sp, #4
 800cbaa:	f000 f964 	bl	800ce76 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800cbae:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cbb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbb4:	a801      	add	r0, sp, #4
 800cbb6:	f000 f95e 	bl	800ce76 <writeMQTTString>
	if (flags.bits.username)
 800cbba:	062a      	lsls	r2, r5, #24
 800cbbc:	d505      	bpl.n	800cbca <MQTTSerialize_connect+0x14e>
		writeMQTTString(&ptr, options->username);
 800cbbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cbc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbc4:	a801      	add	r0, sp, #4
 800cbc6:	f000 f956 	bl	800ce76 <writeMQTTString>
	if (flags.bits.password)
 800cbca:	066b      	lsls	r3, r5, #25
 800cbcc:	d505      	bpl.n	800cbda <MQTTSerialize_connect+0x15e>
		writeMQTTString(&ptr, options->password);
 800cbce:	344c      	adds	r4, #76	; 0x4c
 800cbd0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cbd4:	a801      	add	r0, sp, #4
 800cbd6:	f000 f94e 	bl	800ce76 <writeMQTTString>
	rc = ptr - buf;
 800cbda:	9801      	ldr	r0, [sp, #4]
 800cbdc:	eba0 0008 	sub.w	r0, r0, r8
}
 800cbe0:	b002      	add	sp, #8
 800cbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 800cbe6:	250c      	movs	r5, #12
 800cbe8:	e758      	b.n	800ca9c <MQTTSerialize_connect+0x20>
		writeCString(&ptr, "MQIsdp");
 800cbea:	4905      	ldr	r1, [pc, #20]	; (800cc00 <MQTTSerialize_connect+0x184>)
 800cbec:	a801      	add	r0, sp, #4
 800cbee:	f000 f92e 	bl	800ce4e <writeCString>
		writeChar(&ptr, (char) 3);
 800cbf2:	2103      	movs	r1, #3
 800cbf4:	e7a0      	b.n	800cb38 <MQTTSerialize_connect+0xbc>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cbf6:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800cbfa:	e7f1      	b.n	800cbe0 <MQTTSerialize_connect+0x164>
 800cbfc:	0802f9aa 	.word	0x0802f9aa
 800cc00:	0802f9af 	.word	0x0802f9af

0800cc04 <MQTTDeserialize_connack>:
{
 800cc04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	unsigned char* curdata = buf;
 800cc06:	ac02      	add	r4, sp, #8
{
 800cc08:	4606      	mov	r6, r0
	unsigned char* curdata = buf;
 800cc0a:	f844 2d08 	str.w	r2, [r4, #-8]!
	header.byte = readChar(&curdata);
 800cc0e:	4620      	mov	r0, r4
{
 800cc10:	460d      	mov	r5, r1
	header.byte = readChar(&curdata);
 800cc12:	f000 f8fd 	bl	800ce10 <readChar>
	if (header.bits.type != CONNACK)
 800cc16:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800cc1a:	2820      	cmp	r0, #32
 800cc1c:	d116      	bne.n	800cc4c <MQTTDeserialize_connack+0x48>
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cc1e:	a901      	add	r1, sp, #4
 800cc20:	9800      	ldr	r0, [sp, #0]
 800cc22:	f000 f8e3 	bl	800cdec <MQTTPacket_decodeBuf>
 800cc26:	9b00      	ldr	r3, [sp, #0]
 800cc28:	4403      	add	r3, r0
 800cc2a:	9300      	str	r3, [sp, #0]
	if (enddata - curdata < 2)
 800cc2c:	9b01      	ldr	r3, [sp, #4]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	dd0a      	ble.n	800cc48 <MQTTDeserialize_connack+0x44>
	flags.all = readChar(&curdata);
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f8ec 	bl	800ce10 <readChar>
	*sessionPresent = flags.bits.sessionpresent;
 800cc38:	f000 0001 	and.w	r0, r0, #1
 800cc3c:	7030      	strb	r0, [r6, #0]
	*connack_rc = readChar(&curdata);
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 f8e6 	bl	800ce10 <readChar>
 800cc44:	7028      	strb	r0, [r5, #0]
	rc = 1;
 800cc46:	2001      	movs	r0, #1
}
 800cc48:	b002      	add	sp, #8
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
 800cc4c:	2000      	movs	r0, #0
	return rc;
 800cc4e:	e7fb      	b.n	800cc48 <MQTTDeserialize_connack+0x44>

0800cc50 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 800cc50:	220e      	movs	r2, #14
 800cc52:	f7ff bef9 	b.w	800ca48 <MQTTSerialize_zero>

0800cc56 <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800cc56:	220c      	movs	r2, #12
 800cc58:	f7ff bef6 	b.w	800ca48 <MQTTSerialize_zero>

0800cc5c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800cc5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
 800cc60:	2500      	movs	r5, #0
{
 800cc62:	4680      	mov	r8, r0
 800cc64:	461f      	mov	r7, r3

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800cc66:	4668      	mov	r0, sp
	unsigned char* curdata = buf;
 800cc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc6a:	9300      	str	r3, [sp, #0]
{
 800cc6c:	460e      	mov	r6, r1
 800cc6e:	4614      	mov	r4, r2
	int mylen = 0;
 800cc70:	9501      	str	r5, [sp, #4]
	header.byte = readChar(&curdata);
 800cc72:	f000 f8cd 	bl	800ce10 <readChar>
 800cc76:	462b      	mov	r3, r5
 800cc78:	f360 0307 	bfi	r3, r0, #0, #8
	if (header.bits.type != PUBLISH)
 800cc7c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800cc80:	2830      	cmp	r0, #48	; 0x30
 800cc82:	d12b      	bne.n	800ccdc <MQTTDeserialize_publish+0x80>
		goto exit;
	*dup = header.bits.dup;
 800cc84:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800cc88:	f888 2000 	strb.w	r2, [r8]
	*qos = header.bits.qos;
 800cc8c:	f3c3 0241 	ubfx	r2, r3, #1, #2
	*retained = header.bits.retain;
 800cc90:	f3c3 0300 	ubfx	r3, r3, #0, #1
	*qos = header.bits.qos;
 800cc94:	6032      	str	r2, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cc96:	a901      	add	r1, sp, #4
	*retained = header.bits.retain;
 800cc98:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cc9a:	9800      	ldr	r0, [sp, #0]
 800cc9c:	f000 f8a6 	bl	800cdec <MQTTPacket_decodeBuf>
 800cca0:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800cca2:	9b01      	ldr	r3, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cca4:	4404      	add	r4, r0
 800cca6:	9400      	str	r4, [sp, #0]
	enddata = curdata + mylen;
 800cca8:	441c      	add	r4, r3
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ccaa:	4605      	mov	r5, r0

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800ccac:	4622      	mov	r2, r4
 800ccae:	4669      	mov	r1, sp
 800ccb0:	9808      	ldr	r0, [sp, #32]
 800ccb2:	f000 f902 	bl	800ceba <readMQTTLenString>
 800ccb6:	b188      	cbz	r0, 800ccdc <MQTTDeserialize_publish+0x80>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800ccb8:	9b00      	ldr	r3, [sp, #0]
 800ccba:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	db0d      	blt.n	800ccdc <MQTTDeserialize_publish+0x80>
		goto exit;

	if (*qos > 0)
 800ccc0:	6833      	ldr	r3, [r6, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	dd03      	ble.n	800ccce <MQTTDeserialize_publish+0x72>
		*packetid = readInt(&curdata);
 800ccc6:	4668      	mov	r0, sp
 800ccc8:	f000 f89a 	bl	800ce00 <readInt>
 800cccc:	8038      	strh	r0, [r7, #0]

	*payloadlen = enddata - curdata;
 800ccce:	9b00      	ldr	r3, [sp, #0]
 800ccd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccd2:	1ae4      	subs	r4, r4, r3
 800ccd4:	6014      	str	r4, [r2, #0]
	*payload = curdata;
 800ccd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
	rc = 1;
 800ccd8:	2501      	movs	r5, #1
	*payload = curdata;
 800ccda:	6013      	str	r3, [r2, #0]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800ccdc:	4628      	mov	r0, r5
 800ccde:	b002      	add	sp, #8
 800cce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cce4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800cce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
 800cce6:	ac02      	add	r4, sp, #8
{
 800cce8:	4606      	mov	r6, r0
	unsigned char* curdata = buf;
 800ccea:	f844 3d08 	str.w	r3, [r4, #-8]!
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800ccee:	4620      	mov	r0, r4
{
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	4615      	mov	r5, r2
	header.byte = readChar(&curdata);
 800ccf4:	f000 f88c 	bl	800ce10 <readChar>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f360 0307 	bfi	r3, r0, #0, #8
	*dup = header.bits.dup;
 800ccfe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	*packettype = header.bits.type;
 800cd02:	f3c3 1303 	ubfx	r3, r3, #4, #4
	*dup = header.bits.dup;
 800cd06:	703a      	strb	r2, [r7, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cd08:	a901      	add	r1, sp, #4
	*packettype = header.bits.type;
 800cd0a:	7033      	strb	r3, [r6, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cd0c:	9800      	ldr	r0, [sp, #0]
 800cd0e:	f000 f86d 	bl	800cdec <MQTTPacket_decodeBuf>
 800cd12:	9b00      	ldr	r3, [sp, #0]
 800cd14:	4403      	add	r3, r0
 800cd16:	9300      	str	r3, [sp, #0]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
 800cd18:	9b01      	ldr	r3, [sp, #4]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	dd04      	ble.n	800cd28 <MQTTDeserialize_ack+0x44>
		goto exit;
	*packetid = readInt(&curdata);
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 f86e 	bl	800ce00 <readInt>
 800cd24:	8028      	strh	r0, [r5, #0]

	rc = 1;
 800cd26:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800cd28:	b003      	add	sp, #12
 800cd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd2c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800cd2c:	4a09      	ldr	r2, [pc, #36]	; (800cd54 <bufchar+0x28>)
 800cd2e:	6813      	ldr	r3, [r2, #0]
 800cd30:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < count; ++i)
 800cd32:	461c      	mov	r4, r3
 800cd34:	2500      	movs	r5, #0
 800cd36:	1ae6      	subs	r6, r4, r3
 800cd38:	42b1      	cmp	r1, r6
 800cd3a:	dc06      	bgt.n	800cd4a <bufchar+0x1e>
 800cd3c:	2900      	cmp	r1, #0
 800cd3e:	bfa8      	it	ge
 800cd40:	185b      	addge	r3, r3, r1
 800cd42:	b105      	cbz	r5, 800cd46 <bufchar+0x1a>
 800cd44:	6013      	str	r3, [r2, #0]
		*c = *bufptr++;
	return count;
}
 800cd46:	4608      	mov	r0, r1
 800cd48:	bd70      	pop	{r4, r5, r6, pc}
		*c = *bufptr++;
 800cd4a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cd4e:	7005      	strb	r5, [r0, #0]
 800cd50:	2501      	movs	r5, #1
 800cd52:	e7f0      	b.n	800cd36 <bufchar+0xa>
 800cd54:	200010bc 	.word	0x200010bc

0800cd58 <MQTTPacket_encode>:
{
 800cd58:	b530      	push	{r4, r5, lr}
 800cd5a:	1e44      	subs	r4, r0, #1
		length /= 128;
 800cd5c:	2580      	movs	r5, #128	; 0x80
	int rc = 0;
 800cd5e:	2000      	movs	r0, #0
		char d = length % 128;
 800cd60:	424a      	negs	r2, r1
 800cd62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd66:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cd6a:	bf58      	it	pl
 800cd6c:	4253      	negpl	r3, r2
 800cd6e:	b2db      	uxtb	r3, r3
		length /= 128;
 800cd70:	fb91 f1f5 	sdiv	r1, r1, r5
		if (length > 0)
 800cd74:	2900      	cmp	r1, #0
			d |= 0x80;
 800cd76:	bfc8      	it	gt
 800cd78:	f043 0380 	orrgt.w	r3, r3, #128	; 0x80
	} while (length > 0);
 800cd7c:	2900      	cmp	r1, #0
		buf[rc++] = d;
 800cd7e:	f100 0001 	add.w	r0, r0, #1
 800cd82:	f804 3f01 	strb.w	r3, [r4, #1]!
	} while (length > 0);
 800cd86:	dceb      	bgt.n	800cd60 <MQTTPacket_encode+0x8>
}
 800cd88:	bd30      	pop	{r4, r5, pc}

0800cd8a <MQTTPacket_decode>:
{
 800cd8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*value = 0;
 800cd8c:	2400      	movs	r4, #0
{
 800cd8e:	4607      	mov	r7, r0
 800cd90:	460e      	mov	r6, r1
	*value = 0;
 800cd92:	600c      	str	r4, [r1, #0]
	int multiplier = 1;
 800cd94:	2501      	movs	r5, #1
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800cd96:	3401      	adds	r4, #1
 800cd98:	2c05      	cmp	r4, #5
 800cd9a:	d011      	beq.n	800cdc0 <MQTTPacket_decode+0x36>
		rc = (*getcharfn)(&c, 1);
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	f10d 0007 	add.w	r0, sp, #7
 800cda2:	47b8      	blx	r7
		if (rc != 1)
 800cda4:	2801      	cmp	r0, #1
 800cda6:	d10b      	bne.n	800cdc0 <MQTTPacket_decode+0x36>
		*value += (c & 127) * multiplier;
 800cda8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cdac:	6831      	ldr	r1, [r6, #0]
 800cdae:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800cdb2:	fb05 1303 	mla	r3, r5, r3, r1
 800cdb6:	6033      	str	r3, [r6, #0]
	} while ((c & 128) != 0);
 800cdb8:	0613      	lsls	r3, r2, #24
		multiplier *= 128;
 800cdba:	ea4f 15c5 	mov.w	r5, r5, lsl #7
	} while ((c & 128) != 0);
 800cdbe:	d4ea      	bmi.n	800cd96 <MQTTPacket_decode+0xc>
}
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	b003      	add	sp, #12
 800cdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cdc8 <MQTTPacket_len>:
	rem_len += 1; /* header byte */
 800cdc8:	1c43      	adds	r3, r0, #1
	if (rem_len < 128)
 800cdca:	2b7f      	cmp	r3, #127	; 0x7f
 800cdcc:	dc01      	bgt.n	800cdd2 <MQTTPacket_len+0xa>
		rem_len += 1;
 800cdce:	3002      	adds	r0, #2
 800cdd0:	4770      	bx	lr
	else if (rem_len < 16384)
 800cdd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdd6:	da01      	bge.n	800cddc <MQTTPacket_len+0x14>
		rem_len += 2;
 800cdd8:	3003      	adds	r0, #3
 800cdda:	4770      	bx	lr
	else if (rem_len < 2097151)
 800cddc:	4a02      	ldr	r2, [pc, #8]	; (800cde8 <MQTTPacket_len+0x20>)
 800cdde:	4293      	cmp	r3, r2
		rem_len += 3;
 800cde0:	bfd4      	ite	le
 800cde2:	3004      	addle	r0, #4
		rem_len += 4;
 800cde4:	3005      	addgt	r0, #5
}
 800cde6:	4770      	bx	lr
 800cde8:	001ffffe 	.word	0x001ffffe

0800cdec <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
	bufptr = buf;
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <MQTTPacket_decodeBuf+0xc>)
 800cdee:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
 800cdf0:	4802      	ldr	r0, [pc, #8]	; (800cdfc <MQTTPacket_decodeBuf+0x10>)
 800cdf2:	f7ff bfca 	b.w	800cd8a <MQTTPacket_decode>
 800cdf6:	bf00      	nop
 800cdf8:	200010bc 	.word	0x200010bc
 800cdfc:	0800cd2d 	.word	0x0800cd2d

0800ce00 <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
 800ce00:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
 800ce02:	7819      	ldrb	r1, [r3, #0]
 800ce04:	785a      	ldrb	r2, [r3, #1]
	*pptr += 2;
 800ce06:	3302      	adds	r3, #2
 800ce08:	6003      	str	r3, [r0, #0]
	return len;
}
 800ce0a:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 800ce0e:	4770      	bx	lr

0800ce10 <readChar>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
	char c = **pptr;
 800ce10:	6803      	ldr	r3, [r0, #0]
{
 800ce12:	4602      	mov	r2, r0
	char c = **pptr;
 800ce14:	f813 0b01 	ldrb.w	r0, [r3], #1
	(*pptr)++;
 800ce18:	6013      	str	r3, [r2, #0]
	return c;
}
 800ce1a:	4770      	bx	lr

0800ce1c <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 800ce1c:	6803      	ldr	r3, [r0, #0]
 800ce1e:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 800ce20:	6803      	ldr	r3, [r0, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	6003      	str	r3, [r0, #0]
}
 800ce26:	4770      	bx	lr

0800ce28 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 800ce28:	6802      	ldr	r2, [r0, #0]
 800ce2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce2e:	fb91 f3f3 	sdiv	r3, r1, r3
 800ce32:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800ce34:	6802      	ldr	r2, [r0, #0]
 800ce36:	1c53      	adds	r3, r2, #1
 800ce38:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 800ce3a:	424b      	negs	r3, r1
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	b2c9      	uxtb	r1, r1
 800ce40:	bf58      	it	pl
 800ce42:	4259      	negpl	r1, r3
 800ce44:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 800ce46:	6803      	ldr	r3, [r0, #0]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	6003      	str	r3, [r0, #0]
}
 800ce4c:	4770      	bx	lr

0800ce4e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800ce4e:	b570      	push	{r4, r5, r6, lr}
 800ce50:	4604      	mov	r4, r0
	int len = strlen(string);
 800ce52:	4608      	mov	r0, r1
{
 800ce54:	460e      	mov	r6, r1
	int len = strlen(string);
 800ce56:	f7f3 f9c5 	bl	80001e4 <strlen>
 800ce5a:	4605      	mov	r5, r0
	writeInt(pptr, len);
 800ce5c:	4601      	mov	r1, r0
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f7ff ffe2 	bl	800ce28 <writeInt>
	memcpy(*pptr, string, len);
 800ce64:	462a      	mov	r2, r5
 800ce66:	4631      	mov	r1, r6
 800ce68:	6820      	ldr	r0, [r4, #0]
 800ce6a:	f015 fa3c 	bl	80222e6 <memcpy>
	*pptr += len;
 800ce6e:	6820      	ldr	r0, [r4, #0]
 800ce70:	4428      	add	r0, r5
 800ce72:	6020      	str	r0, [r4, #0]
}
 800ce74:	bd70      	pop	{r4, r5, r6, pc}

0800ce76 <writeMQTTString>:


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800ce76:	b530      	push	{r4, r5, lr}
 800ce78:	b085      	sub	sp, #20
 800ce7a:	ac04      	add	r4, sp, #16
 800ce7c:	e904 000e 	stmdb	r4, {r1, r2, r3}
 800ce80:	9c02      	ldr	r4, [sp, #8]
	if (mqttstring.lenstring.len > 0)
 800ce82:	2c00      	cmp	r4, #0
{
 800ce84:	4605      	mov	r5, r0
	if (mqttstring.lenstring.len > 0)
 800ce86:	dd0c      	ble.n	800cea2 <writeMQTTString+0x2c>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800ce88:	4621      	mov	r1, r4
 800ce8a:	f7ff ffcd 	bl	800ce28 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800ce8e:	4622      	mov	r2, r4
 800ce90:	9903      	ldr	r1, [sp, #12]
 800ce92:	6800      	ldr	r0, [r0, #0]
 800ce94:	f015 fa27 	bl	80222e6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	441c      	add	r4, r3
 800ce9c:	602c      	str	r4, [r5, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800ce9e:	b005      	add	sp, #20
 800cea0:	bd30      	pop	{r4, r5, pc}
 800cea2:	9901      	ldr	r1, [sp, #4]
	else if (mqttstring.cstring)
 800cea4:	b121      	cbz	r1, 800ceb0 <writeMQTTString+0x3a>
}
 800cea6:	b005      	add	sp, #20
 800cea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeCString(pptr, mqttstring.cstring);
 800ceac:	f7ff bfcf 	b.w	800ce4e <writeCString>
}
 800ceb0:	b005      	add	sp, #20
 800ceb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeInt(pptr, 0);
 800ceb6:	f7ff bfb7 	b.w	800ce28 <writeInt>

0800ceba <readMQTTLenString>:
{
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800ceba:	680b      	ldr	r3, [r1, #0]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	2b01      	cmp	r3, #1
{
 800cec0:	b570      	push	{r4, r5, r6, lr}
 800cec2:	4605      	mov	r5, r0
 800cec4:	460c      	mov	r4, r1
 800cec6:	4616      	mov	r6, r2
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800cec8:	dc03      	bgt.n	800ced2 <readMQTTLenString+0x18>
	int rc = 0;
 800ceca:	2000      	movs	r0, #0
			mqttstring->lenstring.data = (char*)*pptr;
			*pptr += mqttstring->lenstring.len;
			rc = 1;
		}
	}
	mqttstring->cstring = NULL;
 800cecc:	2300      	movs	r3, #0
 800cece:	602b      	str	r3, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800ced2:	4608      	mov	r0, r1
 800ced4:	f7ff ff94 	bl	800ce00 <readInt>
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800ced8:	6823      	ldr	r3, [r4, #0]
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800ceda:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800cedc:	4418      	add	r0, r3
 800cede:	42b0      	cmp	r0, r6
 800cee0:	d8f3      	bhi.n	800ceca <readMQTTLenString+0x10>
			mqttstring->lenstring.data = (char*)*pptr;
 800cee2:	60ab      	str	r3, [r5, #8]
			*pptr += mqttstring->lenstring.len;
 800cee4:	6020      	str	r0, [r4, #0]
			rc = 1;
 800cee6:	2001      	movs	r0, #1
 800cee8:	e7f0      	b.n	800cecc <readMQTTLenString+0x12>

0800ceea <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800ceea:	b084      	sub	sp, #16
 800ceec:	ab04      	add	r3, sp, #16
 800ceee:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800cef2:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 800cef4:	b110      	cbz	r0, 800cefc <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 800cef6:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 800cef8:	f7f3 b974 	b.w	80001e4 <strlen>
}
 800cefc:	9802      	ldr	r0, [sp, #8]
 800cefe:	b004      	add	sp, #16
 800cf00:	4770      	bx	lr

0800cf02 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800cf02:	b570      	push	{r4, r5, r6, lr}
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
 800cf04:	6804      	ldr	r4, [r0, #0]
{
 800cf06:	460e      	mov	r6, r1
	if (a->cstring)
 800cf08:	b18c      	cbz	r4, 800cf2e <MQTTPacket_equals+0x2c>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f7f3 f96a 	bl	80001e4 <strlen>
 800cf10:	4605      	mov	r5, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
 800cf12:	4630      	mov	r0, r6
 800cf14:	f7f3 f966 	bl	80001e4 <strlen>
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800cf18:	4285      	cmp	r5, r0
 800cf1a:	d10b      	bne.n	800cf34 <MQTTPacket_equals+0x32>
 800cf1c:	462a      	mov	r2, r5
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4620      	mov	r0, r4
 800cf22:	f016 fc97 	bl	8023854 <strncmp>
 800cf26:	fab0 f080 	clz	r0, r0
 800cf2a:	0940      	lsrs	r0, r0, #5
}
 800cf2c:	bd70      	pop	{r4, r5, r6, pc}
		alen = a->lenstring.len;
 800cf2e:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
 800cf32:	e7ee      	b.n	800cf12 <MQTTPacket_equals+0x10>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800cf34:	2000      	movs	r0, #0
 800cf36:	e7f9      	b.n	800cf2c <MQTTPacket_equals+0x2a>

0800cf38 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	b085      	sub	sp, #20
 800cf3e:	ac10      	add	r4, sp, #64	; 0x40
 800cf40:	468a      	mov	sl, r1
	unsigned char *ptr = buf;
 800cf42:	9000      	str	r0, [sp, #0]
{
 800cf44:	4680      	mov	r8, r0
 800cf46:	4691      	mov	r9, r2
 800cf48:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cf4c:	461f      	mov	r7, r3
 800cf4e:	ab01      	add	r3, sp, #4
 800cf50:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800cf52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800cf56:	f7ff ffc8 	bl	800ceea <MQTTstrlen>
	MQTTHeader header = {0};
 800cf5a:	f04f 0b00 	mov.w	fp, #0
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800cf5e:	3002      	adds	r0, #2
	if (qos > 0)
 800cf60:	455f      	cmp	r7, fp
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800cf62:	eb00 0506 	add.w	r5, r0, r6
		len += 2; /* packetid */
 800cf66:	bfc8      	it	gt
 800cf68:	3502      	addgt	r5, #2
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	f7ff ff2c 	bl	800cdc8 <MQTTPacket_len>
 800cf70:	4550      	cmp	r0, sl
 800cf72:	dc2e      	bgt.n	800cfd2 <MQTTSerialize_publish+0x9a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
 800cf74:	2303      	movs	r3, #3
 800cf76:	f363 1b07 	bfi	fp, r3, #4, #4
	header.bits.dup = dup;
 800cf7a:	f369 0bc3 	bfi	fp, r9, #3, #1
	header.bits.qos = qos;
	header.bits.retain = retained;
 800cf7e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	header.bits.qos = qos;
 800cf82:	f367 0b42 	bfi	fp, r7, #1, #2
	header.bits.retain = retained;
 800cf86:	f363 0b00 	bfi	fp, r3, #0, #1
	writeChar(&ptr, header.byte); /* write header */
 800cf8a:	fa5f f18b 	uxtb.w	r1, fp
 800cf8e:	4668      	mov	r0, sp
 800cf90:	f7ff ff44 	bl	800ce1c <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800cf94:	4629      	mov	r1, r5
 800cf96:	9800      	ldr	r0, [sp, #0]
 800cf98:	f7ff fede 	bl	800cd58 <MQTTPacket_encode>
 800cf9c:	9b00      	ldr	r3, [sp, #0]
 800cf9e:	4418      	add	r0, r3
 800cfa0:	9000      	str	r0, [sp, #0]

	writeMQTTString(&ptr, topicName);
 800cfa2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cfa6:	4668      	mov	r0, sp
 800cfa8:	f7ff ff65 	bl	800ce76 <writeMQTTString>

	if (qos > 0)
 800cfac:	2f00      	cmp	r7, #0
 800cfae:	dd04      	ble.n	800cfba <MQTTSerialize_publish+0x82>
		writeInt(&ptr, packetid);
 800cfb0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 800cfb4:	4668      	mov	r0, sp
 800cfb6:	f7ff ff37 	bl	800ce28 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800cfba:	4632      	mov	r2, r6
 800cfbc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cfbe:	9800      	ldr	r0, [sp, #0]
 800cfc0:	f015 f991 	bl	80222e6 <memcpy>
	ptr += payloadlen;
 800cfc4:	9800      	ldr	r0, [sp, #0]
 800cfc6:	4430      	add	r0, r6

	rc = ptr - buf;
 800cfc8:	eba0 0008 	sub.w	r0, r0, r8

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800cfcc:	b005      	add	sp, #20
 800cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cfd2:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800cfd6:	e7f9      	b.n	800cfcc <MQTTSerialize_publish+0x94>

0800cfd8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800cfd8:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 4)
 800cfda:	2903      	cmp	r1, #3
{
 800cfdc:	4604      	mov	r4, r0
	unsigned char *ptr = buf;
 800cfde:	9401      	str	r4, [sp, #4]
	MQTTHeader header = {0};
 800cfe0:	f04f 0000 	mov.w	r0, #0
	if (buflen < 4)
 800cfe4:	dd1c      	ble.n	800d020 <MQTTSerialize_ack+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
 800cfe6:	f362 1007 	bfi	r0, r2, #4, #4
	header.bits.dup = dup;
 800cfea:	f363 00c3 	bfi	r0, r3, #3, #1
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800cfee:	1f93      	subs	r3, r2, #6
 800cff0:	425a      	negs	r2, r3
 800cff2:	415a      	adcs	r2, r3
 800cff4:	f362 0042 	bfi	r0, r2, #1, #2
	writeChar(&ptr, header.byte); /* write header */
 800cff8:	b2c1      	uxtb	r1, r0
 800cffa:	a801      	add	r0, sp, #4
 800cffc:	f7ff ff0e 	bl	800ce1c <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d000:	2102      	movs	r1, #2
 800d002:	9801      	ldr	r0, [sp, #4]
 800d004:	f7ff fea8 	bl	800cd58 <MQTTPacket_encode>
 800d008:	9b01      	ldr	r3, [sp, #4]
	writeInt(&ptr, packetid);
 800d00a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d00e:	4418      	add	r0, r3
 800d010:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
 800d012:	a801      	add	r0, sp, #4
 800d014:	f7ff ff08 	bl	800ce28 <writeInt>
	rc = ptr - buf;
 800d018:	9801      	ldr	r0, [sp, #4]
 800d01a:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d01c:	b002      	add	sp, #8
 800d01e:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d020:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d024:	e7fa      	b.n	800d01c <MQTTSerialize_ack+0x44>

0800d026 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800d026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char *ptr = buf;
	MQTTHeader header = {0};
 800d02a:	2400      	movs	r4, #0
{
 800d02c:	4607      	mov	r7, r0
 800d02e:	468b      	mov	fp, r1
 800d030:	4692      	mov	sl, r2
 800d032:	4699      	mov	r9, r3
	unsigned char *ptr = buf;
 800d034:	9001      	str	r0, [sp, #4]
	int len = 2; /* packetid */
 800d036:	2502      	movs	r5, #2
	for (i = 0; i < count; ++i)
 800d038:	4626      	mov	r6, r4
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d03a:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < count; ++i)
 800d03e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d040:	42b3      	cmp	r3, r6
 800d042:	dc25      	bgt.n	800d090 <MQTTSerialize_subscribe+0x6a>
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800d044:	4628      	mov	r0, r5
 800d046:	f7ff febf 	bl	800cdc8 <MQTTPacket_len>
 800d04a:	4558      	cmp	r0, fp
 800d04c:	dc39      	bgt.n	800d0c2 <MQTTSerialize_subscribe+0x9c>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
 800d04e:	2308      	movs	r3, #8
 800d050:	f363 1407 	bfi	r4, r3, #4, #4
	header.bits.dup = dup;
 800d054:	f36a 04c3 	bfi	r4, sl, #3, #1
	header.bits.qos = 1;
 800d058:	2301      	movs	r3, #1
 800d05a:	f363 0442 	bfi	r4, r3, #1, #2
	writeChar(&ptr, header.byte); /* write header */
 800d05e:	b2e1      	uxtb	r1, r4
 800d060:	a801      	add	r0, sp, #4
 800d062:	f7ff fedb 	bl	800ce1c <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d066:	4629      	mov	r1, r5
 800d068:	9801      	ldr	r0, [sp, #4]
 800d06a:	f7ff fe75 	bl	800cd58 <MQTTPacket_encode>
 800d06e:	9b01      	ldr	r3, [sp, #4]
 800d070:	4418      	add	r0, r3
 800d072:	9001      	str	r0, [sp, #4]

	writeInt(&ptr, packetid);
 800d074:	4649      	mov	r1, r9
 800d076:	a801      	add	r0, sp, #4
 800d078:	f7ff fed6 	bl	800ce28 <writeInt>

	for (i = 0; i < count; ++i)
 800d07c:	2400      	movs	r4, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800d07e:	250c      	movs	r5, #12
	for (i = 0; i < count; ++i)
 800d080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d082:	429c      	cmp	r4, r3
 800d084:	db0e      	blt.n	800d0a4 <MQTTSerialize_subscribe+0x7e>
		writeChar(&ptr, requestedQoSs[i]);
	}

	rc = ptr - buf;
 800d086:	9801      	ldr	r0, [sp, #4]
 800d088:	1bc0      	subs	r0, r0, r7
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d08a:	b003      	add	sp, #12
 800d08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d092:	fb08 3206 	mla	r2, r8, r6, r3
 800d096:	ca07      	ldmia	r2, {r0, r1, r2}
 800d098:	f7ff ff27 	bl	800ceea <MQTTstrlen>
 800d09c:	3003      	adds	r0, #3
 800d09e:	4405      	add	r5, r0
	for (i = 0; i < count; ++i)
 800d0a0:	3601      	adds	r6, #1
 800d0a2:	e7cc      	b.n	800d03e <MQTTSerialize_subscribe+0x18>
		writeMQTTString(&ptr, topicFilters[i]);
 800d0a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0a6:	fb05 3304 	mla	r3, r5, r4, r3
 800d0aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0ac:	a801      	add	r0, sp, #4
 800d0ae:	f7ff fee2 	bl	800ce76 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800d0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0b4:	a801      	add	r0, sp, #4
 800d0b6:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
 800d0ba:	f7ff feaf 	bl	800ce1c <writeChar>
	for (i = 0; i < count; ++i)
 800d0be:	3401      	adds	r4, #1
 800d0c0:	e7de      	b.n	800d080 <MQTTSerialize_subscribe+0x5a>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d0c2:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d0c6:	e7e0      	b.n	800d08a <MQTTSerialize_subscribe+0x64>

0800d0c8 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800d0c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
 800d0cc:	ad02      	add	r5, sp, #8
{
 800d0ce:	4698      	mov	r8, r3
	unsigned char* curdata = buf;
 800d0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d2:	f845 3d08 	str.w	r3, [r5, #-8]!
{
 800d0d6:	4681      	mov	r9, r0
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d0d8:	4628      	mov	r0, r5
{
 800d0da:	460f      	mov	r7, r1
 800d0dc:	4616      	mov	r6, r2
	header.byte = readChar(&curdata);
 800d0de:	f7ff fe97 	bl	800ce10 <readChar>
	if (header.bits.type != SUBACK)
 800d0e2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d0e6:	2890      	cmp	r0, #144	; 0x90
 800d0e8:	d126      	bne.n	800d138 <MQTTDeserialize_suback+0x70>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d0ea:	a901      	add	r1, sp, #4
 800d0ec:	9800      	ldr	r0, [sp, #0]
 800d0ee:	f7ff fe7d 	bl	800cdec <MQTTPacket_decodeBuf>
 800d0f2:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800d0f4:	f8dd a004 	ldr.w	sl, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d0f8:	4404      	add	r4, r0
	if (enddata - curdata < 2)
 800d0fa:	f1ba 0f01 	cmp.w	sl, #1
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d0fe:	9400      	str	r4, [sp, #0]
	if (enddata - curdata < 2)
 800d100:	dd0b      	ble.n	800d11a <MQTTDeserialize_suback+0x52>
		goto exit;

	*packetid = readInt(&curdata);
 800d102:	4628      	mov	r0, r5
 800d104:	f7ff fe7c 	bl	800ce00 <readInt>

	*count = 0;
 800d108:	2300      	movs	r3, #0
	*packetid = readInt(&curdata);
 800d10a:	f8a9 0000 	strh.w	r0, [r9]
	enddata = curdata + mylen;
 800d10e:	4454      	add	r4, sl
	*count = 0;
 800d110:	6033      	str	r3, [r6, #0]
	while (curdata < enddata)
 800d112:	9b00      	ldr	r3, [sp, #0]
 800d114:	42a3      	cmp	r3, r4
 800d116:	d303      	bcc.n	800d120 <MQTTDeserialize_suback+0x58>
			goto exit;
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
	}

	rc = 1;
 800d118:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d11a:	b002      	add	sp, #8
 800d11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (*count > maxcount)
 800d120:	6833      	ldr	r3, [r6, #0]
 800d122:	42bb      	cmp	r3, r7
 800d124:	dc0a      	bgt.n	800d13c <MQTTDeserialize_suback+0x74>
		grantedQoSs[(*count)++] = readChar(&curdata);
 800d126:	4628      	mov	r0, r5
 800d128:	f7ff fe72 	bl	800ce10 <readChar>
 800d12c:	6833      	ldr	r3, [r6, #0]
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	6032      	str	r2, [r6, #0]
 800d132:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
 800d136:	e7ec      	b.n	800d112 <MQTTDeserialize_suback+0x4a>
	int rc = 0;
 800d138:	2000      	movs	r0, #0
 800d13a:	e7ee      	b.n	800d11a <MQTTDeserialize_suback+0x52>
			rc = -1;
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
	return rc;
 800d140:	e7eb      	b.n	800d11a <MQTTDeserialize_suback+0x52>

0800d142 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 800d142:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d146:	2100      	movs	r1, #0
 800d148:	f015 b8f1 	b.w	802232e <memset>

0800d14c <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 800d14c:	b120      	cbz	r0, 800d158 <mbedtls_aes_free+0xc>
 800d14e:	f500 738c 	add.w	r3, r0, #280	; 0x118
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d152:	2200      	movs	r2, #0
 800d154:	4298      	cmp	r0, r3
 800d156:	d100      	bne.n	800d15a <mbedtls_aes_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
}
 800d158:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d15a:	7002      	strb	r2, [r0, #0]
 800d15c:	3001      	adds	r0, #1
 800d15e:	e7f9      	b.n	800d154 <mbedtls_aes_free+0x8>

0800d160 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
 800d160:	2ac0      	cmp	r2, #192	; 0xc0
{
 800d162:	b570      	push	{r4, r5, r6, lr}
    switch( keybits )
 800d164:	d04d      	beq.n	800d202 <mbedtls_aes_setkey_enc+0xa2>
 800d166:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d16a:	d04c      	beq.n	800d206 <mbedtls_aes_setkey_enc+0xa6>
 800d16c:	2a80      	cmp	r2, #128	; 0x80
 800d16e:	f040 80fb 	bne.w	800d368 <mbedtls_aes_setkey_enc+0x208>
    {
        case 128: ctx->nr = 10; break;
 800d172:	230a      	movs	r3, #10
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
 800d174:	6003      	str	r3, [r0, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d176:	f100 0308 	add.w	r3, r0, #8
 800d17a:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d17c:	0952      	lsrs	r2, r2, #5
 800d17e:	2500      	movs	r5, #0
 800d180:	42aa      	cmp	r2, r5
 800d182:	f101 0104 	add.w	r1, r1, #4
 800d186:	d140      	bne.n	800d20a <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 800d188:	6802      	ldr	r2, [r0, #0]
 800d18a:	2a0c      	cmp	r2, #12
 800d18c:	d04f      	beq.n	800d22e <mbedtls_aes_setkey_enc+0xce>
 800d18e:	2a0e      	cmp	r2, #14
 800d190:	f000 808b 	beq.w	800d2aa <mbedtls_aes_setkey_enc+0x14a>
 800d194:	2a0a      	cmp	r2, #10
 800d196:	d132      	bne.n	800d1fe <mbedtls_aes_setkey_enc+0x9e>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 800d198:	4c75      	ldr	r4, [pc, #468]	; (800d370 <mbedtls_aes_setkey_enc+0x210>)
            for( i = 0; i < 10; i++, RK += 4 )
 800d19a:	2500      	movs	r5, #0
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d19c:	68d8      	ldr	r0, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d19e:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d1a6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d1aa:	4421      	add	r1, r4
            for( i = 0; i < 10; i++, RK += 4 )
 800d1ac:	3501      	adds	r5, #1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d1ae:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d1b2:	404a      	eors	r2, r1
 800d1b4:	eb04 6110 	add.w	r1, r4, r0, lsr #24
            for( i = 0; i < 10; i++, RK += 4 )
 800d1b8:	2d0a      	cmp	r5, #10
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d1ba:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800d1be:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800d1c2:	fa54 f180 	uxtab	r1, r4, r0
            for( i = 0; i < 10; i++, RK += 4 )
 800d1c6:	f103 0310 	add.w	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800d1ca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d1ce:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800d1d2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800d1d6:	4421      	add	r1, r4
 800d1d8:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d1dc:	ea82 2201 	eor.w	r2, r2, r1, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 800d1e0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                RK[4]  = RK[0] ^ RCON[i] ^
 800d1e4:	601a      	str	r2, [r3, #0]
                RK[5]  = RK[1] ^ RK[4];
 800d1e6:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 800d1ea:	f853 1c08 	ldr.w	r1, [r3, #-8]
                RK[5]  = RK[1] ^ RK[4];
 800d1ee:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 800d1f0:	ea82 0201 	eor.w	r2, r2, r1
 800d1f4:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 800d1f6:	ea82 0200 	eor.w	r2, r2, r0
 800d1fa:	60da      	str	r2, [r3, #12]
            for( i = 0; i < 10; i++, RK += 4 )
 800d1fc:	d1ce      	bne.n	800d19c <mbedtls_aes_setkey_enc+0x3c>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 800d1fe:	2000      	movs	r0, #0
 800d200:	e0b4      	b.n	800d36c <mbedtls_aes_setkey_enc+0x20c>
        case 192: ctx->nr = 12; break;
 800d202:	230c      	movs	r3, #12
 800d204:	e7b6      	b.n	800d174 <mbedtls_aes_setkey_enc+0x14>
        case 256: ctx->nr = 14; break;
 800d206:	230e      	movs	r3, #14
 800d208:	e7b4      	b.n	800d174 <mbedtls_aes_setkey_enc+0x14>
        GET_UINT32_LE( RK[i], key, i << 2 );
 800d20a:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 800d20e:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 800d212:	0424      	lsls	r4, r4, #16
 800d214:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800d218:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 800d21c:	4334      	orrs	r4, r6
 800d21e:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 800d222:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 800d226:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d22a:	3501      	adds	r5, #1
 800d22c:	e7a8      	b.n	800d180 <mbedtls_aes_setkey_enc+0x20>
                RK[6]  = RK[0] ^ RCON[i] ^
 800d22e:	4c50      	ldr	r4, [pc, #320]	; (800d370 <mbedtls_aes_setkey_enc+0x210>)
            for( i = 0; i < 8; i++, RK += 6 )
 800d230:	2500      	movs	r5, #0
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d232:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d234:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d23c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d240:	4421      	add	r1, r4
            for( i = 0; i < 8; i++, RK += 6 )
 800d242:	3501      	adds	r5, #1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d244:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d248:	404a      	eors	r2, r1
 800d24a:	eb04 6110 	add.w	r1, r4, r0, lsr #24
            for( i = 0; i < 8; i++, RK += 6 )
 800d24e:	2d08      	cmp	r5, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d250:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800d254:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800d258:	fa54 f180 	uxtab	r1, r4, r0
            for( i = 0; i < 8; i++, RK += 6 )
 800d25c:	f103 0318 	add.w	r3, r3, #24
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800d260:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d264:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800d268:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800d26c:	4421      	add	r1, r4
 800d26e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d272:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 800d276:	f853 1c14 	ldr.w	r1, [r3, #-20]
                RK[6]  = RK[0] ^ RCON[i] ^
 800d27a:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[1] ^ RK[6];
 800d27c:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 800d280:	f853 1c10 	ldr.w	r1, [r3, #-16]
                RK[7]  = RK[1] ^ RK[6];
 800d284:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 800d286:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 800d28a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                RK[8]  = RK[2] ^ RK[7];
 800d28e:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 800d290:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 800d294:	f853 1c08 	ldr.w	r1, [r3, #-8]
                RK[9]  = RK[3] ^ RK[8];
 800d298:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 800d29a:	ea82 0201 	eor.w	r2, r2, r1
 800d29e:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 800d2a0:	ea82 0200 	eor.w	r2, r2, r0
 800d2a4:	615a      	str	r2, [r3, #20]
            for( i = 0; i < 8; i++, RK += 6 )
 800d2a6:	d1c4      	bne.n	800d232 <mbedtls_aes_setkey_enc+0xd2>
 800d2a8:	e7a9      	b.n	800d1fe <mbedtls_aes_setkey_enc+0x9e>
                RK[8]  = RK[0] ^ RCON[i] ^
 800d2aa:	4931      	ldr	r1, [pc, #196]	; (800d370 <mbedtls_aes_setkey_enc+0x210>)
            for( i = 0; i < 7; i++, RK += 8 )
 800d2ac:	2400      	movs	r4, #0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d2ae:	69d8      	ldr	r0, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d2b0:	681d      	ldr	r5, [r3, #0]
 800d2b2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d2b6:	691e      	ldr	r6, [r3, #16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d2b8:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d2ba:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800d2be:	440d      	add	r5, r1
            for( i = 0; i < 7; i++, RK += 8 )
 800d2c0:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d2c2:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d2c6:	406a      	eors	r2, r5
 800d2c8:	eb01 6510 	add.w	r5, r1, r0, lsr #24
            for( i = 0; i < 7; i++, RK += 8 )
 800d2cc:	2c07      	cmp	r4, #7
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d2ce:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
 800d2d2:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800d2d6:	fa51 f580 	uxtab	r5, r1, r0
            for( i = 0; i < 7; i++, RK += 8 )
 800d2da:	f103 0320 	add.w	r3, r3, #32
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800d2de:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d2e2:	ea82 6205 	eor.w	r2, r2, r5, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800d2e6:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d2ea:	440d      	add	r5, r1
 800d2ec:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d2f0:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 800d2f4:	f853 5c1c 	ldr.w	r5, [r3, #-28]
                RK[8]  = RK[0] ^ RCON[i] ^
 800d2f8:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[1] ^ RK[8];
 800d2fa:	ea82 0205 	eor.w	r2, r2, r5
                RK[10] = RK[2] ^ RK[9];
 800d2fe:	f853 5c18 	ldr.w	r5, [r3, #-24]
                RK[9]  = RK[1] ^ RK[8];
 800d302:	605a      	str	r2, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 800d304:	ea82 0205 	eor.w	r2, r2, r5
                RK[11] = RK[3] ^ RK[10];
 800d308:	f853 5c14 	ldr.w	r5, [r3, #-20]
                RK[10] = RK[2] ^ RK[9];
 800d30c:	609a      	str	r2, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 800d30e:	ea82 0205 	eor.w	r2, r2, r5
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d312:	fa51 f582 	uxtab	r5, r1, r2
                RK[11] = RK[3] ^ RK[10];
 800d316:	60da      	str	r2, [r3, #12]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d318:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d31c:	ea85 0506 	eor.w	r5, r5, r6
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800d320:	eb01 6612 	add.w	r6, r1, r2, lsr #24
 800d324:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d328:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d32c:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800d330:	440e      	add	r6, r1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d332:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d336:	440a      	add	r2, r1
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d338:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d33c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d340:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
 800d344:	ea85 4202 	eor.w	r2, r5, r2, lsl #16
                RK[13] = RK[5] ^ RK[12];
 800d348:	f853 5c0c 	ldr.w	r5, [r3, #-12]
                RK[12] = RK[4] ^
 800d34c:	611a      	str	r2, [r3, #16]
                RK[13] = RK[5] ^ RK[12];
 800d34e:	ea82 0205 	eor.w	r2, r2, r5
                RK[14] = RK[6] ^ RK[13];
 800d352:	f853 5c08 	ldr.w	r5, [r3, #-8]
                RK[13] = RK[5] ^ RK[12];
 800d356:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 800d358:	ea82 0205 	eor.w	r2, r2, r5
 800d35c:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 800d35e:	ea82 0200 	eor.w	r2, r2, r0
 800d362:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 7; i++, RK += 8 )
 800d364:	d1a3      	bne.n	800d2ae <mbedtls_aes_setkey_enc+0x14e>
 800d366:	e74a      	b.n	800d1fe <mbedtls_aes_setkey_enc+0x9e>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 800d368:	f06f 001f 	mvn.w	r0, #31
}
 800d36c:	bd70      	pop	{r4, r5, r6, pc}
 800d36e:	bf00      	nop
 800d370:	08028050 	.word	0x08028050

0800d374 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800d374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d376:	b0c7      	sub	sp, #284	; 0x11c
 800d378:	4604      	mov	r4, r0
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 800d37a:	4668      	mov	r0, sp
{
 800d37c:	460d      	mov	r5, r1
 800d37e:	4616      	mov	r6, r2
    mbedtls_aes_init( &cty );
 800d380:	f7ff fedf 	bl	800d142 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d384:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d388:	4629      	mov	r1, r5
    ctx->rk = RK = ctx->buf;
 800d38a:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d38c:	4632      	mov	r2, r6
 800d38e:	4668      	mov	r0, sp
 800d390:	f7ff fee6 	bl	800d160 <mbedtls_aes_setkey_enc>
 800d394:	4605      	mov	r5, r0
 800d396:	b9d8      	cbnz	r0, 800d3d0 <mbedtls_aes_setkey_dec+0x5c>
        goto exit;

    ctx->nr = cty.nr;
 800d398:	9a00      	ldr	r2, [sp, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800d39a:	9801      	ldr	r0, [sp, #4]
    ctx->nr = cty.nr;
 800d39c:	6022      	str	r2, [r4, #0]
    SK = cty.rk + cty.nr * 4;
 800d39e:	0113      	lsls	r3, r2, #4
 800d3a0:	18c1      	adds	r1, r0, r3

    *RK++ = *SK++;
 800d3a2:	58c3      	ldr	r3, [r0, r3]
 800d3a4:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
 800d3a6:	684b      	ldr	r3, [r1, #4]
 800d3a8:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
 800d3aa:	688b      	ldr	r3, [r1, #8]
 800d3ac:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
 800d3ae:	68c8      	ldr	r0, [r1, #12]
 800d3b0:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d3b2:	4825      	ldr	r0, [pc, #148]	; (800d448 <mbedtls_aes_setkey_dec+0xd4>)
    *RK++ = *SK++;
 800d3b4:	f104 0318 	add.w	r3, r4, #24
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d3b8:	3910      	subs	r1, #16
 800d3ba:	1e54      	subs	r4, r2, #1
 800d3bc:	2c00      	cmp	r4, #0
 800d3be:	dc0d      	bgt.n	800d3dc <mbedtls_aes_setkey_dec+0x68>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 800d3c0:	680a      	ldr	r2, [r1, #0]
 800d3c2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800d3c4:	684a      	ldr	r2, [r1, #4]
 800d3c6:	605a      	str	r2, [r3, #4]
    *RK++ = *SK++;
 800d3c8:	688a      	ldr	r2, [r1, #8]
 800d3ca:	609a      	str	r2, [r3, #8]
    *RK++ = *SK++;
 800d3cc:	68ca      	ldr	r2, [r1, #12]
 800d3ce:	60da      	str	r2, [r3, #12]

exit:
    mbedtls_aes_free( &cty );
 800d3d0:	4668      	mov	r0, sp
 800d3d2:	f7ff febb 	bl	800d14c <mbedtls_aes_free>

    return( ret );
}
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	b047      	add	sp, #284	; 0x11c
 800d3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3dc:	1f0f      	subs	r7, r1, #4
 800d3de:	f103 0c10 	add.w	ip, r3, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d3e2:	461a      	mov	r2, r3
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d3e4:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800d3e8:	fa50 f683 	uxtab	r6, r0, r3
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d3ec:	eb00 6e13 	add.w	lr, r0, r3, lsr #24
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d3f0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d3f4:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d3f8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d3fc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d400:	f8d6 6128 	ldr.w	r6, [r6, #296]	; 0x128
 800d404:	f8de e528 	ldr.w	lr, [lr, #1320]	; 0x528
 800d408:	ea86 060e 	eor.w	r6, r6, lr
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d40c:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 800d410:	4486      	add	lr, r0
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d412:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800d416:	4403      	add	r3, r0
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d418:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d420:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d424:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d428:	f8de e928 	ldr.w	lr, [lr, #2344]	; 0x928
 800d42c:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 800d430:	ea86 060e 	eor.w	r6, r6, lr
 800d434:	4073      	eors	r3, r6
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d436:	f842 3b04 	str.w	r3, [r2], #4
        for( j = 0; j < 4; j++, SK++ )
 800d43a:	4562      	cmp	r2, ip
 800d43c:	d1d2      	bne.n	800d3e4 <mbedtls_aes_setkey_dec+0x70>
 800d43e:	4613      	mov	r3, r2
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d440:	3c01      	subs	r4, #1
 800d442:	3910      	subs	r1, #16
 800d444:	e7ba      	b.n	800d3bc <mbedtls_aes_setkey_dec+0x48>
 800d446:	bf00      	nop
 800d448:	08028050 	.word	0x08028050

0800d44c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800d450:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d452:	680e      	ldr	r6, [r1, #0]
 800d454:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d456:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d458:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d45a:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d45c:	4066      	eors	r6, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d45e:	685c      	ldr	r4, [r3, #4]
 800d460:	4065      	eors	r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d462:	689c      	ldr	r4, [r3, #8]
{
 800d464:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d466:	1040      	asrs	r0, r0, #1
 800d468:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d46a:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d46e:	68cf      	ldr	r7, [r1, #12]
 800d470:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d472:	9000      	str	r0, [sp, #0]
 800d474:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d478:	4bc2      	ldr	r3, [pc, #776]	; (800d784 <mbedtls_internal_aes_encrypt+0x338>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d47a:	4079      	eors	r1, r7
 800d47c:	f850 7c10 	ldr.w	r7, [r0, #-16]
 800d480:	9701      	str	r7, [sp, #4]
 800d482:	b2f7      	uxtb	r7, r6
 800d484:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d488:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800d48c:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d48e:	ea87 0e04 	eor.w	lr, r7, r4
 800d492:	0e0f      	lsrs	r7, r1, #24
 800d494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d498:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800d49c:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d4a0:	ea8e 0e07 	eor.w	lr, lr, r7
 800d4a4:	f3c5 2707 	ubfx	r7, r5, #8, #8
 800d4a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4ac:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800d4b0:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800d4b4:	ea8e 0e07 	eor.w	lr, lr, r7
 800d4b8:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800d4bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4c0:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d4c4:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800d4c8:	f8da a430 	ldr.w	sl, [sl, #1072]	; 0x430
 800d4cc:	ea8e 0e07 	eor.w	lr, lr, r7
 800d4d0:	b2ef      	uxtb	r7, r5
 800d4d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4d6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800d4da:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d4dc:	ea87 0c04 	eor.w	ip, r7, r4
 800d4e0:	0e37      	lsrs	r7, r6, #24
 800d4e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4e6:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800d4ea:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d4ee:	ea8c 0c07 	eor.w	ip, ip, r7
 800d4f2:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800d4f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4fa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d4fe:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800d502:	ea8c 0c07 	eor.w	ip, ip, r7
 800d506:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800d50a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d50e:	fa5f f88e 	uxtb.w	r8, lr
 800d512:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800d516:	ea8c 0c07 	eor.w	ip, ip, r7
 800d51a:	fa5f f78b 	uxtb.w	r7, fp
 800d51e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d522:	f3cc 2907 	ubfx	r9, ip, #8, #8
 800d526:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d528:	4067      	eors	r7, r4
 800d52a:	ea87 070a 	eor.w	r7, r7, sl
 800d52e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800d532:	b2c9      	uxtb	r1, r1
 800d534:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d538:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800d53c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d53e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d542:	4061      	eors	r1, r4
 800d544:	f8da a830 	ldr.w	sl, [sl, #2096]	; 0x830
 800d548:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800d54c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d550:	ea87 070a 	eor.w	r7, r7, sl
 800d554:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 800d558:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800d55c:	f8d4 4430 	ldr.w	r4, [r4, #1072]	; 0x430
 800d560:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800d564:	4061      	eors	r1, r4
 800d566:	f8d6 4830 	ldr.w	r4, [r6, #2096]	; 0x830
 800d56a:	4061      	eors	r1, r4
 800d56c:	f8d5 4c30 	ldr.w	r4, [r5, #3120]	; 0xc30
 800d570:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d574:	4061      	eors	r1, r4
 800d576:	f8da ac30 	ldr.w	sl, [sl, #3120]	; 0xc30
 800d57a:	f850 4c0c 	ldr.w	r4, [r0, #-12]
 800d57e:	9402      	str	r4, [sp, #8]
 800d580:	f3c1 4607 	ubfx	r6, r1, #16, #8
 800d584:	9603      	str	r6, [sp, #12]
 800d586:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800d58a:	ea87 070a 	eor.w	r7, r7, sl
 800d58e:	9604      	str	r6, [sp, #16]
 800d590:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800d594:	9605      	str	r6, [sp, #20]
 800d596:	b2fe      	uxtb	r6, r7
 800d598:	9606      	str	r6, [sp, #24]
 800d59a:	f3c1 2607 	ubfx	r6, r1, #8, #8
 800d59e:	9607      	str	r6, [sp, #28]
 800d5a0:	f3ce 4607 	ubfx	r6, lr, #16, #8
 800d5a4:	9608      	str	r6, [sp, #32]
 800d5a6:	0e0d      	lsrs	r5, r1, #24
 800d5a8:	ea4f 661c 	mov.w	r6, ip, lsr #24
 800d5ac:	b2c9      	uxtb	r1, r1
 800d5ae:	9609      	str	r6, [sp, #36]	; 0x24
 800d5b0:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800d5b4:	910b      	str	r1, [sp, #44]	; 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d5b6:	9900      	ldr	r1, [sp, #0]
 800d5b8:	960a      	str	r6, [sp, #40]	; 0x28
 800d5ba:	2900      	cmp	r1, #0
 800d5bc:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800d5c0:	fa5f f48c 	uxtb.w	r4, ip
 800d5c4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 800d5c8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800d5cc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800d5d0:	ea4f 6717 	mov.w	r7, r7, lsr #24
 800d5d4:	f100 0020 	add.w	r0, r0, #32
 800d5d8:	dc77      	bgt.n	800d6ca <mbedtls_internal_aes_encrypt+0x27e>

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d5da:	4b6b      	ldr	r3, [pc, #428]	; (800d788 <mbedtls_internal_aes_encrypt+0x33c>)
    X0 = *RK++ ^ \
 800d5dc:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800d5de:	4498      	add	r8, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d5e0:	4499      	add	r9, r3
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800d5e2:	f898 6028 	ldrb.w	r6, [r8, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d5e6:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800d5ea:	449a      	add	sl, r3
    X0 = *RK++ ^ \
 800d5ec:	4046      	eors	r6, r0
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800d5ee:	441d      	add	r5, r3
    X0 = *RK++ ^ \
 800d5f0:	ea86 2601 	eor.w	r6, r6, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800d5f4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28

    X1 = *RK++ ^ \
 800d5f8:	9802      	ldr	r0, [sp, #8]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800d5fa:	441c      	add	r4, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800d5fc:	449b      	add	fp, r3
    X0 = *RK++ ^ \
 800d5fe:	ea86 4601 	eor.w	r6, r6, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800d602:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800d606:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 800d60a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    X0 = *RK++ ^ \
 800d60c:	ea86 6601 	eor.w	r6, r6, r1, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800d610:	f89b 1028 	ldrb.w	r1, [fp, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800d614:	7016      	strb	r6, [r2, #0]
    X1 = *RK++ ^ \
 800d616:	4045      	eors	r5, r0
 800d618:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800d61c:	9903      	ldr	r1, [sp, #12]
 800d61e:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800d620:	449e      	add	lr, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800d622:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800d626:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800d62a:	9904      	ldr	r1, [sp, #16]
 800d62c:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800d62e:	449c      	add	ip, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800d630:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800d634:	ea85 6501 	eor.w	r5, r5, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d638:	9907      	ldr	r1, [sp, #28]
    PUT_UINT32_LE( X1, output,  4 );
 800d63a:	7115      	strb	r5, [r2, #4]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d63c:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800d63e:	441f      	add	r7, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d640:	f891 8028 	ldrb.w	r8, [r1, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800d644:	9906      	ldr	r1, [sp, #24]
 800d646:	4419      	add	r1, r3
 800d648:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800d64c:	9905      	ldr	r1, [sp, #20]
 800d64e:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800d650:	9908      	ldr	r1, [sp, #32]
 800d652:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800d654:	ea80 2008 	eor.w	r0, r0, r8, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800d658:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800d65c:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800d660:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d662:	4419      	add	r1, r3
 800d664:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800d668:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800d66c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d66e:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800d670:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800d674:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X3 = *RK++ ^ \
 800d678:	4061      	eors	r1, r4
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800d67a:	f89e 4028 	ldrb.w	r4, [lr, #40]	; 0x28
    X3 = *RK++ ^ \
 800d67e:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800d682:	f89c 4028 	ldrb.w	r4, [ip, #40]	; 0x28
    X3 = *RK++ ^ \
 800d686:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
 800d68a:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800d68e:	0a31      	lsrs	r1, r6, #8
 800d690:	7051      	strb	r1, [r2, #1]
 800d692:	0c31      	lsrs	r1, r6, #16
 800d694:	7091      	strb	r1, [r2, #2]
 800d696:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 800d698:	0a29      	lsrs	r1, r5, #8
    PUT_UINT32_LE( X0, output,  0 );
 800d69a:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800d69c:	7151      	strb	r1, [r2, #5]
 800d69e:	0c29      	lsrs	r1, r5, #16
 800d6a0:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800d6a2:	0a01      	lsrs	r1, r0, #8
 800d6a4:	7251      	strb	r1, [r2, #9]
 800d6a6:	0c01      	lsrs	r1, r0, #16
 800d6a8:	7210      	strb	r0, [r2, #8]
 800d6aa:	7291      	strb	r1, [r2, #10]
 800d6ac:	0e00      	lsrs	r0, r0, #24
    PUT_UINT32_LE( X3, output, 12 );
 800d6ae:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800d6b0:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
 800d6b2:	72d0      	strb	r0, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800d6b4:	7313      	strb	r3, [r2, #12]
 800d6b6:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800d6b8:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800d6ba:	0c19      	lsrs	r1, r3, #16
 800d6bc:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800d6be:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X3, output, 12 );
 800d6c0:	7391      	strb	r1, [r2, #14]
 800d6c2:	73d3      	strb	r3, [r2, #15]
}
 800d6c4:	b00d      	add	sp, #52	; 0x34
 800d6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800d6ca:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800d6ce:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d6d2:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
 800d6d6:	f8d5 1430 	ldr.w	r1, [r5, #1072]	; 0x430
 800d6da:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800d6de:	404e      	eors	r6, r1
 800d6e0:	9901      	ldr	r1, [sp, #4]
 800d6e2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d6e6:	404e      	eors	r6, r1
 800d6e8:	f8d9 1830 	ldr.w	r1, [r9, #2096]	; 0x830
 800d6ec:	404e      	eors	r6, r1
 800d6ee:	f8da 1c30 	ldr.w	r1, [sl, #3120]	; 0xc30
 800d6f2:	404e      	eors	r6, r1
 800d6f4:	9904      	ldr	r1, [sp, #16]
 800d6f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d6fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d700:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
 800d704:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d706:	404d      	eors	r5, r1
 800d708:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800d70c:	9902      	ldr	r1, [sp, #8]
 800d70e:	404d      	eors	r5, r1
 800d710:	f8db 1830 	ldr.w	r1, [fp, #2096]	; 0x830
 800d714:	404d      	eors	r5, r1
 800d716:	9903      	ldr	r1, [sp, #12]
 800d718:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d71c:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800d720:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800d724:	404d      	eors	r5, r1
 800d726:	9906      	ldr	r1, [sp, #24]
 800d728:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d72c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d730:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800d732:	f8d8 1430 	ldr.w	r1, [r8, #1072]	; 0x430
 800d736:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d73a:	404c      	eors	r4, r1
 800d73c:	9905      	ldr	r1, [sp, #20]
 800d73e:	404c      	eors	r4, r1
 800d740:	9907      	ldr	r1, [sp, #28]
 800d742:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d746:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800d74a:	f8d1 1830 	ldr.w	r1, [r1, #2096]	; 0x830
 800d74e:	404c      	eors	r4, r1
 800d750:	9908      	ldr	r1, [sp, #32]
 800d752:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d756:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800d75a:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800d75e:	ea84 0b01 	eor.w	fp, r4, r1
 800d762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d764:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d768:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d76a:	4079      	eors	r1, r7
 800d76c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d76e:	4079      	eors	r1, r7
 800d770:	f8de 7830 	ldr.w	r7, [lr, #2096]	; 0x830
 800d774:	4079      	eors	r1, r7
 800d776:	f8dc 7c30 	ldr.w	r7, [ip, #3120]	; 0xc30
 800d77a:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d77c:	9f00      	ldr	r7, [sp, #0]
 800d77e:	3f01      	subs	r7, #1
 800d780:	9700      	str	r7, [sp, #0]
 800d782:	e67b      	b.n	800d47c <mbedtls_internal_aes_encrypt+0x30>
 800d784:	08029148 	.word	0x08029148
 800d788:	08028050 	.word	0x08028050

0800d78c <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800d78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800d790:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d792:	680d      	ldr	r5, [r1, #0]
 800d794:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d796:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d798:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d79a:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d79c:	4065      	eors	r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d79e:	685c      	ldr	r4, [r3, #4]
 800d7a0:	4066      	eors	r6, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d7a2:	689c      	ldr	r4, [r3, #8]
{
 800d7a4:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d7a6:	1040      	asrs	r0, r0, #1
 800d7a8:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d7aa:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d7ae:	68cf      	ldr	r7, [r1, #12]
 800d7b0:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d7b2:	9000      	str	r0, [sp, #0]
 800d7b4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d7b8:	4bc7      	ldr	r3, [pc, #796]	; (800dad8 <mbedtls_internal_aes_decrypt+0x34c>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d7ba:	4079      	eors	r1, r7
 800d7bc:	b2ef      	uxtb	r7, r5
 800d7be:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d7c2:	f850 4c10 	ldr.w	r4, [r0, #-16]
 800d7c6:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800d7ca:	9401      	str	r4, [sp, #4]
 800d7cc:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800d7d0:	ea87 0c04 	eor.w	ip, r7, r4
 800d7d4:	0e37      	lsrs	r7, r6, #24
 800d7d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d7da:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800d7de:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800d7e2:	ea8c 0c07 	eor.w	ip, ip, r7
 800d7e6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 800d7ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d7ee:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 800d7f2:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800d7f6:	ea8c 0c07 	eor.w	ip, ip, r7
 800d7fa:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800d7fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d802:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d806:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800d80a:	f8da a528 	ldr.w	sl, [sl, #1320]	; 0x528
 800d80e:	ea8c 0c07 	eor.w	ip, ip, r7
 800d812:	b2cf      	uxtb	r7, r1
 800d814:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d818:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d81c:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800d820:	ea87 0e04 	eor.w	lr, r7, r4
 800d824:	0e2f      	lsrs	r7, r5, #24
 800d826:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d82a:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800d82e:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800d832:	ea8e 0e07 	eor.w	lr, lr, r7
 800d836:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800d83a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d83e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d842:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800d846:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800d84a:	ea8e 0e07 	eor.w	lr, lr, r7
 800d84e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800d852:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d856:	fa5f f88c 	uxtb.w	r8, ip
 800d85a:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800d85e:	ea8e 0e07 	eor.w	lr, lr, r7
 800d862:	fa5f f78b 	uxtb.w	r7, fp
 800d866:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d86a:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800d86e:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800d872:	4067      	eors	r7, r4
 800d874:	ea87 070a 	eor.w	r7, r7, sl
 800d878:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 800d87c:	b2f6      	uxtb	r6, r6
 800d87e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d882:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800d886:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800d88a:	f8da a928 	ldr.w	sl, [sl, #2344]	; 0x928
 800d88e:	f8d6 6128 	ldr.w	r6, [r6, #296]	; 0x128
 800d892:	ea87 070a 	eor.w	r7, r7, sl
 800d896:	4066      	eors	r6, r4
 800d898:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 800d89c:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800d8a0:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d8a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8a8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800d8ac:	f8da ad28 	ldr.w	sl, [sl, #3368]	; 0xd28
 800d8b0:	f8d4 4528 	ldr.w	r4, [r4, #1320]	; 0x528
 800d8b4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d8b8:	ea87 070a 	eor.w	r7, r7, sl
 800d8bc:	4066      	eors	r6, r4
 800d8be:	f8d5 4928 	ldr.w	r4, [r5, #2344]	; 0x928
 800d8c2:	f3ce 4507 	ubfx	r5, lr, #16, #8
 800d8c6:	9503      	str	r5, [sp, #12]
 800d8c8:	0e3d      	lsrs	r5, r7, #24
 800d8ca:	4066      	eors	r6, r4
 800d8cc:	9504      	str	r5, [sp, #16]
 800d8ce:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800d8d2:	9505      	str	r5, [sp, #20]
 800d8d4:	404e      	eors	r6, r1
 800d8d6:	b2fd      	uxtb	r5, r7
 800d8d8:	9506      	str	r5, [sp, #24]
 800d8da:	f3c6 2507 	ubfx	r5, r6, #8, #8
 800d8de:	9507      	str	r5, [sp, #28]
 800d8e0:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800d8e4:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 800d8e8:	9508      	str	r5, [sp, #32]
 800d8ea:	ea4f 651e 	mov.w	r5, lr, lsr #24
 800d8ee:	9102      	str	r1, [sp, #8]
 800d8f0:	9509      	str	r5, [sp, #36]	; 0x24
 800d8f2:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800d8f6:	950a      	str	r5, [sp, #40]	; 0x28
 800d8f8:	fa5f f58e 	uxtb.w	r5, lr
 800d8fc:	950b      	str	r5, [sp, #44]	; 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d8fe:	9d00      	ldr	r5, [sp, #0]
 800d900:	2d00      	cmp	r5, #0
 800d902:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800d906:	f3cc 2407 	ubfx	r4, ip, #8, #8
 800d90a:	f3c7 2e07 	ubfx	lr, r7, #8, #8
 800d90e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 800d912:	b2f1      	uxtb	r1, r6
 800d914:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800d918:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800d91c:	f100 0020 	add.w	r0, r0, #32
 800d920:	dc77      	bgt.n	800da12 <mbedtls_internal_aes_decrypt+0x286>

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d922:	4b6e      	ldr	r3, [pc, #440]	; (800dadc <mbedtls_internal_aes_decrypt+0x350>)
    X0 = *RK++ ^ \
 800d924:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800d926:	4498      	add	r8, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d928:	4499      	add	r9, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800d92a:	f818 5cc8 	ldrb.w	r5, [r8, #-200]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d92e:	f819 0cc8 	ldrb.w	r0, [r9, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800d932:	449a      	add	sl, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800d934:	4419      	add	r1, r3
    X0 = *RK++ ^ \
 800d936:	4075      	eors	r5, r6
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800d938:	449b      	add	fp, r3
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800d93a:	f811 6cc8 	ldrb.w	r6, [r1, #-200]
    X1 = *RK++ ^ \
 800d93e:	9902      	ldr	r1, [sp, #8]
    X0 = *RK++ ^ \
 800d940:	ea85 2500 	eor.w	r5, r5, r0, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800d944:	f81a 0cc8 	ldrb.w	r0, [sl, #-200]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800d948:	441c      	add	r4, r3
    X0 = *RK++ ^ \
 800d94a:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
    X1 = *RK++ ^ \
 800d94e:	404e      	eors	r6, r1
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800d950:	f81b 0cc8 	ldrb.w	r0, [fp, #-200]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800d954:	9903      	ldr	r1, [sp, #12]
    X0 = *RK++ ^ \
 800d956:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800d95a:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800d95c:	f814 0cc8 	ldrb.w	r0, [r4, #-200]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800d960:	7015      	strb	r5, [r2, #0]
    X1 = *RK++ ^ \
 800d962:	ea86 2600 	eor.w	r6, r6, r0, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800d966:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800d96a:	9904      	ldr	r1, [sp, #16]
 800d96c:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800d96e:	ea86 4600 	eor.w	r6, r6, r0, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800d972:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d976:	9907      	ldr	r1, [sp, #28]
 800d978:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800d97a:	ea86 6600 	eor.w	r6, r6, r0, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d97e:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800d982:	9906      	ldr	r1, [sp, #24]
    PUT_UINT32_LE( X1, output,  4 );
 800d984:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800d986:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800d988:	449e      	add	lr, r3
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800d98a:	f811 4cc8 	ldrb.w	r4, [r1, #-200]
    X2 = *RK++ ^ \
 800d98e:	9905      	ldr	r1, [sp, #20]
 800d990:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800d992:	9908      	ldr	r1, [sp, #32]
 800d994:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800d996:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800d99a:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X3 = *RK++ ^ \
 800d99e:	980a      	ldr	r0, [sp, #40]	; 0x28
    X2 = *RK++ ^ \
 800d9a0:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800d9a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9a6:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800d9a8:	441f      	add	r7, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800d9aa:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X2 = *RK++ ^ \
 800d9ae:	ea84 6401 	eor.w	r4, r4, r1, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800d9b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9b4:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800d9b6:	449c      	add	ip, r3
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800d9b8:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800d9bc:	f81c 3cc8 	ldrb.w	r3, [ip, #-200]
    X3 = *RK++ ^ \
 800d9c0:	4041      	eors	r1, r0
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800d9c2:	f81e 0cc8 	ldrb.w	r0, [lr, #-200]
    X3 = *RK++ ^ \
 800d9c6:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800d9ca:	f817 0cc8 	ldrb.w	r0, [r7, #-200]
    X3 = *RK++ ^ \
 800d9ce:	ea81 4100 	eor.w	r1, r1, r0, lsl #16
 800d9d2:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800d9d6:	0a29      	lsrs	r1, r5, #8
 800d9d8:	7051      	strb	r1, [r2, #1]
 800d9da:	0c29      	lsrs	r1, r5, #16
 800d9dc:	7091      	strb	r1, [r2, #2]
 800d9de:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X1, output,  4 );
 800d9e0:	0a31      	lsrs	r1, r6, #8
    PUT_UINT32_LE( X0, output,  0 );
 800d9e2:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800d9e4:	7151      	strb	r1, [r2, #5]
 800d9e6:	0c31      	lsrs	r1, r6, #16
 800d9e8:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800d9ea:	0a21      	lsrs	r1, r4, #8
 800d9ec:	7251      	strb	r1, [r2, #9]
 800d9ee:	0c21      	lsrs	r1, r4, #16
 800d9f0:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800d9f2:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800d9f4:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 800d9f6:	7214      	strb	r4, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800d9f8:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 800d9fa:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
 800d9fc:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800d9fe:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800da00:	0c19      	lsrs	r1, r3, #16
 800da02:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800da04:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800da06:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800da08:	7391      	strb	r1, [r2, #14]
 800da0a:	73d3      	strb	r3, [r2, #15]
}
 800da0c:	b00d      	add	sp, #52	; 0x34
 800da0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800da12:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800da16:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800da1a:	f8d8 5128 	ldr.w	r5, [r8, #296]	; 0x128
 800da1e:	f8db 6528 	ldr.w	r6, [fp, #1320]	; 0x528
 800da22:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800da26:	4075      	eors	r5, r6
 800da28:	9e01      	ldr	r6, [sp, #4]
 800da2a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800da2e:	4075      	eors	r5, r6
 800da30:	f8d9 6928 	ldr.w	r6, [r9, #2344]	; 0x928
 800da34:	4075      	eors	r5, r6
 800da36:	f8da 6d28 	ldr.w	r6, [sl, #3368]	; 0xd28
 800da3a:	4075      	eors	r5, r6
 800da3c:	9e04      	ldr	r6, [sp, #16]
 800da3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800da42:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 800da46:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
 800da4a:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800da4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da52:	404e      	eors	r6, r1
 800da54:	9902      	ldr	r1, [sp, #8]
 800da56:	404e      	eors	r6, r1
 800da58:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
 800da5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800da5e:	404e      	eors	r6, r1
 800da60:	9903      	ldr	r1, [sp, #12]
 800da62:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800da66:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800da6a:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800da6e:	404e      	eors	r6, r1
 800da70:	9906      	ldr	r1, [sp, #24]
 800da72:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800da76:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800da7a:	f8d1 4128 	ldr.w	r4, [r1, #296]	; 0x128
 800da7e:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800da82:	f8dc c528 	ldr.w	ip, [ip, #1320]	; 0x528
 800da86:	404c      	eors	r4, r1
 800da88:	9905      	ldr	r1, [sp, #20]
 800da8a:	404c      	eors	r4, r1
 800da8c:	9907      	ldr	r1, [sp, #28]
 800da8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800da92:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800da96:	f8d1 1928 	ldr.w	r1, [r1, #2344]	; 0x928
 800da9a:	404c      	eors	r4, r1
 800da9c:	9908      	ldr	r1, [sp, #32]
 800da9e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800daa2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800daa6:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800daaa:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800daae:	ea84 0b01 	eor.w	fp, r4, r1
 800dab2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dab4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dab6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800daba:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 800dabe:	ea81 010c 	eor.w	r1, r1, ip
 800dac2:	4061      	eors	r1, r4
 800dac4:	f8de c928 	ldr.w	ip, [lr, #2344]	; 0x928
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dac8:	9c00      	ldr	r4, [sp, #0]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800daca:	ea81 010c 	eor.w	r1, r1, ip
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dace:	3c01      	subs	r4, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800dad0:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dad2:	9400      	str	r4, [sp, #0]
 800dad4:	e672      	b.n	800d7bc <mbedtls_internal_aes_decrypt+0x30>
 800dad6:	bf00      	nop
 800dad8:	08028050 	.word	0x08028050
 800dadc:	0802a240 	.word	0x0802a240

0800dae0 <mbedtls_aes_crypt_cbc.part.0>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
/*
 * AES-CBC buffer encryption/decryption
 */
int mbedtls_aes_crypt_cbc( mbedtls_aes_context *ctx,
 800dae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dae4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dae6:	4681      	mov	r9, r0
 800dae8:	4616      	mov	r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 800daea:	eb04 0801 	add.w	r8, r4, r1
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 800daee:	f10d 0a10 	add.w	sl, sp, #16
        while( length > 0 )
 800daf2:	45a0      	cmp	r8, r4
 800daf4:	d103      	bne.n	800dafe <mbedtls_aes_crypt_cbc.part.0+0x1e>
            length -= 16;
        }
    }

    return( 0 );
}
 800daf6:	2000      	movs	r0, #0
 800daf8:	b004      	add	sp, #16
 800dafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            memcpy( temp, input, 16 );
 800dafe:	46ec      	mov	ip, sp
 800db00:	461a      	mov	r2, r3
 800db02:	f103 0710 	add.w	r7, r3, #16
 800db06:	4665      	mov	r5, ip
 800db08:	6810      	ldr	r0, [r2, #0]
 800db0a:	6851      	ldr	r1, [r2, #4]
 800db0c:	46e6      	mov	lr, ip
 800db0e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800db12:	3208      	adds	r2, #8
 800db14:	42ba      	cmp	r2, r7
 800db16:	46f4      	mov	ip, lr
 800db18:	d1f6      	bne.n	800db08 <mbedtls_aes_crypt_cbc.part.0+0x28>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800db1a:	4619      	mov	r1, r3
 800db1c:	4622      	mov	r2, r4
 800db1e:	4648      	mov	r0, r9
 800db20:	f7ff fe34 	bl	800d78c <mbedtls_internal_aes_decrypt>
 800db24:	1e63      	subs	r3, r4, #1
 800db26:	1e71      	subs	r1, r6, #1
 800db28:	f104 000f 	add.w	r0, r4, #15
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800db2c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800db30:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800db34:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800db36:	ea82 020c 	eor.w	r2, r2, ip
 800db3a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800db3c:	d1f6      	bne.n	800db2c <mbedtls_aes_crypt_cbc.part.0+0x4c>
            memcpy( iv, temp, 16 );
 800db3e:	462a      	mov	r2, r5
 800db40:	4635      	mov	r5, r6
 800db42:	4613      	mov	r3, r2
 800db44:	cb03      	ldmia	r3!, {r0, r1}
 800db46:	4553      	cmp	r3, sl
 800db48:	6028      	str	r0, [r5, #0]
 800db4a:	6069      	str	r1, [r5, #4]
 800db4c:	461a      	mov	r2, r3
 800db4e:	f105 0508 	add.w	r5, r5, #8
 800db52:	d1f6      	bne.n	800db42 <mbedtls_aes_crypt_cbc.part.0+0x62>
            input  += 16;
 800db54:	463b      	mov	r3, r7
            output += 16;
 800db56:	3410      	adds	r4, #16
 800db58:	e7cb      	b.n	800daf2 <mbedtls_aes_crypt_cbc.part.0+0x12>

0800db5a <mbedtls_aes_crypt_ecb>:
{
 800db5a:	b410      	push	{r4}
    if( mode == MBEDTLS_AES_ENCRYPT )
 800db5c:	2901      	cmp	r1, #1
{
 800db5e:	4614      	mov	r4, r2
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800db60:	4621      	mov	r1, r4
{
 800db62:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 800db64:	d103      	bne.n	800db6e <mbedtls_aes_crypt_ecb+0x14>
}
 800db66:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800db6a:	f7ff bc6f 	b.w	800d44c <mbedtls_internal_aes_encrypt>
}
 800db6e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800db72:	f7ff be0b 	b.w	800d78c <mbedtls_internal_aes_decrypt>

0800db76 <mbedtls_aes_crypt_cbc>:
{
 800db76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db7a:	4688      	mov	r8, r1
 800db7c:	4611      	mov	r1, r2
    if( length % 16 )
 800db7e:	070a      	lsls	r2, r1, #28
{
 800db80:	461f      	mov	r7, r3
 800db82:	4681      	mov	r9, r0
 800db84:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    if( length % 16 )
 800db88:	d12d      	bne.n	800dbe6 <mbedtls_aes_crypt_cbc+0x70>
    if( mode == MBEDTLS_AES_DECRYPT )
 800db8a:	f1b8 0f00 	cmp.w	r8, #0
 800db8e:	d006      	beq.n	800db9e <mbedtls_aes_crypt_cbc+0x28>
 800db90:	1e5d      	subs	r5, r3, #1
        while( length > 0 )
 800db92:	1866      	adds	r6, r4, r1
 800db94:	42a6      	cmp	r6, r4
 800db96:	d108      	bne.n	800dbaa <mbedtls_aes_crypt_cbc+0x34>
    return( 0 );
 800db98:	2000      	movs	r0, #0
}
 800db9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db9e:	9408      	str	r4, [sp, #32]
 800dba0:	463a      	mov	r2, r7
 800dba2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dba6:	f7ff bf9b 	b.w	800dae0 <mbedtls_aes_crypt_cbc.part.0>
 800dbaa:	1e79      	subs	r1, r7, #1
 800dbac:	1e62      	subs	r2, r4, #1
 800dbae:	f105 0010 	add.w	r0, r5, #16
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800dbb2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800dbb6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800dbba:	4285      	cmp	r5, r0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800dbbc:	ea83 030c 	eor.w	r3, r3, ip
 800dbc0:	f802 3f01 	strb.w	r3, [r2, #1]!
            for( i = 0; i < 16; i++ )
 800dbc4:	d1f5      	bne.n	800dbb2 <mbedtls_aes_crypt_cbc+0x3c>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800dbc6:	4623      	mov	r3, r4
 800dbc8:	4622      	mov	r2, r4
 800dbca:	4641      	mov	r1, r8
 800dbcc:	4648      	mov	r0, r9
 800dbce:	f7ff ffc4 	bl	800db5a <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800dbd2:	463b      	mov	r3, r7
 800dbd4:	f104 0210 	add.w	r2, r4, #16
 800dbd8:	f854 1b04 	ldr.w	r1, [r4], #4
 800dbdc:	f843 1b04 	str.w	r1, [r3], #4
 800dbe0:	4294      	cmp	r4, r2
 800dbe2:	d1f9      	bne.n	800dbd8 <mbedtls_aes_crypt_cbc+0x62>
 800dbe4:	e7d6      	b.n	800db94 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800dbe6:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800dbea:	e7d6      	b.n	800db9a <mbedtls_aes_crypt_cbc+0x24>

0800dbec <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 800dbec:	6803      	ldr	r3, [r0, #0]
{
 800dbee:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 800dbf0:	1acd      	subs	r5, r1, r3
 800dbf2:	2d00      	cmp	r5, #0
 800dbf4:	dc02      	bgt.n	800dbfc <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800dbf6:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 800dbfa:	bd30      	pop	{r4, r5, pc}
    if( ( **p & 0x80 ) == 0 )
 800dbfc:	781c      	ldrb	r4, [r3, #0]
 800dbfe:	f014 0f80 	tst.w	r4, #128	; 0x80
 800dc02:	d10a      	bne.n	800dc1a <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 800dc04:	1c5c      	adds	r4, r3, #1
 800dc06:	6004      	str	r4, [r0, #0]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 800dc0c:	6803      	ldr	r3, [r0, #0]
 800dc0e:	1ac9      	subs	r1, r1, r3
 800dc10:	6813      	ldr	r3, [r2, #0]
 800dc12:	428b      	cmp	r3, r1
 800dc14:	d8ef      	bhi.n	800dbf6 <mbedtls_asn1_get_len+0xa>
    return( 0 );
 800dc16:	2000      	movs	r0, #0
 800dc18:	e7ef      	b.n	800dbfa <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
 800dc1a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800dc1e:	3c01      	subs	r4, #1
 800dc20:	2c03      	cmp	r4, #3
 800dc22:	d827      	bhi.n	800dc74 <mbedtls_asn1_get_len+0x88>
 800dc24:	e8df f004 	tbb	[pc, r4]
 800dc28:	1e120902 	.word	0x1e120902
            if( ( end - *p ) < 2 )
 800dc2c:	2d01      	cmp	r5, #1
 800dc2e:	d0e2      	beq.n	800dbf6 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 800dc30:	785c      	ldrb	r4, [r3, #1]
 800dc32:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 800dc34:	3302      	adds	r3, #2
            (*p) += 5;
 800dc36:	6003      	str	r3, [r0, #0]
            break;
 800dc38:	e7e8      	b.n	800dc0c <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 800dc3a:	2d02      	cmp	r5, #2
 800dc3c:	dddb      	ble.n	800dbf6 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 800dc3e:	f8b3 4001 	ldrh.w	r4, [r3, #1]
 800dc42:	ba64      	rev16	r4, r4
 800dc44:	b2a4      	uxth	r4, r4
 800dc46:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 800dc48:	3303      	adds	r3, #3
 800dc4a:	e7f4      	b.n	800dc36 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 800dc4c:	2d03      	cmp	r5, #3
 800dc4e:	ddd2      	ble.n	800dbf6 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800dc50:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 800dc52:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800dc54:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 800dc56:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800dc5a:	78dd      	ldrb	r5, [r3, #3]
 800dc5c:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 800dc5e:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 800dc60:	3304      	adds	r3, #4
 800dc62:	e7e8      	b.n	800dc36 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 800dc64:	2d04      	cmp	r5, #4
 800dc66:	ddc6      	ble.n	800dbf6 <mbedtls_asn1_get_len+0xa>
 800dc68:	f8d3 4001 	ldr.w	r4, [r3, #1]
 800dc6c:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800dc6e:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 800dc70:	3305      	adds	r3, #5
 800dc72:	e7e0      	b.n	800dc36 <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800dc74:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800dc78:	e7bf      	b.n	800dbfa <mbedtls_asn1_get_len+0xe>

0800dc7a <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800dc7a:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 800dc7c:	6804      	ldr	r4, [r0, #0]
 800dc7e:	1b0e      	subs	r6, r1, r4
 800dc80:	2e00      	cmp	r6, #0
 800dc82:	dd07      	ble.n	800dc94 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 800dc84:	7826      	ldrb	r6, [r4, #0]
 800dc86:	429e      	cmp	r6, r3
 800dc88:	d108      	bne.n	800dc9c <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800dc8a:	3401      	adds	r4, #1
 800dc8c:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 800dc8e:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 800dc90:	f7ff bfac 	b.w	800dbec <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800dc94:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 800dc98:	bc70      	pop	{r4, r5, r6}
 800dc9a:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800dc9c:	f06f 0061 	mvn.w	r0, #97	; 0x61
 800dca0:	e7fa      	b.n	800dc98 <mbedtls_asn1_get_tag+0x1e>

0800dca2 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 800dca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800dca4:	2301      	movs	r3, #1
{
 800dca6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800dca8:	aa01      	add	r2, sp, #4
{
 800dcaa:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800dcac:	f7ff ffe5 	bl	800dc7a <mbedtls_asn1_get_tag>
 800dcb0:	b950      	cbnz	r0, 800dcc8 <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 800dcb2:	9b01      	ldr	r3, [sp, #4]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d109      	bne.n	800dccc <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcbe:	3200      	adds	r2, #0
 800dcc0:	bf18      	it	ne
 800dcc2:	2201      	movne	r2, #1
 800dcc4:	602a      	str	r2, [r5, #0]
    (*p)++;
 800dcc6:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800dcc8:	b003      	add	sp, #12
 800dcca:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800dccc:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800dcd0:	e7fa      	b.n	800dcc8 <mbedtls_asn1_get_bool+0x26>

0800dcd2 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 800dcd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800dcd4:	2302      	movs	r3, #2
{
 800dcd6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800dcd8:	aa01      	add	r2, sp, #4
{
 800dcda:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800dcdc:	f7ff ffcd 	bl	800dc7a <mbedtls_asn1_get_tag>
 800dce0:	b968      	cbnz	r0, 800dcfe <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 800dce2:	9b01      	ldr	r3, [sp, #4]
 800dce4:	3b01      	subs	r3, #1
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d814      	bhi.n	800dd14 <mbedtls_asn1_get_int+0x42>
 800dcea:	6823      	ldr	r3, [r4, #0]
 800dcec:	f993 3000 	ldrsb.w	r3, [r3]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	db0f      	blt.n	800dd14 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 800dcf4:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 800dcf6:	9b01      	ldr	r3, [sp, #4]
 800dcf8:	1e5a      	subs	r2, r3, #1
 800dcfa:	9201      	str	r2, [sp, #4]
 800dcfc:	b90b      	cbnz	r3, 800dd02 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 800dcfe:	b003      	add	sp, #12
 800dd00:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	6829      	ldr	r1, [r5, #0]
 800dd06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dd0e:	602a      	str	r2, [r5, #0]
        (*p)++;
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	e7f0      	b.n	800dcf6 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800dd14:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800dd18:	e7f1      	b.n	800dcfe <mbedtls_asn1_get_int+0x2c>

0800dd1a <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 800dd1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800dd1c:	2302      	movs	r3, #2
{
 800dd1e:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800dd20:	aa01      	add	r2, sp, #4
{
 800dd22:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800dd24:	f7ff ffa9 	bl	800dc7a <mbedtls_asn1_get_tag>
 800dd28:	b940      	cbnz	r0, 800dd3c <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 800dd2a:	9a01      	ldr	r2, [sp, #4]
 800dd2c:	6821      	ldr	r1, [r4, #0]
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f000 fd3a 	bl	800e7a8 <mbedtls_mpi_read_binary>

    *p += len;
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	9a01      	ldr	r2, [sp, #4]
 800dd38:	4413      	add	r3, r2
 800dd3a:	6023      	str	r3, [r4, #0]

    return( ret );
}
 800dd3c:	b003      	add	sp, #12
 800dd3e:	bd30      	pop	{r4, r5, pc}

0800dd40 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 800dd40:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800dd42:	2303      	movs	r3, #3
{
 800dd44:	4604      	mov	r4, r0
 800dd46:	460e      	mov	r6, r1
 800dd48:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800dd4a:	f7ff ff96 	bl	800dc7a <mbedtls_asn1_get_tag>
 800dd4e:	b998      	cbnz	r0, 800dd78 <mbedtls_asn1_get_bitstring+0x38>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 800dd50:	6813      	ldr	r3, [r2, #0]
 800dd52:	b193      	cbz	r3, 800dd7a <mbedtls_asn1_get_bitstring+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 800dd54:	3b01      	subs	r3, #1
 800dd56:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 800dd58:	6822      	ldr	r2, [r4, #0]
 800dd5a:	7812      	ldrb	r2, [r2, #0]
 800dd5c:	712a      	strb	r2, [r5, #4]
    if( bs->unused_bits > 7 )
 800dd5e:	2a07      	cmp	r2, #7
 800dd60:	d80e      	bhi.n	800dd80 <mbedtls_asn1_get_bitstring+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 800dd62:	6822      	ldr	r2, [r4, #0]
 800dd64:	3201      	adds	r2, #1
 800dd66:	6022      	str	r2, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 800dd68:	60aa      	str	r2, [r5, #8]
    *p += bs->len;
 800dd6a:	6822      	ldr	r2, [r4, #0]
 800dd6c:	4413      	add	r3, r2

    if( *p != end )
 800dd6e:	42b3      	cmp	r3, r6
    *p += bs->len;
 800dd70:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800dd72:	bf18      	it	ne
 800dd74:	f06f 0065 	mvnne.w	r0, #101	; 0x65

    return( 0 );
}
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800dd7a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 800dd7e:	e7fb      	b.n	800dd78 <mbedtls_asn1_get_bitstring+0x38>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800dd80:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800dd84:	e7f8      	b.n	800dd78 <mbedtls_asn1_get_bitstring+0x38>

0800dd86 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 800dd86:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800dd88:	2303      	movs	r3, #3
{
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800dd8e:	f7ff ff74 	bl	800dc7a <mbedtls_asn1_get_tag>
 800dd92:	b958      	cbnz	r0, 800ddac <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 800dd94:	6813      	ldr	r3, [r2, #0]
 800dd96:	1e5a      	subs	r2, r3, #1
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	602a      	str	r2, [r5, #0]
 800dd9c:	d904      	bls.n	800dda8 <mbedtls_asn1_get_bitstring_null+0x22>
 800dd9e:	6823      	ldr	r3, [r4, #0]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	6022      	str	r2, [r4, #0]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b10b      	cbz	r3, 800ddac <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800dda8:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 800ddac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ddb0 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 800ddb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800ddb8:	aa01      	add	r2, sp, #4
 800ddba:	2330      	movs	r3, #48	; 0x30
{
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800ddc0:	f7ff ff5b 	bl	800dc7a <mbedtls_asn1_get_tag>
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	b988      	cbnz	r0, 800ddec <mbedtls_asn1_get_sequence_of+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	9a01      	ldr	r2, [sp, #4]
 800ddcc:	4413      	add	r3, r2
 800ddce:	429f      	cmp	r7, r3
 800ddd0:	d10a      	bne.n	800dde8 <mbedtls_asn1_get_sequence_of+0x38>
        *p += buf->len;

        /* Allocate and assign next pointer */
        if( *p < end )
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800ddd2:	f8df a060 	ldr.w	sl, [pc, #96]	; 800de34 <mbedtls_asn1_get_sequence_of+0x84>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800ddd6:	f104 0904 	add.w	r9, r4, #4
    while( *p < end )
 800ddda:	682b      	ldr	r3, [r5, #0]
 800dddc:	42bb      	cmp	r3, r7
 800ddde:	d309      	bcc.n	800ddf4 <mbedtls_asn1_get_sequence_of+0x44>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 800dde0:	f04f 0300 	mov.w	r3, #0
 800dde4:	60e3      	str	r3, [r4, #12]

    if( *p != end )
 800dde6:	d001      	beq.n	800ddec <mbedtls_asn1_get_sequence_of+0x3c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800dde8:	f06f 0665 	mvn.w	r6, #101	; 0x65
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800ddec:	4630      	mov	r0, r6
 800ddee:	b002      	add	sp, #8
 800ddf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        buf->tag = **p;
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800ddf8:	464a      	mov	r2, r9
 800ddfa:	4643      	mov	r3, r8
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	4628      	mov	r0, r5
 800de00:	f7ff ff3b 	bl	800dc7a <mbedtls_asn1_get_tag>
 800de04:	b998      	cbnz	r0, 800de2e <mbedtls_asn1_get_sequence_of+0x7e>
        buf->p = *p;
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 800de0a:	682b      	ldr	r3, [r5, #0]
 800de0c:	6862      	ldr	r2, [r4, #4]
 800de0e:	4413      	add	r3, r2
        if( *p < end )
 800de10:	42bb      	cmp	r3, r7
        *p += buf->len;
 800de12:	602b      	str	r3, [r5, #0]
        if( *p < end )
 800de14:	d2e1      	bcs.n	800ddda <mbedtls_asn1_get_sequence_of+0x2a>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800de16:	f8da 3000 	ldr.w	r3, [sl]
 800de1a:	2110      	movs	r1, #16
 800de1c:	2001      	movs	r0, #1
 800de1e:	4798      	blx	r3
 800de20:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 800de22:	4604      	mov	r4, r0
 800de24:	2800      	cmp	r0, #0
 800de26:	d1d6      	bne.n	800ddd6 <mbedtls_asn1_get_sequence_of+0x26>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 800de28:	f06f 0669 	mvn.w	r6, #105	; 0x69
 800de2c:	e7de      	b.n	800ddec <mbedtls_asn1_get_sequence_of+0x3c>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800de2e:	4606      	mov	r6, r0
 800de30:	e7dc      	b.n	800ddec <mbedtls_asn1_get_sequence_of+0x3c>
 800de32:	bf00      	nop
 800de34:	200005a0 	.word	0x200005a0

0800de38 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 800de38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de3c:	4690      	mov	r8, r2
 800de3e:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800de40:	aa01      	add	r2, sp, #4
 800de42:	2330      	movs	r3, #48	; 0x30
{
 800de44:	4604      	mov	r4, r0
 800de46:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800de48:	f7ff ff17 	bl	800dc7a <mbedtls_asn1_get_tag>
 800de4c:	4605      	mov	r5, r0
 800de4e:	bb08      	cbnz	r0, 800de94 <mbedtls_asn1_get_alg+0x5c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 800de50:	6826      	ldr	r6, [r4, #0]
 800de52:	eba9 0906 	sub.w	r9, r9, r6
 800de56:	f1b9 0f00 	cmp.w	r9, #0
 800de5a:	dd38      	ble.n	800dece <mbedtls_asn1_get_alg+0x96>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 800de5c:	4642      	mov	r2, r8
 800de5e:	7833      	ldrb	r3, [r6, #0]
 800de60:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800de68:	4631      	mov	r1, r6
 800de6a:	2306      	movs	r3, #6
 800de6c:	4620      	mov	r0, r4
 800de6e:	f7ff ff04 	bl	800dc7a <mbedtls_asn1_get_tag>
 800de72:	4605      	mov	r5, r0
 800de74:	b970      	cbnz	r0, 800de94 <mbedtls_asn1_get_alg+0x5c>
        return( ret );

    alg->p = *p;
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 800de7c:	6821      	ldr	r1, [r4, #0]
 800de7e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800de82:	188b      	adds	r3, r1, r2

    if( *p == end )
 800de84:	42b3      	cmp	r3, r6
    *p += alg->len;
 800de86:	6023      	str	r3, [r4, #0]
    if( *p == end )
 800de88:	d10b      	bne.n	800dea2 <mbedtls_asn1_get_alg+0x6a>
 800de8a:	f107 030c 	add.w	r3, r7, #12
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800de8e:	4602      	mov	r2, r0
 800de90:	429f      	cmp	r7, r3
 800de92:	d103      	bne.n	800de9c <mbedtls_asn1_get_alg+0x64>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800de94:	4628      	mov	r0, r5
 800de96:	b003      	add	sp, #12
 800de98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800de9c:	703a      	strb	r2, [r7, #0]
 800de9e:	3701      	adds	r7, #1
 800dea0:	e7f6      	b.n	800de90 <mbedtls_asn1_get_alg+0x58>
    params->tag = **p;
 800dea2:	5c89      	ldrb	r1, [r1, r2]
 800dea4:	463a      	mov	r2, r7
    (*p)++;
 800dea6:	3301      	adds	r3, #1
    params->tag = **p;
 800dea8:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800deac:	4620      	mov	r0, r4
    (*p)++;
 800deae:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800deb0:	4631      	mov	r1, r6
 800deb2:	f7ff fe9b 	bl	800dbec <mbedtls_asn1_get_len>
 800deb6:	b968      	cbnz	r0, 800ded4 <mbedtls_asn1_get_alg+0x9c>
    params->p = *p;
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800dec2:	42b3      	cmp	r3, r6
    *p += params->len;
 800dec4:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800dec6:	bf18      	it	ne
 800dec8:	f06f 0565 	mvnne.w	r5, #101	; 0x65
 800decc:	e7e2      	b.n	800de94 <mbedtls_asn1_get_alg+0x5c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800dece:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800ded2:	e7df      	b.n	800de94 <mbedtls_asn1_get_alg+0x5c>
 800ded4:	4605      	mov	r5, r0
 800ded6:	e7dd      	b.n	800de94 <mbedtls_asn1_get_alg+0x5c>

0800ded8 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 800ded8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 800deda:	2300      	movs	r3, #0
 800dedc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800dee0:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 800dee2:	ab01      	add	r3, sp, #4
 800dee4:	f7ff ffa8 	bl	800de38 <mbedtls_asn1_get_alg>
 800dee8:	b940      	cbnz	r0, 800defc <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 800deea:	9b01      	ldr	r3, [sp, #4]
 800deec:	2b05      	cmp	r3, #5
 800deee:	d000      	beq.n	800def2 <mbedtls_asn1_get_alg_null+0x1a>
 800def0:	b93b      	cbnz	r3, 800df02 <mbedtls_asn1_get_alg_null+0x2a>
 800def2:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800def4:	2b00      	cmp	r3, #0
 800def6:	bf18      	it	ne
 800def8:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
 800defc:	b005      	add	sp, #20
 800defe:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800df02:	f06f 0067 	mvn.w	r0, #103	; 0x67
 800df06:	e7f9      	b.n	800defc <mbedtls_asn1_get_alg_null+0x24>

0800df08 <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 800df08:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
 800df0a:	2a7f      	cmp	r2, #127	; 0x7f
 800df0c:	eba3 0101 	sub.w	r1, r3, r1
 800df10:	d807      	bhi.n	800df22 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 800df12:	2900      	cmp	r1, #0
 800df14:	dd69      	ble.n	800dfea <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800df16:	1e59      	subs	r1, r3, #1
 800df18:	6001      	str	r1, [r0, #0]
 800df1a:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 800df1e:	2001      	movs	r0, #1
 800df20:	4770      	bx	lr
    }

    if( len <= 0xFF )
 800df22:	2aff      	cmp	r2, #255	; 0xff
 800df24:	d80d      	bhi.n	800df42 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 800df26:	2901      	cmp	r1, #1
 800df28:	dd5f      	ble.n	800dfea <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800df2a:	1e59      	subs	r1, r3, #1
 800df2c:	6001      	str	r1, [r0, #0]
 800df2e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 800df32:	6803      	ldr	r3, [r0, #0]
 800df34:	1e5a      	subs	r2, r3, #1
 800df36:	6002      	str	r2, [r0, #0]
 800df38:	2281      	movs	r2, #129	; 0x81
 800df3a:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 800df3e:	2002      	movs	r0, #2
 800df40:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 800df42:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800df46:	d213      	bcs.n	800df70 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 800df48:	2902      	cmp	r1, #2
 800df4a:	dd4e      	ble.n	800dfea <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800df4c:	1e59      	subs	r1, r3, #1
 800df4e:	6001      	str	r1, [r0, #0]
 800df50:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800df54:	6803      	ldr	r3, [r0, #0]
 800df56:	0a12      	lsrs	r2, r2, #8
 800df58:	1e59      	subs	r1, r3, #1
 800df5a:	6001      	str	r1, [r0, #0]
 800df5c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 800df60:	6803      	ldr	r3, [r0, #0]
 800df62:	1e5a      	subs	r2, r3, #1
 800df64:	6002      	str	r2, [r0, #0]
 800df66:	2282      	movs	r2, #130	; 0x82
 800df68:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 800df6c:	2003      	movs	r0, #3
 800df6e:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 800df70:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800df74:	d219      	bcs.n	800dfaa <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 800df76:	2903      	cmp	r1, #3
 800df78:	dd37      	ble.n	800dfea <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800df7a:	1e59      	subs	r1, r3, #1
 800df7c:	6001      	str	r1, [r0, #0]
 800df7e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800df82:	6803      	ldr	r3, [r0, #0]
 800df84:	1e59      	subs	r1, r3, #1
 800df86:	6001      	str	r1, [r0, #0]
 800df88:	0a11      	lsrs	r1, r2, #8
 800df8a:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800df8e:	6803      	ldr	r3, [r0, #0]
 800df90:	0c12      	lsrs	r2, r2, #16
 800df92:	1e59      	subs	r1, r3, #1
 800df94:	6001      	str	r1, [r0, #0]
 800df96:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 800df9a:	6803      	ldr	r3, [r0, #0]
 800df9c:	1e5a      	subs	r2, r3, #1
 800df9e:	6002      	str	r2, [r0, #0]
 800dfa0:	2283      	movs	r2, #131	; 0x83
 800dfa2:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 800dfa6:	2004      	movs	r0, #4
 800dfa8:	4770      	bx	lr
 */
#if defined(MBEDTLS_HAVE_INT64)
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 800dfaa:	2904      	cmp	r1, #4
 800dfac:	dd1d      	ble.n	800dfea <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800dfae:	1e59      	subs	r1, r3, #1
 800dfb0:	6001      	str	r1, [r0, #0]
 800dfb2:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800dfb6:	6803      	ldr	r3, [r0, #0]
 800dfb8:	1e59      	subs	r1, r3, #1
 800dfba:	6001      	str	r1, [r0, #0]
 800dfbc:	0a11      	lsrs	r1, r2, #8
 800dfbe:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800dfc2:	6803      	ldr	r3, [r0, #0]
 800dfc4:	1e59      	subs	r1, r3, #1
 800dfc6:	6001      	str	r1, [r0, #0]
 800dfc8:	0c11      	lsrs	r1, r2, #16
 800dfca:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 800dfce:	6803      	ldr	r3, [r0, #0]
 800dfd0:	0e12      	lsrs	r2, r2, #24
 800dfd2:	1e59      	subs	r1, r3, #1
 800dfd4:	6001      	str	r1, [r0, #0]
 800dfd6:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 800dfda:	6803      	ldr	r3, [r0, #0]
 800dfdc:	1e5a      	subs	r2, r3, #1
 800dfde:	6002      	str	r2, [r0, #0]
 800dfe0:	2284      	movs	r2, #132	; 0x84
 800dfe2:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 800dfe6:	2005      	movs	r0, #5
 800dfe8:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800dfea:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 * On 32 bit platforms, this return statement will not be reached
 */
#if defined(MBEDTLS_HAVE_INT64)
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 800dfee:	4770      	bx	lr

0800dff0 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 800dff0:	6803      	ldr	r3, [r0, #0]
 800dff2:	1a59      	subs	r1, r3, r1
 800dff4:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 800dff6:	bfc1      	itttt	gt
 800dff8:	f103 31ff 	addgt.w	r1, r3, #4294967295
 800dffc:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 800dffe:	2001      	movgt	r0, #1
    *--(*p) = tag;
 800e000:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e004:	bfd8      	it	le
 800e006:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 800e00a:	4770      	bx	lr

0800e00c <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 800e00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	4606      	mov	r6, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 800e012:	4610      	mov	r0, r2
{
 800e014:	460f      	mov	r7, r1
 800e016:	4690      	mov	r8, r2
    len = mbedtls_mpi_size( X );
 800e018:	f000 fbc0 	bl	800e79c <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 800e01c:	6831      	ldr	r1, [r6, #0]
 800e01e:	42b9      	cmp	r1, r7
    len = mbedtls_mpi_size( X );
 800e020:	4604      	mov	r4, r0
    if( *p < start || (size_t)( *p - start ) < len )
 800e022:	d204      	bcs.n	800e02e <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e024:	f06f 056b 	mvn.w	r5, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 800e028:	4628      	mov	r0, r5
 800e02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 800e02e:	1bcb      	subs	r3, r1, r7
 800e030:	4283      	cmp	r3, r0
 800e032:	d3f7      	bcc.n	800e024 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 800e034:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e036:	4602      	mov	r2, r0
    (*p) -= len;
 800e038:	6031      	str	r1, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e03a:	4640      	mov	r0, r8
 800e03c:	f000 fbe7 	bl	800e80e <mbedtls_mpi_write_binary>
 800e040:	4605      	mov	r5, r0
 800e042:	2800      	cmp	r0, #0
 800e044:	d1f0      	bne.n	800e028 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 800e046:	f8d8 3000 	ldr.w	r3, [r8]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d10c      	bne.n	800e068 <mbedtls_asn1_write_mpi+0x5c>
 800e04e:	6833      	ldr	r3, [r6, #0]
 800e050:	f993 2000 	ldrsb.w	r2, [r3]
 800e054:	2a00      	cmp	r2, #0
 800e056:	da07      	bge.n	800e068 <mbedtls_asn1_write_mpi+0x5c>
        if( *p - start < 1 )
 800e058:	1bda      	subs	r2, r3, r7
 800e05a:	2a00      	cmp	r2, #0
 800e05c:	dde2      	ble.n	800e024 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 800e05e:	1e5a      	subs	r2, r3, #1
 800e060:	6032      	str	r2, [r6, #0]
        len += 1;
 800e062:	3401      	adds	r4, #1
        *--(*p) = 0x00;
 800e064:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e068:	4622      	mov	r2, r4
 800e06a:	4639      	mov	r1, r7
 800e06c:	4630      	mov	r0, r6
 800e06e:	f7ff ff4b 	bl	800df08 <mbedtls_asn1_write_len>
 800e072:	1e05      	subs	r5, r0, #0
 800e074:	dbd8      	blt.n	800e028 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e076:	2202      	movs	r2, #2
 800e078:	4639      	mov	r1, r7
 800e07a:	4630      	mov	r0, r6
 800e07c:	f7ff ffb8 	bl	800dff0 <mbedtls_asn1_write_tag>
 800e080:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e082:	bfa6      	itte	ge
 800e084:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e086:	1905      	addge	r5, r0, r4
 800e088:	4605      	movlt	r5, r0
 800e08a:	e7cd      	b.n	800e028 <mbedtls_asn1_write_mpi+0x1c>

0800e08c <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 800e08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 800e090:	f04f 0c00 	mov.w	ip, #0
{
 800e094:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e098:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800e1b0 <mbedtls_base64_decode+0x124>
    for( i = n = j = 0; i < slen; i++ )
 800e09c:	4664      	mov	r4, ip
 800e09e:	4666      	mov	r6, ip
 800e0a0:	4576      	cmp	r6, lr
 800e0a2:	4635      	mov	r5, r6
 800e0a4:	d22b      	bcs.n	800e0fe <mbedtls_base64_decode+0x72>
        while( i < slen && src[i] == ' ' )
 800e0a6:	5d5f      	ldrb	r7, [r3, r5]
 800e0a8:	2f20      	cmp	r7, #32
 800e0aa:	d025      	beq.n	800e0f8 <mbedtls_base64_decode+0x6c>
        if( ( slen - i ) >= 2 &&
 800e0ac:	ebae 0905 	sub.w	r9, lr, r5
 800e0b0:	f1b9 0f01 	cmp.w	r9, #1
 800e0b4:	d027      	beq.n	800e106 <mbedtls_base64_decode+0x7a>
 800e0b6:	2f0d      	cmp	r7, #13
 800e0b8:	d125      	bne.n	800e106 <mbedtls_base64_decode+0x7a>
            src[i] == '\r' && src[i + 1] == '\n' )
 800e0ba:	eb03 0905 	add.w	r9, r3, r5
 800e0be:	f899 9001 	ldrb.w	r9, [r9, #1]
 800e0c2:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
 800e0c6:	d015      	beq.n	800e0f4 <mbedtls_base64_decode+0x68>
        if( x != 0 )
 800e0c8:	42b5      	cmp	r5, r6
 800e0ca:	d16e      	bne.n	800e1aa <mbedtls_base64_decode+0x11e>
        if( src[i] == '=' && ++j > 2 )
 800e0cc:	2f3d      	cmp	r7, #61	; 0x3d
 800e0ce:	d104      	bne.n	800e0da <mbedtls_base64_decode+0x4e>
 800e0d0:	f10c 0c01 	add.w	ip, ip, #1
 800e0d4:	f1bc 0f02 	cmp.w	ip, #2
 800e0d8:	d867      	bhi.n	800e1aa <mbedtls_base64_decode+0x11e>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e0da:	063e      	lsls	r6, r7, #24
 800e0dc:	d465      	bmi.n	800e1aa <mbedtls_base64_decode+0x11e>
 800e0de:	4447      	add	r7, r8
 800e0e0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 800e0e4:	2e7f      	cmp	r6, #127	; 0x7f
 800e0e6:	d060      	beq.n	800e1aa <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 800e0e8:	2e3f      	cmp	r6, #63	; 0x3f
 800e0ea:	d802      	bhi.n	800e0f2 <mbedtls_base64_decode+0x66>
 800e0ec:	f1bc 0f00 	cmp.w	ip, #0
 800e0f0:	d15b      	bne.n	800e1aa <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 800e0f2:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 800e0f4:	1c6e      	adds	r6, r5, #1
 800e0f6:	e7d3      	b.n	800e0a0 <mbedtls_base64_decode+0x14>
            ++i;
 800e0f8:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 800e0fa:	45ae      	cmp	lr, r5
 800e0fc:	d1d3      	bne.n	800e0a6 <mbedtls_base64_decode+0x1a>
    }

    if( n == 0 )
 800e0fe:	b924      	cbnz	r4, 800e10a <mbedtls_base64_decode+0x7e>
    {
        *olen = 0;
 800e100:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 800e102:	2000      	movs	r0, #0
 800e104:	e020      	b.n	800e148 <mbedtls_base64_decode+0xbc>
        if( src[i] == '\n' )
 800e106:	2f0a      	cmp	r7, #10
 800e108:	e7dd      	b.n	800e0c6 <mbedtls_base64_decode+0x3a>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 800e10a:	f004 0707 	and.w	r7, r4, #7
 800e10e:	2606      	movs	r6, #6
 800e110:	08e4      	lsrs	r4, r4, #3
 800e112:	4377      	muls	r7, r6
 800e114:	4374      	muls	r4, r6
 800e116:	3707      	adds	r7, #7
 800e118:	eba4 040c 	sub.w	r4, r4, ip
    n -= j;
 800e11c:	eb04 04d7 	add.w	r4, r4, r7, lsr #3
    if( dst == NULL || dlen < n )
 800e120:	b178      	cbz	r0, 800e142 <mbedtls_base64_decode+0xb6>
 800e122:	428c      	cmp	r4, r1
 800e124:	d80d      	bhi.n	800e142 <mbedtls_base64_decode+0xb6>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e126:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
 800e128:	f8df e084 	ldr.w	lr, [pc, #132]	; 800e1b0 <mbedtls_base64_decode+0x124>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e12c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800e1b4 <mbedtls_base64_decode+0x128>
 800e130:	441d      	add	r5, r3
    if( dst == NULL || dlen < n )
 800e132:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e134:	2603      	movs	r6, #3
 800e136:	463c      	mov	r4, r7
 800e138:	429d      	cmp	r5, r3
 800e13a:	d107      	bne.n	800e14c <mbedtls_base64_decode+0xc0>
    *olen = p - dst;
 800e13c:	1a09      	subs	r1, r1, r0
 800e13e:	6011      	str	r1, [r2, #0]
 800e140:	e7df      	b.n	800e102 <mbedtls_base64_decode+0x76>
        *olen = n;
 800e142:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 800e144:	f06f 0029 	mvn.w	r0, #41	; 0x29
}
 800e148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e14c:	f813 9b01 	ldrb.w	r9, [r3], #1
 800e150:	f1a9 0c0a 	sub.w	ip, r9, #10
 800e154:	fa5f fc8c 	uxtb.w	ip, ip
 800e158:	f1bc 0f16 	cmp.w	ip, #22
 800e15c:	d804      	bhi.n	800e168 <mbedtls_base64_decode+0xdc>
 800e15e:	fa28 fc0c 	lsr.w	ip, r8, ip
 800e162:	f01c 0f01 	tst.w	ip, #1
 800e166:	d1e7      	bne.n	800e138 <mbedtls_base64_decode+0xac>
        j -= ( base64_dec_map[*src] == 64 );
 800e168:	44f1      	add	r9, lr
        if( ++n == 4 )
 800e16a:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 800e16c:	f899 c040 	ldrb.w	ip, [r9, #64]	; 0x40
 800e170:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 800e174:	bf08      	it	eq
 800e176:	3e01      	subeq	r6, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e178:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
 800e17c:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e17e:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
 800e182:	d1d9      	bne.n	800e138 <mbedtls_base64_decode+0xac>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e184:	b17e      	cbz	r6, 800e1a6 <mbedtls_base64_decode+0x11a>
 800e186:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e188:	2e01      	cmp	r6, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e18a:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e18c:	d102      	bne.n	800e194 <mbedtls_base64_decode+0x108>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e18e:	3101      	adds	r1, #1
            n = 0;
 800e190:	2400      	movs	r4, #0
 800e192:	e7d1      	b.n	800e138 <mbedtls_base64_decode+0xac>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e194:	2e02      	cmp	r6, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e196:	ea4f 2417 	mov.w	r4, r7, lsr #8
 800e19a:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e19c:	bf16      	itet	ne
 800e19e:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e1a0:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e1a2:	3103      	addne	r1, #3
 800e1a4:	e7f4      	b.n	800e190 <mbedtls_base64_decode+0x104>
            n = 0;
 800e1a6:	4634      	mov	r4, r6
 800e1a8:	e7c6      	b.n	800e138 <mbedtls_base64_decode+0xac>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 800e1aa:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 800e1ae:	e7cb      	b.n	800e148 <mbedtls_base64_decode+0xbc>
 800e1b0:	0802a338 	.word	0x0802a338
 800e1b4:	00400009 	.word	0x00400009

0800e1b8 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800e1b8:	2300      	movs	r3, #0
{
 800e1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1bc:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
 800e1be:	461c      	mov	r4, r3
 800e1c0:	4284      	cmp	r4, r0
 800e1c2:	d103      	bne.n	800e1cc <mpi_sub_hlp+0x14>
 800e1c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 800e1c8:	b9bb      	cbnz	r3, 800e1fa <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; i++; d++;
    }
}
 800e1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 800e1cc:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800e1d0:	ebac 0503 	sub.w	r5, ip, r3
 800e1d4:	f846 5f04 	str.w	r5, [r6, #4]!
        c = ( *d < *s ) + z; *d -= *s;
 800e1d8:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800e1dc:	42bd      	cmp	r5, r7
 800e1de:	bf2c      	ite	cs
 800e1e0:	f04f 0e00 	movcs.w	lr, #0
 800e1e4:	f04f 0e01 	movcc.w	lr, #1
 800e1e8:	1bed      	subs	r5, r5, r7
 800e1ea:	459c      	cmp	ip, r3
 800e1ec:	bf2c      	ite	cs
 800e1ee:	4673      	movcs	r3, lr
 800e1f0:	f10e 0301 	addcc.w	r3, lr, #1
 800e1f4:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800e1f6:	3401      	adds	r4, #1
 800e1f8:	e7e2      	b.n	800e1c0 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 800e1fa:	6811      	ldr	r1, [r2, #0]
 800e1fc:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 800e1fe:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 800e200:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 800e204:	bf2c      	ite	cs
 800e206:	2300      	movcs	r3, #0
 800e208:	2301      	movcc	r3, #1
 800e20a:	e7dd      	b.n	800e1c8 <mpi_sub_hlp+0x10>

0800e20c <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20e:	b087      	sub	sp, #28
 800e210:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e214:	9301      	str	r3, [sp, #4]
    mbedtls_mpi_uint c = 0, t = 0;
 800e216:	2300      	movs	r3, #0
{
 800e218:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 800e21a:	9305      	str	r3, [sp, #20]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800e21c:	4684      	mov	ip, r0
 800e21e:	f1bc 0f0f 	cmp.w	ip, #15
 800e222:	f200 8085 	bhi.w	800e330 <mpi_mul_hlp+0x124>
 800e226:	ea4f 1c1e 	mov.w	ip, lr, lsr #4
 800e22a:	f06f 030f 	mvn.w	r3, #15
 800e22e:	fb03 ec0c 	mla	ip, r3, ip, lr
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800e232:	f1bc 0f07 	cmp.w	ip, #7
 800e236:	d968      	bls.n	800e30a <mpi_mul_hlp+0xfe>
    {
        MULADDC_INIT
 800e238:	9803      	ldr	r0, [sp, #12]
 800e23a:	9902      	ldr	r1, [sp, #8]
 800e23c:	9a05      	ldr	r2, [sp, #20]
 800e23e:	9b01      	ldr	r3, [sp, #4]
 800e240:	f850 4b04 	ldr.w	r4, [r0], #4
 800e244:	f04f 0500 	mov.w	r5, #0
 800e248:	680e      	ldr	r6, [r1, #0]
 800e24a:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e24e:	18b7      	adds	r7, r6, r2
 800e250:	f145 0200 	adc.w	r2, r5, #0
 800e254:	f841 7b04 	str.w	r7, [r1], #4
 800e258:	f850 4b04 	ldr.w	r4, [r0], #4
 800e25c:	f04f 0500 	mov.w	r5, #0
 800e260:	680e      	ldr	r6, [r1, #0]
 800e262:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e266:	18b7      	adds	r7, r6, r2
 800e268:	f145 0200 	adc.w	r2, r5, #0
 800e26c:	f841 7b04 	str.w	r7, [r1], #4
 800e270:	f850 4b04 	ldr.w	r4, [r0], #4
 800e274:	f04f 0500 	mov.w	r5, #0
 800e278:	680e      	ldr	r6, [r1, #0]
 800e27a:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e27e:	18b7      	adds	r7, r6, r2
 800e280:	f145 0200 	adc.w	r2, r5, #0
 800e284:	f841 7b04 	str.w	r7, [r1], #4
 800e288:	f850 4b04 	ldr.w	r4, [r0], #4
 800e28c:	f04f 0500 	mov.w	r5, #0
 800e290:	680e      	ldr	r6, [r1, #0]
 800e292:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e296:	18b7      	adds	r7, r6, r2
 800e298:	f145 0200 	adc.w	r2, r5, #0
 800e29c:	f841 7b04 	str.w	r7, [r1], #4
 800e2a0:	f850 4b04 	ldr.w	r4, [r0], #4
 800e2a4:	f04f 0500 	mov.w	r5, #0
 800e2a8:	680e      	ldr	r6, [r1, #0]
 800e2aa:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e2ae:	18b7      	adds	r7, r6, r2
 800e2b0:	f145 0200 	adc.w	r2, r5, #0
 800e2b4:	f841 7b04 	str.w	r7, [r1], #4
 800e2b8:	f850 4b04 	ldr.w	r4, [r0], #4
 800e2bc:	f04f 0500 	mov.w	r5, #0
 800e2c0:	680e      	ldr	r6, [r1, #0]
 800e2c2:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e2c6:	18b7      	adds	r7, r6, r2
 800e2c8:	f145 0200 	adc.w	r2, r5, #0
 800e2cc:	f841 7b04 	str.w	r7, [r1], #4
 800e2d0:	f850 4b04 	ldr.w	r4, [r0], #4
 800e2d4:	f04f 0500 	mov.w	r5, #0
 800e2d8:	680e      	ldr	r6, [r1, #0]
 800e2da:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e2de:	18b7      	adds	r7, r6, r2
 800e2e0:	f145 0200 	adc.w	r2, r5, #0
 800e2e4:	f841 7b04 	str.w	r7, [r1], #4
 800e2e8:	f850 4b04 	ldr.w	r4, [r0], #4
 800e2ec:	f04f 0500 	mov.w	r5, #0
 800e2f0:	680e      	ldr	r6, [r1, #0]
 800e2f2:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e2f6:	18b7      	adds	r7, r6, r2
 800e2f8:	f145 0200 	adc.w	r2, r5, #0
 800e2fc:	f841 7b04 	str.w	r7, [r1], #4
 800e300:	9205      	str	r2, [sp, #20]
 800e302:	9102      	str	r1, [sp, #8]
 800e304:	9003      	str	r0, [sp, #12]
    for( ; i >= 8; i -= 8 )
 800e306:	f1ac 0c08 	sub.w	ip, ip, #8
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800e30a:	f1bc 0f00 	cmp.w	ip, #0
 800e30e:	f040 80d9 	bne.w	800e4c4 <mpi_mul_hlp+0x2b8>
 800e312:	9a02      	ldr	r2, [sp, #8]
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 800e314:	9905      	ldr	r1, [sp, #20]
 800e316:	6813      	ldr	r3, [r2, #0]
 800e318:	440b      	add	r3, r1
 800e31a:	f842 3b04 	str.w	r3, [r2], #4
 800e31e:	9905      	ldr	r1, [sp, #20]
 800e320:	428b      	cmp	r3, r1
 800e322:	bf34      	ite	cc
 800e324:	2301      	movcc	r3, #1
 800e326:	2300      	movcs	r3, #0
 800e328:	9305      	str	r3, [sp, #20]
    }
    while( c != 0 );
 800e32a:	d3f3      	bcc.n	800e314 <mpi_mul_hlp+0x108>
}
 800e32c:	b007      	add	sp, #28
 800e32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_INIT
 800e330:	9803      	ldr	r0, [sp, #12]
 800e332:	9902      	ldr	r1, [sp, #8]
 800e334:	9a05      	ldr	r2, [sp, #20]
 800e336:	9b01      	ldr	r3, [sp, #4]
 800e338:	f850 4b04 	ldr.w	r4, [r0], #4
 800e33c:	f04f 0500 	mov.w	r5, #0
 800e340:	680e      	ldr	r6, [r1, #0]
 800e342:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e346:	18b7      	adds	r7, r6, r2
 800e348:	f145 0200 	adc.w	r2, r5, #0
 800e34c:	f841 7b04 	str.w	r7, [r1], #4
 800e350:	f850 4b04 	ldr.w	r4, [r0], #4
 800e354:	f04f 0500 	mov.w	r5, #0
 800e358:	680e      	ldr	r6, [r1, #0]
 800e35a:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e35e:	18b7      	adds	r7, r6, r2
 800e360:	f145 0200 	adc.w	r2, r5, #0
 800e364:	f841 7b04 	str.w	r7, [r1], #4
 800e368:	f850 4b04 	ldr.w	r4, [r0], #4
 800e36c:	f04f 0500 	mov.w	r5, #0
 800e370:	680e      	ldr	r6, [r1, #0]
 800e372:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e376:	18b7      	adds	r7, r6, r2
 800e378:	f145 0200 	adc.w	r2, r5, #0
 800e37c:	f841 7b04 	str.w	r7, [r1], #4
 800e380:	f850 4b04 	ldr.w	r4, [r0], #4
 800e384:	f04f 0500 	mov.w	r5, #0
 800e388:	680e      	ldr	r6, [r1, #0]
 800e38a:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e38e:	18b7      	adds	r7, r6, r2
 800e390:	f145 0200 	adc.w	r2, r5, #0
 800e394:	f841 7b04 	str.w	r7, [r1], #4
 800e398:	f850 4b04 	ldr.w	r4, [r0], #4
 800e39c:	f04f 0500 	mov.w	r5, #0
 800e3a0:	680e      	ldr	r6, [r1, #0]
 800e3a2:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e3a6:	18b7      	adds	r7, r6, r2
 800e3a8:	f145 0200 	adc.w	r2, r5, #0
 800e3ac:	f841 7b04 	str.w	r7, [r1], #4
 800e3b0:	f850 4b04 	ldr.w	r4, [r0], #4
 800e3b4:	f04f 0500 	mov.w	r5, #0
 800e3b8:	680e      	ldr	r6, [r1, #0]
 800e3ba:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e3be:	18b7      	adds	r7, r6, r2
 800e3c0:	f145 0200 	adc.w	r2, r5, #0
 800e3c4:	f841 7b04 	str.w	r7, [r1], #4
 800e3c8:	f850 4b04 	ldr.w	r4, [r0], #4
 800e3cc:	f04f 0500 	mov.w	r5, #0
 800e3d0:	680e      	ldr	r6, [r1, #0]
 800e3d2:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e3d6:	18b7      	adds	r7, r6, r2
 800e3d8:	f145 0200 	adc.w	r2, r5, #0
 800e3dc:	f841 7b04 	str.w	r7, [r1], #4
 800e3e0:	f850 4b04 	ldr.w	r4, [r0], #4
 800e3e4:	f04f 0500 	mov.w	r5, #0
 800e3e8:	680e      	ldr	r6, [r1, #0]
 800e3ea:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e3ee:	18b7      	adds	r7, r6, r2
 800e3f0:	f145 0200 	adc.w	r2, r5, #0
 800e3f4:	f841 7b04 	str.w	r7, [r1], #4
 800e3f8:	f850 4b04 	ldr.w	r4, [r0], #4
 800e3fc:	f04f 0500 	mov.w	r5, #0
 800e400:	680e      	ldr	r6, [r1, #0]
 800e402:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e406:	18b7      	adds	r7, r6, r2
 800e408:	f145 0200 	adc.w	r2, r5, #0
 800e40c:	f841 7b04 	str.w	r7, [r1], #4
 800e410:	f850 4b04 	ldr.w	r4, [r0], #4
 800e414:	f04f 0500 	mov.w	r5, #0
 800e418:	680e      	ldr	r6, [r1, #0]
 800e41a:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e41e:	18b7      	adds	r7, r6, r2
 800e420:	f145 0200 	adc.w	r2, r5, #0
 800e424:	f841 7b04 	str.w	r7, [r1], #4
 800e428:	f850 4b04 	ldr.w	r4, [r0], #4
 800e42c:	f04f 0500 	mov.w	r5, #0
 800e430:	680e      	ldr	r6, [r1, #0]
 800e432:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e436:	18b7      	adds	r7, r6, r2
 800e438:	f145 0200 	adc.w	r2, r5, #0
 800e43c:	f841 7b04 	str.w	r7, [r1], #4
 800e440:	f850 4b04 	ldr.w	r4, [r0], #4
 800e444:	f04f 0500 	mov.w	r5, #0
 800e448:	680e      	ldr	r6, [r1, #0]
 800e44a:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e44e:	18b7      	adds	r7, r6, r2
 800e450:	f145 0200 	adc.w	r2, r5, #0
 800e454:	f841 7b04 	str.w	r7, [r1], #4
 800e458:	f850 4b04 	ldr.w	r4, [r0], #4
 800e45c:	f04f 0500 	mov.w	r5, #0
 800e460:	680e      	ldr	r6, [r1, #0]
 800e462:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e466:	18b7      	adds	r7, r6, r2
 800e468:	f145 0200 	adc.w	r2, r5, #0
 800e46c:	f841 7b04 	str.w	r7, [r1], #4
 800e470:	f850 4b04 	ldr.w	r4, [r0], #4
 800e474:	f04f 0500 	mov.w	r5, #0
 800e478:	680e      	ldr	r6, [r1, #0]
 800e47a:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e47e:	18b7      	adds	r7, r6, r2
 800e480:	f145 0200 	adc.w	r2, r5, #0
 800e484:	f841 7b04 	str.w	r7, [r1], #4
 800e488:	f850 4b04 	ldr.w	r4, [r0], #4
 800e48c:	f04f 0500 	mov.w	r5, #0
 800e490:	680e      	ldr	r6, [r1, #0]
 800e492:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e496:	18b7      	adds	r7, r6, r2
 800e498:	f145 0200 	adc.w	r2, r5, #0
 800e49c:	f841 7b04 	str.w	r7, [r1], #4
 800e4a0:	f850 4b04 	ldr.w	r4, [r0], #4
 800e4a4:	f04f 0500 	mov.w	r5, #0
 800e4a8:	680e      	ldr	r6, [r1, #0]
 800e4aa:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e4ae:	18b7      	adds	r7, r6, r2
 800e4b0:	f145 0200 	adc.w	r2, r5, #0
 800e4b4:	f841 7b04 	str.w	r7, [r1], #4
 800e4b8:	9205      	str	r2, [sp, #20]
 800e4ba:	9102      	str	r1, [sp, #8]
 800e4bc:	9003      	str	r0, [sp, #12]
    for( ; i >= 16; i -= 16 )
 800e4be:	f1ac 0c10 	sub.w	ip, ip, #16
 800e4c2:	e6ac      	b.n	800e21e <mpi_mul_hlp+0x12>
        MULADDC_INIT
 800e4c4:	9803      	ldr	r0, [sp, #12]
 800e4c6:	9902      	ldr	r1, [sp, #8]
 800e4c8:	9a05      	ldr	r2, [sp, #20]
 800e4ca:	9b01      	ldr	r3, [sp, #4]
 800e4cc:	f850 4b04 	ldr.w	r4, [r0], #4
 800e4d0:	f04f 0500 	mov.w	r5, #0
 800e4d4:	680e      	ldr	r6, [r1, #0]
 800e4d6:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e4da:	18b7      	adds	r7, r6, r2
 800e4dc:	f145 0200 	adc.w	r2, r5, #0
 800e4e0:	f841 7b04 	str.w	r7, [r1], #4
 800e4e4:	9205      	str	r2, [sp, #20]
 800e4e6:	9102      	str	r1, [sp, #8]
 800e4e8:	9003      	str	r0, [sp, #12]
    for( ; i > 0; i-- )
 800e4ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e4ee:	e70c      	b.n	800e30a <mpi_mul_hlp+0xfe>

0800e4f0 <mbedtls_mpi_init>:
    if( X == NULL )
 800e4f0:	b120      	cbz	r0, 800e4fc <mbedtls_mpi_init+0xc>
    X->n = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
 800e4fa:	6083      	str	r3, [r0, #8]
}
 800e4fc:	4770      	bx	lr
	...

0800e500 <mbedtls_mpi_free>:
{
 800e500:	b510      	push	{r4, lr}
    if( X == NULL )
 800e502:	4604      	mov	r4, r0
 800e504:	b178      	cbz	r0, 800e526 <mbedtls_mpi_free+0x26>
    if( X->p != NULL )
 800e506:	6880      	ldr	r0, [r0, #8]
 800e508:	b140      	cbz	r0, 800e51c <mbedtls_mpi_free+0x1c>
        mbedtls_mpi_zeroize( X->p, X->n );
 800e50a:	6863      	ldr	r3, [r4, #4]
 800e50c:	4602      	mov	r2, r0
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e50e:	2100      	movs	r1, #0
 800e510:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e514:	d208      	bcs.n	800e528 <mbedtls_mpi_free+0x28>
        mbedtls_free( X->p );
 800e516:	4b06      	ldr	r3, [pc, #24]	; (800e530 <mbedtls_mpi_free+0x30>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4798      	blx	r3
    X->n = 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	2201      	movs	r2, #1
 800e520:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 800e524:	60a3      	str	r3, [r4, #8]
}
 800e526:	bd10      	pop	{r4, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e528:	6011      	str	r1, [r2, #0]
 800e52a:	3204      	adds	r2, #4
 800e52c:	e7f0      	b.n	800e510 <mbedtls_mpi_free+0x10>
 800e52e:	bf00      	nop
 800e530:	200005a4 	.word	0x200005a4

0800e534 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800e534:	f242 7310 	movw	r3, #10000	; 0x2710
 800e538:	4299      	cmp	r1, r3
{
 800e53a:	b570      	push	{r4, r5, r6, lr}
 800e53c:	4604      	mov	r4, r0
 800e53e:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800e540:	d902      	bls.n	800e548 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800e542:	f06f 000f 	mvn.w	r0, #15
}
 800e546:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
 800e548:	6843      	ldr	r3, [r0, #4]
 800e54a:	428b      	cmp	r3, r1
 800e54c:	d219      	bcs.n	800e582 <mbedtls_mpi_grow+0x4e>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800e54e:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <mbedtls_mpi_grow+0x58>)
 800e550:	2104      	movs	r1, #4
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4628      	mov	r0, r5
 800e556:	4798      	blx	r3
 800e558:	4606      	mov	r6, r0
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d0f1      	beq.n	800e542 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
 800e55e:	68a1      	ldr	r1, [r4, #8]
 800e560:	b169      	cbz	r1, 800e57e <mbedtls_mpi_grow+0x4a>
            memcpy( p, X->p, X->n * ciL );
 800e562:	6862      	ldr	r2, [r4, #4]
 800e564:	0092      	lsls	r2, r2, #2
 800e566:	f013 febe 	bl	80222e6 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800e56a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e56e:	2100      	movs	r1, #0
 800e570:	4602      	mov	r2, r0
 800e572:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e576:	d206      	bcs.n	800e586 <mbedtls_mpi_grow+0x52>
            mbedtls_free( X->p );
 800e578:	4b05      	ldr	r3, [pc, #20]	; (800e590 <mbedtls_mpi_grow+0x5c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4798      	blx	r3
        X->p = p;
 800e57e:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800e582:	2000      	movs	r0, #0
 800e584:	e7df      	b.n	800e546 <mbedtls_mpi_grow+0x12>
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e586:	6011      	str	r1, [r2, #0]
 800e588:	3204      	adds	r2, #4
 800e58a:	e7f2      	b.n	800e572 <mbedtls_mpi_grow+0x3e>
 800e58c:	200005a0 	.word	0x200005a0
 800e590:	200005a4 	.word	0x200005a4

0800e594 <mbedtls_mpi_shrink>:
    if( X->n <= nblimbs )
 800e594:	6843      	ldr	r3, [r0, #4]
 800e596:	428b      	cmp	r3, r1
{
 800e598:	b570      	push	{r4, r5, r6, lr}
 800e59a:	4604      	mov	r4, r0
 800e59c:	460d      	mov	r5, r1
    if( X->n <= nblimbs )
 800e59e:	d803      	bhi.n	800e5a8 <mbedtls_mpi_shrink+0x14>
}
 800e5a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800e5a4:	f7ff bfc6 	b.w	800e534 <mbedtls_mpi_grow>
    for( i = X->n - 1; i > 0; i-- )
 800e5a8:	1e5a      	subs	r2, r3, #1
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	b9ea      	cbnz	r2, 800e5ea <mbedtls_mpi_shrink+0x56>
    i++;
 800e5ae:	3201      	adds	r2, #1
 800e5b0:	4295      	cmp	r5, r2
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800e5b2:	4b15      	ldr	r3, [pc, #84]	; (800e608 <mbedtls_mpi_shrink+0x74>)
 800e5b4:	bf38      	it	cc
 800e5b6:	4615      	movcc	r5, r2
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2104      	movs	r1, #4
 800e5bc:	4628      	mov	r0, r5
 800e5be:	4798      	blx	r3
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	b1f0      	cbz	r0, 800e602 <mbedtls_mpi_shrink+0x6e>
    if( X->p != NULL )
 800e5c4:	68a1      	ldr	r1, [r4, #8]
 800e5c6:	b161      	cbz	r1, 800e5e2 <mbedtls_mpi_shrink+0x4e>
        memcpy( p, X->p, i * ciL );
 800e5c8:	00aa      	lsls	r2, r5, #2
 800e5ca:	f013 fe8c 	bl	80222e6 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 800e5ce:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e5da:	d20f      	bcs.n	800e5fc <mbedtls_mpi_shrink+0x68>
        mbedtls_free( X->p );
 800e5dc:	4b0b      	ldr	r3, [pc, #44]	; (800e60c <mbedtls_mpi_shrink+0x78>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4798      	blx	r3
    X->p = p;
 800e5e2:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800e5e6:	2000      	movs	r0, #0
}
 800e5e8:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i] != 0 )
 800e5ea:	68a1      	ldr	r1, [r4, #8]
 800e5ec:	4419      	add	r1, r3
 800e5ee:	3b04      	subs	r3, #4
 800e5f0:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800e5f4:	2900      	cmp	r1, #0
 800e5f6:	d1da      	bne.n	800e5ae <mbedtls_mpi_shrink+0x1a>
    for( i = X->n - 1; i > 0; i-- )
 800e5f8:	3a01      	subs	r2, #1
 800e5fa:	e7d7      	b.n	800e5ac <mbedtls_mpi_shrink+0x18>
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e5fc:	6011      	str	r1, [r2, #0]
 800e5fe:	3204      	adds	r2, #4
 800e600:	e7e9      	b.n	800e5d6 <mbedtls_mpi_shrink+0x42>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800e602:	f06f 000f 	mvn.w	r0, #15
 800e606:	e7ef      	b.n	800e5e8 <mbedtls_mpi_shrink+0x54>
 800e608:	200005a0 	.word	0x200005a0
 800e60c:	200005a4 	.word	0x200005a4

0800e610 <mbedtls_mpi_copy>:
    if( X == Y )
 800e610:	4288      	cmp	r0, r1
{
 800e612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e614:	4606      	mov	r6, r0
 800e616:	460f      	mov	r7, r1
    if( X == Y )
 800e618:	d022      	beq.n	800e660 <mbedtls_mpi_copy+0x50>
    if( Y->p == NULL )
 800e61a:	688d      	ldr	r5, [r1, #8]
 800e61c:	b91d      	cbnz	r5, 800e626 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 800e61e:	f7ff ff6f 	bl	800e500 <mbedtls_mpi_free>
}
 800e622:	4628      	mov	r0, r5
 800e624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( i = Y->n - 1; i > 0; i-- )
 800e626:	684a      	ldr	r2, [r1, #4]
 800e628:	3a01      	subs	r2, #1
 800e62a:	b11a      	cbz	r2, 800e634 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 800e62c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d0f9      	beq.n	800e628 <mbedtls_mpi_copy+0x18>
    i++;
 800e634:	1c54      	adds	r4, r2, #1
    X->s = Y->s;
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	6033      	str	r3, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800e63a:	4621      	mov	r1, r4
 800e63c:	4630      	mov	r0, r6
 800e63e:	f7ff ff79 	bl	800e534 <mbedtls_mpi_grow>
 800e642:	4605      	mov	r5, r0
 800e644:	2800      	cmp	r0, #0
 800e646:	d1ec      	bne.n	800e622 <mbedtls_mpi_copy+0x12>
    memset( X->p, 0, X->n * ciL );
 800e648:	6872      	ldr	r2, [r6, #4]
 800e64a:	4601      	mov	r1, r0
 800e64c:	0092      	lsls	r2, r2, #2
 800e64e:	68b0      	ldr	r0, [r6, #8]
 800e650:	f013 fe6d 	bl	802232e <memset>
    memcpy( X->p, Y->p, i * ciL );
 800e654:	00a2      	lsls	r2, r4, #2
 800e656:	68b9      	ldr	r1, [r7, #8]
 800e658:	68b0      	ldr	r0, [r6, #8]
 800e65a:	f013 fe44 	bl	80222e6 <memcpy>
 800e65e:	e7e0      	b.n	800e622 <mbedtls_mpi_copy+0x12>
        return( 0 );
 800e660:	2500      	movs	r5, #0
 800e662:	e7de      	b.n	800e622 <mbedtls_mpi_copy+0x12>

0800e664 <mbedtls_mpi_safe_cond_assign>:
{
 800e664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e666:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800e668:	6849      	ldr	r1, [r1, #4]
{
 800e66a:	4605      	mov	r5, r0
 800e66c:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800e66e:	f7ff ff61 	bl	800e534 <mbedtls_mpi_grow>
 800e672:	b9b0      	cbnz	r0, 800e6a2 <mbedtls_mpi_safe_cond_assign+0x3e>
    assign = (assign | (unsigned char)-assign) >> 7;
 800e674:	4262      	negs	r2, r4
 800e676:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800e678:	6831      	ldr	r1, [r6, #0]
 800e67a:	682b      	ldr	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800e67c:	f8d6 e004 	ldr.w	lr, [r6, #4]
    assign = (assign | (unsigned char)-assign) >> 7;
 800e680:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800e684:	f1c2 0401 	rsb	r4, r2, #1
 800e688:	4351      	muls	r1, r2
 800e68a:	fb03 1304 	mla	r3, r3, r4, r1
 800e68e:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800e690:	4603      	mov	r3, r0
 800e692:	459e      	cmp	lr, r3
 800e694:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800e698:	d104      	bne.n	800e6a4 <mbedtls_mpi_safe_cond_assign+0x40>
    for( ; i < X->n; i++ )
 800e69a:	686f      	ldr	r7, [r5, #4]
 800e69c:	460a      	mov	r2, r1
 800e69e:	429f      	cmp	r7, r3
 800e6a0:	d80e      	bhi.n	800e6c0 <mbedtls_mpi_safe_cond_assign+0x5c>
}
 800e6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800e6a4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800e6a8:	68b1      	ldr	r1, [r6, #8]
 800e6aa:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800e6ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e6b2:	4367      	muls	r7, r4
 800e6b4:	fb01 7102 	mla	r1, r1, r2, r7
 800e6b8:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 800e6bc:	3301      	adds	r3, #1
 800e6be:	e7e8      	b.n	800e692 <mbedtls_mpi_safe_cond_assign+0x2e>
        X->p[i] *= ( 1 - assign );
 800e6c0:	68ae      	ldr	r6, [r5, #8]
 800e6c2:	58b1      	ldr	r1, [r6, r2]
 800e6c4:	4361      	muls	r1, r4
 800e6c6:	50b1      	str	r1, [r6, r2]
    for( ; i < X->n; i++ )
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	3204      	adds	r2, #4
 800e6cc:	e7e7      	b.n	800e69e <mbedtls_mpi_safe_cond_assign+0x3a>

0800e6ce <mbedtls_mpi_lset>:
{
 800e6ce:	b570      	push	{r4, r5, r6, lr}
 800e6d0:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800e6d2:	2101      	movs	r1, #1
{
 800e6d4:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800e6d6:	f7ff ff2d 	bl	800e534 <mbedtls_mpi_grow>
 800e6da:	4605      	mov	r5, r0
 800e6dc:	b988      	cbnz	r0, 800e702 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 800e6de:	6862      	ldr	r2, [r4, #4]
 800e6e0:	4601      	mov	r1, r0
 800e6e2:	0092      	lsls	r2, r2, #2
 800e6e4:	68a0      	ldr	r0, [r4, #8]
 800e6e6:	f013 fe22 	bl	802232e <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 800e6ea:	68a3      	ldr	r3, [r4, #8]
 800e6ec:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 800e6f0:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 800e6f2:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 800e6f6:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800e6f8:	bfb4      	ite	lt
 800e6fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6fe:	2301      	movge	r3, #1
 800e700:	6023      	str	r3, [r4, #0]
}
 800e702:	4628      	mov	r0, r5
 800e704:	bd70      	pop	{r4, r5, r6, pc}

0800e706 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 800e706:	6843      	ldr	r3, [r0, #4]
 800e708:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800e70c:	bf3f      	itttt	cc
 800e70e:	6883      	ldrcc	r3, [r0, #8]
 800e710:	094a      	lsrcc	r2, r1, #5
 800e712:	f001 011f 	andcc.w	r1, r1, #31
 800e716:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 800e71a:	bf3a      	itte	cc
 800e71c:	40c8      	lsrcc	r0, r1
 800e71e:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 800e722:	2000      	movcs	r0, #0
}
 800e724:	4770      	bx	lr

0800e726 <mbedtls_mpi_lsb>:
{
 800e726:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
 800e728:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 800e72a:	6845      	ldr	r5, [r0, #4]
{
 800e72c:	4604      	mov	r4, r0
    for( i = 0; i < X->n; i++ )
 800e72e:	460a      	mov	r2, r1
 800e730:	4295      	cmp	r5, r2
 800e732:	d101      	bne.n	800e738 <mbedtls_mpi_lsb+0x12>
    return( 0 );
 800e734:	2000      	movs	r0, #0
}
 800e736:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800e738:	68a3      	ldr	r3, [r4, #8]
 800e73a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 800e73e:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800e740:	fa26 f703 	lsr.w	r7, r6, r3
 800e744:	07ff      	lsls	r7, r7, #31
 800e746:	eb01 0003 	add.w	r0, r1, r3
 800e74a:	d4f4      	bmi.n	800e736 <mbedtls_mpi_lsb+0x10>
        for( j = 0; j < biL; j++, count++ )
 800e74c:	3301      	adds	r3, #1
 800e74e:	2b20      	cmp	r3, #32
 800e750:	eb01 0003 	add.w	r0, r1, r3
 800e754:	d1f4      	bne.n	800e740 <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 800e756:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 800e758:	4601      	mov	r1, r0
 800e75a:	e7e9      	b.n	800e730 <mbedtls_mpi_lsb+0xa>

0800e75c <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 800e75c:	6843      	ldr	r3, [r0, #4]
 800e75e:	b1db      	cbz	r3, 800e798 <mbedtls_mpi_bitlen+0x3c>
 800e760:	6881      	ldr	r1, [r0, #8]
    for( i = X->n - 1; i > 0; i-- )
 800e762:	1e5a      	subs	r2, r3, #1
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	b97a      	cbnz	r2, 800e788 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
 800e768:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    for( j = 0; j < biL; j++ )
 800e76c:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800e76e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        if( x & mask ) break;
 800e772:	4219      	tst	r1, r3
 800e774:	d104      	bne.n	800e780 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 800e776:	3001      	adds	r0, #1
 800e778:	2820      	cmp	r0, #32
        mask >>= 1;
 800e77a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 800e77e:	d1f8      	bne.n	800e772 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 800e780:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e784:	3020      	adds	r0, #32
 800e786:	4770      	bx	lr
        if( X->p[i] != 0 )
 800e788:	18c8      	adds	r0, r1, r3
 800e78a:	3b04      	subs	r3, #4
 800e78c:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800e790:	2800      	cmp	r0, #0
 800e792:	d1e9      	bne.n	800e768 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 800e794:	3a01      	subs	r2, #1
 800e796:	e7e6      	b.n	800e766 <mbedtls_mpi_bitlen+0xa>
        return( 0 );
 800e798:	4618      	mov	r0, r3
}
 800e79a:	4770      	bx	lr

0800e79c <mbedtls_mpi_size>:
{
 800e79c:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800e79e:	f7ff ffdd 	bl	800e75c <mbedtls_mpi_bitlen>
 800e7a2:	3007      	adds	r0, #7
}
 800e7a4:	08c0      	lsrs	r0, r0, #3
 800e7a6:	bd08      	pop	{r3, pc}

0800e7a8 <mbedtls_mpi_read_binary>:
{
 800e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7aa:	4606      	mov	r6, r0
 800e7ac:	460f      	mov	r7, r1
 800e7ae:	4615      	mov	r5, r2
    for( n = 0; n < buflen; n++ )
 800e7b0:	2400      	movs	r4, #0
 800e7b2:	42ac      	cmp	r4, r5
 800e7b4:	d001      	beq.n	800e7ba <mbedtls_mpi_read_binary+0x12>
        if( buf[n] != 0 )
 800e7b6:	5d3b      	ldrb	r3, [r7, r4]
 800e7b8:	b1b3      	cbz	r3, 800e7e8 <mbedtls_mpi_read_binary+0x40>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, CHARS_TO_LIMBS( buflen - n ) ) );
 800e7ba:	1b29      	subs	r1, r5, r4
 800e7bc:	f011 0303 	ands.w	r3, r1, #3
 800e7c0:	bf18      	it	ne
 800e7c2:	2301      	movne	r3, #1
 800e7c4:	eb03 0191 	add.w	r1, r3, r1, lsr #2
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	f7ff feb3 	bl	800e534 <mbedtls_mpi_grow>
 800e7ce:	b950      	cbnz	r0, 800e7e6 <mbedtls_mpi_read_binary+0x3e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800e7d0:	4601      	mov	r1, r0
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f7ff ff7b 	bl	800e6ce <mbedtls_mpi_lset>
 800e7d8:	b928      	cbnz	r0, 800e7e6 <mbedtls_mpi_read_binary+0x3e>
 800e7da:	eb07 0e05 	add.w	lr, r7, r5
    for( i = buflen, j = 0; i > n; i--, j++ )
 800e7de:	4603      	mov	r3, r0
 800e7e0:	1aea      	subs	r2, r5, r3
 800e7e2:	4294      	cmp	r4, r2
 800e7e4:	d302      	bcc.n	800e7ec <mbedtls_mpi_read_binary+0x44>
}
 800e7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( n = 0; n < buflen; n++ )
 800e7e8:	3401      	adds	r4, #1
 800e7ea:	e7e2      	b.n	800e7b2 <mbedtls_mpi_read_binary+0xa>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 800e7ec:	f023 0c03 	bic.w	ip, r3, #3
 800e7f0:	f81e 2d01 	ldrb.w	r2, [lr, #-1]!
 800e7f4:	68b1      	ldr	r1, [r6, #8]
 800e7f6:	00df      	lsls	r7, r3, #3
 800e7f8:	f007 0718 	and.w	r7, r7, #24
 800e7fc:	fa02 f707 	lsl.w	r7, r2, r7
 800e800:	f851 200c 	ldr.w	r2, [r1, ip]
 800e804:	433a      	orrs	r2, r7
 800e806:	f841 200c 	str.w	r2, [r1, ip]
    for( i = buflen, j = 0; i > n; i--, j++ )
 800e80a:	3301      	adds	r3, #1
 800e80c:	e7e8      	b.n	800e7e0 <mbedtls_mpi_read_binary+0x38>

0800e80e <mbedtls_mpi_write_binary>:
{
 800e80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e810:	4617      	mov	r7, r2
 800e812:	4605      	mov	r5, r0
 800e814:	460c      	mov	r4, r1
    n = mbedtls_mpi_size( X );
 800e816:	f7ff ffc1 	bl	800e79c <mbedtls_mpi_size>
    if( buflen < n )
 800e81a:	42b8      	cmp	r0, r7
    n = mbedtls_mpi_size( X );
 800e81c:	4606      	mov	r6, r0
    if( buflen < n )
 800e81e:	d816      	bhi.n	800e84e <mbedtls_mpi_write_binary+0x40>
    memset( buf, 0, buflen );
 800e820:	4620      	mov	r0, r4
 800e822:	463a      	mov	r2, r7
 800e824:	2100      	movs	r1, #0
 800e826:	f013 fd82 	bl	802232e <memset>
 800e82a:	443c      	add	r4, r7
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800e82c:	2300      	movs	r3, #0
 800e82e:	42b3      	cmp	r3, r6
 800e830:	d101      	bne.n	800e836 <mbedtls_mpi_write_binary+0x28>
    return( 0 );
 800e832:	2000      	movs	r0, #0
}
 800e834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 800e836:	f023 0003 	bic.w	r0, r3, #3
 800e83a:	68af      	ldr	r7, [r5, #8]
 800e83c:	00da      	lsls	r2, r3, #3
 800e83e:	f002 0118 	and.w	r1, r2, #24
 800e842:	583a      	ldr	r2, [r7, r0]
 800e844:	40ca      	lsrs	r2, r1
 800e846:	f804 2d01 	strb.w	r2, [r4, #-1]!
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800e84a:	3301      	adds	r3, #1
 800e84c:	e7ef      	b.n	800e82e <mbedtls_mpi_write_binary+0x20>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 800e84e:	f06f 0007 	mvn.w	r0, #7
 800e852:	e7ef      	b.n	800e834 <mbedtls_mpi_write_binary+0x26>

0800e854 <mbedtls_mpi_shift_l>:
{
 800e854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e856:	4606      	mov	r6, r0
 800e858:	460d      	mov	r5, r1
    v0 = count / (biL    );
 800e85a:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
 800e85c:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 800e860:	f7ff ff7c 	bl	800e75c <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 800e864:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 800e866:	4428      	add	r0, r5
    if( X->n * biL < i )
 800e868:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 800e86c:	d803      	bhi.n	800e876 <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 800e86e:	b974      	cbnz	r4, 800e88e <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 800e870:	bb2f      	cbnz	r7, 800e8be <mbedtls_mpi_shift_l+0x6a>
    ret = 0;
 800e872:	2000      	movs	r0, #0
 800e874:	e00a      	b.n	800e88c <mbedtls_mpi_shift_l+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800e876:	f010 011f 	ands.w	r1, r0, #31
 800e87a:	bf18      	it	ne
 800e87c:	2101      	movne	r1, #1
 800e87e:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 800e882:	4630      	mov	r0, r6
 800e884:	f7ff fe56 	bl	800e534 <mbedtls_mpi_grow>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d0f0      	beq.n	800e86e <mbedtls_mpi_shift_l+0x1a>
}
 800e88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 800e88e:	6873      	ldr	r3, [r6, #4]
 800e890:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800e894:	3a01      	subs	r2, #1
 800e896:	1b12      	subs	r2, r2, r4
 800e898:	0092      	lsls	r2, r2, #2
 800e89a:	00a0      	lsls	r0, r4, #2
 800e89c:	42a3      	cmp	r3, r4
 800e89e:	d807      	bhi.n	800e8b0 <mbedtls_mpi_shift_l+0x5c>
 800e8a0:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	3b04      	subs	r3, #4
        for( ; i > 0; i-- )
 800e8a6:	1d19      	adds	r1, r3, #4
 800e8a8:	d0e2      	beq.n	800e870 <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 800e8aa:	68b1      	ldr	r1, [r6, #8]
 800e8ac:	50ca      	str	r2, [r1, r3]
 800e8ae:	e7f9      	b.n	800e8a4 <mbedtls_mpi_shift_l+0x50>
            X->p[i - 1] = X->p[i - v0 - 1];
 800e8b0:	68b1      	ldr	r1, [r6, #8]
 800e8b2:	588d      	ldr	r5, [r1, r2]
 800e8b4:	4411      	add	r1, r2
        for( i = X->n; i > v0; i-- )
 800e8b6:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 800e8b8:	500d      	str	r5, [r1, r0]
 800e8ba:	3a04      	subs	r2, #4
 800e8bc:	e7ee      	b.n	800e89c <mbedtls_mpi_shift_l+0x48>
        for( i = v0; i < X->n; i++ )
 800e8be:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800e8c2:	00a3      	lsls	r3, r4, #2
    mbedtls_mpi_uint r0 = 0, r1;
 800e8c4:	2100      	movs	r1, #0
            r1 = X->p[i] >> (biL - t1);
 800e8c6:	f1c7 0e20 	rsb	lr, r7, #32
        for( i = v0; i < X->n; i++ )
 800e8ca:	45a4      	cmp	ip, r4
 800e8cc:	d9d1      	bls.n	800e872 <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 800e8ce:	68b5      	ldr	r5, [r6, #8]
 800e8d0:	58e8      	ldr	r0, [r5, r3]
            X->p[i] <<= t1;
 800e8d2:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 800e8d6:	430a      	orrs	r2, r1
 800e8d8:	50ea      	str	r2, [r5, r3]
        for( i = v0; i < X->n; i++ )
 800e8da:	3401      	adds	r4, #1
 800e8dc:	3304      	adds	r3, #4
            r1 = X->p[i] >> (biL - t1);
 800e8de:	fa20 f10e 	lsr.w	r1, r0, lr
 800e8e2:	e7f2      	b.n	800e8ca <mbedtls_mpi_shift_l+0x76>

0800e8e4 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800e8e4:	6843      	ldr	r3, [r0, #4]
{
 800e8e6:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 800e8e8:	094d      	lsrs	r5, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800e8ea:	42ab      	cmp	r3, r5
 800e8ec:	d303      	bcc.n	800e8f6 <mbedtls_mpi_shift_r+0x12>
    v1 = count & (biL - 1);
 800e8ee:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800e8f2:	d104      	bne.n	800e8fe <mbedtls_mpi_shift_r+0x1a>
 800e8f4:	b369      	cbz	r1, 800e952 <mbedtls_mpi_shift_r+0x6e>
        return mbedtls_mpi_lset( X, 0 );
 800e8f6:	2100      	movs	r1, #0
}
 800e8f8:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 800e8fa:	f7ff bee8 	b.w	800e6ce <mbedtls_mpi_lset>
    if( v0 > 0 )
 800e8fe:	b9e5      	cbnz	r5, 800e93a <mbedtls_mpi_shift_r+0x56>
    if( v1 > 0 )
 800e900:	b129      	cbz	r1, 800e90e <mbedtls_mpi_shift_r+0x2a>
 800e902:	009a      	lsls	r2, r3, #2
    mbedtls_mpi_uint r0 = 0, r1;
 800e904:	2500      	movs	r5, #0
            r1 = X->p[i - 1] << (biL - v1);
 800e906:	f1c1 0c20 	rsb	ip, r1, #32
 800e90a:	3a04      	subs	r2, #4
        for( i = X->n; i > 0; i-- )
 800e90c:	b9bb      	cbnz	r3, 800e93e <mbedtls_mpi_shift_r+0x5a>
}
 800e90e:	2000      	movs	r0, #0
 800e910:	bcf0      	pop	{r4, r5, r6, r7}
 800e912:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 800e914:	6884      	ldr	r4, [r0, #8]
 800e916:	1956      	adds	r6, r2, r5
 800e918:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800e91c:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 800e920:	3201      	adds	r2, #1
 800e922:	1b5c      	subs	r4, r3, r5
 800e924:	4294      	cmp	r4, r2
 800e926:	d8f5      	bhi.n	800e914 <mbedtls_mpi_shift_r+0x30>
 800e928:	00a2      	lsls	r2, r4, #2
            X->p[i] = 0;
 800e92a:	2500      	movs	r5, #0
        for( ; i < X->n; i++ )
 800e92c:	42a3      	cmp	r3, r4
 800e92e:	d9e7      	bls.n	800e900 <mbedtls_mpi_shift_r+0x1c>
            X->p[i] = 0;
 800e930:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 800e932:	3401      	adds	r4, #1
            X->p[i] = 0;
 800e934:	50b5      	str	r5, [r6, r2]
 800e936:	3204      	adds	r2, #4
 800e938:	e7f8      	b.n	800e92c <mbedtls_mpi_shift_r+0x48>
 800e93a:	2200      	movs	r2, #0
 800e93c:	e7f1      	b.n	800e922 <mbedtls_mpi_shift_r+0x3e>
            r1 = X->p[i - 1] << (biL - v1);
 800e93e:	6887      	ldr	r7, [r0, #8]
 800e940:	58be      	ldr	r6, [r7, r2]
            X->p[i - 1] >>= v1;
 800e942:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 800e946:	432c      	orrs	r4, r5
 800e948:	50bc      	str	r4, [r7, r2]
        for( i = X->n; i > 0; i-- )
 800e94a:	3b01      	subs	r3, #1
            r1 = X->p[i - 1] << (biL - v1);
 800e94c:	fa06 f50c 	lsl.w	r5, r6, ip
 800e950:	e7db      	b.n	800e90a <mbedtls_mpi_shift_r+0x26>
    if( v0 > 0 )
 800e952:	2b00      	cmp	r3, #0
 800e954:	d0db      	beq.n	800e90e <mbedtls_mpi_shift_r+0x2a>
 800e956:	460a      	mov	r2, r1
 800e958:	e7e3      	b.n	800e922 <mbedtls_mpi_shift_r+0x3e>

0800e95a <mbedtls_mpi_cmp_abs>:
{
 800e95a:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 800e95c:	6843      	ldr	r3, [r0, #4]
 800e95e:	009a      	lsls	r2, r3, #2
 800e960:	b933      	cbnz	r3, 800e970 <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
 800e962:	684a      	ldr	r2, [r1, #4]
 800e964:	0094      	lsls	r4, r2, #2
 800e966:	b962      	cbnz	r2, 800e982 <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
 800e968:	1c18      	adds	r0, r3, #0
 800e96a:	bf18      	it	ne
 800e96c:	2001      	movne	r0, #1
 800e96e:	e016      	b.n	800e99e <mbedtls_mpi_cmp_abs+0x44>
        if( X->p[i - 1] != 0 )
 800e970:	6884      	ldr	r4, [r0, #8]
 800e972:	4414      	add	r4, r2
 800e974:	3a04      	subs	r2, #4
 800e976:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800e97a:	2c00      	cmp	r4, #0
 800e97c:	d1f1      	bne.n	800e962 <mbedtls_mpi_cmp_abs+0x8>
    for( i = X->n; i > 0; i-- )
 800e97e:	3b01      	subs	r3, #1
 800e980:	e7ee      	b.n	800e960 <mbedtls_mpi_cmp_abs+0x6>
        if( Y->p[j - 1] != 0 )
 800e982:	688d      	ldr	r5, [r1, #8]
 800e984:	192e      	adds	r6, r5, r4
 800e986:	3c04      	subs	r4, #4
 800e988:	f856 6c04 	ldr.w	r6, [r6, #-4]
 800e98c:	b90e      	cbnz	r6, 800e992 <mbedtls_mpi_cmp_abs+0x38>
    for( j = Y->n; j > 0; j-- )
 800e98e:	3a01      	subs	r2, #1
 800e990:	e7e9      	b.n	800e966 <mbedtls_mpi_cmp_abs+0xc>
    if( i > j ) return(  1 );
 800e992:	4293      	cmp	r3, r2
 800e994:	d80d      	bhi.n	800e9b2 <mbedtls_mpi_cmp_abs+0x58>
    if( j > i ) return( -1 );
 800e996:	d30e      	bcc.n	800e9b6 <mbedtls_mpi_cmp_abs+0x5c>
 800e998:	009a      	lsls	r2, r3, #2
    for( ; i > 0; i-- )
 800e99a:	b90b      	cbnz	r3, 800e9a0 <mbedtls_mpi_cmp_abs+0x46>
    return( 0 );
 800e99c:	4618      	mov	r0, r3
}
 800e99e:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800e9a0:	3a04      	subs	r2, #4
 800e9a2:	6881      	ldr	r1, [r0, #8]
 800e9a4:	588c      	ldr	r4, [r1, r2]
 800e9a6:	58a9      	ldr	r1, [r5, r2]
 800e9a8:	428c      	cmp	r4, r1
 800e9aa:	d802      	bhi.n	800e9b2 <mbedtls_mpi_cmp_abs+0x58>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800e9ac:	d303      	bcc.n	800e9b6 <mbedtls_mpi_cmp_abs+0x5c>
    for( ; i > 0; i-- )
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	e7f3      	b.n	800e99a <mbedtls_mpi_cmp_abs+0x40>
    if( i > j ) return(  1 );
 800e9b2:	2001      	movs	r0, #1
 800e9b4:	e7f3      	b.n	800e99e <mbedtls_mpi_cmp_abs+0x44>
    if( j > i ) return( -1 );
 800e9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ba:	e7f0      	b.n	800e99e <mbedtls_mpi_cmp_abs+0x44>

0800e9bc <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 800e9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	b085      	sub	sp, #20
 800e9c2:	4616      	mov	r6, r2
 800e9c4:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 800e9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	6873      	ldr	r3, [r6, #4]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	429a      	cmp	r2, r3
{
 800e9d0:	4681      	mov	r9, r0
 800e9d2:	468b      	mov	fp, r1
    if( T->n < N->n + 1 || T->p == NULL )
 800e9d4:	d353      	bcc.n	800ea7e <mpi_montmul+0xc2>
 800e9d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9d8:	6898      	ldr	r0, [r3, #8]
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d04f      	beq.n	800ea7e <mpi_montmul+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 800e9de:	0092      	lsls	r2, r2, #2
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	f013 fca4 	bl	802232e <memset>

    d = T->p;
 800e9e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 800e9e8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d = T->p;
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 800e9f0:	f8db 3004 	ldr.w	r3, [fp, #4]
    d = T->p;
 800e9f4:	9d00      	ldr	r5, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 800e9f6:	4553      	cmp	r3, sl
 800e9f8:	bf28      	it	cs
 800e9fa:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 800e9fc:	f10a 0701 	add.w	r7, sl, #1
    m = ( B->n < n ) ? B->n : n;
 800ea00:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
 800ea02:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 800ea04:	2400      	movs	r4, #0
 800ea06:	4554      	cmp	r4, sl
 800ea08:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800ea0c:	d11b      	bne.n	800ea46 <mpi_montmul+0x8a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 800ea0e:	9b00      	ldr	r3, [sp, #0]
 800ea10:	1f39      	subs	r1, r7, #4
 800ea12:	440b      	add	r3, r1
 800ea14:	463a      	mov	r2, r7
 800ea16:	4619      	mov	r1, r3
 800ea18:	f013 fc65 	bl	80222e6 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 800ea1c:	4631      	mov	r1, r6
 800ea1e:	4648      	mov	r0, r9
 800ea20:	f7ff ff9b 	bl	800e95a <mbedtls_mpi_cmp_abs>
 800ea24:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 800ea26:	bfb3      	iteet	lt
 800ea28:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
        mpi_sub_hlp( n, N->p, A->p );
 800ea2a:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 800ea2e:	68b1      	ldrge	r1, [r6, #8]
        mpi_sub_hlp( n, A->p, T->p );
 800ea30:	689a      	ldrlt	r2, [r3, #8]
 800ea32:	bfb8      	it	lt
 800ea34:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f7ff fbbd 	bl	800e1b8 <mpi_sub_hlp>

    return( 0 );
 800ea3e:	2000      	movs	r0, #0
}
 800ea40:	b005      	add	sp, #20
 800ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800ea46:	f8db 1008 	ldr.w	r1, [fp, #8]
        u0 = A->p[i];
 800ea4a:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800ea4e:	682a      	ldr	r2, [r5, #0]
 800ea50:	680b      	ldr	r3, [r1, #0]
        mpi_mul_hlp( m, B->p, d, u0 );
 800ea52:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800ea54:	fb03 2308 	mla	r3, r3, r8, r2
 800ea58:	9a03      	ldr	r2, [sp, #12]
 800ea5a:	4353      	muls	r3, r2
 800ea5c:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
 800ea5e:	462a      	mov	r2, r5
 800ea60:	4643      	mov	r3, r8
 800ea62:	f7ff fbd3 	bl	800e20c <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 800ea66:	9b02      	ldr	r3, [sp, #8]
 800ea68:	68b1      	ldr	r1, [r6, #8]
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	4650      	mov	r0, sl
 800ea6e:	f7ff fbcd 	bl	800e20c <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 800ea72:	f845 8b04 	str.w	r8, [r5], #4
 800ea76:	2300      	movs	r3, #0
 800ea78:	51eb      	str	r3, [r5, r7]
    for( i = 0; i < n; i++ )
 800ea7a:	3401      	adds	r4, #1
 800ea7c:	e7c3      	b.n	800ea06 <mpi_montmul+0x4a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800ea7e:	f06f 0003 	mvn.w	r0, #3
 800ea82:	e7dd      	b.n	800ea40 <mpi_montmul+0x84>

0800ea84 <mbedtls_mpi_cmp_mpi>:
{
 800ea84:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 800ea86:	6843      	ldr	r3, [r0, #4]
 800ea88:	009a      	lsls	r2, r3, #2
 800ea8a:	b923      	cbnz	r3, 800ea96 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 800ea8c:	684a      	ldr	r2, [r1, #4]
 800ea8e:	0094      	lsls	r4, r2, #2
 800ea90:	b952      	cbnz	r2, 800eaa8 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 800ea92:	b99b      	cbnz	r3, 800eabc <mbedtls_mpi_cmp_mpi+0x38>
 800ea94:	e024      	b.n	800eae0 <mbedtls_mpi_cmp_mpi+0x5c>
        if( X->p[i - 1] != 0 )
 800ea96:	6884      	ldr	r4, [r0, #8]
 800ea98:	4414      	add	r4, r2
 800ea9a:	3a04      	subs	r2, #4
 800ea9c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800eaa0:	2c00      	cmp	r4, #0
 800eaa2:	d1f3      	bne.n	800ea8c <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	e7f0      	b.n	800ea8a <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 800eaa8:	688d      	ldr	r5, [r1, #8]
 800eaaa:	192e      	adds	r6, r5, r4
 800eaac:	3c04      	subs	r4, #4
 800eaae:	f856 6c04 	ldr.w	r6, [r6, #-4]
 800eab2:	b90e      	cbnz	r6, 800eab8 <mbedtls_mpi_cmp_mpi+0x34>
    for( j = Y->n; j > 0; j-- )
 800eab4:	3a01      	subs	r2, #1
 800eab6:	e7eb      	b.n	800ea90 <mbedtls_mpi_cmp_mpi+0xc>
    if( i > j ) return(  X->s );
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d902      	bls.n	800eac2 <mbedtls_mpi_cmp_mpi+0x3e>
 800eabc:	6802      	ldr	r2, [r0, #0]
}
 800eabe:	4610      	mov	r0, r2
 800eac0:	bd70      	pop	{r4, r5, r6, pc}
 800eac2:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 800eac4:	d201      	bcs.n	800eaca <mbedtls_mpi_cmp_mpi+0x46>
 800eac6:	424a      	negs	r2, r1
 800eac8:	e7f9      	b.n	800eabe <mbedtls_mpi_cmp_mpi+0x3a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800eaca:	6802      	ldr	r2, [r0, #0]
 800eacc:	2a00      	cmp	r2, #0
 800eace:	dd01      	ble.n	800ead4 <mbedtls_mpi_cmp_mpi+0x50>
 800ead0:	2900      	cmp	r1, #0
 800ead2:	db12      	blt.n	800eafa <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800ead4:	2900      	cmp	r1, #0
 800ead6:	dd01      	ble.n	800eadc <mbedtls_mpi_cmp_mpi+0x58>
 800ead8:	2a00      	cmp	r2, #0
 800eada:	db10      	blt.n	800eafe <mbedtls_mpi_cmp_mpi+0x7a>
 800eadc:	0099      	lsls	r1, r3, #2
    for( ; i > 0; i-- )
 800eade:	b90b      	cbnz	r3, 800eae4 <mbedtls_mpi_cmp_mpi+0x60>
    return( 0 );
 800eae0:	461a      	mov	r2, r3
 800eae2:	e7ec      	b.n	800eabe <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800eae4:	3904      	subs	r1, #4
 800eae6:	6884      	ldr	r4, [r0, #8]
 800eae8:	5866      	ldr	r6, [r4, r1]
 800eaea:	586c      	ldr	r4, [r5, r1]
 800eaec:	42a6      	cmp	r6, r4
 800eaee:	d8e6      	bhi.n	800eabe <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800eaf0:	d201      	bcs.n	800eaf6 <mbedtls_mpi_cmp_mpi+0x72>
 800eaf2:	4252      	negs	r2, r2
 800eaf4:	e7e3      	b.n	800eabe <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	e7f1      	b.n	800eade <mbedtls_mpi_cmp_mpi+0x5a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800eafa:	2201      	movs	r2, #1
 800eafc:	e7df      	b.n	800eabe <mbedtls_mpi_cmp_mpi+0x3a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800eafe:	f04f 32ff 	mov.w	r2, #4294967295
 800eb02:	e7dc      	b.n	800eabe <mbedtls_mpi_cmp_mpi+0x3a>

0800eb04 <mbedtls_mpi_cmp_int>:
{
 800eb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 800eb06:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800eb0a:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 800eb0e:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 800eb10:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 800eb12:	bfb4      	ite	lt
 800eb14:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb18:	2301      	movge	r3, #1
 800eb1a:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800eb1c:	a901      	add	r1, sp, #4
    Y.n = 1;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	9302      	str	r3, [sp, #8]
    Y.p = p;
 800eb22:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800eb26:	f7ff ffad 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
}
 800eb2a:	b005      	add	sp, #20
 800eb2c:	f85d fb04 	ldr.w	pc, [sp], #4

0800eb30 <mbedtls_mpi_add_abs>:
    if( X == B )
 800eb30:	4290      	cmp	r0, r2
{
 800eb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb36:	4606      	mov	r6, r0
 800eb38:	460c      	mov	r4, r1
 800eb3a:	4615      	mov	r5, r2
    if( X == B )
 800eb3c:	d002      	beq.n	800eb44 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 800eb3e:	4288      	cmp	r0, r1
 800eb40:	d133      	bne.n	800ebaa <mbedtls_mpi_add_abs+0x7a>
{
 800eb42:	462c      	mov	r4, r5
    for( j = B->n; j > 0; j-- )
 800eb44:	f8d4 8004 	ldr.w	r8, [r4, #4]
    X->s = 1;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	6033      	str	r3, [r6, #0]
 800eb4c:	ea4f 0388 	mov.w	r3, r8, lsl #2
    for( j = B->n; j > 0; j-- )
 800eb50:	f1b8 0f00 	cmp.w	r8, #0
 800eb54:	d131      	bne.n	800ebba <mbedtls_mpi_add_abs+0x8a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800eb56:	4641      	mov	r1, r8
 800eb58:	4630      	mov	r0, r6
 800eb5a:	f7ff fceb 	bl	800e534 <mbedtls_mpi_grow>
 800eb5e:	4607      	mov	r7, r0
 800eb60:	bb40      	cbnz	r0, 800ebb4 <mbedtls_mpi_add_abs+0x84>
    o = B->p; p = X->p; c = 0;
 800eb62:	68b3      	ldr	r3, [r6, #8]
 800eb64:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	45a8      	cmp	r8, r5
 800eb70:	d12d      	bne.n	800ebce <mbedtls_mpi_add_abs+0x9e>
 800eb72:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
 800eb76:	b1ec      	cbz	r4, 800ebb4 <mbedtls_mpi_add_abs+0x84>
        if( i >= X->n )
 800eb78:	6872      	ldr	r2, [r6, #4]
 800eb7a:	42aa      	cmp	r2, r5
 800eb7c:	f105 0801 	add.w	r8, r5, #1
 800eb80:	d808      	bhi.n	800eb94 <mbedtls_mpi_add_abs+0x64>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800eb82:	4641      	mov	r1, r8
 800eb84:	4630      	mov	r0, r6
 800eb86:	f7ff fcd5 	bl	800e534 <mbedtls_mpi_grow>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d131      	bne.n	800ebf2 <mbedtls_mpi_add_abs+0xc2>
            p = X->p + i;
 800eb8e:	68b3      	ldr	r3, [r6, #8]
 800eb90:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	1914      	adds	r4, r2, r4
 800eb98:	f04f 0100 	mov.w	r1, #0
 800eb9c:	bf28      	it	cs
 800eb9e:	2101      	movcs	r1, #1
        *p += c; c = ( *p < c ); i++; p++;
 800eba0:	f843 4b04 	str.w	r4, [r3], #4
 800eba4:	4645      	mov	r5, r8
 800eba6:	460c      	mov	r4, r1
 800eba8:	e7e5      	b.n	800eb76 <mbedtls_mpi_add_abs+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800ebaa:	f7ff fd31 	bl	800e610 <mbedtls_mpi_copy>
 800ebae:	4607      	mov	r7, r0
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d0c6      	beq.n	800eb42 <mbedtls_mpi_add_abs+0x12>
}
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 800ebba:	68a2      	ldr	r2, [r4, #8]
 800ebbc:	441a      	add	r2, r3
 800ebbe:	3b04      	subs	r3, #4
 800ebc0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800ebc4:	2a00      	cmp	r2, #0
 800ebc6:	d1c6      	bne.n	800eb56 <mbedtls_mpi_add_abs+0x26>
    for( j = B->n; j > 0; j-- )
 800ebc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebcc:	e7c0      	b.n	800eb50 <mbedtls_mpi_add_abs+0x20>
 800ebce:	680a      	ldr	r2, [r1, #0]
        tmp= *o;
 800ebd0:	f85e 0025 	ldr.w	r0, [lr, r5, lsl #2]
 800ebd4:	1914      	adds	r4, r2, r4
 800ebd6:	f04f 0c00 	mov.w	ip, #0
 800ebda:	bf28      	it	cs
 800ebdc:	f04f 0c01 	movcs.w	ip, #1
 800ebe0:	1824      	adds	r4, r4, r0
        *p += tmp; c += ( *p < tmp );
 800ebe2:	f841 4b04 	str.w	r4, [r1], #4
 800ebe6:	bf2c      	ite	cs
 800ebe8:	2401      	movcs	r4, #1
 800ebea:	2400      	movcc	r4, #0
 800ebec:	4464      	add	r4, ip
    for( i = 0; i < j; i++, o++, p++ )
 800ebee:	3501      	adds	r5, #1
 800ebf0:	e7bd      	b.n	800eb6e <mbedtls_mpi_add_abs+0x3e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800ebf2:	4607      	mov	r7, r0
    return( ret );
 800ebf4:	e7de      	b.n	800ebb4 <mbedtls_mpi_add_abs+0x84>

0800ebf6 <mbedtls_mpi_sub_abs>:
{
 800ebf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf8:	460f      	mov	r7, r1
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800ebfe:	4611      	mov	r1, r2
 800ec00:	4638      	mov	r0, r7
{
 800ec02:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800ec04:	f7ff fea9 	bl	800e95a <mbedtls_mpi_cmp_abs>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	db2f      	blt.n	800ec6c <mbedtls_mpi_sub_abs+0x76>
    X->n = 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	2201      	movs	r2, #1
    if( X == B )
 800ec10:	42b5      	cmp	r5, r6
    X->n = 0;
 800ec12:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 800ec16:	9303      	str	r3, [sp, #12]
    if( X == B )
 800ec18:	d106      	bne.n	800ec28 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	a801      	add	r0, sp, #4
 800ec1e:	f7ff fcf7 	bl	800e610 <mbedtls_mpi_copy>
 800ec22:	4604      	mov	r4, r0
 800ec24:	b9a0      	cbnz	r0, 800ec50 <mbedtls_mpi_sub_abs+0x5a>
        B = &TB;
 800ec26:	ad01      	add	r5, sp, #4
    if( X != A )
 800ec28:	42b7      	cmp	r7, r6
 800ec2a:	d10a      	bne.n	800ec42 <mbedtls_mpi_sub_abs+0x4c>
    for( n = B->n; n > 0; n-- )
 800ec2c:	6868      	ldr	r0, [r5, #4]
 800ec2e:	68a9      	ldr	r1, [r5, #8]
    X->s = 1;
 800ec30:	2301      	movs	r3, #1
 800ec32:	6033      	str	r3, [r6, #0]
 800ec34:	0083      	lsls	r3, r0, #2
    for( n = B->n; n > 0; n-- )
 800ec36:	b988      	cbnz	r0, 800ec5c <mbedtls_mpi_sub_abs+0x66>
    mpi_sub_hlp( n, B->p, X->p );
 800ec38:	68b2      	ldr	r2, [r6, #8]
 800ec3a:	f7ff fabd 	bl	800e1b8 <mpi_sub_hlp>
    ret = 0;
 800ec3e:	2400      	movs	r4, #0
 800ec40:	e006      	b.n	800ec50 <mbedtls_mpi_sub_abs+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800ec42:	4639      	mov	r1, r7
 800ec44:	4630      	mov	r0, r6
 800ec46:	f7ff fce3 	bl	800e610 <mbedtls_mpi_copy>
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d0ed      	beq.n	800ec2c <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 800ec50:	a801      	add	r0, sp, #4
 800ec52:	f7ff fc55 	bl	800e500 <mbedtls_mpi_free>
}
 800ec56:	4620      	mov	r0, r4
 800ec58:	b005      	add	sp, #20
 800ec5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 800ec5c:	18ca      	adds	r2, r1, r3
 800ec5e:	3b04      	subs	r3, #4
 800ec60:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800ec64:	2a00      	cmp	r2, #0
 800ec66:	d1e7      	bne.n	800ec38 <mbedtls_mpi_sub_abs+0x42>
    for( n = B->n; n > 0; n-- )
 800ec68:	3801      	subs	r0, #1
 800ec6a:	e7e4      	b.n	800ec36 <mbedtls_mpi_sub_abs+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800ec6c:	f06f 0409 	mvn.w	r4, #9
 800ec70:	e7f1      	b.n	800ec56 <mbedtls_mpi_sub_abs+0x60>

0800ec72 <mbedtls_mpi_add_mpi>:
{
 800ec72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800ec74:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 800ec76:	6813      	ldr	r3, [r2, #0]
 800ec78:	4363      	muls	r3, r4
{
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	460f      	mov	r7, r1
 800ec7e:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 800ec80:	d516      	bpl.n	800ecb0 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800ec82:	4611      	mov	r1, r2
 800ec84:	4638      	mov	r0, r7
 800ec86:	f7ff fe68 	bl	800e95a <mbedtls_mpi_cmp_abs>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	db06      	blt.n	800ec9c <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800ec8e:	4632      	mov	r2, r6
 800ec90:	4639      	mov	r1, r7
 800ec92:	4628      	mov	r0, r5
 800ec94:	f7ff ffaf 	bl	800ebf6 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800ec98:	b140      	cbz	r0, 800ecac <mbedtls_mpi_add_mpi+0x3a>
}
 800ec9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800ec9c:	463a      	mov	r2, r7
 800ec9e:	4631      	mov	r1, r6
 800eca0:	4628      	mov	r0, r5
 800eca2:	f7ff ffa8 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d1f7      	bne.n	800ec9a <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 800ecaa:	4264      	negs	r4, r4
        X->s = s;
 800ecac:	602c      	str	r4, [r5, #0]
    return( ret );
 800ecae:	e7f4      	b.n	800ec9a <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800ecb0:	f7ff ff3e 	bl	800eb30 <mbedtls_mpi_add_abs>
 800ecb4:	e7f0      	b.n	800ec98 <mbedtls_mpi_add_mpi+0x26>

0800ecb6 <mbedtls_mpi_sub_mpi>:
{
 800ecb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800ecb8:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 800ecba:	6813      	ldr	r3, [r2, #0]
 800ecbc:	4363      	muls	r3, r4
 800ecbe:	2b00      	cmp	r3, #0
{
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	460f      	mov	r7, r1
 800ecc4:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 800ecc6:	dd16      	ble.n	800ecf6 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800ecc8:	4611      	mov	r1, r2
 800ecca:	4638      	mov	r0, r7
 800eccc:	f7ff fe45 	bl	800e95a <mbedtls_mpi_cmp_abs>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	db06      	blt.n	800ece2 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	4639      	mov	r1, r7
 800ecd8:	4628      	mov	r0, r5
 800ecda:	f7ff ff8c 	bl	800ebf6 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800ecde:	b140      	cbz	r0, 800ecf2 <mbedtls_mpi_sub_mpi+0x3c>
}
 800ece0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800ece2:	463a      	mov	r2, r7
 800ece4:	4631      	mov	r1, r6
 800ece6:	4628      	mov	r0, r5
 800ece8:	f7ff ff85 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d1f7      	bne.n	800ece0 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 800ecf0:	4264      	negs	r4, r4
        X->s = s;
 800ecf2:	602c      	str	r4, [r5, #0]
    return( ret );
 800ecf4:	e7f4      	b.n	800ece0 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800ecf6:	f7ff ff1b 	bl	800eb30 <mbedtls_mpi_add_abs>
 800ecfa:	e7f0      	b.n	800ecde <mbedtls_mpi_sub_mpi+0x28>

0800ecfc <mbedtls_mpi_sub_int>:
{
 800ecfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 800ecfe:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ed02:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 800ed06:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 800ed08:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 800ed0a:	bfb4      	ite	lt
 800ed0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed10:	2301      	movge	r3, #1
 800ed12:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800ed14:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800ed16:	2301      	movs	r3, #1
 800ed18:	9302      	str	r3, [sp, #8]
    _B.p = p;
 800ed1a:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800ed1e:	f7ff ffca 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
}
 800ed22:	b005      	add	sp, #20
 800ed24:	f85d fb04 	ldr.w	pc, [sp], #4

0800ed28 <mbedtls_mpi_mul_mpi>:
{
 800ed28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    X->n = 0;
 800ed2c:	2300      	movs	r3, #0
{
 800ed2e:	b086      	sub	sp, #24
 800ed30:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800ed32:	4288      	cmp	r0, r1
    X->n = 0;
 800ed34:	f04f 0201 	mov.w	r2, #1
{
 800ed38:	4680      	mov	r8, r0
 800ed3a:	460e      	mov	r6, r1
    X->n = 0;
 800ed3c:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 800ed40:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 800ed44:	e9cd 3304 	strd	r3, r3, [sp, #16]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800ed48:	d105      	bne.n	800ed56 <mbedtls_mpi_mul_mpi+0x2e>
 800ed4a:	4668      	mov	r0, sp
 800ed4c:	f7ff fc60 	bl	800e610 <mbedtls_mpi_copy>
 800ed50:	4604      	mov	r4, r0
 800ed52:	bb50      	cbnz	r0, 800edaa <mbedtls_mpi_mul_mpi+0x82>
 800ed54:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800ed56:	45a8      	cmp	r8, r5
 800ed58:	d106      	bne.n	800ed68 <mbedtls_mpi_mul_mpi+0x40>
 800ed5a:	4641      	mov	r1, r8
 800ed5c:	a803      	add	r0, sp, #12
 800ed5e:	f7ff fc57 	bl	800e610 <mbedtls_mpi_copy>
 800ed62:	4604      	mov	r4, r0
 800ed64:	bb08      	cbnz	r0, 800edaa <mbedtls_mpi_mul_mpi+0x82>
 800ed66:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 800ed68:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800ed6c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ed70:	f1b9 0f00 	cmp.w	r9, #0
 800ed74:	d123      	bne.n	800edbe <mbedtls_mpi_mul_mpi+0x96>
    for( j = B->n; j > 0; j-- )
 800ed76:	686f      	ldr	r7, [r5, #4]
 800ed78:	00bb      	lsls	r3, r7, #2
 800ed7a:	bb57      	cbnz	r7, 800edd2 <mbedtls_mpi_mul_mpi+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800ed7c:	eb09 0107 	add.w	r1, r9, r7
 800ed80:	4640      	mov	r0, r8
 800ed82:	f7ff fbd7 	bl	800e534 <mbedtls_mpi_grow>
 800ed86:	4604      	mov	r4, r0
 800ed88:	b978      	cbnz	r0, 800edaa <mbedtls_mpi_mul_mpi+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	4640      	mov	r0, r8
 800ed8e:	f7ff fc9e 	bl	800e6ce <mbedtls_mpi_lset>
 800ed92:	4604      	mov	r4, r0
 800ed94:	b948      	cbnz	r0, 800edaa <mbedtls_mpi_mul_mpi+0x82>
 800ed96:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800ed9a:	f1aa 0a04 	sub.w	sl, sl, #4
    for( i++; j > 0; j-- )
 800ed9e:	bb0f      	cbnz	r7, 800ede4 <mbedtls_mpi_mul_mpi+0xbc>
    X->s = A->s * B->s;
 800eda0:	6832      	ldr	r2, [r6, #0]
 800eda2:	682b      	ldr	r3, [r5, #0]
 800eda4:	4353      	muls	r3, r2
 800eda6:	f8c8 3000 	str.w	r3, [r8]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800edaa:	a803      	add	r0, sp, #12
 800edac:	f7ff fba8 	bl	800e500 <mbedtls_mpi_free>
 800edb0:	4668      	mov	r0, sp
 800edb2:	f7ff fba5 	bl	800e500 <mbedtls_mpi_free>
}
 800edb6:	4620      	mov	r0, r4
 800edb8:	b006      	add	sp, #24
 800edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 800edbe:	68b2      	ldr	r2, [r6, #8]
 800edc0:	441a      	add	r2, r3
 800edc2:	3b04      	subs	r3, #4
 800edc4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800edc8:	2a00      	cmp	r2, #0
 800edca:	d1d4      	bne.n	800ed76 <mbedtls_mpi_mul_mpi+0x4e>
    for( i = A->n; i > 0; i-- )
 800edcc:	f109 39ff 	add.w	r9, r9, #4294967295
 800edd0:	e7ce      	b.n	800ed70 <mbedtls_mpi_mul_mpi+0x48>
        if( B->p[j - 1] != 0 )
 800edd2:	68aa      	ldr	r2, [r5, #8]
 800edd4:	441a      	add	r2, r3
 800edd6:	3b04      	subs	r3, #4
 800edd8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800eddc:	2a00      	cmp	r2, #0
 800edde:	d1cd      	bne.n	800ed7c <mbedtls_mpi_mul_mpi+0x54>
    for( j = B->n; j > 0; j-- )
 800ede0:	3f01      	subs	r7, #1
 800ede2:	e7ca      	b.n	800ed7a <mbedtls_mpi_mul_mpi+0x52>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 800ede4:	68ab      	ldr	r3, [r5, #8]
 800ede6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800edea:	f853 300a 	ldr.w	r3, [r3, sl]
 800edee:	68b1      	ldr	r1, [r6, #8]
 800edf0:	4452      	add	r2, sl
 800edf2:	4648      	mov	r0, r9
 800edf4:	f7ff fa0a 	bl	800e20c <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 800edf8:	3f01      	subs	r7, #1
 800edfa:	e7ce      	b.n	800ed9a <mbedtls_mpi_mul_mpi+0x72>

0800edfc <mbedtls_mpi_mul_int>:
{
 800edfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 800edfe:	2301      	movs	r3, #1
    p[0] = b;
 800ee00:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800ee02:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800ee04:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 800ee08:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800ee0c:	f7ff ff8c 	bl	800ed28 <mbedtls_mpi_mul_mpi>
}
 800ee10:	b005      	add	sp, #20
 800ee12:	f85d fb04 	ldr.w	pc, [sp], #4

0800ee16 <mbedtls_mpi_div_mpi>:
{
 800ee16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1a:	b099      	sub	sp, #100	; 0x64
 800ee1c:	460f      	mov	r7, r1
 800ee1e:	9001      	str	r0, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800ee20:	2100      	movs	r1, #0
 800ee22:	4618      	mov	r0, r3
{
 800ee24:	4690      	mov	r8, r2
 800ee26:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800ee28:	f7ff fe6c 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	f000 81a5 	beq.w	800f17c <mbedtls_mpi_div_mpi+0x366>
    X->n = 0;
 800ee32:	2400      	movs	r4, #0
 800ee34:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800ee36:	9903      	ldr	r1, [sp, #12]
    X->p = NULL;
 800ee38:	9417      	str	r4, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800ee3a:	4640      	mov	r0, r8
    X->n = 0;
 800ee3c:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    X->s = 1;
 800ee40:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    X->p = NULL;
 800ee44:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    X->n = 0;
 800ee48:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
    X->s = 1;
 800ee4c:	e9cd 4511 	strd	r4, r5, [sp, #68]	; 0x44
    X->p = NULL;
 800ee50:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
    X->n = 0;
 800ee54:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800ee58:	f7ff fd7f 	bl	800e95a <mbedtls_mpi_cmp_abs>
 800ee5c:	42a0      	cmp	r0, r4
 800ee5e:	da26      	bge.n	800eeae <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800ee60:	9b01      	ldr	r3, [sp, #4]
 800ee62:	b92b      	cbnz	r3, 800ee70 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800ee64:	b9df      	cbnz	r7, 800ee9e <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 800ee66:	2400      	movs	r4, #0
}
 800ee68:	4620      	mov	r0, r4
 800ee6a:	b019      	add	sp, #100	; 0x64
 800ee6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800ee70:	4621      	mov	r1, r4
 800ee72:	9801      	ldr	r0, [sp, #4]
 800ee74:	f7ff fc2b 	bl	800e6ce <mbedtls_mpi_lset>
 800ee78:	4604      	mov	r4, r0
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d0f2      	beq.n	800ee64 <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800ee7e:	a809      	add	r0, sp, #36	; 0x24
 800ee80:	f7ff fb3e 	bl	800e500 <mbedtls_mpi_free>
 800ee84:	a80c      	add	r0, sp, #48	; 0x30
 800ee86:	f7ff fb3b 	bl	800e500 <mbedtls_mpi_free>
 800ee8a:	a80f      	add	r0, sp, #60	; 0x3c
 800ee8c:	f7ff fb38 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800ee90:	a812      	add	r0, sp, #72	; 0x48
 800ee92:	f7ff fb35 	bl	800e500 <mbedtls_mpi_free>
 800ee96:	a815      	add	r0, sp, #84	; 0x54
 800ee98:	f7ff fb32 	bl	800e500 <mbedtls_mpi_free>
    return( ret );
 800ee9c:	e7e4      	b.n	800ee68 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800ee9e:	4641      	mov	r1, r8
 800eea0:	4638      	mov	r0, r7
 800eea2:	f7ff fbb5 	bl	800e610 <mbedtls_mpi_copy>
 800eea6:	4604      	mov	r4, r0
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d1e8      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
 800eeac:	e7db      	b.n	800ee66 <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800eeae:	4641      	mov	r1, r8
 800eeb0:	a809      	add	r0, sp, #36	; 0x24
 800eeb2:	f7ff fbad 	bl	800e610 <mbedtls_mpi_copy>
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d1e0      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800eebc:	ae0c      	add	r6, sp, #48	; 0x30
 800eebe:	9903      	ldr	r1, [sp, #12]
 800eec0:	4630      	mov	r0, r6
 800eec2:	f7ff fba5 	bl	800e610 <mbedtls_mpi_copy>
 800eec6:	4604      	mov	r4, r0
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d1d8      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800eecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
    X.s = Y.s = 1;
 800eed0:	950c      	str	r5, [sp, #48]	; 0x30
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800eed2:	3102      	adds	r1, #2
 800eed4:	a80f      	add	r0, sp, #60	; 0x3c
    X.s = Y.s = 1;
 800eed6:	9509      	str	r5, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800eed8:	f7ff fb2c 	bl	800e534 <mbedtls_mpi_grow>
 800eedc:	4604      	mov	r4, r0
 800eede:	2800      	cmp	r0, #0
 800eee0:	d1cd      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800eee2:	4601      	mov	r1, r0
 800eee4:	a80f      	add	r0, sp, #60	; 0x3c
 800eee6:	f7ff fbf2 	bl	800e6ce <mbedtls_mpi_lset>
 800eeea:	4604      	mov	r4, r0
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d1c6      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800eef0:	2102      	movs	r1, #2
 800eef2:	a812      	add	r0, sp, #72	; 0x48
 800eef4:	f7ff fb1e 	bl	800e534 <mbedtls_mpi_grow>
 800eef8:	4604      	mov	r4, r0
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d1bf      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800eefe:	2103      	movs	r1, #3
 800ef00:	a815      	add	r0, sp, #84	; 0x54
 800ef02:	f7ff fb17 	bl	800e534 <mbedtls_mpi_grow>
 800ef06:	4604      	mov	r4, r0
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d1b8      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f7ff fc25 	bl	800e75c <mbedtls_mpi_bitlen>
 800ef12:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 800ef16:	281f      	cmp	r0, #31
 800ef18:	d076      	beq.n	800f008 <mbedtls_mpi_div_mpi+0x1f2>
        k = biL - 1 - k;
 800ef1a:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800ef1e:	4619      	mov	r1, r3
 800ef20:	a809      	add	r0, sp, #36	; 0x24
        k = biL - 1 - k;
 800ef22:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800ef24:	f7ff fc96 	bl	800e854 <mbedtls_mpi_shift_l>
 800ef28:	4604      	mov	r4, r0
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d1a7      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800ef2e:	9902      	ldr	r1, [sp, #8]
 800ef30:	4630      	mov	r0, r6
 800ef32:	f7ff fc8f 	bl	800e854 <mbedtls_mpi_shift_l>
 800ef36:	4604      	mov	r4, r0
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d1a0      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 800ef3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    t = Y.n - 1;
 800ef3e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    n = X.n - 1;
 800ef42:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 800ef46:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800ef4a:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 800ef4e:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800ef50:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800ef54:	4619      	mov	r1, r3
 800ef56:	4630      	mov	r0, r6
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	f7ff fc7b 	bl	800e854 <mbedtls_mpi_shift_l>
 800ef5e:	4604      	mov	r4, r0
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d18c      	bne.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 800ef64:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800ef68:	4631      	mov	r1, r6
 800ef6a:	a809      	add	r0, sp, #36	; 0x24
 800ef6c:	f7ff fd8a 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	da4b      	bge.n	800f00c <mbedtls_mpi_div_mpi+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800ef74:	9904      	ldr	r1, [sp, #16]
 800ef76:	4630      	mov	r0, r6
 800ef78:	f7ff fcb4 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	f47f af7d 	bne.w	800ee7e <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 800ef84:	9b00      	ldr	r3, [sp, #0]
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800ef8a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 800ef8e:	3b02      	subs	r3, #2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	9307      	str	r3, [sp, #28]
 800ef94:	f06f 0303 	mvn.w	r3, #3
 800ef98:	fb03 f30a 	mul.w	r3, r3, sl
 800ef9c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800efa0:	3d01      	subs	r5, #1
 800efa2:	9306      	str	r3, [sp, #24]
 800efa4:	ebca 63ca 	rsb	r3, sl, sl, lsl #27
 800efa8:	00ad      	lsls	r5, r5, #2
 800efaa:	9305      	str	r3, [sp, #20]
    for( i = n; i > t ; i-- )
 800efac:	9b00      	ldr	r3, [sp, #0]
 800efae:	4599      	cmp	r9, r3
 800efb0:	d83b      	bhi.n	800f02a <mbedtls_mpi_div_mpi+0x214>
    if( Q != NULL )
 800efb2:	9b01      	ldr	r3, [sp, #4]
 800efb4:	b15b      	cbz	r3, 800efce <mbedtls_mpi_div_mpi+0x1b8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800efb6:	a90f      	add	r1, sp, #60	; 0x3c
 800efb8:	4618      	mov	r0, r3
 800efba:	f7ff fb29 	bl	800e610 <mbedtls_mpi_copy>
 800efbe:	bb08      	cbnz	r0, 800f004 <mbedtls_mpi_div_mpi+0x1ee>
        Q->s = A->s * B->s;
 800efc0:	9b03      	ldr	r3, [sp, #12]
 800efc2:	f8d8 2000 	ldr.w	r2, [r8]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4353      	muls	r3, r2
 800efca:	9a01      	ldr	r2, [sp, #4]
 800efcc:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 800efce:	2f00      	cmp	r7, #0
 800efd0:	f43f af55 	beq.w	800ee7e <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800efd4:	9902      	ldr	r1, [sp, #8]
 800efd6:	a809      	add	r0, sp, #36	; 0x24
 800efd8:	f7ff fc84 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800efdc:	b990      	cbnz	r0, 800f004 <mbedtls_mpi_div_mpi+0x1ee>
        X.s = A->s;
 800efde:	f8d8 3000 	ldr.w	r3, [r8]
 800efe2:	9309      	str	r3, [sp, #36]	; 0x24
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800efe4:	a909      	add	r1, sp, #36	; 0x24
 800efe6:	4638      	mov	r0, r7
 800efe8:	f7ff fb12 	bl	800e610 <mbedtls_mpi_copy>
 800efec:	4601      	mov	r1, r0
 800efee:	2800      	cmp	r0, #0
 800eff0:	f040 80c2 	bne.w	800f178 <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800eff4:	4638      	mov	r0, r7
 800eff6:	f7ff fd85 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800effa:	2800      	cmp	r0, #0
 800effc:	f47f af3f 	bne.w	800ee7e <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 800f000:	2301      	movs	r3, #1
 800f002:	603b      	str	r3, [r7, #0]
cleanup:
 800f004:	4604      	mov	r4, r0
 800f006:	e73a      	b.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 800f008:	9402      	str	r4, [sp, #8]
 800f00a:	e797      	b.n	800ef3c <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 800f00c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f00e:	f851 200b 	ldr.w	r2, [r1, fp]
 800f012:	3201      	adds	r2, #1
 800f014:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800f018:	a909      	add	r1, sp, #36	; 0x24
 800f01a:	4632      	mov	r2, r6
 800f01c:	4608      	mov	r0, r1
 800f01e:	f7ff fe4a 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f022:	4604      	mov	r4, r0
 800f024:	2800      	cmp	r0, #0
 800f026:	d09f      	beq.n	800ef68 <mbedtls_mpi_div_mpi+0x152>
cleanup:
 800f028:	e729      	b.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 800f02a:	9804      	ldr	r0, [sp, #16]
 800f02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f02e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f030:	594b      	ldr	r3, [r1, r5]
 800f032:	5812      	ldr	r2, [r2, r0]
 800f034:	9806      	ldr	r0, [sp, #24]
 800f036:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800f03a:	4293      	cmp	r3, r2
 800f03c:	eb00 0605 	add.w	r6, r0, r5
 800f040:	f1a5 0b04 	sub.w	fp, r5, #4
 800f044:	d37e      	bcc.n	800f144 <mbedtls_mpi_div_mpi+0x32e>
            Z.p[i - t - 1] = ~0;
 800f046:	f04f 33ff 	mov.w	r3, #4294967295
 800f04a:	f84a 3006 	str.w	r3, [sl, r6]
        Z.p[i - t - 1]++;
 800f04e:	f85a 3006 	ldr.w	r3, [sl, r6]
 800f052:	3301      	adds	r3, #1
 800f054:	f84a 3006 	str.w	r3, [sl, r6]
 800f058:	f1a5 0a08 	sub.w	sl, r5, #8
            Z.p[i - t - 1]--;
 800f05c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f05e:	5993      	ldr	r3, [r2, r6]
 800f060:	3b01      	subs	r3, #1
 800f062:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800f064:	2100      	movs	r1, #0
 800f066:	a812      	add	r0, sp, #72	; 0x48
 800f068:	f7ff fb31 	bl	800e6ce <mbedtls_mpi_lset>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d1c9      	bne.n	800f004 <mbedtls_mpi_div_mpi+0x1ee>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f070:	9b00      	ldr	r3, [sp, #0]
 800f072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f074:	2b00      	cmp	r3, #0
 800f076:	d07d      	beq.n	800f174 <mbedtls_mpi_div_mpi+0x35e>
 800f078:	9b07      	ldr	r3, [sp, #28]
 800f07a:	58d1      	ldr	r1, [r2, r3]
 800f07c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f07e:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 800f080:	9904      	ldr	r1, [sp, #16]
 800f082:	5852      	ldr	r2, [r2, r1]
 800f084:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800f086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f088:	a912      	add	r1, sp, #72	; 0x48
 800f08a:	4608      	mov	r0, r1
 800f08c:	599a      	ldr	r2, [r3, r6]
 800f08e:	f7ff feb5 	bl	800edfc <mbedtls_mpi_mul_int>
 800f092:	4601      	mov	r1, r0
 800f094:	2800      	cmp	r0, #0
 800f096:	d16f      	bne.n	800f178 <mbedtls_mpi_div_mpi+0x362>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800f098:	a815      	add	r0, sp, #84	; 0x54
 800f09a:	f7ff fb18 	bl	800e6ce <mbedtls_mpi_lset>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	d1b0      	bne.n	800f004 <mbedtls_mpi_div_mpi+0x1ee>
 800f0a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0a6:	f1b9 0f01 	cmp.w	r9, #1
 800f0aa:	bf18      	it	ne
 800f0ac:	f852 000a 	ldrne.w	r0, [r2, sl]
 800f0b0:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800f0b2:	f852 100b 	ldr.w	r1, [r2, fp]
 800f0b6:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 800f0b8:	5952      	ldr	r2, [r2, r5]
 800f0ba:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800f0bc:	a915      	add	r1, sp, #84	; 0x54
 800f0be:	a812      	add	r0, sp, #72	; 0x48
 800f0c0:	f7ff fce0 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	dcc9      	bgt.n	800f05c <mbedtls_mpi_div_mpi+0x246>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800f0c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0ca:	a90c      	add	r1, sp, #48	; 0x30
 800f0cc:	599a      	ldr	r2, [r3, r6]
 800f0ce:	a812      	add	r0, sp, #72	; 0x48
 800f0d0:	f7ff fe94 	bl	800edfc <mbedtls_mpi_mul_int>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d195      	bne.n	800f004 <mbedtls_mpi_div_mpi+0x1ee>
 800f0d8:	9b05      	ldr	r3, [sp, #20]
 800f0da:	eb03 0a09 	add.w	sl, r3, r9
 800f0de:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800f0e2:	4651      	mov	r1, sl
 800f0e4:	a812      	add	r0, sp, #72	; 0x48
 800f0e6:	f7ff fbb5 	bl	800e854 <mbedtls_mpi_shift_l>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d18a      	bne.n	800f004 <mbedtls_mpi_div_mpi+0x1ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800f0ee:	a909      	add	r1, sp, #36	; 0x24
 800f0f0:	4608      	mov	r0, r1
 800f0f2:	aa12      	add	r2, sp, #72	; 0x48
 800f0f4:	f7ff fddf 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f0f8:	4601      	mov	r1, r0
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d13c      	bne.n	800f178 <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800f0fe:	a809      	add	r0, sp, #36	; 0x24
 800f100:	f7ff fd00 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f104:	2800      	cmp	r0, #0
 800f106:	da19      	bge.n	800f13c <mbedtls_mpi_div_mpi+0x326>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800f108:	a90c      	add	r1, sp, #48	; 0x30
 800f10a:	a812      	add	r0, sp, #72	; 0x48
 800f10c:	f7ff fa80 	bl	800e610 <mbedtls_mpi_copy>
 800f110:	2800      	cmp	r0, #0
 800f112:	f47f af77 	bne.w	800f004 <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800f116:	4651      	mov	r1, sl
 800f118:	a812      	add	r0, sp, #72	; 0x48
 800f11a:	f7ff fb9b 	bl	800e854 <mbedtls_mpi_shift_l>
 800f11e:	2800      	cmp	r0, #0
 800f120:	f47f af70 	bne.w	800f004 <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800f124:	a909      	add	r1, sp, #36	; 0x24
 800f126:	aa12      	add	r2, sp, #72	; 0x48
 800f128:	4608      	mov	r0, r1
 800f12a:	f7ff fda2 	bl	800ec72 <mbedtls_mpi_add_mpi>
 800f12e:	2800      	cmp	r0, #0
 800f130:	f47f af68 	bne.w	800f004 <mbedtls_mpi_div_mpi+0x1ee>
            Z.p[i - t - 1]--;
 800f134:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f136:	5993      	ldr	r3, [r2, r6]
 800f138:	3b01      	subs	r3, #1
 800f13a:	5193      	str	r3, [r2, r6]
    for( i = n; i > t ; i-- )
 800f13c:	f109 39ff 	add.w	r9, r9, #4294967295
 800f140:	3d04      	subs	r5, #4
 800f142:	e733      	b.n	800efac <mbedtls_mpi_div_mpi+0x196>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f144:	f851 c00b 	ldr.w	ip, [r1, fp]
    if( 0 == d || u1 >= d )
 800f148:	b18a      	cbz	r2, 800f16e <mbedtls_mpi_div_mpi+0x358>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 800f14a:	4619      	mov	r1, r3
 800f14c:	2300      	movs	r3, #0
 800f14e:	4618      	mov	r0, r3
    quotient = dividend / d;
 800f150:	ea40 000c 	orr.w	r0, r0, ip
 800f154:	f7f1 fda8 	bl	8000ca8 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
 800f158:	2300      	movs	r3, #0
 800f15a:	f04f 32ff 	mov.w	r2, #4294967295
 800f15e:	428b      	cmp	r3, r1
 800f160:	bf08      	it	eq
 800f162:	4282      	cmpeq	r2, r0
 800f164:	d200      	bcs.n	800f168 <mbedtls_mpi_div_mpi+0x352>
 800f166:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f168:	f84a 0006 	str.w	r0, [sl, r6]
 800f16c:	e76f      	b.n	800f04e <mbedtls_mpi_div_mpi+0x238>
        return ( ~0 );
 800f16e:	f04f 30ff 	mov.w	r0, #4294967295
 800f172:	e7f9      	b.n	800f168 <mbedtls_mpi_div_mpi+0x352>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f174:	9900      	ldr	r1, [sp, #0]
 800f176:	e781      	b.n	800f07c <mbedtls_mpi_div_mpi+0x266>
cleanup:
 800f178:	460c      	mov	r4, r1
 800f17a:	e680      	b.n	800ee7e <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800f17c:	f06f 040b 	mvn.w	r4, #11
 800f180:	e672      	b.n	800ee68 <mbedtls_mpi_div_mpi+0x52>

0800f182 <mbedtls_mpi_mod_mpi>:
{
 800f182:	b570      	push	{r4, r5, r6, lr}
 800f184:	4604      	mov	r4, r0
 800f186:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f188:	4610      	mov	r0, r2
 800f18a:	2100      	movs	r1, #0
{
 800f18c:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f18e:	f7ff fcb9 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f192:	2800      	cmp	r0, #0
 800f194:	db24      	blt.n	800f1e0 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800f196:	462a      	mov	r2, r5
 800f198:	4633      	mov	r3, r6
 800f19a:	4621      	mov	r1, r4
 800f19c:	2000      	movs	r0, #0
 800f19e:	f7ff fe3a 	bl	800ee16 <mbedtls_mpi_div_mpi>
 800f1a2:	4605      	mov	r5, r0
 800f1a4:	b138      	cbz	r0, 800f1b6 <mbedtls_mpi_mod_mpi+0x34>
}
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800f1aa:	4632      	mov	r2, r6
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f7ff fd5f 	bl	800ec72 <mbedtls_mpi_add_mpi>
 800f1b4:	b990      	cbnz	r0, 800f1dc <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7ff fca3 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	dbf3      	blt.n	800f1aa <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f7ff fc5d 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	dbeb      	blt.n	800f1a6 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800f1ce:	4632      	mov	r2, r6
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f7ff fd6f 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d0f2      	beq.n	800f1c2 <mbedtls_mpi_mod_mpi+0x40>
 800f1dc:	4605      	mov	r5, r0
 800f1de:	e7e2      	b.n	800f1a6 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800f1e0:	f06f 0509 	mvn.w	r5, #9
 800f1e4:	e7df      	b.n	800f1a6 <mbedtls_mpi_mod_mpi+0x24>

0800f1e6 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 800f1e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ea:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	2100      	movs	r1, #0
{
 800f1f6:	9203      	str	r2, [sp, #12]
 800f1f8:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f1fa:	f7ff fc83 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	f2c0 8225 	blt.w	800f64e <mbedtls_mpi_exp_mod+0x468>
 800f204:	68ab      	ldr	r3, [r5, #8]
 800f206:	f8d3 8000 	ldr.w	r8, [r3]
 800f20a:	f018 0f01 	tst.w	r8, #1
 800f20e:	f000 821e 	beq.w	800f64e <mbedtls_mpi_exp_mod+0x468>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 800f212:	2100      	movs	r1, #0
 800f214:	9803      	ldr	r0, [sp, #12]
 800f216:	f7ff fc75 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	f2c0 8217 	blt.w	800f64e <mbedtls_mpi_exp_mod+0x468>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 800f220:	f108 0402 	add.w	r4, r8, #2
 800f224:	0064      	lsls	r4, r4, #1
 800f226:	f004 0408 	and.w	r4, r4, #8
 800f22a:	4444      	add	r4, r8
 800f22c:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
 800f22e:	fb04 f308 	mul.w	r3, r4, r8
 800f232:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
 800f236:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 800f238:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 800f23c:	d1f7      	bne.n	800f22e <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 800f23e:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 800f240:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f244:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
 800f246:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
 800f24a:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
 800f24e:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
 800f252:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
 800f256:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 800f258:	f013 f869 	bl	802232e <memset>

    i = mbedtls_mpi_bitlen( E );
 800f25c:	9803      	ldr	r0, [sp, #12]
 800f25e:	f7ff fa7d 	bl	800e75c <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f262:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 800f266:	f080 80e2 	bcs.w	800f42e <mbedtls_mpi_exp_mod+0x248>
 800f26a:	28ef      	cmp	r0, #239	; 0xef
 800f26c:	f200 80e2 	bhi.w	800f434 <mbedtls_mpi_exp_mod+0x24e>
 800f270:	284f      	cmp	r0, #79	; 0x4f
 800f272:	f200 80e2 	bhi.w	800f43a <mbedtls_mpi_exp_mod+0x254>
 800f276:	2818      	cmp	r0, #24
 800f278:	bf34      	ite	cc
 800f27a:	f04f 0b01 	movcc.w	fp, #1
 800f27e:	f04f 0b03 	movcs.w	fp, #3
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 800f282:	686b      	ldr	r3, [r5, #4]
 800f284:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800f288:	4641      	mov	r1, r8
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7ff f952 	bl	800e534 <mbedtls_mpi_grow>
 800f290:	4603      	mov	r3, r0
 800f292:	2800      	cmp	r0, #0
 800f294:	f040 8163 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800f298:	4641      	mov	r1, r8
 800f29a:	a817      	add	r0, sp, #92	; 0x5c
 800f29c:	f7ff f94a 	bl	800e534 <mbedtls_mpi_grow>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f040 815b 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800f2a8:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800f2ac:	a80b      	add	r0, sp, #44	; 0x2c
 800f2ae:	f7ff f941 	bl	800e534 <mbedtls_mpi_grow>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	f040 8152 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	9304      	str	r3, [sp, #16]
    if( neg )
 800f2be:	3301      	adds	r3, #1
 800f2c0:	d10a      	bne.n	800f2d8 <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	a80e      	add	r0, sp, #56	; 0x38
 800f2c6:	f7ff f9a3 	bl	800e610 <mbedtls_mpi_copy>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	f040 8146 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
        Apos.s = 1;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 800f2d6:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 800f2d8:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f2dc:	b11b      	cbz	r3, 800f2e6 <mbedtls_mpi_exp_mod+0x100>
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	f040 80ad 	bne.w	800f440 <mbedtls_mpi_exp_mod+0x25a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	a808      	add	r0, sp, #32
 800f2ea:	f7ff f9f0 	bl	800e6ce <mbedtls_mpi_lset>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	f040 8134 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800f2f6:	6869      	ldr	r1, [r5, #4]
 800f2f8:	a808      	add	r0, sp, #32
 800f2fa:	0189      	lsls	r1, r1, #6
 800f2fc:	f7ff faaa 	bl	800e854 <mbedtls_mpi_shift_l>
 800f300:	4603      	mov	r3, r0
 800f302:	2800      	cmp	r0, #0
 800f304:	f040 812b 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800f308:	a908      	add	r1, sp, #32
 800f30a:	462a      	mov	r2, r5
 800f30c:	4608      	mov	r0, r1
 800f30e:	f7ff ff38 	bl	800f182 <mbedtls_mpi_mod_mpi>
 800f312:	4603      	mov	r3, r0
 800f314:	2800      	cmp	r0, #0
 800f316:	f040 8122 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>

        if( _RR != NULL )
 800f31a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f31e:	b13b      	cbz	r3, 800f330 <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 800f320:	ab08      	add	r3, sp, #32
 800f322:	cb03      	ldmia	r3!, {r0, r1}
 800f324:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f328:	6010      	str	r0, [r2, #0]
 800f32a:	6818      	ldr	r0, [r3, #0]
 800f32c:	6051      	str	r1, [r2, #4]
 800f32e:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 800f330:	4629      	mov	r1, r5
 800f332:	4638      	mov	r0, r7
 800f334:	f7ff fba6 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 800f338:	2800      	cmp	r0, #0
 800f33a:	f2c0 808a 	blt.w	800f452 <mbedtls_mpi_exp_mod+0x26c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 800f33e:	462a      	mov	r2, r5
 800f340:	4639      	mov	r1, r7
 800f342:	a817      	add	r0, sp, #92	; 0x5c
 800f344:	f7ff ff1d 	bl	800f182 <mbedtls_mpi_mod_mpi>
 800f348:	4603      	mov	r3, r0
 800f34a:	2800      	cmp	r0, #0
 800f34c:	f040 8107 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
    *mm = ~x + 1;
 800f350:	4264      	negs	r4, r4
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800f352:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 800f356:	4623      	mov	r3, r4
 800f358:	f8cd 9000 	str.w	r9, [sp]
 800f35c:	462a      	mov	r2, r5
 800f35e:	a908      	add	r1, sp, #32
 800f360:	a817      	add	r0, sp, #92	; 0x5c
 800f362:	f7ff fb2b 	bl	800e9bc <mpi_montmul>
 800f366:	4603      	mov	r3, r0
 800f368:	2800      	cmp	r0, #0
 800f36a:	f040 80f8 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800f36e:	a908      	add	r1, sp, #32
 800f370:	4630      	mov	r0, r6
 800f372:	f7ff f94d 	bl	800e610 <mbedtls_mpi_copy>
 800f376:	4603      	mov	r3, r0
 800f378:	2800      	cmp	r0, #0
 800f37a:	f040 80f0 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
    mbedtls_mpi_uint z = 1;
 800f37e:	ab07      	add	r3, sp, #28
 800f380:	2701      	movs	r7, #1
    U.p = &z;
 800f382:	9313      	str	r3, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f384:	f8cd 9000 	str.w	r9, [sp]
 800f388:	4623      	mov	r3, r4
 800f38a:	462a      	mov	r2, r5
 800f38c:	a911      	add	r1, sp, #68	; 0x44
 800f38e:	4630      	mov	r0, r6
    mbedtls_mpi_uint z = 1;
 800f390:	9707      	str	r7, [sp, #28]
    U.n = U.s = (int) z;
 800f392:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f396:	f7ff fb11 	bl	800e9bc <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f39a:	4603      	mov	r3, r0
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f040 80de 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>

    if( wsize > 1 )
 800f3a2:	45bb      	cmp	fp, r7
 800f3a4:	d15a      	bne.n	800f45c <mbedtls_mpi_exp_mod+0x276>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 800f3a6:	9b03      	ldr	r3, [sp, #12]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 800f3a8:	f04f 0900 	mov.w	r9, #0
    nblimbs = E->n;
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	9302      	str	r3, [sp, #8]
    nbits   = 0;
 800f3b0:	46c8      	mov	r8, r9
    bufsize = 0;
 800f3b2:	46ca      	mov	sl, r9
    wbits   = 0;
 800f3b4:	464f      	mov	r7, r9

    while( 1 )
    {
        if( bufsize == 0 )
 800f3b6:	f1ba 0f00 	cmp.w	sl, #0
 800f3ba:	f040 80b1 	bne.w	800f520 <mbedtls_mpi_exp_mod+0x33a>
        {
            if( nblimbs == 0 )
 800f3be:	9b02      	ldr	r3, [sp, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f040 80a8 	bne.w	800f516 <mbedtls_mpi_exp_mod+0x330>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 800f3c6:	f04f 0a01 	mov.w	sl, #1
 800f3ca:	fa0a fa0b 	lsl.w	sl, sl, fp
 800f3ce:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
 800f3d2:	9b02      	ldr	r3, [sp, #8]
 800f3d4:	4543      	cmp	r3, r8
 800f3d6:	f040 8113 	bne.w	800f600 <mbedtls_mpi_exp_mod+0x41a>
    mbedtls_mpi_uint z = 1;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	aa07      	add	r2, sp, #28
 800f3de:	9307      	str	r3, [sp, #28]
    U.n = U.s = (int) z;
 800f3e0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    U.p = &z;
 800f3e4:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f3e6:	4623      	mov	r3, r4
 800f3e8:	f8cd 9000 	str.w	r9, [sp]
 800f3ec:	462a      	mov	r2, r5
 800f3ee:	a911      	add	r1, sp, #68	; 0x44
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7ff fae3 	bl	800e9bc <mpi_montmul>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	f040 80b0 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800f3fe:	9a04      	ldr	r2, [sp, #16]
 800f400:	3201      	adds	r2, #1
 800f402:	f040 80ac 	bne.w	800f55e <mbedtls_mpi_exp_mod+0x378>
 800f406:	9a03      	ldr	r2, [sp, #12]
 800f408:	6852      	ldr	r2, [r2, #4]
 800f40a:	2a00      	cmp	r2, #0
 800f40c:	f000 80a7 	beq.w	800f55e <mbedtls_mpi_exp_mod+0x378>
 800f410:	9a03      	ldr	r2, [sp, #12]
 800f412:	6892      	ldr	r2, [r2, #8]
 800f414:	6812      	ldr	r2, [r2, #0]
 800f416:	07d2      	lsls	r2, r2, #31
 800f418:	f140 80a1 	bpl.w	800f55e <mbedtls_mpi_exp_mod+0x378>
    {
        X->s = -1;
 800f41c:	9b04      	ldr	r3, [sp, #16]
 800f41e:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800f420:	4632      	mov	r2, r6
 800f422:	4629      	mov	r1, r5
 800f424:	4630      	mov	r0, r6
 800f426:	f7ff fc24 	bl	800ec72 <mbedtls_mpi_add_mpi>
 800f42a:	4603      	mov	r3, r0
    }

cleanup:
 800f42c:	e097      	b.n	800f55e <mbedtls_mpi_exp_mod+0x378>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f42e:	f04f 0b06 	mov.w	fp, #6
 800f432:	e726      	b.n	800f282 <mbedtls_mpi_exp_mod+0x9c>
 800f434:	f04f 0b05 	mov.w	fp, #5
 800f438:	e723      	b.n	800f282 <mbedtls_mpi_exp_mod+0x9c>
 800f43a:	f04f 0b04 	mov.w	fp, #4
 800f43e:	e720      	b.n	800f282 <mbedtls_mpi_exp_mod+0x9c>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 800f440:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f444:	6810      	ldr	r0, [r2, #0]
 800f446:	6851      	ldr	r1, [r2, #4]
 800f448:	ab08      	add	r3, sp, #32
 800f44a:	c303      	stmia	r3!, {r0, r1}
 800f44c:	6890      	ldr	r0, [r2, #8]
 800f44e:	6018      	str	r0, [r3, #0]
 800f450:	e76e      	b.n	800f330 <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800f452:	4639      	mov	r1, r7
 800f454:	a817      	add	r0, sp, #92	; 0x5c
 800f456:	f7ff f8db 	bl	800e610 <mbedtls_mpi_copy>
 800f45a:	e775      	b.n	800f348 <mbedtls_mpi_exp_mod+0x162>
 800f45c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f460:	9302      	str	r3, [sp, #8]
 800f462:	fa07 f303 	lsl.w	r3, r7, r3
 800f466:	9305      	str	r3, [sp, #20]
 800f468:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800f46a:	6869      	ldr	r1, [r5, #4]
 800f46c:	270c      	movs	r7, #12
 800f46e:	409f      	lsls	r7, r3
 800f470:	ab14      	add	r3, sp, #80	; 0x50
 800f472:	eb03 0807 	add.w	r8, r3, r7
 800f476:	3101      	adds	r1, #1
 800f478:	4640      	mov	r0, r8
 800f47a:	f7ff f85b 	bl	800e534 <mbedtls_mpi_grow>
 800f47e:	4603      	mov	r3, r0
 800f480:	2800      	cmp	r0, #0
 800f482:	d16c      	bne.n	800f55e <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800f484:	a917      	add	r1, sp, #92	; 0x5c
 800f486:	4640      	mov	r0, r8
 800f488:	f7ff f8c2 	bl	800e610 <mbedtls_mpi_copy>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2800      	cmp	r0, #0
 800f490:	d165      	bne.n	800f55e <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 800f492:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800f494:	4623      	mov	r3, r4
 800f496:	f8cd 9000 	str.w	r9, [sp]
 800f49a:	462a      	mov	r2, r5
 800f49c:	4641      	mov	r1, r8
 800f49e:	4640      	mov	r0, r8
 800f4a0:	f7ff fa8c 	bl	800e9bc <mpi_montmul>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d159      	bne.n	800f55e <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 800f4aa:	9b02      	ldr	r3, [sp, #8]
 800f4ac:	f10a 0a01 	add.w	sl, sl, #1
 800f4b0:	4553      	cmp	r3, sl
 800f4b2:	d8ef      	bhi.n	800f494 <mbedtls_mpi_exp_mod+0x2ae>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f4b4:	9b05      	ldr	r3, [sp, #20]
 800f4b6:	f103 0801 	add.w	r8, r3, #1
 800f4ba:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 800f4be:	f04f 0901 	mov.w	r9, #1
 800f4c2:	441f      	add	r7, r3
 800f4c4:	fa09 f90b 	lsl.w	r9, r9, fp
 800f4c8:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f4cc:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f4d0:	45c1      	cmp	r9, r8
 800f4d2:	f67f af68 	bls.w	800f3a6 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800f4d6:	6869      	ldr	r1, [r5, #4]
 800f4d8:	4638      	mov	r0, r7
 800f4da:	3101      	adds	r1, #1
 800f4dc:	f7ff f82a 	bl	800e534 <mbedtls_mpi_grow>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d13b      	bne.n	800f55e <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800f4e6:	f1a7 010c 	sub.w	r1, r7, #12
 800f4ea:	4638      	mov	r0, r7
 800f4ec:	f7ff f890 	bl	800e610 <mbedtls_mpi_copy>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	bba0      	cbnz	r0, 800f55e <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f4f4:	4623      	mov	r3, r4
 800f4f6:	4638      	mov	r0, r7
 800f4f8:	f8cd a000 	str.w	sl, [sp]
 800f4fc:	462a      	mov	r2, r5
 800f4fe:	a917      	add	r1, sp, #92	; 0x5c
 800f500:	f7ff fa5c 	bl	800e9bc <mpi_montmul>
 800f504:	370c      	adds	r7, #12
 800f506:	4603      	mov	r3, r0
 800f508:	bb48      	cbnz	r0, 800f55e <mbedtls_mpi_exp_mod+0x378>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f50a:	f108 0801 	add.w	r8, r8, #1
 800f50e:	e7df      	b.n	800f4d0 <mbedtls_mpi_exp_mod+0x2ea>
        state = 2;
 800f510:	f04f 0902 	mov.w	r9, #2
 800f514:	e74f      	b.n	800f3b6 <mbedtls_mpi_exp_mod+0x1d0>
            nblimbs--;
 800f516:	9b02      	ldr	r3, [sp, #8]
 800f518:	3b01      	subs	r3, #1
 800f51a:	9302      	str	r3, [sp, #8]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800f51c:	f04f 0a20 	mov.w	sl, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800f520:	9b03      	ldr	r3, [sp, #12]
 800f522:	9a02      	ldr	r2, [sp, #8]
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
 800f52a:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800f52e:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
 800f532:	f013 0301 	ands.w	r3, r3, #1
 800f536:	d136      	bne.n	800f5a6 <mbedtls_mpi_exp_mod+0x3c0>
 800f538:	f1b9 0f00 	cmp.w	r9, #0
 800f53c:	f43f af3b 	beq.w	800f3b6 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
 800f540:	f1b9 0f01 	cmp.w	r9, #1
 800f544:	d12f      	bne.n	800f5a6 <mbedtls_mpi_exp_mod+0x3c0>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f546:	ab0b      	add	r3, sp, #44	; 0x2c
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	462a      	mov	r2, r5
 800f54c:	4623      	mov	r3, r4
 800f54e:	4631      	mov	r1, r6
 800f550:	4630      	mov	r0, r6
 800f552:	f7ff fa33 	bl	800e9bc <mpi_montmul>
 800f556:	4603      	mov	r3, r0
 800f558:	2800      	cmp	r0, #0
 800f55a:	f43f af2c 	beq.w	800f3b6 <mbedtls_mpi_exp_mod+0x1d0>

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800f55e:	2201      	movs	r2, #1
 800f560:	f10b 34ff 	add.w	r4, fp, #4294967295
 800f564:	fa02 f404 	lsl.w	r4, r2, r4
 800f568:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 800f56c:	260c      	movs	r6, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800f56e:	42a5      	cmp	r5, r4
 800f570:	9302      	str	r3, [sp, #8]
 800f572:	d864      	bhi.n	800f63e <mbedtls_mpi_exp_mod+0x458>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800f574:	a817      	add	r0, sp, #92	; 0x5c
 800f576:	f7fe ffc3 	bl	800e500 <mbedtls_mpi_free>
 800f57a:	a80b      	add	r0, sp, #44	; 0x2c
 800f57c:	f7fe ffc0 	bl	800e500 <mbedtls_mpi_free>
 800f580:	a80e      	add	r0, sp, #56	; 0x38
 800f582:	f7fe ffbd 	bl	800e500 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 800f586:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f58a:	9b02      	ldr	r3, [sp, #8]
 800f58c:	b10a      	cbz	r2, 800f592 <mbedtls_mpi_exp_mod+0x3ac>
 800f58e:	6892      	ldr	r2, [r2, #8]
 800f590:	b922      	cbnz	r2, 800f59c <mbedtls_mpi_exp_mod+0x3b6>
        mbedtls_mpi_free( &RR );
 800f592:	a808      	add	r0, sp, #32
 800f594:	9302      	str	r3, [sp, #8]
 800f596:	f7fe ffb3 	bl	800e500 <mbedtls_mpi_free>
 800f59a:	9b02      	ldr	r3, [sp, #8]

    return( ret );
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 800f5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbits++;
 800f5a6:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
 800f5aa:	ebab 0208 	sub.w	r2, fp, r8
 800f5ae:	4093      	lsls	r3, r2
        if( nbits == wsize )
 800f5b0:	45c3      	cmp	fp, r8
        wbits |= ( ei << ( wsize - nbits ) );
 800f5b2:	ea47 0703 	orr.w	r7, r7, r3
        if( nbits == wsize )
 800f5b6:	d1ab      	bne.n	800f510 <mbedtls_mpi_exp_mod+0x32a>
            for( i = 0; i < wsize; i++ )
 800f5b8:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f5bc:	ab0b      	add	r3, sp, #44	; 0x2c
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	462a      	mov	r2, r5
 800f5c2:	4623      	mov	r3, r4
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f7ff f9f8 	bl	800e9bc <mpi_montmul>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d1c5      	bne.n	800f55e <mbedtls_mpi_exp_mod+0x378>
            for( i = 0; i < wsize; i++ )
 800f5d2:	f108 0801 	add.w	r8, r8, #1
 800f5d6:	45c3      	cmp	fp, r8
 800f5d8:	d8f0      	bhi.n	800f5bc <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800f5da:	ab0b      	add	r3, sp, #44	; 0x2c
 800f5dc:	a814      	add	r0, sp, #80	; 0x50
 800f5de:	210c      	movs	r1, #12
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	fb01 0107 	mla	r1, r1, r7, r0
 800f5e6:	4623      	mov	r3, r4
 800f5e8:	462a      	mov	r2, r5
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f7ff f9e6 	bl	800e9bc <mpi_montmul>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d1b3      	bne.n	800f55e <mbedtls_mpi_exp_mod+0x378>
            state--;
 800f5f6:	f04f 0901 	mov.w	r9, #1
            nbits = 0;
 800f5fa:	4607      	mov	r7, r0
            wbits = 0;
 800f5fc:	4680      	mov	r8, r0
 800f5fe:	e6da      	b.n	800f3b6 <mbedtls_mpi_exp_mod+0x1d0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f600:	4623      	mov	r3, r4
 800f602:	f8cd 9000 	str.w	r9, [sp]
 800f606:	462a      	mov	r2, r5
 800f608:	4631      	mov	r1, r6
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7ff f9d6 	bl	800e9bc <mpi_montmul>
 800f610:	4603      	mov	r3, r0
 800f612:	2800      	cmp	r0, #0
 800f614:	d1a3      	bne.n	800f55e <mbedtls_mpi_exp_mod+0x378>
        wbits <<= 1;
 800f616:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 800f618:	ea1a 0f07 	tst.w	sl, r7
 800f61c:	d103      	bne.n	800f626 <mbedtls_mpi_exp_mod+0x440>
    for( i = 0; i < nbits; i++ )
 800f61e:	9b02      	ldr	r3, [sp, #8]
 800f620:	3301      	adds	r3, #1
 800f622:	9302      	str	r3, [sp, #8]
 800f624:	e6d5      	b.n	800f3d2 <mbedtls_mpi_exp_mod+0x1ec>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800f626:	4623      	mov	r3, r4
 800f628:	f8cd 9000 	str.w	r9, [sp]
 800f62c:	462a      	mov	r2, r5
 800f62e:	a917      	add	r1, sp, #92	; 0x5c
 800f630:	4630      	mov	r0, r6
 800f632:	f7ff f9c3 	bl	800e9bc <mpi_montmul>
 800f636:	4603      	mov	r3, r0
 800f638:	2800      	cmp	r0, #0
 800f63a:	d0f0      	beq.n	800f61e <mbedtls_mpi_exp_mod+0x438>
 800f63c:	e78f      	b.n	800f55e <mbedtls_mpi_exp_mod+0x378>
        mbedtls_mpi_free( &W[i] );
 800f63e:	ab14      	add	r3, sp, #80	; 0x50
 800f640:	fb06 3004 	mla	r0, r6, r4, r3
 800f644:	f7fe ff5c 	bl	800e500 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800f648:	3401      	adds	r4, #1
 800f64a:	9b02      	ldr	r3, [sp, #8]
 800f64c:	e78f      	b.n	800f56e <mbedtls_mpi_exp_mod+0x388>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800f64e:	f06f 0303 	mvn.w	r3, #3
 800f652:	e7a3      	b.n	800f59c <mbedtls_mpi_exp_mod+0x3b6>

0800f654 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800f654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f656:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	2601      	movs	r6, #1
{
 800f65c:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800f65e:	a804      	add	r0, sp, #16
{
 800f660:	4615      	mov	r5, r2
    X->n = 0;
 800f662:	e9cd 6301 	strd	r6, r3, [sp, #4]
    X->s = 1;
 800f666:	e9cd 3603 	strd	r3, r6, [sp, #12]
    X->p = NULL;
 800f66a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 800f66e:	e9cd 6307 	strd	r6, r3, [sp, #28]
    X->p = NULL;
 800f672:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800f674:	f7fe ffcc 	bl	800e610 <mbedtls_mpi_copy>
 800f678:	4604      	mov	r4, r0
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d157      	bne.n	800f72e <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800f67e:	4629      	mov	r1, r5
 800f680:	a807      	add	r0, sp, #28
 800f682:	f7fe ffc5 	bl	800e610 <mbedtls_mpi_copy>
 800f686:	4604      	mov	r4, r0
 800f688:	2800      	cmp	r0, #0
 800f68a:	d150      	bne.n	800f72e <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 800f68c:	a804      	add	r0, sp, #16
 800f68e:	f7ff f84a 	bl	800e726 <mbedtls_mpi_lsb>
 800f692:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 800f694:	a807      	add	r0, sp, #28
 800f696:	f7ff f846 	bl	800e726 <mbedtls_mpi_lsb>
 800f69a:	4285      	cmp	r5, r0
 800f69c:	bf28      	it	cs
 800f69e:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	a804      	add	r0, sp, #16
 800f6a4:	f7ff f91e 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f6a8:	4604      	mov	r4, r0
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d13f      	bne.n	800f72e <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	a807      	add	r0, sp, #28
 800f6b2:	f7ff f917 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d138      	bne.n	800f72e <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 800f6bc:	9607      	str	r6, [sp, #28]
 800f6be:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	a804      	add	r0, sp, #16
 800f6c4:	f7ff fa1e 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f6c8:	b958      	cbnz	r0, 800f6e2 <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	a807      	add	r0, sp, #28
 800f6ce:	f7ff f8c1 	bl	800e854 <mbedtls_mpi_shift_l>
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	bb58      	cbnz	r0, 800f72e <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800f6d6:	a907      	add	r1, sp, #28
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f7fe ff99 	bl	800e610 <mbedtls_mpi_copy>
 800f6de:	4604      	mov	r4, r0

cleanup:
 800f6e0:	e025      	b.n	800f72e <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800f6e2:	a804      	add	r0, sp, #16
 800f6e4:	f7ff f81f 	bl	800e726 <mbedtls_mpi_lsb>
 800f6e8:	4601      	mov	r1, r0
 800f6ea:	a804      	add	r0, sp, #16
 800f6ec:	f7ff f8fa 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	b9e0      	cbnz	r0, 800f72e <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800f6f4:	a807      	add	r0, sp, #28
 800f6f6:	f7ff f816 	bl	800e726 <mbedtls_mpi_lsb>
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	a807      	add	r0, sp, #28
 800f6fe:	f7ff f8f1 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f702:	4604      	mov	r4, r0
 800f704:	b998      	cbnz	r0, 800f72e <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800f706:	a907      	add	r1, sp, #28
 800f708:	a804      	add	r0, sp, #16
 800f70a:	f7ff f9bb 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 800f70e:	2800      	cmp	r0, #0
 800f710:	db19      	blt.n	800f746 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800f712:	a904      	add	r1, sp, #16
 800f714:	aa07      	add	r2, sp, #28
 800f716:	4608      	mov	r0, r1
 800f718:	f7ff fa6d 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 800f71c:	4604      	mov	r4, r0
 800f71e:	b930      	cbnz	r0, 800f72e <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800f720:	2101      	movs	r1, #1
 800f722:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800f724:	f7ff f8de 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f728:	4604      	mov	r4, r0
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d0c8      	beq.n	800f6c0 <mbedtls_mpi_gcd+0x6c>

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800f72e:	a801      	add	r0, sp, #4
 800f730:	f7fe fee6 	bl	800e500 <mbedtls_mpi_free>
 800f734:	a804      	add	r0, sp, #16
 800f736:	f7fe fee3 	bl	800e500 <mbedtls_mpi_free>
 800f73a:	a807      	add	r0, sp, #28
 800f73c:	f7fe fee0 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
}
 800f740:	4620      	mov	r0, r4
 800f742:	b00b      	add	sp, #44	; 0x2c
 800f744:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800f746:	a907      	add	r1, sp, #28
 800f748:	aa04      	add	r2, sp, #16
 800f74a:	4608      	mov	r0, r1
 800f74c:	f7ff fa53 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 800f750:	4604      	mov	r4, r0
 800f752:	2800      	cmp	r0, #0
 800f754:	d1eb      	bne.n	800f72e <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800f756:	2101      	movs	r1, #1
 800f758:	a807      	add	r0, sp, #28
 800f75a:	e7e3      	b.n	800f724 <mbedtls_mpi_gcd+0xd0>

0800f75c <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800f75c:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800f75e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
{
 800f762:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800f766:	4605      	mov	r5, r0
 800f768:	460c      	mov	r4, r1
 800f76a:	4616      	mov	r6, r2
    if( size > MBEDTLS_MPI_MAX_SIZE )
 800f76c:	d80c      	bhi.n	800f788 <mbedtls_mpi_fill_random+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800f76e:	460a      	mov	r2, r1
 800f770:	4618      	mov	r0, r3
 800f772:	4669      	mov	r1, sp
 800f774:	47b0      	blx	r6
 800f776:	b920      	cbnz	r0, 800f782 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 800f778:	4622      	mov	r2, r4
 800f77a:	4669      	mov	r1, sp
 800f77c:	4628      	mov	r0, r5
 800f77e:	f7ff f813 	bl	800e7a8 <mbedtls_mpi_read_binary>

cleanup:
    return( ret );
}
 800f782:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800f786:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800f788:	f06f 0003 	mvn.w	r0, #3
 800f78c:	e7f9      	b.n	800f782 <mbedtls_mpi_fill_random+0x26>

0800f78e <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800f78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f792:	4680      	mov	r8, r0
 800f794:	b09c      	sub	sp, #112	; 0x70
 800f796:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800f798:	4610      	mov	r0, r2
 800f79a:	2101      	movs	r1, #1
{
 800f79c:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800f79e:	f7ff f9b1 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	f340 8143 	ble.w	800fa2e <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800f7ac:	4632      	mov	r2, r6
 800f7ae:	4639      	mov	r1, r7
 800f7b0:	a801      	add	r0, sp, #4
    X->n = 0;
 800f7b2:	e9cd 5304 	strd	r5, r3, [sp, #16]
    X->s = 1;
 800f7b6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    X->p = NULL;
 800f7ba:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 800f7be:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
    X->s = 1;
 800f7c2:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
    X->p = NULL;
 800f7c6:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 800f7ca:	e9cd 5301 	strd	r5, r3, [sp, #4]
    X->p = NULL;
 800f7ce:	9303      	str	r3, [sp, #12]
    X->n = 0;
 800f7d0:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
    X->s = 1;
 800f7d4:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
    X->p = NULL;
 800f7d8:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 800f7dc:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
    X->s = 1;
 800f7e0:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
    X->p = NULL;
 800f7e4:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800f7e8:	f7ff ff34 	bl	800f654 <mbedtls_mpi_gcd>
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d154      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	a801      	add	r0, sp, #4
 800f7f6:	f7ff f985 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f040 8114 	bne.w	800fa28 <mbedtls_mpi_inv_mod+0x29a>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800f800:	4632      	mov	r2, r6
 800f802:	4639      	mov	r1, r7
 800f804:	a804      	add	r0, sp, #16
 800f806:	f7ff fcbc 	bl	800f182 <mbedtls_mpi_mod_mpi>
 800f80a:	4604      	mov	r4, r0
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d145      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800f810:	a904      	add	r1, sp, #16
 800f812:	a807      	add	r0, sp, #28
 800f814:	f7fe fefc 	bl	800e610 <mbedtls_mpi_copy>
 800f818:	4604      	mov	r4, r0
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d13e      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800f81e:	4631      	mov	r1, r6
 800f820:	a810      	add	r0, sp, #64	; 0x40
 800f822:	f7fe fef5 	bl	800e610 <mbedtls_mpi_copy>
 800f826:	4604      	mov	r4, r0
 800f828:	2800      	cmp	r0, #0
 800f82a:	d137      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800f82c:	4631      	mov	r1, r6
 800f82e:	a813      	add	r0, sp, #76	; 0x4c
 800f830:	f7fe feee 	bl	800e610 <mbedtls_mpi_copy>
 800f834:	4604      	mov	r4, r0
 800f836:	2800      	cmp	r0, #0
 800f838:	d130      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800f83a:	4629      	mov	r1, r5
 800f83c:	a80a      	add	r0, sp, #40	; 0x28
 800f83e:	f7fe ff46 	bl	800e6ce <mbedtls_mpi_lset>
 800f842:	4604      	mov	r4, r0
 800f844:	bb50      	cbnz	r0, 800f89c <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800f846:	4601      	mov	r1, r0
 800f848:	a80d      	add	r0, sp, #52	; 0x34
 800f84a:	f7fe ff40 	bl	800e6ce <mbedtls_mpi_lset>
 800f84e:	4604      	mov	r4, r0
 800f850:	bb20      	cbnz	r0, 800f89c <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800f852:	4601      	mov	r1, r0
 800f854:	a816      	add	r0, sp, #88	; 0x58
 800f856:	f7fe ff3a 	bl	800e6ce <mbedtls_mpi_lset>
 800f85a:	4604      	mov	r4, r0
 800f85c:	b9f0      	cbnz	r0, 800f89c <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800f85e:	4629      	mov	r1, r5
 800f860:	a819      	add	r0, sp, #100	; 0x64
 800f862:	f7fe ff34 	bl	800e6ce <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800f866:	4604      	mov	r4, r0
 800f868:	b9c0      	cbnz	r0, 800f89c <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 800f86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	07d8      	lsls	r0, r3, #31
 800f870:	d466      	bmi.n	800f940 <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800f872:	2101      	movs	r1, #1
 800f874:	a807      	add	r0, sp, #28
 800f876:	f7ff f835 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f87a:	4604      	mov	r4, r0
 800f87c:	b970      	cbnz	r0, 800f89c <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800f87e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	07dd      	lsls	r5, r3, #31
 800f884:	d429      	bmi.n	800f8da <mbedtls_mpi_inv_mod+0x14c>
 800f886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	07dc      	lsls	r4, r3, #31
 800f88c:	d425      	bmi.n	800f8da <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800f88e:	2101      	movs	r1, #1
 800f890:	a80a      	add	r0, sp, #40	; 0x28
 800f892:	f7ff f827 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f896:	4604      	mov	r4, r0
 800f898:	2800      	cmp	r0, #0
 800f89a:	d02f      	beq.n	800f8fc <mbedtls_mpi_inv_mod+0x16e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800f89c:	a804      	add	r0, sp, #16
 800f89e:	f7fe fe2f 	bl	800e500 <mbedtls_mpi_free>
 800f8a2:	a807      	add	r0, sp, #28
 800f8a4:	f7fe fe2c 	bl	800e500 <mbedtls_mpi_free>
 800f8a8:	a80a      	add	r0, sp, #40	; 0x28
 800f8aa:	f7fe fe29 	bl	800e500 <mbedtls_mpi_free>
 800f8ae:	a80d      	add	r0, sp, #52	; 0x34
 800f8b0:	f7fe fe26 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800f8b4:	a801      	add	r0, sp, #4
 800f8b6:	f7fe fe23 	bl	800e500 <mbedtls_mpi_free>
 800f8ba:	a810      	add	r0, sp, #64	; 0x40
 800f8bc:	f7fe fe20 	bl	800e500 <mbedtls_mpi_free>
 800f8c0:	a813      	add	r0, sp, #76	; 0x4c
 800f8c2:	f7fe fe1d 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800f8c6:	a816      	add	r0, sp, #88	; 0x58
 800f8c8:	f7fe fe1a 	bl	800e500 <mbedtls_mpi_free>
 800f8cc:	a819      	add	r0, sp, #100	; 0x64
 800f8ce:	f7fe fe17 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
}
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	b01c      	add	sp, #112	; 0x70
 800f8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800f8da:	a90a      	add	r1, sp, #40	; 0x28
 800f8dc:	aa10      	add	r2, sp, #64	; 0x40
 800f8de:	4608      	mov	r0, r1
 800f8e0:	f7ff f9c7 	bl	800ec72 <mbedtls_mpi_add_mpi>
 800f8e4:	4604      	mov	r4, r0
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d1d8      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800f8ea:	a90d      	add	r1, sp, #52	; 0x34
 800f8ec:	aa04      	add	r2, sp, #16
 800f8ee:	4608      	mov	r0, r1
 800f8f0:	f7ff f9e1 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d0c9      	beq.n	800f88e <mbedtls_mpi_inv_mod+0x100>
 800f8fa:	e7cf      	b.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	a80d      	add	r0, sp, #52	; 0x34
 800f900:	f7fe fff0 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f904:	e7af      	b.n	800f866 <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800f906:	2101      	movs	r1, #1
 800f908:	a813      	add	r0, sp, #76	; 0x4c
 800f90a:	f7fe ffeb 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f90e:	4604      	mov	r4, r0
 800f910:	2800      	cmp	r0, #0
 800f912:	d1c3      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800f914:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	07d9      	lsls	r1, r3, #31
 800f91a:	d44c      	bmi.n	800f9b6 <mbedtls_mpi_inv_mod+0x228>
 800f91c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	07da      	lsls	r2, r3, #31
 800f922:	d448      	bmi.n	800f9b6 <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800f924:	2101      	movs	r1, #1
 800f926:	a816      	add	r0, sp, #88	; 0x58
 800f928:	f7fe ffdc 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f92c:	4604      	mov	r4, r0
 800f92e:	2800      	cmp	r0, #0
 800f930:	d1b4      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800f932:	2101      	movs	r1, #1
 800f934:	a819      	add	r0, sp, #100	; 0x64
 800f936:	f7fe ffd5 	bl	800e8e4 <mbedtls_mpi_shift_r>
 800f93a:	4604      	mov	r4, r0
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d1ad      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 800f940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	07db      	lsls	r3, r3, #31
 800f946:	d5de      	bpl.n	800f906 <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800f948:	a913      	add	r1, sp, #76	; 0x4c
 800f94a:	a807      	add	r0, sp, #28
 800f94c:	f7ff f89a 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 800f950:	2800      	cmp	r0, #0
 800f952:	db42      	blt.n	800f9da <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800f954:	a907      	add	r1, sp, #28
 800f956:	aa13      	add	r2, sp, #76	; 0x4c
 800f958:	4608      	mov	r0, r1
 800f95a:	f7ff f9ac 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f95e:	4604      	mov	r4, r0
 800f960:	2800      	cmp	r0, #0
 800f962:	d19b      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800f964:	a90a      	add	r1, sp, #40	; 0x28
 800f966:	aa16      	add	r2, sp, #88	; 0x58
 800f968:	4608      	mov	r0, r1
 800f96a:	f7ff f9a4 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f96e:	4604      	mov	r4, r0
 800f970:	2800      	cmp	r0, #0
 800f972:	d193      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800f974:	aa19      	add	r2, sp, #100	; 0x64
 800f976:	a90d      	add	r1, sp, #52	; 0x34
 800f978:	4608      	mov	r0, r1
 800f97a:	f7ff f99c 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f97e:	4604      	mov	r4, r0
 800f980:	2800      	cmp	r0, #0
 800f982:	d18b      	bne.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800f984:	2100      	movs	r1, #0
 800f986:	a807      	add	r0, sp, #28
 800f988:	f7ff f8bc 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	f47f af6c 	bne.w	800f86a <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800f992:	2100      	movs	r1, #0
 800f994:	a816      	add	r0, sp, #88	; 0x58
 800f996:	f7ff f8b5 	bl	800eb04 <mbedtls_mpi_cmp_int>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	db32      	blt.n	800fa04 <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800f99e:	4631      	mov	r1, r6
 800f9a0:	a816      	add	r0, sp, #88	; 0x58
 800f9a2:	f7ff f86f 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	da35      	bge.n	800fa16 <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800f9aa:	a916      	add	r1, sp, #88	; 0x58
 800f9ac:	4640      	mov	r0, r8
 800f9ae:	f7fe fe2f 	bl	800e610 <mbedtls_mpi_copy>
 800f9b2:	4604      	mov	r4, r0
cleanup:
 800f9b4:	e772      	b.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800f9b6:	a916      	add	r1, sp, #88	; 0x58
 800f9b8:	aa10      	add	r2, sp, #64	; 0x40
 800f9ba:	4608      	mov	r0, r1
 800f9bc:	f7ff f959 	bl	800ec72 <mbedtls_mpi_add_mpi>
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	f47f af6a 	bne.w	800f89c <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800f9c8:	a919      	add	r1, sp, #100	; 0x64
 800f9ca:	aa04      	add	r2, sp, #16
 800f9cc:	4608      	mov	r0, r1
 800f9ce:	f7ff f972 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d0a5      	beq.n	800f924 <mbedtls_mpi_inv_mod+0x196>
 800f9d8:	e760      	b.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800f9da:	a913      	add	r1, sp, #76	; 0x4c
 800f9dc:	aa07      	add	r2, sp, #28
 800f9de:	4608      	mov	r0, r1
 800f9e0:	f7ff f969 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	f47f af58 	bne.w	800f89c <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800f9ec:	a916      	add	r1, sp, #88	; 0x58
 800f9ee:	aa0a      	add	r2, sp, #40	; 0x28
 800f9f0:	4608      	mov	r0, r1
 800f9f2:	f7ff f960 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	f47f af4f 	bne.w	800f89c <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800f9fe:	aa0d      	add	r2, sp, #52	; 0x34
 800fa00:	a919      	add	r1, sp, #100	; 0x64
 800fa02:	e7b9      	b.n	800f978 <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800fa04:	a916      	add	r1, sp, #88	; 0x58
 800fa06:	4632      	mov	r2, r6
 800fa08:	4608      	mov	r0, r1
 800fa0a:	f7ff f932 	bl	800ec72 <mbedtls_mpi_add_mpi>
 800fa0e:	4604      	mov	r4, r0
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d0be      	beq.n	800f992 <mbedtls_mpi_inv_mod+0x204>
cleanup:
 800fa14:	e742      	b.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800fa16:	a916      	add	r1, sp, #88	; 0x58
 800fa18:	4632      	mov	r2, r6
 800fa1a:	4608      	mov	r0, r1
 800fa1c:	f7ff f94b 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 800fa20:	4604      	mov	r4, r0
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d0bb      	beq.n	800f99e <mbedtls_mpi_inv_mod+0x210>
cleanup:
 800fa26:	e739      	b.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800fa28:	f06f 040d 	mvn.w	r4, #13
 800fa2c:	e736      	b.n	800f89c <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800fa2e:	f06f 0403 	mvn.w	r4, #3
 800fa32:	e74e      	b.n	800f8d2 <mbedtls_mpi_inv_mod+0x144>

0800fa34 <mbedtls_cipher_get_block_size>:
 * \return              size of the cipher's blocks, or 0 if ctx has not been
 *                      initialised.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 800fa34:	b110      	cbz	r0, 800fa3c <mbedtls_cipher_get_block_size+0x8>
 800fa36:	6800      	ldr	r0, [r0, #0]
 800fa38:	b100      	cbz	r0, 800fa3c <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 800fa3a:	6940      	ldr	r0, [r0, #20]
}
 800fa3c:	4770      	bx	lr

0800fa3e <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 800fa3e:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 800fa40:	1a89      	subs	r1, r1, r2
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 800fa42:	2400      	movs	r4, #0
 800fa44:	b2e3      	uxtb	r3, r4
 800fa46:	4299      	cmp	r1, r3
 800fa48:	f104 0401 	add.w	r4, r4, #1
 800fa4c:	d800      	bhi.n	800fa50 <add_pkcs_padding+0x12>
        output[data_len + i] = (unsigned char) padding_len;
}
 800fa4e:	bd10      	pop	{r4, pc}
        output[data_len + i] = (unsigned char) padding_len;
 800fa50:	4403      	add	r3, r0
 800fa52:	5499      	strb	r1, [r3, r2]
 800fa54:	e7f6      	b.n	800fa44 <add_pkcs_padding+0x6>
	...

0800fa58 <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 800fa58:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800fa5a:	b308      	cbz	r0, 800faa0 <get_pkcs_padding+0x48>
 800fa5c:	b302      	cbz	r2, 800faa0 <get_pkcs_padding+0x48>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800fa5e:	1843      	adds	r3, r0, r1
 800fa60:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800fa64:	fab5 f385 	clz	r3, r5
    *data_len = input_len - padding_len;
 800fa68:	1b4e      	subs	r6, r1, r5
    bad |= padding_len == 0;
 800fa6a:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 800fa6c:	6016      	str	r6, [r2, #0]
    bad |= padding_len == 0;
 800fa6e:	428d      	cmp	r5, r1
 800fa70:	bf88      	it	hi
 800fa72:	f043 0301 	orrhi.w	r3, r3, #1

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 800fa76:	2200      	movs	r2, #0
 800fa78:	428a      	cmp	r2, r1
 800fa7a:	d104      	bne.n	800fa86 <get_pkcs_padding+0x2e>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	4809      	ldr	r0, [pc, #36]	; (800faa4 <get_pkcs_padding+0x4c>)
 800fa80:	bf08      	it	eq
 800fa82:	2000      	moveq	r0, #0
}
 800fa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 800fa86:	5c84      	ldrb	r4, [r0, r2]
 800fa88:	4296      	cmp	r6, r2
 800fa8a:	ea84 0405 	eor.w	r4, r4, r5
 800fa8e:	bf8c      	ite	hi
 800fa90:	2700      	movhi	r7, #0
 800fa92:	2701      	movls	r7, #1
 800fa94:	fb14 f407 	smulbb	r4, r4, r7
 800fa98:	4323      	orrs	r3, r4
 800fa9a:	b2db      	uxtb	r3, r3
    for( i = 0; i < input_len; i++ )
 800fa9c:	3201      	adds	r2, #1
 800fa9e:	e7eb      	b.n	800fa78 <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800faa0:	4801      	ldr	r0, [pc, #4]	; (800faa8 <get_pkcs_padding+0x50>)
 800faa2:	e7ef      	b.n	800fa84 <get_pkcs_padding+0x2c>
 800faa4:	ffff9e00 	.word	0xffff9e00
 800faa8:	ffff9f00 	.word	0xffff9f00

0800faac <add_one_and_zeros_padding>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 800faac:	2380      	movs	r3, #128	; 0x80
{
 800faae:	b530      	push	{r4, r5, lr}
    output[data_len] = 0x80;
 800fab0:	5483      	strb	r3, [r0, r2]
    size_t padding_len = output_len - data_len;
 800fab2:	1a89      	subs	r1, r1, r2
    for( i = 1; i < padding_len; i++ )
 800fab4:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 800fab6:	2400      	movs	r4, #0
    for( i = 1; i < padding_len; i++ )
 800fab8:	428b      	cmp	r3, r1
 800faba:	d300      	bcc.n	800fabe <add_one_and_zeros_padding+0x12>
}
 800fabc:	bd30      	pop	{r4, r5, pc}
        output[data_len + i] = 0x00;
 800fabe:	18c5      	adds	r5, r0, r3
    for( i = 1; i < padding_len; i++ )
 800fac0:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 800fac2:	54ac      	strb	r4, [r5, r2]
    for( i = 1; i < padding_len; i++ )
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	e7f7      	b.n	800fab8 <add_one_and_zeros_padding+0xc>

0800fac8 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 800fac8:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 800faca:	2301      	movs	r3, #1
    size_t padding_len = output_len - data_len;
 800facc:	1a8d      	subs	r5, r1, r2
        output[data_len + i - 1] = 0x00;
 800face:	2600      	movs	r6, #0
    for( i = 1; i < padding_len; i++ )
 800fad0:	42ab      	cmp	r3, r5
 800fad2:	d303      	bcc.n	800fadc <add_zeros_and_len_padding+0x14>
    output[output_len - 1] = (unsigned char) padding_len;
 800fad4:	4408      	add	r0, r1
 800fad6:	f800 5c01 	strb.w	r5, [r0, #-1]
}
 800fada:	bd70      	pop	{r4, r5, r6, pc}
        output[data_len + i - 1] = 0x00;
 800fadc:	18c4      	adds	r4, r0, r3
 800fade:	4414      	add	r4, r2
    for( i = 1; i < padding_len; i++ )
 800fae0:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 800fae2:	f804 6c01 	strb.w	r6, [r4, #-1]
    for( i = 1; i < padding_len; i++ )
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	e7f2      	b.n	800fad0 <add_zeros_and_len_padding+0x8>
	...

0800faec <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 800faec:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800faee:	b1f8      	cbz	r0, 800fb30 <get_zeros_and_len_padding+0x44>
 800faf0:	b1f2      	cbz	r2, 800fb30 <get_zeros_and_len_padding+0x44>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800faf2:	1e4d      	subs	r5, r1, #1
 800faf4:	5d44      	ldrb	r4, [r0, r5]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800faf6:	fab4 f384 	clz	r3, r4
    *data_len = input_len - padding_len;
 800fafa:	1b0e      	subs	r6, r1, r4
    bad |= padding_len == 0;
 800fafc:	095b      	lsrs	r3, r3, #5
 800fafe:	428c      	cmp	r4, r1
 800fb00:	bf94      	ite	ls
 800fb02:	4619      	movls	r1, r3
 800fb04:	f043 0101 	orrhi.w	r1, r3, #1
    *data_len = input_len - padding_len;
 800fb08:	6016      	str	r6, [r2, #0]

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	429d      	cmp	r5, r3
 800fb0e:	d804      	bhi.n	800fb1a <get_zeros_and_len_padding+0x2e>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800fb10:	2900      	cmp	r1, #0
 800fb12:	4808      	ldr	r0, [pc, #32]	; (800fb34 <get_zeros_and_len_padding+0x48>)
 800fb14:	bf08      	it	eq
 800fb16:	2000      	moveq	r0, #0
}
 800fb18:	bd70      	pop	{r4, r5, r6, pc}
        bad |= input[i] * ( i >= pad_idx );
 800fb1a:	429e      	cmp	r6, r3
 800fb1c:	5cc2      	ldrb	r2, [r0, r3]
 800fb1e:	bf8c      	ite	hi
 800fb20:	2400      	movhi	r4, #0
 800fb22:	2401      	movls	r4, #1
 800fb24:	fb12 f204 	smulbb	r2, r2, r4
 800fb28:	4311      	orrs	r1, r2
 800fb2a:	b2c9      	uxtb	r1, r1
    for( i = 0; i < input_len - 1; i++ )
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	e7ed      	b.n	800fb0c <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fb30:	4801      	ldr	r0, [pc, #4]	; (800fb38 <get_zeros_and_len_padding+0x4c>)
 800fb32:	e7f1      	b.n	800fb18 <get_zeros_and_len_padding+0x2c>
 800fb34:	ffff9e00 	.word	0xffff9e00
 800fb38:	ffff9f00 	.word	0xffff9f00

0800fb3c <add_zeros_padding>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 800fb3c:	b510      	push	{r4, lr}
 800fb3e:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 800fb40:	2400      	movs	r4, #0
    for( i = data_len; i < output_len; i++ )
 800fb42:	1a13      	subs	r3, r2, r0
 800fb44:	4299      	cmp	r1, r3
 800fb46:	d800      	bhi.n	800fb4a <add_zeros_padding+0xe>
}
 800fb48:	bd10      	pop	{r4, pc}
        output[i] = 0x00;
 800fb4a:	f802 4b01 	strb.w	r4, [r2], #1
 800fb4e:	e7f8      	b.n	800fb42 <add_zeros_padding+0x6>

0800fb50 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 800fb50:	b118      	cbz	r0, 800fb5a <get_no_padding+0xa>
 800fb52:	b112      	cbz	r2, 800fb5a <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 800fb54:	6011      	str	r1, [r2, #0]

    return( 0 );
 800fb56:	2000      	movs	r0, #0
 800fb58:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fb5a:	4801      	ldr	r0, [pc, #4]	; (800fb60 <get_no_padding+0x10>)
}
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	ffff9f00 	.word	0xffff9f00

0800fb64 <get_one_and_zeros_padding>:
{
 800fb64:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( NULL == input || NULL == data_len )
 800fb66:	b320      	cbz	r0, 800fbb2 <get_one_and_zeros_padding+0x4e>
 800fb68:	b31a      	cbz	r2, 800fbb2 <get_one_and_zeros_padding+0x4e>
    *data_len = 0;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	6013      	str	r3, [r2, #0]
 800fb6e:	4408      	add	r0, r1
    bad = 0xFF;
 800fb70:	26ff      	movs	r6, #255	; 0xff
    for( i = input_len; i > 0; i-- )
 800fb72:	b921      	cbnz	r1, 800fb7e <get_one_and_zeros_padding+0x1a>
    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800fb74:	2e00      	cmp	r6, #0
 800fb76:	4810      	ldr	r0, [pc, #64]	; (800fbb8 <get_one_and_zeros_padding+0x54>)
 800fb78:	bf08      	it	eq
 800fb7a:	2000      	moveq	r0, #0
}
 800fb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        done |= ( input[i-1] != 0 );
 800fb7e:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
 800fb82:	2c00      	cmp	r4, #0
 800fb84:	bf0c      	ite	eq
 800fb86:	461c      	moveq	r4, r3
 800fb88:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 800fb8c:	ea83 0504 	eor.w	r5, r3, r4
        done |= ( input[i-1] != 0 );
 800fb90:	3901      	subs	r1, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 800fb92:	fb01 f705 	mul.w	r7, r1, r5
 800fb96:	6815      	ldr	r5, [r2, #0]
 800fb98:	433d      	orrs	r5, r7
 800fb9a:	6015      	str	r5, [r2, #0]
        bad &= ( input[i-1] ^ 0x80 ) | ( done == prev_done );
 800fb9c:	7805      	ldrb	r5, [r0, #0]
 800fb9e:	f085 0580 	eor.w	r5, r5, #128	; 0x80
 800fba2:	42a3      	cmp	r3, r4
 800fba4:	bf14      	ite	ne
 800fba6:	462b      	movne	r3, r5
 800fba8:	f045 0301 	orreq.w	r3, r5, #1
 800fbac:	401e      	ands	r6, r3
        done |= ( input[i-1] != 0 );
 800fbae:	4623      	mov	r3, r4
 800fbb0:	e7df      	b.n	800fb72 <get_one_and_zeros_padding+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fbb2:	4802      	ldr	r0, [pc, #8]	; (800fbbc <get_one_and_zeros_padding+0x58>)
 800fbb4:	e7e2      	b.n	800fb7c <get_one_and_zeros_padding+0x18>
 800fbb6:	bf00      	nop
 800fbb8:	ffff9e00 	.word	0xffff9e00
 800fbbc:	ffff9f00 	.word	0xffff9f00

0800fbc0 <get_zeros_padding>:
{
 800fbc0:	b530      	push	{r4, r5, lr}
    if( NULL == input || NULL == data_len )
 800fbc2:	b1b8      	cbz	r0, 800fbf4 <get_zeros_padding+0x34>
 800fbc4:	b1b2      	cbz	r2, 800fbf4 <get_zeros_padding+0x34>
    *data_len = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	6013      	str	r3, [r2, #0]
 800fbca:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 800fbcc:	4281      	cmp	r1, r0
 800fbce:	eba1 0500 	sub.w	r5, r1, r0
 800fbd2:	d101      	bne.n	800fbd8 <get_zeros_padding+0x18>
 800fbd4:	2000      	movs	r0, #0
}
 800fbd6:	bd30      	pop	{r4, r5, pc}
        done |= ( input[i-1] != 0 );
 800fbd8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800fbdc:	2c00      	cmp	r4, #0
 800fbde:	bf0c      	ite	eq
 800fbe0:	461c      	moveq	r4, r3
 800fbe2:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= i * ( done != prev_done );
 800fbe6:	4063      	eors	r3, r4
 800fbe8:	436b      	muls	r3, r5
 800fbea:	6815      	ldr	r5, [r2, #0]
 800fbec:	432b      	orrs	r3, r5
 800fbee:	6013      	str	r3, [r2, #0]
        done |= ( input[i-1] != 0 );
 800fbf0:	4623      	mov	r3, r4
 800fbf2:	e7eb      	b.n	800fbcc <get_zeros_padding+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fbf4:	4800      	ldr	r0, [pc, #0]	; (800fbf8 <get_zeros_padding+0x38>)
 800fbf6:	e7ee      	b.n	800fbd6 <get_zeros_padding+0x16>
 800fbf8:	ffff9f00 	.word	0xffff9f00

0800fbfc <mbedtls_cipher_info_from_type>:
{
 800fbfc:	4b05      	ldr	r3, [pc, #20]	; (800fc14 <mbedtls_cipher_info_from_type+0x18>)
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fbfe:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800fc02:	b122      	cbz	r2, 800fc0e <mbedtls_cipher_info_from_type+0x12>
 800fc04:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 800fc06:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800fc0a:	4281      	cmp	r1, r0
 800fc0c:	d1f7      	bne.n	800fbfe <mbedtls_cipher_info_from_type+0x2>
}
 800fc0e:	4610      	mov	r0, r2
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	0802a49c 	.word	0x0802a49c

0800fc18 <mbedtls_cipher_info_from_values>:
{
 800fc18:	b530      	push	{r4, r5, lr}
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fc1a:	4c08      	ldr	r4, [pc, #32]	; (800fc3c <mbedtls_cipher_info_from_values+0x24>)
 800fc1c:	6863      	ldr	r3, [r4, #4]
 800fc1e:	b90b      	cbnz	r3, 800fc24 <mbedtls_cipher_info_from_values+0xc>
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 800fc24:	699d      	ldr	r5, [r3, #24]
 800fc26:	782d      	ldrb	r5, [r5, #0]
 800fc28:	4285      	cmp	r5, r0
 800fc2a:	d105      	bne.n	800fc38 <mbedtls_cipher_info_from_values+0x20>
 800fc2c:	685d      	ldr	r5, [r3, #4]
 800fc2e:	428d      	cmp	r5, r1
 800fc30:	d102      	bne.n	800fc38 <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800fc32:	785d      	ldrb	r5, [r3, #1]
 800fc34:	4295      	cmp	r5, r2
 800fc36:	d0f3      	beq.n	800fc20 <mbedtls_cipher_info_from_values+0x8>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fc38:	3408      	adds	r4, #8
 800fc3a:	e7ef      	b.n	800fc1c <mbedtls_cipher_info_from_values+0x4>
 800fc3c:	0802a494 	.word	0x0802a494

0800fc40 <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800fc40:	2240      	movs	r2, #64	; 0x40
 800fc42:	2100      	movs	r1, #0
 800fc44:	f012 bb73 	b.w	802232e <memset>

0800fc48 <mbedtls_cipher_free>:
{
 800fc48:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	b150      	cbz	r0, 800fc64 <mbedtls_cipher_free+0x1c>
    if( ctx->cipher_ctx )
 800fc4e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800fc50:	b118      	cbz	r0, 800fc5a <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	699b      	ldr	r3, [r3, #24]
 800fc56:	699b      	ldr	r3, [r3, #24]
 800fc58:	4798      	blx	r3
 800fc5a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800fc5e:	2200      	movs	r2, #0
 800fc60:	429c      	cmp	r4, r3
 800fc62:	d100      	bne.n	800fc66 <mbedtls_cipher_free+0x1e>
}
 800fc64:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800fc66:	7022      	strb	r2, [r4, #0]
 800fc68:	3401      	adds	r4, #1
 800fc6a:	e7f9      	b.n	800fc60 <mbedtls_cipher_free+0x18>

0800fc6c <mbedtls_cipher_setkey>:
{
 800fc6c:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 800fc6e:	b1c8      	cbz	r0, 800fca4 <mbedtls_cipher_setkey+0x38>
 800fc70:	6804      	ldr	r4, [r0, #0]
 800fc72:	b1bc      	cbz	r4, 800fca4 <mbedtls_cipher_setkey+0x38>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800fc74:	6925      	ldr	r5, [r4, #16]
 800fc76:	07ad      	lsls	r5, r5, #30
 800fc78:	d402      	bmi.n	800fc80 <mbedtls_cipher_setkey+0x14>
 800fc7a:	6865      	ldr	r5, [r4, #4]
 800fc7c:	4295      	cmp	r5, r2
 800fc7e:	d111      	bne.n	800fca4 <mbedtls_cipher_setkey+0x38>
    if( MBEDTLS_ENCRYPT == operation ||
 800fc80:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 800fc82:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 800fc84:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 800fc86:	d004      	beq.n	800fc92 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800fc88:	7865      	ldrb	r5, [r4, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800fc8a:	2d03      	cmp	r5, #3
 800fc8c:	d001      	beq.n	800fc92 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800fc8e:	2d05      	cmp	r5, #5
 800fc90:	d104      	bne.n	800fc9c <mbedtls_cipher_setkey+0x30>
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800fc92:	69a3      	ldr	r3, [r4, #24]
 800fc94:	68db      	ldr	r3, [r3, #12]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800fc96:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800fc98:	bc30      	pop	{r4, r5}
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800fc9a:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 800fc9c:	b913      	cbnz	r3, 800fca4 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800fc9e:	69a3      	ldr	r3, [r4, #24]
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	e7f8      	b.n	800fc96 <mbedtls_cipher_setkey+0x2a>
}
 800fca4:	4801      	ldr	r0, [pc, #4]	; (800fcac <mbedtls_cipher_setkey+0x40>)
 800fca6:	bc30      	pop	{r4, r5}
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	ffff9f00 	.word	0xffff9f00

0800fcb0 <mbedtls_cipher_set_iv>:
{
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	4614      	mov	r4, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	b1a8      	cbz	r0, 800fce4 <mbedtls_cipher_set_iv+0x34>
 800fcb8:	6803      	ldr	r3, [r0, #0]
 800fcba:	b19b      	cbz	r3, 800fce4 <mbedtls_cipher_set_iv+0x34>
 800fcbc:	b191      	cbz	r1, 800fce4 <mbedtls_cipher_set_iv+0x34>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 800fcbe:	2a10      	cmp	r2, #16
 800fcc0:	d80e      	bhi.n	800fce0 <mbedtls_cipher_set_iv+0x30>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 800fcc2:	691a      	ldr	r2, [r3, #16]
 800fcc4:	07d2      	lsls	r2, r2, #31
 800fcc6:	d403      	bmi.n	800fcd0 <mbedtls_cipher_set_iv+0x20>
        actual_iv_size = ctx->cipher_info->iv_size;
 800fcc8:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 800fcca:	429c      	cmp	r4, r3
 800fccc:	d30a      	bcc.n	800fce4 <mbedtls_cipher_set_iv+0x34>
 800fcce:	461c      	mov	r4, r3
    memcpy( ctx->iv, iv, actual_iv_size );
 800fcd0:	4622      	mov	r2, r4
 800fcd2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fcd6:	f012 fb06 	bl	80222e6 <memcpy>
    ctx->iv_size = actual_iv_size;
 800fcda:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 800fcdc:	2000      	movs	r0, #0
}
 800fcde:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800fce0:	4801      	ldr	r0, [pc, #4]	; (800fce8 <mbedtls_cipher_set_iv+0x38>)
 800fce2:	e7fc      	b.n	800fcde <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fce4:	4801      	ldr	r0, [pc, #4]	; (800fcec <mbedtls_cipher_set_iv+0x3c>)
 800fce6:	e7fa      	b.n	800fcde <mbedtls_cipher_set_iv+0x2e>
 800fce8:	ffff9f80 	.word	0xffff9f80
 800fcec:	ffff9f00 	.word	0xffff9f00

0800fcf0 <mbedtls_cipher_reset>:
    if( NULL == ctx || NULL == ctx->cipher_info )
 800fcf0:	b128      	cbz	r0, 800fcfe <mbedtls_cipher_reset+0xe>
 800fcf2:	6803      	ldr	r3, [r0, #0]
 800fcf4:	b11b      	cbz	r3, 800fcfe <mbedtls_cipher_reset+0xe>
    ctx->unprocessed_len = 0;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fcfe:	4801      	ldr	r0, [pc, #4]	; (800fd04 <mbedtls_cipher_reset+0x14>)
}
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	ffff9f00 	.word	0xffff9f00

0800fd08 <mbedtls_cipher_update>:
{
 800fd08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800fd10:	460f      	mov	r7, r1
 800fd12:	4615      	mov	r5, r2
 800fd14:	4699      	mov	r9, r3
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800fd16:	4604      	mov	r4, r0
 800fd18:	b918      	cbnz	r0, 800fd22 <mbedtls_cipher_update+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fd1a:	4858      	ldr	r0, [pc, #352]	; (800fe7c <mbedtls_cipher_update+0x174>)
}
 800fd1c:	b003      	add	sp, #12
 800fd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800fd22:	6802      	ldr	r2, [r0, #0]
 800fd24:	2a00      	cmp	r2, #0
 800fd26:	d0f8      	beq.n	800fd1a <mbedtls_cipher_update+0x12>
 800fd28:	f1b8 0f00 	cmp.w	r8, #0
 800fd2c:	d0f5      	beq.n	800fd1a <mbedtls_cipher_update+0x12>
    *olen = 0;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 800fd34:	f7ff fe7e 	bl	800fa34 <mbedtls_cipher_get_block_size>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800fd38:	7853      	ldrb	r3, [r2, #1]
 800fd3a:	2b01      	cmp	r3, #1
    block_size = mbedtls_cipher_get_block_size( ctx );
 800fd3c:	4606      	mov	r6, r0
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800fd3e:	d110      	bne.n	800fd62 <mbedtls_cipher_update+0x5a>
        if( ilen != block_size )
 800fd40:	42a8      	cmp	r0, r5
 800fd42:	f040 8095 	bne.w	800fe70 <mbedtls_cipher_update+0x168>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800fd46:	6993      	ldr	r3, [r2, #24]
        *olen = ilen;
 800fd48:	f8c8 0000 	str.w	r0, [r8]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800fd4c:	685d      	ldr	r5, [r3, #4]
 800fd4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fd50:	460a      	mov	r2, r1
 800fd52:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800fd56:	464b      	mov	r3, r9
 800fd58:	46ac      	mov	ip, r5
}
 800fd5a:	b003      	add	sp, #12
 800fd5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800fd60:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800fd62:	2b06      	cmp	r3, #6
 800fd64:	d10a      	bne.n	800fd7c <mbedtls_cipher_update+0x74>
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800fd66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        *olen = ilen;
 800fd68:	f8c8 5000 	str.w	r5, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800fd6c:	460a      	mov	r2, r1
 800fd6e:	464b      	mov	r3, r9
 800fd70:	4629      	mov	r1, r5
}
 800fd72:	b003      	add	sp, #12
 800fd74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800fd78:	f004 b90e 	b.w	8013f98 <mbedtls_gcm_update>
    if ( 0 == block_size )
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d079      	beq.n	800fe74 <mbedtls_cipher_update+0x16c>
    if( input == output &&
 800fd80:	4549      	cmp	r1, r9
 800fd82:	d108      	bne.n	800fd96 <mbedtls_cipher_update+0x8e>
 800fd84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fd86:	2a00      	cmp	r2, #0
 800fd88:	d1c7      	bne.n	800fd1a <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800fd8a:	fbb5 f2f0 	udiv	r2, r5, r0
 800fd8e:	fb00 5212 	mls	r2, r0, r2, r5
 800fd92:	2a00      	cmp	r2, #0
 800fd94:	d1c1      	bne.n	800fd1a <mbedtls_cipher_update+0x12>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d16e      	bne.n	800fe78 <mbedtls_cipher_update+0x170>
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800fd9a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fd9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fda0:	b96b      	cbnz	r3, 800fdbe <mbedtls_cipher_update+0xb6>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800fda2:	1a33      	subs	r3, r6, r0
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800fda4:	42ab      	cmp	r3, r5
 800fda6:	d30f      	bcc.n	800fdc8 <mbedtls_cipher_update+0xc0>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800fda8:	3014      	adds	r0, #20
 800fdaa:	462a      	mov	r2, r5
 800fdac:	4639      	mov	r1, r7
 800fdae:	4420      	add	r0, r4
 800fdb0:	f012 fa99 	bl	80222e6 <memcpy>
            ctx->unprocessed_len += ilen;
 800fdb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdb6:	441d      	add	r5, r3
 800fdb8:	6265      	str	r5, [r4, #36]	; 0x24
        return( 0 );
 800fdba:	2000      	movs	r0, #0
 800fdbc:	e7ae      	b.n	800fd1c <mbedtls_cipher_update+0x14>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d102      	bne.n	800fdc8 <mbedtls_cipher_update+0xc0>
                ilen < block_size - ctx->unprocessed_len ) )
 800fdc2:	1a33      	subs	r3, r6, r0
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800fdc4:	42ab      	cmp	r3, r5
 800fdc6:	d8ef      	bhi.n	800fda8 <mbedtls_cipher_update+0xa0>
        if( 0 != ctx->unprocessed_len )
 800fdc8:	b310      	cbz	r0, 800fe10 <mbedtls_cipher_update+0x108>
            copy_len = block_size - ctx->unprocessed_len;
 800fdca:	eba6 0a00 	sub.w	sl, r6, r0
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800fdce:	3014      	adds	r0, #20
 800fdd0:	4652      	mov	r2, sl
 800fdd2:	4639      	mov	r1, r7
 800fdd4:	4420      	add	r0, r4
 800fdd6:	f012 fa86 	bl	80222e6 <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800fdda:	4623      	mov	r3, r4
 800fddc:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800fde0:	f853 2b14 	ldr.w	r2, [r3], #20
 800fde4:	6992      	ldr	r2, [r2, #24]
 800fde6:	e9cd 3900 	strd	r3, r9, [sp]
 800fdea:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800fdee:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800fdf2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	47d8      	blx	fp
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d18f      	bne.n	800fd1c <mbedtls_cipher_update+0x14>
            *olen += block_size;
 800fdfc:	f8d8 3000 	ldr.w	r3, [r8]
 800fe00:	4433      	add	r3, r6
 800fe02:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
 800fe06:	44b1      	add	r9, r6
            ctx->unprocessed_len = 0;
 800fe08:	6260      	str	r0, [r4, #36]	; 0x24
            input += copy_len;
 800fe0a:	4457      	add	r7, sl
            ilen -= copy_len;
 800fe0c:	eba5 050a 	sub.w	r5, r5, sl
        if( 0 != ilen )
 800fe10:	2d00      	cmp	r5, #0
 800fe12:	d0d2      	beq.n	800fdba <mbedtls_cipher_update+0xb2>
            copy_len = ilen % block_size;
 800fe14:	fbb5 faf6 	udiv	sl, r5, r6
 800fe18:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 800fe1c:	f1ba 0f00 	cmp.w	sl, #0
 800fe20:	d104      	bne.n	800fe2c <mbedtls_cipher_update+0x124>
 800fe22:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	bf08      	it	eq
 800fe2a:	46b2      	moveq	sl, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 800fe2c:	eba5 050a 	sub.w	r5, r5, sl
 800fe30:	4652      	mov	r2, sl
 800fe32:	1979      	adds	r1, r7, r5
 800fe34:	f104 0014 	add.w	r0, r4, #20
 800fe38:	f012 fa55 	bl	80222e6 <memcpy>
            ctx->unprocessed_len += copy_len;
 800fe3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe3e:	4453      	add	r3, sl
 800fe40:	6263      	str	r3, [r4, #36]	; 0x24
        if( ilen )
 800fe42:	2d00      	cmp	r5, #0
 800fe44:	d0b9      	beq.n	800fdba <mbedtls_cipher_update+0xb2>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800fe46:	6823      	ldr	r3, [r4, #0]
 800fe48:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800fe4c:	699b      	ldr	r3, [r3, #24]
 800fe4e:	e9cd 7900 	strd	r7, r9, [sp]
 800fe52:	462a      	mov	r2, r5
 800fe54:	689e      	ldr	r6, [r3, #8]
 800fe56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fe58:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800fe5c:	47b0      	blx	r6
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	f47f af5c 	bne.w	800fd1c <mbedtls_cipher_update+0x14>
            *olen += ilen;
 800fe64:	f8d8 3000 	ldr.w	r3, [r8]
 800fe68:	441d      	add	r5, r3
 800fe6a:	f8c8 5000 	str.w	r5, [r8]
 800fe6e:	e755      	b.n	800fd1c <mbedtls_cipher_update+0x14>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800fe70:	4803      	ldr	r0, [pc, #12]	; (800fe80 <mbedtls_cipher_update+0x178>)
 800fe72:	e753      	b.n	800fd1c <mbedtls_cipher_update+0x14>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800fe74:	4803      	ldr	r0, [pc, #12]	; (800fe84 <mbedtls_cipher_update+0x17c>)
 800fe76:	e751      	b.n	800fd1c <mbedtls_cipher_update+0x14>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800fe78:	4803      	ldr	r0, [pc, #12]	; (800fe88 <mbedtls_cipher_update+0x180>)
 800fe7a:	e74f      	b.n	800fd1c <mbedtls_cipher_update+0x14>
 800fe7c:	ffff9f00 	.word	0xffff9f00
 800fe80:	ffff9d80 	.word	0xffff9d80
 800fe84:	ffff9c80 	.word	0xffff9c80
 800fe88:	ffff9f80 	.word	0xffff9f80

0800fe8c <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 800fe8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe8e:	460e      	mov	r6, r1
 800fe90:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800fe92:	4604      	mov	r4, r0
 800fe94:	2800      	cmp	r0, #0
 800fe96:	d053      	beq.n	800ff40 <mbedtls_cipher_finish+0xb4>
 800fe98:	6807      	ldr	r7, [r0, #0]
 800fe9a:	2f00      	cmp	r7, #0
 800fe9c:	d050      	beq.n	800ff40 <mbedtls_cipher_finish+0xb4>
 800fe9e:	2a00      	cmp	r2, #0
 800fea0:	d04e      	beq.n	800ff40 <mbedtls_cipher_finish+0xb4>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 800fea2:	2300      	movs	r3, #0
 800fea4:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800fea6:	787a      	ldrb	r2, [r7, #1]
 800fea8:	2a03      	cmp	r2, #3
 800feaa:	d009      	beq.n	800fec0 <mbedtls_cipher_finish+0x34>
 800feac:	1f51      	subs	r1, r2, #5
 800feae:	2902      	cmp	r1, #2
 800feb0:	d906      	bls.n	800fec0 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 800feb2:	2a01      	cmp	r2, #1
 800feb4:	d107      	bne.n	800fec6 <mbedtls_cipher_finish+0x3a>
    {
        if( ctx->unprocessed_len != 0 )
 800feb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800feb8:	2b00      	cmp	r3, #0
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800feba:	4b23      	ldr	r3, [pc, #140]	; (800ff48 <mbedtls_cipher_finish+0xbc>)
 800febc:	bf08      	it	eq
 800febe:	2300      	moveq	r3, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	b003      	add	sp, #12
 800fec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 800fec6:	2a02      	cmp	r2, #2
 800fec8:	d13c      	bne.n	800ff44 <mbedtls_cipher_finish+0xb8>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 800feca:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800fece:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d12a      	bne.n	800ff2a <mbedtls_cipher_finish+0x9e>
            if( NULL == ctx->add_padding )
 800fed4:	68c3      	ldr	r3, [r0, #12]
 800fed6:	b90b      	cbnz	r3, 800fedc <mbedtls_cipher_finish+0x50>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800fed8:	2a00      	cmp	r2, #0
 800feda:	e7ee      	b.n	800feba <mbedtls_cipher_finish+0x2e>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 800fedc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 800fede:	3014      	adds	r0, #20
 800fee0:	b901      	cbnz	r1, 800fee4 <mbedtls_cipher_finish+0x58>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 800fee2:	68f9      	ldr	r1, [r7, #12]
 800fee4:	4798      	blx	r3
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800fee6:	4620      	mov	r0, r4
 800fee8:	f7ff fda4 	bl	800fa34 <mbedtls_cipher_get_block_size>
 800feec:	4623      	mov	r3, r4
 800feee:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800fef2:	f853 2b14 	ldr.w	r2, [r3], #20
 800fef6:	6992      	ldr	r2, [r2, #24]
 800fef8:	e9cd 3600 	strd	r3, r6, [sp]
 800fefc:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800ff00:	6897      	ldr	r7, [r2, #8]
 800ff02:	4602      	mov	r2, r0
 800ff04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ff06:	47b8      	blx	r7
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d1d8      	bne.n	800fec0 <mbedtls_cipher_finish+0x34>
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f7ff fd90 	bl	800fa34 <mbedtls_cipher_get_block_size>
        if( MBEDTLS_DECRYPT == ctx->operation )
 800ff14:	f994 2008 	ldrsb.w	r2, [r4, #8]
 800ff18:	4601      	mov	r1, r0
 800ff1a:	b97a      	cbnz	r2, 800ff3c <mbedtls_cipher_finish+0xb0>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800ff1c:	6923      	ldr	r3, [r4, #16]
 800ff1e:	462a      	mov	r2, r5
 800ff20:	4630      	mov	r0, r6
}
 800ff22:	b003      	add	sp, #12
 800ff24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800ff28:	4718      	bx	r3
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 800ff2a:	f7ff fd83 	bl	800fa34 <mbedtls_cipher_get_block_size>
 800ff2e:	4290      	cmp	r0, r2
 800ff30:	d0d9      	beq.n	800fee6 <mbedtls_cipher_finish+0x5a>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800ff32:	68e3      	ldr	r3, [r4, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d0cf      	beq.n	800fed8 <mbedtls_cipher_finish+0x4c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800ff38:	4b03      	ldr	r3, [pc, #12]	; (800ff48 <mbedtls_cipher_finish+0xbc>)
 800ff3a:	e7c1      	b.n	800fec0 <mbedtls_cipher_finish+0x34>
        *olen = mbedtls_cipher_get_block_size( ctx );
 800ff3c:	6028      	str	r0, [r5, #0]
 800ff3e:	e7bf      	b.n	800fec0 <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ff40:	4b02      	ldr	r3, [pc, #8]	; (800ff4c <mbedtls_cipher_finish+0xc0>)
 800ff42:	e7bd      	b.n	800fec0 <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800ff44:	4b02      	ldr	r3, [pc, #8]	; (800ff50 <mbedtls_cipher_finish+0xc4>)
 800ff46:	e7bb      	b.n	800fec0 <mbedtls_cipher_finish+0x34>
 800ff48:	ffff9d80 	.word	0xffff9d80
 800ff4c:	ffff9f00 	.word	0xffff9f00
 800ff50:	ffff9f80 	.word	0xffff9f80

0800ff54 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 800ff54:	b308      	cbz	r0, 800ff9a <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 800ff56:	6803      	ldr	r3, [r0, #0]
    if( NULL == ctx ||
 800ff58:	785b      	ldrb	r3, [r3, #1]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d11d      	bne.n	800ff9a <mbedtls_cipher_set_padding_mode+0x46>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 800ff5e:	2904      	cmp	r1, #4
 800ff60:	d81d      	bhi.n	800ff9e <mbedtls_cipher_set_padding_mode+0x4a>
 800ff62:	e8df f001 	tbb	[pc, r1]
 800ff66:	0903      	.short	0x0903
 800ff68:	110d      	.short	0x110d
 800ff6a:	15          	.byte	0x15
 800ff6b:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 800ff6c:	4b0d      	ldr	r3, [pc, #52]	; (800ffa4 <mbedtls_cipher_set_padding_mode+0x50>)
 800ff6e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 800ff70:	4b0d      	ldr	r3, [pc, #52]	; (800ffa8 <mbedtls_cipher_set_padding_mode+0x54>)
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
 800ff72:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 800ff74:	2000      	movs	r0, #0
        break;
 800ff76:	4770      	bx	lr
        ctx->add_padding = add_one_and_zeros_padding;
 800ff78:	4b0c      	ldr	r3, [pc, #48]	; (800ffac <mbedtls_cipher_set_padding_mode+0x58>)
 800ff7a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 800ff7c:	4b0c      	ldr	r3, [pc, #48]	; (800ffb0 <mbedtls_cipher_set_padding_mode+0x5c>)
 800ff7e:	e7f8      	b.n	800ff72 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_and_len_padding;
 800ff80:	4b0c      	ldr	r3, [pc, #48]	; (800ffb4 <mbedtls_cipher_set_padding_mode+0x60>)
 800ff82:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 800ff84:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <mbedtls_cipher_set_padding_mode+0x64>)
 800ff86:	e7f4      	b.n	800ff72 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
 800ff88:	4b0c      	ldr	r3, [pc, #48]	; (800ffbc <mbedtls_cipher_set_padding_mode+0x68>)
 800ff8a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 800ff8c:	4b0c      	ldr	r3, [pc, #48]	; (800ffc0 <mbedtls_cipher_set_padding_mode+0x6c>)
 800ff8e:	e7f0      	b.n	800ff72 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = NULL;
 800ff90:	2300      	movs	r3, #0
        ctx->get_padding = get_no_padding;
 800ff92:	4a0c      	ldr	r2, [pc, #48]	; (800ffc4 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = NULL;
 800ff94:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 800ff96:	6102      	str	r2, [r0, #16]
 800ff98:	e7ec      	b.n	800ff74 <mbedtls_cipher_set_padding_mode+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ff9a:	480b      	ldr	r0, [pc, #44]	; (800ffc8 <mbedtls_cipher_set_padding_mode+0x74>)
 800ff9c:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800ff9e:	480b      	ldr	r0, [pc, #44]	; (800ffcc <mbedtls_cipher_set_padding_mode+0x78>)
}
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	0800fa3f 	.word	0x0800fa3f
 800ffa8:	0800fa59 	.word	0x0800fa59
 800ffac:	0800faad 	.word	0x0800faad
 800ffb0:	0800fb65 	.word	0x0800fb65
 800ffb4:	0800fac9 	.word	0x0800fac9
 800ffb8:	0800faed 	.word	0x0800faed
 800ffbc:	0800fb3d 	.word	0x0800fb3d
 800ffc0:	0800fbc1 	.word	0x0800fbc1
 800ffc4:	0800fb51 	.word	0x0800fb51
 800ffc8:	ffff9f00 	.word	0xffff9f00
 800ffcc:	ffff9f80 	.word	0xffff9f80

0800ffd0 <mbedtls_cipher_setup>:
{
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 800ffd4:	460d      	mov	r5, r1
 800ffd6:	b181      	cbz	r1, 800fffa <mbedtls_cipher_setup+0x2a>
 800ffd8:	b178      	cbz	r0, 800fffa <mbedtls_cipher_setup+0x2a>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800ffda:	2240      	movs	r2, #64	; 0x40
 800ffdc:	2100      	movs	r1, #0
 800ffde:	f012 f9a6 	bl	802232e <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800ffe2:	69ab      	ldr	r3, [r5, #24]
 800ffe4:	695b      	ldr	r3, [r3, #20]
 800ffe6:	4798      	blx	r3
 800ffe8:	63e0      	str	r0, [r4, #60]	; 0x3c
 800ffea:	b140      	cbz	r0, 800fffe <mbedtls_cipher_setup+0x2e>
    ctx->cipher_info = cipher_info;
 800ffec:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 800ffee:	2100      	movs	r1, #0
 800fff0:	4620      	mov	r0, r4
 800fff2:	f7ff ffaf 	bl	800ff54 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 800fff6:	2000      	movs	r0, #0
}
 800fff8:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fffa:	4802      	ldr	r0, [pc, #8]	; (8010004 <mbedtls_cipher_setup+0x34>)
 800fffc:	e7fc      	b.n	800fff8 <mbedtls_cipher_setup+0x28>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800fffe:	4802      	ldr	r0, [pc, #8]	; (8010008 <mbedtls_cipher_setup+0x38>)
 8010000:	e7fa      	b.n	800fff8 <mbedtls_cipher_setup+0x28>
 8010002:	bf00      	nop
 8010004:	ffff9f00 	.word	0xffff9f00
 8010008:	ffff9e80 	.word	0xffff9e80

0801000c <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 801000c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801000e:	b085      	sub	sp, #20
 8010010:	4605      	mov	r5, r0
 8010012:	461f      	mov	r7, r3
 8010014:	e9dd 640b 	ldrd	r6, r4, [sp, #44]	; 0x2c
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8010018:	f7ff fe4a 	bl	800fcb0 <mbedtls_cipher_set_iv>
 801001c:	b9b0      	cbnz	r0, 801004c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 801001e:	4628      	mov	r0, r5
 8010020:	f7ff fe66 	bl	800fcf0 <mbedtls_cipher_reset>
 8010024:	b990      	cbnz	r0, 801004c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 8010026:	9400      	str	r4, [sp, #0]
 8010028:	4633      	mov	r3, r6
 801002a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801002c:	4639      	mov	r1, r7
 801002e:	4628      	mov	r0, r5
 8010030:	f7ff fe6a 	bl	800fd08 <mbedtls_cipher_update>
 8010034:	b950      	cbnz	r0, 801004c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 8010036:	6821      	ldr	r1, [r4, #0]
 8010038:	aa03      	add	r2, sp, #12
 801003a:	4431      	add	r1, r6
 801003c:	4628      	mov	r0, r5
 801003e:	f7ff ff25 	bl	800fe8c <mbedtls_cipher_finish>
 8010042:	b918      	cbnz	r0, 801004c <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8010044:	6823      	ldr	r3, [r4, #0]
 8010046:	9a03      	ldr	r2, [sp, #12]
 8010048:	4413      	add	r3, r2
 801004a:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 801004c:	b005      	add	sp, #20
 801004e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010050 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8010050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8010054:	6807      	ldr	r7, [r0, #0]
{
 8010056:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 801005a:	787f      	ldrb	r7, [r7, #1]
 801005c:	2f06      	cmp	r7, #6
{
 801005e:	4614      	mov	r4, r2
 8010060:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8010064:	e9dd 2c09 	ldrd	r2, ip, [sp, #36]	; 0x24
 8010068:	e9dd 980b 	ldrd	r9, r8, [sp, #44]	; 0x2c
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 801006c:	d10f      	bne.n	801008e <mbedtls_cipher_auth_encrypt+0x3e>
    {
        *olen = ilen;
 801006e:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 8010072:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8010076:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 801007a:	e9cd 6c0a 	strd	r6, ip, [sp, #40]	; 0x28
 801007e:	9407      	str	r4, [sp, #28]
 8010080:	460b      	mov	r3, r1
 8010082:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010084:	2101      	movs	r1, #1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8010086:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 801008a:	f004 b87b 	b.w	8014184 <mbedtls_gcm_crypt_and_tag>
}
 801008e:	4801      	ldr	r0, [pc, #4]	; (8010094 <mbedtls_cipher_auth_encrypt+0x44>)
 8010090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010094:	ffff9f80 	.word	0xffff9f80

08010098 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 8010098:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 801009a:	6805      	ldr	r5, [r0, #0]
 801009c:	786d      	ldrb	r5, [r5, #1]
{
 801009e:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80100a0:	2d06      	cmp	r5, #6
{
 80100a2:	460c      	mov	r4, r1
 80100a4:	990c      	ldr	r1, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80100a6:	d118      	bne.n	80100da <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
 80100a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80100aa:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 80100ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80100ae:	9505      	str	r5, [sp, #20]
 80100b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80100b2:	9504      	str	r5, [sp, #16]
 80100b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80100b6:	9503      	str	r5, [sp, #12]
 80100b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80100ba:	9502      	str	r5, [sp, #8]
 80100bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80100be:	e9cd 3500 	strd	r3, r5, [sp]
 80100c2:	4613      	mov	r3, r2
 80100c4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80100c6:	4622      	mov	r2, r4
 80100c8:	f004 f87f 	bl	80141ca <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80100cc:	4b04      	ldr	r3, [pc, #16]	; (80100e0 <mbedtls_cipher_auth_decrypt+0x48>)
 80100ce:	f110 0f12 	cmn.w	r0, #18
 80100d2:	bf08      	it	eq
 80100d4:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80100d6:	b007      	add	sp, #28
 80100d8:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80100da:	4802      	ldr	r0, [pc, #8]	; (80100e4 <mbedtls_cipher_auth_decrypt+0x4c>)
 80100dc:	e7fb      	b.n	80100d6 <mbedtls_cipher_auth_decrypt+0x3e>
 80100de:	bf00      	nop
 80100e0:	ffff9d00 	.word	0xffff9d00
 80100e4:	ffff9f80 	.word	0xffff9f80

080100e8 <gcm_ctx_free>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 80100e8:	b510      	push	{r4, lr}
 80100ea:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 80100ec:	f004 f899 	bl	8014222 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 80100f0:	4b02      	ldr	r3, [pc, #8]	; (80100fc <gcm_ctx_free+0x14>)
 80100f2:	4620      	mov	r0, r4
 80100f4:	681b      	ldr	r3, [r3, #0]
}
 80100f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80100fa:	4718      	bx	r3
 80100fc:	200005a4 	.word	0x200005a4

08010100 <gcm_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8010100:	4b06      	ldr	r3, [pc, #24]	; (801011c <gcm_ctx_alloc+0x1c>)
{
 8010102:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f44f 71c4 	mov.w	r1, #392	; 0x188
 801010a:	2001      	movs	r0, #1
 801010c:	4798      	blx	r3
    if( ctx != NULL )
 801010e:	4604      	mov	r4, r0
 8010110:	b108      	cbz	r0, 8010116 <gcm_ctx_alloc+0x16>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8010112:	f003 fdcd 	bl	8013cb0 <mbedtls_gcm_init>
}
 8010116:	4620      	mov	r0, r4
 8010118:	bd10      	pop	{r4, pc}
 801011a:	bf00      	nop
 801011c:	200005a0 	.word	0x200005a0

08010120 <gcm_aes_setkey_wrap>:

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8010120:	4613      	mov	r3, r2
 8010122:	460a      	mov	r2, r1
 8010124:	2102      	movs	r1, #2
 8010126:	f003 bdc8 	b.w	8013cba <mbedtls_gcm_setkey>
	...

0801012c <aes_ctx_free>:
{
 801012c:	b510      	push	{r4, lr}
 801012e:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8010130:	f7fd f80c 	bl	800d14c <mbedtls_aes_free>
    mbedtls_free( ctx );
 8010134:	4b02      	ldr	r3, [pc, #8]	; (8010140 <aes_ctx_free+0x14>)
 8010136:	4620      	mov	r0, r4
 8010138:	681b      	ldr	r3, [r3, #0]
}
 801013a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801013e:	4718      	bx	r3
 8010140:	200005a4 	.word	0x200005a4

08010144 <aes_ctx_alloc>:
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8010144:	4b06      	ldr	r3, [pc, #24]	; (8010160 <aes_ctx_alloc+0x1c>)
{
 8010146:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801014e:	2001      	movs	r0, #1
 8010150:	4798      	blx	r3
    if( aes == NULL )
 8010152:	4604      	mov	r4, r0
 8010154:	b108      	cbz	r0, 801015a <aes_ctx_alloc+0x16>
    mbedtls_aes_init( aes );
 8010156:	f7fc fff4 	bl	800d142 <mbedtls_aes_init>
}
 801015a:	4620      	mov	r0, r4
 801015c:	bd10      	pop	{r4, pc}
 801015e:	bf00      	nop
 8010160:	200005a0 	.word	0x200005a0

08010164 <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8010164:	f7fd b906 	b.w	800d374 <mbedtls_aes_setkey_dec>

08010168 <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8010168:	f7fc bffa 	b.w	800d160 <mbedtls_aes_setkey_enc>

0801016c <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 801016c:	f7fd bd03 	b.w	800db76 <mbedtls_aes_crypt_cbc>

08010170 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8010170:	f7fd bcf3 	b.w	800db5a <mbedtls_aes_crypt_ecb>

08010174 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 8010174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_aes_context aes_ctx;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8010178:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 801017c:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8010180:	4604      	mov	r4, r0
 8010182:	460e      	mov	r6, r1
 8010184:	4615      	mov	r5, r2
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8010186:	d878      	bhi.n	801027a <block_cipher_df+0x106>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 8010188:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 801018c:	2100      	movs	r1, #0
 801018e:	a85e      	add	r0, sp, #376	; 0x178
 8010190:	f012 f8cd 	bl	802232e <memset>
    mbedtls_aes_init( &aes_ctx );
 8010194:	a818      	add	r0, sp, #96	; 0x60
 8010196:	f7fc ffd4 	bl	800d142 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 801019a:	0a2b      	lsrs	r3, r5, #8
 801019c:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 80101a0:	2330      	movs	r3, #48	; 0x30
 80101a2:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 80101a6:	ab64      	add	r3, sp, #400	; 0x190
 80101a8:	4631      	mov	r1, r6
 80101aa:	462a      	mov	r2, r5
 80101ac:	4618      	mov	r0, r3
    *p++ = ( data_len       ) & 0xff;
 80101ae:	f88d 518b 	strb.w	r5, [sp, #395]	; 0x18b
    memcpy( p, data, data_len );
 80101b2:	f012 f898 	bl	80222e6 <memcpy>
    p[data_len] = 0x80;
 80101b6:	2280      	movs	r2, #128	; 0x80
 80101b8:	5542      	strb	r2, [r0, r5]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 80101ba:	f105 0619 	add.w	r6, r5, #25

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 80101be:	2300      	movs	r3, #0
        key[i] = i;
 80101c0:	a904      	add	r1, sp, #16
 80101c2:	545b      	strb	r3, [r3, r1]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 80101c4:	3301      	adds	r3, #1
 80101c6:	2b20      	cmp	r3, #32
 80101c8:	d1fb      	bne.n	80101c2 <block_cipher_df+0x4e>

    mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 80101ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80101ce:	a818      	add	r0, sp, #96	; 0x60
 80101d0:	f7fc ffc6 	bl	800d160 <mbedtls_aes_setkey_enc>

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80101d4:	2700      	movs	r7, #0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80101d6:	466d      	mov	r5, sp
 80101d8:	2210      	movs	r2, #16
 80101da:	2100      	movs	r1, #0
 80101dc:	4628      	mov	r0, r5
 80101de:	f012 f8a6 	bl	802232e <memset>
 80101e2:	f20d 1877 	addw	r8, sp, #375	; 0x177
        use_len = buf_len;
 80101e6:	46b1      	mov	r9, r6
 80101e8:	f10d 33ff 	add.w	r3, sp, #4294967295
 80101ec:	f108 0110 	add.w	r1, r8, #16

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 80101f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80101f4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 80101f8:	4042      	eors	r2, r0
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 80101fa:	4541      	cmp	r1, r8
                chain[i] ^= p[i];
 80101fc:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 80101fe:	d1f7      	bne.n	80101f0 <block_cipher_df+0x7c>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8010200:	f1b9 0f10 	cmp.w	r9, #16
 8010204:	bf94      	ite	ls
 8010206:	eba9 0909 	subls.w	r9, r9, r9
 801020a:	f1a9 0910 	subhi.w	r9, r9, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain );
 801020e:	462b      	mov	r3, r5
 8010210:	462a      	mov	r2, r5
 8010212:	2101      	movs	r1, #1
 8010214:	a818      	add	r0, sp, #96	; 0x60
 8010216:	f7fd fca0 	bl	800db5a <mbedtls_aes_crypt_ecb>
        while( use_len > 0 )
 801021a:	f1b9 0f00 	cmp.w	r9, #0
 801021e:	d1e3      	bne.n	80101e8 <block_cipher_df+0x74>
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8010220:	ab0c      	add	r3, sp, #48	; 0x30
 8010222:	eb07 0c03 	add.w	ip, r7, r3
 8010226:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801022a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

        /*
         * Update IV
         */
        buf[3]++;
 801022e:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010232:	3710      	adds	r7, #16
        buf[3]++;
 8010234:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010236:	2f30      	cmp	r7, #48	; 0x30
        buf[3]++;
 8010238:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801023c:	d1cc      	bne.n	80101d8 <block_cipher_df+0x64>
    }

    /*
     * Do final encryption with reduced data
     */
    mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 801023e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010242:	a90c      	add	r1, sp, #48	; 0x30
 8010244:	a818      	add	r0, sp, #96	; 0x60
 8010246:	f7fc ff8b 	bl	800d160 <mbedtls_aes_setkey_enc>
 801024a:	f104 0630 	add.w	r6, r4, #48	; 0x30
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 801024e:	ad14      	add	r5, sp, #80	; 0x50
 8010250:	462b      	mov	r3, r5
 8010252:	462a      	mov	r2, r5
 8010254:	2101      	movs	r1, #1
 8010256:	a818      	add	r0, sp, #96	; 0x60
 8010258:	f7fd fc7f 	bl	800db5a <mbedtls_aes_crypt_ecb>
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801025c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8010264:	3410      	adds	r4, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010266:	42a6      	cmp	r6, r4
 8010268:	d1f2      	bne.n	8010250 <block_cipher_df+0xdc>
    }

    mbedtls_aes_free( &aes_ctx );
 801026a:	a818      	add	r0, sp, #96	; 0x60
 801026c:	f7fc ff6e 	bl	800d14c <mbedtls_aes_free>

    return( 0 );
 8010270:	2000      	movs	r0, #0
}
 8010272:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 8010276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 801027a:	f06f 0037 	mvn.w	r0, #55	; 0x37
 801027e:	e7f8      	b.n	8010272 <block_cipher_df+0xfe>

08010280 <ctr_drbg_update_internal>:

static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 8010280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010282:	b08d      	sub	sp, #52	; 0x34
 8010284:	4604      	mov	r4, r0
 8010286:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8010288:	2230      	movs	r2, #48	; 0x30
 801028a:	2100      	movs	r1, #0
 801028c:	4668      	mov	r0, sp
 801028e:	f012 f84e 	bl	802232e <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010292:	2700      	movs	r7, #0
                break;

        /*
         * Crypt counter block
         */
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 8010294:	f104 0620 	add.w	r6, r4, #32
 8010298:	eb0d 0307 	add.w	r3, sp, r7
 801029c:	f104 0110 	add.w	r1, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 80102a0:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 80102a4:	3201      	adds	r2, #1
 80102a6:	b2d2      	uxtb	r2, r2
 80102a8:	700a      	strb	r2, [r1, #0]
 80102aa:	b90a      	cbnz	r2, 80102b0 <ctr_drbg_update_internal+0x30>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80102ac:	42a1      	cmp	r1, r4
 80102ae:	d1f7      	bne.n	80102a0 <ctr_drbg_update_internal+0x20>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 80102b0:	4622      	mov	r2, r4
 80102b2:	2101      	movs	r1, #1
 80102b4:	4630      	mov	r0, r6
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80102b6:	3710      	adds	r7, #16
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 80102b8:	f7fd fc4f 	bl	800db5a <mbedtls_aes_crypt_ecb>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80102bc:	2f30      	cmp	r7, #48	; 0x30
 80102be:	d1eb      	bne.n	8010298 <ctr_drbg_update_internal+0x18>
 80102c0:	1e6b      	subs	r3, r5, #1
 80102c2:	f10d 32ff 	add.w	r2, sp, #4294967295
 80102c6:	352f      	adds	r5, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 80102c8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80102cc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80102d0:	4041      	eors	r1, r0
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 80102d2:	429d      	cmp	r5, r3
        tmp[i] ^= data[i];
 80102d4:	7011      	strb	r1, [r2, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 80102d6:	d1f7      	bne.n	80102c8 <ctr_drbg_update_internal+0x48>

    /*
     * Update key and counter
     */
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 80102d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102dc:	4669      	mov	r1, sp
 80102de:	4630      	mov	r0, r6
 80102e0:	f7fc ff3e 	bl	800d160 <mbedtls_aes_setkey_enc>
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80102e4:	ad0c      	add	r5, sp, #48	; 0x30
 80102e6:	aa08      	add	r2, sp, #32
 80102e8:	4613      	mov	r3, r2
 80102ea:	cb03      	ldmia	r3!, {r0, r1}
 80102ec:	42ab      	cmp	r3, r5
 80102ee:	6020      	str	r0, [r4, #0]
 80102f0:	6061      	str	r1, [r4, #4]
 80102f2:	461a      	mov	r2, r3
 80102f4:	f104 0408 	add.w	r4, r4, #8
 80102f8:	d1f6      	bne.n	80102e8 <ctr_drbg_update_internal+0x68>

    return( 0 );
}
 80102fa:	2000      	movs	r0, #0
 80102fc:	b00d      	add	sp, #52	; 0x34
 80102fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010300 <mbedtls_ctr_drbg_free.part.0>:
void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
 8010300:	b510      	push	{r4, lr}
 8010302:	4604      	mov	r4, r0
    mbedtls_aes_free( &ctx->aes_ctx );
 8010304:	3020      	adds	r0, #32
 8010306:	f7fc ff21 	bl	800d14c <mbedtls_aes_free>
 801030a:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801030e:	2200      	movs	r2, #0
 8010310:	429c      	cmp	r4, r3
 8010312:	d100      	bne.n	8010316 <mbedtls_ctr_drbg_free.part.0+0x16>
}
 8010314:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8010316:	7022      	strb	r2, [r4, #0]
 8010318:	3401      	adds	r4, #1
 801031a:	e7f9      	b.n	8010310 <mbedtls_ctr_drbg_free.part.0+0x10>

0801031c <mbedtls_ctr_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 801031c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010320:	2100      	movs	r1, #0
 8010322:	f012 b804 	b.w	802232e <memset>

08010326 <mbedtls_ctr_drbg_free>:
    if( ctx == NULL )
 8010326:	b108      	cbz	r0, 801032c <mbedtls_ctr_drbg_free+0x6>
 8010328:	f7ff bfea 	b.w	8010300 <mbedtls_ctr_drbg_free.part.0>
}
 801032c:	4770      	bx	lr

0801032e <mbedtls_ctr_drbg_reseed>:
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 801032e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8010332:	6985      	ldr	r5, [r0, #24]
 8010334:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
{
 8010338:	b0e0      	sub	sp, #384	; 0x180
 801033a:	4604      	mov	r4, r0
 801033c:	4688      	mov	r8, r1
 801033e:	4617      	mov	r7, r2
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8010340:	d82d      	bhi.n	801039e <mbedtls_ctr_drbg_reseed+0x70>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 8010342:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8010346:	4293      	cmp	r3, r2
 8010348:	d329      	bcc.n	801039e <mbedtls_ctr_drbg_reseed+0x70>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 801034a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801034e:	2100      	movs	r1, #0
 8010350:	4668      	mov	r0, sp
 8010352:	f011 ffec 	bl	802232e <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 8010356:	462a      	mov	r2, r5
 8010358:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 801035c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8010360:	4669      	mov	r1, sp
 8010362:	4798      	blx	r3
 8010364:	4605      	mov	r5, r0
 8010366:	b9e8      	cbnz	r0, 80103a4 <mbedtls_ctr_drbg_reseed+0x76>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 8010368:	69a6      	ldr	r6, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 801036a:	f1b8 0f00 	cmp.w	r8, #0
 801036e:	d007      	beq.n	8010380 <mbedtls_ctr_drbg_reseed+0x52>
 8010370:	b137      	cbz	r7, 8010380 <mbedtls_ctr_drbg_reseed+0x52>
    {
        memcpy( seed + seedlen, additional, len );
 8010372:	eb0d 0006 	add.w	r0, sp, r6
 8010376:	463a      	mov	r2, r7
 8010378:	4641      	mov	r1, r8
 801037a:	f011 ffb4 	bl	80222e6 <memcpy>
        seedlen += len;
 801037e:	443e      	add	r6, r7
    }

    /*
     * Reduce to 384 bits
     */
    block_cipher_df( seed, seed, seedlen );
 8010380:	4632      	mov	r2, r6
 8010382:	4669      	mov	r1, sp
 8010384:	4668      	mov	r0, sp
 8010386:	f7ff fef5 	bl	8010174 <block_cipher_df>

    /*
     * Update state
     */
    ctr_drbg_update_internal( ctx, seed );
 801038a:	4669      	mov	r1, sp
 801038c:	4620      	mov	r0, r4
 801038e:	f7ff ff77 	bl	8010280 <ctr_drbg_update_internal>
    ctx->reseed_counter = 1;
 8010392:	2301      	movs	r3, #1
 8010394:	6123      	str	r3, [r4, #16]

    return( 0 );
}
 8010396:	4628      	mov	r0, r5
 8010398:	b060      	add	sp, #384	; 0x180
 801039a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 801039e:	f06f 0537 	mvn.w	r5, #55	; 0x37
 80103a2:	e7f8      	b.n	8010396 <mbedtls_ctr_drbg_reseed+0x68>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 80103a4:	f06f 0533 	mvn.w	r5, #51	; 0x33
 80103a8:	e7f5      	b.n	8010396 <mbedtls_ctr_drbg_reseed+0x68>

080103aa <mbedtls_ctr_drbg_seed_entropy_len>:
{
 80103aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ae:	4604      	mov	r4, r0
 80103b0:	b088      	sub	sp, #32
 80103b2:	4688      	mov	r8, r1
 80103b4:	4617      	mov	r7, r2
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80103b6:	2100      	movs	r1, #0
 80103b8:	2220      	movs	r2, #32
    mbedtls_aes_init( &ctx->aes_ctx );
 80103ba:	f104 0520 	add.w	r5, r4, #32
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80103be:	4668      	mov	r0, sp
{
 80103c0:	461e      	mov	r6, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80103c2:	f011 ffb4 	bl	802232e <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 80103c6:	4628      	mov	r0, r5
 80103c8:	f7fc febb 	bl	800d142 <mbedtls_aes_init>
    ctx->entropy_len = entropy_len;
 80103cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103ce:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 80103d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80103d4:	61e3      	str	r3, [r4, #28]
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 80103d6:	4669      	mov	r1, sp
    ctx->f_entropy = f_entropy;
 80103d8:	f8c4 8138 	str.w	r8, [r4, #312]	; 0x138
    ctx->p_entropy = p_entropy;
 80103dc:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 80103e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103e4:	4628      	mov	r0, r5
 80103e6:	f7fc febb 	bl	800d160 <mbedtls_aes_setkey_enc>
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 80103ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103ec:	4631      	mov	r1, r6
 80103ee:	4620      	mov	r0, r4
 80103f0:	f7ff ff9d 	bl	801032e <mbedtls_ctr_drbg_reseed>
}
 80103f4:	b008      	add	sp, #32
 80103f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103fa <mbedtls_ctr_drbg_seed>:
{
 80103fa:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 80103fc:	2430      	movs	r4, #48	; 0x30
 80103fe:	9401      	str	r4, [sp, #4]
 8010400:	9c04      	ldr	r4, [sp, #16]
 8010402:	9400      	str	r4, [sp, #0]
 8010404:	f7ff ffd1 	bl	80103aa <mbedtls_ctr_drbg_seed_entropy_len>
}
 8010408:	b002      	add	sp, #8
 801040a:	bd10      	pop	{r4, pc}

0801040c <mbedtls_ctr_drbg_random_with_add>:

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 801040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010410:	b090      	sub	sp, #64	; 0x40
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8010412:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 8010416:	4604      	mov	r4, r0
 8010418:	460e      	mov	r6, r1
 801041a:	4615      	mov	r5, r2
 801041c:	4698      	mov	r8, r3
 801041e:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8010420:	d84a      	bhi.n	80104b8 <mbedtls_ctr_drbg_random_with_add+0xac>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 8010422:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8010426:	d84a      	bhi.n	80104be <mbedtls_ctr_drbg_random_with_add+0xb2>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8010428:	2230      	movs	r2, #48	; 0x30
 801042a:	2100      	movs	r1, #0
 801042c:	a804      	add	r0, sp, #16
 801042e:	f011 ff7e 	bl	802232e <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8010432:	6922      	ldr	r2, [r4, #16]
 8010434:	69e3      	ldr	r3, [r4, #28]
 8010436:	429a      	cmp	r2, r3
 8010438:	dc01      	bgt.n	801043e <mbedtls_ctr_drbg_random_with_add+0x32>
 801043a:	6963      	ldr	r3, [r4, #20]
 801043c:	b143      	cbz	r3, 8010450 <mbedtls_ctr_drbg_random_with_add+0x44>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 801043e:	463a      	mov	r2, r7
 8010440:	4641      	mov	r1, r8
 8010442:	4620      	mov	r0, r4
 8010444:	f7ff ff73 	bl	801032e <mbedtls_ctr_drbg_reseed>
 8010448:	b160      	cbz	r0, 8010464 <mbedtls_ctr_drbg_random_with_add+0x58>
    ctr_drbg_update_internal( ctx, add_input );

    ctx->reseed_counter++;

    return( 0 );
}
 801044a:	b010      	add	sp, #64	; 0x40
 801044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( add_len > 0 )
 8010450:	b147      	cbz	r7, 8010464 <mbedtls_ctr_drbg_random_with_add+0x58>
        block_cipher_df( add_input, additional, add_len );
 8010452:	4641      	mov	r1, r8
 8010454:	463a      	mov	r2, r7
 8010456:	a804      	add	r0, sp, #16
 8010458:	f7ff fe8c 	bl	8010174 <block_cipher_df>
        ctr_drbg_update_internal( ctx, add_input );
 801045c:	a904      	add	r1, sp, #16
 801045e:	4620      	mov	r0, r4
 8010460:	f7ff ff0e 	bl	8010280 <ctr_drbg_update_internal>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 8010464:	f104 0720 	add.w	r7, r4, #32
    while( output_len > 0 )
 8010468:	b945      	cbnz	r5, 801047c <mbedtls_ctr_drbg_random_with_add+0x70>
    ctr_drbg_update_internal( ctx, add_input );
 801046a:	a904      	add	r1, sp, #16
 801046c:	4620      	mov	r0, r4
 801046e:	f7ff ff07 	bl	8010280 <ctr_drbg_update_internal>
    ctx->reseed_counter++;
 8010472:	6923      	ldr	r3, [r4, #16]
 8010474:	3301      	adds	r3, #1
 8010476:	6123      	str	r3, [r4, #16]
    return( 0 );
 8010478:	4628      	mov	r0, r5
 801047a:	e7e6      	b.n	801044a <mbedtls_ctr_drbg_random_with_add+0x3e>
 801047c:	f104 0210 	add.w	r2, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 8010480:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8010484:	3301      	adds	r3, #1
 8010486:	b2db      	uxtb	r3, r3
 8010488:	7013      	strb	r3, [r2, #0]
 801048a:	b90b      	cbnz	r3, 8010490 <mbedtls_ctr_drbg_random_with_add+0x84>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 801048c:	4294      	cmp	r4, r2
 801048e:	d1f7      	bne.n	8010480 <mbedtls_ctr_drbg_random_with_add+0x74>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 8010490:	466b      	mov	r3, sp
 8010492:	4622      	mov	r2, r4
 8010494:	2101      	movs	r1, #1
 8010496:	4638      	mov	r0, r7
 8010498:	f7fd fb5f 	bl	800db5a <mbedtls_aes_crypt_ecb>
        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 801049c:	2d10      	cmp	r5, #16
 801049e:	46a8      	mov	r8, r5
 80104a0:	bf28      	it	cs
 80104a2:	f04f 0810 	movcs.w	r8, #16
        memcpy( p, tmp, use_len );
 80104a6:	4630      	mov	r0, r6
 80104a8:	4642      	mov	r2, r8
 80104aa:	4669      	mov	r1, sp
 80104ac:	f011 ff1b 	bl	80222e6 <memcpy>
        p += use_len;
 80104b0:	4446      	add	r6, r8
        output_len -= use_len;
 80104b2:	eba5 0508 	sub.w	r5, r5, r8
 80104b6:	e7d7      	b.n	8010468 <mbedtls_ctr_drbg_random_with_add+0x5c>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 80104b8:	f06f 0035 	mvn.w	r0, #53	; 0x35
 80104bc:	e7c5      	b.n	801044a <mbedtls_ctr_drbg_random_with_add+0x3e>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80104be:	f06f 0037 	mvn.w	r0, #55	; 0x37
 80104c2:	e7c2      	b.n	801044a <mbedtls_ctr_drbg_random_with_add+0x3e>

080104c4 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 80104c4:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 80104c6:	2300      	movs	r3, #0
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	f7ff ff9f 	bl	801040c <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 80104ce:	b003      	add	sp, #12
 80104d0:	f85d fb04 	ldr.w	pc, [sp], #4

080104d4 <debug_send_line.isra.0>:
}

/*
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
 80104d4:	b410      	push	{r4}
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80104d6:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
 80104da:	46a4      	mov	ip, r4
#endif
}
 80104dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80104e0:	4760      	bx	ip
	...

080104e4 <mbedtls_debug_print_mpi.part.1>:
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80104e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80104ec:	469a      	mov	sl, r3
 80104ee:	9e91      	ldr	r6, [sp, #580]	; 0x244
    size_t i, n, idx = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
        return;

    for( n = X->n - 1; n > 0; n-- )
 80104f0:	6873      	ldr	r3, [r6, #4]
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80104f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80104f6:	68b2      	ldr	r2, [r6, #8]
    for( n = X->n - 1; n > 0; n-- )
 80104f8:	1e5c      	subs	r4, r3, #1
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80104fa:	4683      	mov	fp, r0
 80104fc:	009b      	lsls	r3, r3, #2
    for( n = X->n - 1; n > 0; n-- )
 80104fe:	b12c      	cbz	r4, 801050c <mbedtls_debug_print_mpi.part.1+0x28>
        if( X->p[n] != 0 )
 8010500:	18d1      	adds	r1, r2, r3
 8010502:	3b04      	subs	r3, #4
 8010504:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8010508:	2900      	cmp	r1, #0
 801050a:	d040      	beq.n	801058e <mbedtls_debug_print_mpi.part.1+0xaa>
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 801050c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8010510:	231f      	movs	r3, #31
 8010512:	fa22 f103 	lsr.w	r1, r2, r3
 8010516:	07c9      	lsls	r1, r1, #31
 8010518:	d402      	bmi.n	8010520 <mbedtls_debug_print_mpi.part.1+0x3c>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 801051a:	f113 33ff 	adds.w	r3, r3, #4294967295
 801051e:	d2f8      	bcs.n	8010512 <mbedtls_debug_print_mpi.part.1+0x2e>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8010520:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8010524:	ad06      	add	r5, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8010526:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	4a3a      	ldr	r2, [pc, #232]	; (8010614 <mbedtls_debug_print_mpi.part.1+0x130>)
 801052c:	9b90      	ldr	r3, [sp, #576]	; 0x240
 801052e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010532:	4628      	mov	r0, r5
 8010534:	f013 f8b6 	bl	80236a4 <sniprintf>

    debug_send_line( ssl, level, file, line, str );

    idx = 0;
    for( i = n + 1, j = 0; i > 0; i-- )
 8010538:	f104 0801 	add.w	r8, r4, #1
    debug_send_line( ssl, level, file, line, str );
 801053c:	4653      	mov	r3, sl
 801053e:	9500      	str	r5, [sp, #0]
 8010540:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010544:	f8db 0000 	ldr.w	r0, [fp]
    idx = 0;
 8010548:	2400      	movs	r4, #0
    debug_send_line( ssl, level, file, line, str );
 801054a:	f7ff ffc3 	bl	80104d4 <debug_send_line.isra.0>
    for( i = n + 1, j = 0; i > 0; i-- )
 801054e:	46a1      	mov	r9, r4
    int j, k, zeros = 1;
 8010550:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 8010552:	f1b8 0f00 	cmp.w	r8, #0
 8010556:	d11c      	bne.n	8010592 <mbedtls_debug_print_mpi.part.1+0xae>
            j++;
        }

    }

    if( zeros == 1 )
 8010558:	b13b      	cbz	r3, 801056a <mbedtls_debug_print_mpi.part.1+0x86>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 801055a:	ab06      	add	r3, sp, #24
 801055c:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010560:	1918      	adds	r0, r3, r4
 8010562:	4a2d      	ldr	r2, [pc, #180]	; (8010618 <mbedtls_debug_print_mpi.part.1+0x134>)
 8010564:	f013 f89e 	bl	80236a4 <sniprintf>
 8010568:	3403      	adds	r4, #3

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 801056a:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 801056e:	4a2b      	ldr	r2, [pc, #172]	; (801061c <mbedtls_debug_print_mpi.part.1+0x138>)
 8010570:	1928      	adds	r0, r5, r4
 8010572:	f013 f897 	bl	80236a4 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010576:	9500      	str	r5, [sp, #0]
 8010578:	4653      	mov	r3, sl
 801057a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801057e:	f8db 0000 	ldr.w	r0, [fp]
 8010582:	f7ff ffa7 	bl	80104d4 <debug_send_line.isra.0>
}
 8010586:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 801058a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for( n = X->n - 1; n > 0; n-- )
 801058e:	3c01      	subs	r4, #1
 8010590:	e7b5      	b.n	80104fe <mbedtls_debug_print_mpi.part.1+0x1a>
 8010592:	f108 4280 	add.w	r2, r8, #1073741824	; 0x40000000
 8010596:	3a01      	subs	r2, #1
 8010598:	0091      	lsls	r1, r2, #2
 801059a:	9104      	str	r1, [sp, #16]
        if( zeros && X->p[i - 1] == 0 )
 801059c:	b123      	cbz	r3, 80105a8 <mbedtls_debug_print_mpi.part.1+0xc4>
 801059e:	68b1      	ldr	r1, [r6, #8]
 80105a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80105a4:	2a00      	cmp	r2, #0
 80105a6:	d032      	beq.n	801060e <mbedtls_debug_print_mpi.part.1+0x12a>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 80105a8:	2718      	movs	r7, #24
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 80105aa:	b133      	cbz	r3, 80105ba <mbedtls_debug_print_mpi.part.1+0xd6>
 80105ac:	68b2      	ldr	r2, [r6, #8]
 80105ae:	9904      	ldr	r1, [sp, #16]
 80105b0:	5852      	ldr	r2, [r2, r1]
 80105b2:	40fa      	lsrs	r2, r7
 80105b4:	f012 0fff 	tst.w	r2, #255	; 0xff
 80105b8:	d025      	beq.n	8010606 <mbedtls_debug_print_mpi.part.1+0x122>
            if( j % 16 == 0 )
 80105ba:	f019 030f 	ands.w	r3, r9, #15
 80105be:	9305      	str	r3, [sp, #20]
 80105c0:	d111      	bne.n	80105e6 <mbedtls_debug_print_mpi.part.1+0x102>
                if( j > 0 )
 80105c2:	f1b9 0f00 	cmp.w	r9, #0
 80105c6:	d00e      	beq.n	80105e6 <mbedtls_debug_print_mpi.part.1+0x102>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 80105c8:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80105cc:	4a13      	ldr	r2, [pc, #76]	; (801061c <mbedtls_debug_print_mpi.part.1+0x138>)
 80105ce:	1928      	adds	r0, r5, r4
 80105d0:	f013 f868 	bl	80236a4 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 80105d4:	9500      	str	r5, [sp, #0]
 80105d6:	4653      	mov	r3, sl
 80105d8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80105dc:	f8db 0000 	ldr.w	r0, [fp]
 80105e0:	f7ff ff78 	bl	80104d4 <debug_send_line.isra.0>
                    idx = 0;
 80105e4:	9c05      	ldr	r4, [sp, #20]
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80105e6:	9a04      	ldr	r2, [sp, #16]
 80105e8:	68b3      	ldr	r3, [r6, #8]
 80105ea:	589b      	ldr	r3, [r3, r2]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80105ec:	4a0c      	ldr	r2, [pc, #48]	; (8010620 <mbedtls_debug_print_mpi.part.1+0x13c>)
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80105ee:	40fb      	lsrs	r3, r7
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80105f0:	a806      	add	r0, sp, #24
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80105f8:	4420      	add	r0, r4
 80105fa:	f013 f853 	bl	80236a4 <sniprintf>
 80105fe:	3403      	adds	r4, #3
            j++;
 8010600:	f109 0901 	add.w	r9, r9, #1
                zeros = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	3f08      	subs	r7, #8
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 8010608:	f117 0f08 	cmn.w	r7, #8
 801060c:	d1cd      	bne.n	80105aa <mbedtls_debug_print_mpi.part.1+0xc6>
    for( i = n + 1, j = 0; i > 0; i-- )
 801060e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010612:	e79e      	b.n	8010552 <mbedtls_debug_print_mpi.part.1+0x6e>
 8010614:	0802fa22 	.word	0x0802fa22
 8010618:	0802fa45 	.word	0x0802fa45
 801061c:	08030031 	.word	0x08030031
 8010620:	0802fa3f 	.word	0x0802fa3f

08010624 <mbedtls_debug_set_threshold>:
    debug_threshold = threshold;
 8010624:	4b01      	ldr	r3, [pc, #4]	; (801062c <mbedtls_debug_set_threshold+0x8>)
 8010626:	6018      	str	r0, [r3, #0]
}
 8010628:	4770      	bx	lr
 801062a:	bf00      	nop
 801062c:	200010c0 	.word	0x200010c0

08010630 <mbedtls_debug_print_msg>:
{
 8010630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010634:	460e      	mov	r6, r1
 8010636:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 801063a:	4617      	mov	r7, r2
 801063c:	4698      	mov	r8, r3
    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 801063e:	4605      	mov	r5, r0
 8010640:	b1f8      	cbz	r0, 8010682 <mbedtls_debug_print_msg+0x52>
 8010642:	6803      	ldr	r3, [r0, #0]
 8010644:	b1eb      	cbz	r3, 8010682 <mbedtls_debug_print_msg+0x52>
 8010646:	691b      	ldr	r3, [r3, #16]
 8010648:	b1db      	cbz	r3, 8010682 <mbedtls_debug_print_msg+0x52>
 801064a:	4b10      	ldr	r3, [pc, #64]	; (801068c <mbedtls_debug_print_msg+0x5c>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	428b      	cmp	r3, r1
 8010650:	db17      	blt.n	8010682 <mbedtls_debug_print_msg+0x52>
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010652:	ac04      	add	r4, sp, #16
    va_start( argp, format );
 8010654:	ab8b      	add	r3, sp, #556	; 0x22c
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010656:	9a8a      	ldr	r2, [sp, #552]	; 0x228
    va_start( argp, format );
 8010658:	9303      	str	r3, [sp, #12]
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 801065a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801065e:	4620      	mov	r0, r4
 8010660:	f014 fab0 	bl	8024bc4 <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 8010664:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8010668:	d804      	bhi.n	8010674 <mbedtls_debug_print_msg+0x44>
        str[ret]     = '\n';
 801066a:	230a      	movs	r3, #10
 801066c:	5423      	strb	r3, [r4, r0]
        str[ret + 1] = '\0';
 801066e:	4420      	add	r0, r4
 8010670:	2300      	movs	r3, #0
 8010672:	7043      	strb	r3, [r0, #1]
    debug_send_line( ssl, level, file, line, str );
 8010674:	9400      	str	r4, [sp, #0]
 8010676:	4643      	mov	r3, r8
 8010678:	463a      	mov	r2, r7
 801067a:	4631      	mov	r1, r6
 801067c:	6828      	ldr	r0, [r5, #0]
 801067e:	f7ff ff29 	bl	80104d4 <debug_send_line.isra.0>
}
 8010682:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 8010686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801068a:	bf00      	nop
 801068c:	200010c0 	.word	0x200010c0

08010690 <mbedtls_debug_print_ret>:
{
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	4617      	mov	r7, r2
 8010696:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 801069a:	6802      	ldr	r2, [r0, #0]
{
 801069c:	4698      	mov	r8, r3
 801069e:	4604      	mov	r4, r0
 80106a0:	460d      	mov	r5, r1
 80106a2:	9b89      	ldr	r3, [sp, #548]	; 0x224
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80106a4:	b1d2      	cbz	r2, 80106dc <mbedtls_debug_print_ret+0x4c>
 80106a6:	6912      	ldr	r2, [r2, #16]
 80106a8:	b1c2      	cbz	r2, 80106dc <mbedtls_debug_print_ret+0x4c>
 80106aa:	4a0e      	ldr	r2, [pc, #56]	; (80106e4 <mbedtls_debug_print_ret+0x54>)
 80106ac:	6812      	ldr	r2, [r2, #0]
 80106ae:	428a      	cmp	r2, r1
 80106b0:	db14      	blt.n	80106dc <mbedtls_debug_print_ret+0x4c>
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 80106b2:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 80106b6:	d011      	beq.n	80106dc <mbedtls_debug_print_ret+0x4c>
    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 80106b8:	425a      	negs	r2, r3
 80106ba:	ae02      	add	r6, sp, #8
 80106bc:	e9cd 3200 	strd	r3, r2, [sp]
 80106c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80106c4:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80106c6:	4a08      	ldr	r2, [pc, #32]	; (80106e8 <mbedtls_debug_print_ret+0x58>)
 80106c8:	4630      	mov	r0, r6
 80106ca:	f012 ffeb 	bl	80236a4 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 80106ce:	9600      	str	r6, [sp, #0]
 80106d0:	4643      	mov	r3, r8
 80106d2:	463a      	mov	r2, r7
 80106d4:	4629      	mov	r1, r5
 80106d6:	6820      	ldr	r0, [r4, #0]
 80106d8:	f7ff fefc 	bl	80104d4 <debug_send_line.isra.0>
}
 80106dc:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80106e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e4:	200010c0 	.word	0x200010c0
 80106e8:	0802fa49 	.word	0x0802fa49

080106ec <mbedtls_debug_print_buf>:
{
 80106ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f0:	4699      	mov	r9, r3
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80106f2:	6803      	ldr	r3, [r0, #0]
{
 80106f4:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80106f8:	4606      	mov	r6, r0
 80106fa:	460f      	mov	r7, r1
 80106fc:	4690      	mov	r8, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d03c      	beq.n	801077c <mbedtls_debug_print_buf+0x90>
 8010702:	691b      	ldr	r3, [r3, #16]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d039      	beq.n	801077c <mbedtls_debug_print_buf+0x90>
 8010708:	4b41      	ldr	r3, [pc, #260]	; (8010810 <mbedtls_debug_print_buf+0x124>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	428b      	cmp	r3, r1
 801070e:	db35      	blt.n	801077c <mbedtls_debug_print_buf+0x90>
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 8010710:	ac08      	add	r4, sp, #32
 8010712:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	4a3f      	ldr	r2, [pc, #252]	; (8010814 <mbedtls_debug_print_buf+0x128>)
 8010718:	9b92      	ldr	r3, [sp, #584]	; 0x248
 801071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801071e:	4620      	mov	r0, r4
 8010720:	f012 ffc0 	bl	80236a4 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010724:	464b      	mov	r3, r9
 8010726:	9400      	str	r4, [sp, #0]
 8010728:	4642      	mov	r2, r8
 801072a:	4639      	mov	r1, r7
 801072c:	6830      	ldr	r0, [r6, #0]
 801072e:	f7ff fed1 	bl	80104d4 <debug_send_line.isra.0>
    memset( txt, 0, sizeof( txt ) );
 8010732:	2211      	movs	r2, #17
 8010734:	2100      	movs	r1, #0
 8010736:	a803      	add	r0, sp, #12
 8010738:	f011 fdf9 	bl	802232e <memset>
 801073c:	9b93      	ldr	r3, [sp, #588]	; 0x24c
    idx = 0;
 801073e:	2400      	movs	r4, #0
 8010740:	f103 3bff 	add.w	fp, r3, #4294967295
    for( i = 0; i < len; i++ )
 8010744:	4625      	mov	r5, r4
 8010746:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8010748:	429d      	cmp	r5, r3
 801074a:	d11b      	bne.n	8010784 <mbedtls_debug_print_buf+0x98>
    if( len > 0 )
 801074c:	b1b5      	cbz	r5, 801077c <mbedtls_debug_print_buf+0x90>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 801074e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010824 <mbedtls_debug_print_buf+0x138>
 8010752:	ab08      	add	r3, sp, #32
 8010754:	1918      	adds	r0, r3, r4
        for( /* i = i */; i % 16 != 0; i++ )
 8010756:	072b      	lsls	r3, r5, #28
 8010758:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 801075c:	d14e      	bne.n	80107fc <mbedtls_debug_print_buf+0x110>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 801075e:	ad08      	add	r5, sp, #32
 8010760:	ab03      	add	r3, sp, #12
 8010762:	4a2d      	ldr	r2, [pc, #180]	; (8010818 <mbedtls_debug_print_buf+0x12c>)
 8010764:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010768:	1928      	adds	r0, r5, r4
 801076a:	f012 ff9b 	bl	80236a4 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 801076e:	9500      	str	r5, [sp, #0]
 8010770:	464b      	mov	r3, r9
 8010772:	4642      	mov	r2, r8
 8010774:	4639      	mov	r1, r7
 8010776:	6830      	ldr	r0, [r6, #0]
 8010778:	f7ff feac 	bl	80104d4 <debug_send_line.isra.0>
}
 801077c:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 8010780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( i >= 4096 )
 8010784:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8010788:	d03e      	beq.n	8010808 <mbedtls_debug_print_buf+0x11c>
        if( i % 16 == 0 )
 801078a:	f015 0a0f 	ands.w	sl, r5, #15
 801078e:	d11f      	bne.n	80107d0 <mbedtls_debug_print_buf+0xe4>
            if( i > 0 )
 8010790:	b1ad      	cbz	r5, 80107be <mbedtls_debug_print_buf+0xd2>
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8010792:	a808      	add	r0, sp, #32
 8010794:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010798:	ab03      	add	r3, sp, #12
 801079a:	4a1f      	ldr	r2, [pc, #124]	; (8010818 <mbedtls_debug_print_buf+0x12c>)
 801079c:	4420      	add	r0, r4
 801079e:	f012 ff81 	bl	80236a4 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 80107a2:	ab08      	add	r3, sp, #32
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	4642      	mov	r2, r8
 80107a8:	464b      	mov	r3, r9
 80107aa:	4639      	mov	r1, r7
 80107ac:	6830      	ldr	r0, [r6, #0]
 80107ae:	f7ff fe91 	bl	80104d4 <debug_send_line.isra.0>
                memset( txt, 0, sizeof( txt ) );
 80107b2:	2211      	movs	r2, #17
 80107b4:	4651      	mov	r1, sl
 80107b6:	a803      	add	r0, sp, #12
 80107b8:	f011 fdb9 	bl	802232e <memset>
                idx = 0;
 80107bc:	4654      	mov	r4, sl
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 80107be:	a808      	add	r0, sp, #32
 80107c0:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80107c4:	4420      	add	r0, r4
 80107c6:	462b      	mov	r3, r5
 80107c8:	4a14      	ldr	r2, [pc, #80]	; (801081c <mbedtls_debug_print_buf+0x130>)
 80107ca:	f012 ff6b 	bl	80236a4 <sniprintf>
 80107ce:	3406      	adds	r4, #6
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 80107d0:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80107d4:	4a12      	ldr	r2, [pc, #72]	; (8010820 <mbedtls_debug_print_buf+0x134>)
 80107d6:	a808      	add	r0, sp, #32
 80107d8:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80107dc:	4420      	add	r0, r4
 80107de:	f012 ff61 	bl	80236a4 <sniprintf>
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 80107e2:	f89b 3000 	ldrb.w	r3, [fp]
 80107e6:	f1a3 0220 	sub.w	r2, r3, #32
 80107ea:	2a5e      	cmp	r2, #94	; 0x5e
 80107ec:	aa03      	add	r2, sp, #12
 80107ee:	bf88      	it	hi
 80107f0:	232e      	movhi	r3, #46	; 0x2e
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 80107f2:	3403      	adds	r4, #3
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 80107f4:	f802 300a 	strb.w	r3, [r2, sl]
    for( i = 0; i < len; i++ )
 80107f8:	3501      	adds	r5, #1
 80107fa:	e7a4      	b.n	8010746 <mbedtls_debug_print_buf+0x5a>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 80107fc:	4652      	mov	r2, sl
 80107fe:	f012 ff51 	bl	80236a4 <sniprintf>
 8010802:	3403      	adds	r4, #3
        for( /* i = i */; i % 16 != 0; i++ )
 8010804:	3501      	adds	r5, #1
 8010806:	e7a4      	b.n	8010752 <mbedtls_debug_print_buf+0x66>
    if( len > 0 )
 8010808:	9b94      	ldr	r3, [sp, #592]	; 0x250
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1a7      	bne.n	801075e <mbedtls_debug_print_buf+0x72>
 801080e:	e7b5      	b.n	801077c <mbedtls_debug_print_buf+0x90>
 8010810:	200010c0 	.word	0x200010c0
 8010814:	0802fa65 	.word	0x0802fa65
 8010818:	0802fa7e 	.word	0x0802fa7e
 801081c:	0802fa84 	.word	0x0802fa84
 8010820:	0802fa3f 	.word	0x0802fa3f
 8010824:	0802d1b6 	.word	0x0802d1b6

08010828 <mbedtls_debug_print_mpi>:
{
 8010828:	b470      	push	{r4, r5, r6}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 801082a:	6804      	ldr	r4, [r0, #0]
{
 801082c:	9e04      	ldr	r6, [sp, #16]
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 801082e:	b14c      	cbz	r4, 8010844 <mbedtls_debug_print_mpi+0x1c>
 8010830:	6924      	ldr	r4, [r4, #16]
 8010832:	b13c      	cbz	r4, 8010844 <mbedtls_debug_print_mpi+0x1c>
 8010834:	b136      	cbz	r6, 8010844 <mbedtls_debug_print_mpi+0x1c>
 8010836:	4c04      	ldr	r4, [pc, #16]	; (8010848 <mbedtls_debug_print_mpi+0x20>)
 8010838:	6824      	ldr	r4, [r4, #0]
 801083a:	428c      	cmp	r4, r1
 801083c:	db02      	blt.n	8010844 <mbedtls_debug_print_mpi+0x1c>
}
 801083e:	bc70      	pop	{r4, r5, r6}
 8010840:	f7ff be50 	b.w	80104e4 <mbedtls_debug_print_mpi.part.1>
 8010844:	bc70      	pop	{r4, r5, r6}
 8010846:	4770      	bx	lr
 8010848:	200010c0 	.word	0x200010c0

0801084c <mbedtls_debug_print_ecp.part.2>:
void mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,
 801084c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010850:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
    mbedtls_snprintf( str, sizeof( str ), "%s(X)", text );
 8010854:	ac02      	add	r4, sp, #8
void mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,
 8010856:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
 8010858:	4606      	mov	r6, r0
 801085a:	460f      	mov	r7, r1
 801085c:	4690      	mov	r8, r2
 801085e:	4699      	mov	r9, r3
    mbedtls_snprintf( str, sizeof( str ), "%s(X)", text );
 8010860:	4a11      	ldr	r2, [pc, #68]	; (80108a8 <mbedtls_debug_print_ecp.part.2+0x5c>)
 8010862:	9b8a      	ldr	r3, [sp, #552]	; 0x228
 8010864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010868:	4620      	mov	r0, r4
 801086a:	f012 ff1b 	bl	80236a4 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->X );
 801086e:	e9cd 4500 	strd	r4, r5, [sp]
 8010872:	464b      	mov	r3, r9
 8010874:	4642      	mov	r2, r8
 8010876:	4639      	mov	r1, r7
 8010878:	4630      	mov	r0, r6
 801087a:	f7ff ffd5 	bl	8010828 <mbedtls_debug_print_mpi>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
 801087e:	350c      	adds	r5, #12
    mbedtls_snprintf( str, sizeof( str ), "%s(Y)", text );
 8010880:	9b8a      	ldr	r3, [sp, #552]	; 0x228
 8010882:	4a0a      	ldr	r2, [pc, #40]	; (80108ac <mbedtls_debug_print_ecp.part.2+0x60>)
 8010884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010888:	4620      	mov	r0, r4
 801088a:	f012 ff0b 	bl	80236a4 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
 801088e:	e9cd 4500 	strd	r4, r5, [sp]
 8010892:	464b      	mov	r3, r9
 8010894:	4642      	mov	r2, r8
 8010896:	4639      	mov	r1, r7
 8010898:	4630      	mov	r0, r6
 801089a:	f7ff ffc5 	bl	8010828 <mbedtls_debug_print_mpi>
}
 801089e:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 80108a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108a6:	bf00      	nop
 80108a8:	0802fa8b 	.word	0x0802fa8b
 80108ac:	0802fa91 	.word	0x0802fa91

080108b0 <mbedtls_debug_print_ecp>:
{
 80108b0:	b430      	push	{r4, r5}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80108b2:	6804      	ldr	r4, [r0, #0]
 80108b4:	b144      	cbz	r4, 80108c8 <mbedtls_debug_print_ecp+0x18>
 80108b6:	6924      	ldr	r4, [r4, #16]
 80108b8:	b134      	cbz	r4, 80108c8 <mbedtls_debug_print_ecp+0x18>
 80108ba:	4c04      	ldr	r4, [pc, #16]	; (80108cc <mbedtls_debug_print_ecp+0x1c>)
 80108bc:	6824      	ldr	r4, [r4, #0]
 80108be:	428c      	cmp	r4, r1
 80108c0:	db02      	blt.n	80108c8 <mbedtls_debug_print_ecp+0x18>
}
 80108c2:	bc30      	pop	{r4, r5}
 80108c4:	f7ff bfc2 	b.w	801084c <mbedtls_debug_print_ecp.part.2>
 80108c8:	bc30      	pop	{r4, r5}
 80108ca:	4770      	bx	lr
 80108cc:	200010c0 	.word	0x200010c0

080108d0 <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	4698      	mov	r8, r3
 80108d6:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 80108da:	6803      	ldr	r3, [r0, #0]
{
 80108dc:	f8dd b84c 	ldr.w	fp, [sp, #2124]	; 0x84c
 80108e0:	4604      	mov	r4, r0
 80108e2:	460d      	mov	r5, r1
 80108e4:	4616      	mov	r6, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d04a      	beq.n	8010980 <mbedtls_debug_print_crt+0xb0>
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d047      	beq.n	8010980 <mbedtls_debug_print_crt+0xb0>
 80108f0:	f1bb 0f00 	cmp.w	fp, #0
 80108f4:	d044      	beq.n	8010980 <mbedtls_debug_print_crt+0xb0>
 80108f6:	4b50      	ldr	r3, [pc, #320]	; (8010a38 <mbedtls_debug_print_crt+0x168>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	428b      	cmp	r3, r1
 80108fc:	db40      	blt.n	8010980 <mbedtls_debug_print_crt+0xb0>
    int i = 0;
 80108fe:	2300      	movs	r3, #0
 8010900:	9302      	str	r3, [sp, #8]
            memcpy( str, start, len );
 8010902:	f50d 7908 	add.w	r9, sp, #544	; 0x220

    while( crt != NULL )
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8010906:	9b02      	ldr	r3, [sp, #8]
 8010908:	4a4c      	ldr	r2, [pc, #304]	; (8010a3c <mbedtls_debug_print_crt+0x16c>)
 801090a:	3301      	adds	r3, #1
 801090c:	af08      	add	r7, sp, #32
 801090e:	9302      	str	r3, [sp, #8]
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010916:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 801091a:	4638      	mov	r0, r7
 801091c:	f012 fec2 	bl	80236a4 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8010920:	4643      	mov	r3, r8
 8010922:	4632      	mov	r2, r6
 8010924:	4629      	mov	r1, r5
 8010926:	6820      	ldr	r0, [r4, #0]
 8010928:	9700      	str	r7, [sp, #0]
 801092a:	f7ff fdd3 	bl	80104d4 <debug_send_line.isra.0>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 801092e:	4a44      	ldr	r2, [pc, #272]	; (8010a40 <mbedtls_debug_print_crt+0x170>)
 8010930:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8010934:	465b      	mov	r3, fp
 8010936:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 801093a:	f00f fc89 	bl	8020250 <mbedtls_x509_crt_info>
 801093e:	f50d 6284 	add.w	r2, sp, #1056	; 0x420
    start = text;
 8010942:	4611      	mov	r1, r2
 8010944:	f240 1aff 	movw	sl, #511	; 0x1ff
    for( cur = text; *cur != '\0'; cur++ )
 8010948:	4617      	mov	r7, r2
 801094a:	f817 3b01 	ldrb.w	r3, [r7], #1
 801094e:	b9db      	cbnz	r3, 8010988 <mbedtls_debug_print_crt+0xb8>
    memset( items, 0, sizeof( items ) );
 8010950:	4619      	mov	r1, r3
 8010952:	2224      	movs	r2, #36	; 0x24
 8010954:	4648      	mov	r0, r9
 8010956:	f011 fcea 	bl	802232e <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 801095a:	4649      	mov	r1, r9
 801095c:	f10b 00bc 	add.w	r0, fp, #188	; 0xbc
 8010960:	f004 ff90 	bl	8015884 <mbedtls_pk_debug>
 8010964:	b360      	cbz	r0, 80109c0 <mbedtls_debug_print_crt+0xf0>
        debug_send_line( ssl, level, file, line,
 8010966:	4b37      	ldr	r3, [pc, #220]	; (8010a44 <mbedtls_debug_print_crt+0x174>)
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	4632      	mov	r2, r6
 801096c:	4643      	mov	r3, r8
 801096e:	4629      	mov	r1, r5
 8010970:	6820      	ldr	r0, [r4, #0]
 8010972:	f7ff fdaf 	bl	80104d4 <debug_send_line.isra.0>
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 8010976:	f8db b130 	ldr.w	fp, [fp, #304]	; 0x130
    while( crt != NULL )
 801097a:	f1bb 0f00 	cmp.w	fp, #0
 801097e:	d1c2      	bne.n	8010906 <mbedtls_debug_print_crt+0x36>
    }
}
 8010980:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 8010984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *cur == '\n' )
 8010988:	2b0a      	cmp	r3, #10
 801098a:	d117      	bne.n	80109bc <mbedtls_debug_print_crt+0xec>
            size_t len = cur - start + 1;
 801098c:	1a53      	subs	r3, r2, r1
 801098e:	3301      	adds	r3, #1
 8010990:	4553      	cmp	r3, sl
 8010992:	bf28      	it	cs
 8010994:	4653      	movcs	r3, sl
            memcpy( str, start, len );
 8010996:	461a      	mov	r2, r3
 8010998:	4648      	mov	r0, r9
 801099a:	9303      	str	r3, [sp, #12]
 801099c:	f011 fca3 	bl	80222e6 <memcpy>
            str[len] = '\0';
 80109a0:	9b03      	ldr	r3, [sp, #12]
            debug_send_line( ssl, level, file, line, str );
 80109a2:	6820      	ldr	r0, [r4, #0]
            str[len] = '\0';
 80109a4:	f04f 0200 	mov.w	r2, #0
 80109a8:	f809 2003 	strb.w	r2, [r9, r3]
            debug_send_line( ssl, level, file, line, str );
 80109ac:	4629      	mov	r1, r5
 80109ae:	f8cd 9000 	str.w	r9, [sp]
 80109b2:	4643      	mov	r3, r8
 80109b4:	4632      	mov	r2, r6
 80109b6:	f7ff fd8d 	bl	80104d4 <debug_send_line.isra.0>
            start = cur + 1;
 80109ba:	4639      	mov	r1, r7
    start = text;
 80109bc:	463a      	mov	r2, r7
 80109be:	e7c3      	b.n	8010948 <mbedtls_debug_print_crt+0x78>
 80109c0:	46ca      	mov	sl, r9
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 80109c2:	f89a 3000 	ldrb.w	r3, [sl]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d0d5      	beq.n	8010976 <mbedtls_debug_print_crt+0xa6>
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 80109ca:	f8da 3004 	ldr.w	r3, [sl, #4]
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	af04      	add	r7, sp, #16
 80109d2:	4b1d      	ldr	r3, [pc, #116]	; (8010a48 <mbedtls_debug_print_crt+0x178>)
 80109d4:	4a1d      	ldr	r2, [pc, #116]	; (8010a4c <mbedtls_debug_print_crt+0x17c>)
 80109d6:	2110      	movs	r1, #16
 80109d8:	4638      	mov	r0, r7
 80109da:	f012 fe63 	bl	80236a4 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 80109de:	2300      	movs	r3, #0
 80109e0:	73fb      	strb	r3, [r7, #15]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 80109e2:	f89a 3000 	ldrb.w	r3, [sl]
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d10f      	bne.n	8010a0a <mbedtls_debug_print_crt+0x13a>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 80109ea:	f8da 3008 	ldr.w	r3, [sl, #8]
 80109ee:	4632      	mov	r2, r6
 80109f0:	e9cd 7300 	strd	r7, r3, [sp]
 80109f4:	4629      	mov	r1, r5
 80109f6:	4643      	mov	r3, r8
 80109f8:	4620      	mov	r0, r4
 80109fa:	f7ff ff15 	bl	8010828 <mbedtls_debug_print_mpi>
 80109fe:	f10a 0a0c 	add.w	sl, sl, #12
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8010a02:	ab91      	add	r3, sp, #580	; 0x244
 8010a04:	459a      	cmp	sl, r3
 8010a06:	d1dc      	bne.n	80109c2 <mbedtls_debug_print_crt+0xf2>
 8010a08:	e7b5      	b.n	8010976 <mbedtls_debug_print_crt+0xa6>
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
 8010a0a:	2b02      	cmp	r3, #2
 8010a0c:	d10a      	bne.n	8010a24 <mbedtls_debug_print_crt+0x154>
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
 8010a0e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010a12:	4632      	mov	r2, r6
 8010a14:	e9cd 7300 	strd	r7, r3, [sp]
 8010a18:	4629      	mov	r1, r5
 8010a1a:	4643      	mov	r3, r8
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f7ff ff47 	bl	80108b0 <mbedtls_debug_print_ecp>
 8010a22:	e7ec      	b.n	80109fe <mbedtls_debug_print_crt+0x12e>
            debug_send_line( ssl, level, file, line,
 8010a24:	4b0a      	ldr	r3, [pc, #40]	; (8010a50 <mbedtls_debug_print_crt+0x180>)
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	4632      	mov	r2, r6
 8010a2a:	4643      	mov	r3, r8
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	6820      	ldr	r0, [r4, #0]
 8010a30:	f7ff fd50 	bl	80104d4 <debug_send_line.isra.0>
 8010a34:	e7e3      	b.n	80109fe <mbedtls_debug_print_crt+0x12e>
 8010a36:	bf00      	nop
 8010a38:	200010c0 	.word	0x200010c0
 8010a3c:	0802fa97 	.word	0x0802fa97
 8010a40:	0802fdc9 	.word	0x0802fdc9
 8010a44:	0802faa0 	.word	0x0802faa0
 8010a48:	0802fab4 	.word	0x0802fab4
 8010a4c:	0802faba 	.word	0x0802faba
 8010a50:	0802fabf 	.word	0x0802fabf

08010a54 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 8010a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a58:	b08c      	sub	sp, #48	; 0x30
 8010a5a:	4616      	mov	r6, r2
 8010a5c:	4605      	mov	r5, r0
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
 8010a5e:	a803      	add	r0, sp, #12
{
 8010a60:	460f      	mov	r7, r1
 8010a62:	4698      	mov	r8, r3
    mbedtls_ecp_point_init( &P );
 8010a64:	f001 f86a 	bl	8011b3c <mbedtls_ecp_point_init>

    /*
     * Make sure Q is a valid pubkey before using it
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 8010a68:	4631      	mov	r1, r6
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	f001 fe7a 	bl	8012764 <mbedtls_ecp_check_pubkey>
 8010a70:	4604      	mov	r4, r0
 8010a72:	b9a0      	cbnz	r0, 8010a9e <mbedtls_ecdh_compute_shared+0x4a>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );
 8010a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a76:	9301      	str	r3, [sp, #4]
 8010a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	4642      	mov	r2, r8
 8010a7e:	4633      	mov	r3, r6
 8010a80:	a903      	add	r1, sp, #12
 8010a82:	4628      	mov	r0, r5
 8010a84:	f001 ff52 	bl	801292c <mbedtls_ecp_mul>
 8010a88:	4604      	mov	r4, r0
 8010a8a:	b940      	cbnz	r0, 8010a9e <mbedtls_ecdh_compute_shared+0x4a>

    if( mbedtls_ecp_is_zero( &P ) )
 8010a8c:	a803      	add	r0, sp, #12
 8010a8e:	f001 fd83 	bl	8012598 <mbedtls_ecp_is_zero>
 8010a92:	b958      	cbnz	r0, 8010aac <mbedtls_ecdh_compute_shared+0x58>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 8010a94:	a903      	add	r1, sp, #12
 8010a96:	4638      	mov	r0, r7
 8010a98:	f7fd fdba 	bl	800e610 <mbedtls_mpi_copy>
 8010a9c:	4604      	mov	r4, r0

cleanup:
    mbedtls_ecp_point_free( &P );
 8010a9e:	a803      	add	r0, sp, #12
 8010aa0:	f001 f866 	bl	8011b70 <mbedtls_ecp_point_free>

    return( ret );
}
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	b00c      	add	sp, #48	; 0x30
 8010aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010aac:	4c00      	ldr	r4, [pc, #0]	; (8010ab0 <mbedtls_ecdh_compute_shared+0x5c>)
 8010aae:	e7f6      	b.n	8010a9e <mbedtls_ecdh_compute_shared+0x4a>
 8010ab0:	ffffb080 	.word	0xffffb080

08010ab4 <mbedtls_ecdh_init>:
/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 8010ab4:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010ab8:	2100      	movs	r1, #0
 8010aba:	f011 bc38 	b.w	802232e <memset>

08010abe <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
 8010abe:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	b1f8      	cbz	r0, 8010b04 <mbedtls_ecdh_free+0x46>
        return;

    mbedtls_ecp_group_free( &ctx->grp );
 8010ac4:	f001 f858 	bl	8011b78 <mbedtls_ecp_group_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 8010ac8:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8010acc:	f001 f850 	bl	8011b70 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 8010ad0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8010ad4:	f001 f84c 	bl	8011b70 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vi  );
 8010ad8:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8010adc:	f001 f848 	bl	8011b70 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf  );
 8010ae0:	f504 7082 	add.w	r0, r4, #260	; 0x104
 8010ae4:	f001 f844 	bl	8011b70 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->d  );
 8010ae8:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8010aec:	f7fd fd08 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->z  );
 8010af0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010af4:	f7fd fd04 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->_d );
 8010af8:	f504 7094 	add.w	r0, r4, #296	; 0x128
}
 8010afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->_d );
 8010b00:	f7fd bcfe 	b.w	800e500 <mbedtls_mpi_free>
}
 8010b04:	bd10      	pop	{r4, pc}

08010b06 <mbedtls_ecdh_read_params>:
 *          ECPoint         public;
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                      const unsigned char **buf, const unsigned char *end )
{
 8010b06:	b570      	push	{r4, r5, r6, lr}
 8010b08:	4616      	mov	r6, r2
    int ret;

    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 8010b0a:	680a      	ldr	r2, [r1, #0]
 8010b0c:	1ab2      	subs	r2, r6, r2
{
 8010b0e:	4605      	mov	r5, r0
 8010b10:	460c      	mov	r4, r1
    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 8010b12:	f001 fe03 	bl	801271c <mbedtls_ecp_tls_read_group>
 8010b16:	b948      	cbnz	r0, 8010b2c <mbedtls_ecdh_read_params+0x26>
        return( ret );

    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 8010b18:	6823      	ldr	r3, [r4, #0]
 8010b1a:	4622      	mov	r2, r4
 8010b1c:	1af3      	subs	r3, r6, r3
 8010b1e:	f105 01ac 	add.w	r1, r5, #172	; 0xac
 8010b22:	4628      	mov	r0, r5
                != 0 )
        return( ret );

    return( 0 );
}
 8010b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 8010b28:	f001 bdc8 	b.w	80126bc <mbedtls_ecp_tls_read_point>
}
 8010b2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010b30 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 8010b30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010b34:	4617      	mov	r7, r2
 8010b36:	4698      	mov	r8, r3
 8010b38:	460e      	mov	r6, r1
 8010b3a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL || ctx->grp.pbits == 0 )
 8010b3e:	4604      	mov	r4, r0
 8010b40:	b1b0      	cbz	r0, 8010b70 <mbedtls_ecdh_make_public+0x40>
 8010b42:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010b44:	b1a1      	cbz	r1, 8010b70 <mbedtls_ecdh_make_public+0x40>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 8010b46:	f100 0588 	add.w	r5, r0, #136	; 0x88
    return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );
 8010b4a:	9200      	str	r2, [sp, #0]
 8010b4c:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8010b50:	462a      	mov	r2, r5
 8010b52:	f001 ffd1 	bl	8012af8 <mbedtls_ecp_gen_keypair>
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 8010b56:	b960      	cbnz	r0, 8010b72 <mbedtls_ecdh_make_public+0x42>
                != 0 )
        return( ret );

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 8010b58:	e9cd 7808 	strd	r7, r8, [sp, #32]
 8010b5c:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 8010b60:	4633      	mov	r3, r6
 8010b62:	4629      	mov	r1, r5
 8010b64:	4620      	mov	r0, r4
                                olen, buf, blen );
}
 8010b66:	b002      	add	sp, #8
 8010b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 8010b6c:	f001 bdbe 	b.w	80126ec <mbedtls_ecp_tls_write_point>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010b70:	4801      	ldr	r0, [pc, #4]	; (8010b78 <mbedtls_ecdh_make_public+0x48>)
}
 8010b72:	b002      	add	sp, #8
 8010b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b78:	ffffb080 	.word	0xffffb080

08010b7c <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 8010b7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010b80:	4616      	mov	r6, r2
 8010b82:	4698      	mov	r8, r3
 8010b84:	460f      	mov	r7, r1
 8010b86:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL )
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	b918      	cbnz	r0, 8010b96 <mbedtls_ecdh_calc_secret+0x1a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010b8e:	4812      	ldr	r0, [pc, #72]	; (8010bd8 <mbedtls_ecdh_calc_secret+0x5c>)
    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
}
 8010b90:	b002      	add	sp, #8
 8010b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,
 8010b96:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
 8010b9a:	e9cd 3200 	strd	r3, r2, [sp]
 8010b9e:	4629      	mov	r1, r5
 8010ba0:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 8010ba4:	f100 02ac 	add.w	r2, r0, #172	; 0xac
 8010ba8:	f7ff ff54 	bl	8010a54 <mbedtls_ecdh_compute_shared>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d1ef      	bne.n	8010b90 <mbedtls_ecdh_calc_secret+0x14>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	f7fd fdf3 	bl	800e79c <mbedtls_mpi_size>
 8010bb6:	4540      	cmp	r0, r8
 8010bb8:	d8e9      	bhi.n	8010b8e <mbedtls_ecdh_calc_secret+0x12>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8010bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010bbc:	f013 0207 	ands.w	r2, r3, #7
 8010bc0:	bf18      	it	ne
 8010bc2:	2201      	movne	r2, #1
 8010bc4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8010bc8:	4631      	mov	r1, r6
 8010bca:	4628      	mov	r0, r5
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8010bcc:	603a      	str	r2, [r7, #0]
}
 8010bce:	b002      	add	sp, #8
 8010bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8010bd4:	f7fd be1b 	b.w	800e80e <mbedtls_mpi_write_binary>
 8010bd8:	ffffb080 	.word	0xffffb080

08010bdc <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 8010bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8010bde:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8010be0:	3407      	adds	r4, #7
 8010be2:	08e4      	lsrs	r4, r4, #3
    size_t use_size = blen > n_size ? n_size : blen;
 8010be4:	429c      	cmp	r4, r3
{
 8010be6:	460e      	mov	r6, r1
    size_t use_size = blen > n_size ? n_size : blen;
 8010be8:	bf28      	it	cs
 8010bea:	461c      	movcs	r4, r3
{
 8010bec:	4611      	mov	r1, r2
 8010bee:	4605      	mov	r5, r0

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8010bf0:	4622      	mov	r2, r4
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7fd fdd8 	bl	800e7a8 <mbedtls_mpi_read_binary>
 8010bf8:	4607      	mov	r7, r0
 8010bfa:	b950      	cbnz	r0, 8010c12 <derive_mpi+0x36>
    if( use_size * 8 > grp->nbits )
 8010bfc:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8010bfe:	00e4      	lsls	r4, r4, #3
 8010c00:	428c      	cmp	r4, r1
 8010c02:	d808      	bhi.n	8010c16 <derive_mpi+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 8010c04:	354c      	adds	r5, #76	; 0x4c
 8010c06:	4629      	mov	r1, r5
 8010c08:	4630      	mov	r0, r6
 8010c0a:	f7fd ff3b 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	da09      	bge.n	8010c26 <derive_mpi+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
 8010c12:	4638      	mov	r0, r7
 8010c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 8010c16:	1a61      	subs	r1, r4, r1
 8010c18:	4630      	mov	r0, r6
 8010c1a:	f7fd fe63 	bl	800e8e4 <mbedtls_mpi_shift_r>
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d0f0      	beq.n	8010c04 <derive_mpi+0x28>
cleanup:
 8010c22:	4607      	mov	r7, r0
    return( ret );
 8010c24:	e7f5      	b.n	8010c12 <derive_mpi+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8010c26:	462a      	mov	r2, r5
 8010c28:	4631      	mov	r1, r6
 8010c2a:	4630      	mov	r0, r6
}
 8010c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8010c30:	f7fe b841 	b.w	800ecb6 <mbedtls_mpi_sub_mpi>

08010c34 <mbedtls_ecdsa_sign>:
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8010c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c38:	469b      	mov	fp, r3
    int ret, key_tries, sign_tries, blind_tries;
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8010c3a:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 8010c3c:	b097      	sub	sp, #92	; 0x5c
 8010c3e:	4605      	mov	r5, r0
 8010c40:	4689      	mov	r9, r1
 8010c42:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f000 80ad 	beq.w	8010da4 <mbedtls_ecdsa_sign+0x170>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_ecp_point_init( &R );
 8010c4a:	a80d      	add	r0, sp, #52	; 0x34
 8010c4c:	f000 ff76 	bl	8011b3c <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8010c50:	a804      	add	r0, sp, #16
 8010c52:	f7fd fc4d 	bl	800e4f0 <mbedtls_mpi_init>
 8010c56:	a807      	add	r0, sp, #28
 8010c58:	f7fd fc4a 	bl	800e4f0 <mbedtls_mpi_init>
 8010c5c:	a80a      	add	r0, sp, #40	; 0x28
 8010c5e:	f7fd fc47 	bl	800e4f0 <mbedtls_mpi_init>
 8010c62:	f04f 080c 	mov.w	r8, #12
         */
        key_tries = 0;
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 8010c66:	f105 074c 	add.w	r7, r5, #76	; 0x4c
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8010c6a:	260c      	movs	r6, #12
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
 8010c6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	aa0d      	add	r2, sp, #52	; 0x34
 8010c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c74:	a904      	add	r1, sp, #16
 8010c76:	4628      	mov	r0, r5
 8010c78:	f001 ff3e 	bl	8012af8 <mbedtls_ecp_gen_keypair>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d17c      	bne.n	8010d7c <mbedtls_ecdsa_sign+0x148>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 8010c82:	463a      	mov	r2, r7
 8010c84:	a90d      	add	r1, sp, #52	; 0x34
 8010c86:	4648      	mov	r0, r9
 8010c88:	f7fe fa7b 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d174      	bne.n	8010d7c <mbedtls_ecdsa_sign+0x148>

            if( key_tries++ > 10 )
 8010c92:	3e01      	subs	r6, #1
 8010c94:	f000 8084 	beq.w	8010da0 <mbedtls_ecdsa_sign+0x16c>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }
        }
        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );
 8010c98:	4601      	mov	r1, r0
 8010c9a:	4648      	mov	r0, r9
 8010c9c:	f7fd ff32 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	d0e3      	beq.n	8010c6c <mbedtls_ecdsa_sign+0x38>

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8010ca4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8010ca8:	a907      	add	r1, sp, #28
 8010caa:	4628      	mov	r0, r5
 8010cac:	f7ff ff96 	bl	8010bdc <derive_mpi>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d162      	bne.n	8010d7c <mbedtls_ecdsa_sign+0x148>
 8010cb6:	f04f 0a1f 	mov.w	sl, #31
         * avoiding a potential timing leak.
         */
        blind_tries = 0;
        do
        {
            size_t n_size = ( grp->nbits + 7 ) / 8;
 8010cba:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8010cbc:	3607      	adds	r6, #7
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );
 8010cbe:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8010cc2:	08f1      	lsrs	r1, r6, #3
 8010cc4:	a80a      	add	r0, sp, #40	; 0x28
 8010cc6:	f7fe fd49 	bl	800f75c <mbedtls_mpi_fill_random>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d155      	bne.n	8010d7c <mbedtls_ecdsa_sign+0x148>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );
 8010cd0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8010cd2:	f026 0607 	bic.w	r6, r6, #7
 8010cd6:	1a71      	subs	r1, r6, r1
 8010cd8:	a80a      	add	r0, sp, #40	; 0x28
 8010cda:	f7fd fe03 	bl	800e8e4 <mbedtls_mpi_shift_r>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d14b      	bne.n	8010d7c <mbedtls_ecdsa_sign+0x148>

            /* See mbedtls_ecp_gen_keypair() */
            if( ++blind_tries > 30 )
 8010ce4:	f1ba 0a01 	subs.w	sl, sl, #1
 8010ce8:	d05e      	beq.n	8010da8 <mbedtls_ecdsa_sign+0x174>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 8010cea:	2101      	movs	r1, #1
 8010cec:	a80a      	add	r0, sp, #40	; 0x28
 8010cee:	f7fd ff09 	bl	800eb04 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	dbe1      	blt.n	8010cba <mbedtls_ecdsa_sign+0x86>
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	a80a      	add	r0, sp, #40	; 0x28
 8010cfa:	f7fd fec3 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	dadb      	bge.n	8010cba <mbedtls_ecdsa_sign+0x86>

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );
 8010d02:	465a      	mov	r2, fp
 8010d04:	4649      	mov	r1, r9
 8010d06:	4620      	mov	r0, r4
 8010d08:	f7fe f80e 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	bba8      	cbnz	r0, 8010d7c <mbedtls_ecdsa_sign+0x148>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 8010d10:	a907      	add	r1, sp, #28
 8010d12:	4622      	mov	r2, r4
 8010d14:	4608      	mov	r0, r1
 8010d16:	f7fd ffac 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	bb70      	cbnz	r0, 8010d7c <mbedtls_ecdsa_sign+0x148>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 8010d1e:	a907      	add	r1, sp, #28
 8010d20:	aa0a      	add	r2, sp, #40	; 0x28
 8010d22:	4608      	mov	r0, r1
 8010d24:	f7fe f800 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	bb38      	cbnz	r0, 8010d7c <mbedtls_ecdsa_sign+0x148>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );
 8010d2c:	a904      	add	r1, sp, #16
 8010d2e:	aa0a      	add	r2, sp, #40	; 0x28
 8010d30:	4608      	mov	r0, r1
 8010d32:	f7fd fff9 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8010d36:	4603      	mov	r3, r0
 8010d38:	bb00      	cbnz	r0, 8010d7c <mbedtls_ecdsa_sign+0x148>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );
 8010d3a:	463a      	mov	r2, r7
 8010d3c:	a904      	add	r1, sp, #16
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f7fe fd25 	bl	800f78e <mbedtls_mpi_inv_mod>
 8010d44:	4603      	mov	r3, r0
 8010d46:	b9c8      	cbnz	r0, 8010d7c <mbedtls_ecdsa_sign+0x148>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 8010d48:	aa07      	add	r2, sp, #28
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f7fd ffeb 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8010d52:	4603      	mov	r3, r0
 8010d54:	b990      	cbnz	r0, 8010d7c <mbedtls_ecdsa_sign+0x148>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8010d56:	463a      	mov	r2, r7
 8010d58:	4621      	mov	r1, r4
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f7fe fa11 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8010d60:	4603      	mov	r3, r0
 8010d62:	b958      	cbnz	r0, 8010d7c <mbedtls_ecdsa_sign+0x148>

        if( sign_tries++ > 10 )
 8010d64:	f1b8 0801 	subs.w	r8, r8, #1
 8010d68:	d01a      	beq.n	8010da0 <mbedtls_ecdsa_sign+0x16c>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
            goto cleanup;
        }
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 8010d6a:	4601      	mov	r1, r0
 8010d6c:	9003      	str	r0, [sp, #12]
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f7fd fec8 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8010d74:	9b03      	ldr	r3, [sp, #12]
 8010d76:	2800      	cmp	r0, #0
 8010d78:	f43f af77 	beq.w	8010c6a <mbedtls_ecdsa_sign+0x36>

cleanup:
    mbedtls_ecp_point_free( &R );
 8010d7c:	a80d      	add	r0, sp, #52	; 0x34
 8010d7e:	9303      	str	r3, [sp, #12]
 8010d80:	f000 fef6 	bl	8011b70 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 8010d84:	a804      	add	r0, sp, #16
 8010d86:	f7fd fbbb 	bl	800e500 <mbedtls_mpi_free>
 8010d8a:	a807      	add	r0, sp, #28
 8010d8c:	f7fd fbb8 	bl	800e500 <mbedtls_mpi_free>
 8010d90:	a80a      	add	r0, sp, #40	; 0x28
 8010d92:	f7fd fbb5 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
 8010d96:	9b03      	ldr	r3, [sp, #12]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	b017      	add	sp, #92	; 0x5c
 8010d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 8010da0:	4b02      	ldr	r3, [pc, #8]	; (8010dac <mbedtls_ecdsa_sign+0x178>)
 8010da2:	e7eb      	b.n	8010d7c <mbedtls_ecdsa_sign+0x148>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010da4:	4b02      	ldr	r3, [pc, #8]	; (8010db0 <mbedtls_ecdsa_sign+0x17c>)
 8010da6:	e7f7      	b.n	8010d98 <mbedtls_ecdsa_sign+0x164>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8010da8:	4b00      	ldr	r3, [pc, #0]	; (8010dac <mbedtls_ecdsa_sign+0x178>)
 8010daa:	e7f5      	b.n	8010d98 <mbedtls_ecdsa_sign+0x164>
 8010dac:	ffffb300 	.word	0xffffb300
 8010db0:	ffffb080 	.word	0xffffb080

08010db4 <mbedtls_ecdsa_sign_det>:
 * Deterministic signature wrapper
 */
int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                    mbedtls_md_type_t md_alg )
{
 8010db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db8:	b0c3      	sub	sp, #268	; 0x10c
    int ret;
    mbedtls_hmac_drbg_context rng_ctx;
    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 8010dba:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 8010dbc:	4606      	mov	r6, r0
    const mbedtls_md_info_t *md_info;
    mbedtls_mpi h;

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8010dbe:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
{
 8010dc2:	468a      	mov	sl, r1
 8010dc4:	4693      	mov	fp, r2
 8010dc6:	461f      	mov	r7, r3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8010dc8:	f003 fb58 	bl	801447c <mbedtls_md_info_from_type>
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 8010dcc:	3407      	adds	r4, #7
 8010dce:	08e4      	lsrs	r4, r4, #3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8010dd0:	4681      	mov	r9, r0
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d03b      	beq.n	8010e4e <mbedtls_ecdsa_sign_det+0x9a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &h );
 8010dd6:	a805      	add	r0, sp, #20
    mbedtls_hmac_drbg_init( &rng_ctx );
 8010dd8:	ad08      	add	r5, sp, #32
    mbedtls_mpi_init( &h );
 8010dda:	f7fd fb89 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_hmac_drbg_init( &rng_ctx );
 8010dde:	4628      	mov	r0, r5
 8010de0:	f003 fa39 	bl	8014256 <mbedtls_hmac_drbg_init>

    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
 8010de4:	4622      	mov	r2, r4
 8010de6:	a921      	add	r1, sp, #132	; 0x84
 8010de8:	4638      	mov	r0, r7
 8010dea:	f7fd fd10 	bl	800e80e <mbedtls_mpi_write_binary>
 8010dee:	4680      	mov	r8, r0
 8010df0:	bb18      	cbnz	r0, 8010e3a <mbedtls_ecdsa_sign_det+0x86>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
 8010df2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8010df4:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 8010df6:	a905      	add	r1, sp, #20
 8010df8:	4630      	mov	r0, r6
 8010dfa:	f7ff feef 	bl	8010bdc <derive_mpi>
 8010dfe:	4680      	mov	r8, r0
 8010e00:	b9d8      	cbnz	r0, 8010e3a <mbedtls_ecdsa_sign_det+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
 8010e02:	ab21      	add	r3, sp, #132	; 0x84
 8010e04:	4622      	mov	r2, r4
 8010e06:	1919      	adds	r1, r3, r4
 8010e08:	a805      	add	r0, sp, #20
 8010e0a:	f7fd fd00 	bl	800e80e <mbedtls_mpi_write_binary>
 8010e0e:	4680      	mov	r8, r0
 8010e10:	b998      	cbnz	r0, 8010e3a <mbedtls_ecdsa_sign_det+0x86>
    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );
 8010e12:	0063      	lsls	r3, r4, #1
 8010e14:	aa21      	add	r2, sp, #132	; 0x84
 8010e16:	4649      	mov	r1, r9
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f003 fa6e 	bl	80142fa <mbedtls_hmac_drbg_seed_buf>

    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
 8010e1e:	4b0d      	ldr	r3, [pc, #52]	; (8010e54 <mbedtls_ecdsa_sign_det+0xa0>)
 8010e20:	9302      	str	r3, [sp, #8]
 8010e22:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8010e24:	9301      	str	r3, [sp, #4]
 8010e26:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	9503      	str	r5, [sp, #12]
 8010e2c:	463b      	mov	r3, r7
 8010e2e:	465a      	mov	r2, fp
 8010e30:	4651      	mov	r1, sl
 8010e32:	4630      	mov	r0, r6
 8010e34:	f7ff fefe 	bl	8010c34 <mbedtls_ecdsa_sign>
 8010e38:	4680      	mov	r8, r0
                      mbedtls_hmac_drbg_random, &rng_ctx );

cleanup:
    mbedtls_hmac_drbg_free( &rng_ctx );
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f003 fb1a 	bl	8014474 <mbedtls_hmac_drbg_free>
    mbedtls_mpi_free( &h );
 8010e40:	a805      	add	r0, sp, #20
 8010e42:	f7fd fb5d 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
}
 8010e46:	4640      	mov	r0, r8
 8010e48:	b043      	add	sp, #268	; 0x10c
 8010e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010e4e:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8010e58 <mbedtls_ecdsa_sign_det+0xa4>
 8010e52:	e7f8      	b.n	8010e46 <mbedtls_ecdsa_sign_det+0x92>
 8010e54:	08014465 	.word	0x08014465
 8010e58:	ffffb080 	.word	0xffffb080

08010e5c <mbedtls_ecdsa_verify>:
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                  const unsigned char *buf, size_t blen,
                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)
{
 8010e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e60:	b099      	sub	sp, #100	; 0x64
 8010e62:	4606      	mov	r6, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;

    mbedtls_ecp_point_init( &R );
 8010e64:	a80f      	add	r0, sp, #60	; 0x3c
{
 8010e66:	4698      	mov	r8, r3
 8010e68:	460f      	mov	r7, r1
 8010e6a:	4691      	mov	r9, r2
    mbedtls_ecp_point_init( &R );
 8010e6c:	f000 fe66 	bl	8011b3c <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 8010e70:	a803      	add	r0, sp, #12
 8010e72:	f7fd fb3d 	bl	800e4f0 <mbedtls_mpi_init>
 8010e76:	a806      	add	r0, sp, #24
 8010e78:	f7fd fb3a 	bl	800e4f0 <mbedtls_mpi_init>
 8010e7c:	a809      	add	r0, sp, #36	; 0x24
 8010e7e:	f7fd fb37 	bl	800e4f0 <mbedtls_mpi_init>
 8010e82:	a80c      	add	r0, sp, #48	; 0x30
 8010e84:	f7fd fb34 	bl	800e4f0 <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8010e88:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d07e      	beq.n	8010f8c <mbedtls_ecdsa_verify+0x130>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 8010e8e:	2101      	movs	r1, #1
 8010e90:	9820      	ldr	r0, [sp, #128]	; 0x80
 8010e92:	f7fd fe37 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8010e96:	2800      	cmp	r0, #0
 8010e98:	db64      	blt.n	8010f64 <mbedtls_ecdsa_verify+0x108>
 8010e9a:	f106 054c 	add.w	r5, r6, #76	; 0x4c
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	9820      	ldr	r0, [sp, #128]	; 0x80
 8010ea2:	f7fd fdef 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	da5c      	bge.n	8010f64 <mbedtls_ecdsa_verify+0x108>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8010eaa:	2101      	movs	r1, #1
 8010eac:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010eae:	f7fd fe29 	bl	800eb04 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	db56      	blt.n	8010f64 <mbedtls_ecdsa_verify+0x108>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010eba:	f7fd fde3 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	da50      	bge.n	8010f64 <mbedtls_ecdsa_verify+0x108>
    }

    /*
     * Additional precaution: make sure Q is valid
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 8010ec2:	4641      	mov	r1, r8
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	f001 fc4d 	bl	8012764 <mbedtls_ecp_check_pubkey>
 8010eca:	4604      	mov	r4, r0
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	d14a      	bne.n	8010f66 <mbedtls_ecdsa_verify+0x10a>

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8010ed0:	464b      	mov	r3, r9
 8010ed2:	463a      	mov	r2, r7
 8010ed4:	a903      	add	r1, sp, #12
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	f7ff fe80 	bl	8010bdc <derive_mpi>
 8010edc:	4604      	mov	r4, r0
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d141      	bne.n	8010f66 <mbedtls_ecdsa_verify+0x10a>

    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 8010ee2:	462a      	mov	r2, r5
 8010ee4:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010ee6:	a806      	add	r0, sp, #24
 8010ee8:	f7fe fc51 	bl	800f78e <mbedtls_mpi_inv_mod>
 8010eec:	4604      	mov	r4, r0
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d139      	bne.n	8010f66 <mbedtls_ecdsa_verify+0x10a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );
 8010ef2:	aa06      	add	r2, sp, #24
 8010ef4:	a903      	add	r1, sp, #12
 8010ef6:	a809      	add	r0, sp, #36	; 0x24
 8010ef8:	f7fd ff16 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8010efc:	4604      	mov	r4, r0
 8010efe:	bb90      	cbnz	r0, 8010f66 <mbedtls_ecdsa_verify+0x10a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );
 8010f00:	a909      	add	r1, sp, #36	; 0x24
 8010f02:	462a      	mov	r2, r5
 8010f04:	4608      	mov	r0, r1
 8010f06:	f7fe f93c 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	bb58      	cbnz	r0, 8010f66 <mbedtls_ecdsa_verify+0x10a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );
 8010f0e:	af0c      	add	r7, sp, #48	; 0x30
 8010f10:	aa06      	add	r2, sp, #24
 8010f12:	9920      	ldr	r1, [sp, #128]	; 0x80
 8010f14:	4638      	mov	r0, r7
 8010f16:	f7fd ff07 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	bb18      	cbnz	r0, 8010f66 <mbedtls_ecdsa_verify+0x10a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );
 8010f1e:	462a      	mov	r2, r5
 8010f20:	4639      	mov	r1, r7
 8010f22:	4638      	mov	r0, r7
 8010f24:	f7fe f92d 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8010f28:	4604      	mov	r4, r0
 8010f2a:	b9e0      	cbnz	r0, 8010f66 <mbedtls_ecdsa_verify+0x10a>
     * Step 5: R = u1 G + u2 Q
     *
     * Since we're not using any secret data, no need to pass a RNG to
     * mbedtls_ecp_mul() for countermesures.
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );
 8010f2c:	e9cd 7800 	strd	r7, r8, [sp]
 8010f30:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8010f34:	aa09      	add	r2, sp, #36	; 0x24
 8010f36:	a90f      	add	r1, sp, #60	; 0x3c
 8010f38:	4630      	mov	r0, r6
 8010f3a:	f001 fd5d 	bl	80129f8 <mbedtls_ecp_muladd>
 8010f3e:	4604      	mov	r4, r0
 8010f40:	b988      	cbnz	r0, 8010f66 <mbedtls_ecdsa_verify+0x10a>

    if( mbedtls_ecp_is_zero( &R ) )
 8010f42:	a80f      	add	r0, sp, #60	; 0x3c
 8010f44:	f001 fb28 	bl	8012598 <mbedtls_ecp_is_zero>
 8010f48:	b960      	cbnz	r0, 8010f64 <mbedtls_ecdsa_verify+0x108>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 8010f4a:	a90f      	add	r1, sp, #60	; 0x3c
 8010f4c:	462a      	mov	r2, r5
 8010f4e:	4608      	mov	r0, r1
 8010f50:	f7fe f917 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8010f54:	4604      	mov	r4, r0
 8010f56:	b930      	cbnz	r0, 8010f66 <mbedtls_ecdsa_verify+0x10a>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 8010f58:	9920      	ldr	r1, [sp, #128]	; 0x80
 8010f5a:	a80f      	add	r0, sp, #60	; 0x3c
 8010f5c:	f7fd fd92 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8010f60:	4604      	mov	r4, r0
 8010f62:	b100      	cbz	r0, 8010f66 <mbedtls_ecdsa_verify+0x10a>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 8010f64:	4c0a      	ldr	r4, [pc, #40]	; (8010f90 <mbedtls_ecdsa_verify+0x134>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 8010f66:	a80f      	add	r0, sp, #60	; 0x3c
 8010f68:	f000 fe02 	bl	8011b70 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 8010f6c:	a803      	add	r0, sp, #12
 8010f6e:	f7fd fac7 	bl	800e500 <mbedtls_mpi_free>
 8010f72:	a806      	add	r0, sp, #24
 8010f74:	f7fd fac4 	bl	800e500 <mbedtls_mpi_free>
 8010f78:	a809      	add	r0, sp, #36	; 0x24
 8010f7a:	f7fd fac1 	bl	800e500 <mbedtls_mpi_free>
 8010f7e:	a80c      	add	r0, sp, #48	; 0x30
 8010f80:	f7fd fabe 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
}
 8010f84:	4620      	mov	r0, r4
 8010f86:	b019      	add	sp, #100	; 0x64
 8010f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010f8c:	4c01      	ldr	r4, [pc, #4]	; (8010f94 <mbedtls_ecdsa_verify+0x138>)
 8010f8e:	e7f9      	b.n	8010f84 <mbedtls_ecdsa_verify+0x128>
 8010f90:	ffffb200 	.word	0xffffb200
 8010f94:	ffffb080 	.word	0xffffb080

08010f98 <mbedtls_ecdsa_write_signature>:
int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng )
{
 8010f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f9a:	b0b1      	sub	sp, #196	; 0xc4
 8010f9c:	4604      	mov	r4, r0
    int ret;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 8010f9e:	a806      	add	r0, sp, #24
{
 8010fa0:	460f      	mov	r7, r1
 8010fa2:	4615      	mov	r5, r2
 8010fa4:	461e      	mov	r6, r3
    mbedtls_mpi_init( &r );
 8010fa6:	f7fd faa3 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 8010faa:	a809      	add	r0, sp, #36	; 0x24
 8010fac:	f7fd faa0 	bl	800e4f0 <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    (void) f_rng;
    (void) p_rng;

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,
 8010fb0:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8010fb4:	9500      	str	r5, [sp, #0]
 8010fb6:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 8010fba:	aa09      	add	r2, sp, #36	; 0x24
 8010fbc:	a906      	add	r1, sp, #24
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7ff fef8 	bl	8010db4 <mbedtls_ecdsa_sign_det>
 8010fc4:	4607      	mov	r7, r0
 8010fc6:	bb68      	cbnz	r0, 8011024 <mbedtls_ecdsa_write_signature+0x8c>
    unsigned char *p = buf + sizeof( buf );
 8010fc8:	ad30      	add	r5, sp, #192	; 0xc0
 8010fca:	f10d 03bd 	add.w	r3, sp, #189	; 0xbd
 8010fce:	f845 3dac 	str.w	r3, [r5, #-172]!
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 8010fd2:	aa09      	add	r2, sp, #36	; 0x24
 8010fd4:	a90c      	add	r1, sp, #48	; 0x30
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f7fd f818 	bl	800e00c <mbedtls_asn1_write_mpi>
 8010fdc:	1e04      	subs	r4, r0, #0
 8010fde:	db20      	blt.n	8011022 <mbedtls_ecdsa_write_signature+0x8a>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 8010fe0:	aa06      	add	r2, sp, #24
 8010fe2:	a90c      	add	r1, sp, #48	; 0x30
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	f7fd f811 	bl	800e00c <mbedtls_asn1_write_mpi>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	db23      	blt.n	8011036 <mbedtls_ecdsa_write_signature+0x9e>
 8010fee:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8010ff0:	4632      	mov	r2, r6
 8010ff2:	a90c      	add	r1, sp, #48	; 0x30
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	f7fc ff87 	bl	800df08 <mbedtls_asn1_write_len>
 8010ffa:	1e04      	subs	r4, r0, #0
 8010ffc:	db11      	blt.n	8011022 <mbedtls_ecdsa_write_signature+0x8a>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8010ffe:	2230      	movs	r2, #48	; 0x30
 8011000:	eb0d 0102 	add.w	r1, sp, r2
 8011004:	4628      	mov	r0, r5
 8011006:	f7fc fff3 	bl	800dff0 <mbedtls_asn1_write_tag>
 801100a:	2800      	cmp	r0, #0
 801100c:	db13      	blt.n	8011036 <mbedtls_ecdsa_write_signature+0x9e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 801100e:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8011010:	4404      	add	r4, r0
    memcpy( sig, p, len );
 8011012:	4622      	mov	r2, r4
 8011014:	9905      	ldr	r1, [sp, #20]
 8011016:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8011018:	f011 f965 	bl	80222e6 <memcpy>
    *slen = len;
 801101c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801101e:	601c      	str	r4, [r3, #0]
    return( 0 );
 8011020:	463c      	mov	r4, r7

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#endif

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 8011022:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
 8011024:	a806      	add	r0, sp, #24
 8011026:	f7fd fa6b 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 801102a:	a809      	add	r0, sp, #36	; 0x24
 801102c:	f7fd fa68 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
}
 8011030:	4638      	mov	r0, r7
 8011032:	b031      	add	sp, #196	; 0xc4
 8011034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8011036:	4604      	mov	r4, r0
 8011038:	e7f3      	b.n	8011022 <mbedtls_ecdsa_write_signature+0x8a>
	...

0801103c <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 801103c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011040:	b08b      	sub	sp, #44	; 0x2c
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
    size_t len;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 8011042:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
 8011044:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
 8011046:	9302      	str	r3, [sp, #8]
{
 8011048:	4604      	mov	r4, r0
    mbedtls_mpi_init( &s );
 801104a:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 801104c:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 801104e:	441d      	add	r5, r3
{
 8011050:	4688      	mov	r8, r1
 8011052:	4691      	mov	r9, r2
    mbedtls_mpi_init( &r );
 8011054:	f7fd fa4c 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 8011058:	4630      	mov	r0, r6
 801105a:	f7fd fa49 	bl	800e4f0 <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801105e:	2330      	movs	r3, #48	; 0x30
 8011060:	aa03      	add	r2, sp, #12
 8011062:	4629      	mov	r1, r5
 8011064:	a802      	add	r0, sp, #8
 8011066:	f7fc fe08 	bl	800dc7a <mbedtls_asn1_get_tag>
 801106a:	b158      	cbz	r0, 8011084 <mbedtls_ecdsa_read_signature+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 801106c:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80

    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 8011070:	4638      	mov	r0, r7
 8011072:	f7fd fa45 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8011076:	4630      	mov	r0, r6
 8011078:	f7fd fa42 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
}
 801107c:	4620      	mov	r0, r4
 801107e:	b00b      	add	sp, #44	; 0x2c
 8011080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( p + len != end )
 8011084:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011088:	4413      	add	r3, r2
 801108a:	429d      	cmp	r5, r3
 801108c:	d11f      	bne.n	80110ce <mbedtls_ecdsa_read_signature+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 801108e:	463a      	mov	r2, r7
 8011090:	4629      	mov	r1, r5
 8011092:	a802      	add	r0, sp, #8
 8011094:	f7fc fe41 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8011098:	2800      	cmp	r0, #0
 801109a:	d1e7      	bne.n	801106c <mbedtls_ecdsa_read_signature+0x30>
 801109c:	4632      	mov	r2, r6
 801109e:	4629      	mov	r1, r5
 80110a0:	a802      	add	r0, sp, #8
 80110a2:	f7fc fe3a 	bl	800dd1a <mbedtls_asn1_get_mpi>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d1e0      	bne.n	801106c <mbedtls_ecdsa_read_signature+0x30>
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
 80110aa:	f104 0388 	add.w	r3, r4, #136	; 0x88
 80110ae:	4620      	mov	r0, r4
 80110b0:	e9cd 7600 	strd	r7, r6, [sp]
 80110b4:	464a      	mov	r2, r9
 80110b6:	4641      	mov	r1, r8
 80110b8:	f7ff fed0 	bl	8010e5c <mbedtls_ecdsa_verify>
 80110bc:	4604      	mov	r4, r0
 80110be:	2800      	cmp	r0, #0
 80110c0:	d1d6      	bne.n	8011070 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 80110c2:	9a02      	ldr	r2, [sp, #8]
 80110c4:	4b03      	ldr	r3, [pc, #12]	; (80110d4 <mbedtls_ecdsa_read_signature+0x98>)
 80110c6:	42aa      	cmp	r2, r5
 80110c8:	bf18      	it	ne
 80110ca:	461c      	movne	r4, r3
 80110cc:	e7d0      	b.n	8011070 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 80110ce:	4c02      	ldr	r4, [pc, #8]	; (80110d8 <mbedtls_ecdsa_read_signature+0x9c>)
 80110d0:	e7ce      	b.n	8011070 <mbedtls_ecdsa_read_signature+0x34>
 80110d2:	bf00      	nop
 80110d4:	ffffb400 	.word	0xffffb400
 80110d8:	ffffb01a 	.word	0xffffb01a

080110dc <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 80110dc:	b570      	push	{r4, r5, r6, lr}
 80110de:	4605      	mov	r5, r0
 80110e0:	460e      	mov	r6, r1
    int ret;

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80110e2:	f000 fda5 	bl	8011c30 <mbedtls_ecp_group_copy>
 80110e6:	4604      	mov	r4, r0
 80110e8:	b978      	cbnz	r0, 801110a <mbedtls_ecdsa_from_keypair+0x2e>
 80110ea:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 80110ee:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 80110f2:	f7fd fa8d 	bl	800e610 <mbedtls_mpi_copy>
 80110f6:	4604      	mov	r4, r0
 80110f8:	b938      	cbnz	r0, 801110a <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80110fa:	f106 0188 	add.w	r1, r6, #136	; 0x88
 80110fe:	f105 0088 	add.w	r0, r5, #136	; 0x88
 8011102:	f000 fd7f 	bl	8011c04 <mbedtls_ecp_copy>
 8011106:	4604      	mov	r4, r0
 8011108:	b110      	cbz	r0, 8011110 <mbedtls_ecdsa_from_keypair+0x34>
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    mbedtls_ecp_keypair_free( ctx );
 801110a:	4628      	mov	r0, r5
 801110c:	f000 fd6a 	bl	8011be4 <mbedtls_ecp_keypair_free>
}
 8011110:	4620      	mov	r0, r4
 8011112:	bd70      	pop	{r4, r5, r6, pc}

08011114 <mbedtls_ecdsa_init>:
    mbedtls_ecp_keypair_init( ctx );
 8011114:	f000 bd1c 	b.w	8011b50 <mbedtls_ecp_keypair_init>

08011118 <mbedtls_ecdsa_free>:
    mbedtls_ecp_keypair_free( ctx );
 8011118:	f000 bd64 	b.w	8011be4 <mbedtls_ecp_keypair_free>

0801111c <ecp_get_type>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
 801111c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801111e:	b12b      	cbz	r3, 801112c <ecp_get_type+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
 8011120:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011122:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 8011124:	bf0c      	ite	eq
 8011126:	2002      	moveq	r0, #2
 8011128:	2001      	movne	r0, #1
 801112a:	4770      	bx	lr
        return( ECP_TYPE_NONE );
 801112c:	4618      	mov	r0, r3
}
 801112e:	4770      	bx	lr

08011130 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 8011130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011132:	460c      	mov	r4, r1
 8011134:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 8011136:	340c      	adds	r4, #12
    mbedtls_mpi_init( &mQY );
 8011138:	a801      	add	r0, sp, #4
{
 801113a:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 801113c:	f7fd f9d8 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 8011140:	1d29      	adds	r1, r5, #4
 8011142:	4622      	mov	r2, r4
 8011144:	a801      	add	r0, sp, #4
 8011146:	f7fd fdb6 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 801114a:	4605      	mov	r5, r0
 801114c:	b968      	cbnz	r0, 801116a <ecp_safe_invert_jac+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 801114e:	4601      	mov	r1, r0
 8011150:	4620      	mov	r0, r4
 8011152:	f7fd fcd7 	bl	800eb04 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 8011156:	a901      	add	r1, sp, #4
 8011158:	2800      	cmp	r0, #0
 801115a:	bf0c      	ite	eq
 801115c:	2200      	moveq	r2, #0
 801115e:	f006 0201 	andne.w	r2, r6, #1
 8011162:	4620      	mov	r0, r4
 8011164:	f7fd fa7e 	bl	800e664 <mbedtls_mpi_safe_cond_assign>
 8011168:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 801116a:	a801      	add	r0, sp, #4
 801116c:	f7fd f9c8 	bl	800e500 <mbedtls_mpi_free>

    return( ret );
}
 8011170:	4628      	mov	r0, r5
 8011172:	b004      	add	sp, #16
 8011174:	bd70      	pop	{r4, r5, r6, pc}

08011176 <ecp_select_comb>:
 * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char t_len,
                            unsigned char i )
{
 8011176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801117a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801117e:	4680      	mov	r8, r0
 8011180:	460e      	mov	r6, r1
 8011182:	4699      	mov	r9, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 8011184:	f3c7 0a45 	ubfx	sl, r7, #1, #6
 8011188:	4615      	mov	r5, r2
 801118a:	2400      	movs	r4, #0

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < t_len; j++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 801118c:	f101 0b0c 	add.w	fp, r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 8011190:	b2e3      	uxtb	r3, r4
 8011192:	eba3 020a 	sub.w	r2, r3, sl
 8011196:	4253      	negs	r3, r2
 8011198:	4153      	adcs	r3, r2
 801119a:	461a      	mov	r2, r3
 801119c:	4629      	mov	r1, r5
 801119e:	4630      	mov	r0, r6
 80111a0:	9301      	str	r3, [sp, #4]
 80111a2:	f7fd fa5f 	bl	800e664 <mbedtls_mpi_safe_cond_assign>
 80111a6:	b9a8      	cbnz	r0, 80111d4 <ecp_select_comb+0x5e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 80111a8:	9b01      	ldr	r3, [sp, #4]
 80111aa:	f105 010c 	add.w	r1, r5, #12
 80111ae:	461a      	mov	r2, r3
 80111b0:	4658      	mov	r0, fp
 80111b2:	f7fd fa57 	bl	800e664 <mbedtls_mpi_safe_cond_assign>
 80111b6:	b968      	cbnz	r0, 80111d4 <ecp_select_comb+0x5e>
 80111b8:	3401      	adds	r4, #1
    for( j = 0; j < t_len; j++ )
 80111ba:	b2e3      	uxtb	r3, r4
 80111bc:	4599      	cmp	r9, r3
 80111be:	f105 0524 	add.w	r5, r5, #36	; 0x24
 80111c2:	d8e5      	bhi.n	8011190 <ecp_select_comb+0x1a>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 80111c4:	09fa      	lsrs	r2, r7, #7
 80111c6:	4631      	mov	r1, r6
 80111c8:	4640      	mov	r0, r8

cleanup:
    return( ret );
}
 80111ca:	b003      	add	sp, #12
 80111cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 80111d0:	f7ff bfae 	b.w	8011130 <ecp_safe_invert_jac>
}
 80111d4:	b003      	add	sp, #12
 80111d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080111dc <ecp_modp>:
    if( grp->modp == NULL )
 80111dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 80111de:	b570      	push	{r4, r5, r6, lr}
 80111e0:	4604      	mov	r4, r0
 80111e2:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 80111e4:	b92b      	cbnz	r3, 80111f2 <ecp_modp+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 80111e6:	1d0a      	adds	r2, r1, #4
}
 80111e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 80111ec:	4601      	mov	r1, r0
 80111ee:	f7fd bfc8 	b.w	800f182 <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80111f2:	6803      	ldr	r3, [r0, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	db09      	blt.n	801120c <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 80111f8:	4620      	mov	r0, r4
 80111fa:	f7fd faaf 	bl	800e75c <mbedtls_mpi_bitlen>
 80111fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8011200:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8011204:	d908      	bls.n	8011218 <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8011206:	4e17      	ldr	r6, [pc, #92]	; (8011264 <ecp_modp+0x88>)
}
 8011208:	4630      	mov	r0, r6
 801120a:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 801120c:	2100      	movs	r1, #0
 801120e:	f7fd fc79 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011212:	2800      	cmp	r0, #0
 8011214:	d0f0      	beq.n	80111f8 <ecp_modp+0x1c>
 8011216:	e7f6      	b.n	8011206 <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 8011218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801121a:	4620      	mov	r0, r4
 801121c:	4798      	blx	r3
 801121e:	4606      	mov	r6, r0
 8011220:	2800      	cmp	r0, #0
 8011222:	d1f1      	bne.n	8011208 <ecp_modp+0x2c>
 8011224:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 8011226:	6823      	ldr	r3, [r4, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	da04      	bge.n	8011236 <ecp_modp+0x5a>
 801122c:	2100      	movs	r1, #0
 801122e:	4620      	mov	r0, r4
 8011230:	f7fd fc68 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011234:	b968      	cbnz	r0, 8011252 <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 8011236:	4629      	mov	r1, r5
 8011238:	4620      	mov	r0, r4
 801123a:	f7fd fc23 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 801123e:	2800      	cmp	r0, #0
 8011240:	dbe2      	blt.n	8011208 <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8011242:	462a      	mov	r2, r5
 8011244:	4621      	mov	r1, r4
 8011246:	4620      	mov	r0, r4
 8011248:	f7fd fcd5 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 801124c:	2800      	cmp	r0, #0
 801124e:	d0f2      	beq.n	8011236 <ecp_modp+0x5a>
 8011250:	e006      	b.n	8011260 <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 8011252:	462a      	mov	r2, r5
 8011254:	4621      	mov	r1, r4
 8011256:	4620      	mov	r0, r4
 8011258:	f7fd fd0b 	bl	800ec72 <mbedtls_mpi_add_mpi>
 801125c:	2800      	cmp	r0, #0
 801125e:	d0e2      	beq.n	8011226 <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8011260:	4606      	mov	r6, r0
 8011262:	e7d1      	b.n	8011208 <ecp_modp+0x2c>
 8011264:	ffffb080 	.word	0xffffb080

08011268 <ecp_double_jac>:
{
 8011268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbl_count++;
 801126c:	4db2      	ldr	r5, [pc, #712]	; (8011538 <ecp_double_jac+0x2d0>)
 801126e:	682b      	ldr	r3, [r5, #0]
{
 8011270:	b08c      	sub	sp, #48	; 0x30
    dbl_count++;
 8011272:	3301      	adds	r3, #1
{
 8011274:	4606      	mov	r6, r0
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 8011276:	4668      	mov	r0, sp
    dbl_count++;
 8011278:	602b      	str	r3, [r5, #0]
{
 801127a:	4689      	mov	r9, r1
 801127c:	4690      	mov	r8, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 801127e:	f7fd f937 	bl	800e4f0 <mbedtls_mpi_init>
 8011282:	a803      	add	r0, sp, #12
 8011284:	f7fd f934 	bl	800e4f0 <mbedtls_mpi_init>
 8011288:	a806      	add	r0, sp, #24
 801128a:	f7fd f931 	bl	800e4f0 <mbedtls_mpi_init>
 801128e:	a809      	add	r0, sp, #36	; 0x24
 8011290:	f7fd f92e 	bl	800e4f0 <mbedtls_mpi_init>
    if( grp->A.p == NULL )
 8011294:	69b3      	ldr	r3, [r6, #24]
 8011296:	2b00      	cmp	r3, #0
 8011298:	f040 817c 	bne.w	8011594 <ecp_double_jac+0x32c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 801129c:	f108 0218 	add.w	r2, r8, #24
 80112a0:	4611      	mov	r1, r2
 80112a2:	a803      	add	r0, sp, #12
 80112a4:	f7fd fd40 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80112a8:	4604      	mov	r4, r0
 80112aa:	2800      	cmp	r0, #0
 80112ac:	f040 814f 	bne.w	801154e <ecp_double_jac+0x2e6>
 80112b0:	4631      	mov	r1, r6
 80112b2:	a803      	add	r0, sp, #12
 80112b4:	f7ff ff92 	bl	80111dc <ecp_modp>
 80112b8:	4604      	mov	r4, r0
 80112ba:	2800      	cmp	r0, #0
 80112bc:	f040 8147 	bne.w	801154e <ecp_double_jac+0x2e6>
 80112c0:	686b      	ldr	r3, [r5, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80112c2:	aa03      	add	r2, sp, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80112c4:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80112c6:	4641      	mov	r1, r8
 80112c8:	a806      	add	r0, sp, #24
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80112ca:	606b      	str	r3, [r5, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80112cc:	f7fd fcd1 	bl	800ec72 <mbedtls_mpi_add_mpi>
 80112d0:	4604      	mov	r4, r0
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f040 813b 	bne.w	801154e <ecp_double_jac+0x2e6>
 80112d8:	1d37      	adds	r7, r6, #4
 80112da:	4639      	mov	r1, r7
 80112dc:	a806      	add	r0, sp, #24
 80112de:	f7fd fbd1 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 80112e2:	2800      	cmp	r0, #0
 80112e4:	f280 812a 	bge.w	801153c <ecp_double_jac+0x2d4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 80112e8:	aa03      	add	r2, sp, #12
 80112ea:	4641      	mov	r1, r8
 80112ec:	a809      	add	r0, sp, #36	; 0x24
 80112ee:	f7fd fce2 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 80112f2:	4604      	mov	r4, r0
 80112f4:	2800      	cmp	r0, #0
 80112f6:	f040 812a 	bne.w	801154e <ecp_double_jac+0x2e6>
 80112fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	f2c0 8136 	blt.w	801156e <ecp_double_jac+0x306>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8011302:	aa09      	add	r2, sp, #36	; 0x24
 8011304:	a906      	add	r1, sp, #24
 8011306:	a803      	add	r0, sp, #12
 8011308:	f7fd fd0e 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801130c:	4604      	mov	r4, r0
 801130e:	2800      	cmp	r0, #0
 8011310:	f040 811d 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011314:	4631      	mov	r1, r6
 8011316:	a803      	add	r0, sp, #12
 8011318:	f7ff ff60 	bl	80111dc <ecp_modp>
 801131c:	4604      	mov	r4, r0
 801131e:	2800      	cmp	r0, #0
 8011320:	f040 8115 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011324:	686b      	ldr	r3, [r5, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011326:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8011328:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 801132a:	a903      	add	r1, sp, #12
 801132c:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 801132e:	606b      	str	r3, [r5, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011330:	f7fd fd64 	bl	800edfc <mbedtls_mpi_mul_int>
 8011334:	4604      	mov	r4, r0
 8011336:	2800      	cmp	r0, #0
 8011338:	f040 8109 	bne.w	801154e <ecp_double_jac+0x2e6>
 801133c:	4639      	mov	r1, r7
 801133e:	4668      	mov	r0, sp
 8011340:	f7fd fba0 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8011344:	2800      	cmp	r0, #0
 8011346:	f280 811f 	bge.w	8011588 <ecp_double_jac+0x320>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 801134a:	f108 0a0c 	add.w	sl, r8, #12
 801134e:	4652      	mov	r2, sl
 8011350:	4651      	mov	r1, sl
 8011352:	a806      	add	r0, sp, #24
 8011354:	f7fd fce8 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011358:	4604      	mov	r4, r0
 801135a:	2800      	cmp	r0, #0
 801135c:	f040 80f7 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011360:	4631      	mov	r1, r6
 8011362:	a806      	add	r0, sp, #24
 8011364:	f7ff ff3a 	bl	80111dc <ecp_modp>
 8011368:	4604      	mov	r4, r0
 801136a:	2800      	cmp	r0, #0
 801136c:	f040 80ef 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011370:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011372:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 8011374:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011376:	a806      	add	r0, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 8011378:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 801137a:	f7fd fa6b 	bl	800e854 <mbedtls_mpi_shift_l>
 801137e:	4604      	mov	r4, r0
 8011380:	2800      	cmp	r0, #0
 8011382:	f040 80e4 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011386:	1d37      	adds	r7, r6, #4
 8011388:	4639      	mov	r1, r7
 801138a:	a806      	add	r0, sp, #24
 801138c:	f7fd fb7a 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8011390:	2800      	cmp	r0, #0
 8011392:	f280 8180 	bge.w	8011696 <ecp_double_jac+0x42e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 8011396:	aa06      	add	r2, sp, #24
 8011398:	4641      	mov	r1, r8
 801139a:	a803      	add	r0, sp, #12
 801139c:	f7fd fcc4 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80113a0:	4604      	mov	r4, r0
 80113a2:	2800      	cmp	r0, #0
 80113a4:	f040 80d3 	bne.w	801154e <ecp_double_jac+0x2e6>
 80113a8:	4631      	mov	r1, r6
 80113aa:	a803      	add	r0, sp, #12
 80113ac:	f7ff ff16 	bl	80111dc <ecp_modp>
 80113b0:	4604      	mov	r4, r0
 80113b2:	2800      	cmp	r0, #0
 80113b4:	f040 80cb 	bne.w	801154e <ecp_double_jac+0x2e6>
 80113b8:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80113ba:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 80113bc:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80113be:	a803      	add	r0, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 80113c0:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80113c2:	f7fd fa47 	bl	800e854 <mbedtls_mpi_shift_l>
 80113c6:	4604      	mov	r4, r0
 80113c8:	2800      	cmp	r0, #0
 80113ca:	f040 80c0 	bne.w	801154e <ecp_double_jac+0x2e6>
 80113ce:	4639      	mov	r1, r7
 80113d0:	a803      	add	r0, sp, #12
 80113d2:	f7fd fb57 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	f280 8167 	bge.w	80116aa <ecp_double_jac+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80113dc:	aa06      	add	r2, sp, #24
 80113de:	4611      	mov	r1, r2
 80113e0:	a809      	add	r0, sp, #36	; 0x24
 80113e2:	f7fd fca1 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80113e6:	4604      	mov	r4, r0
 80113e8:	2800      	cmp	r0, #0
 80113ea:	f040 80b0 	bne.w	801154e <ecp_double_jac+0x2e6>
 80113ee:	4631      	mov	r1, r6
 80113f0:	a809      	add	r0, sp, #36	; 0x24
 80113f2:	f7ff fef3 	bl	80111dc <ecp_modp>
 80113f6:	4604      	mov	r4, r0
 80113f8:	2800      	cmp	r0, #0
 80113fa:	f040 80a8 	bne.w	801154e <ecp_double_jac+0x2e6>
 80113fe:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011400:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 8011402:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011404:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 8011406:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011408:	f7fd fa24 	bl	800e854 <mbedtls_mpi_shift_l>
 801140c:	4604      	mov	r4, r0
 801140e:	2800      	cmp	r0, #0
 8011410:	f040 809d 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011414:	4639      	mov	r1, r7
 8011416:	a809      	add	r0, sp, #36	; 0x24
 8011418:	f7fd fb34 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 801141c:	2800      	cmp	r0, #0
 801141e:	f280 814a 	bge.w	80116b6 <ecp_double_jac+0x44e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 8011422:	466a      	mov	r2, sp
 8011424:	4669      	mov	r1, sp
 8011426:	a806      	add	r0, sp, #24
 8011428:	f7fd fc7e 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801142c:	4604      	mov	r4, r0
 801142e:	2800      	cmp	r0, #0
 8011430:	f040 808d 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011434:	4631      	mov	r1, r6
 8011436:	a806      	add	r0, sp, #24
 8011438:	f7ff fed0 	bl	80111dc <ecp_modp>
 801143c:	4604      	mov	r4, r0
 801143e:	2800      	cmp	r0, #0
 8011440:	f040 8085 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011444:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011446:	a906      	add	r1, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 8011448:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 801144a:	aa03      	add	r2, sp, #12
 801144c:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 801144e:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011450:	f7fd fc31 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011454:	4604      	mov	r4, r0
 8011456:	2800      	cmp	r0, #0
 8011458:	d179      	bne.n	801154e <ecp_double_jac+0x2e6>
 801145a:	9b06      	ldr	r3, [sp, #24]
 801145c:	2b00      	cmp	r3, #0
 801145e:	f2c0 8130 	blt.w	80116c2 <ecp_double_jac+0x45a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011462:	a906      	add	r1, sp, #24
 8011464:	aa03      	add	r2, sp, #12
 8011466:	4608      	mov	r0, r1
 8011468:	f7fd fc25 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 801146c:	4604      	mov	r4, r0
 801146e:	2800      	cmp	r0, #0
 8011470:	d16d      	bne.n	801154e <ecp_double_jac+0x2e6>
 8011472:	9b06      	ldr	r3, [sp, #24]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f2c0 8131 	blt.w	80116dc <ecp_double_jac+0x474>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 801147a:	a903      	add	r1, sp, #12
 801147c:	aa06      	add	r2, sp, #24
 801147e:	4608      	mov	r0, r1
 8011480:	f7fd fc19 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011484:	4604      	mov	r4, r0
 8011486:	2800      	cmp	r0, #0
 8011488:	d161      	bne.n	801154e <ecp_double_jac+0x2e6>
 801148a:	9b03      	ldr	r3, [sp, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	f2c0 8132 	blt.w	80116f6 <ecp_double_jac+0x48e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8011492:	a903      	add	r1, sp, #12
 8011494:	466a      	mov	r2, sp
 8011496:	4608      	mov	r0, r1
 8011498:	f7fd fc46 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801149c:	4604      	mov	r4, r0
 801149e:	2800      	cmp	r0, #0
 80114a0:	d155      	bne.n	801154e <ecp_double_jac+0x2e6>
 80114a2:	4631      	mov	r1, r6
 80114a4:	a803      	add	r0, sp, #12
 80114a6:	f7ff fe99 	bl	80111dc <ecp_modp>
 80114aa:	4604      	mov	r4, r0
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d14e      	bne.n	801154e <ecp_double_jac+0x2e6>
 80114b0:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80114b2:	a903      	add	r1, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 80114b4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80114b6:	aa09      	add	r2, sp, #36	; 0x24
 80114b8:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 80114ba:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80114bc:	f7fd fbfb 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 80114c0:	4604      	mov	r4, r0
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d143      	bne.n	801154e <ecp_double_jac+0x2e6>
 80114c6:	9b03      	ldr	r3, [sp, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f2c0 8121 	blt.w	8011710 <ecp_double_jac+0x4a8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80114ce:	f108 0218 	add.w	r2, r8, #24
 80114d2:	4651      	mov	r1, sl
 80114d4:	a809      	add	r0, sp, #36	; 0x24
 80114d6:	f7fd fc27 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80114da:	4604      	mov	r4, r0
 80114dc:	2800      	cmp	r0, #0
 80114de:	d136      	bne.n	801154e <ecp_double_jac+0x2e6>
 80114e0:	4631      	mov	r1, r6
 80114e2:	a809      	add	r0, sp, #36	; 0x24
 80114e4:	f7ff fe7a 	bl	80111dc <ecp_modp>
 80114e8:	4604      	mov	r4, r0
 80114ea:	bb80      	cbnz	r0, 801154e <ecp_double_jac+0x2e6>
 80114ec:	4a12      	ldr	r2, [pc, #72]	; (8011538 <ecp_double_jac+0x2d0>)
 80114ee:	6853      	ldr	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80114f0:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80114f2:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80114f4:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80114f6:	6053      	str	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80114f8:	f7fd f9ac 	bl	800e854 <mbedtls_mpi_shift_l>
 80114fc:	4604      	mov	r4, r0
 80114fe:	bb30      	cbnz	r0, 801154e <ecp_double_jac+0x2e6>
 8011500:	4639      	mov	r1, r7
 8011502:	a809      	add	r0, sp, #36	; 0x24
 8011504:	f7fd fabe 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8011508:	2800      	cmp	r0, #0
 801150a:	f280 810e 	bge.w	801172a <ecp_double_jac+0x4c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 801150e:	a906      	add	r1, sp, #24
 8011510:	4648      	mov	r0, r9
 8011512:	f7fd f87d 	bl	800e610 <mbedtls_mpi_copy>
 8011516:	4604      	mov	r4, r0
 8011518:	b9c8      	cbnz	r0, 801154e <ecp_double_jac+0x2e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 801151a:	a903      	add	r1, sp, #12
 801151c:	f109 000c 	add.w	r0, r9, #12
 8011520:	f7fd f876 	bl	800e610 <mbedtls_mpi_copy>
 8011524:	4604      	mov	r4, r0
 8011526:	b990      	cbnz	r0, 801154e <ecp_double_jac+0x2e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 8011528:	a909      	add	r1, sp, #36	; 0x24
 801152a:	f109 0018 	add.w	r0, r9, #24
 801152e:	f7fd f86f 	bl	800e610 <mbedtls_mpi_copy>
 8011532:	4604      	mov	r4, r0
cleanup:
 8011534:	e00b      	b.n	801154e <ecp_double_jac+0x2e6>
 8011536:	bf00      	nop
 8011538:	200010c4 	.word	0x200010c4
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 801153c:	a906      	add	r1, sp, #24
 801153e:	463a      	mov	r2, r7
 8011540:	4608      	mov	r0, r1
 8011542:	f7fd fb58 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 8011546:	4604      	mov	r4, r0
 8011548:	2800      	cmp	r0, #0
 801154a:	f43f aec6 	beq.w	80112da <ecp_double_jac+0x72>
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 801154e:	4668      	mov	r0, sp
 8011550:	f7fc ffd6 	bl	800e500 <mbedtls_mpi_free>
 8011554:	a803      	add	r0, sp, #12
 8011556:	f7fc ffd3 	bl	800e500 <mbedtls_mpi_free>
 801155a:	a806      	add	r0, sp, #24
 801155c:	f7fc ffd0 	bl	800e500 <mbedtls_mpi_free>
 8011560:	a809      	add	r0, sp, #36	; 0x24
 8011562:	f7fc ffcd 	bl	800e500 <mbedtls_mpi_free>
}
 8011566:	4620      	mov	r0, r4
 8011568:	b00c      	add	sp, #48	; 0x30
 801156a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 801156e:	2100      	movs	r1, #0
 8011570:	a809      	add	r0, sp, #36	; 0x24
 8011572:	f7fd fac7 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011576:	2800      	cmp	r0, #0
 8011578:	f43f aec3 	beq.w	8011302 <ecp_double_jac+0x9a>
 801157c:	a909      	add	r1, sp, #36	; 0x24
 801157e:	463a      	mov	r2, r7
 8011580:	4608      	mov	r0, r1
 8011582:	f7fd fb76 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8011586:	e6b4      	b.n	80112f2 <ecp_double_jac+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011588:	463a      	mov	r2, r7
 801158a:	4669      	mov	r1, sp
 801158c:	4668      	mov	r0, sp
 801158e:	f7fd fb32 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 8011592:	e6cf      	b.n	8011334 <ecp_double_jac+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011594:	4642      	mov	r2, r8
 8011596:	4641      	mov	r1, r8
 8011598:	a803      	add	r0, sp, #12
 801159a:	f7fd fbc5 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801159e:	4604      	mov	r4, r0
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d1d4      	bne.n	801154e <ecp_double_jac+0x2e6>
 80115a4:	4631      	mov	r1, r6
 80115a6:	a803      	add	r0, sp, #12
 80115a8:	f7ff fe18 	bl	80111dc <ecp_modp>
 80115ac:	4604      	mov	r4, r0
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d1cd      	bne.n	801154e <ecp_double_jac+0x2e6>
 80115b2:	686b      	ldr	r3, [r5, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80115b4:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 80115b6:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80115b8:	a903      	add	r1, sp, #12
 80115ba:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 80115bc:	606b      	str	r3, [r5, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80115be:	f7fd fc1d 	bl	800edfc <mbedtls_mpi_mul_int>
 80115c2:	4604      	mov	r4, r0
 80115c4:	2800      	cmp	r0, #0
 80115c6:	d1c2      	bne.n	801154e <ecp_double_jac+0x2e6>
 80115c8:	1d37      	adds	r7, r6, #4
 80115ca:	4639      	mov	r1, r7
 80115cc:	4668      	mov	r0, sp
 80115ce:	f7fd fa59 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 80115d2:	2800      	cmp	r0, #0
 80115d4:	da56      	bge.n	8011684 <ecp_double_jac+0x41c>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 80115d6:	f106 0a10 	add.w	sl, r6, #16
 80115da:	2100      	movs	r1, #0
 80115dc:	4650      	mov	r0, sl
 80115de:	f7fd fa91 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80115e2:	2800      	cmp	r0, #0
 80115e4:	f43f aeb1 	beq.w	801134a <ecp_double_jac+0xe2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80115e8:	f108 0218 	add.w	r2, r8, #24
 80115ec:	4611      	mov	r1, r2
 80115ee:	a803      	add	r0, sp, #12
 80115f0:	f7fd fb9a 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80115f4:	4604      	mov	r4, r0
 80115f6:	2800      	cmp	r0, #0
 80115f8:	d1a9      	bne.n	801154e <ecp_double_jac+0x2e6>
 80115fa:	4631      	mov	r1, r6
 80115fc:	a803      	add	r0, sp, #12
 80115fe:	f7ff fded 	bl	80111dc <ecp_modp>
 8011602:	4604      	mov	r4, r0
 8011604:	2800      	cmp	r0, #0
 8011606:	d1a2      	bne.n	801154e <ecp_double_jac+0x2e6>
 8011608:	686b      	ldr	r3, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 801160a:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 801160c:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 801160e:	4611      	mov	r1, r2
 8011610:	a806      	add	r0, sp, #24
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011612:	606b      	str	r3, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011614:	f7fd fb88 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011618:	4604      	mov	r4, r0
 801161a:	2800      	cmp	r0, #0
 801161c:	d197      	bne.n	801154e <ecp_double_jac+0x2e6>
 801161e:	4631      	mov	r1, r6
 8011620:	a806      	add	r0, sp, #24
 8011622:	f7ff fddb 	bl	80111dc <ecp_modp>
 8011626:	4604      	mov	r4, r0
 8011628:	2800      	cmp	r0, #0
 801162a:	d190      	bne.n	801154e <ecp_double_jac+0x2e6>
 801162c:	686b      	ldr	r3, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 801162e:	4652      	mov	r2, sl
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011630:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011632:	a906      	add	r1, sp, #24
 8011634:	a803      	add	r0, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011636:	606b      	str	r3, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011638:	f7fd fb76 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801163c:	4604      	mov	r4, r0
 801163e:	2800      	cmp	r0, #0
 8011640:	d185      	bne.n	801154e <ecp_double_jac+0x2e6>
 8011642:	4631      	mov	r1, r6
 8011644:	a803      	add	r0, sp, #12
 8011646:	f7ff fdc9 	bl	80111dc <ecp_modp>
 801164a:	4604      	mov	r4, r0
 801164c:	2800      	cmp	r0, #0
 801164e:	f47f af7e 	bne.w	801154e <ecp_double_jac+0x2e6>
 8011652:	686b      	ldr	r3, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011654:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011656:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011658:	4669      	mov	r1, sp
 801165a:	4668      	mov	r0, sp
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 801165c:	606b      	str	r3, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 801165e:	f7fd fb08 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8011662:	4604      	mov	r4, r0
 8011664:	2800      	cmp	r0, #0
 8011666:	f47f af72 	bne.w	801154e <ecp_double_jac+0x2e6>
 801166a:	4639      	mov	r1, r7
 801166c:	4668      	mov	r0, sp
 801166e:	f7fd fa09 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8011672:	2800      	cmp	r0, #0
 8011674:	f6ff ae69 	blt.w	801134a <ecp_double_jac+0xe2>
 8011678:	463a      	mov	r2, r7
 801167a:	4669      	mov	r1, sp
 801167c:	4668      	mov	r0, sp
 801167e:	f7fd faba 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 8011682:	e7ee      	b.n	8011662 <ecp_double_jac+0x3fa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011684:	463a      	mov	r2, r7
 8011686:	4669      	mov	r1, sp
 8011688:	4668      	mov	r0, sp
 801168a:	f7fd fab4 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 801168e:	4604      	mov	r4, r0
 8011690:	2800      	cmp	r0, #0
 8011692:	d09a      	beq.n	80115ca <ecp_double_jac+0x362>
cleanup:
 8011694:	e75b      	b.n	801154e <ecp_double_jac+0x2e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011696:	a906      	add	r1, sp, #24
 8011698:	463a      	mov	r2, r7
 801169a:	4608      	mov	r0, r1
 801169c:	f7fd faab 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 80116a0:	4604      	mov	r4, r0
 80116a2:	2800      	cmp	r0, #0
 80116a4:	f43f ae70 	beq.w	8011388 <ecp_double_jac+0x120>
cleanup:
 80116a8:	e751      	b.n	801154e <ecp_double_jac+0x2e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80116aa:	a903      	add	r1, sp, #12
 80116ac:	463a      	mov	r2, r7
 80116ae:	4608      	mov	r0, r1
 80116b0:	f7fd faa1 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 80116b4:	e687      	b.n	80113c6 <ecp_double_jac+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80116b6:	a909      	add	r1, sp, #36	; 0x24
 80116b8:	463a      	mov	r2, r7
 80116ba:	4608      	mov	r0, r1
 80116bc:	f7fd fa9b 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 80116c0:	e6a4      	b.n	801140c <ecp_double_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80116c2:	2100      	movs	r1, #0
 80116c4:	a806      	add	r0, sp, #24
 80116c6:	f7fd fa1d 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80116ca:	2800      	cmp	r0, #0
 80116cc:	f43f aec9 	beq.w	8011462 <ecp_double_jac+0x1fa>
 80116d0:	a906      	add	r1, sp, #24
 80116d2:	463a      	mov	r2, r7
 80116d4:	4608      	mov	r0, r1
 80116d6:	f7fd facc 	bl	800ec72 <mbedtls_mpi_add_mpi>
 80116da:	e6bb      	b.n	8011454 <ecp_double_jac+0x1ec>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80116dc:	2100      	movs	r1, #0
 80116de:	a806      	add	r0, sp, #24
 80116e0:	f7fd fa10 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	f43f aec8 	beq.w	801147a <ecp_double_jac+0x212>
 80116ea:	a906      	add	r1, sp, #24
 80116ec:	463a      	mov	r2, r7
 80116ee:	4608      	mov	r0, r1
 80116f0:	f7fd fabf 	bl	800ec72 <mbedtls_mpi_add_mpi>
 80116f4:	e6ba      	b.n	801146c <ecp_double_jac+0x204>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 80116f6:	2100      	movs	r1, #0
 80116f8:	a803      	add	r0, sp, #12
 80116fa:	f7fd fa03 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80116fe:	2800      	cmp	r0, #0
 8011700:	f43f aec7 	beq.w	8011492 <ecp_double_jac+0x22a>
 8011704:	a903      	add	r1, sp, #12
 8011706:	463a      	mov	r2, r7
 8011708:	4608      	mov	r0, r1
 801170a:	f7fd fab2 	bl	800ec72 <mbedtls_mpi_add_mpi>
 801170e:	e6b9      	b.n	8011484 <ecp_double_jac+0x21c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8011710:	2100      	movs	r1, #0
 8011712:	a803      	add	r0, sp, #12
 8011714:	f7fd f9f6 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011718:	2800      	cmp	r0, #0
 801171a:	f43f aed8 	beq.w	80114ce <ecp_double_jac+0x266>
 801171e:	a903      	add	r1, sp, #12
 8011720:	463a      	mov	r2, r7
 8011722:	4608      	mov	r0, r1
 8011724:	f7fd faa5 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8011728:	e6ca      	b.n	80114c0 <ecp_double_jac+0x258>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 801172a:	a909      	add	r1, sp, #36	; 0x24
 801172c:	463a      	mov	r2, r7
 801172e:	4608      	mov	r0, r1
 8011730:	f7fd fa61 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 8011734:	e6e2      	b.n	80114fc <ecp_double_jac+0x294>
 8011736:	bf00      	nop

08011738 <ecp_normalize_jac>:
{
 8011738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 801173c:	f101 0818 	add.w	r8, r1, #24
{
 8011740:	b086      	sub	sp, #24
 8011742:	4607      	mov	r7, r0
 8011744:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8011746:	4640      	mov	r0, r8
 8011748:	2100      	movs	r1, #0
 801174a:	f7fd f9db 	bl	800eb04 <mbedtls_mpi_cmp_int>
 801174e:	4604      	mov	r4, r0
 8011750:	2800      	cmp	r0, #0
 8011752:	d05c      	beq.n	801180e <ecp_normalize_jac+0xd6>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8011754:	4668      	mov	r0, sp
 8011756:	f7fc fecb 	bl	800e4f0 <mbedtls_mpi_init>
 801175a:	a803      	add	r0, sp, #12
 801175c:	f7fc fec8 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8011760:	1d3a      	adds	r2, r7, #4
 8011762:	4641      	mov	r1, r8
 8011764:	4668      	mov	r0, sp
 8011766:	f7fe f812 	bl	800f78e <mbedtls_mpi_inv_mod>
 801176a:	4604      	mov	r4, r0
 801176c:	2800      	cmp	r0, #0
 801176e:	d148      	bne.n	8011802 <ecp_normalize_jac+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011770:	466a      	mov	r2, sp
 8011772:	4669      	mov	r1, sp
 8011774:	a803      	add	r0, sp, #12
 8011776:	f7fd fad7 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801177a:	4604      	mov	r4, r0
 801177c:	2800      	cmp	r0, #0
 801177e:	d140      	bne.n	8011802 <ecp_normalize_jac+0xca>
 8011780:	4639      	mov	r1, r7
 8011782:	a803      	add	r0, sp, #12
 8011784:	f7ff fd2a 	bl	80111dc <ecp_modp>
 8011788:	4604      	mov	r4, r0
 801178a:	2800      	cmp	r0, #0
 801178c:	d139      	bne.n	8011802 <ecp_normalize_jac+0xca>
 801178e:	4e22      	ldr	r6, [pc, #136]	; (8011818 <ecp_normalize_jac+0xe0>)
 8011790:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011792:	aa03      	add	r2, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011794:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011796:	4629      	mov	r1, r5
 8011798:	4628      	mov	r0, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 801179a:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 801179c:	f7fd fac4 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80117a0:	4604      	mov	r4, r0
 80117a2:	bb70      	cbnz	r0, 8011802 <ecp_normalize_jac+0xca>
 80117a4:	4639      	mov	r1, r7
 80117a6:	4628      	mov	r0, r5
 80117a8:	f7ff fd18 	bl	80111dc <ecp_modp>
 80117ac:	4604      	mov	r4, r0
 80117ae:	bb40      	cbnz	r0, 8011802 <ecp_normalize_jac+0xca>
 80117b0:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 80117b2:	350c      	adds	r5, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 80117b4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 80117b6:	aa03      	add	r2, sp, #12
 80117b8:	4629      	mov	r1, r5
 80117ba:	4628      	mov	r0, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 80117bc:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 80117be:	f7fd fab3 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80117c2:	4604      	mov	r4, r0
 80117c4:	b9e8      	cbnz	r0, 8011802 <ecp_normalize_jac+0xca>
 80117c6:	4639      	mov	r1, r7
 80117c8:	4628      	mov	r0, r5
 80117ca:	f7ff fd07 	bl	80111dc <ecp_modp>
 80117ce:	4604      	mov	r4, r0
 80117d0:	b9b8      	cbnz	r0, 8011802 <ecp_normalize_jac+0xca>
 80117d2:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 80117d4:	466a      	mov	r2, sp
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 80117d6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 80117d8:	4629      	mov	r1, r5
 80117da:	4628      	mov	r0, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 80117dc:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 80117de:	f7fd faa3 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80117e2:	4604      	mov	r4, r0
 80117e4:	b968      	cbnz	r0, 8011802 <ecp_normalize_jac+0xca>
 80117e6:	4639      	mov	r1, r7
 80117e8:	4628      	mov	r0, r5
 80117ea:	f7ff fcf7 	bl	80111dc <ecp_modp>
 80117ee:	4604      	mov	r4, r0
 80117f0:	b938      	cbnz	r0, 8011802 <ecp_normalize_jac+0xca>
 80117f2:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80117f4:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 80117f6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80117f8:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 80117fa:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80117fc:	f7fc ff67 	bl	800e6ce <mbedtls_mpi_lset>
 8011800:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8011802:	4668      	mov	r0, sp
 8011804:	f7fc fe7c 	bl	800e500 <mbedtls_mpi_free>
 8011808:	a803      	add	r0, sp, #12
 801180a:	f7fc fe79 	bl	800e500 <mbedtls_mpi_free>
}
 801180e:	4620      	mov	r0, r4
 8011810:	b006      	add	sp, #24
 8011812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011816:	bf00      	nop
 8011818:	200010c4 	.word	0x200010c4

0801181c <ecp_normalize_jac_many>:
{
 801181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( t_len < 2 )
 8011820:	2a01      	cmp	r2, #1
{
 8011822:	b08d      	sub	sp, #52	; 0x34
 8011824:	4606      	mov	r6, r0
 8011826:	460c      	mov	r4, r1
 8011828:	4690      	mov	r8, r2
    if( t_len < 2 )
 801182a:	d807      	bhi.n	801183c <ecp_normalize_jac_many+0x20>
        return( ecp_normalize_jac( grp, *T ) );
 801182c:	6809      	ldr	r1, [r1, #0]
 801182e:	f7ff ff83 	bl	8011738 <ecp_normalize_jac>
 8011832:	4603      	mov	r3, r0
}
 8011834:	4618      	mov	r0, r3
 8011836:	b00d      	add	sp, #52	; 0x34
 8011838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )
 801183c:	4b90      	ldr	r3, [pc, #576]	; (8011a80 <ecp_normalize_jac_many+0x264>)
 801183e:	210c      	movs	r1, #12
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4610      	mov	r0, r2
 8011844:	4798      	blx	r3
 8011846:	4607      	mov	r7, r0
 8011848:	2800      	cmp	r0, #0
 801184a:	f000 8116 	beq.w	8011a7a <ecp_normalize_jac_many+0x25e>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 801184e:	a803      	add	r0, sp, #12
 8011850:	f7fc fe4e 	bl	800e4f0 <mbedtls_mpi_init>
 8011854:	a806      	add	r0, sp, #24
 8011856:	f7fc fe4b 	bl	800e4f0 <mbedtls_mpi_init>
 801185a:	a809      	add	r0, sp, #36	; 0x24
 801185c:	f7fc fe48 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 8011860:	6821      	ldr	r1, [r4, #0]
 8011862:	4638      	mov	r0, r7
 8011864:	3118      	adds	r1, #24
 8011866:	f7fc fed3 	bl	800e610 <mbedtls_mpi_copy>
 801186a:	4603      	mov	r3, r0
 801186c:	2800      	cmp	r0, #0
 801186e:	d13c      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
        MOD_MUL( c[i] );
 8011870:	f8df b218 	ldr.w	fp, [pc, #536]	; 8011a8c <ecp_normalize_jac_many+0x270>
 8011874:	f107 050c 	add.w	r5, r7, #12
    for( i = 1; i < t_len; i++ )
 8011878:	f04f 0a01 	mov.w	sl, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 801187c:	f854 202a 	ldr.w	r2, [r4, sl, lsl #2]
 8011880:	f1a5 010c 	sub.w	r1, r5, #12
 8011884:	3218      	adds	r2, #24
 8011886:	4628      	mov	r0, r5
 8011888:	f7fd fa4e 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801188c:	4603      	mov	r3, r0
 801188e:	bb60      	cbnz	r0, 80118ea <ecp_normalize_jac_many+0xce>
        MOD_MUL( c[i] );
 8011890:	4631      	mov	r1, r6
 8011892:	4628      	mov	r0, r5
 8011894:	f7ff fca2 	bl	80111dc <ecp_modp>
 8011898:	4603      	mov	r3, r0
 801189a:	bb30      	cbnz	r0, 80118ea <ecp_normalize_jac_many+0xce>
 801189c:	f8db 3004 	ldr.w	r3, [fp, #4]
 80118a0:	3301      	adds	r3, #1
 80118a2:	f8cb 3004 	str.w	r3, [fp, #4]
    for( i = 1; i < t_len; i++ )
 80118a6:	f10a 0301 	add.w	r3, sl, #1
 80118aa:	4598      	cmp	r8, r3
 80118ac:	f105 050c 	add.w	r5, r5, #12
 80118b0:	d138      	bne.n	8011924 <ecp_normalize_jac_many+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );
 80118b2:	250c      	movs	r5, #12
 80118b4:	fb05 f508 	mul.w	r5, r5, r8
 80118b8:	f1a5 010c 	sub.w	r1, r5, #12
 80118bc:	1d32      	adds	r2, r6, #4
 80118be:	4439      	add	r1, r7
 80118c0:	a803      	add	r0, sp, #12
 80118c2:	f7fd ff64 	bl	800f78e <mbedtls_mpi_inv_mod>
 80118c6:	4603      	mov	r3, r0
 80118c8:	b978      	cbnz	r0, 80118ea <ecp_normalize_jac_many+0xce>
 80118ca:	3d18      	subs	r5, #24
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 80118cc:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8011a8c <ecp_normalize_jac_many+0x270>
 80118d0:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80118d4:	443d      	add	r5, r7
        if( i == 0 ) {
 80118d6:	f1ba 0f00 	cmp.w	sl, #0
 80118da:	d125      	bne.n	8011928 <ecp_normalize_jac_many+0x10c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 80118dc:	a903      	add	r1, sp, #12
 80118de:	a806      	add	r0, sp, #24
 80118e0:	f7fc fe96 	bl	800e610 <mbedtls_mpi_copy>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d048      	beq.n	801197c <ecp_normalize_jac_many+0x160>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 80118ea:	a803      	add	r0, sp, #12
 80118ec:	9301      	str	r3, [sp, #4]
 80118ee:	f7fc fe07 	bl	800e500 <mbedtls_mpi_free>
 80118f2:	a806      	add	r0, sp, #24
 80118f4:	f7fc fe04 	bl	800e500 <mbedtls_mpi_free>
 80118f8:	a809      	add	r0, sp, #36	; 0x24
 80118fa:	f7fc fe01 	bl	800e500 <mbedtls_mpi_free>
 80118fe:	220c      	movs	r2, #12
 8011900:	9b01      	ldr	r3, [sp, #4]
 8011902:	463c      	mov	r4, r7
 8011904:	fb02 7808 	mla	r8, r2, r8, r7
        mbedtls_mpi_free( &c[i] );
 8011908:	4620      	mov	r0, r4
 801190a:	340c      	adds	r4, #12
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	f7fc fdf7 	bl	800e500 <mbedtls_mpi_free>
    for( i = 0; i < t_len; i++ )
 8011912:	45a0      	cmp	r8, r4
 8011914:	9b01      	ldr	r3, [sp, #4]
 8011916:	d1f7      	bne.n	8011908 <ecp_normalize_jac_many+0xec>
    mbedtls_free( c );
 8011918:	4a5a      	ldr	r2, [pc, #360]	; (8011a84 <ecp_normalize_jac_many+0x268>)
 801191a:	4638      	mov	r0, r7
 801191c:	6812      	ldr	r2, [r2, #0]
 801191e:	4790      	blx	r2
    return( ret );
 8011920:	9b01      	ldr	r3, [sp, #4]
 8011922:	e787      	b.n	8011834 <ecp_normalize_jac_many+0x18>
 8011924:	469a      	mov	sl, r3
 8011926:	e7a9      	b.n	801187c <ecp_normalize_jac_many+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011928:	462a      	mov	r2, r5
 801192a:	a903      	add	r1, sp, #12
 801192c:	a806      	add	r0, sp, #24
 801192e:	f7fd f9fb 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011932:	4603      	mov	r3, r0
 8011934:	2800      	cmp	r0, #0
 8011936:	d1d8      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 8011938:	4631      	mov	r1, r6
 801193a:	a806      	add	r0, sp, #24
 801193c:	f7ff fc4e 	bl	80111dc <ecp_modp>
 8011940:	4603      	mov	r3, r0
 8011942:	2800      	cmp	r0, #0
 8011944:	d1d1      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 8011946:	f8db 3004 	ldr.w	r3, [fp, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 801194a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 801194e:	a903      	add	r1, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011950:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011952:	3218      	adds	r2, #24
 8011954:	4608      	mov	r0, r1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011956:	f8cb 3004 	str.w	r3, [fp, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 801195a:	f7fd f9e5 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801195e:	4603      	mov	r3, r0
 8011960:	2800      	cmp	r0, #0
 8011962:	d1c2      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 8011964:	4631      	mov	r1, r6
 8011966:	a803      	add	r0, sp, #12
 8011968:	f7ff fc38 	bl	80111dc <ecp_modp>
 801196c:	4603      	mov	r3, r0
 801196e:	2800      	cmp	r0, #0
 8011970:	d1bb      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 8011972:	f8db 3004 	ldr.w	r3, [fp, #4]
 8011976:	3301      	adds	r3, #1
 8011978:	f8cb 3004 	str.w	r3, [fp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 801197c:	aa06      	add	r2, sp, #24
 801197e:	4611      	mov	r1, r2
 8011980:	a809      	add	r0, sp, #36	; 0x24
 8011982:	f7fd f9d1 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011986:	4603      	mov	r3, r0
 8011988:	2800      	cmp	r0, #0
 801198a:	d1ae      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 801198c:	4631      	mov	r1, r6
 801198e:	a809      	add	r0, sp, #36	; 0x24
 8011990:	f7ff fc24 	bl	80111dc <ecp_modp>
 8011994:	4603      	mov	r3, r0
 8011996:	2800      	cmp	r0, #0
 8011998:	d1a7      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 801199a:	f8d9 3004 	ldr.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 801199e:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 80119a2:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 80119a4:	aa09      	add	r2, sp, #36	; 0x24
 80119a6:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 80119a8:	f8c9 3004 	str.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 80119ac:	f7fd f9bc 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d199      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 80119b6:	4631      	mov	r1, r6
 80119b8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80119bc:	f7ff fc0e 	bl	80111dc <ecp_modp>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d191      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 80119c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 80119ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 80119ce:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 80119d0:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 80119d2:	aa09      	add	r2, sp, #36	; 0x24
 80119d4:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 80119d6:	f8c9 3004 	str.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 80119da:	f7fd f9a5 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80119de:	4603      	mov	r3, r0
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d182      	bne.n	80118ea <ecp_normalize_jac_many+0xce>
 80119e4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80119e8:	4631      	mov	r1, r6
 80119ea:	300c      	adds	r0, #12
 80119ec:	f7ff fbf6 	bl	80111dc <ecp_modp>
 80119f0:	4603      	mov	r3, r0
 80119f2:	2800      	cmp	r0, #0
 80119f4:	f47f af79 	bne.w	80118ea <ecp_normalize_jac_many+0xce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 80119f8:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 80119fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011a00:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011a02:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011a04:	aa06      	add	r2, sp, #24
 8011a06:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011a08:	f8c9 3004 	str.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011a0c:	f7fd f98c 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2800      	cmp	r0, #0
 8011a14:	f47f af69 	bne.w	80118ea <ecp_normalize_jac_many+0xce>
 8011a18:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011a1c:	4631      	mov	r1, r6
 8011a1e:	300c      	adds	r0, #12
 8011a20:	f7ff fbdc 	bl	80111dc <ecp_modp>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2800      	cmp	r0, #0
 8011a28:	f47f af5f 	bne.w	80118ea <ecp_normalize_jac_many+0xce>
 8011a2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011a30:	68b1      	ldr	r1, [r6, #8]
 8011a32:	f854 0c04 	ldr.w	r0, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011a36:	3301      	adds	r3, #1
 8011a38:	f8c9 3004 	str.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011a3c:	f7fc fdaa 	bl	800e594 <mbedtls_mpi_shrink>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2800      	cmp	r0, #0
 8011a44:	f47f af51 	bne.w	80118ea <ecp_normalize_jac_many+0xce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 8011a48:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011a4c:	68b1      	ldr	r1, [r6, #8]
 8011a4e:	300c      	adds	r0, #12
 8011a50:	f7fc fda0 	bl	800e594 <mbedtls_mpi_shrink>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2800      	cmp	r0, #0
 8011a58:	f47f af47 	bne.w	80118ea <ecp_normalize_jac_many+0xce>
 8011a5c:	9001      	str	r0, [sp, #4]
        mbedtls_mpi_free( &T[i]->Z );
 8011a5e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8011a62:	3018      	adds	r0, #24
 8011a64:	f7fc fd4c 	bl	800e500 <mbedtls_mpi_free>
 8011a68:	3d0c      	subs	r5, #12
        if( i == 0 )
 8011a6a:	9b01      	ldr	r3, [sp, #4]
 8011a6c:	f1ba 0f00 	cmp.w	sl, #0
 8011a70:	f43f af3b 	beq.w	80118ea <ecp_normalize_jac_many+0xce>
    for( i = t_len - 1; ; i-- )
 8011a74:	f10a 3aff 	add.w	sl, sl, #4294967295
        if( i == 0 ) {
 8011a78:	e72d      	b.n	80118d6 <ecp_normalize_jac_many+0xba>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 8011a7a:	4b03      	ldr	r3, [pc, #12]	; (8011a88 <ecp_normalize_jac_many+0x26c>)
 8011a7c:	e6da      	b.n	8011834 <ecp_normalize_jac_many+0x18>
 8011a7e:	bf00      	nop
 8011a80:	200005a0 	.word	0x200005a0
 8011a84:	200005a4 	.word	0x200005a4
 8011a88:	ffffb280 	.word	0xffffb280
 8011a8c:	200010c4 	.word	0x200010c4

08011a90 <mbedtls_ecp_point_init.part.2>:
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
 8011a90:	b510      	push	{r4, lr}
 8011a92:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 8011a94:	f7fc fd2c 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8011a98:	f104 000c 	add.w	r0, r4, #12
 8011a9c:	f7fc fd28 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 8011aa0:	f104 0018 	add.w	r0, r4, #24
}
 8011aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 8011aa8:	f7fc bd22 	b.w	800e4f0 <mbedtls_mpi_init>

08011aac <mbedtls_ecp_point_free.part.4>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 8011aac:	b510      	push	{r4, lr}
 8011aae:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 8011ab0:	f7fc fd26 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8011ab4:	f104 000c 	add.w	r0, r4, #12
 8011ab8:	f7fc fd22 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 8011abc:	f104 0018 	add.w	r0, r4, #24
}
 8011ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 8011ac4:	f7fc bd1c 	b.w	800e500 <mbedtls_mpi_free>

08011ac8 <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 8011ac8:	4a0a      	ldr	r2, [pc, #40]	; (8011af4 <mbedtls_ecp_grp_id_list+0x2c>)
 8011aca:	6893      	ldr	r3, [r2, #8]
{
 8011acc:	b530      	push	{r4, r5, lr}
    if( ! init_done )
 8011ace:	b16b      	cbz	r3, 8011aec <mbedtls_ecp_grp_id_list+0x24>
}
 8011ad0:	4809      	ldr	r0, [pc, #36]	; (8011af8 <mbedtls_ecp_grp_id_list+0x30>)
 8011ad2:	bd30      	pop	{r4, r5, pc}
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 8011ad4:	5559      	strb	r1, [r3, r5]
 8011ad6:	3301      	adds	r3, #1
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011ad8:	fb04 f103 	mul.w	r1, r4, r3
 8011adc:	5c09      	ldrb	r1, [r1, r0]
        for( curve_info = mbedtls_ecp_curve_list();
 8011ade:	2900      	cmp	r1, #0
 8011ae0:	d1f8      	bne.n	8011ad4 <mbedtls_ecp_grp_id_list+0xc>
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
 8011ae2:	4413      	add	r3, r2
 8011ae4:	7319      	strb	r1, [r3, #12]
        init_done = 1;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	6093      	str	r3, [r2, #8]
 8011aea:	e7f1      	b.n	8011ad0 <mbedtls_ecp_grp_id_list+0x8>
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011aec:	240c      	movs	r4, #12
 8011aee:	4803      	ldr	r0, [pc, #12]	; (8011afc <mbedtls_ecp_grp_id_list+0x34>)
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 8011af0:	1915      	adds	r5, r2, r4
 8011af2:	e7f1      	b.n	8011ad8 <mbedtls_ecp_grp_id_list+0x10>
 8011af4:	200010c4 	.word	0x200010c4
 8011af8:	200010d0 	.word	0x200010d0
 8011afc:	0802a618 	.word	0x0802a618

08011b00 <mbedtls_ecp_curve_info_from_grp_id>:
{
 8011b00:	b510      	push	{r4, lr}
 8011b02:	4c06      	ldr	r4, [pc, #24]	; (8011b1c <mbedtls_ecp_curve_info_from_grp_id+0x1c>)
    for( curve_info = mbedtls_ecp_curve_list();
 8011b04:	2300      	movs	r3, #0
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011b06:	5d1a      	ldrb	r2, [r3, r4]
 8011b08:	18e1      	adds	r1, r4, r3
    for( curve_info = mbedtls_ecp_curve_list();
 8011b0a:	b90a      	cbnz	r2, 8011b10 <mbedtls_ecp_curve_info_from_grp_id+0x10>
    return( NULL );
 8011b0c:	4611      	mov	r1, r2
 8011b0e:	e003      	b.n	8011b18 <mbedtls_ecp_curve_info_from_grp_id+0x18>
        if( curve_info->grp_id == grp_id )
 8011b10:	4282      	cmp	r2, r0
 8011b12:	f103 030c 	add.w	r3, r3, #12
 8011b16:	d1f6      	bne.n	8011b06 <mbedtls_ecp_curve_info_from_grp_id+0x6>
}
 8011b18:	4608      	mov	r0, r1
 8011b1a:	bd10      	pop	{r4, pc}
 8011b1c:	0802a618 	.word	0x0802a618

08011b20 <mbedtls_ecp_curve_info_from_tls_id>:
    for( curve_info = mbedtls_ecp_curve_list();
 8011b20:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
 8011b22:	781a      	ldrb	r2, [r3, #0]
 8011b24:	b912      	cbnz	r2, 8011b2c <mbedtls_ecp_curve_info_from_tls_id+0xc>
    return( NULL );
 8011b26:	4613      	mov	r3, r2
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	4770      	bx	lr
        if( curve_info->tls_id == tls_id )
 8011b2c:	885a      	ldrh	r2, [r3, #2]
 8011b2e:	4282      	cmp	r2, r0
 8011b30:	d0fa      	beq.n	8011b28 <mbedtls_ecp_curve_info_from_tls_id+0x8>
         curve_info++ )
 8011b32:	330c      	adds	r3, #12
 8011b34:	e7f5      	b.n	8011b22 <mbedtls_ecp_curve_info_from_tls_id+0x2>
 8011b36:	bf00      	nop
 8011b38:	0802a618 	.word	0x0802a618

08011b3c <mbedtls_ecp_point_init>:
    if( pt == NULL )
 8011b3c:	b108      	cbz	r0, 8011b42 <mbedtls_ecp_point_init+0x6>
 8011b3e:	f7ff bfa7 	b.w	8011a90 <mbedtls_ecp_point_init.part.2>
}
 8011b42:	4770      	bx	lr

08011b44 <mbedtls_ecp_group_init>:
    if( grp == NULL )
 8011b44:	b118      	cbz	r0, 8011b4e <mbedtls_ecp_group_init+0xa>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 8011b46:	227c      	movs	r2, #124	; 0x7c
 8011b48:	2100      	movs	r1, #0
 8011b4a:	f010 bbf0 	b.w	802232e <memset>
}
 8011b4e:	4770      	bx	lr

08011b50 <mbedtls_ecp_keypair_init>:
{
 8011b50:	b510      	push	{r4, lr}
    if( key == NULL )
 8011b52:	4604      	mov	r4, r0
 8011b54:	b158      	cbz	r0, 8011b6e <mbedtls_ecp_keypair_init+0x1e>
    mbedtls_ecp_group_init( &key->grp );
 8011b56:	f7ff fff5 	bl	8011b44 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 8011b5a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8011b5e:	f7fc fcc7 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 8011b62:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 8011b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 8011b6a:	f7ff bfe7 	b.w	8011b3c <mbedtls_ecp_point_init>
}
 8011b6e:	bd10      	pop	{r4, pc}

08011b70 <mbedtls_ecp_point_free>:
    if( pt == NULL )
 8011b70:	b108      	cbz	r0, 8011b76 <mbedtls_ecp_point_free+0x6>
 8011b72:	f7ff bf9b 	b.w	8011aac <mbedtls_ecp_point_free.part.4>
}
 8011b76:	4770      	bx	lr

08011b78 <mbedtls_ecp_group_free>:
{
 8011b78:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	b1e0      	cbz	r0, 8011bb8 <mbedtls_ecp_group_free+0x40>
    if( grp->h != 1 )
 8011b7e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d012      	beq.n	8011baa <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
 8011b84:	3004      	adds	r0, #4
 8011b86:	f7fc fcbb 	bl	800e500 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 8011b8a:	f104 0010 	add.w	r0, r4, #16
 8011b8e:	f7fc fcb7 	bl	800e500 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8011b92:	f104 001c 	add.w	r0, r4, #28
 8011b96:	f7fc fcb3 	bl	800e500 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 8011b9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8011b9e:	f7ff ffe7 	bl	8011b70 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 8011ba2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8011ba6:	f7fc fcab 	bl	800e500 <mbedtls_mpi_free>
    if( grp->T != NULL )
 8011baa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8011bac:	b993      	cbnz	r3, 8011bd4 <mbedtls_ecp_group_free+0x5c>
 8011bae:	f104 037c 	add.w	r3, r4, #124	; 0x7c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	429c      	cmp	r4, r3
 8011bb6:	d110      	bne.n	8011bda <mbedtls_ecp_group_free+0x62>
}
 8011bb8:	bd70      	pop	{r4, r5, r6, pc}
            mbedtls_ecp_point_free( &grp->T[i] );
 8011bba:	fb06 0005 	mla	r0, r6, r5, r0
 8011bbe:	f7ff ffd7 	bl	8011b70 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 8011bc2:	3501      	adds	r5, #1
 8011bc4:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 8011bc8:	42ab      	cmp	r3, r5
 8011bca:	d8f6      	bhi.n	8011bba <mbedtls_ecp_group_free+0x42>
        mbedtls_free( grp->T );
 8011bcc:	4b04      	ldr	r3, [pc, #16]	; (8011be0 <mbedtls_ecp_group_free+0x68>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4798      	blx	r3
 8011bd2:	e7ec      	b.n	8011bae <mbedtls_ecp_group_free+0x36>
        for( i = 0; i < grp->T_size; i++ )
 8011bd4:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 8011bd6:	2624      	movs	r6, #36	; 0x24
 8011bd8:	e7f4      	b.n	8011bc4 <mbedtls_ecp_group_free+0x4c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8011bda:	7022      	strb	r2, [r4, #0]
 8011bdc:	3401      	adds	r4, #1
 8011bde:	e7e9      	b.n	8011bb4 <mbedtls_ecp_group_free+0x3c>
 8011be0:	200005a4 	.word	0x200005a4

08011be4 <mbedtls_ecp_keypair_free>:
{
 8011be4:	b510      	push	{r4, lr}
    if( key == NULL )
 8011be6:	4604      	mov	r4, r0
 8011be8:	b158      	cbz	r0, 8011c02 <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 8011bea:	f7ff ffc5 	bl	8011b78 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 8011bee:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8011bf2:	f7fc fc85 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 8011bf6:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 8011bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 8011bfe:	f7ff bfb7 	b.w	8011b70 <mbedtls_ecp_point_free>
}
 8011c02:	bd10      	pop	{r4, pc}

08011c04 <mbedtls_ecp_copy>:
{
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	4604      	mov	r4, r0
 8011c08:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8011c0a:	f7fc fd01 	bl	800e610 <mbedtls_mpi_copy>
 8011c0e:	b970      	cbnz	r0, 8011c2e <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8011c10:	f105 010c 	add.w	r1, r5, #12
 8011c14:	f104 000c 	add.w	r0, r4, #12
 8011c18:	f7fc fcfa 	bl	800e610 <mbedtls_mpi_copy>
 8011c1c:	b938      	cbnz	r0, 8011c2e <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8011c1e:	f105 0118 	add.w	r1, r5, #24
 8011c22:	f104 0018 	add.w	r0, r4, #24
}
 8011c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8011c2a:	f7fc bcf1 	b.w	800e610 <mbedtls_mpi_copy>
}
 8011c2e:	bd38      	pop	{r3, r4, r5, pc}

08011c30 <mbedtls_ecp_group_copy>:
    return mbedtls_ecp_group_load( dst, src->id );
 8011c30:	7809      	ldrb	r1, [r1, #0]
 8011c32:	f001 bdbb 	b.w	80137ac <mbedtls_ecp_group_load>

08011c36 <mbedtls_ecp_set_zero>:
{
 8011c36:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 8011c38:	2101      	movs	r1, #1
{
 8011c3a:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 8011c3c:	f7fc fd47 	bl	800e6ce <mbedtls_mpi_lset>
 8011c40:	b960      	cbnz	r0, 8011c5c <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 8011c42:	2101      	movs	r1, #1
 8011c44:	f104 000c 	add.w	r0, r4, #12
 8011c48:	f7fc fd41 	bl	800e6ce <mbedtls_mpi_lset>
 8011c4c:	b930      	cbnz	r0, 8011c5c <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 8011c4e:	4601      	mov	r1, r0
 8011c50:	f104 0018 	add.w	r0, r4, #24
}
 8011c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 8011c58:	f7fc bd39 	b.w	800e6ce <mbedtls_mpi_lset>
}
 8011c5c:	bd10      	pop	{r4, pc}
	...

08011c60 <ecp_add_mixed>:
{
 8011c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add_count++;
 8011c64:	4d11      	ldr	r5, [pc, #68]	; (8011cac <ecp_add_mixed+0x4c>)
{
 8011c66:	4698      	mov	r8, r3
    add_count++;
 8011c68:	696b      	ldr	r3, [r5, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8011c6a:	f102 0b18 	add.w	fp, r2, #24
{
 8011c6e:	b097      	sub	sp, #92	; 0x5c
 8011c70:	4606      	mov	r6, r0
 8011c72:	460f      	mov	r7, r1
    add_count++;
 8011c74:	3301      	adds	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8011c76:	2100      	movs	r1, #0
 8011c78:	4658      	mov	r0, fp
{
 8011c7a:	4691      	mov	r9, r2
    add_count++;
 8011c7c:	616b      	str	r3, [r5, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8011c7e:	f7fc ff41 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011c82:	b940      	cbnz	r0, 8011c96 <ecp_add_mixed+0x36>
        return( mbedtls_ecp_copy( R, Q ) );
 8011c84:	4641      	mov	r1, r8
        return( mbedtls_ecp_copy( R, P ) );
 8011c86:	4638      	mov	r0, r7
 8011c88:	f7ff ffbc 	bl	8011c04 <mbedtls_ecp_copy>
 8011c8c:	4604      	mov	r4, r0
}
 8011c8e:	4620      	mov	r0, r4
 8011c90:	b017      	add	sp, #92	; 0x5c
 8011c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 8011c96:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8011c9a:	b14b      	cbz	r3, 8011cb0 <ecp_add_mixed+0x50>
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	f108 0018 	add.w	r0, r8, #24
 8011ca2:	f7fc ff2f 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011ca6:	b918      	cbnz	r0, 8011cb0 <ecp_add_mixed+0x50>
        return( mbedtls_ecp_copy( R, P ) );
 8011ca8:	4649      	mov	r1, r9
 8011caa:	e7ec      	b.n	8011c86 <ecp_add_mixed+0x26>
 8011cac:	200010c4 	.word	0x200010c4
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 8011cb0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	f040 816b 	bne.w	8011f90 <ecp_add_mixed+0x330>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 8011cba:	a801      	add	r0, sp, #4
 8011cbc:	f7fc fc18 	bl	800e4f0 <mbedtls_mpi_init>
 8011cc0:	a804      	add	r0, sp, #16
 8011cc2:	f7fc fc15 	bl	800e4f0 <mbedtls_mpi_init>
 8011cc6:	a807      	add	r0, sp, #28
 8011cc8:	f7fc fc12 	bl	800e4f0 <mbedtls_mpi_init>
 8011ccc:	a80a      	add	r0, sp, #40	; 0x28
 8011cce:	f7fc fc0f 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8011cd2:	a80d      	add	r0, sp, #52	; 0x34
 8011cd4:	f7fc fc0c 	bl	800e4f0 <mbedtls_mpi_init>
 8011cd8:	a810      	add	r0, sp, #64	; 0x40
 8011cda:	f7fc fc09 	bl	800e4f0 <mbedtls_mpi_init>
 8011cde:	a813      	add	r0, sp, #76	; 0x4c
 8011ce0:	f7fc fc06 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8011ce4:	465a      	mov	r2, fp
 8011ce6:	4659      	mov	r1, fp
 8011ce8:	a801      	add	r0, sp, #4
 8011cea:	f7fd f81d 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011cee:	4604      	mov	r4, r0
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	f040 8167 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011cf6:	4631      	mov	r1, r6
 8011cf8:	a801      	add	r0, sp, #4
 8011cfa:	f7ff fa6f 	bl	80111dc <ecp_modp>
 8011cfe:	4604      	mov	r4, r0
 8011d00:	2800      	cmp	r0, #0
 8011d02:	f040 815f 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d06:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011d08:	465a      	mov	r2, fp
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8011d0a:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011d0c:	a901      	add	r1, sp, #4
 8011d0e:	a804      	add	r0, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8011d10:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011d12:	f7fd f809 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011d16:	4604      	mov	r4, r0
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	f040 8153 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d1e:	4631      	mov	r1, r6
 8011d20:	a804      	add	r0, sp, #16
 8011d22:	f7ff fa5b 	bl	80111dc <ecp_modp>
 8011d26:	4604      	mov	r4, r0
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	f040 814b 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d2e:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011d30:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011d32:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011d34:	4642      	mov	r2, r8
 8011d36:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011d38:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011d3a:	f7fc fff5 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011d3e:	4604      	mov	r4, r0
 8011d40:	2800      	cmp	r0, #0
 8011d42:	f040 813f 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d46:	4631      	mov	r1, r6
 8011d48:	a801      	add	r0, sp, #4
 8011d4a:	f7ff fa47 	bl	80111dc <ecp_modp>
 8011d4e:	4604      	mov	r4, r0
 8011d50:	2800      	cmp	r0, #0
 8011d52:	f040 8137 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d56:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8011d58:	a904      	add	r1, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011d5a:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8011d5c:	f108 020c 	add.w	r2, r8, #12
 8011d60:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011d62:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8011d64:	f7fc ffe0 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011d68:	4604      	mov	r4, r0
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	f040 812a 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d70:	4631      	mov	r1, r6
 8011d72:	a804      	add	r0, sp, #16
 8011d74:	f7ff fa32 	bl	80111dc <ecp_modp>
 8011d78:	4604      	mov	r4, r0
 8011d7a:	2800      	cmp	r0, #0
 8011d7c:	f040 8122 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d80:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8011d82:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8011d84:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8011d86:	464a      	mov	r2, r9
 8011d88:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8011d8a:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8011d8c:	f7fc ff93 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011d90:	4604      	mov	r4, r0
 8011d92:	2800      	cmp	r0, #0
 8011d94:	f040 8116 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011d98:	f106 0804 	add.w	r8, r6, #4
 8011d9c:	9b01      	ldr	r3, [sp, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f2c0 8100 	blt.w	8011fa4 <ecp_add_mixed+0x344>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8011da4:	a904      	add	r1, sp, #16
 8011da6:	f109 0a0c 	add.w	sl, r9, #12
 8011daa:	4652      	mov	r2, sl
 8011dac:	4608      	mov	r0, r1
 8011dae:	f7fc ff82 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011db2:	4604      	mov	r4, r0
 8011db4:	2800      	cmp	r0, #0
 8011db6:	f040 8105 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011dba:	f106 0804 	add.w	r8, r6, #4
 8011dbe:	9b04      	ldr	r3, [sp, #16]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f2c0 8115 	blt.w	8011ff0 <ecp_add_mixed+0x390>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	a801      	add	r0, sp, #4
 8011dca:	f7fc fe9b 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011dce:	4601      	mov	r1, r0
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	f000 811e 	beq.w	8012012 <ecp_add_mixed+0x3b2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 8011dd6:	aa01      	add	r2, sp, #4
 8011dd8:	4659      	mov	r1, fp
 8011dda:	a813      	add	r0, sp, #76	; 0x4c
 8011ddc:	f7fc ffa4 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011de0:	4604      	mov	r4, r0
 8011de2:	2800      	cmp	r0, #0
 8011de4:	f040 80ee 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011de8:	4631      	mov	r1, r6
 8011dea:	a813      	add	r0, sp, #76	; 0x4c
 8011dec:	f7ff f9f6 	bl	80111dc <ecp_modp>
 8011df0:	4604      	mov	r4, r0
 8011df2:	2800      	cmp	r0, #0
 8011df4:	f040 80e6 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011df8:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8011dfa:	aa01      	add	r2, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 8011dfc:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8011dfe:	4611      	mov	r1, r2
 8011e00:	a807      	add	r0, sp, #28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 8011e02:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8011e04:	f7fc ff90 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011e08:	4604      	mov	r4, r0
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	f040 80da 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011e10:	4631      	mov	r1, r6
 8011e12:	a807      	add	r0, sp, #28
 8011e14:	f7ff f9e2 	bl	80111dc <ecp_modp>
 8011e18:	4604      	mov	r4, r0
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	f040 80d2 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011e20:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8011e22:	aa01      	add	r2, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8011e24:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8011e26:	a907      	add	r1, sp, #28
 8011e28:	a80a      	add	r0, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8011e2a:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8011e2c:	f7fc ff7c 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011e30:	4604      	mov	r4, r0
 8011e32:	2800      	cmp	r0, #0
 8011e34:	f040 80c6 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011e38:	4631      	mov	r1, r6
 8011e3a:	a80a      	add	r0, sp, #40	; 0x28
 8011e3c:	f7ff f9ce 	bl	80111dc <ecp_modp>
 8011e40:	4604      	mov	r4, r0
 8011e42:	2800      	cmp	r0, #0
 8011e44:	f040 80be 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011e48:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8011e4a:	a907      	add	r1, sp, #28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8011e4c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8011e4e:	464a      	mov	r2, r9
 8011e50:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8011e52:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8011e54:	f7fc ff68 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011e58:	4604      	mov	r4, r0
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	f040 80b2 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011e60:	4631      	mov	r1, r6
 8011e62:	a807      	add	r0, sp, #28
 8011e64:	f7ff f9ba 	bl	80111dc <ecp_modp>
 8011e68:	4604      	mov	r4, r0
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	f040 80aa 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011e70:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8011e72:	2202      	movs	r2, #2
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8011e74:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8011e76:	a907      	add	r1, sp, #28
 8011e78:	a801      	add	r0, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8011e7a:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8011e7c:	f7fc ffbe 	bl	800edfc <mbedtls_mpi_mul_int>
 8011e80:	4604      	mov	r4, r0
 8011e82:	2800      	cmp	r0, #0
 8011e84:	f040 809e 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011e88:	f106 0804 	add.w	r8, r6, #4
 8011e8c:	4641      	mov	r1, r8
 8011e8e:	a801      	add	r0, sp, #4
 8011e90:	f7fc fdf8 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	f280 80cb 	bge.w	8012030 <ecp_add_mixed+0x3d0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8011e9a:	aa04      	add	r2, sp, #16
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	a80d      	add	r0, sp, #52	; 0x34
 8011ea0:	f7fc ff42 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	f040 808c 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011eac:	4631      	mov	r1, r6
 8011eae:	a80d      	add	r0, sp, #52	; 0x34
 8011eb0:	f7ff f994 	bl	80111dc <ecp_modp>
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	f040 8084 	bne.w	8011fc4 <ecp_add_mixed+0x364>
 8011ebc:	4d7b      	ldr	r5, [pc, #492]	; (80120ac <ecp_add_mixed+0x44c>)
 8011ebe:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8011ec0:	a90d      	add	r1, sp, #52	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8011ec2:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8011ec4:	aa01      	add	r2, sp, #4
 8011ec6:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8011ec8:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8011eca:	f7fc fef4 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011ece:	4604      	mov	r4, r0
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d177      	bne.n	8011fc4 <ecp_add_mixed+0x364>
 8011ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f2c0 80b4 	blt.w	8012044 <ecp_add_mixed+0x3e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 8011edc:	a90d      	add	r1, sp, #52	; 0x34
 8011ede:	aa0a      	add	r2, sp, #40	; 0x28
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	f7fc fee8 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	d16b      	bne.n	8011fc4 <ecp_add_mixed+0x364>
 8011eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f2c0 80b5 	blt.w	801205e <ecp_add_mixed+0x3fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8011ef4:	a907      	add	r1, sp, #28
 8011ef6:	aa0d      	add	r2, sp, #52	; 0x34
 8011ef8:	4608      	mov	r0, r1
 8011efa:	f7fc fedc 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011efe:	4604      	mov	r4, r0
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d15f      	bne.n	8011fc4 <ecp_add_mixed+0x364>
 8011f04:	9b07      	ldr	r3, [sp, #28]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f2c0 80b6 	blt.w	8012078 <ecp_add_mixed+0x418>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 8011f0c:	a907      	add	r1, sp, #28
 8011f0e:	aa04      	add	r2, sp, #16
 8011f10:	4608      	mov	r0, r1
 8011f12:	f7fc ff09 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011f16:	4604      	mov	r4, r0
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d153      	bne.n	8011fc4 <ecp_add_mixed+0x364>
 8011f1c:	4631      	mov	r1, r6
 8011f1e:	a807      	add	r0, sp, #28
 8011f20:	f7ff f95c 	bl	80111dc <ecp_modp>
 8011f24:	4604      	mov	r4, r0
 8011f26:	2800      	cmp	r0, #0
 8011f28:	d14c      	bne.n	8011fc4 <ecp_add_mixed+0x364>
 8011f2a:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8011f2c:	a90a      	add	r1, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 8011f2e:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8011f30:	4652      	mov	r2, sl
 8011f32:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 8011f34:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8011f36:	f7fc fef7 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d141      	bne.n	8011fc4 <ecp_add_mixed+0x364>
 8011f40:	4631      	mov	r1, r6
 8011f42:	a80a      	add	r0, sp, #40	; 0x28
 8011f44:	f7ff f94a 	bl	80111dc <ecp_modp>
 8011f48:	4604      	mov	r4, r0
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d13a      	bne.n	8011fc4 <ecp_add_mixed+0x364>
 8011f4e:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8011f50:	aa0a      	add	r2, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8011f52:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8011f54:	a907      	add	r1, sp, #28
 8011f56:	a810      	add	r0, sp, #64	; 0x40
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8011f58:	606b      	str	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8011f5a:	f7fc feac 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 8011f5e:	4604      	mov	r4, r0
 8011f60:	bb80      	cbnz	r0, 8011fc4 <ecp_add_mixed+0x364>
 8011f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	f2c0 8094 	blt.w	8012092 <ecp_add_mixed+0x432>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 8011f6a:	a90d      	add	r1, sp, #52	; 0x34
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	f7fc fb4f 	bl	800e610 <mbedtls_mpi_copy>
 8011f72:	4604      	mov	r4, r0
 8011f74:	bb30      	cbnz	r0, 8011fc4 <ecp_add_mixed+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 8011f76:	a910      	add	r1, sp, #64	; 0x40
 8011f78:	f107 000c 	add.w	r0, r7, #12
 8011f7c:	f7fc fb48 	bl	800e610 <mbedtls_mpi_copy>
 8011f80:	4604      	mov	r4, r0
 8011f82:	b9f8      	cbnz	r0, 8011fc4 <ecp_add_mixed+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 8011f84:	a913      	add	r1, sp, #76	; 0x4c
 8011f86:	f107 0018 	add.w	r0, r7, #24
 8011f8a:	f7fc fb41 	bl	800e610 <mbedtls_mpi_copy>
 8011f8e:	e049      	b.n	8012024 <ecp_add_mixed+0x3c4>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 8011f90:	2101      	movs	r1, #1
 8011f92:	f108 0018 	add.w	r0, r8, #24
 8011f96:	f7fc fdb5 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	f43f ae8d 	beq.w	8011cba <ecp_add_mixed+0x5a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8011fa0:	4c43      	ldr	r4, [pc, #268]	; (80120b0 <ecp_add_mixed+0x450>)
 8011fa2:	e674      	b.n	8011c8e <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	a801      	add	r0, sp, #4
 8011fa8:	f7fc fdac 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011fac:	2800      	cmp	r0, #0
 8011fae:	f43f aef9 	beq.w	8011da4 <ecp_add_mixed+0x144>
 8011fb2:	a901      	add	r1, sp, #4
 8011fb4:	4642      	mov	r2, r8
 8011fb6:	4608      	mov	r0, r1
 8011fb8:	f7fc fe5b 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	f43f aeec 	beq.w	8011d9c <ecp_add_mixed+0x13c>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 8011fc4:	a801      	add	r0, sp, #4
 8011fc6:	f7fc fa9b 	bl	800e500 <mbedtls_mpi_free>
 8011fca:	a804      	add	r0, sp, #16
 8011fcc:	f7fc fa98 	bl	800e500 <mbedtls_mpi_free>
 8011fd0:	a807      	add	r0, sp, #28
 8011fd2:	f7fc fa95 	bl	800e500 <mbedtls_mpi_free>
 8011fd6:	a80a      	add	r0, sp, #40	; 0x28
 8011fd8:	f7fc fa92 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8011fdc:	a80d      	add	r0, sp, #52	; 0x34
 8011fde:	f7fc fa8f 	bl	800e500 <mbedtls_mpi_free>
 8011fe2:	a810      	add	r0, sp, #64	; 0x40
 8011fe4:	f7fc fa8c 	bl	800e500 <mbedtls_mpi_free>
 8011fe8:	a813      	add	r0, sp, #76	; 0x4c
 8011fea:	f7fc fa89 	bl	800e500 <mbedtls_mpi_free>
    return( ret );
 8011fee:	e64e      	b.n	8011c8e <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	a804      	add	r0, sp, #16
 8011ff4:	f7fc fd86 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	f43f aee4 	beq.w	8011dc6 <ecp_add_mixed+0x166>
 8011ffe:	a904      	add	r1, sp, #16
 8012000:	4642      	mov	r2, r8
 8012002:	4608      	mov	r0, r1
 8012004:	f7fc fe35 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8012008:	4604      	mov	r4, r0
 801200a:	2800      	cmp	r0, #0
 801200c:	f43f aed7 	beq.w	8011dbe <ecp_add_mixed+0x15e>
cleanup:
 8012010:	e7d8      	b.n	8011fc4 <ecp_add_mixed+0x364>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 8012012:	a804      	add	r0, sp, #16
 8012014:	f7fc fd76 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012018:	b930      	cbnz	r0, 8012028 <ecp_add_mixed+0x3c8>
            ret = ecp_double_jac( grp, R, P );
 801201a:	464a      	mov	r2, r9
 801201c:	4639      	mov	r1, r7
 801201e:	4630      	mov	r0, r6
 8012020:	f7ff f922 	bl	8011268 <ecp_double_jac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 8012024:	4604      	mov	r4, r0
cleanup:
 8012026:	e7cd      	b.n	8011fc4 <ecp_add_mixed+0x364>
            ret = mbedtls_ecp_set_zero( R );
 8012028:	4638      	mov	r0, r7
 801202a:	f7ff fe04 	bl	8011c36 <mbedtls_ecp_set_zero>
 801202e:	e7f9      	b.n	8012024 <ecp_add_mixed+0x3c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8012030:	a901      	add	r1, sp, #4
 8012032:	4642      	mov	r2, r8
 8012034:	4608      	mov	r0, r1
 8012036:	f7fc fdde 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 801203a:	4604      	mov	r4, r0
 801203c:	2800      	cmp	r0, #0
 801203e:	f43f af25 	beq.w	8011e8c <ecp_add_mixed+0x22c>
cleanup:
 8012042:	e7bf      	b.n	8011fc4 <ecp_add_mixed+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8012044:	2100      	movs	r1, #0
 8012046:	a80d      	add	r0, sp, #52	; 0x34
 8012048:	f7fc fd5c 	bl	800eb04 <mbedtls_mpi_cmp_int>
 801204c:	2800      	cmp	r0, #0
 801204e:	f43f af45 	beq.w	8011edc <ecp_add_mixed+0x27c>
 8012052:	a90d      	add	r1, sp, #52	; 0x34
 8012054:	4642      	mov	r2, r8
 8012056:	4608      	mov	r0, r1
 8012058:	f7fc fe0b 	bl	800ec72 <mbedtls_mpi_add_mpi>
 801205c:	e737      	b.n	8011ece <ecp_add_mixed+0x26e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 801205e:	2100      	movs	r1, #0
 8012060:	a80d      	add	r0, sp, #52	; 0x34
 8012062:	f7fc fd4f 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012066:	2800      	cmp	r0, #0
 8012068:	f43f af44 	beq.w	8011ef4 <ecp_add_mixed+0x294>
 801206c:	a90d      	add	r1, sp, #52	; 0x34
 801206e:	4642      	mov	r2, r8
 8012070:	4608      	mov	r0, r1
 8012072:	f7fc fdfe 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8012076:	e736      	b.n	8011ee6 <ecp_add_mixed+0x286>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8012078:	2100      	movs	r1, #0
 801207a:	a807      	add	r0, sp, #28
 801207c:	f7fc fd42 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012080:	2800      	cmp	r0, #0
 8012082:	f43f af43 	beq.w	8011f0c <ecp_add_mixed+0x2ac>
 8012086:	a907      	add	r1, sp, #28
 8012088:	4642      	mov	r2, r8
 801208a:	4608      	mov	r0, r1
 801208c:	f7fc fdf1 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8012090:	e735      	b.n	8011efe <ecp_add_mixed+0x29e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8012092:	2100      	movs	r1, #0
 8012094:	a810      	add	r0, sp, #64	; 0x40
 8012096:	f7fc fd35 	bl	800eb04 <mbedtls_mpi_cmp_int>
 801209a:	2800      	cmp	r0, #0
 801209c:	f43f af65 	beq.w	8011f6a <ecp_add_mixed+0x30a>
 80120a0:	a910      	add	r1, sp, #64	; 0x40
 80120a2:	4642      	mov	r2, r8
 80120a4:	4608      	mov	r0, r1
 80120a6:	f7fc fde4 	bl	800ec72 <mbedtls_mpi_add_mpi>
 80120aa:	e758      	b.n	8011f5e <ecp_add_mixed+0x2fe>
 80120ac:	200010c4 	.word	0x200010c4
 80120b0:	ffffb080 	.word	0xffffb080

080120b4 <ecp_mul_comb>:
 */
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 80120b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b8:	b0e9      	sub	sp, #420	; 0x1a4
 80120ba:	4605      	mov	r5, r0
    size_t d;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *T;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 80120bc:	a811      	add	r0, sp, #68	; 0x44
{
 80120be:	468b      	mov	fp, r1
 80120c0:	920a      	str	r2, [sp, #40]	; 0x28
 80120c2:	461c      	mov	r4, r3
    mbedtls_mpi_init( &M );
 80120c4:	f7fc fa14 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 80120c8:	a814      	add	r0, sp, #80	; 0x50
 80120ca:	f7fc fa11 	bl	800e4f0 <mbedtls_mpi_init>

    /* we need N to be odd to trnaform m in an odd number, check now */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 80120ce:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 80120d2:	2100      	movs	r1, #0
 80120d4:	4618      	mov	r0, r3
 80120d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80120d8:	f7fc fb15 	bl	800e706 <mbedtls_mpi_get_bit>
 80120dc:	2801      	cmp	r0, #1
 80120de:	4606      	mov	r6, r0
 80120e0:	f040 8244 	bne.w	801256c <ecp_mul_comb+0x4b8>
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 80120e4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80120e6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80120ea:	bf2c      	ite	cs
 80120ec:	2305      	movcs	r3, #5
 80120ee:	2304      	movcc	r3, #4
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80120f0:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80120f4:	f104 000c 	add.w	r0, r4, #12
    w = grp->nbits >= 384 ? 5 : 4;
 80120f8:	9304      	str	r3, [sp, #16]
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80120fa:	f7fc fcc3 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 80120fe:	9005      	str	r0, [sp, #20]
 8012100:	2800      	cmp	r0, #0
 8012102:	d15f      	bne.n	80121c4 <ecp_mul_comb+0x110>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 8012104:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8012108:	4620      	mov	r0, r4
 801210a:	f7fc fcbb 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
    if( p_eq_g )
 801210e:	b918      	cbnz	r0, 8012118 <ecp_mul_comb+0x64>
        w++;
 8012110:	9b04      	ldr	r3, [sp, #16]
 8012112:	3301      	adds	r3, #1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 8012114:	e9cd 3604 	strd	r3, r6, [sp, #16]
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
 8012118:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        w = 2;
 801211a:	9a04      	ldr	r2, [sp, #16]
 801211c:	429a      	cmp	r2, r3
 801211e:	bf28      	it	cs
 8012120:	2202      	movcs	r2, #2
 8012122:	9204      	str	r2, [sp, #16]

    /* Other sizes that depend on w */
    pre_len = 1U << ( w - 1 );
 8012124:	3a01      	subs	r2, #1
 8012126:	9207      	str	r2, [sp, #28]
 8012128:	9907      	ldr	r1, [sp, #28]
 801212a:	2201      	movs	r2, #1
 801212c:	408a      	lsls	r2, r1
 801212e:	9208      	str	r2, [sp, #32]
 8012130:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8012134:	9209      	str	r2, [sp, #36]	; 0x24
    d = ( grp->nbits + w - 1 ) / w;
 8012136:	9a04      	ldr	r2, [sp, #16]
 8012138:	3b01      	subs	r3, #1
 801213a:	4413      	add	r3, r2
 801213c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012140:	9306      	str	r3, [sp, #24]

    /*
     * Prepare precomputed points: if P == G we want to
     * use grp->T if already initialized, or initialize it.
     */
    T = p_eq_g ? grp->T : NULL;
 8012142:	9b05      	ldr	r3, [sp, #20]
 8012144:	b123      	cbz	r3, 8012150 <ecp_mul_comb+0x9c>
 8012146:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8012148:	9303      	str	r3, [sp, #12]

    if( T == NULL )
 801214a:	2b00      	cmp	r3, #0
 801214c:	f040 8094 	bne.w	8012278 <ecp_mul_comb+0x1c4>
    {
        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );
 8012150:	4bc1      	ldr	r3, [pc, #772]	; (8012458 <ecp_mul_comb+0x3a4>)
 8012152:	9808      	ldr	r0, [sp, #32]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2124      	movs	r1, #36	; 0x24
 8012158:	4798      	blx	r3
        if( T == NULL )
 801215a:	9003      	str	r0, [sp, #12]
 801215c:	2800      	cmp	r0, #0
 801215e:	f000 8203 	beq.w	8012568 <ecp_mul_comb+0x4b4>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 8012162:	4621      	mov	r1, r4
 8012164:	f7ff fd4e 	bl	8011c04 <mbedtls_ecp_copy>
 8012168:	4604      	mov	r4, r0
 801216a:	2800      	cmp	r0, #0
 801216c:	f040 8202 	bne.w	8012574 <ecp_mul_comb+0x4c0>
 8012170:	4680      	mov	r8, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012172:	2601      	movs	r6, #1
        TT[k++] = cur;
 8012174:	f10d 0a98 	add.w	sl, sp, #152	; 0x98
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012178:	9b07      	ldr	r3, [sp, #28]
 801217a:	fa36 f303 	lsrs.w	r3, r6, r3
 801217e:	d024      	beq.n	80121ca <ecp_mul_comb+0x116>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 8012180:	af26      	add	r7, sp, #152	; 0x98
 8012182:	fa5f f288 	uxtb.w	r2, r8
 8012186:	4639      	mov	r1, r7
 8012188:	4628      	mov	r0, r5
 801218a:	f7ff fb47 	bl	801181c <ecp_normalize_jac_many>
 801218e:	4604      	mov	r4, r0
 8012190:	2800      	cmp	r0, #0
 8012192:	f040 81ef 	bne.w	8012574 <ecp_mul_comb+0x4c0>
    k = 0;
 8012196:	4682      	mov	sl, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012198:	2601      	movs	r6, #1
            TT[k++] = &T[i + j];
 801219a:	970f      	str	r7, [sp, #60]	; 0x3c
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 801219c:	9b07      	ldr	r3, [sp, #28]
 801219e:	fa36 f803 	lsrs.w	r8, r6, r3
 80121a2:	d15a      	bne.n	801225a <ecp_mul_comb+0x1a6>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 80121a4:	9a03      	ldr	r2, [sp, #12]
 80121a6:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80121aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121ae:	930d      	str	r3, [sp, #52]	; 0x34
 80121b0:	2248      	movs	r2, #72	; 0x48
 80121b2:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80121b6:	fb12 3706 	smlabb	r7, r2, r6, r3
 80121ba:	9a03      	ldr	r2, [sp, #12]
 80121bc:	4373      	muls	r3, r6
 80121be:	4417      	add	r7, r2
 80121c0:	930e      	str	r3, [sp, #56]	; 0x38
 80121c2:	e040      	b.n	8012246 <ecp_mul_comb+0x192>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80121c4:	2300      	movs	r3, #0
 80121c6:	9305      	str	r3, [sp, #20]
 80121c8:	e7a6      	b.n	8012118 <ecp_mul_comb+0x64>
        cur = T + i;
 80121ca:	9b03      	ldr	r3, [sp, #12]
 80121cc:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 80121d0:	0871      	lsrs	r1, r6, #1
        cur = T + i;
 80121d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 80121d6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80121da:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80121de:	4638      	mov	r0, r7
 80121e0:	f7ff fd10 	bl	8011c04 <mbedtls_ecp_copy>
 80121e4:	4604      	mov	r4, r0
 80121e6:	2800      	cmp	r0, #0
 80121e8:	f040 81c4 	bne.w	8012574 <ecp_mul_comb+0x4c0>
        for( j = 0; j < d; j++ )
 80121ec:	4681      	mov	r9, r0
 80121ee:	9b06      	ldr	r3, [sp, #24]
 80121f0:	454b      	cmp	r3, r9
 80121f2:	d108      	bne.n	8012206 <ecp_mul_comb+0x152>
        TT[k++] = cur;
 80121f4:	fa5f f388 	uxtb.w	r3, r8
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 80121f8:	0076      	lsls	r6, r6, #1
        TT[k++] = cur;
 80121fa:	f84a 7023 	str.w	r7, [sl, r3, lsl #2]
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 80121fe:	b2f6      	uxtb	r6, r6
 8012200:	f108 0801 	add.w	r8, r8, #1
 8012204:	e7b8      	b.n	8012178 <ecp_mul_comb+0xc4>
            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 8012206:	463a      	mov	r2, r7
 8012208:	4639      	mov	r1, r7
 801220a:	4628      	mov	r0, r5
 801220c:	f7ff f82c 	bl	8011268 <ecp_double_jac>
 8012210:	4604      	mov	r4, r0
 8012212:	2800      	cmp	r0, #0
 8012214:	f040 81ae 	bne.w	8012574 <ecp_mul_comb+0x4c0>
        for( j = 0; j < d; j++ )
 8012218:	f109 0901 	add.w	r9, r9, #1
 801221c:	e7e7      	b.n	80121ee <ecp_mul_comb+0x13a>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 801221e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8012222:	4639      	mov	r1, r7
 8012224:	443a      	add	r2, r7
 8012226:	4628      	mov	r0, r5
 8012228:	970c      	str	r7, [sp, #48]	; 0x30
 801222a:	f7ff fd19 	bl	8011c60 <ecp_add_mixed>
 801222e:	f108 0801 	add.w	r8, r8, #1
 8012232:	3f24      	subs	r7, #36	; 0x24
 8012234:	4604      	mov	r4, r0
 8012236:	2800      	cmp	r0, #0
 8012238:	f040 819c 	bne.w	8012574 <ecp_mul_comb+0x4c0>
            TT[k++] = &T[i + j];
 801223c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801223e:	461a      	mov	r2, r3
 8012240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012242:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 8012246:	eb0a 0908 	add.w	r9, sl, r8
        while( j-- )
 801224a:	4546      	cmp	r6, r8
 801224c:	fa5f f989 	uxtb.w	r9, r9
 8012250:	d1e5      	bne.n	801221e <ecp_mul_comb+0x16a>
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012252:	0076      	lsls	r6, r6, #1
 8012254:	b2f6      	uxtb	r6, r6
 8012256:	46ca      	mov	sl, r9
 8012258:	e7a0      	b.n	801219c <ecp_mul_comb+0xe8>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 801225a:	4652      	mov	r2, sl
 801225c:	a926      	add	r1, sp, #152	; 0x98
 801225e:	4628      	mov	r0, r5
 8012260:	f7ff fadc 	bl	801181c <ecp_normalize_jac_many>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );
 8012264:	4604      	mov	r4, r0
 8012266:	2800      	cmp	r0, #0
 8012268:	f040 8184 	bne.w	8012574 <ecp_mul_comb+0x4c0>

        if( p_eq_g )
 801226c:	9b05      	ldr	r3, [sp, #20]
 801226e:	b11b      	cbz	r3, 8012278 <ecp_mul_comb+0x1c4>
        {
            grp->T = T;
 8012270:	9b03      	ldr	r3, [sp, #12]
 8012272:	676b      	str	r3, [r5, #116]	; 0x74
            grp->T_size = pre_len;
 8012274:	9b08      	ldr	r3, [sp, #32]
 8012276:	67ab      	str	r3, [r5, #120]	; 0x78

    /*
     * Make sure M is odd (M = m or M = N - m, since N is odd)
     * using the fact that m * P = - (N - m) * P
     */
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 8012278:	2100      	movs	r1, #0
 801227a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801227c:	f7fc fa43 	bl	800e706 <mbedtls_mpi_get_bit>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 8012280:	ae11      	add	r6, sp, #68	; 0x44
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 8012282:	4607      	mov	r7, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 8012284:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012286:	4630      	mov	r0, r6
 8012288:	f7fc f9c2 	bl	800e610 <mbedtls_mpi_copy>
 801228c:	4604      	mov	r4, r0
 801228e:	2800      	cmp	r0, #0
 8012290:	f040 8170 	bne.w	8012574 <ecp_mul_comb+0x4c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 8012294:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 8012298:	a814      	add	r0, sp, #80	; 0x50
 801229a:	f7fc fd0c 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 801229e:	4604      	mov	r4, r0
 80122a0:	2800      	cmp	r0, #0
 80122a2:	f040 8167 	bne.w	8012574 <ecp_mul_comb+0x4c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );
 80122a6:	f117 33ff 	adds.w	r3, r7, #4294967295
 80122aa:	bf18      	it	ne
 80122ac:	2301      	movne	r3, #1
 80122ae:	461a      	mov	r2, r3
 80122b0:	a914      	add	r1, sp, #80	; 0x50
 80122b2:	4630      	mov	r0, r6
 80122b4:	9307      	str	r3, [sp, #28]
 80122b6:	f7fc f9d5 	bl	800e664 <mbedtls_mpi_safe_cond_assign>
 80122ba:	4604      	mov	r4, r0
 80122bc:	2800      	cmp	r0, #0
 80122be:	f040 8159 	bne.w	8012574 <ecp_mul_comb+0x4c0>
    memset( x, 0, d+1 );
 80122c2:	9b06      	ldr	r3, [sp, #24]
 80122c4:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 80122c8:	4601      	mov	r1, r0
 80122ca:	1c5a      	adds	r2, r3, #1
 80122cc:	4640      	mov	r0, r8
 80122ce:	f010 f82e 	bl	802232e <memset>
 80122d2:	46c1      	mov	r9, r8
    for( i = 0; i < d; i++ )
 80122d4:	4627      	mov	r7, r4
 80122d6:	9b06      	ldr	r3, [sp, #24]
 80122d8:	42bb      	cmp	r3, r7
 80122da:	f040 80c1 	bne.w	8012460 <ecp_mul_comb+0x3ac>
 80122de:	f10d 0399 	add.w	r3, sp, #153	; 0x99
    c = 0;
 80122e2:	2600      	movs	r6, #0
    for( i = 1; i <= d; i++ )
 80122e4:	eba3 0208 	sub.w	r2, r3, r8
 80122e8:	42ba      	cmp	r2, r7
 80122ea:	f240 80cf 	bls.w	801248c <ecp_mul_comb+0x3d8>
 80122ee:	a81d      	add	r0, sp, #116	; 0x74
 80122f0:	f7ff fbce 	bl	8011a90 <mbedtls_ecp_point_init.part.2>
    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );
 80122f4:	ab26      	add	r3, sp, #152	; 0x98
 80122f6:	9a03      	ldr	r2, [sp, #12]
 80122f8:	5ddb      	ldrb	r3, [r3, r7]
 80122fa:	9300      	str	r3, [sp, #0]
 80122fc:	4659      	mov	r1, fp
 80122fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012300:	4628      	mov	r0, r5
 8012302:	f7fe ff38 	bl	8011176 <ecp_select_comb>
 8012306:	4604      	mov	r4, r0
 8012308:	2800      	cmp	r0, #0
 801230a:	f040 80fc 	bne.w	8012506 <ecp_mul_comb+0x452>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 801230e:	f10b 0818 	add.w	r8, fp, #24
 8012312:	2101      	movs	r1, #1
 8012314:	4640      	mov	r0, r8
 8012316:	f7fc f9da 	bl	800e6ce <mbedtls_mpi_lset>
 801231a:	4604      	mov	r4, r0
 801231c:	2800      	cmp	r0, #0
 801231e:	f040 80f2 	bne.w	8012506 <ecp_mul_comb+0x452>
    if( f_rng != 0 )
 8012322:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 8012324:	2b00      	cmp	r3, #0
 8012326:	f000 80ea 	beq.w	80124fe <ecp_mul_comb+0x44a>
    p_size = ( grp->pbits + 7 ) / 8;
 801232a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 801232c:	ae17      	add	r6, sp, #92	; 0x5c
    p_size = ( grp->pbits + 7 ) / 8;
 801232e:	3307      	adds	r3, #7
 8012330:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012332:	4630      	mov	r0, r6
    p_size = ( grp->pbits + 7 ) / 8;
 8012334:	9304      	str	r3, [sp, #16]
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012336:	f7fc f8db 	bl	800e4f0 <mbedtls_mpi_init>
 801233a:	a81a      	add	r0, sp, #104	; 0x68
 801233c:	f7fc f8d8 	bl	800e4f0 <mbedtls_mpi_init>
 8012340:	f04f 090c 	mov.w	r9, #12
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8012344:	f105 0a04 	add.w	sl, r5, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 8012348:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 801234a:	9a72      	ldr	r2, [sp, #456]	; 0x1c8
 801234c:	9904      	ldr	r1, [sp, #16]
 801234e:	4630      	mov	r0, r6
 8012350:	f7fd fa04 	bl	800f75c <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8012354:	4603      	mov	r3, r0
 8012356:	2800      	cmp	r0, #0
 8012358:	d171      	bne.n	801243e <ecp_mul_comb+0x38a>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 801235a:	4651      	mov	r1, sl
 801235c:	4630      	mov	r0, r6
 801235e:	f7fc fb91 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8012362:	2800      	cmp	r0, #0
 8012364:	f280 80ae 	bge.w	80124c4 <ecp_mul_comb+0x410>
        if( count++ > 10 )
 8012368:	f1b9 0901 	subs.w	r9, r9, #1
 801236c:	f000 8100 	beq.w	8012570 <ecp_mul_comb+0x4bc>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 8012370:	2101      	movs	r1, #1
 8012372:	4630      	mov	r0, r6
 8012374:	f7fc fbc6 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012378:	2800      	cmp	r0, #0
 801237a:	dde5      	ble.n	8012348 <ecp_mul_comb+0x294>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 801237c:	4632      	mov	r2, r6
 801237e:	4641      	mov	r1, r8
 8012380:	4640      	mov	r0, r8
 8012382:	f7fc fcd1 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8012386:	4603      	mov	r3, r0
 8012388:	2800      	cmp	r0, #0
 801238a:	d158      	bne.n	801243e <ecp_mul_comb+0x38a>
 801238c:	4629      	mov	r1, r5
 801238e:	4640      	mov	r0, r8
 8012390:	f7fe ff24 	bl	80111dc <ecp_modp>
 8012394:	4603      	mov	r3, r0
 8012396:	2800      	cmp	r0, #0
 8012398:	d151      	bne.n	801243e <ecp_mul_comb+0x38a>
 801239a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801245c <ecp_mul_comb+0x3a8>
 801239e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80123a2:	4632      	mov	r2, r6
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80123a4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80123a6:	4631      	mov	r1, r6
 80123a8:	a81a      	add	r0, sp, #104	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80123aa:	f8c8 3004 	str.w	r3, [r8, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80123ae:	f7fc fcbb 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80123b2:	4603      	mov	r3, r0
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d142      	bne.n	801243e <ecp_mul_comb+0x38a>
 80123b8:	4629      	mov	r1, r5
 80123ba:	a81a      	add	r0, sp, #104	; 0x68
 80123bc:	f7fe ff0e 	bl	80111dc <ecp_modp>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2800      	cmp	r0, #0
 80123c4:	d13b      	bne.n	801243e <ecp_mul_comb+0x38a>
 80123c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80123ca:	aa1a      	add	r2, sp, #104	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80123cc:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80123ce:	4659      	mov	r1, fp
 80123d0:	4658      	mov	r0, fp
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80123d2:	f8c8 3004 	str.w	r3, [r8, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80123d6:	f7fc fca7 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80123da:	4603      	mov	r3, r0
 80123dc:	bb78      	cbnz	r0, 801243e <ecp_mul_comb+0x38a>
 80123de:	4629      	mov	r1, r5
 80123e0:	4658      	mov	r0, fp
 80123e2:	f7fe fefb 	bl	80111dc <ecp_modp>
 80123e6:	4603      	mov	r3, r0
 80123e8:	bb48      	cbnz	r0, 801243e <ecp_mul_comb+0x38a>
 80123ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 80123ee:	a91a      	add	r1, sp, #104	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80123f0:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 80123f2:	4632      	mov	r2, r6
 80123f4:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80123f6:	f8c8 3004 	str.w	r3, [r8, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 80123fa:	f7fc fc95 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80123fe:	4603      	mov	r3, r0
 8012400:	b9e8      	cbnz	r0, 801243e <ecp_mul_comb+0x38a>
 8012402:	4629      	mov	r1, r5
 8012404:	a81a      	add	r0, sp, #104	; 0x68
 8012406:	f7fe fee9 	bl	80111dc <ecp_modp>
 801240a:	4603      	mov	r3, r0
 801240c:	b9b8      	cbnz	r0, 801243e <ecp_mul_comb+0x38a>
 801240e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012412:	3301      	adds	r3, #1
 8012414:	f8c8 3004 	str.w	r3, [r8, #4]
 8012418:	4646      	mov	r6, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 801241a:	f10b 080c 	add.w	r8, fp, #12
 801241e:	aa1a      	add	r2, sp, #104	; 0x68
 8012420:	4641      	mov	r1, r8
 8012422:	4640      	mov	r0, r8
 8012424:	f7fc fc80 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8012428:	4603      	mov	r3, r0
 801242a:	b940      	cbnz	r0, 801243e <ecp_mul_comb+0x38a>
 801242c:	4629      	mov	r1, r5
 801242e:	4640      	mov	r0, r8
 8012430:	f7fe fed4 	bl	80111dc <ecp_modp>
 8012434:	4603      	mov	r3, r0
 8012436:	b910      	cbnz	r0, 801243e <ecp_mul_comb+0x38a>
 8012438:	6872      	ldr	r2, [r6, #4]
 801243a:	3201      	adds	r2, #1
 801243c:	6072      	str	r2, [r6, #4]
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 801243e:	a817      	add	r0, sp, #92	; 0x5c
 8012440:	9304      	str	r3, [sp, #16]
 8012442:	f7fc f85d 	bl	800e500 <mbedtls_mpi_free>
 8012446:	a81a      	add	r0, sp, #104	; 0x68
 8012448:	f7fc f85a 	bl	800e500 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 801244c:	9b04      	ldr	r3, [sp, #16]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d055      	beq.n	80124fe <ecp_mul_comb+0x44a>
 8012452:	461c      	mov	r4, r3
 8012454:	e057      	b.n	8012506 <ecp_mul_comb+0x452>
 8012456:	bf00      	nop
 8012458:	200005a0 	.word	0x200005a0
 801245c:	200010c4 	.word	0x200010c4
    for( i = 0; i < d; i++ )
 8012460:	46ba      	mov	sl, r7
        for( j = 0; j < w; j++ )
 8012462:	2400      	movs	r4, #0
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 8012464:	4651      	mov	r1, sl
 8012466:	4630      	mov	r0, r6
 8012468:	f7fc f94d 	bl	800e706 <mbedtls_mpi_get_bit>
 801246c:	f899 3000 	ldrb.w	r3, [r9]
 8012470:	40a0      	lsls	r0, r4
 8012472:	4318      	orrs	r0, r3
 8012474:	9b06      	ldr	r3, [sp, #24]
 8012476:	f889 0000 	strb.w	r0, [r9]
 801247a:	449a      	add	sl, r3
        for( j = 0; j < w; j++ )
 801247c:	9b04      	ldr	r3, [sp, #16]
 801247e:	3401      	adds	r4, #1
 8012480:	42a3      	cmp	r3, r4
 8012482:	d8ef      	bhi.n	8012464 <ecp_mul_comb+0x3b0>
    for( i = 0; i < d; i++ )
 8012484:	3701      	adds	r7, #1
 8012486:	f109 0901 	add.w	r9, r9, #1
 801248a:	e724      	b.n	80122d6 <ecp_mul_comb+0x222>
        cc   = x[i] & c;
 801248c:	781c      	ldrb	r4, [r3, #0]
        c   |= x[i] & ( x[i-1] * adjust );
 801248e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
        x[i] = x[i] ^ c;
 8012492:	ea84 0206 	eor.w	r2, r4, r6
 8012496:	43d0      	mvns	r0, r2
 8012498:	f000 0001 	and.w	r0, r0, #1
        c   |= x[i] & ( x[i-1] * adjust );
 801249c:	fb11 f100 	smulbb	r1, r1, r0
 80124a0:	b252      	sxtb	r2, r2
 80124a2:	b249      	sxtb	r1, r1
 80124a4:	ea02 0c01 	and.w	ip, r2, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
 80124a8:	404a      	eors	r2, r1
 80124aa:	f803 2b01 	strb.w	r2, [r3], #1
        x[i-1] |= adjust << 7;
 80124ae:	f813 2c02 	ldrb.w	r2, [r3, #-2]
        cc   = x[i] & c;
 80124b2:	4034      	ands	r4, r6
        c   |= x[i] & ( x[i-1] * adjust );
 80124b4:	ea4c 0604 	orr.w	r6, ip, r4
        x[i-1] |= adjust << 7;
 80124b8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
 80124bc:	b2f6      	uxtb	r6, r6
        x[i-1] |= adjust << 7;
 80124be:	f803 0c02 	strb.w	r0, [r3, #-2]
 80124c2:	e70f      	b.n	80122e4 <ecp_mul_comb+0x230>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 80124c4:	2101      	movs	r1, #1
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7fc fa0c 	bl	800e8e4 <mbedtls_mpi_shift_r>
 80124cc:	e742      	b.n	8012354 <ecp_mul_comb+0x2a0>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 80124ce:	465a      	mov	r2, fp
 80124d0:	4659      	mov	r1, fp
 80124d2:	4628      	mov	r0, r5
 80124d4:	f7fe fec8 	bl	8011268 <ecp_double_jac>
 80124d8:	b978      	cbnz	r0, 80124fa <ecp_mul_comb+0x446>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 80124da:	5dbb      	ldrb	r3, [r7, r6]
 80124dc:	9300      	str	r3, [sp, #0]
 80124de:	9a03      	ldr	r2, [sp, #12]
 80124e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124e2:	a91d      	add	r1, sp, #116	; 0x74
 80124e4:	4628      	mov	r0, r5
 80124e6:	f7fe fe46 	bl	8011176 <ecp_select_comb>
 80124ea:	b930      	cbnz	r0, 80124fa <ecp_mul_comb+0x446>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 80124ec:	ab1d      	add	r3, sp, #116	; 0x74
 80124ee:	465a      	mov	r2, fp
 80124f0:	4659      	mov	r1, fp
 80124f2:	4628      	mov	r0, r5
 80124f4:	f7ff fbb4 	bl	8011c60 <ecp_add_mixed>
 80124f8:	b110      	cbz	r0, 8012500 <ecp_mul_comb+0x44c>
 80124fa:	4604      	mov	r4, r0
 80124fc:	e003      	b.n	8012506 <ecp_mul_comb+0x452>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 80124fe:	ae26      	add	r6, sp, #152	; 0x98
    while( i-- != 0 )
 8012500:	f117 37ff 	adds.w	r7, r7, #4294967295
 8012504:	d2e3      	bcs.n	80124ce <ecp_mul_comb+0x41a>
 8012506:	a81d      	add	r0, sp, #116	; 0x74
 8012508:	f7ff fad0 	bl	8011aac <mbedtls_ecp_point_free.part.4>

    /*
     * Go for comb multiplication, R = M * P
     */
    ecp_comb_fixed( k, d, w, &M );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );
 801250c:	2c00      	cmp	r4, #0
 801250e:	d131      	bne.n	8012574 <ecp_mul_comb+0x4c0>

    /*
     * Now get m * P from M * P and normalize it
     */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
 8012510:	9a07      	ldr	r2, [sp, #28]
 8012512:	4659      	mov	r1, fp
 8012514:	4628      	mov	r0, r5
 8012516:	f7fe fe0b 	bl	8011130 <ecp_safe_invert_jac>
 801251a:	4604      	mov	r4, r0
 801251c:	bb50      	cbnz	r0, 8012574 <ecp_mul_comb+0x4c0>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 801251e:	4659      	mov	r1, fp
 8012520:	4628      	mov	r0, r5
 8012522:	f7ff f909 	bl	8011738 <ecp_normalize_jac>

cleanup:

    if( T != NULL && ! p_eq_g )
 8012526:	9b05      	ldr	r3, [sp, #20]
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012528:	4604      	mov	r4, r0
    if( T != NULL && ! p_eq_g )
 801252a:	b97b      	cbnz	r3, 801254c <ecp_mul_comb+0x498>
        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 801252c:	2500      	movs	r5, #0
    {
        for( i = 0; i < pre_len; i++ )
            mbedtls_ecp_point_free( &T[i] );
 801252e:	2624      	movs	r6, #36	; 0x24
 8012530:	9b03      	ldr	r3, [sp, #12]
 8012532:	fb06 3005 	mla	r0, r6, r5, r3
 8012536:	f7ff fb1b 	bl	8011b70 <mbedtls_ecp_point_free>
 801253a:	3501      	adds	r5, #1
        for( i = 0; i < pre_len; i++ )
 801253c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801253e:	b2eb      	uxtb	r3, r5
 8012540:	429a      	cmp	r2, r3
 8012542:	d8f5      	bhi.n	8012530 <ecp_mul_comb+0x47c>
        mbedtls_free( T );
 8012544:	4b10      	ldr	r3, [pc, #64]	; (8012588 <ecp_mul_comb+0x4d4>)
 8012546:	9803      	ldr	r0, [sp, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4798      	blx	r3
    }

    mbedtls_mpi_free( &M );
 801254c:	a811      	add	r0, sp, #68	; 0x44
 801254e:	f7fb ffd7 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &mm );
 8012552:	a814      	add	r0, sp, #80	; 0x50
 8012554:	f7fb ffd4 	bl	800e500 <mbedtls_mpi_free>

    if( ret != 0 )
 8012558:	b114      	cbz	r4, 8012560 <ecp_mul_comb+0x4ac>
        mbedtls_ecp_point_free( R );
 801255a:	4658      	mov	r0, fp
 801255c:	f7ff fb08 	bl	8011b70 <mbedtls_ecp_point_free>

    return( ret );
}
 8012560:	4620      	mov	r0, r4
 8012562:	b069      	add	sp, #420	; 0x1a4
 8012564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8012568:	4c08      	ldr	r4, [pc, #32]	; (801258c <ecp_mul_comb+0x4d8>)
 801256a:	e7ef      	b.n	801254c <ecp_mul_comb+0x498>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801256c:	4c08      	ldr	r4, [pc, #32]	; (8012590 <ecp_mul_comb+0x4dc>)
 801256e:	e7f7      	b.n	8012560 <ecp_mul_comb+0x4ac>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8012570:	4c08      	ldr	r4, [pc, #32]	; (8012594 <ecp_mul_comb+0x4e0>)
 8012572:	e7c8      	b.n	8012506 <ecp_mul_comb+0x452>
    if( T != NULL && ! p_eq_g )
 8012574:	9b05      	ldr	r3, [sp, #20]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d0d8      	beq.n	801252c <ecp_mul_comb+0x478>
    mbedtls_mpi_free( &M );
 801257a:	a811      	add	r0, sp, #68	; 0x44
 801257c:	f7fb ffc0 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &mm );
 8012580:	a814      	add	r0, sp, #80	; 0x50
 8012582:	f7fb ffbd 	bl	800e500 <mbedtls_mpi_free>
 8012586:	e7e8      	b.n	801255a <ecp_mul_comb+0x4a6>
 8012588:	200005a4 	.word	0x200005a4
 801258c:	ffffb280 	.word	0xffffb280
 8012590:	ffffb080 	.word	0xffffb080
 8012594:	ffffb300 	.word	0xffffb300

08012598 <mbedtls_ecp_is_zero>:
{
 8012598:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 801259a:	2100      	movs	r1, #0
 801259c:	3018      	adds	r0, #24
 801259e:	f7fc fab1 	bl	800eb04 <mbedtls_mpi_cmp_int>
}
 80125a2:	fab0 f080 	clz	r0, r0
 80125a6:	0940      	lsrs	r0, r0, #5
 80125a8:	bd08      	pop	{r3, pc}
	...

080125ac <mbedtls_ecp_point_write_binary>:
{
 80125ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 80125b0:	2a01      	cmp	r2, #1
{
 80125b2:	4605      	mov	r5, r0
 80125b4:	460e      	mov	r6, r1
 80125b6:	4691      	mov	r9, r2
 80125b8:	4698      	mov	r8, r3
 80125ba:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 80125be:	d83f      	bhi.n	8012640 <mbedtls_ecp_point_write_binary+0x94>
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80125c0:	2100      	movs	r1, #0
 80125c2:	f106 0018 	add.w	r0, r6, #24
 80125c6:	f7fc fa9d 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80125ca:	b940      	cbnz	r0, 80125de <mbedtls_ecp_point_write_binary+0x32>
        if( buflen < 1 )
 80125cc:	b917      	cbnz	r7, 80125d4 <mbedtls_ecp_point_write_binary+0x28>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 80125ce:	481d      	ldr	r0, [pc, #116]	; (8012644 <mbedtls_ecp_point_write_binary+0x98>)
}
 80125d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *olen = 1;
 80125d4:	2301      	movs	r3, #1
        buf[0] = 0x00;
 80125d6:	7020      	strb	r0, [r4, #0]
        *olen = 1;
 80125d8:	f8c8 3000 	str.w	r3, [r8]
        return( 0 );
 80125dc:	e7f8      	b.n	80125d0 <mbedtls_ecp_point_write_binary+0x24>
    plen = mbedtls_mpi_size( &grp->P );
 80125de:	1d28      	adds	r0, r5, #4
 80125e0:	f7fc f8dc 	bl	800e79c <mbedtls_mpi_size>
 80125e4:	4605      	mov	r5, r0
    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 80125e6:	f1b9 0f00 	cmp.w	r9, #0
 80125ea:	d118      	bne.n	801261e <mbedtls_ecp_point_write_binary+0x72>
        *olen = 2 * plen + 1;
 80125ec:	0042      	lsls	r2, r0, #1
 80125ee:	3201      	adds	r2, #1
        if( buflen < *olen )
 80125f0:	4297      	cmp	r7, r2
        *olen = 2 * plen + 1;
 80125f2:	f8c8 2000 	str.w	r2, [r8]
        if( buflen < *olen )
 80125f6:	d3ea      	bcc.n	80125ce <mbedtls_ecp_point_write_binary+0x22>
        buf[0] = 0x04;
 80125f8:	4621      	mov	r1, r4
 80125fa:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80125fc:	4602      	mov	r2, r0
        buf[0] = 0x04;
 80125fe:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012602:	4630      	mov	r0, r6
 8012604:	f7fc f903 	bl	800e80e <mbedtls_mpi_write_binary>
 8012608:	2800      	cmp	r0, #0
 801260a:	d1e1      	bne.n	80125d0 <mbedtls_ecp_point_write_binary+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 801260c:	1c69      	adds	r1, r5, #1
 801260e:	462a      	mov	r2, r5
 8012610:	4421      	add	r1, r4
 8012612:	f106 000c 	add.w	r0, r6, #12
}
 8012616:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 801261a:	f7fc b8f8 	b.w	800e80e <mbedtls_mpi_write_binary>
        *olen = plen + 1;
 801261e:	1c43      	adds	r3, r0, #1
        if( buflen < *olen )
 8012620:	429f      	cmp	r7, r3
        *olen = plen + 1;
 8012622:	f8c8 3000 	str.w	r3, [r8]
        if( buflen < *olen )
 8012626:	d3d2      	bcc.n	80125ce <mbedtls_ecp_point_write_binary+0x22>
        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 8012628:	2100      	movs	r1, #0
 801262a:	f106 000c 	add.w	r0, r6, #12
 801262e:	f7fc f86a 	bl	800e706 <mbedtls_mpi_get_bit>
 8012632:	4621      	mov	r1, r4
 8012634:	3002      	adds	r0, #2
 8012636:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 801263a:	462a      	mov	r2, r5
 801263c:	4630      	mov	r0, r6
 801263e:	e7ea      	b.n	8012616 <mbedtls_ecp_point_write_binary+0x6a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012640:	4801      	ldr	r0, [pc, #4]	; (8012648 <mbedtls_ecp_point_write_binary+0x9c>)
 8012642:	e7c5      	b.n	80125d0 <mbedtls_ecp_point_write_binary+0x24>
 8012644:	ffffb100 	.word	0xffffb100
 8012648:	ffffb080 	.word	0xffffb080

0801264c <mbedtls_ecp_point_read_binary>:
{
 801264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264e:	460c      	mov	r4, r1
 8012650:	4615      	mov	r5, r2
    if( ilen < 1 )
 8012652:	461f      	mov	r7, r3
 8012654:	b90b      	cbnz	r3, 801265a <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012656:	4817      	ldr	r0, [pc, #92]	; (80126b4 <mbedtls_ecp_point_read_binary+0x68>)
}
 8012658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( buf[0] == 0x00 )
 801265a:	7813      	ldrb	r3, [r2, #0]
 801265c:	b933      	cbnz	r3, 801266c <mbedtls_ecp_point_read_binary+0x20>
        if( ilen == 1 )
 801265e:	2f01      	cmp	r7, #1
 8012660:	d1f9      	bne.n	8012656 <mbedtls_ecp_point_read_binary+0xa>
            return( mbedtls_ecp_set_zero( pt ) );
 8012662:	4608      	mov	r0, r1
}
 8012664:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            return( mbedtls_ecp_set_zero( pt ) );
 8012668:	f7ff bae5 	b.w	8011c36 <mbedtls_ecp_set_zero>
    plen = mbedtls_mpi_size( &grp->P );
 801266c:	3004      	adds	r0, #4
 801266e:	f7fc f895 	bl	800e79c <mbedtls_mpi_size>
    if( buf[0] != 0x04 )
 8012672:	782b      	ldrb	r3, [r5, #0]
 8012674:	2b04      	cmp	r3, #4
    plen = mbedtls_mpi_size( &grp->P );
 8012676:	4606      	mov	r6, r0
    if( buf[0] != 0x04 )
 8012678:	d11a      	bne.n	80126b0 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
 801267a:	0042      	lsls	r2, r0, #1
 801267c:	3201      	adds	r2, #1
 801267e:	4297      	cmp	r7, r2
 8012680:	d1e9      	bne.n	8012656 <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 8012682:	4602      	mov	r2, r0
 8012684:	1c69      	adds	r1, r5, #1
 8012686:	4620      	mov	r0, r4
 8012688:	f7fc f88e 	bl	800e7a8 <mbedtls_mpi_read_binary>
 801268c:	2800      	cmp	r0, #0
 801268e:	d1e3      	bne.n	8012658 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 8012690:	1c71      	adds	r1, r6, #1
 8012692:	4632      	mov	r2, r6
 8012694:	4429      	add	r1, r5
 8012696:	f104 000c 	add.w	r0, r4, #12
 801269a:	f7fc f885 	bl	800e7a8 <mbedtls_mpi_read_binary>
 801269e:	2800      	cmp	r0, #0
 80126a0:	d1da      	bne.n	8012658 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80126a2:	f104 0018 	add.w	r0, r4, #24
 80126a6:	2101      	movs	r1, #1
}
 80126a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80126ac:	f7fc b80f 	b.w	800e6ce <mbedtls_mpi_lset>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80126b0:	4801      	ldr	r0, [pc, #4]	; (80126b8 <mbedtls_ecp_point_read_binary+0x6c>)
 80126b2:	e7d1      	b.n	8012658 <mbedtls_ecp_point_read_binary+0xc>
 80126b4:	ffffb080 	.word	0xffffb080
 80126b8:	ffffb180 	.word	0xffffb180

080126bc <mbedtls_ecp_tls_read_point>:
    if( buf_len < 2 )
 80126bc:	2b01      	cmp	r3, #1
{
 80126be:	b430      	push	{r4, r5}
 80126c0:	4615      	mov	r5, r2
    if( buf_len < 2 )
 80126c2:	d90d      	bls.n	80126e0 <mbedtls_ecp_tls_read_point+0x24>
    data_len = *(*buf)++;
 80126c4:	6814      	ldr	r4, [r2, #0]
 80126c6:	1c62      	adds	r2, r4, #1
 80126c8:	602a      	str	r2, [r5, #0]
 80126ca:	7824      	ldrb	r4, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
 80126cc:	b144      	cbz	r4, 80126e0 <mbedtls_ecp_tls_read_point+0x24>
 80126ce:	3b01      	subs	r3, #1
 80126d0:	429c      	cmp	r4, r3
 80126d2:	d805      	bhi.n	80126e0 <mbedtls_ecp_tls_read_point+0x24>
    *buf += data_len;
 80126d4:	1913      	adds	r3, r2, r4
 80126d6:	602b      	str	r3, [r5, #0]
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 80126d8:	4623      	mov	r3, r4
}
 80126da:	bc30      	pop	{r4, r5}
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 80126dc:	f7ff bfb6 	b.w	801264c <mbedtls_ecp_point_read_binary>
}
 80126e0:	4801      	ldr	r0, [pc, #4]	; (80126e8 <mbedtls_ecp_tls_read_point+0x2c>)
 80126e2:	bc30      	pop	{r4, r5}
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	ffffb080 	.word	0xffffb080

080126ec <mbedtls_ecp_tls_write_point>:
{
 80126ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126ee:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 80126f2:	461d      	mov	r5, r3
    if( blen < 1 )
 80126f4:	b16c      	cbz	r4, 8012712 <mbedtls_ecp_tls_write_point+0x26>
    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
 80126f6:	3c01      	subs	r4, #1
 80126f8:	9401      	str	r4, [sp, #4]
 80126fa:	1c74      	adds	r4, r6, #1
 80126fc:	9400      	str	r4, [sp, #0]
 80126fe:	f7ff ff55 	bl	80125ac <mbedtls_ecp_point_write_binary>
 8012702:	b920      	cbnz	r0, 801270e <mbedtls_ecp_tls_write_point+0x22>
    buf[0] = (unsigned char) *olen;
 8012704:	682b      	ldr	r3, [r5, #0]
 8012706:	7033      	strb	r3, [r6, #0]
    ++*olen;
 8012708:	682b      	ldr	r3, [r5, #0]
 801270a:	3301      	adds	r3, #1
 801270c:	602b      	str	r3, [r5, #0]
}
 801270e:	b002      	add	sp, #8
 8012710:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012712:	4801      	ldr	r0, [pc, #4]	; (8012718 <mbedtls_ecp_tls_write_point+0x2c>)
 8012714:	e7fb      	b.n	801270e <mbedtls_ecp_tls_write_point+0x22>
 8012716:	bf00      	nop
 8012718:	ffffb080 	.word	0xffffb080

0801271c <mbedtls_ecp_tls_read_group>:
    if( len < 3 )
 801271c:	2a02      	cmp	r2, #2
{
 801271e:	b510      	push	{r4, lr}
 8012720:	4604      	mov	r4, r0
    if( len < 3 )
 8012722:	d801      	bhi.n	8012728 <mbedtls_ecp_tls_read_group+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012724:	480d      	ldr	r0, [pc, #52]	; (801275c <mbedtls_ecp_tls_read_group+0x40>)
}
 8012726:	bd10      	pop	{r4, pc}
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
 8012728:	680b      	ldr	r3, [r1, #0]
 801272a:	1c5a      	adds	r2, r3, #1
 801272c:	600a      	str	r2, [r1, #0]
 801272e:	781a      	ldrb	r2, [r3, #0]
 8012730:	2a03      	cmp	r2, #3
 8012732:	d1f7      	bne.n	8012724 <mbedtls_ecp_tls_read_group+0x8>
    tls_id = *(*buf)++;
 8012734:	1c9a      	adds	r2, r3, #2
 8012736:	600a      	str	r2, [r1, #0]
    tls_id |= *(*buf)++;
 8012738:	1cda      	adds	r2, r3, #3
    tls_id = *(*buf)++;
 801273a:	7858      	ldrb	r0, [r3, #1]
    tls_id |= *(*buf)++;
 801273c:	600a      	str	r2, [r1, #0]
 801273e:	789b      	ldrb	r3, [r3, #2]
    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
 8012740:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8012744:	f7ff f9ec 	bl	8011b20 <mbedtls_ecp_curve_info_from_tls_id>
 8012748:	b128      	cbz	r0, 8012756 <mbedtls_ecp_tls_read_group+0x3a>
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 801274a:	7801      	ldrb	r1, [r0, #0]
 801274c:	4620      	mov	r0, r4
}
 801274e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 8012752:	f001 b82b 	b.w	80137ac <mbedtls_ecp_group_load>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012756:	4802      	ldr	r0, [pc, #8]	; (8012760 <mbedtls_ecp_tls_read_group+0x44>)
 8012758:	e7e5      	b.n	8012726 <mbedtls_ecp_tls_read_group+0xa>
 801275a:	bf00      	nop
 801275c:	ffffb080 	.word	0xffffb080
 8012760:	ffffb180 	.word	0xffffb180

08012764 <mbedtls_ecp_check_pubkey>:

/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8012764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012768:	4688      	mov	r8, r1
 801276a:	b086      	sub	sp, #24
 801276c:	4605      	mov	r5, r0
    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 801276e:	2101      	movs	r1, #1
 8012770:	f108 0018 	add.w	r0, r8, #24
 8012774:	f7fc f9c6 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012778:	4606      	mov	r6, r0
 801277a:	b958      	cbnz	r0, 8012794 <mbedtls_ecp_check_pubkey+0x30>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 801277c:	4628      	mov	r0, r5
 801277e:	f7fe fccd 	bl	801111c <ecp_get_type>
 8012782:	2801      	cmp	r0, #1
 8012784:	f040 80ac 	bne.w	80128e0 <mbedtls_ecp_check_pubkey+0x17c>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8012788:	4631      	mov	r1, r6
 801278a:	4640      	mov	r0, r8
 801278c:	f7fc f9ba 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012790:	2800      	cmp	r0, #0
 8012792:	da01      	bge.n	8012798 <mbedtls_ecp_check_pubkey+0x34>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012794:	4c53      	ldr	r4, [pc, #332]	; (80128e4 <mbedtls_ecp_check_pubkey+0x180>)
 8012796:	e078      	b.n	801288a <mbedtls_ecp_check_pubkey+0x126>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8012798:	f108 040c 	add.w	r4, r8, #12
 801279c:	4631      	mov	r1, r6
 801279e:	4620      	mov	r0, r4
 80127a0:	f7fc f9b0 	bl	800eb04 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 80127a4:	2800      	cmp	r0, #0
 80127a6:	dbf5      	blt.n	8012794 <mbedtls_ecp_check_pubkey+0x30>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 80127a8:	1d2f      	adds	r7, r5, #4
 80127aa:	4639      	mov	r1, r7
 80127ac:	4640      	mov	r0, r8
 80127ae:	f7fc f969 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 80127b2:	2800      	cmp	r0, #0
 80127b4:	daee      	bge.n	8012794 <mbedtls_ecp_check_pubkey+0x30>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 80127b6:	4639      	mov	r1, r7
 80127b8:	4620      	mov	r0, r4
 80127ba:	f7fc f963 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 80127be:	2800      	cmp	r0, #0
 80127c0:	dae8      	bge.n	8012794 <mbedtls_ecp_check_pubkey+0x30>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 80127c2:	4668      	mov	r0, sp
 80127c4:	f7fb fe94 	bl	800e4f0 <mbedtls_mpi_init>
 80127c8:	a803      	add	r0, sp, #12
 80127ca:	f7fb fe91 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 80127ce:	4622      	mov	r2, r4
 80127d0:	4621      	mov	r1, r4
 80127d2:	4668      	mov	r0, sp
 80127d4:	f7fc faa8 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80127d8:	4604      	mov	r4, r0
 80127da:	2800      	cmp	r0, #0
 80127dc:	d14f      	bne.n	801287e <mbedtls_ecp_check_pubkey+0x11a>
 80127de:	4629      	mov	r1, r5
 80127e0:	4668      	mov	r0, sp
 80127e2:	f7fe fcfb 	bl	80111dc <ecp_modp>
 80127e6:	4604      	mov	r4, r0
 80127e8:	2800      	cmp	r0, #0
 80127ea:	d148      	bne.n	801287e <mbedtls_ecp_check_pubkey+0x11a>
 80127ec:	4e3e      	ldr	r6, [pc, #248]	; (80128e8 <mbedtls_ecp_check_pubkey+0x184>)
 80127ee:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 80127f0:	4642      	mov	r2, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 80127f2:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 80127f4:	4641      	mov	r1, r8
 80127f6:	a803      	add	r0, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 80127f8:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 80127fa:	f7fc fa95 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80127fe:	4604      	mov	r4, r0
 8012800:	2800      	cmp	r0, #0
 8012802:	d13c      	bne.n	801287e <mbedtls_ecp_check_pubkey+0x11a>
 8012804:	4629      	mov	r1, r5
 8012806:	a803      	add	r0, sp, #12
 8012808:	f7fe fce8 	bl	80111dc <ecp_modp>
 801280c:	4604      	mov	r4, r0
 801280e:	2800      	cmp	r0, #0
 8012810:	d135      	bne.n	801287e <mbedtls_ecp_check_pubkey+0x11a>
 8012812:	6873      	ldr	r3, [r6, #4]
 8012814:	3301      	adds	r3, #1
 8012816:	6073      	str	r3, [r6, #4]
    if( grp->A.p == NULL )
 8012818:	69ab      	ldr	r3, [r5, #24]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d145      	bne.n	80128aa <mbedtls_ecp_check_pubkey+0x146>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 801281e:	a903      	add	r1, sp, #12
 8012820:	2203      	movs	r2, #3
 8012822:	4608      	mov	r0, r1
 8012824:	f7fc fa6a 	bl	800ecfc <mbedtls_mpi_sub_int>
 8012828:	4604      	mov	r4, r0
 801282a:	bb40      	cbnz	r0, 801287e <mbedtls_ecp_check_pubkey+0x11a>
 801282c:	9b03      	ldr	r3, [sp, #12]
 801282e:	2b00      	cmp	r3, #0
 8012830:	db2f      	blt.n	8012892 <mbedtls_ecp_check_pubkey+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012832:	a903      	add	r1, sp, #12
 8012834:	4642      	mov	r2, r8
 8012836:	4608      	mov	r0, r1
 8012838:	f7fc fa76 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801283c:	4604      	mov	r4, r0
 801283e:	b9f0      	cbnz	r0, 801287e <mbedtls_ecp_check_pubkey+0x11a>
 8012840:	4629      	mov	r1, r5
 8012842:	a803      	add	r0, sp, #12
 8012844:	f7fe fcca 	bl	80111dc <ecp_modp>
 8012848:	4604      	mov	r4, r0
 801284a:	b9c0      	cbnz	r0, 801287e <mbedtls_ecp_check_pubkey+0x11a>
 801284c:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 801284e:	a903      	add	r1, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012850:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012852:	f105 021c 	add.w	r2, r5, #28
 8012856:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012858:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 801285a:	f7fc fa0a 	bl	800ec72 <mbedtls_mpi_add_mpi>
 801285e:	4604      	mov	r4, r0
 8012860:	b968      	cbnz	r0, 801287e <mbedtls_ecp_check_pubkey+0x11a>
 8012862:	4639      	mov	r1, r7
 8012864:	a803      	add	r0, sp, #12
 8012866:	f7fc f90d 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 801286a:	2800      	cmp	r0, #0
 801286c:	da32      	bge.n	80128d4 <mbedtls_ecp_check_pubkey+0x170>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 801286e:	a903      	add	r1, sp, #12
 8012870:	4668      	mov	r0, sp
 8012872:	f7fc f907 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8012876:	4c1b      	ldr	r4, [pc, #108]	; (80128e4 <mbedtls_ecp_check_pubkey+0x180>)
 8012878:	2800      	cmp	r0, #0
 801287a:	bf08      	it	eq
 801287c:	2400      	moveq	r4, #0
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 801287e:	4668      	mov	r0, sp
 8012880:	f7fb fe3e 	bl	800e500 <mbedtls_mpi_free>
 8012884:	a803      	add	r0, sp, #12
 8012886:	f7fb fe3b 	bl	800e500 <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 801288a:	4620      	mov	r0, r4
 801288c:	b006      	add	sp, #24
 801288e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8012892:	2100      	movs	r1, #0
 8012894:	a803      	add	r0, sp, #12
 8012896:	f7fc f935 	bl	800eb04 <mbedtls_mpi_cmp_int>
 801289a:	2800      	cmp	r0, #0
 801289c:	d0c9      	beq.n	8012832 <mbedtls_ecp_check_pubkey+0xce>
 801289e:	a903      	add	r1, sp, #12
 80128a0:	463a      	mov	r2, r7
 80128a2:	4608      	mov	r0, r1
 80128a4:	f7fc f9e5 	bl	800ec72 <mbedtls_mpi_add_mpi>
 80128a8:	e7be      	b.n	8012828 <mbedtls_ecp_check_pubkey+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 80128aa:	a903      	add	r1, sp, #12
 80128ac:	f105 0210 	add.w	r2, r5, #16
 80128b0:	4608      	mov	r0, r1
 80128b2:	f7fc f9de 	bl	800ec72 <mbedtls_mpi_add_mpi>
 80128b6:	4604      	mov	r4, r0
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d1e0      	bne.n	801287e <mbedtls_ecp_check_pubkey+0x11a>
 80128bc:	4639      	mov	r1, r7
 80128be:	a803      	add	r0, sp, #12
 80128c0:	f7fc f8e0 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 80128c4:	2800      	cmp	r0, #0
 80128c6:	dbb4      	blt.n	8012832 <mbedtls_ecp_check_pubkey+0xce>
 80128c8:	a903      	add	r1, sp, #12
 80128ca:	463a      	mov	r2, r7
 80128cc:	4608      	mov	r0, r1
 80128ce:	f7fc f992 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 80128d2:	e7f0      	b.n	80128b6 <mbedtls_ecp_check_pubkey+0x152>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 80128d4:	a903      	add	r1, sp, #12
 80128d6:	463a      	mov	r2, r7
 80128d8:	4608      	mov	r0, r1
 80128da:	f7fc f98c 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 80128de:	e7be      	b.n	801285e <mbedtls_ecp_check_pubkey+0xfa>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80128e0:	4c02      	ldr	r4, [pc, #8]	; (80128ec <mbedtls_ecp_check_pubkey+0x188>)
 80128e2:	e7d2      	b.n	801288a <mbedtls_ecp_check_pubkey+0x126>
 80128e4:	ffffb380 	.word	0xffffb380
 80128e8:	200010c4 	.word	0x200010c4
 80128ec:	ffffb080 	.word	0xffffb080

080128f0 <mbedtls_ecp_check_privkey>:

/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )
{
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	460c      	mov	r4, r1
 80128f4:	4605      	mov	r5, r0
        else
            return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80128f6:	f7fe fc11 	bl	801111c <ecp_get_type>
 80128fa:	2801      	cmp	r0, #1
 80128fc:	4601      	mov	r1, r0
 80128fe:	d10d      	bne.n	801291c <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012900:	4620      	mov	r0, r4
 8012902:	f7fc f8ff 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012906:	2800      	cmp	r0, #0
 8012908:	db06      	blt.n	8012918 <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 801290a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 801290e:	4620      	mov	r0, r4
 8012910:	f7fc f8b8 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012914:	2800      	cmp	r0, #0
 8012916:	db03      	blt.n	8012920 <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012918:	4802      	ldr	r0, [pc, #8]	; (8012924 <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 801291a:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801291c:	4802      	ldr	r0, [pc, #8]	; (8012928 <mbedtls_ecp_check_privkey+0x38>)
 801291e:	e7fc      	b.n	801291a <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
 8012920:	2000      	movs	r0, #0
 8012922:	e7fa      	b.n	801291a <mbedtls_ecp_check_privkey+0x2a>
 8012924:	ffffb380 	.word	0xffffb380
 8012928:	ffffb080 	.word	0xffffb080

0801292c <mbedtls_ecp_mul>:
{
 801292c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012930:	4604      	mov	r4, r0
 8012932:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012934:	f103 0018 	add.w	r0, r3, #24
 8012938:	2101      	movs	r1, #1
{
 801293a:	4616      	mov	r6, r2
 801293c:	461d      	mov	r5, r3
 801293e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012942:	f7fc f8df 	bl	800eb04 <mbedtls_mpi_cmp_int>
 8012946:	b9d0      	cbnz	r0, 801297e <mbedtls_ecp_mul+0x52>
    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
 8012948:	4631      	mov	r1, r6
 801294a:	4620      	mov	r0, r4
 801294c:	f7ff ffd0 	bl	80128f0 <mbedtls_ecp_check_privkey>
 8012950:	4602      	mov	r2, r0
 8012952:	b9a8      	cbnz	r0, 8012980 <mbedtls_ecp_mul+0x54>
 8012954:	4629      	mov	r1, r5
 8012956:	4620      	mov	r0, r4
 8012958:	f7ff ff04 	bl	8012764 <mbedtls_ecp_check_pubkey>
 801295c:	4602      	mov	r2, r0
 801295e:	b978      	cbnz	r0, 8012980 <mbedtls_ecp_mul+0x54>
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012960:	4620      	mov	r0, r4
 8012962:	f7fe fbdb 	bl	801111c <ecp_get_type>
 8012966:	2801      	cmp	r0, #1
 8012968:	d10a      	bne.n	8012980 <mbedtls_ecp_mul+0x54>
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 801296a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801296e:	462b      	mov	r3, r5
 8012970:	4632      	mov	r2, r6
 8012972:	4639      	mov	r1, r7
 8012974:	4620      	mov	r0, r4
}
 8012976:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 801297a:	f7ff bb9b 	b.w	80120b4 <ecp_mul_comb>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801297e:	4a02      	ldr	r2, [pc, #8]	; (8012988 <mbedtls_ecp_mul+0x5c>)
}
 8012980:	4610      	mov	r0, r2
 8012982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012986:	bf00      	nop
 8012988:	ffffb080 	.word	0xffffb080

0801298c <mbedtls_ecp_mul_shortcuts>:
{
 801298c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801298e:	4607      	mov	r7, r0
 8012990:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8012992:	4610      	mov	r0, r2
 8012994:	2101      	movs	r1, #1
{
 8012996:	4615      	mov	r5, r2
 8012998:	461e      	mov	r6, r3
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 801299a:	f7fc f8b3 	bl	800eb04 <mbedtls_mpi_cmp_int>
 801299e:	b930      	cbnz	r0, 80129ae <mbedtls_ecp_mul_shortcuts+0x22>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 80129a0:	4631      	mov	r1, r6
 80129a2:	4620      	mov	r0, r4
}
 80129a4:	b003      	add	sp, #12
 80129a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 80129aa:	f7ff b92b 	b.w	8011c04 <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 80129ae:	f04f 31ff 	mov.w	r1, #4294967295
 80129b2:	4628      	mov	r0, r5
 80129b4:	f7fc f8a6 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80129b8:	b990      	cbnz	r0, 80129e0 <mbedtls_ecp_mul_shortcuts+0x54>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 80129ba:	4631      	mov	r1, r6
 80129bc:	4620      	mov	r0, r4
 80129be:	f7ff f921 	bl	8011c04 <mbedtls_ecp_copy>
 80129c2:	b9b0      	cbnz	r0, 80129f2 <mbedtls_ecp_mul_shortcuts+0x66>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 80129c4:	340c      	adds	r4, #12
 80129c6:	4601      	mov	r1, r0
 80129c8:	4620      	mov	r0, r4
 80129ca:	f7fc f89b 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80129ce:	b180      	cbz	r0, 80129f2 <mbedtls_ecp_mul_shortcuts+0x66>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 80129d0:	4622      	mov	r2, r4
 80129d2:	1d39      	adds	r1, r7, #4
 80129d4:	4620      	mov	r0, r4
}
 80129d6:	b003      	add	sp, #12
 80129d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 80129dc:	f7fc b96b 	b.w	800ecb6 <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );
 80129e0:	2300      	movs	r3, #0
 80129e2:	e9cd 3300 	strd	r3, r3, [sp]
 80129e6:	462a      	mov	r2, r5
 80129e8:	4633      	mov	r3, r6
 80129ea:	4621      	mov	r1, r4
 80129ec:	4638      	mov	r0, r7
 80129ee:	f7ff ff9d 	bl	801292c <mbedtls_ecp_mul>
}
 80129f2:	b003      	add	sp, #12
 80129f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080129f8 <mbedtls_ecp_muladd>:
{
 80129f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129fa:	b08b      	sub	sp, #44	; 0x2c
 80129fc:	4605      	mov	r5, r0
 80129fe:	460e      	mov	r6, r1
 8012a00:	4614      	mov	r4, r2
 8012a02:	461f      	mov	r7, r3
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 8012a04:	f7fe fb8a 	bl	801111c <ecp_get_type>
 8012a08:	2801      	cmp	r0, #1
 8012a0a:	d125      	bne.n	8012a58 <mbedtls_ecp_muladd+0x60>
 8012a0c:	a801      	add	r0, sp, #4
 8012a0e:	f7ff f83f 	bl	8011a90 <mbedtls_ecp_point_init.part.2>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );
 8012a12:	4622      	mov	r2, r4
 8012a14:	463b      	mov	r3, r7
 8012a16:	a901      	add	r1, sp, #4
 8012a18:	4628      	mov	r0, r5
 8012a1a:	f7ff ffb7 	bl	801298c <mbedtls_ecp_mul_shortcuts>
 8012a1e:	4604      	mov	r4, r0
 8012a20:	b9a0      	cbnz	r0, 8012a4c <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );
 8012a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012a26:	4631      	mov	r1, r6
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f7ff ffaf 	bl	801298c <mbedtls_ecp_mul_shortcuts>
 8012a2e:	4604      	mov	r4, r0
 8012a30:	b960      	cbnz	r0, 8012a4c <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );
 8012a32:	4633      	mov	r3, r6
 8012a34:	aa01      	add	r2, sp, #4
 8012a36:	4631      	mov	r1, r6
 8012a38:	4628      	mov	r0, r5
 8012a3a:	f7ff f911 	bl	8011c60 <ecp_add_mixed>
 8012a3e:	4604      	mov	r4, r0
 8012a40:	b920      	cbnz	r0, 8012a4c <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012a42:	4631      	mov	r1, r6
 8012a44:	4628      	mov	r0, r5
 8012a46:	f7fe fe77 	bl	8011738 <ecp_normalize_jac>
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	a801      	add	r0, sp, #4
 8012a4e:	f7ff f82d 	bl	8011aac <mbedtls_ecp_point_free.part.4>
}
 8012a52:	4620      	mov	r0, r4
 8012a54:	b00b      	add	sp, #44	; 0x2c
 8012a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012a58:	4c00      	ldr	r4, [pc, #0]	; (8012a5c <mbedtls_ecp_muladd+0x64>)
 8012a5a:	e7fa      	b.n	8012a52 <mbedtls_ecp_muladd+0x5a>
 8012a5c:	ffffb180 	.word	0xffffb180

08012a60 <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8012a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a64:	b095      	sub	sp, #84	; 0x54
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012a66:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 8012a68:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	468b      	mov	fp, r1
 8012a70:	4615      	mov	r5, r2
 8012a72:	469a      	mov	sl, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
    }
    else
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012a74:	f7fe fb52 	bl	801111c <ecp_get_type>
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012a78:	3407      	adds	r4, #7
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012a7a:	2801      	cmp	r0, #1
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012a7c:	ea4f 09d4 	mov.w	r9, r4, lsr #3
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012a80:	d003      	beq.n	8012a8a <mbedtls_ecp_gen_keypair_base+0x2a>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
    }
    else
#endif /* ECP_SHORTWEIERSTRASS */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012a82:	481c      	ldr	r0, [pc, #112]	; (8012af4 <mbedtls_ecp_gen_keypair_base+0x94>)
cleanup:
    if( ret != 0 )
        return( ret );

    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
}
 8012a84:	b015      	add	sp, #84	; 0x54
 8012a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8a:	271f      	movs	r7, #31
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8012a8c:	f024 0407 	bic.w	r4, r4, #7
            MBEDTLS_MPI_CHK( f_rng( p_rng, rnd, n_size ) );
 8012a90:	464a      	mov	r2, r9
 8012a92:	a903      	add	r1, sp, #12
 8012a94:	4640      	mov	r0, r8
 8012a96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012a98:	4798      	blx	r3
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	d1f2      	bne.n	8012a84 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( d, rnd, n_size ) );
 8012a9e:	464a      	mov	r2, r9
 8012aa0:	a903      	add	r1, sp, #12
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f7fb fe80 	bl	800e7a8 <mbedtls_mpi_read_binary>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	d1eb      	bne.n	8012a84 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8012aac:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8012aae:	4628      	mov	r0, r5
 8012ab0:	1a61      	subs	r1, r4, r1
 8012ab2:	f7fb ff17 	bl	800e8e4 <mbedtls_mpi_shift_r>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d1e4      	bne.n	8012a84 <mbedtls_ecp_gen_keypair_base+0x24>
            if( ++count > 30 )
 8012aba:	3f01      	subs	r7, #1
 8012abc:	d102      	bne.n	8012ac4 <mbedtls_ecp_gen_keypair_base+0x64>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8012abe:	f5a0 409a 	sub.w	r0, r0, #19712	; 0x4d00
 8012ac2:	e7df      	b.n	8012a84 <mbedtls_ecp_gen_keypair_base+0x24>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	f7fc f81c 	bl	800eb04 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8012acc:	2800      	cmp	r0, #0
 8012ace:	dbdf      	blt.n	8012a90 <mbedtls_ecp_gen_keypair_base+0x30>
 8012ad0:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	f7fb ffd5 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012ada:	2800      	cmp	r0, #0
 8012adc:	dad8      	bge.n	8012a90 <mbedtls_ecp_gen_keypair_base+0x30>
    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 8012ade:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012ae0:	9300      	str	r3, [sp, #0]
 8012ae2:	f8cd 8004 	str.w	r8, [sp, #4]
 8012ae6:	465b      	mov	r3, fp
 8012ae8:	462a      	mov	r2, r5
 8012aea:	4651      	mov	r1, sl
 8012aec:	4630      	mov	r0, r6
 8012aee:	f7ff ff1d 	bl	801292c <mbedtls_ecp_mul>
 8012af2:	e7c7      	b.n	8012a84 <mbedtls_ecp_gen_keypair_base+0x24>
 8012af4:	ffffb080 	.word	0xffffb080

08012af8 <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 8012af8:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 8012afa:	9c04      	ldr	r4, [sp, #16]
 8012afc:	e9cd 3400 	strd	r3, r4, [sp]
 8012b00:	4613      	mov	r3, r2
 8012b02:	460a      	mov	r2, r1
 8012b04:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8012b08:	f7ff ffaa 	bl	8012a60 <mbedtls_ecp_gen_keypair_base>
}
 8012b0c:	b002      	add	sp, #8
 8012b0e:	bd10      	pop	{r4, pc}

08012b10 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 8012b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8012b14:	7803      	ldrb	r3, [r0, #0]
{
 8012b16:	b0aa      	sub	sp, #168	; 0xa8
 8012b18:	4605      	mov	r5, r0
 8012b1a:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8012b1c:	b923      	cbnz	r3, 8012b28 <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012b1e:	4c29      	ldr	r4, [pc, #164]	; (8012bc4 <mbedtls_ecp_check_pub_priv+0xb4>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 8012b20:	4620      	mov	r0, r4
 8012b22:	b02a      	add	sp, #168	; 0xa8
 8012b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8012b28:	780a      	ldrb	r2, [r1, #0]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d1f7      	bne.n	8012b1e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8012b2e:	f101 0888 	add.w	r8, r1, #136	; 0x88
 8012b32:	4641      	mov	r1, r8
 8012b34:	3088      	adds	r0, #136	; 0x88
 8012b36:	f7fb ffa5 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	d1ef      	bne.n	8012b1e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8012b3e:	f104 0794 	add.w	r7, r4, #148	; 0x94
 8012b42:	4639      	mov	r1, r7
 8012b44:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8012b48:	f7fb ff9c 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	d1e6      	bne.n	8012b1e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 8012b50:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8012b54:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012b58:	4631      	mov	r1, r6
 8012b5a:	f7fb ff93 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8012b5e:	4605      	mov	r5, r0
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d1dc      	bne.n	8012b1e <mbedtls_ecp_check_pub_priv+0xe>
 8012b64:	a802      	add	r0, sp, #8
 8012b66:	f7fe ff93 	bl	8011a90 <mbedtls_ecp_point_init.part.2>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 8012b6a:	227c      	movs	r2, #124	; 0x7c
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	a80b      	add	r0, sp, #44	; 0x2c
 8012b70:	f00f fbdd 	bl	802232e <memset>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 8012b74:	4621      	mov	r1, r4
 8012b76:	a80b      	add	r0, sp, #44	; 0x2c
 8012b78:	f7ff f85a 	bl	8011c30 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 8012b7c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8012b80:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8012b84:	e9cd 5500 	strd	r5, r5, [sp]
 8012b88:	a902      	add	r1, sp, #8
 8012b8a:	a80b      	add	r0, sp, #44	; 0x2c
 8012b8c:	f7ff fece 	bl	801292c <mbedtls_ecp_mul>
 8012b90:	4604      	mov	r4, r0
 8012b92:	b980      	cbnz	r0, 8012bb6 <mbedtls_ecp_check_pub_priv+0xa6>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 8012b94:	4641      	mov	r1, r8
 8012b96:	a802      	add	r0, sp, #8
 8012b98:	f7fb ff74 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8012b9c:	b950      	cbnz	r0, 8012bb4 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8012b9e:	4639      	mov	r1, r7
 8012ba0:	a805      	add	r0, sp, #20
 8012ba2:	f7fb ff6f 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 8012ba6:	b928      	cbnz	r0, 8012bb4 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 8012ba8:	4631      	mov	r1, r6
 8012baa:	a808      	add	r0, sp, #32
 8012bac:	f7fb ff6a 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	b100      	cbz	r0, 8012bb6 <mbedtls_ecp_check_pub_priv+0xa6>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8012bb4:	4c03      	ldr	r4, [pc, #12]	; (8012bc4 <mbedtls_ecp_check_pub_priv+0xb4>)
 8012bb6:	a802      	add	r0, sp, #8
 8012bb8:	f7fe ff78 	bl	8011aac <mbedtls_ecp_point_free.part.4>
    mbedtls_ecp_group_free( &grp );
 8012bbc:	a80b      	add	r0, sp, #44	; 0x2c
 8012bbe:	f7fe ffdb 	bl	8011b78 <mbedtls_ecp_group_free>
    return( ret );
 8012bc2:	e7ad      	b.n	8012b20 <mbedtls_ecp_check_pub_priv+0x10>
 8012bc4:	ffffb080 	.word	0xffffb080

08012bc8 <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 8012bc8:	6803      	ldr	r3, [r0, #0]
 8012bca:	b510      	push	{r4, lr}
 8012bcc:	1859      	adds	r1, r3, r1
    *dst += src;
 8012bce:	6001      	str	r1, [r0, #0]
    *carry += ( *dst < src );
 8012bd0:	7813      	ldrb	r3, [r2, #0]
 8012bd2:	f04f 0400 	mov.w	r4, #0
 8012bd6:	bf28      	it	cs
 8012bd8:	2401      	movcs	r4, #1
 8012bda:	441c      	add	r4, r3
 8012bdc:	7014      	strb	r4, [r2, #0]
}
 8012bde:	bd10      	pop	{r4, pc}

08012be0 <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
 8012be0:	6803      	ldr	r3, [r0, #0]
{
 8012be2:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
 8012be4:	7814      	ldrb	r4, [r2, #0]
 8012be6:	428b      	cmp	r3, r1
 8012be8:	bf38      	it	cc
 8012bea:	3c01      	subcc	r4, #1
 8012bec:	7014      	strb	r4, [r2, #0]
    *dst -= src;
 8012bee:	6803      	ldr	r3, [r0, #0]
 8012bf0:	1a5b      	subs	r3, r3, r1
 8012bf2:	6003      	str	r3, [r0, #0]
}
 8012bf4:	bd10      	pop	{r4, pc}

08012bf6 <fix_negative.isra.0>:

/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 8012bf6:	b538      	push	{r3, r4, r5, lr}
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 8012bf8:	6853      	ldr	r3, [r2, #4]
 8012bfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 8012bfe:	4614      	mov	r4, r2
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 8012c00:	3b01      	subs	r3, #1
 8012c02:	6892      	ldr	r2, [r2, #8]
 8012c04:	4249      	negs	r1, r1
 8012c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	4621      	mov	r1, r4
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 8012c0e:	4605      	mov	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 8012c10:	f7fb fff1 	bl	800ebf6 <mbedtls_mpi_sub_abs>
 8012c14:	b910      	cbnz	r0, 8012c1c <fix_negative.isra.0+0x26>
    N->s = -1;
 8012c16:	f04f 33ff 	mov.w	r3, #4294967295
 8012c1a:	602b      	str	r3, [r5, #0]

cleanup:

    return( ret );
}
 8012c1c:	bd38      	pop	{r3, r4, r5, pc}

08012c1e <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 8012c1e:	b570      	push	{r4, r5, r6, lr}
    INIT( 384 );
 8012c20:	230d      	movs	r3, #13
{
 8012c22:	b092      	sub	sp, #72	; 0x48
    INIT( 384 );
 8012c24:	2201      	movs	r2, #1
 8012c26:	2100      	movs	r1, #0
 8012c28:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
 8012c2c:	4604      	mov	r4, r0
    INIT( 384 );
 8012c2e:	2234      	movs	r2, #52	; 0x34
 8012c30:	a805      	add	r0, sp, #20
 8012c32:	f88d 1003 	strb.w	r1, [sp, #3]
 8012c36:	9004      	str	r0, [sp, #16]
 8012c38:	f00f fb79 	bl	802232e <memset>
 8012c3c:	2118      	movs	r1, #24
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f7fb fc78 	bl	800e534 <mbedtls_mpi_grow>
 8012c44:	4605      	mov	r5, r0
 8012c46:	2800      	cmp	r0, #0
 8012c48:	f040 82b4 	bne.w	80131b4 <ecp_mod_p384+0x596>
 8012c4c:	68a3      	ldr	r3, [r4, #8]
 8012c4e:	681a      	ldr	r2, [r3, #0]

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 8012c50:	6b19      	ldr	r1, [r3, #48]	; 0x30
    INIT( 384 );
 8012c52:	9201      	str	r2, [sp, #4]
    ADD( 12 ); ADD( 21 ); ADD( 20 );
 8012c54:	a801      	add	r0, sp, #4
 8012c56:	f10d 0203 	add.w	r2, sp, #3
 8012c5a:	f7ff ffb5 	bl	8012bc8 <add32>
 8012c5e:	68a3      	ldr	r3, [r4, #8]
 8012c60:	f10d 0203 	add.w	r2, sp, #3
 8012c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012c66:	a801      	add	r0, sp, #4
 8012c68:	f7ff ffae 	bl	8012bc8 <add32>
 8012c6c:	68a3      	ldr	r3, [r4, #8]
 8012c6e:	f10d 0203 	add.w	r2, sp, #3
 8012c72:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012c74:	a801      	add	r0, sp, #4
 8012c76:	f7ff ffa7 	bl	8012bc8 <add32>
    SUB( 23 );                                              NEXT; // A0
 8012c7a:	68a3      	ldr	r3, [r4, #8]
 8012c7c:	f10d 0203 	add.w	r2, sp, #3
 8012c80:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c82:	a801      	add	r0, sp, #4
 8012c84:	f7ff ffac 	bl	8012be0 <sub32>
 8012c88:	68a3      	ldr	r3, [r4, #8]
 8012c8a:	9a01      	ldr	r2, [sp, #4]
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	2900      	cmp	r1, #0
 8012c98:	f88d 5003 	strb.w	r5, [sp, #3]
 8012c9c:	f10d 0203 	add.w	r2, sp, #3
 8012ca0:	f280 828b 	bge.w	80131ba <ecp_mod_p384+0x59c>
 8012ca4:	4249      	negs	r1, r1
 8012ca6:	a801      	add	r0, sp, #4
 8012ca8:	f7ff ff9a 	bl	8012be0 <sub32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 8012cac:	68a3      	ldr	r3, [r4, #8]
 8012cae:	f10d 0203 	add.w	r2, sp, #3
 8012cb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012cb4:	a801      	add	r0, sp, #4
 8012cb6:	f7ff ff87 	bl	8012bc8 <add32>
 8012cba:	68a3      	ldr	r3, [r4, #8]
 8012cbc:	f10d 0203 	add.w	r2, sp, #3
 8012cc0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012cc2:	a801      	add	r0, sp, #4
 8012cc4:	f7ff ff80 	bl	8012bc8 <add32>
 8012cc8:	68a3      	ldr	r3, [r4, #8]
 8012cca:	f10d 0203 	add.w	r2, sp, #3
 8012cce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012cd0:	a801      	add	r0, sp, #4
 8012cd2:	f7ff ff79 	bl	8012bc8 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 8012cd6:	68a3      	ldr	r3, [r4, #8]
 8012cd8:	f10d 0203 	add.w	r2, sp, #3
 8012cdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012cde:	a801      	add	r0, sp, #4
 8012ce0:	f7ff ff7e 	bl	8012be0 <sub32>
 8012ce4:	68a3      	ldr	r3, [r4, #8]
 8012ce6:	f10d 0203 	add.w	r2, sp, #3
 8012cea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012cec:	a801      	add	r0, sp, #4
 8012cee:	f7ff ff77 	bl	8012be0 <sub32>
 8012cf2:	68a3      	ldr	r3, [r4, #8]
 8012cf4:	9a01      	ldr	r2, [sp, #4]
 8012cf6:	605a      	str	r2, [r3, #4]
 8012cf8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012cfc:	689b      	ldr	r3, [r3, #8]
 8012cfe:	9301      	str	r3, [sp, #4]
 8012d00:	2300      	movs	r3, #0
 8012d02:	4299      	cmp	r1, r3
 8012d04:	f88d 3003 	strb.w	r3, [sp, #3]
 8012d08:	f10d 0203 	add.w	r2, sp, #3
 8012d0c:	f280 8259 	bge.w	80131c2 <ecp_mod_p384+0x5a4>
 8012d10:	4249      	negs	r1, r1
 8012d12:	a801      	add	r0, sp, #4
 8012d14:	f7ff ff64 	bl	8012be0 <sub32>

    ADD( 14 ); ADD( 23 );
 8012d18:	68a3      	ldr	r3, [r4, #8]
 8012d1a:	f10d 0203 	add.w	r2, sp, #3
 8012d1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012d20:	a801      	add	r0, sp, #4
 8012d22:	f7ff ff51 	bl	8012bc8 <add32>
 8012d26:	68a3      	ldr	r3, [r4, #8]
 8012d28:	f10d 0203 	add.w	r2, sp, #3
 8012d2c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012d2e:	a801      	add	r0, sp, #4
 8012d30:	f7ff ff4a 	bl	8012bc8 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 8012d34:	68a3      	ldr	r3, [r4, #8]
 8012d36:	f10d 0203 	add.w	r2, sp, #3
 8012d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012d3c:	a801      	add	r0, sp, #4
 8012d3e:	f7ff ff4f 	bl	8012be0 <sub32>
 8012d42:	68a3      	ldr	r3, [r4, #8]
 8012d44:	f10d 0203 	add.w	r2, sp, #3
 8012d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012d4a:	a801      	add	r0, sp, #4
 8012d4c:	f7ff ff48 	bl	8012be0 <sub32>
 8012d50:	68a3      	ldr	r3, [r4, #8]
 8012d52:	9a01      	ldr	r2, [sp, #4]
 8012d54:	609a      	str	r2, [r3, #8]
 8012d56:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	9301      	str	r3, [sp, #4]
 8012d5e:	2300      	movs	r3, #0
 8012d60:	4299      	cmp	r1, r3
 8012d62:	f88d 3003 	strb.w	r3, [sp, #3]
 8012d66:	f10d 0203 	add.w	r2, sp, #3
 8012d6a:	f280 822e 	bge.w	80131ca <ecp_mod_p384+0x5ac>
 8012d6e:	4249      	negs	r1, r1
 8012d70:	a801      	add	r0, sp, #4
 8012d72:	f7ff ff35 	bl	8012be0 <sub32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 8012d76:	68a3      	ldr	r3, [r4, #8]
 8012d78:	f10d 0203 	add.w	r2, sp, #3
 8012d7c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012d7e:	a801      	add	r0, sp, #4
 8012d80:	f7ff ff22 	bl	8012bc8 <add32>
 8012d84:	68a3      	ldr	r3, [r4, #8]
 8012d86:	f10d 0203 	add.w	r2, sp, #3
 8012d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012d8c:	a801      	add	r0, sp, #4
 8012d8e:	f7ff ff1b 	bl	8012bc8 <add32>
 8012d92:	68a3      	ldr	r3, [r4, #8]
 8012d94:	f10d 0203 	add.w	r2, sp, #3
 8012d98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012d9a:	a801      	add	r0, sp, #4
 8012d9c:	f7ff ff14 	bl	8012bc8 <add32>
 8012da0:	68a3      	ldr	r3, [r4, #8]
 8012da2:	f10d 0203 	add.w	r2, sp, #3
 8012da6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012da8:	a801      	add	r0, sp, #4
 8012daa:	f7ff ff0d 	bl	8012bc8 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 8012dae:	68a3      	ldr	r3, [r4, #8]
 8012db0:	f10d 0203 	add.w	r2, sp, #3
 8012db4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012db6:	a801      	add	r0, sp, #4
 8012db8:	f7ff ff12 	bl	8012be0 <sub32>
 8012dbc:	68a3      	ldr	r3, [r4, #8]
 8012dbe:	f10d 0203 	add.w	r2, sp, #3
 8012dc2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012dc4:	a801      	add	r0, sp, #4
 8012dc6:	f7ff ff0b 	bl	8012be0 <sub32>
 8012dca:	68a3      	ldr	r3, [r4, #8]
 8012dcc:	f10d 0203 	add.w	r2, sp, #3
 8012dd0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012dd2:	a801      	add	r0, sp, #4
 8012dd4:	f7ff ff04 	bl	8012be0 <sub32>
 8012dd8:	68a3      	ldr	r3, [r4, #8]
 8012dda:	9a01      	ldr	r2, [sp, #4]
 8012ddc:	60da      	str	r2, [r3, #12]
 8012dde:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012de2:	691b      	ldr	r3, [r3, #16]
 8012de4:	9301      	str	r3, [sp, #4]
 8012de6:	2300      	movs	r3, #0
 8012de8:	4299      	cmp	r1, r3
 8012dea:	f88d 3003 	strb.w	r3, [sp, #3]
 8012dee:	f10d 0203 	add.w	r2, sp, #3
 8012df2:	f280 81ee 	bge.w	80131d2 <ecp_mod_p384+0x5b4>
 8012df6:	4249      	negs	r1, r1
 8012df8:	a801      	add	r0, sp, #4
 8012dfa:	f7ff fef1 	bl	8012be0 <sub32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 8012dfe:	68a3      	ldr	r3, [r4, #8]
 8012e00:	f10d 0203 	add.w	r2, sp, #3
 8012e04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e06:	a801      	add	r0, sp, #4
 8012e08:	f7ff fede 	bl	8012bc8 <add32>
 8012e0c:	68a3      	ldr	r3, [r4, #8]
 8012e0e:	f10d 0203 	add.w	r2, sp, #3
 8012e12:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e14:	a801      	add	r0, sp, #4
 8012e16:	f7ff fed7 	bl	8012bc8 <add32>
 8012e1a:	68a3      	ldr	r3, [r4, #8]
 8012e1c:	f10d 0203 	add.w	r2, sp, #3
 8012e20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012e22:	a801      	add	r0, sp, #4
 8012e24:	f7ff fed0 	bl	8012bc8 <add32>
 8012e28:	68a3      	ldr	r3, [r4, #8]
 8012e2a:	f10d 0203 	add.w	r2, sp, #3
 8012e2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012e30:	a801      	add	r0, sp, #4
 8012e32:	f7ff fec9 	bl	8012bc8 <add32>
 8012e36:	68a3      	ldr	r3, [r4, #8]
 8012e38:	f10d 0203 	add.w	r2, sp, #3
 8012e3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012e3e:	a801      	add	r0, sp, #4
 8012e40:	f7ff fec2 	bl	8012bc8 <add32>
 8012e44:	68a3      	ldr	r3, [r4, #8]
 8012e46:	f10d 0203 	add.w	r2, sp, #3
 8012e4a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012e4c:	a801      	add	r0, sp, #4
 8012e4e:	f7ff febb 	bl	8012bc8 <add32>
 8012e52:	68a3      	ldr	r3, [r4, #8]
 8012e54:	f10d 0203 	add.w	r2, sp, #3
 8012e58:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012e5a:	a801      	add	r0, sp, #4
 8012e5c:	f7ff feb4 	bl	8012bc8 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 8012e60:	68a3      	ldr	r3, [r4, #8]
 8012e62:	f10d 0203 	add.w	r2, sp, #3
 8012e66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012e68:	a801      	add	r0, sp, #4
 8012e6a:	f7ff feb9 	bl	8012be0 <sub32>
 8012e6e:	68a3      	ldr	r3, [r4, #8]
 8012e70:	f10d 0203 	add.w	r2, sp, #3
 8012e74:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012e76:	a801      	add	r0, sp, #4
 8012e78:	f7ff feb2 	bl	8012be0 <sub32>
 8012e7c:	68a3      	ldr	r3, [r4, #8]
 8012e7e:	f10d 0203 	add.w	r2, sp, #3
 8012e82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012e84:	a801      	add	r0, sp, #4
 8012e86:	f7ff feab 	bl	8012be0 <sub32>
 8012e8a:	68a3      	ldr	r3, [r4, #8]
 8012e8c:	9a01      	ldr	r2, [sp, #4]
 8012e8e:	611a      	str	r2, [r3, #16]
 8012e90:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012e94:	695b      	ldr	r3, [r3, #20]
 8012e96:	9301      	str	r3, [sp, #4]
 8012e98:	2300      	movs	r3, #0
 8012e9a:	4299      	cmp	r1, r3
 8012e9c:	f88d 3003 	strb.w	r3, [sp, #3]
 8012ea0:	f10d 0203 	add.w	r2, sp, #3
 8012ea4:	f280 8199 	bge.w	80131da <ecp_mod_p384+0x5bc>
 8012ea8:	4249      	negs	r1, r1
 8012eaa:	a801      	add	r0, sp, #4
 8012eac:	f7ff fe98 	bl	8012be0 <sub32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 8012eb0:	68a3      	ldr	r3, [r4, #8]
 8012eb2:	f10d 0203 	add.w	r2, sp, #3
 8012eb6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012eb8:	a801      	add	r0, sp, #4
 8012eba:	f7ff fe85 	bl	8012bc8 <add32>
 8012ebe:	68a3      	ldr	r3, [r4, #8]
 8012ec0:	f10d 0203 	add.w	r2, sp, #3
 8012ec4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012ec6:	a801      	add	r0, sp, #4
 8012ec8:	f7ff fe7e 	bl	8012bc8 <add32>
 8012ecc:	68a3      	ldr	r3, [r4, #8]
 8012ece:	f10d 0203 	add.w	r2, sp, #3
 8012ed2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8012ed4:	a801      	add	r0, sp, #4
 8012ed6:	f7ff fe77 	bl	8012bc8 <add32>
 8012eda:	68a3      	ldr	r3, [r4, #8]
 8012edc:	f10d 0203 	add.w	r2, sp, #3
 8012ee0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012ee2:	a801      	add	r0, sp, #4
 8012ee4:	f7ff fe70 	bl	8012bc8 <add32>
 8012ee8:	68a3      	ldr	r3, [r4, #8]
 8012eea:	f10d 0203 	add.w	r2, sp, #3
 8012eee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012ef0:	a801      	add	r0, sp, #4
 8012ef2:	f7ff fe69 	bl	8012bc8 <add32>
 8012ef6:	68a3      	ldr	r3, [r4, #8]
 8012ef8:	f10d 0203 	add.w	r2, sp, #3
 8012efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012efe:	a801      	add	r0, sp, #4
 8012f00:	f7ff fe62 	bl	8012bc8 <add32>
 8012f04:	68a3      	ldr	r3, [r4, #8]
 8012f06:	f10d 0203 	add.w	r2, sp, #3
 8012f0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012f0c:	a801      	add	r0, sp, #4
 8012f0e:	f7ff fe5b 	bl	8012bc8 <add32>
    SUB( 16 );                                              NEXT; // A5
 8012f12:	68a3      	ldr	r3, [r4, #8]
 8012f14:	f10d 0203 	add.w	r2, sp, #3
 8012f18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012f1a:	a801      	add	r0, sp, #4
 8012f1c:	f7ff fe60 	bl	8012be0 <sub32>
 8012f20:	68a3      	ldr	r3, [r4, #8]
 8012f22:	9a01      	ldr	r2, [sp, #4]
 8012f24:	615a      	str	r2, [r3, #20]
 8012f26:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012f2a:	699b      	ldr	r3, [r3, #24]
 8012f2c:	9301      	str	r3, [sp, #4]
 8012f2e:	2300      	movs	r3, #0
 8012f30:	4299      	cmp	r1, r3
 8012f32:	f88d 3003 	strb.w	r3, [sp, #3]
 8012f36:	f10d 0203 	add.w	r2, sp, #3
 8012f3a:	f280 8152 	bge.w	80131e2 <ecp_mod_p384+0x5c4>
 8012f3e:	4249      	negs	r1, r1
 8012f40:	a801      	add	r0, sp, #4
 8012f42:	f7ff fe4d 	bl	8012be0 <sub32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 8012f46:	68a3      	ldr	r3, [r4, #8]
 8012f48:	f10d 0203 	add.w	r2, sp, #3
 8012f4c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012f4e:	a801      	add	r0, sp, #4
 8012f50:	f7ff fe3a 	bl	8012bc8 <add32>
 8012f54:	68a3      	ldr	r3, [r4, #8]
 8012f56:	f10d 0203 	add.w	r2, sp, #3
 8012f5a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012f5c:	a801      	add	r0, sp, #4
 8012f5e:	f7ff fe33 	bl	8012bc8 <add32>
 8012f62:	68a3      	ldr	r3, [r4, #8]
 8012f64:	f10d 0203 	add.w	r2, sp, #3
 8012f68:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8012f6a:	a801      	add	r0, sp, #4
 8012f6c:	f7ff fe2c 	bl	8012bc8 <add32>
 8012f70:	68a3      	ldr	r3, [r4, #8]
 8012f72:	f10d 0203 	add.w	r2, sp, #3
 8012f76:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012f78:	a801      	add	r0, sp, #4
 8012f7a:	f7ff fe25 	bl	8012bc8 <add32>
 8012f7e:	68a3      	ldr	r3, [r4, #8]
 8012f80:	f10d 0203 	add.w	r2, sp, #3
 8012f84:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012f86:	a801      	add	r0, sp, #4
 8012f88:	f7ff fe1e 	bl	8012bc8 <add32>
 8012f8c:	68a3      	ldr	r3, [r4, #8]
 8012f8e:	f10d 0203 	add.w	r2, sp, #3
 8012f92:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012f94:	a801      	add	r0, sp, #4
 8012f96:	f7ff fe17 	bl	8012bc8 <add32>
    SUB( 17 );                                              NEXT; // A6
 8012f9a:	68a3      	ldr	r3, [r4, #8]
 8012f9c:	f10d 0203 	add.w	r2, sp, #3
 8012fa0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8012fa2:	a801      	add	r0, sp, #4
 8012fa4:	f7ff fe1c 	bl	8012be0 <sub32>
 8012fa8:	68a3      	ldr	r3, [r4, #8]
 8012faa:	9a01      	ldr	r2, [sp, #4]
 8012fac:	619a      	str	r2, [r3, #24]
 8012fae:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012fb2:	69db      	ldr	r3, [r3, #28]
 8012fb4:	9301      	str	r3, [sp, #4]
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	4299      	cmp	r1, r3
 8012fba:	f88d 3003 	strb.w	r3, [sp, #3]
 8012fbe:	f10d 0203 	add.w	r2, sp, #3
 8012fc2:	f280 8112 	bge.w	80131ea <ecp_mod_p384+0x5cc>
 8012fc6:	4249      	negs	r1, r1
 8012fc8:	a801      	add	r0, sp, #4
 8012fca:	f7ff fe09 	bl	8012be0 <sub32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 8012fce:	68a3      	ldr	r3, [r4, #8]
 8012fd0:	f10d 0203 	add.w	r2, sp, #3
 8012fd4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012fd6:	a801      	add	r0, sp, #4
 8012fd8:	f7ff fdf6 	bl	8012bc8 <add32>
 8012fdc:	68a3      	ldr	r3, [r4, #8]
 8012fde:	f10d 0203 	add.w	r2, sp, #3
 8012fe2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012fe4:	a801      	add	r0, sp, #4
 8012fe6:	f7ff fdef 	bl	8012bc8 <add32>
 8012fea:	68a3      	ldr	r3, [r4, #8]
 8012fec:	f10d 0203 	add.w	r2, sp, #3
 8012ff0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012ff2:	a801      	add	r0, sp, #4
 8012ff4:	f7ff fde8 	bl	8012bc8 <add32>
 8012ff8:	68a3      	ldr	r3, [r4, #8]
 8012ffa:	f10d 0203 	add.w	r2, sp, #3
 8012ffe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013000:	a801      	add	r0, sp, #4
 8013002:	f7ff fde1 	bl	8012bc8 <add32>
    SUB( 18 );                                              NEXT; // A7
 8013006:	68a3      	ldr	r3, [r4, #8]
 8013008:	f10d 0203 	add.w	r2, sp, #3
 801300c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801300e:	a801      	add	r0, sp, #4
 8013010:	f7ff fde6 	bl	8012be0 <sub32>
 8013014:	68a3      	ldr	r3, [r4, #8]
 8013016:	9a01      	ldr	r2, [sp, #4]
 8013018:	61da      	str	r2, [r3, #28]
 801301a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801301e:	6a1b      	ldr	r3, [r3, #32]
 8013020:	9301      	str	r3, [sp, #4]
 8013022:	2300      	movs	r3, #0
 8013024:	4299      	cmp	r1, r3
 8013026:	f88d 3003 	strb.w	r3, [sp, #3]
 801302a:	f10d 0203 	add.w	r2, sp, #3
 801302e:	f280 80e0 	bge.w	80131f2 <ecp_mod_p384+0x5d4>
 8013032:	4249      	negs	r1, r1
 8013034:	a801      	add	r0, sp, #4
 8013036:	f7ff fdd3 	bl	8012be0 <sub32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 801303a:	68a3      	ldr	r3, [r4, #8]
 801303c:	f10d 0203 	add.w	r2, sp, #3
 8013040:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013042:	a801      	add	r0, sp, #4
 8013044:	f7ff fdc0 	bl	8012bc8 <add32>
 8013048:	68a3      	ldr	r3, [r4, #8]
 801304a:	f10d 0203 	add.w	r2, sp, #3
 801304e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8013050:	a801      	add	r0, sp, #4
 8013052:	f7ff fdb9 	bl	8012bc8 <add32>
 8013056:	68a3      	ldr	r3, [r4, #8]
 8013058:	f10d 0203 	add.w	r2, sp, #3
 801305c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801305e:	a801      	add	r0, sp, #4
 8013060:	f7ff fdb2 	bl	8012bc8 <add32>
    SUB( 19 );                                              NEXT; // A8
 8013064:	68a3      	ldr	r3, [r4, #8]
 8013066:	f10d 0203 	add.w	r2, sp, #3
 801306a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801306c:	a801      	add	r0, sp, #4
 801306e:	f7ff fdb7 	bl	8012be0 <sub32>
 8013072:	68a3      	ldr	r3, [r4, #8]
 8013074:	9a01      	ldr	r2, [sp, #4]
 8013076:	621a      	str	r2, [r3, #32]
 8013078:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801307e:	9301      	str	r3, [sp, #4]
 8013080:	2300      	movs	r3, #0
 8013082:	4299      	cmp	r1, r3
 8013084:	f88d 3003 	strb.w	r3, [sp, #3]
 8013088:	f10d 0203 	add.w	r2, sp, #3
 801308c:	f280 80b5 	bge.w	80131fa <ecp_mod_p384+0x5dc>
 8013090:	4249      	negs	r1, r1
 8013092:	a801      	add	r0, sp, #4
 8013094:	f7ff fda4 	bl	8012be0 <sub32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 8013098:	68a3      	ldr	r3, [r4, #8]
 801309a:	f10d 0203 	add.w	r2, sp, #3
 801309e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80130a0:	a801      	add	r0, sp, #4
 80130a2:	f7ff fd91 	bl	8012bc8 <add32>
 80130a6:	68a3      	ldr	r3, [r4, #8]
 80130a8:	f10d 0203 	add.w	r2, sp, #3
 80130ac:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80130ae:	a801      	add	r0, sp, #4
 80130b0:	f7ff fd8a 	bl	8012bc8 <add32>
 80130b4:	68a3      	ldr	r3, [r4, #8]
 80130b6:	f10d 0203 	add.w	r2, sp, #3
 80130ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80130bc:	a801      	add	r0, sp, #4
 80130be:	f7ff fd83 	bl	8012bc8 <add32>
    SUB( 20 );                                              NEXT; // A9
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	f10d 0203 	add.w	r2, sp, #3
 80130c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80130ca:	a801      	add	r0, sp, #4
 80130cc:	f7ff fd88 	bl	8012be0 <sub32>
 80130d0:	68a3      	ldr	r3, [r4, #8]
 80130d2:	9a01      	ldr	r2, [sp, #4]
 80130d4:	625a      	str	r2, [r3, #36]	; 0x24
 80130d6:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80130da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130dc:	9301      	str	r3, [sp, #4]
 80130de:	2300      	movs	r3, #0
 80130e0:	4299      	cmp	r1, r3
 80130e2:	f88d 3003 	strb.w	r3, [sp, #3]
 80130e6:	f10d 0203 	add.w	r2, sp, #3
 80130ea:	f280 808a 	bge.w	8013202 <ecp_mod_p384+0x5e4>
 80130ee:	4249      	negs	r1, r1
 80130f0:	a801      	add	r0, sp, #4
 80130f2:	f7ff fd75 	bl	8012be0 <sub32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 80130f6:	68a3      	ldr	r3, [r4, #8]
 80130f8:	f10d 0203 	add.w	r2, sp, #3
 80130fc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80130fe:	a801      	add	r0, sp, #4
 8013100:	f7ff fd62 	bl	8012bc8 <add32>
 8013104:	68a3      	ldr	r3, [r4, #8]
 8013106:	f10d 0203 	add.w	r2, sp, #3
 801310a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801310c:	a801      	add	r0, sp, #4
 801310e:	f7ff fd5b 	bl	8012bc8 <add32>
 8013112:	68a3      	ldr	r3, [r4, #8]
 8013114:	f10d 0203 	add.w	r2, sp, #3
 8013118:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801311a:	a801      	add	r0, sp, #4
 801311c:	f7ff fd54 	bl	8012bc8 <add32>
    SUB( 21 );                                              NEXT; // A10
 8013120:	68a3      	ldr	r3, [r4, #8]
 8013122:	f10d 0203 	add.w	r2, sp, #3
 8013126:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013128:	a801      	add	r0, sp, #4
 801312a:	f7ff fd59 	bl	8012be0 <sub32>
 801312e:	68a3      	ldr	r3, [r4, #8]
 8013130:	9a01      	ldr	r2, [sp, #4]
 8013132:	629a      	str	r2, [r3, #40]	; 0x28
 8013134:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801313a:	9301      	str	r3, [sp, #4]
 801313c:	2300      	movs	r3, #0
 801313e:	4299      	cmp	r1, r3
 8013140:	f88d 3003 	strb.w	r3, [sp, #3]
 8013144:	f10d 0203 	add.w	r2, sp, #3
 8013148:	da5f      	bge.n	801320a <ecp_mod_p384+0x5ec>
 801314a:	4249      	negs	r1, r1
 801314c:	a801      	add	r0, sp, #4
 801314e:	f7ff fd47 	bl	8012be0 <sub32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 8013152:	68a3      	ldr	r3, [r4, #8]
 8013154:	f10d 0203 	add.w	r2, sp, #3
 8013158:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801315a:	a801      	add	r0, sp, #4
 801315c:	f7ff fd34 	bl	8012bc8 <add32>
 8013160:	68a3      	ldr	r3, [r4, #8]
 8013162:	f10d 0203 	add.w	r2, sp, #3
 8013166:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013168:	a801      	add	r0, sp, #4
 801316a:	f7ff fd2d 	bl	8012bc8 <add32>
 801316e:	68a3      	ldr	r3, [r4, #8]
 8013170:	f10d 0203 	add.w	r2, sp, #3
 8013174:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013176:	a801      	add	r0, sp, #4
 8013178:	f7ff fd26 	bl	8012bc8 <add32>
    SUB( 22 );                                              LAST; // A11
 801317c:	68a3      	ldr	r3, [r4, #8]
 801317e:	f10d 0203 	add.w	r2, sp, #3
 8013182:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013184:	a801      	add	r0, sp, #4
 8013186:	f7ff fd2b 	bl	8012be0 <sub32>
 801318a:	68a2      	ldr	r2, [r4, #8]
 801318c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013190:	9b01      	ldr	r3, [sp, #4]
 8013192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013194:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8013198:	6313      	str	r3, [r2, #48]	; 0x30
 801319a:	6860      	ldr	r0, [r4, #4]
 801319c:	2300      	movs	r3, #0
 801319e:	9301      	str	r3, [sp, #4]
 80131a0:	230c      	movs	r3, #12
 80131a2:	3301      	adds	r3, #1
 80131a4:	4298      	cmp	r0, r3
 80131a6:	d834      	bhi.n	8013212 <ecp_mod_p384+0x5f4>
 80131a8:	2900      	cmp	r1, #0
 80131aa:	da03      	bge.n	80131b4 <ecp_mod_p384+0x596>
 80131ac:	aa02      	add	r2, sp, #8
 80131ae:	4620      	mov	r0, r4
 80131b0:	f7ff fd21 	bl	8012bf6 <fix_negative.isra.0>

cleanup:
    return( ret );
}
 80131b4:	4628      	mov	r0, r5
 80131b6:	b012      	add	sp, #72	; 0x48
 80131b8:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 23 );                                              NEXT; // A0
 80131ba:	a801      	add	r0, sp, #4
 80131bc:	f7ff fd04 	bl	8012bc8 <add32>
 80131c0:	e574      	b.n	8012cac <ecp_mod_p384+0x8e>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 80131c2:	a801      	add	r0, sp, #4
 80131c4:	f7ff fd00 	bl	8012bc8 <add32>
 80131c8:	e5a6      	b.n	8012d18 <ecp_mod_p384+0xfa>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 80131ca:	a801      	add	r0, sp, #4
 80131cc:	f7ff fcfc 	bl	8012bc8 <add32>
 80131d0:	e5d1      	b.n	8012d76 <ecp_mod_p384+0x158>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 80131d2:	a801      	add	r0, sp, #4
 80131d4:	f7ff fcf8 	bl	8012bc8 <add32>
 80131d8:	e611      	b.n	8012dfe <ecp_mod_p384+0x1e0>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 80131da:	a801      	add	r0, sp, #4
 80131dc:	f7ff fcf4 	bl	8012bc8 <add32>
 80131e0:	e666      	b.n	8012eb0 <ecp_mod_p384+0x292>
    SUB( 16 );                                              NEXT; // A5
 80131e2:	a801      	add	r0, sp, #4
 80131e4:	f7ff fcf0 	bl	8012bc8 <add32>
 80131e8:	e6ad      	b.n	8012f46 <ecp_mod_p384+0x328>
    SUB( 17 );                                              NEXT; // A6
 80131ea:	a801      	add	r0, sp, #4
 80131ec:	f7ff fcec 	bl	8012bc8 <add32>
 80131f0:	e6ed      	b.n	8012fce <ecp_mod_p384+0x3b0>
    SUB( 18 );                                              NEXT; // A7
 80131f2:	a801      	add	r0, sp, #4
 80131f4:	f7ff fce8 	bl	8012bc8 <add32>
 80131f8:	e71f      	b.n	801303a <ecp_mod_p384+0x41c>
    SUB( 19 );                                              NEXT; // A8
 80131fa:	a801      	add	r0, sp, #4
 80131fc:	f7ff fce4 	bl	8012bc8 <add32>
 8013200:	e74a      	b.n	8013098 <ecp_mod_p384+0x47a>
    SUB( 20 );                                              NEXT; // A9
 8013202:	a801      	add	r0, sp, #4
 8013204:	f7ff fce0 	bl	8012bc8 <add32>
 8013208:	e775      	b.n	80130f6 <ecp_mod_p384+0x4d8>
    SUB( 21 );                                              NEXT; // A10
 801320a:	a801      	add	r0, sp, #4
 801320c:	f7ff fcdc 	bl	8012bc8 <add32>
 8013210:	e79f      	b.n	8013152 <ecp_mod_p384+0x534>
    SUB( 22 );                                              LAST; // A11
 8013212:	9e01      	ldr	r6, [sp, #4]
 8013214:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8013218:	e7c3      	b.n	80131a2 <ecp_mod_p384+0x584>

0801321a <ecp_mod_p256>:
{
 801321a:	b570      	push	{r4, r5, r6, lr}
    INIT( 256 );
 801321c:	2309      	movs	r3, #9
{
 801321e:	b08e      	sub	sp, #56	; 0x38
    INIT( 256 );
 8013220:	2201      	movs	r2, #1
 8013222:	2100      	movs	r1, #0
 8013224:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
 8013228:	4604      	mov	r4, r0
    INIT( 256 );
 801322a:	2224      	movs	r2, #36	; 0x24
 801322c:	a805      	add	r0, sp, #20
 801322e:	f88d 1003 	strb.w	r1, [sp, #3]
 8013232:	9004      	str	r0, [sp, #16]
 8013234:	f00f f87b 	bl	802232e <memset>
 8013238:	2110      	movs	r1, #16
 801323a:	4620      	mov	r0, r4
 801323c:	f7fb f97a 	bl	800e534 <mbedtls_mpi_grow>
 8013240:	4605      	mov	r5, r0
 8013242:	2800      	cmp	r0, #0
 8013244:	f040 821b 	bne.w	801367e <ecp_mod_p256+0x464>
 8013248:	68a3      	ldr	r3, [r4, #8]
 801324a:	681a      	ldr	r2, [r3, #0]
    ADD(  8 ); ADD(  9 );
 801324c:	6a19      	ldr	r1, [r3, #32]
    INIT( 256 );
 801324e:	9201      	str	r2, [sp, #4]
    ADD(  8 ); ADD(  9 );
 8013250:	a801      	add	r0, sp, #4
 8013252:	f10d 0203 	add.w	r2, sp, #3
 8013256:	f7ff fcb7 	bl	8012bc8 <add32>
 801325a:	68a3      	ldr	r3, [r4, #8]
 801325c:	f10d 0203 	add.w	r2, sp, #3
 8013260:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013262:	a801      	add	r0, sp, #4
 8013264:	f7ff fcb0 	bl	8012bc8 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8013268:	68a3      	ldr	r3, [r4, #8]
 801326a:	f10d 0203 	add.w	r2, sp, #3
 801326e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013270:	a801      	add	r0, sp, #4
 8013272:	f7ff fcb5 	bl	8012be0 <sub32>
 8013276:	68a3      	ldr	r3, [r4, #8]
 8013278:	f10d 0203 	add.w	r2, sp, #3
 801327c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801327e:	a801      	add	r0, sp, #4
 8013280:	f7ff fcae 	bl	8012be0 <sub32>
 8013284:	68a3      	ldr	r3, [r4, #8]
 8013286:	f10d 0203 	add.w	r2, sp, #3
 801328a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801328c:	a801      	add	r0, sp, #4
 801328e:	f7ff fca7 	bl	8012be0 <sub32>
 8013292:	68a3      	ldr	r3, [r4, #8]
 8013294:	f10d 0203 	add.w	r2, sp, #3
 8013298:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801329a:	a801      	add	r0, sp, #4
 801329c:	f7ff fca0 	bl	8012be0 <sub32>
 80132a0:	68a3      	ldr	r3, [r4, #8]
 80132a2:	9a01      	ldr	r2, [sp, #4]
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	9301      	str	r3, [sp, #4]
 80132ae:	2900      	cmp	r1, #0
 80132b0:	f88d 5003 	strb.w	r5, [sp, #3]
 80132b4:	f10d 0203 	add.w	r2, sp, #3
 80132b8:	f280 81e4 	bge.w	8013684 <ecp_mod_p256+0x46a>
 80132bc:	4249      	negs	r1, r1
 80132be:	a801      	add	r0, sp, #4
 80132c0:	f7ff fc8e 	bl	8012be0 <sub32>
    ADD(  9 ); ADD( 10 );
 80132c4:	68a3      	ldr	r3, [r4, #8]
 80132c6:	f10d 0203 	add.w	r2, sp, #3
 80132ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80132cc:	a801      	add	r0, sp, #4
 80132ce:	f7ff fc7b 	bl	8012bc8 <add32>
 80132d2:	68a3      	ldr	r3, [r4, #8]
 80132d4:	f10d 0203 	add.w	r2, sp, #3
 80132d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80132da:	a801      	add	r0, sp, #4
 80132dc:	f7ff fc74 	bl	8012bc8 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 80132e0:	68a3      	ldr	r3, [r4, #8]
 80132e2:	f10d 0203 	add.w	r2, sp, #3
 80132e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80132e8:	a801      	add	r0, sp, #4
 80132ea:	f7ff fc79 	bl	8012be0 <sub32>
 80132ee:	68a3      	ldr	r3, [r4, #8]
 80132f0:	f10d 0203 	add.w	r2, sp, #3
 80132f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80132f6:	a801      	add	r0, sp, #4
 80132f8:	f7ff fc72 	bl	8012be0 <sub32>
 80132fc:	68a3      	ldr	r3, [r4, #8]
 80132fe:	f10d 0203 	add.w	r2, sp, #3
 8013302:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013304:	a801      	add	r0, sp, #4
 8013306:	f7ff fc6b 	bl	8012be0 <sub32>
 801330a:	68a3      	ldr	r3, [r4, #8]
 801330c:	f10d 0203 	add.w	r2, sp, #3
 8013310:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013312:	a801      	add	r0, sp, #4
 8013314:	f7ff fc64 	bl	8012be0 <sub32>
 8013318:	68a3      	ldr	r3, [r4, #8]
 801331a:	9a01      	ldr	r2, [sp, #4]
 801331c:	605a      	str	r2, [r3, #4]
 801331e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	9301      	str	r3, [sp, #4]
 8013326:	2300      	movs	r3, #0
 8013328:	4299      	cmp	r1, r3
 801332a:	f88d 3003 	strb.w	r3, [sp, #3]
 801332e:	f10d 0203 	add.w	r2, sp, #3
 8013332:	f280 81ab 	bge.w	801368c <ecp_mod_p256+0x472>
 8013336:	4249      	negs	r1, r1
 8013338:	a801      	add	r0, sp, #4
 801333a:	f7ff fc51 	bl	8012be0 <sub32>
    ADD( 10 ); ADD( 11 );
 801333e:	68a3      	ldr	r3, [r4, #8]
 8013340:	f10d 0203 	add.w	r2, sp, #3
 8013344:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013346:	a801      	add	r0, sp, #4
 8013348:	f7ff fc3e 	bl	8012bc8 <add32>
 801334c:	68a3      	ldr	r3, [r4, #8]
 801334e:	f10d 0203 	add.w	r2, sp, #3
 8013352:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013354:	a801      	add	r0, sp, #4
 8013356:	f7ff fc37 	bl	8012bc8 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 801335a:	68a3      	ldr	r3, [r4, #8]
 801335c:	f10d 0203 	add.w	r2, sp, #3
 8013360:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013362:	a801      	add	r0, sp, #4
 8013364:	f7ff fc3c 	bl	8012be0 <sub32>
 8013368:	68a3      	ldr	r3, [r4, #8]
 801336a:	f10d 0203 	add.w	r2, sp, #3
 801336e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013370:	a801      	add	r0, sp, #4
 8013372:	f7ff fc35 	bl	8012be0 <sub32>
 8013376:	68a3      	ldr	r3, [r4, #8]
 8013378:	f10d 0203 	add.w	r2, sp, #3
 801337c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801337e:	a801      	add	r0, sp, #4
 8013380:	f7ff fc2e 	bl	8012be0 <sub32>
 8013384:	68a3      	ldr	r3, [r4, #8]
 8013386:	9a01      	ldr	r2, [sp, #4]
 8013388:	609a      	str	r2, [r3, #8]
 801338a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801338e:	68db      	ldr	r3, [r3, #12]
 8013390:	9301      	str	r3, [sp, #4]
 8013392:	2300      	movs	r3, #0
 8013394:	4299      	cmp	r1, r3
 8013396:	f88d 3003 	strb.w	r3, [sp, #3]
 801339a:	f10d 0203 	add.w	r2, sp, #3
 801339e:	f280 8179 	bge.w	8013694 <ecp_mod_p256+0x47a>
 80133a2:	4249      	negs	r1, r1
 80133a4:	a801      	add	r0, sp, #4
 80133a6:	f7ff fc1b 	bl	8012be0 <sub32>
    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80133aa:	68a3      	ldr	r3, [r4, #8]
 80133ac:	f10d 0203 	add.w	r2, sp, #3
 80133b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80133b2:	a801      	add	r0, sp, #4
 80133b4:	f7ff fc08 	bl	8012bc8 <add32>
 80133b8:	68a3      	ldr	r3, [r4, #8]
 80133ba:	f10d 0203 	add.w	r2, sp, #3
 80133be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80133c0:	a801      	add	r0, sp, #4
 80133c2:	f7ff fc01 	bl	8012bc8 <add32>
 80133c6:	68a3      	ldr	r3, [r4, #8]
 80133c8:	f10d 0203 	add.w	r2, sp, #3
 80133cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80133ce:	a801      	add	r0, sp, #4
 80133d0:	f7ff fbfa 	bl	8012bc8 <add32>
 80133d4:	68a3      	ldr	r3, [r4, #8]
 80133d6:	f10d 0203 	add.w	r2, sp, #3
 80133da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80133dc:	a801      	add	r0, sp, #4
 80133de:	f7ff fbf3 	bl	8012bc8 <add32>
 80133e2:	68a3      	ldr	r3, [r4, #8]
 80133e4:	f10d 0203 	add.w	r2, sp, #3
 80133e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80133ea:	a801      	add	r0, sp, #4
 80133ec:	f7ff fbec 	bl	8012bc8 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80133f0:	68a3      	ldr	r3, [r4, #8]
 80133f2:	f10d 0203 	add.w	r2, sp, #3
 80133f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80133f8:	a801      	add	r0, sp, #4
 80133fa:	f7ff fbf1 	bl	8012be0 <sub32>
 80133fe:	68a3      	ldr	r3, [r4, #8]
 8013400:	f10d 0203 	add.w	r2, sp, #3
 8013404:	6a19      	ldr	r1, [r3, #32]
 8013406:	a801      	add	r0, sp, #4
 8013408:	f7ff fbea 	bl	8012be0 <sub32>
 801340c:	68a3      	ldr	r3, [r4, #8]
 801340e:	f10d 0203 	add.w	r2, sp, #3
 8013412:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013414:	a801      	add	r0, sp, #4
 8013416:	f7ff fbe3 	bl	8012be0 <sub32>
 801341a:	68a3      	ldr	r3, [r4, #8]
 801341c:	9a01      	ldr	r2, [sp, #4]
 801341e:	60da      	str	r2, [r3, #12]
 8013420:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013424:	691b      	ldr	r3, [r3, #16]
 8013426:	9301      	str	r3, [sp, #4]
 8013428:	2300      	movs	r3, #0
 801342a:	4299      	cmp	r1, r3
 801342c:	f88d 3003 	strb.w	r3, [sp, #3]
 8013430:	f10d 0203 	add.w	r2, sp, #3
 8013434:	f280 8132 	bge.w	801369c <ecp_mod_p256+0x482>
 8013438:	4249      	negs	r1, r1
 801343a:	a801      	add	r0, sp, #4
 801343c:	f7ff fbd0 	bl	8012be0 <sub32>
    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 8013440:	68a3      	ldr	r3, [r4, #8]
 8013442:	f10d 0203 	add.w	r2, sp, #3
 8013446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013448:	a801      	add	r0, sp, #4
 801344a:	f7ff fbbd 	bl	8012bc8 <add32>
 801344e:	68a3      	ldr	r3, [r4, #8]
 8013450:	f10d 0203 	add.w	r2, sp, #3
 8013454:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013456:	a801      	add	r0, sp, #4
 8013458:	f7ff fbb6 	bl	8012bc8 <add32>
 801345c:	68a3      	ldr	r3, [r4, #8]
 801345e:	f10d 0203 	add.w	r2, sp, #3
 8013462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013464:	a801      	add	r0, sp, #4
 8013466:	f7ff fbaf 	bl	8012bc8 <add32>
 801346a:	68a3      	ldr	r3, [r4, #8]
 801346c:	f10d 0203 	add.w	r2, sp, #3
 8013470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013472:	a801      	add	r0, sp, #4
 8013474:	f7ff fba8 	bl	8012bc8 <add32>
 8013478:	68a3      	ldr	r3, [r4, #8]
 801347a:	f10d 0203 	add.w	r2, sp, #3
 801347e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013480:	a801      	add	r0, sp, #4
 8013482:	f7ff fba1 	bl	8012bc8 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8013486:	68a3      	ldr	r3, [r4, #8]
 8013488:	f10d 0203 	add.w	r2, sp, #3
 801348c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801348e:	a801      	add	r0, sp, #4
 8013490:	f7ff fba6 	bl	8012be0 <sub32>
 8013494:	68a3      	ldr	r3, [r4, #8]
 8013496:	f10d 0203 	add.w	r2, sp, #3
 801349a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801349c:	a801      	add	r0, sp, #4
 801349e:	f7ff fb9f 	bl	8012be0 <sub32>
 80134a2:	68a3      	ldr	r3, [r4, #8]
 80134a4:	9a01      	ldr	r2, [sp, #4]
 80134a6:	611a      	str	r2, [r3, #16]
 80134a8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80134ac:	695b      	ldr	r3, [r3, #20]
 80134ae:	9301      	str	r3, [sp, #4]
 80134b0:	2300      	movs	r3, #0
 80134b2:	4299      	cmp	r1, r3
 80134b4:	f88d 3003 	strb.w	r3, [sp, #3]
 80134b8:	f10d 0203 	add.w	r2, sp, #3
 80134bc:	f280 80f2 	bge.w	80136a4 <ecp_mod_p256+0x48a>
 80134c0:	4249      	negs	r1, r1
 80134c2:	a801      	add	r0, sp, #4
 80134c4:	f7ff fb8c 	bl	8012be0 <sub32>
    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80134c8:	68a3      	ldr	r3, [r4, #8]
 80134ca:	f10d 0203 	add.w	r2, sp, #3
 80134ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80134d0:	a801      	add	r0, sp, #4
 80134d2:	f7ff fb79 	bl	8012bc8 <add32>
 80134d6:	68a3      	ldr	r3, [r4, #8]
 80134d8:	f10d 0203 	add.w	r2, sp, #3
 80134dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80134de:	a801      	add	r0, sp, #4
 80134e0:	f7ff fb72 	bl	8012bc8 <add32>
 80134e4:	68a3      	ldr	r3, [r4, #8]
 80134e6:	f10d 0203 	add.w	r2, sp, #3
 80134ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80134ec:	a801      	add	r0, sp, #4
 80134ee:	f7ff fb6b 	bl	8012bc8 <add32>
 80134f2:	68a3      	ldr	r3, [r4, #8]
 80134f4:	f10d 0203 	add.w	r2, sp, #3
 80134f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80134fa:	a801      	add	r0, sp, #4
 80134fc:	f7ff fb64 	bl	8012bc8 <add32>
 8013500:	68a3      	ldr	r3, [r4, #8]
 8013502:	f10d 0203 	add.w	r2, sp, #3
 8013506:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013508:	a801      	add	r0, sp, #4
 801350a:	f7ff fb5d 	bl	8012bc8 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 801350e:	68a3      	ldr	r3, [r4, #8]
 8013510:	f10d 0203 	add.w	r2, sp, #3
 8013514:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013516:	a801      	add	r0, sp, #4
 8013518:	f7ff fb62 	bl	8012be0 <sub32>
 801351c:	68a3      	ldr	r3, [r4, #8]
 801351e:	f10d 0203 	add.w	r2, sp, #3
 8013522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013524:	a801      	add	r0, sp, #4
 8013526:	f7ff fb5b 	bl	8012be0 <sub32>
 801352a:	68a3      	ldr	r3, [r4, #8]
 801352c:	9a01      	ldr	r2, [sp, #4]
 801352e:	615a      	str	r2, [r3, #20]
 8013530:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013534:	699b      	ldr	r3, [r3, #24]
 8013536:	9301      	str	r3, [sp, #4]
 8013538:	2300      	movs	r3, #0
 801353a:	4299      	cmp	r1, r3
 801353c:	f88d 3003 	strb.w	r3, [sp, #3]
 8013540:	f10d 0203 	add.w	r2, sp, #3
 8013544:	f280 80b2 	bge.w	80136ac <ecp_mod_p256+0x492>
 8013548:	4249      	negs	r1, r1
 801354a:	a801      	add	r0, sp, #4
 801354c:	f7ff fb48 	bl	8012be0 <sub32>
    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 8013550:	68a3      	ldr	r3, [r4, #8]
 8013552:	f10d 0203 	add.w	r2, sp, #3
 8013556:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013558:	a801      	add	r0, sp, #4
 801355a:	f7ff fb35 	bl	8012bc8 <add32>
 801355e:	68a3      	ldr	r3, [r4, #8]
 8013560:	f10d 0203 	add.w	r2, sp, #3
 8013564:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013566:	a801      	add	r0, sp, #4
 8013568:	f7ff fb2e 	bl	8012bc8 <add32>
 801356c:	68a3      	ldr	r3, [r4, #8]
 801356e:	f10d 0203 	add.w	r2, sp, #3
 8013572:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013574:	a801      	add	r0, sp, #4
 8013576:	f7ff fb27 	bl	8012bc8 <add32>
 801357a:	68a3      	ldr	r3, [r4, #8]
 801357c:	f10d 0203 	add.w	r2, sp, #3
 8013580:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013582:	a801      	add	r0, sp, #4
 8013584:	f7ff fb20 	bl	8012bc8 <add32>
 8013588:	68a3      	ldr	r3, [r4, #8]
 801358a:	f10d 0203 	add.w	r2, sp, #3
 801358e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013590:	a801      	add	r0, sp, #4
 8013592:	f7ff fb19 	bl	8012bc8 <add32>
 8013596:	68a3      	ldr	r3, [r4, #8]
 8013598:	f10d 0203 	add.w	r2, sp, #3
 801359c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801359e:	a801      	add	r0, sp, #4
 80135a0:	f7ff fb12 	bl	8012bc8 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 80135a4:	68a3      	ldr	r3, [r4, #8]
 80135a6:	f10d 0203 	add.w	r2, sp, #3
 80135aa:	6a19      	ldr	r1, [r3, #32]
 80135ac:	a801      	add	r0, sp, #4
 80135ae:	f7ff fb17 	bl	8012be0 <sub32>
 80135b2:	68a3      	ldr	r3, [r4, #8]
 80135b4:	f10d 0203 	add.w	r2, sp, #3
 80135b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80135ba:	a801      	add	r0, sp, #4
 80135bc:	f7ff fb10 	bl	8012be0 <sub32>
 80135c0:	68a3      	ldr	r3, [r4, #8]
 80135c2:	9a01      	ldr	r2, [sp, #4]
 80135c4:	619a      	str	r2, [r3, #24]
 80135c6:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80135ca:	69db      	ldr	r3, [r3, #28]
 80135cc:	9301      	str	r3, [sp, #4]
 80135ce:	2300      	movs	r3, #0
 80135d0:	4299      	cmp	r1, r3
 80135d2:	f88d 3003 	strb.w	r3, [sp, #3]
 80135d6:	f10d 0203 	add.w	r2, sp, #3
 80135da:	da6b      	bge.n	80136b4 <ecp_mod_p256+0x49a>
 80135dc:	4249      	negs	r1, r1
 80135de:	a801      	add	r0, sp, #4
 80135e0:	f7ff fafe 	bl	8012be0 <sub32>
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 80135e4:	68a3      	ldr	r3, [r4, #8]
 80135e6:	f10d 0203 	add.w	r2, sp, #3
 80135ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80135ec:	a801      	add	r0, sp, #4
 80135ee:	f7ff faeb 	bl	8012bc8 <add32>
 80135f2:	68a3      	ldr	r3, [r4, #8]
 80135f4:	f10d 0203 	add.w	r2, sp, #3
 80135f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80135fa:	a801      	add	r0, sp, #4
 80135fc:	f7ff fae4 	bl	8012bc8 <add32>
 8013600:	68a3      	ldr	r3, [r4, #8]
 8013602:	f10d 0203 	add.w	r2, sp, #3
 8013606:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013608:	a801      	add	r0, sp, #4
 801360a:	f7ff fadd 	bl	8012bc8 <add32>
 801360e:	68a3      	ldr	r3, [r4, #8]
 8013610:	f10d 0203 	add.w	r2, sp, #3
 8013614:	6a19      	ldr	r1, [r3, #32]
 8013616:	a801      	add	r0, sp, #4
 8013618:	f7ff fad6 	bl	8012bc8 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 801361c:	68a3      	ldr	r3, [r4, #8]
 801361e:	f10d 0203 	add.w	r2, sp, #3
 8013622:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013624:	a801      	add	r0, sp, #4
 8013626:	f7ff fadb 	bl	8012be0 <sub32>
 801362a:	68a3      	ldr	r3, [r4, #8]
 801362c:	f10d 0203 	add.w	r2, sp, #3
 8013630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013632:	a801      	add	r0, sp, #4
 8013634:	f7ff fad4 	bl	8012be0 <sub32>
 8013638:	68a3      	ldr	r3, [r4, #8]
 801363a:	f10d 0203 	add.w	r2, sp, #3
 801363e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013640:	a801      	add	r0, sp, #4
 8013642:	f7ff facd 	bl	8012be0 <sub32>
 8013646:	68a3      	ldr	r3, [r4, #8]
 8013648:	f10d 0203 	add.w	r2, sp, #3
 801364c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801364e:	a801      	add	r0, sp, #4
 8013650:	f7ff fac6 	bl	8012be0 <sub32>
 8013654:	68a2      	ldr	r2, [r4, #8]
 8013656:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801365a:	9b01      	ldr	r3, [sp, #4]
 801365c:	61d3      	str	r3, [r2, #28]
 801365e:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8013662:	6213      	str	r3, [r2, #32]
 8013664:	6860      	ldr	r0, [r4, #4]
 8013666:	2300      	movs	r3, #0
 8013668:	9301      	str	r3, [sp, #4]
 801366a:	2308      	movs	r3, #8
 801366c:	3301      	adds	r3, #1
 801366e:	4298      	cmp	r0, r3
 8013670:	d824      	bhi.n	80136bc <ecp_mod_p256+0x4a2>
 8013672:	2900      	cmp	r1, #0
 8013674:	da03      	bge.n	801367e <ecp_mod_p256+0x464>
 8013676:	aa02      	add	r2, sp, #8
 8013678:	4620      	mov	r0, r4
 801367a:	f7ff fabc 	bl	8012bf6 <fix_negative.isra.0>
}
 801367e:	4628      	mov	r0, r5
 8013680:	b00e      	add	sp, #56	; 0x38
 8013682:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8013684:	a801      	add	r0, sp, #4
 8013686:	f7ff fa9f 	bl	8012bc8 <add32>
 801368a:	e61b      	b.n	80132c4 <ecp_mod_p256+0xaa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 801368c:	a801      	add	r0, sp, #4
 801368e:	f7ff fa9b 	bl	8012bc8 <add32>
 8013692:	e654      	b.n	801333e <ecp_mod_p256+0x124>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8013694:	a801      	add	r0, sp, #4
 8013696:	f7ff fa97 	bl	8012bc8 <add32>
 801369a:	e686      	b.n	80133aa <ecp_mod_p256+0x190>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 801369c:	a801      	add	r0, sp, #4
 801369e:	f7ff fa93 	bl	8012bc8 <add32>
 80136a2:	e6cd      	b.n	8013440 <ecp_mod_p256+0x226>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 80136a4:	a801      	add	r0, sp, #4
 80136a6:	f7ff fa8f 	bl	8012bc8 <add32>
 80136aa:	e70d      	b.n	80134c8 <ecp_mod_p256+0x2ae>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 80136ac:	a801      	add	r0, sp, #4
 80136ae:	f7ff fa8b 	bl	8012bc8 <add32>
 80136b2:	e74d      	b.n	8013550 <ecp_mod_p256+0x336>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 80136b4:	a801      	add	r0, sp, #4
 80136b6:	f7ff fa87 	bl	8012bc8 <add32>
 80136ba:	e793      	b.n	80135e4 <ecp_mod_p256+0x3ca>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 80136bc:	9e01      	ldr	r6, [sp, #4]
 80136be:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 80136c2:	e7d3      	b.n	801366c <ecp_mod_p256+0x452>

080136c4 <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 80136c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( N->n < p_limbs )
 80136c8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80136cc:	f1b9 0f07 	cmp.w	r9, #7
{
 80136d0:	b093      	sub	sp, #76	; 0x4c
 80136d2:	4604      	mov	r4, r0
    if( N->n < p_limbs )
 80136d4:	d966      	bls.n	80137a4 <ecp_mod_p256k1+0xe0>
    R.s = 1;
 80136d6:	2301      	movs	r3, #1
 80136d8:	9304      	str	r3, [sp, #16]
    R.p = Rp;
 80136da:	4a33      	ldr	r2, [pc, #204]	; (80137a8 <ecp_mod_p256k1+0xe4>)
    M.s = 1;
 80136dc:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( p_limbs - adjust );
 80136de:	f1a9 0308 	sub.w	r3, r9, #8
    if( M.n > p_limbs + adjust )
 80136e2:	2b08      	cmp	r3, #8
    M.p = Mp;
 80136e4:	ae07      	add	r6, sp, #28
    R.p = Rp;
 80136e6:	9206      	str	r2, [sp, #24]
    R.n = P_KOBLITZ_R;
 80136e8:	f04f 0202 	mov.w	r2, #2
        M.n = p_limbs + adjust;
 80136ec:	bf88      	it	hi
 80136ee:	2308      	movhi	r3, #8
    R.n = P_KOBLITZ_R;
 80136f0:	9205      	str	r2, [sp, #20]
    memset( Mp, 0, sizeof Mp );
 80136f2:	2100      	movs	r1, #0
 80136f4:	222c      	movs	r2, #44	; 0x2c
 80136f6:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 80136f8:	9302      	str	r3, [sp, #8]
    M.p = Mp;
 80136fa:	9603      	str	r6, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 80136fc:	f00e fe17 	bl	802232e <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013700:	68a7      	ldr	r7, [r4, #8]
 8013702:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013706:	f107 0520 	add.w	r5, r7, #32
 801370a:	4629      	mov	r1, r5
 801370c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013710:	4630      	mov	r0, r6
 8013712:	f00e fde8 	bl	80222e6 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 8013716:	f108 0302 	add.w	r3, r8, #2
 801371a:	9302      	str	r3, [sp, #8]
 801371c:	4629      	mov	r1, r5
 801371e:	eb07 0789 	add.w	r7, r7, r9, lsl #2
        N->p[i] = 0;
 8013722:	2300      	movs	r3, #0
    for( i = p_limbs; i < N->n; i++ )
 8013724:	42b9      	cmp	r1, r7
 8013726:	d136      	bne.n	8013796 <ecp_mod_p256k1+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013728:	a901      	add	r1, sp, #4
 801372a:	aa04      	add	r2, sp, #16
 801372c:	4608      	mov	r0, r1
 801372e:	f7fb fafb 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8013732:	bb68      	cbnz	r0, 8013790 <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013734:	aa01      	add	r2, sp, #4
 8013736:	4621      	mov	r1, r4
 8013738:	4620      	mov	r0, r4
 801373a:	f7fb f9f9 	bl	800eb30 <mbedtls_mpi_add_abs>
 801373e:	bb38      	cbnz	r0, 8013790 <ecp_mod_p256k1+0xcc>
    M.n = N->n - ( p_limbs - adjust );
 8013740:	6865      	ldr	r5, [r4, #4]
 8013742:	f1a5 0308 	sub.w	r3, r5, #8
    if( M.n > p_limbs + adjust )
 8013746:	2b08      	cmp	r3, #8
        M.n = p_limbs + adjust;
 8013748:	bf88      	it	hi
 801374a:	2308      	movhi	r3, #8
    memset( Mp, 0, sizeof Mp );
 801374c:	222c      	movs	r2, #44	; 0x2c
 801374e:	2100      	movs	r1, #0
 8013750:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 8013752:	9302      	str	r3, [sp, #8]
    memset( Mp, 0, sizeof Mp );
 8013754:	f00e fdeb 	bl	802232e <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013758:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801375c:	68a7      	ldr	r7, [r4, #8]
 801375e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013762:	f107 0120 	add.w	r1, r7, #32
 8013766:	4630      	mov	r0, r6
 8013768:	f00e fdbd 	bl	80222e6 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 801376c:	9b05      	ldr	r3, [sp, #20]
 801376e:	4443      	add	r3, r8
 8013770:	9302      	str	r3, [sp, #8]
        N->p[i] = 0;
 8013772:	2200      	movs	r2, #0
    M.n += R.n; /* Make room for multiplication by R */
 8013774:	2308      	movs	r3, #8
    for( i = p_limbs; i < N->n; i++ )
 8013776:	429d      	cmp	r5, r3
 8013778:	d810      	bhi.n	801379c <ecp_mod_p256k1+0xd8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 801377a:	a901      	add	r1, sp, #4
 801377c:	aa04      	add	r2, sp, #16
 801377e:	4608      	mov	r0, r1
 8013780:	f7fb fad2 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8013784:	b920      	cbnz	r0, 8013790 <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013786:	aa01      	add	r2, sp, #4
 8013788:	4621      	mov	r1, r4
 801378a:	4620      	mov	r0, r4
 801378c:	f7fb f9d0 	bl	800eb30 <mbedtls_mpi_add_abs>
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
}
 8013790:	b013      	add	sp, #76	; 0x4c
 8013792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        N->p[i] = 0;
 8013796:	f841 3b04 	str.w	r3, [r1], #4
 801379a:	e7c3      	b.n	8013724 <ecp_mod_p256k1+0x60>
        N->p[i] = 0;
 801379c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    for( i = p_limbs; i < N->n; i++ )
 80137a0:	3301      	adds	r3, #1
 80137a2:	e7e8      	b.n	8013776 <ecp_mod_p256k1+0xb2>
        return( 0 );
 80137a4:	2000      	movs	r0, #0
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 80137a6:	e7f3      	b.n	8013790 <ecp_mod_p256k1+0xcc>
 80137a8:	20000594 	.word	0x20000594

080137ac <mbedtls_ecp_group_load>:
{
 80137ac:	b538      	push	{r3, r4, r5, lr}
 80137ae:	4604      	mov	r4, r0
 80137b0:	460d      	mov	r5, r1
    mbedtls_ecp_group_free( grp );
 80137b2:	f7fe f9e1 	bl	8011b78 <mbedtls_ecp_group_free>
    grp->id = id;
 80137b6:	7025      	strb	r5, [r4, #0]
    switch( id )
 80137b8:	3d03      	subs	r5, #3
 80137ba:	2d09      	cmp	r5, #9
 80137bc:	f200 80a9 	bhi.w	8013912 <mbedtls_ecp_group_load+0x166>
 80137c0:	e8df f005 	tbb	[pc, r5]
 80137c4:	6ba73005 	.word	0x6ba73005
 80137c8:	a7a7a789 	.word	0xa7a7a789
 80137cc:	4ba7      	.short	0x4ba7
            NIST_MODP( p256 );
 80137ce:	4b53      	ldr	r3, [pc, #332]	; (801391c <mbedtls_ecp_group_load+0x170>)
 80137d0:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 80137d2:	4b53      	ldr	r3, [pc, #332]	; (8013920 <mbedtls_ecp_group_load+0x174>)
 80137d4:	60e3      	str	r3, [r4, #12]
 80137d6:	f103 0120 	add.w	r1, r3, #32
 80137da:	6261      	str	r1, [r4, #36]	; 0x24
 80137dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
    X->n = len / sizeof( mbedtls_mpi_uint );
 80137e0:	2501      	movs	r5, #1
 80137e2:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 80137e4:	6561      	str	r1, [r4, #84]	; 0x54
 80137e6:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 80137ea:	e9c4 5201 	strd	r5, r2, [r4, #4]
 80137ee:	e9c4 5207 	strd	r5, r2, [r4, #28]
 80137f2:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 80137f6:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 80137fa:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 80137fe:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013800:	3380      	adds	r3, #128	; 0x80
    X->s = 1;
 8013802:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 8013806:	4b47      	ldr	r3, [pc, #284]	; (8013924 <mbedtls_ecp_group_load+0x178>)
 8013808:	64a3      	str	r3, [r4, #72]	; 0x48
    X->n = 1;
 801380a:	6465      	str	r5, [r4, #68]	; 0x44
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 801380c:	1d20      	adds	r0, r4, #4
 801380e:	f7fa ffa5 	bl	800e75c <mbedtls_mpi_bitlen>
 8013812:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8013814:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8013818:	f7fa ffa0 	bl	800e75c <mbedtls_mpi_bitlen>
    grp->h = 1;
 801381c:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 8013820:	2000      	movs	r0, #0
}
 8013822:	bd38      	pop	{r3, r4, r5, pc}
            NIST_MODP( p384 );
 8013824:	4b40      	ldr	r3, [pc, #256]	; (8013928 <mbedtls_ecp_group_load+0x17c>)
 8013826:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013828:	4b40      	ldr	r3, [pc, #256]	; (801392c <mbedtls_ecp_group_load+0x180>)
 801382a:	60e3      	str	r3, [r4, #12]
 801382c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013830:	6261      	str	r1, [r4, #36]	; 0x24
 8013832:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013836:	2501      	movs	r5, #1
 8013838:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 801383a:	6561      	str	r1, [r4, #84]	; 0x54
 801383c:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013840:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013844:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8013848:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 801384c:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013850:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013854:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013856:	33c0      	adds	r3, #192	; 0xc0
 8013858:	e7d3      	b.n	8013802 <mbedtls_ecp_group_load+0x56>
            grp->modp = ecp_mod_p256k1;
 801385a:	4b35      	ldr	r3, [pc, #212]	; (8013930 <mbedtls_ecp_group_load+0x184>)
 801385c:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 801385e:	4b35      	ldr	r3, [pc, #212]	; (8013934 <mbedtls_ecp_group_load+0x188>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013860:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013862:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 8013866:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 801386a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801386e:	6261      	str	r1, [r4, #36]	; 0x24
 8013870:	f103 0128 	add.w	r1, r3, #40	; 0x28
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013874:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013876:	6561      	str	r1, [r4, #84]	; 0x54
 8013878:	f103 0148 	add.w	r1, r3, #72	; 0x48
    X->s = 1;
 801387c:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013880:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013884:	6165      	str	r5, [r4, #20]
 8013886:	6225      	str	r5, [r4, #32]
 8013888:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 801388c:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013890:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013894:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013896:	3368      	adds	r3, #104	; 0x68
 8013898:	e7b3      	b.n	8013802 <mbedtls_ecp_group_load+0x56>
 801389a:	4b27      	ldr	r3, [pc, #156]	; (8013938 <mbedtls_ecp_group_load+0x18c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 801389c:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 801389e:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 80138a2:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 80138a6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80138aa:	6261      	str	r1, [r4, #36]	; 0x24
 80138ac:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 80138b0:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 80138b2:	6561      	str	r1, [r4, #84]	; 0x54
 80138b4:	f103 0180 	add.w	r1, r3, #128	; 0x80
    X->s = 1;
 80138b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 80138bc:	e9c4 5201 	strd	r5, r2, [r4, #4]
 80138c0:	6162      	str	r2, [r4, #20]
 80138c2:	6222      	str	r2, [r4, #32]
 80138c4:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 80138c8:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 80138cc:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 80138d0:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 80138d2:	33a0      	adds	r3, #160	; 0xa0
 80138d4:	e795      	b.n	8013802 <mbedtls_ecp_group_load+0x56>
 80138d6:	4b19      	ldr	r3, [pc, #100]	; (801393c <mbedtls_ecp_group_load+0x190>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 80138d8:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 80138da:	f103 0130 	add.w	r1, r3, #48	; 0x30
    X->s = 1;
 80138de:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 80138e2:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80138e6:	6261      	str	r1, [r4, #36]	; 0x24
 80138e8:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 80138ec:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 80138ee:	6561      	str	r1, [r4, #84]	; 0x54
 80138f0:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    X->s = 1;
 80138f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 80138f8:	e9c4 5201 	strd	r5, r2, [r4, #4]
 80138fc:	6162      	str	r2, [r4, #20]
 80138fe:	6222      	str	r2, [r4, #32]
 8013900:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013904:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013908:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 801390c:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 801390e:	33f0      	adds	r3, #240	; 0xf0
 8013910:	e777      	b.n	8013802 <mbedtls_ecp_group_load+0x56>
            mbedtls_ecp_group_free( grp );
 8013912:	4620      	mov	r0, r4
 8013914:	f7fe f930 	bl	8011b78 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8013918:	4809      	ldr	r0, [pc, #36]	; (8013940 <mbedtls_ecp_group_load+0x194>)
 801391a:	e782      	b.n	8013822 <mbedtls_ecp_group_load+0x76>
 801391c:	0801321b 	.word	0x0801321b
 8013920:	0802a678 	.word	0x0802a678
 8013924:	2000059c 	.word	0x2000059c
 8013928:	08012c1f 	.word	0x08012c1f
 801392c:	0802a718 	.word	0x0802a718
 8013930:	080136c5 	.word	0x080136c5
 8013934:	0802a808 	.word	0x0802a808
 8013938:	0802a890 	.word	0x0802a890
 801393c:	0802a950 	.word	0x0802a950
 8013940:	ffffb180 	.word	0xffffb180

08013944 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 8013944:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013946:	2b40      	cmp	r3, #64	; 0x40
{
 8013948:	b093      	sub	sp, #76	; 0x4c
 801394a:	4606      	mov	r6, r0
 801394c:	460f      	mov	r7, r1
 801394e:	4615      	mov	r5, r2
 8013950:	461c      	mov	r4, r3
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013952:	d907      	bls.n	8013964 <entropy_update+0x20>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        mbedtls_sha512( data, len, tmp, 0 );
 8013954:	4621      	mov	r1, r4
 8013956:	4628      	mov	r0, r5
 8013958:	2300      	movs	r3, #0
 801395a:	aa02      	add	r2, sp, #8
 801395c:	f006 fb7a 	bl	801a054 <mbedtls_sha512>
#else
        mbedtls_sha256( data, len, tmp, 0 );
#endif
        p = tmp;
 8013960:	ad02      	add	r5, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8013962:	2440      	movs	r4, #64	; 0x40

    header[0] = source_id;
    header[1] = use_len & 0xFF;

#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013964:	a901      	add	r1, sp, #4
 8013966:	4630      	mov	r0, r6
 8013968:	2202      	movs	r2, #2
    header[0] = source_id;
 801396a:	f88d 7004 	strb.w	r7, [sp, #4]
    header[1] = use_len & 0xFF;
 801396e:	f88d 4005 	strb.w	r4, [sp, #5]
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013972:	f006 fa46 	bl	8019e02 <mbedtls_sha512_update>
    mbedtls_sha512_update( &ctx->accumulator, p, use_len );
 8013976:	4630      	mov	r0, r6
 8013978:	4622      	mov	r2, r4
 801397a:	4629      	mov	r1, r5
 801397c:	f006 fa41 	bl	8019e02 <mbedtls_sha512_update>
    mbedtls_sha256_update( &ctx->accumulator, header, 2 );
    mbedtls_sha256_update( &ctx->accumulator, p, use_len );
#endif

    return( 0 );
}
 8013980:	2000      	movs	r0, #0
 8013982:	b013      	add	sp, #76	; 0x4c
 8013984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013986 <entropy_gather_internal.part.0>:
}

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8013986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{
    int ret, i, have_one_strong = 0;
 801398a:	2500      	movs	r5, #0
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 801398c:	b0a3      	sub	sp, #140	; 0x8c
 801398e:	4680      	mov	r8, r0
 8013990:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8013992:	462e      	mov	r6, r5
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 8013994:	46a9      	mov	r9, r5
    for( i = 0; i < ctx->source_count; i++ )
 8013996:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 801399a:	429e      	cmp	r6, r3
 801399c:	db07      	blt.n	80139ae <entropy_gather_internal.part.0+0x28>
    }

    if( have_one_strong == 0 )
        return( MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE );

    return( 0 );
 801399e:	2d00      	cmp	r5, #0
 80139a0:	bf0c      	ite	eq
 80139a2:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
 80139a6:	2000      	movne	r0, #0
}
 80139a8:	b023      	add	sp, #140	; 0x8c
 80139aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 80139ae:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
        olen = 0;
 80139b2:	f8cd 9004 	str.w	r9, [sp, #4]
            have_one_strong = 1;
 80139b6:	2b01      	cmp	r3, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 80139b8:	f04f 0280 	mov.w	r2, #128	; 0x80
 80139bc:	ab01      	add	r3, sp, #4
 80139be:	a902      	add	r1, sp, #8
 80139c0:	e9d4 7037 	ldrd	r7, r0, [r4, #220]	; 0xdc
            have_one_strong = 1;
 80139c4:	bf08      	it	eq
 80139c6:	2501      	moveq	r5, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 80139c8:	47b8      	blx	r7
 80139ca:	2800      	cmp	r0, #0
 80139cc:	d1ec      	bne.n	80139a8 <entropy_gather_internal.part.0+0x22>
        if( olen > 0 )
 80139ce:	9b01      	ldr	r3, [sp, #4]
 80139d0:	b153      	cbz	r3, 80139e8 <entropy_gather_internal.part.0+0x62>
            entropy_update( ctx, (unsigned char) i, buf, olen );
 80139d2:	aa02      	add	r2, sp, #8
 80139d4:	b2f1      	uxtb	r1, r6
 80139d6:	4640      	mov	r0, r8
 80139d8:	f7ff ffb4 	bl	8013944 <entropy_update>
            ctx->source[i].size += olen;
 80139dc:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80139e0:	9a01      	ldr	r2, [sp, #4]
 80139e2:	4413      	add	r3, r2
 80139e4:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    for( i = 0; i < ctx->source_count; i++ )
 80139e8:	3601      	adds	r6, #1
 80139ea:	3414      	adds	r4, #20
 80139ec:	e7d3      	b.n	8013996 <entropy_gather_internal.part.0+0x10>
	...

080139f0 <mbedtls_entropy_init>:
{
 80139f0:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 80139f2:	f44f 7284 	mov.w	r2, #264	; 0x108
{
 80139f6:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 80139f8:	2100      	movs	r1, #0
 80139fa:	f00e fc98 	bl	802232e <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 80139fe:	2100      	movs	r1, #0
 8013a00:	4620      	mov	r0, r4
 8013a02:	f005 fa65 	bl	8018ed0 <mbedtls_sha512_starts>
    idx = ctx->source_count;
 8013a06:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013a0a:	2a01      	cmp	r2, #1
 8013a0c:	dc10      	bgt.n	8013a30 <mbedtls_entropy_init+0x40>
    ctx->source[idx].f_source  = f_source;
 8013a0e:	2314      	movs	r3, #20
 8013a10:	fb03 4302 	mla	r3, r3, r2, r4
 8013a14:	4907      	ldr	r1, [pc, #28]	; (8013a34 <mbedtls_entropy_init+0x44>)
 8013a16:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    ctx->source[idx].p_source  = p_source;
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    ctx->source[idx].strong    = strong;
 8013a20:	2101      	movs	r1, #1
 8013a22:	f04f 0c20 	mov.w	ip, #32
    ctx->source_count++;
 8013a26:	440a      	add	r2, r1
    ctx->source[idx].strong    = strong;
 8013a28:	e9c3 c13a 	strd	ip, r1, [r3, #232]	; 0xe8
    ctx->source_count++;
 8013a2c:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
}
 8013a30:	bd10      	pop	{r4, pc}
 8013a32:	bf00      	nop
 8013a34:	0800129d 	.word	0x0800129d

08013a38 <mbedtls_entropy_free>:
{
 8013a38:	f500 7384 	add.w	r3, r0, #264	; 0x108
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	4298      	cmp	r0, r3
 8013a40:	d100      	bne.n	8013a44 <mbedtls_entropy_free+0xc>
}
 8013a42:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013a44:	7002      	strb	r2, [r0, #0]
 8013a46:	3001      	adds	r0, #1
 8013a48:	e7f9      	b.n	8013a3e <mbedtls_entropy_free+0x6>

08013a4a <mbedtls_entropy_add_source>:
{
 8013a4a:	b530      	push	{r4, r5, lr}
    idx = ctx->source_count;
 8013a4c:	f8d0 50d8 	ldr.w	r5, [r0, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013a50:	2d01      	cmp	r5, #1
 8013a52:	dc0e      	bgt.n	8013a72 <mbedtls_entropy_add_source+0x28>
    ctx->source[idx].f_source  = f_source;
 8013a54:	2414      	movs	r4, #20
 8013a56:	fb04 0405 	mla	r4, r4, r5, r0
    ctx->source_count++;
 8013a5a:	3501      	adds	r5, #1
    ctx->source[idx].threshold = threshold;
 8013a5c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ctx->source[idx].strong    = strong;
 8013a60:	9b03      	ldr	r3, [sp, #12]
 8013a62:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    ctx->source[idx].p_source  = p_source;
 8013a66:	e9c4 1237 	strd	r1, r2, [r4, #220]	; 0xdc
    ctx->source_count++;
 8013a6a:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
    int idx, ret = 0;
 8013a6e:	2000      	movs	r0, #0
}
 8013a70:	bd30      	pop	{r4, r5, pc}
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
 8013a72:	f06f 003d 	mvn.w	r0, #61	; 0x3d
    return( ret );
 8013a76:	e7fb      	b.n	8013a70 <mbedtls_entropy_add_source+0x26>

08013a78 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8013a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013a7c:	2a40      	cmp	r2, #64	; 0x40
{
 8013a7e:	b090      	sub	sp, #64	; 0x40
 8013a80:	4604      	mov	r4, r0
 8013a82:	460f      	mov	r7, r1
 8013a84:	4616      	mov	r6, r2
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013a86:	d905      	bls.n	8013a94 <mbedtls_entropy_func+0x1c>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 8013a88:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	b010      	add	sp, #64	; 0x40
 8013a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a94:	f44f 7881 	mov.w	r8, #258	; 0x102
        if( count++ > ENTROPY_MAX_LOOP )
 8013a98:	f1b8 0801 	subs.w	r8, r8, #1
 8013a9c:	d0f4      	beq.n	8013a88 <mbedtls_entropy_func+0x10>
    if( ctx->source_count == 0 )
 8013a9e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d047      	beq.n	8013b36 <mbedtls_entropy_func+0xbe>
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	f7ff ff6d 	bl	8013986 <entropy_gather_internal.part.0>
        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8013aac:	4605      	mov	r5, r0
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d1ec      	bne.n	8013a8c <mbedtls_entropy_func+0x14>
        for( i = 0; i < ctx->source_count; i++ )
 8013ab2:	f8d4 e0d8 	ldr.w	lr, [r4, #216]	; 0xd8
 8013ab6:	4623      	mov	r3, r4
 8013ab8:	4684      	mov	ip, r0
        done = 1;
 8013aba:	2201      	movs	r2, #1
        for( i = 0; i < ctx->source_count; i++ )
 8013abc:	45e6      	cmp	lr, ip
 8013abe:	dc2b      	bgt.n	8013b18 <mbedtls_entropy_func+0xa0>
    while( ! done );
 8013ac0:	2a00      	cmp	r2, #0
 8013ac2:	d0e9      	beq.n	8013a98 <mbedtls_entropy_func+0x20>
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8013ac4:	2240      	movs	r2, #64	; 0x40
 8013ac6:	2100      	movs	r1, #0
 8013ac8:	4668      	mov	r0, sp
 8013aca:	f00e fc30 	bl	802232e <memset>
    mbedtls_sha512_finish( &ctx->accumulator, buf );
 8013ace:	4669      	mov	r1, sp
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f006 f99b 	bl	8019e0c <mbedtls_sha512_finish>
    memset( &ctx->accumulator, 0, sizeof( mbedtls_sha512_context ) );
 8013ad6:	22d8      	movs	r2, #216	; 0xd8
 8013ad8:	2100      	movs	r1, #0
 8013ada:	4620      	mov	r0, r4
 8013adc:	f00e fc27 	bl	802232e <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 8013ae0:	2100      	movs	r1, #0
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f005 f9f4 	bl	8018ed0 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx->accumulator, buf, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8013ae8:	2240      	movs	r2, #64	; 0x40
 8013aea:	4669      	mov	r1, sp
 8013aec:	4620      	mov	r0, r4
 8013aee:	f006 f988 	bl	8019e02 <mbedtls_sha512_update>
    mbedtls_sha512( buf, MBEDTLS_ENTROPY_BLOCK_SIZE, buf, 0 );
 8013af2:	2300      	movs	r3, #0
 8013af4:	466a      	mov	r2, sp
 8013af6:	2140      	movs	r1, #64	; 0x40
 8013af8:	4668      	mov	r0, sp
 8013afa:	f006 faab 	bl	801a054 <mbedtls_sha512>
    for( i = 0; i < ctx->source_count; i++ )
 8013afe:	2300      	movs	r3, #0
 8013b00:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
        ctx->source[i].size = 0;
 8013b04:	2114      	movs	r1, #20
 8013b06:	4618      	mov	r0, r3
    for( i = 0; i < ctx->source_count; i++ )
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	db0e      	blt.n	8013b2a <mbedtls_entropy_func+0xb2>
    memcpy( output, buf, len );
 8013b0c:	4632      	mov	r2, r6
 8013b0e:	4669      	mov	r1, sp
 8013b10:	4638      	mov	r0, r7
 8013b12:	f00e fbe8 	bl	80222e6 <memcpy>
 8013b16:	e7b9      	b.n	8013a8c <mbedtls_entropy_func+0x14>
                done = 0;
 8013b18:	e9d3 1039 	ldrd	r1, r0, [r3, #228]	; 0xe4
        for( i = 0; i < ctx->source_count; i++ )
 8013b1c:	f10c 0c01 	add.w	ip, ip, #1
                done = 0;
 8013b20:	4281      	cmp	r1, r0
 8013b22:	bf38      	it	cc
 8013b24:	2200      	movcc	r2, #0
 8013b26:	3314      	adds	r3, #20
 8013b28:	e7c8      	b.n	8013abc <mbedtls_entropy_func+0x44>
        ctx->source[i].size = 0;
 8013b2a:	fb01 4c03 	mla	ip, r1, r3, r4
    for( i = 0; i < ctx->source_count; i++ )
 8013b2e:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 8013b30:	f8cc 00e4 	str.w	r0, [ip, #228]	; 0xe4
 8013b34:	e7e8      	b.n	8013b08 <mbedtls_entropy_func+0x90>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 8013b36:	f06f 053f 	mvn.w	r5, #63	; 0x3f
 8013b3a:	e7a7      	b.n	8013a8c <mbedtls_entropy_func+0x14>

08013b3c <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8013b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b40:	460b      	mov	r3, r1
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8013b42:	7bc9      	ldrb	r1, [r1, #15]
{
 8013b44:	b087      	sub	sp, #28
 8013b46:	f001 010f 	and.w	r1, r1, #15
 8013b4a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013b4e:	9005      	str	r0, [sp, #20]

    zh = ctx->HH[lo];
 8013b50:	e9d1 4530 	ldrd	r4, r5, [r1, #192]	; 0xc0
    zl = ctx->HL[lo];
 8013b54:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
 8013b58:	e9cd 0100 	strd	r0, r1, [sp]
 8013b5c:	f103 0e10 	add.w	lr, r3, #16
 8013b60:	9900      	ldr	r1, [sp, #0]
 8013b62:	4852      	ldr	r0, [pc, #328]	; (8013cac <gcm_mult+0x170>)

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 8013b64:	f81e cd01 	ldrb.w	ip, [lr, #-1]!
 8013b68:	f001 010f 	and.w	r1, r1, #15
 8013b6c:	0727      	lsls	r7, r4, #28
 8013b6e:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8013b72:	9801      	ldr	r0, [sp, #4]
 8013b74:	0409      	lsls	r1, r1, #16
 8013b76:	468b      	mov	fp, r1
 8013b78:	2100      	movs	r1, #0
 8013b7a:	460e      	mov	r6, r1
 8013b7c:	468a      	mov	sl, r1
 8013b7e:	9900      	ldr	r1, [sp, #0]
 8013b80:	0909      	lsrs	r1, r1, #4
 8013b82:	ea41 7100 	orr.w	r1, r1, r0, lsl #28
 8013b86:	9102      	str	r1, [sp, #8]
 8013b88:	0901      	lsrs	r1, r0, #4
 8013b8a:	9103      	str	r1, [sp, #12]
 8013b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        hi = x[i] >> 4;

        if( i != 15 )
 8013b90:	ebae 0903 	sub.w	r9, lr, r3
 8013b94:	4330      	orrs	r0, r6
 8013b96:	4339      	orrs	r1, r7
 8013b98:	0926      	lsrs	r6, r4, #4
 8013b9a:	f1b9 0f0f 	cmp.w	r9, #15
        lo = x[i] & 0xf;
 8013b9e:	f00c 080f 	and.w	r8, ip, #15
 8013ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
        hi = x[i] >> 4;
 8013ba6:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8013baa:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8013bae:	ea4f 1715 	mov.w	r7, r5, lsr #4
        if( i != 15 )
 8013bb2:	d01c      	beq.n	8013bee <gcm_mult+0xb2>
 8013bb4:	9c05      	ldr	r4, [sp, #20]
 8013bb6:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
 8013bba:	e9d8 4530 	ldrd	r4, r5, [r8, #192]	; 0xc0
 8013bbe:	ea84 0006 	eor.w	r0, r4, r6
 8013bc2:	ea85 0107 	eor.w	r1, r5, r7
 8013bc6:	4654      	mov	r4, sl
 8013bc8:	465d      	mov	r5, fp
 8013bca:	4606      	mov	r6, r0
 8013bcc:	460f      	mov	r7, r1
            zl ^= ctx->HL[lo];
 8013bce:	e9d8 ab10 	ldrd	sl, fp, [r8, #64]	; 0x40
 8013bd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
            zh ^= ctx->HH[lo];
 8013bd6:	4066      	eors	r6, r4
 8013bd8:	406f      	eors	r7, r5
            zl ^= ctx->HL[lo];
 8013bda:	ea80 000a 	eor.w	r0, r0, sl
 8013bde:	ea81 010b 	eor.w	r1, r1, fp
            zh ^= ctx->HH[lo];
 8013be2:	4634      	mov	r4, r6
 8013be4:	463d      	mov	r5, r7
            zl ^= ctx->HL[lo];
 8013be6:	4606      	mov	r6, r0
 8013be8:	460f      	mov	r7, r1
 8013bea:	e9cd 6700 	strd	r6, r7, [sp]

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 8013bee:	9900      	ldr	r1, [sp, #0]
 8013bf0:	090e      	lsrs	r6, r1, #4
 8013bf2:	9901      	ldr	r1, [sp, #4]
 8013bf4:	f04f 0800 	mov.w	r8, #0
 8013bf8:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
 8013bfc:	ea46 0008 	orr.w	r0, r6, r8
 8013c00:	9e05      	ldr	r6, [sp, #20]
 8013c02:	090f      	lsrs	r7, r1, #4
 8013c04:	eb06 0ccc 	add.w	ip, r6, ip, lsl #3
 8013c08:	ea4f 7904 	mov.w	r9, r4, lsl #28
        zh = ( zh >> 4 );
 8013c0c:	0926      	lsrs	r6, r4, #4
 8013c0e:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
        zl = ( zh << 60 ) | ( zl >> 4 );
 8013c12:	ea47 0109 	orr.w	r1, r7, r9
        zh = ( zh >> 4 );
 8013c16:	092f      	lsrs	r7, r5, #4
 8013c18:	e9dc 4530 	ldrd	r4, r5, [ip, #192]	; 0xc0
 8013c1c:	ea84 0a06 	eor.w	sl, r4, r6
        zh ^= (uint64_t) last4[rem] << 48;
 8013c20:	9c00      	ldr	r4, [sp, #0]
 8013c22:	ea85 0b07 	eor.w	fp, r5, r7
 8013c26:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8013c2a:	f004 0a0f 	and.w	sl, r4, #15
 8013c2e:	4c1f      	ldr	r4, [pc, #124]	; (8013cac <gcm_mult+0x170>)
 8013c30:	f854 603a 	ldr.w	r6, [r4, sl, lsl #3]
        zh ^= ctx->HH[hi];
 8013c34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
        zh ^= (uint64_t) last4[rem] << 48;
 8013c38:	ea4f 4b06 	mov.w	fp, r6, lsl #16
        zh ^= ctx->HH[hi];
 8013c3c:	ea85 050b 	eor.w	r5, r5, fp
        zl ^= ctx->HL[hi];
 8013c40:	e9dc ab10 	ldrd	sl, fp, [ip, #64]	; 0x40
    for( i = 15; i >= 0; i-- )
 8013c44:	4573      	cmp	r3, lr
        zl ^= ctx->HL[hi];
 8013c46:	ea8a 0600 	eor.w	r6, sl, r0
 8013c4a:	ea8b 0701 	eor.w	r7, fp, r1
        zh ^= ctx->HH[hi];
 8013c4e:	ea84 0408 	eor.w	r4, r4, r8
        zl ^= ctx->HL[hi];
 8013c52:	e9cd 6700 	strd	r6, r7, [sp]
    for( i = 15; i >= 0; i-- )
 8013c56:	d183      	bne.n	8013b60 <gcm_mult+0x24>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8013c58:	0e2b      	lsrs	r3, r5, #24
 8013c5a:	7013      	strb	r3, [r2, #0]
 8013c5c:	0c2b      	lsrs	r3, r5, #16
 8013c5e:	7053      	strb	r3, [r2, #1]
 8013c60:	0a2b      	lsrs	r3, r5, #8
 8013c62:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8013c64:	0e23      	lsrs	r3, r4, #24
 8013c66:	7113      	strb	r3, [r2, #4]
 8013c68:	0c23      	lsrs	r3, r4, #16
 8013c6a:	7153      	strb	r3, [r2, #5]
 8013c6c:	0a23      	lsrs	r3, r4, #8
 8013c6e:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8013c70:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8013c72:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8013c74:	0e1b      	lsrs	r3, r3, #24
 8013c76:	7213      	strb	r3, [r2, #8]
 8013c78:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_BE( zh, output, 4 );
 8013c7a:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8013c7c:	0c1b      	lsrs	r3, r3, #16
 8013c7e:	7253      	strb	r3, [r2, #9]
 8013c80:	9b01      	ldr	r3, [sp, #4]
 8013c82:	0a1b      	lsrs	r3, r3, #8
 8013c84:	7293      	strb	r3, [r2, #10]
 8013c86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c8a:	72d3      	strb	r3, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8013c8c:	9b00      	ldr	r3, [sp, #0]
 8013c8e:	0e1b      	lsrs	r3, r3, #24
 8013c90:	7313      	strb	r3, [r2, #12]
 8013c92:	9b00      	ldr	r3, [sp, #0]
 8013c94:	0c1b      	lsrs	r3, r3, #16
 8013c96:	7353      	strb	r3, [r2, #13]
 8013c98:	9b00      	ldr	r3, [sp, #0]
 8013c9a:	0a1b      	lsrs	r3, r3, #8
 8013c9c:	7393      	strb	r3, [r2, #14]
 8013c9e:	f89d 3000 	ldrb.w	r3, [sp]
 8013ca2:	73d3      	strb	r3, [r2, #15]
}
 8013ca4:	b007      	add	sp, #28
 8013ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013caa:	bf00      	nop
 8013cac:	0802aa70 	.word	0x0802aa70

08013cb0 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8013cb0:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8013cb4:	2100      	movs	r1, #0
 8013cb6:	f00e bb3a 	b.w	802232e <memset>

08013cba <mbedtls_gcm_setkey>:
{
 8013cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cbe:	4682      	mov	sl, r0
 8013cc0:	b08f      	sub	sp, #60	; 0x3c
 8013cc2:	4608      	mov	r0, r1
 8013cc4:	4617      	mov	r7, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	2201      	movs	r2, #1
{
 8013cca:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8013ccc:	f7fb ffa4 	bl	800fc18 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8013cd0:	4605      	mov	r5, r0
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	f000 80b5 	beq.w	8013e42 <mbedtls_gcm_setkey+0x188>
    if( cipher_info->block_size != 16 )
 8013cd8:	6944      	ldr	r4, [r0, #20]
 8013cda:	2c10      	cmp	r4, #16
 8013cdc:	f040 80b1 	bne.w	8013e42 <mbedtls_gcm_setkey+0x188>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8013ce0:	4650      	mov	r0, sl
 8013ce2:	f7fb ffb1 	bl	800fc48 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8013ce6:	4629      	mov	r1, r5
 8013ce8:	4650      	mov	r0, sl
 8013cea:	f7fc f971 	bl	800ffd0 <mbedtls_cipher_setup>
 8013cee:	4683      	mov	fp, r0
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	f040 80a2 	bne.w	8013e3a <mbedtls_gcm_setkey+0x180>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	4632      	mov	r2, r6
 8013cfa:	4639      	mov	r1, r7
 8013cfc:	4650      	mov	r0, sl
 8013cfe:	f7fb ffb5 	bl	800fc6c <mbedtls_cipher_setkey>
 8013d02:	4683      	mov	fp, r0
 8013d04:	2800      	cmp	r0, #0
 8013d06:	f040 8098 	bne.w	8013e3a <mbedtls_gcm_setkey+0x180>
    memset( h, 0, 16 );
 8013d0a:	4601      	mov	r1, r0
    size_t olen = 0;
 8013d0c:	9009      	str	r0, [sp, #36]	; 0x24
    memset( h, 0, 16 );
 8013d0e:	4622      	mov	r2, r4
 8013d10:	a80a      	add	r0, sp, #40	; 0x28
 8013d12:	f00e fb0c 	bl	802232e <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8013d16:	ab09      	add	r3, sp, #36	; 0x24
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	ab0a      	add	r3, sp, #40	; 0x28
 8013d1c:	4622      	mov	r2, r4
 8013d1e:	4619      	mov	r1, r3
 8013d20:	4650      	mov	r0, sl
 8013d22:	f7fb fff1 	bl	800fd08 <mbedtls_cipher_update>
 8013d26:	4683      	mov	fp, r0
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	f040 8086 	bne.w	8013e3a <mbedtls_gcm_setkey+0x180>
 8013d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013d32:	ba0b      	rev	r3, r1
 8013d34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d36:	4698      	mov	r8, r3
 8013d38:	ba0b      	rev	r3, r1
 8013d3a:	4699      	mov	r9, r3
 8013d3c:	ba23      	rev	r3, r4
 8013d3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013d40:	9302      	str	r3, [sp, #8]
 8013d42:	ba23      	rev	r3, r4
 8013d44:	9303      	str	r3, [sp, #12]
    ctx->HL[8] = vl;
 8013d46:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    ctx->HH[8] = vh;
 8013d4a:	4642      	mov	r2, r8
    ctx->HL[8] = vl;
 8013d4c:	e9ca 3420 	strd	r3, r4, [sl, #128]	; 0x80
    ctx->HH[8] = vh;
 8013d50:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8013d54:	464b      	mov	r3, r9
 8013d56:	e9c4 2300 	strd	r2, r3, [r4]
    ctx->HH[0] = 0;
 8013d5a:	2500      	movs	r5, #0
 8013d5c:	2400      	movs	r4, #0
 8013d5e:	e9ca 4530 	strd	r4, r5, [sl, #192]	; 0xc0
    ctx->HL[0] = 0;
 8013d62:	e9ca 4510 	strd	r4, r5, [sl, #64]	; 0x40
 8013d66:	2603      	movs	r6, #3
    for( i = 4; i > 0; i >>= 1 )
 8013d68:	2704      	movs	r7, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8013d6a:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 8013d6e:	9b02      	ldr	r3, [sp, #8]
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8013d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8013d74:	f003 0e01 	and.w	lr, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8013d78:	4643      	mov	r3, r8
 8013d7a:	0849      	lsrs	r1, r1, #1
 8013d7c:	ea4f 0030 	mov.w	r0, r0, rrx
 8013d80:	2400      	movs	r4, #0
 8013d82:	07dd      	lsls	r5, r3, #31
 8013d84:	ea40 0204 	orr.w	r2, r0, r4
 8013d88:	ea41 0305 	orr.w	r3, r1, r5
 8013d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8013d90:	4642      	mov	r2, r8
 8013d92:	464b      	mov	r3, r9
 8013d94:	085b      	lsrs	r3, r3, #1
 8013d96:	ea4f 0232 	mov.w	r2, r2, rrx
 8013d9a:	fb0c f90e 	mul.w	r9, ip, lr
 8013d9e:	ea82 0004 	eor.w	r0, r2, r4
 8013da2:	ea83 0109 	eor.w	r1, r3, r9
        ctx->HL[i] = vl;
 8013da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013daa:	eb0a 04c7 	add.w	r4, sl, r7, lsl #3
 8013dae:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    for( i = 4; i > 0; i >>= 1 )
 8013db2:	3e01      	subs	r6, #1
        ctx->HH[i] = vh;
 8013db4:	4602      	mov	r2, r0
 8013db6:	460b      	mov	r3, r1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8013db8:	4680      	mov	r8, r0
 8013dba:	4689      	mov	r9, r1
        ctx->HH[i] = vh;
 8013dbc:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
    for( i = 4; i > 0; i >>= 1 )
 8013dc0:	ea4f 0767 	mov.w	r7, r7, asr #1
 8013dc4:	d1d3      	bne.n	8013d6e <mbedtls_gcm_setkey+0xb4>
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8013dc6:	f10a 0340 	add.w	r3, sl, #64	; 0x40
    for( i = 4; i > 0; i >>= 1 )
 8013dca:	2603      	movs	r6, #3
    for( i = 2; i <= 8; i *= 2 )
 8013dcc:	2402      	movs	r4, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8013dce:	9307      	str	r3, [sp, #28]
 8013dd0:	f10a 0cc0 	add.w	ip, sl, #192	; 0xc0
 8013dd4:	9b07      	ldr	r3, [sp, #28]
 8013dd6:	00e7      	lsls	r7, r4, #3
 8013dd8:	19d9      	adds	r1, r3, r7
 8013dda:	eb0c 0307 	add.w	r3, ip, r7
        vh = *HiH;
 8013dde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013de2:	e9cd 8902 	strd	r8, r9, [sp, #8]
        vl = *HiL;
 8013de6:	e9d1 8900 	ldrd	r8, r9, [r1]
 8013dea:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8013dee:	f10a 0048 	add.w	r0, sl, #72	; 0x48
 8013df2:	f103 0508 	add.w	r5, r3, #8
 8013df6:	441f      	add	r7, r3
            HiH[j] = vh ^ ctx->HH[j];
 8013df8:	e9d0 2320 	ldrd	r2, r3, [r0, #128]	; 0x80
 8013dfc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013e00:	ea88 0802 	eor.w	r8, r8, r2
 8013e04:	ea89 0903 	eor.w	r9, r9, r3
 8013e08:	4642      	mov	r2, r8
 8013e0a:	464b      	mov	r3, r9
 8013e0c:	e8e5 2302 	strd	r2, r3, [r5], #8
            HiL[j] = vl ^ ctx->HL[j];
 8013e10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013e14:	e9d0 2300 	ldrd	r2, r3, [r0]
 8013e18:	ea88 0802 	eor.w	r8, r8, r2
 8013e1c:	ea89 0903 	eor.w	r9, r9, r3
 8013e20:	4642      	mov	r2, r8
 8013e22:	464b      	mov	r3, r9
        for( j = 1; j < i; j++ )
 8013e24:	42bd      	cmp	r5, r7
 8013e26:	4686      	mov	lr, r0
            HiL[j] = vl ^ ctx->HL[j];
 8013e28:	e9e1 2302 	strd	r2, r3, [r1, #8]!
 8013e2c:	f100 0008 	add.w	r0, r0, #8
        for( j = 1; j < i; j++ )
 8013e30:	d1e2      	bne.n	8013df8 <mbedtls_gcm_setkey+0x13e>
    for( i = 2; i <= 8; i *= 2 )
 8013e32:	3e01      	subs	r6, #1
 8013e34:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013e38:	d1cc      	bne.n	8013dd4 <mbedtls_gcm_setkey+0x11a>
}
 8013e3a:	4658      	mov	r0, fp
 8013e3c:	b00f      	add	sp, #60	; 0x3c
 8013e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8013e42:	f06f 0b13 	mvn.w	fp, #19
 8013e46:	e7f8      	b.n	8013e3a <mbedtls_gcm_setkey+0x180>

08013e48 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8013e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e4c:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8013e4e:	f04f 0800 	mov.w	r8, #0
{
 8013e52:	4604      	mov	r4, r0
 8013e54:	468b      	mov	fp, r1
 8013e56:	4617      	mov	r7, r2
 8013e58:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    size_t use_len, olen = 0;
 8013e5c:	f8cd 8014 	str.w	r8, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8013e60:	461d      	mov	r5, r3
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	f000 8095 	beq.w	8013f92 <mbedtls_gcm_starts+0x14a>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8013e68:	f500 76b0 	add.w	r6, r0, #352	; 0x160
 8013e6c:	2210      	movs	r2, #16
 8013e6e:	4641      	mov	r1, r8
 8013e70:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8013e72:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8013e76:	f00e fa5a 	bl	802232e <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8013e7a:	4641      	mov	r1, r8
 8013e7c:	2210      	movs	r2, #16
 8013e7e:	4650      	mov	r0, sl
 8013e80:	f00e fa55 	bl	802232e <memset>

    ctx->mode = mode;
    ctx->len = 0;
 8013e84:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 8013e88:	2000      	movs	r0, #0
 8013e8a:	2100      	movs	r1, #0
    ctx->mode = mode;
 8013e8c:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->add_len = 0;

    if( iv_len == 12 )
 8013e90:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 8013e92:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 8013e96:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8013e9a:	e9c3 0100 	strd	r0, r1, [r3]
    if( iv_len == 12 )
 8013e9e:	d11f      	bne.n	8013ee0 <mbedtls_gcm_starts+0x98>
    {
        memcpy( ctx->y, iv, iv_len );
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6073      	str	r3, [r6, #4]
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
 8013eae:	2301      	movs	r3, #1
 8013eb0:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8013eb4:	ab05      	add	r3, sp, #20
 8013eb6:	9300      	str	r3, [sp, #0]
 8013eb8:	4631      	mov	r1, r6
 8013eba:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8013ebe:	2210      	movs	r2, #16
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f7fb ff21 	bl	800fd08 <mbedtls_cipher_update>
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	b930      	cbnz	r0, 8013ed8 <mbedtls_gcm_starts+0x90>
      ( (uint64_t) add_len ) >> 61 != 0 )
 8013eca:	f8c4 9148 	str.w	r9, [r4, #328]	; 0x148
 8013ece:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8013ed2:	f1b9 0f00 	cmp.w	r9, #0
 8013ed6:	d142      	bne.n	8013f5e <mbedtls_gcm_starts+0x116>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 8013ed8:	4630      	mov	r0, r6
 8013eda:	b00b      	add	sp, #44	; 0x2c
 8013edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8013ee0:	00eb      	lsls	r3, r5, #3
 8013ee2:	0e1a      	lsrs	r2, r3, #24
        memset( work_buf, 0x00, 16 );
 8013ee4:	f10d 0b18 	add.w	fp, sp, #24
 8013ee8:	f8cd 8018 	str.w	r8, [sp, #24]
 8013eec:	e9cb 8801 	strd	r8, r8, [fp, #4]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8013ef0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8013ef4:	0c1a      	lsrs	r2, r3, #16
 8013ef6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8013efa:	0a1a      	lsrs	r2, r3, #8
 8013efc:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8013f00:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8013f04:	46b0      	mov	r8, r6
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8013f06:	2d10      	cmp	r5, #16
 8013f08:	462b      	mov	r3, r5
 8013f0a:	bf28      	it	cs
 8013f0c:	2310      	movcs	r3, #16
 8013f0e:	f204 115f 	addw	r1, r4, #351	; 0x15f
 8013f12:	463a      	mov	r2, r7
 8013f14:	eb03 0c07 	add.w	ip, r3, r7
                ctx->y[i] ^= p[i];
 8013f18:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013f1c:	f811 ef01 	ldrb.w	lr, [r1, #1]!
            for( i = 0; i < use_len; i++ )
 8013f20:	4594      	cmp	ip, r2
                ctx->y[i] ^= p[i];
 8013f22:	ea80 000e 	eor.w	r0, r0, lr
 8013f26:	7008      	strb	r0, [r1, #0]
            for( i = 0; i < use_len; i++ )
 8013f28:	d1f6      	bne.n	8013f18 <mbedtls_gcm_starts+0xd0>
            gcm_mult( ctx, ctx->y, ctx->y );
 8013f2a:	4632      	mov	r2, r6
 8013f2c:	4631      	mov	r1, r6
 8013f2e:	4620      	mov	r0, r4
 8013f30:	9303      	str	r3, [sp, #12]
 8013f32:	f7ff fe03 	bl	8013b3c <gcm_mult>
            p += use_len;
 8013f36:	9b03      	ldr	r3, [sp, #12]
        while( iv_len > 0 )
 8013f38:	1aed      	subs	r5, r5, r3
            p += use_len;
 8013f3a:	441f      	add	r7, r3
        while( iv_len > 0 )
 8013f3c:	d1e3      	bne.n	8013f06 <mbedtls_gcm_starts+0xbe>
 8013f3e:	4643      	mov	r3, r8
            ctx->y[i] ^= work_buf[i];
 8013f40:	781a      	ldrb	r2, [r3, #0]
 8013f42:	f81b 1005 	ldrb.w	r1, [fp, r5]
        for( i = 0; i < 16; i++ )
 8013f46:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 8013f48:	404a      	eors	r2, r1
        for( i = 0; i < 16; i++ )
 8013f4a:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 8013f4c:	f803 2b01 	strb.w	r2, [r3], #1
        for( i = 0; i < 16; i++ )
 8013f50:	d1f6      	bne.n	8013f40 <mbedtls_gcm_starts+0xf8>
        gcm_mult( ctx, ctx->y, ctx->y );
 8013f52:	4632      	mov	r2, r6
 8013f54:	4631      	mov	r1, r6
 8013f56:	4620      	mov	r0, r4
 8013f58:	f7ff fdf0 	bl	8013b3c <gcm_mult>
 8013f5c:	e7aa      	b.n	8013eb4 <mbedtls_gcm_starts+0x6c>
        use_len = ( add_len < 16 ) ? add_len : 16;
 8013f5e:	464f      	mov	r7, r9
 8013f60:	2f10      	cmp	r7, #16
 8013f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f64:	bf28      	it	cs
 8013f66:	2710      	movcs	r7, #16
 8013f68:	f204 126f 	addw	r2, r4, #367	; 0x16f
 8013f6c:	19dd      	adds	r5, r3, r7
            ctx->buf[i] ^= p[i];
 8013f6e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013f72:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        for( i = 0; i < use_len; i++ )
 8013f76:	429d      	cmp	r5, r3
            ctx->buf[i] ^= p[i];
 8013f78:	ea81 0100 	eor.w	r1, r1, r0
 8013f7c:	7011      	strb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
 8013f7e:	d1f6      	bne.n	8013f6e <mbedtls_gcm_starts+0x126>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8013f80:	4652      	mov	r2, sl
 8013f82:	4651      	mov	r1, sl
 8013f84:	4620      	mov	r0, r4
 8013f86:	f7ff fdd9 	bl	8013b3c <gcm_mult>
        add_len -= use_len;
 8013f8a:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
 8013f8e:	9514      	str	r5, [sp, #80]	; 0x50
 8013f90:	e79f      	b.n	8013ed2 <mbedtls_gcm_starts+0x8a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8013f92:	f06f 0613 	mvn.w	r6, #19
 8013f96:	e79f      	b.n	8013ed8 <mbedtls_gcm_starts+0x90>

08013f98 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8013f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9c:	461f      	mov	r7, r3
 8013f9e:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8013fa0:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 8013fa2:	4297      	cmp	r7, r2
{
 8013fa4:	4604      	mov	r4, r0
 8013fa6:	460d      	mov	r5, r1
 8013fa8:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 8013faa:	9305      	str	r3, [sp, #20]
    if( output > input && (size_t) ( output - input ) < length )
 8013fac:	d902      	bls.n	8013fb4 <mbedtls_gcm_update+0x1c>
 8013fae:	1abb      	subs	r3, r7, r2
 8013fb0:	428b      	cmp	r3, r1
 8013fb2:	d371      	bcc.n	8014098 <mbedtls_gcm_update+0x100>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8013fb4:	f504 7ca0 	add.w	ip, r4, #320	; 0x140
 8013fb8:	e9dc ab00 	ldrd	sl, fp, [ip]
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	eb1a 0805 	adds.w	r8, sl, r5
 8013fc2:	eb5b 0903 	adcs.w	r9, fp, r3
 8013fc6:	f04f 0000 	mov.w	r0, #0
 8013fca:	f04f 0100 	mov.w	r1, #0
 8013fce:	bf24      	itt	cs
 8013fd0:	2001      	movcs	r0, #1
 8013fd2:	2100      	movcs	r1, #0
 8013fd4:	ea50 0301 	orrs.w	r3, r0, r1
 8013fd8:	d15e      	bne.n	8014098 <mbedtls_gcm_update+0x100>
 8013fda:	230f      	movs	r3, #15
 8013fdc:	f06f 021f 	mvn.w	r2, #31
 8013fe0:	454b      	cmp	r3, r9
 8013fe2:	bf08      	it	eq
 8013fe4:	4542      	cmpeq	r2, r8
 8013fe6:	d357      	bcc.n	8014098 <mbedtls_gcm_update+0x100>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8013fe8:	e9cc 8900 	strd	r8, r9, [ip]
 8013fec:	f204 1a6b 	addw	sl, r4, #363	; 0x16b

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8013ff0:	f10d 0918 	add.w	r9, sp, #24
 8013ff4:	f504 7bb0 	add.w	fp, r4, #352	; 0x160
    while( length > 0 )
 8013ff8:	b91d      	cbnz	r5, 8014002 <mbedtls_gcm_update+0x6a>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 8013ffa:	4628      	mov	r0, r5
}
 8013ffc:	b00b      	add	sp, #44	; 0x2c
 8013ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 8014002:	2d10      	cmp	r5, #16
 8014004:	46a8      	mov	r8, r5
 8014006:	f204 126f 	addw	r2, r4, #367	; 0x16f
 801400a:	bf28      	it	cs
 801400c:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
 8014010:	7813      	ldrb	r3, [r2, #0]
 8014012:	3301      	adds	r3, #1
 8014014:	b2db      	uxtb	r3, r3
 8014016:	f802 3901 	strb.w	r3, [r2], #-1
 801401a:	b90b      	cbnz	r3, 8014020 <mbedtls_gcm_update+0x88>
        for( i = 16; i > 12; i-- )
 801401c:	4552      	cmp	r2, sl
 801401e:	d1f7      	bne.n	8014010 <mbedtls_gcm_update+0x78>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8014020:	ab05      	add	r3, sp, #20
 8014022:	9300      	str	r3, [sp, #0]
 8014024:	2210      	movs	r2, #16
 8014026:	464b      	mov	r3, r9
 8014028:	4659      	mov	r1, fp
 801402a:	4620      	mov	r0, r4
 801402c:	f7fb fe6c 	bl	800fd08 <mbedtls_cipher_update>
 8014030:	2800      	cmp	r0, #0
 8014032:	d1e3      	bne.n	8013ffc <mbedtls_gcm_update+0x64>
 8014034:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8014038:	4631      	mov	r1, r6
 801403a:	9303      	str	r3, [sp, #12]
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 801403c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014040:	b93a      	cbnz	r2, 8014052 <mbedtls_gcm_update+0xba>
                ctx->buf[i] ^= p[i];
 8014042:	f893 c000 	ldrb.w	ip, [r3]
 8014046:	f891 e000 	ldrb.w	lr, [r1]
 801404a:	ea8c 0c0e 	eor.w	ip, ip, lr
 801404e:	f883 c000 	strb.w	ip, [r3]
            out_p[i] = ectr[i] ^ p[i];
 8014052:	f811 eb01 	ldrb.w	lr, [r1], #1
 8014056:	f819 c000 	ldrb.w	ip, [r9, r0]
 801405a:	ea8e 0c0c 	eor.w	ip, lr, ip
 801405e:	f807 c000 	strb.w	ip, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8014062:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014066:	2a01      	cmp	r2, #1
                ctx->buf[i] ^= out_p[i];
 8014068:	bf08      	it	eq
 801406a:	f893 e000 	ldrbeq.w	lr, [r3]
        for( i = 0; i < use_len; i++ )
 801406e:	f100 0001 	add.w	r0, r0, #1
                ctx->buf[i] ^= out_p[i];
 8014072:	bf04      	itt	eq
 8014074:	ea8c 0c0e 	eoreq.w	ip, ip, lr
 8014078:	f883 c000 	strbeq.w	ip, [r3]
        for( i = 0; i < use_len; i++ )
 801407c:	4580      	cmp	r8, r0
 801407e:	f103 0301 	add.w	r3, r3, #1
 8014082:	d1db      	bne.n	801403c <mbedtls_gcm_update+0xa4>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8014084:	9a03      	ldr	r2, [sp, #12]
 8014086:	4620      	mov	r0, r4
 8014088:	4611      	mov	r1, r2
 801408a:	f7ff fd57 	bl	8013b3c <gcm_mult>
        length -= use_len;
 801408e:	eba5 0508 	sub.w	r5, r5, r8
        p += use_len;
 8014092:	4446      	add	r6, r8
        out_p += use_len;
 8014094:	4447      	add	r7, r8
 8014096:	e7af      	b.n	8013ff8 <mbedtls_gcm_update+0x60>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8014098:	f06f 0013 	mvn.w	r0, #19
 801409c:	e7ae      	b.n	8013ffc <mbedtls_gcm_update+0x64>

0801409e <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 801409e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140a2:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80140a4:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 80140a8:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80140ac:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80140ae:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
    uint64_t orig_len = ctx->len * 8;
 80140b2:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 80140b6:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80140b8:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80140bc:	00cf      	lsls	r7, r1, #3
 80140be:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 80140c2:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 80140c4:	1f13      	subs	r3, r2, #4
 80140c6:	2b0c      	cmp	r3, #12
{
 80140c8:	4681      	mov	r9, r0
 80140ca:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 80140cc:	d857      	bhi.n	801417e <mbedtls_gcm_finish+0xe0>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 80140ce:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 80140d2:	4640      	mov	r0, r8
 80140d4:	f00e f907 	bl	80222e6 <memcpy>

    if( orig_len || orig_add_len )
 80140d8:	ea54 0305 	orrs.w	r3, r4, r5
 80140dc:	d106      	bne.n	80140ec <mbedtls_gcm_finish+0x4e>
 80140de:	ea56 0307 	orrs.w	r3, r6, r7
 80140e2:	d103      	bne.n	80140ec <mbedtls_gcm_finish+0x4e>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 80140e4:	2000      	movs	r0, #0
}
 80140e6:	b004      	add	sp, #16
 80140e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80140ec:	0e3b      	lsrs	r3, r7, #24
 80140ee:	f88d 3000 	strb.w	r3, [sp]
 80140f2:	0c3b      	lsrs	r3, r7, #16
 80140f4:	f88d 3001 	strb.w	r3, [sp, #1]
 80140f8:	0a3b      	lsrs	r3, r7, #8
 80140fa:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80140fe:	0e33      	lsrs	r3, r6, #24
 8014100:	f88d 3004 	strb.w	r3, [sp, #4]
 8014104:	0c33      	lsrs	r3, r6, #16
 8014106:	f88d 3005 	strb.w	r3, [sp, #5]
 801410a:	0a33      	lsrs	r3, r6, #8
 801410c:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8014110:	0e2b      	lsrs	r3, r5, #24
 8014112:	f88d 3008 	strb.w	r3, [sp, #8]
 8014116:	0c2b      	lsrs	r3, r5, #16
 8014118:	f88d 3009 	strb.w	r3, [sp, #9]
 801411c:	0a2b      	lsrs	r3, r5, #8
 801411e:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8014122:	0e23      	lsrs	r3, r4, #24
 8014124:	f88d 300c 	strb.w	r3, [sp, #12]
 8014128:	0c23      	lsrs	r3, r4, #16
 801412a:	f88d 300d 	strb.w	r3, [sp, #13]
 801412e:	f88d 400f 	strb.w	r4, [sp, #15]
 8014132:	0a23      	lsrs	r3, r4, #8
 8014134:	f509 74b8 	add.w	r4, r9, #368	; 0x170
 8014138:	f88d 300e 	strb.w	r3, [sp, #14]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 801413c:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8014140:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8014144:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8014148:	4622      	mov	r2, r4
        for( i = 0; i < 16; i++ )
 801414a:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 801414c:	7811      	ldrb	r1, [r2, #0]
 801414e:	f81d 0003 	ldrb.w	r0, [sp, r3]
        for( i = 0; i < 16; i++ )
 8014152:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 8014154:	4041      	eors	r1, r0
        for( i = 0; i < 16; i++ )
 8014156:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 8014158:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < 16; i++ )
 801415c:	d1f6      	bne.n	801414c <mbedtls_gcm_finish+0xae>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 801415e:	4621      	mov	r1, r4
 8014160:	4622      	mov	r2, r4
 8014162:	4648      	mov	r0, r9
 8014164:	f7ff fcea 	bl	8013b3c <gcm_mult>
 8014168:	44c2      	add	sl, r8
 801416a:	4641      	mov	r1, r8
            tag[i] ^= ctx->buf[i];
 801416c:	780b      	ldrb	r3, [r1, #0]
 801416e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8014172:	4053      	eors	r3, r2
 8014174:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < tag_len; i++ )
 8014178:	458a      	cmp	sl, r1
 801417a:	d1f7      	bne.n	801416c <mbedtls_gcm_finish+0xce>
 801417c:	e7b2      	b.n	80140e4 <mbedtls_gcm_finish+0x46>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 801417e:	f06f 0013 	mvn.w	r0, #19
 8014182:	e7b0      	b.n	80140e6 <mbedtls_gcm_finish+0x48>

08014184 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8014184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014188:	4617      	mov	r7, r2
 801418a:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 801418c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801418e:	9301      	str	r3, [sp, #4]
 8014190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8014196:	4604      	mov	r4, r0
 8014198:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
 801419c:	e9dd 650f 	ldrd	r6, r5, [sp, #60]	; 0x3c
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80141a0:	f7ff fe52 	bl	8013e48 <mbedtls_gcm_starts>
 80141a4:	b970      	cbnz	r0, 80141c4 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 80141a6:	464b      	mov	r3, r9
 80141a8:	4642      	mov	r2, r8
 80141aa:	4639      	mov	r1, r7
 80141ac:	4620      	mov	r0, r4
 80141ae:	f7ff fef3 	bl	8013f98 <mbedtls_gcm_update>
 80141b2:	b938      	cbnz	r0, 80141c4 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80141b4:	4632      	mov	r2, r6
 80141b6:	4629      	mov	r1, r5
 80141b8:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80141ba:	b003      	add	sp, #12
 80141bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80141c0:	f7ff bf6d 	b.w	801409e <mbedtls_gcm_finish>
}
 80141c4:	b003      	add	sp, #12
 80141c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080141ca <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80141ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141cc:	b08d      	sub	sp, #52	; 0x34
 80141ce:	460e      	mov	r6, r1
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80141d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80141d2:	9103      	str	r1, [sp, #12]
 80141d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 80141d6:	9f15      	ldr	r7, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80141d8:	9102      	str	r1, [sp, #8]
 80141da:	9912      	ldr	r1, [sp, #72]	; 0x48
{
 80141dc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80141de:	9404      	str	r4, [sp, #16]
 80141e0:	ad08      	add	r5, sp, #32
 80141e2:	e9cd 3100 	strd	r3, r1, [sp]
 80141e6:	e9cd 7505 	strd	r7, r5, [sp, #20]
 80141ea:	4613      	mov	r3, r2
 80141ec:	2100      	movs	r1, #0
 80141ee:	4632      	mov	r2, r6
 80141f0:	f7ff ffc8 	bl	8014184 <mbedtls_gcm_crypt_and_tag>
 80141f4:	b948      	cbnz	r0, 801420a <mbedtls_gcm_auth_decrypt+0x40>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80141f6:	4603      	mov	r3, r0
 80141f8:	42bb      	cmp	r3, r7
 80141fa:	d108      	bne.n	801420e <mbedtls_gcm_auth_decrypt+0x44>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80141fc:	b128      	cbz	r0, 801420a <mbedtls_gcm_auth_decrypt+0x40>
 80141fe:	4426      	add	r6, r4
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014200:	2300      	movs	r3, #0
 8014202:	42b4      	cmp	r4, r6
 8014204:	d10a      	bne.n	801421c <mbedtls_gcm_auth_decrypt+0x52>
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8014206:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 801420a:	b00d      	add	sp, #52	; 0x34
 801420c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 801420e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014210:	5ce9      	ldrb	r1, [r5, r3]
 8014212:	5cd2      	ldrb	r2, [r2, r3]
 8014214:	404a      	eors	r2, r1
 8014216:	4310      	orrs	r0, r2
    for( diff = 0, i = 0; i < tag_len; i++ )
 8014218:	3301      	adds	r3, #1
 801421a:	e7ed      	b.n	80141f8 <mbedtls_gcm_auth_decrypt+0x2e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801421c:	7023      	strb	r3, [r4, #0]
 801421e:	3401      	adds	r4, #1
 8014220:	e7ef      	b.n	8014202 <mbedtls_gcm_auth_decrypt+0x38>

08014222 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 8014222:	b510      	push	{r4, lr}
 8014224:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8014226:	f7fb fd0f 	bl	800fc48 <mbedtls_cipher_free>
 801422a:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801422e:	2200      	movs	r2, #0
 8014230:	429c      	cmp	r4, r3
 8014232:	d100      	bne.n	8014236 <mbedtls_gcm_free+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
}
 8014234:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014236:	7022      	strb	r2, [r4, #0]
 8014238:	3401      	adds	r4, #1
 801423a:	e7f9      	b.n	8014230 <mbedtls_gcm_free+0xe>

0801423c <mbedtls_hmac_drbg_free.part.0>:
}

/*
 * Free an HMAC_DRBG context
 */
void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
 801423c:	b510      	push	{r4, lr}
 801423e:	4604      	mov	r4, r0
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_md_free( &ctx->md_ctx );
 8014240:	f000 f92e 	bl	80144a0 <mbedtls_md_free>
 8014244:	f104 0364 	add.w	r3, r4, #100	; 0x64
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014248:	2200      	movs	r2, #0
 801424a:	429c      	cmp	r4, r3
 801424c:	d100      	bne.n	8014250 <mbedtls_hmac_drbg_free.part.0+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
}
 801424e:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014250:	7022      	strb	r2, [r4, #0]
 8014252:	3401      	adds	r4, #1
 8014254:	e7f9      	b.n	801424a <mbedtls_hmac_drbg_free.part.0+0xe>

08014256 <mbedtls_hmac_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
 8014256:	2264      	movs	r2, #100	; 0x64
 8014258:	2100      	movs	r1, #0
 801425a:	f00e b868 	b.w	802232e <memset>

0801425e <mbedtls_hmac_drbg_update>:
{
 801425e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014262:	4604      	mov	r4, r0
 8014264:	b092      	sub	sp, #72	; 0x48
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014266:	6800      	ldr	r0, [r0, #0]
{
 8014268:	4689      	mov	r9, r1
 801426a:	4692      	mov	sl, r2
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 801426c:	f000 fa56 	bl	801471c <mbedtls_md_get_size>
 8014270:	4606      	mov	r6, r0
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 8014272:	f1b9 0f00 	cmp.w	r9, #0
 8014276:	d012      	beq.n	801429e <mbedtls_hmac_drbg_update+0x40>
 8014278:	f1ba 0f00 	cmp.w	sl, #0
 801427c:	bf14      	ite	ne
 801427e:	2502      	movne	r5, #2
 8014280:	2501      	moveq	r5, #1
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 8014282:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8014286:	2300      	movs	r3, #0
 8014288:	f808 3d44 	strb.w	r3, [r8, #-68]!
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 801428c:	f104 070c 	add.w	r7, r4, #12
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 8014290:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014294:	42ab      	cmp	r3, r5
 8014296:	d304      	bcc.n	80142a2 <mbedtls_hmac_drbg_update+0x44>
}
 8014298:	b012      	add	sp, #72	; 0x48
 801429a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 801429e:	2501      	movs	r5, #1
 80142a0:	e7ef      	b.n	8014282 <mbedtls_hmac_drbg_update+0x24>
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 80142a2:	4620      	mov	r0, r4
 80142a4:	f000 fa16 	bl	80146d4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80142a8:	4632      	mov	r2, r6
 80142aa:	4639      	mov	r1, r7
 80142ac:	4620      	mov	r0, r4
 80142ae:	f000 f9d5 	bl	801465c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_update( &ctx->md_ctx, sep, 1 );
 80142b2:	2201      	movs	r2, #1
 80142b4:	4641      	mov	r1, r8
 80142b6:	4620      	mov	r0, r4
 80142b8:	f000 f9d0 	bl	801465c <mbedtls_md_hmac_update>
        if( rounds == 2 )
 80142bc:	2d02      	cmp	r5, #2
 80142be:	d104      	bne.n	80142ca <mbedtls_hmac_drbg_update+0x6c>
            mbedtls_md_hmac_update( &ctx->md_ctx, additional, add_len );
 80142c0:	4652      	mov	r2, sl
 80142c2:	4649      	mov	r1, r9
 80142c4:	4620      	mov	r0, r4
 80142c6:	f000 f9c9 	bl	801465c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, K );
 80142ca:	a902      	add	r1, sp, #8
 80142cc:	4620      	mov	r0, r4
 80142ce:	f000 f9d5 	bl	801467c <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len );
 80142d2:	4632      	mov	r2, r6
 80142d4:	a902      	add	r1, sp, #8
 80142d6:	4620      	mov	r0, r4
 80142d8:	f000 f960 	bl	801459c <mbedtls_md_hmac_starts>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80142dc:	4632      	mov	r2, r6
 80142de:	4639      	mov	r1, r7
 80142e0:	4620      	mov	r0, r4
 80142e2:	f000 f9bb 	bl	801465c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 80142e6:	4639      	mov	r1, r7
 80142e8:	4620      	mov	r0, r4
 80142ea:	f000 f9c7 	bl	801467c <mbedtls_md_hmac_finish>
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 80142ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80142f2:	3301      	adds	r3, #1
 80142f4:	f88d 3004 	strb.w	r3, [sp, #4]
 80142f8:	e7ca      	b.n	8014290 <mbedtls_hmac_drbg_update+0x32>

080142fa <mbedtls_hmac_drbg_seed_buf>:
{
 80142fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142fe:	4690      	mov	r8, r2
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 8014300:	2201      	movs	r2, #1
{
 8014302:	4604      	mov	r4, r0
 8014304:	460f      	mov	r7, r1
 8014306:	4699      	mov	r9, r3
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 8014308:	f000 f8ee 	bl	80144e8 <mbedtls_md_setup>
 801430c:	4605      	mov	r5, r0
 801430e:	b9b0      	cbnz	r0, 801433e <mbedtls_hmac_drbg_seed_buf+0x44>
    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, mbedtls_md_get_size( md_info ) );
 8014310:	4638      	mov	r0, r7
 8014312:	f000 fa03 	bl	801471c <mbedtls_md_get_size>
 8014316:	f104 060c 	add.w	r6, r4, #12
 801431a:	4602      	mov	r2, r0
 801431c:	4631      	mov	r1, r6
 801431e:	4620      	mov	r0, r4
 8014320:	f000 f93c 	bl	801459c <mbedtls_md_hmac_starts>
    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
 8014324:	4638      	mov	r0, r7
 8014326:	f000 f9f9 	bl	801471c <mbedtls_md_get_size>
 801432a:	2101      	movs	r1, #1
 801432c:	4602      	mov	r2, r0
 801432e:	4630      	mov	r0, r6
 8014330:	f00d fffd 	bl	802232e <memset>
    mbedtls_hmac_drbg_update( ctx, data, data_len );
 8014334:	464a      	mov	r2, r9
 8014336:	4641      	mov	r1, r8
 8014338:	4620      	mov	r0, r4
 801433a:	f7ff ff90 	bl	801425e <mbedtls_hmac_drbg_update>
}
 801433e:	4628      	mov	r0, r5
 8014340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014344 <mbedtls_hmac_drbg_reseed>:
{
 8014344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8014348:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 801434c:	b0e0      	sub	sp, #384	; 0x180
 801434e:	4604      	mov	r4, r0
 8014350:	4688      	mov	r8, r1
 8014352:	4616      	mov	r6, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8014354:	d828      	bhi.n	80143a8 <mbedtls_hmac_drbg_reseed+0x64>
        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
 8014356:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8014358:	18ab      	adds	r3, r5, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 801435a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 801435e:	d823      	bhi.n	80143a8 <mbedtls_hmac_drbg_reseed+0x64>
    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
 8014360:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8014364:	2100      	movs	r1, #0
 8014366:	4668      	mov	r0, sp
 8014368:	f00d ffe1 	bl	802232e <memset>
    if( ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) != 0 )
 801436c:	462a      	mov	r2, r5
 801436e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014370:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014372:	4669      	mov	r1, sp
 8014374:	4798      	blx	r3
 8014376:	4605      	mov	r5, r0
 8014378:	b9c8      	cbnz	r0, 80143ae <mbedtls_hmac_drbg_reseed+0x6a>
    seedlen = ctx->entropy_len;
 801437a:	6d27      	ldr	r7, [r4, #80]	; 0x50
    if( additional != NULL && len != 0 )
 801437c:	f1b8 0f00 	cmp.w	r8, #0
 8014380:	d007      	beq.n	8014392 <mbedtls_hmac_drbg_reseed+0x4e>
 8014382:	b136      	cbz	r6, 8014392 <mbedtls_hmac_drbg_reseed+0x4e>
        memcpy( seed + seedlen, additional, len );
 8014384:	eb0d 0007 	add.w	r0, sp, r7
 8014388:	4632      	mov	r2, r6
 801438a:	4641      	mov	r1, r8
 801438c:	f00d ffab 	bl	80222e6 <memcpy>
        seedlen += len;
 8014390:	4437      	add	r7, r6
    mbedtls_hmac_drbg_update( ctx, seed, seedlen );
 8014392:	463a      	mov	r2, r7
 8014394:	4669      	mov	r1, sp
 8014396:	4620      	mov	r0, r4
 8014398:	f7ff ff61 	bl	801425e <mbedtls_hmac_drbg_update>
    ctx->reseed_counter = 1;
 801439c:	2301      	movs	r3, #1
 801439e:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80143a0:	4628      	mov	r0, r5
 80143a2:	b060      	add	sp, #384	; 0x180
 80143a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 80143a8:	f06f 0504 	mvn.w	r5, #4
 80143ac:	e7f8      	b.n	80143a0 <mbedtls_hmac_drbg_reseed+0x5c>
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
 80143ae:	f06f 0508 	mvn.w	r5, #8
 80143b2:	e7f5      	b.n	80143a0 <mbedtls_hmac_drbg_reseed+0x5c>

080143b4 <mbedtls_hmac_drbg_random_with_add>:
{
 80143b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b8:	4604      	mov	r4, r0
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80143ba:	6800      	ldr	r0, [r0, #0]
{
 80143bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80143be:	4616      	mov	r6, r2
 80143c0:	4688      	mov	r8, r1
 80143c2:	461f      	mov	r7, r3
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80143c4:	f000 f9aa 	bl	801471c <mbedtls_md_get_size>
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80143c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80143cc:	4682      	mov	sl, r0
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80143ce:	d843      	bhi.n	8014458 <mbedtls_hmac_drbg_random_with_add+0xa4>
    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
 80143d0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80143d4:	d843      	bhi.n	801445e <mbedtls_hmac_drbg_random_with_add+0xaa>
    if( ctx->f_entropy != NULL && /* For no-reseeding instances */
 80143d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80143d8:	b1db      	cbz	r3, 8014412 <mbedtls_hmac_drbg_random_with_add+0x5e>
 80143da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d003      	beq.n	80143e8 <mbedtls_hmac_drbg_random_with_add+0x34>
        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
 80143e0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80143e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80143e4:	429a      	cmp	r2, r3
 80143e6:	dd14      	ble.n	8014412 <mbedtls_hmac_drbg_random_with_add+0x5e>
        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 80143e8:	462a      	mov	r2, r5
 80143ea:	4639      	mov	r1, r7
 80143ec:	4620      	mov	r0, r4
 80143ee:	f7ff ffa9 	bl	8014344 <mbedtls_hmac_drbg_reseed>
 80143f2:	b960      	cbnz	r0, 801440e <mbedtls_hmac_drbg_random_with_add+0x5a>
        add_len = 0; /* VII.4 */
 80143f4:	4605      	mov	r5, r0
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80143f6:	f104 090c 	add.w	r9, r4, #12
    while( left != 0 )
 80143fa:	b9a6      	cbnz	r6, 8014426 <mbedtls_hmac_drbg_random_with_add+0x72>
    mbedtls_hmac_drbg_update( ctx, additional, add_len );
 80143fc:	4620      	mov	r0, r4
 80143fe:	462a      	mov	r2, r5
 8014400:	4639      	mov	r1, r7
 8014402:	f7ff ff2c 	bl	801425e <mbedtls_hmac_drbg_update>
    ctx->reseed_counter++;
 8014406:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014408:	3301      	adds	r3, #1
 801440a:	64e3      	str	r3, [r4, #76]	; 0x4c
    return( 0 );
 801440c:	4630      	mov	r0, r6
}
 801440e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( additional != NULL && add_len != 0 )
 8014412:	2f00      	cmp	r7, #0
 8014414:	d0ef      	beq.n	80143f6 <mbedtls_hmac_drbg_random_with_add+0x42>
 8014416:	2d00      	cmp	r5, #0
 8014418:	d0ed      	beq.n	80143f6 <mbedtls_hmac_drbg_random_with_add+0x42>
        mbedtls_hmac_drbg_update( ctx, additional, add_len );
 801441a:	462a      	mov	r2, r5
 801441c:	4639      	mov	r1, r7
 801441e:	4620      	mov	r0, r4
 8014420:	f7ff ff1d 	bl	801425e <mbedtls_hmac_drbg_update>
 8014424:	e7e7      	b.n	80143f6 <mbedtls_hmac_drbg_random_with_add+0x42>
        size_t use_len = left > md_len ? md_len : left;
 8014426:	4556      	cmp	r6, sl
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 8014428:	4620      	mov	r0, r4
        size_t use_len = left > md_len ? md_len : left;
 801442a:	46b3      	mov	fp, r6
 801442c:	bf28      	it	cs
 801442e:	46d3      	movcs	fp, sl
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 8014430:	f000 f950 	bl	80146d4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 8014434:	4652      	mov	r2, sl
 8014436:	4649      	mov	r1, r9
 8014438:	4620      	mov	r0, r4
 801443a:	f000 f90f 	bl	801465c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 801443e:	4649      	mov	r1, r9
 8014440:	4620      	mov	r0, r4
 8014442:	f000 f91b 	bl	801467c <mbedtls_md_hmac_finish>
        memcpy( out, ctx->V, use_len );
 8014446:	4640      	mov	r0, r8
 8014448:	465a      	mov	r2, fp
 801444a:	4649      	mov	r1, r9
 801444c:	f00d ff4b 	bl	80222e6 <memcpy>
        out += use_len;
 8014450:	44d8      	add	r8, fp
        left -= use_len;
 8014452:	eba6 060b 	sub.w	r6, r6, fp
 8014456:	e7d0      	b.n	80143fa <mbedtls_hmac_drbg_random_with_add+0x46>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
 8014458:	f06f 0002 	mvn.w	r0, #2
 801445c:	e7d7      	b.n	801440e <mbedtls_hmac_drbg_random_with_add+0x5a>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 801445e:	f06f 0004 	mvn.w	r0, #4
 8014462:	e7d4      	b.n	801440e <mbedtls_hmac_drbg_random_with_add+0x5a>

08014464 <mbedtls_hmac_drbg_random>:
{
 8014464:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 8014466:	2300      	movs	r3, #0
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	f7ff ffa3 	bl	80143b4 <mbedtls_hmac_drbg_random_with_add>
}
 801446e:	b003      	add	sp, #12
 8014470:	f85d fb04 	ldr.w	pc, [sp], #4

08014474 <mbedtls_hmac_drbg_free>:
    if( ctx == NULL )
 8014474:	b108      	cbz	r0, 801447a <mbedtls_hmac_drbg_free+0x6>
 8014476:	f7ff bee1 	b.w	801423c <mbedtls_hmac_drbg_free.part.0>
}
 801447a:	4770      	bx	lr

0801447c <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 801447c:	3803      	subs	r0, #3
 801447e:	b2c0      	uxtb	r0, r0
 8014480:	2805      	cmp	r0, #5
 8014482:	bf9d      	ittte	ls
 8014484:	4b02      	ldrls	r3, [pc, #8]	; (8014490 <mbedtls_md_info_from_type+0x14>)
 8014486:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 801448a:	69c0      	ldrls	r0, [r0, #28]
 801448c:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 801448e:	4770      	bx	lr
 8014490:	0802b660 	.word	0x0802b660

08014494 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8014494:	2300      	movs	r3, #0
 8014496:	6003      	str	r3, [r0, #0]
 8014498:	6043      	str	r3, [r0, #4]
 801449a:	6083      	str	r3, [r0, #8]
}
 801449c:	4770      	bx	lr
	...

080144a0 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80144a0:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80144a2:	4604      	mov	r4, r0
 80144a4:	b1b8      	cbz	r0, 80144d6 <mbedtls_md_free+0x36>
 80144a6:	6803      	ldr	r3, [r0, #0]
 80144a8:	b1ab      	cbz	r3, 80144d6 <mbedtls_md_free+0x36>
        return;

    if( ctx->md_ctx != NULL )
 80144aa:	6840      	ldr	r0, [r0, #4]
 80144ac:	b108      	cbz	r0, 80144b2 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 80144ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b0:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 80144b2:	68a3      	ldr	r3, [r4, #8]
 80144b4:	b153      	cbz	r3, 80144cc <mbedtls_md_free+0x2c>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 80144b6:	6822      	ldr	r2, [r4, #0]
 80144b8:	68d2      	ldr	r2, [r2, #12]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80144ba:	2100      	movs	r1, #0
 80144bc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80144c0:	4293      	cmp	r3, r2
 80144c2:	d109      	bne.n	80144d8 <mbedtls_md_free+0x38>
        mbedtls_free( ctx->hmac_ctx );
 80144c4:	4b07      	ldr	r3, [pc, #28]	; (80144e4 <mbedtls_md_free+0x44>)
 80144c6:	68a0      	ldr	r0, [r4, #8]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	4798      	blx	r3
 80144cc:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80144d0:	2200      	movs	r2, #0
 80144d2:	429c      	cmp	r4, r3
 80144d4:	d103      	bne.n	80144de <mbedtls_md_free+0x3e>
    }

    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
}
 80144d6:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80144d8:	7019      	strb	r1, [r3, #0]
 80144da:	3301      	adds	r3, #1
 80144dc:	e7f0      	b.n	80144c0 <mbedtls_md_free+0x20>
 80144de:	7022      	strb	r2, [r4, #0]
 80144e0:	3401      	adds	r4, #1
 80144e2:	e7f6      	b.n	80144d2 <mbedtls_md_free+0x32>
 80144e4:	200005a4 	.word	0x200005a4

080144e8 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80144e8:	b570      	push	{r4, r5, r6, lr}
 80144ea:	4604      	mov	r4, r0
 80144ec:	4616      	mov	r6, r2
    if( md_info == NULL || ctx == NULL )
 80144ee:	460d      	mov	r5, r1
 80144f0:	b1a1      	cbz	r1, 801451c <mbedtls_md_setup+0x34>
 80144f2:	b198      	cbz	r0, 801451c <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80144f4:	6a0b      	ldr	r3, [r1, #32]
 80144f6:	4798      	blx	r3
 80144f8:	6060      	str	r0, [r4, #4]
 80144fa:	b150      	cbz	r0, 8014512 <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80144fc:	b15e      	cbz	r6, 8014516 <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80144fe:	4b08      	ldr	r3, [pc, #32]	; (8014520 <mbedtls_md_setup+0x38>)
 8014500:	68e9      	ldr	r1, [r5, #12]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	2002      	movs	r0, #2
 8014506:	4798      	blx	r3
 8014508:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 801450a:	b920      	cbnz	r0, 8014516 <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 801450c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801450e:	6860      	ldr	r0, [r4, #4]
 8014510:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8014512:	4804      	ldr	r0, [pc, #16]	; (8014524 <mbedtls_md_setup+0x3c>)
 8014514:	e001      	b.n	801451a <mbedtls_md_setup+0x32>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8014516:	6025      	str	r5, [r4, #0]

    return( 0 );
 8014518:	2000      	movs	r0, #0
}
 801451a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801451c:	4802      	ldr	r0, [pc, #8]	; (8014528 <mbedtls_md_setup+0x40>)
 801451e:	e7fc      	b.n	801451a <mbedtls_md_setup+0x32>
 8014520:	200005a0 	.word	0x200005a0
 8014524:	ffffae80 	.word	0xffffae80
 8014528:	ffffaf00 	.word	0xffffaf00

0801452c <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
 801452c:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 801452e:	b130      	cbz	r0, 801453e <mbedtls_md_starts+0x12>
 8014530:	6803      	ldr	r3, [r0, #0]
 8014532:	b123      	cbz	r3, 801453e <mbedtls_md_starts+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->starts_func( ctx->md_ctx );
 8014534:	6840      	ldr	r0, [r0, #4]
 8014536:	691b      	ldr	r3, [r3, #16]
 8014538:	4798      	blx	r3

    return( 0 );
 801453a:	2000      	movs	r0, #0
}
 801453c:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801453e:	4801      	ldr	r0, [pc, #4]	; (8014544 <mbedtls_md_starts+0x18>)
 8014540:	e7fc      	b.n	801453c <mbedtls_md_starts+0x10>
 8014542:	bf00      	nop
 8014544:	ffffaf00 	.word	0xffffaf00

08014548 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8014548:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 801454a:	b130      	cbz	r0, 801455a <mbedtls_md_update+0x12>
 801454c:	6803      	ldr	r3, [r0, #0]
 801454e:	b123      	cbz	r3, 801455a <mbedtls_md_update+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014550:	6840      	ldr	r0, [r0, #4]
 8014552:	695b      	ldr	r3, [r3, #20]
 8014554:	4798      	blx	r3

    return( 0 );
 8014556:	2000      	movs	r0, #0
}
 8014558:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801455a:	4801      	ldr	r0, [pc, #4]	; (8014560 <mbedtls_md_update+0x18>)
 801455c:	e7fc      	b.n	8014558 <mbedtls_md_update+0x10>
 801455e:	bf00      	nop
 8014560:	ffffaf00 	.word	0xffffaf00

08014564 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8014564:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014566:	b130      	cbz	r0, 8014576 <mbedtls_md_finish+0x12>
 8014568:	6803      	ldr	r3, [r0, #0]
 801456a:	b123      	cbz	r3, 8014576 <mbedtls_md_finish+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->finish_func( ctx->md_ctx, output );
 801456c:	6840      	ldr	r0, [r0, #4]
 801456e:	699b      	ldr	r3, [r3, #24]
 8014570:	4798      	blx	r3

    return( 0 );
 8014572:	2000      	movs	r0, #0
}
 8014574:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014576:	4801      	ldr	r0, [pc, #4]	; (801457c <mbedtls_md_finish+0x18>)
 8014578:	e7fc      	b.n	8014574 <mbedtls_md_finish+0x10>
 801457a:	bf00      	nop
 801457c:	ffffaf00 	.word	0xffffaf00

08014580 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8014580:	b538      	push	{r3, r4, r5, lr}
 8014582:	460d      	mov	r5, r1
 8014584:	4611      	mov	r1, r2
    if( md_info == NULL )
 8014586:	b128      	cbz	r0, 8014594 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    md_info->digest_func( input, ilen, output );
 8014588:	69c4      	ldr	r4, [r0, #28]
 801458a:	461a      	mov	r2, r3
 801458c:	4628      	mov	r0, r5
 801458e:	47a0      	blx	r4

    return( 0 );
 8014590:	2000      	movs	r0, #0
}
 8014592:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014594:	4800      	ldr	r0, [pc, #0]	; (8014598 <mbedtls_md+0x18>)
 8014596:	e7fc      	b.n	8014592 <mbedtls_md+0x12>
 8014598:	ffffaf00 	.word	0xffffaf00

0801459c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 801459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145a0:	460d      	mov	r5, r1
 80145a2:	b090      	sub	sp, #64	; 0x40
 80145a4:	4616      	mov	r6, r2
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80145a6:	4604      	mov	r4, r0
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d052      	beq.n	8014652 <mbedtls_md_hmac_starts+0xb6>
 80145ac:	6803      	ldr	r3, [r0, #0]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d04f      	beq.n	8014652 <mbedtls_md_hmac_starts+0xb6>
 80145b2:	6882      	ldr	r2, [r0, #8]
 80145b4:	2a00      	cmp	r2, #0
 80145b6:	d04c      	beq.n	8014652 <mbedtls_md_hmac_starts+0xb6>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80145b8:	68da      	ldr	r2, [r3, #12]
 80145ba:	42b2      	cmp	r2, r6
 80145bc:	d210      	bcs.n	80145e0 <mbedtls_md_hmac_starts+0x44>
    {
        ctx->md_info->starts_func( ctx->md_ctx );
 80145be:	691b      	ldr	r3, [r3, #16]
 80145c0:	6840      	ldr	r0, [r0, #4]
 80145c2:	4798      	blx	r3
        ctx->md_info->update_func( ctx->md_ctx, key, keylen );
 80145c4:	6823      	ldr	r3, [r4, #0]
 80145c6:	6860      	ldr	r0, [r4, #4]
 80145c8:	695b      	ldr	r3, [r3, #20]
 80145ca:	4632      	mov	r2, r6
 80145cc:	4629      	mov	r1, r5
 80145ce:	4798      	blx	r3
        ctx->md_info->finish_func( ctx->md_ctx, sum );
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	6860      	ldr	r0, [r4, #4]
 80145d4:	699b      	ldr	r3, [r3, #24]
 80145d6:	4669      	mov	r1, sp
 80145d8:	4798      	blx	r3

        keylen = ctx->md_info->size;
 80145da:	6823      	ldr	r3, [r4, #0]
 80145dc:	689e      	ldr	r6, [r3, #8]
        key = sum;
 80145de:	466d      	mov	r5, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80145e0:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 80145e2:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80145e6:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 80145e8:	2136      	movs	r1, #54	; 0x36
 80145ea:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80145ec:	eb08 0702 	add.w	r7, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 80145f0:	f00d fe9d 	bl	802232e <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 80145f4:	6823      	ldr	r3, [r4, #0]
 80145f6:	215c      	movs	r1, #92	; 0x5c
 80145f8:	68da      	ldr	r2, [r3, #12]
 80145fa:	4638      	mov	r0, r7
 80145fc:	f00d fe97 	bl	802232e <memset>
 8014600:	3d01      	subs	r5, #1
 8014602:	4643      	mov	r3, r8
 8014604:	1e78      	subs	r0, r7, #1
 8014606:	4446      	add	r6, r8

    for( i = 0; i < keylen; i++ )
 8014608:	42b3      	cmp	r3, r6
 801460a:	d114      	bne.n	8014636 <mbedtls_md_hmac_starts+0x9a>
 801460c:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801460e:	4619      	mov	r1, r3
 8014610:	eb0d 0203 	add.w	r2, sp, r3
 8014614:	3301      	adds	r3, #1
 8014616:	2b41      	cmp	r3, #65	; 0x41
 8014618:	d119      	bne.n	801464e <mbedtls_md_hmac_starts+0xb2>
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    mbedtls_zeroize( sum, sizeof( sum ) );

    ctx->md_info->starts_func( ctx->md_ctx );
 801461a:	6823      	ldr	r3, [r4, #0]
 801461c:	6860      	ldr	r0, [r4, #4]
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 8014622:	6823      	ldr	r3, [r4, #0]
 8014624:	6860      	ldr	r0, [r4, #4]
 8014626:	695d      	ldr	r5, [r3, #20]
 8014628:	68da      	ldr	r2, [r3, #12]
 801462a:	4641      	mov	r1, r8
 801462c:	47a8      	blx	r5

    return( 0 );
 801462e:	2000      	movs	r0, #0
}
 8014630:	b010      	add	sp, #64	; 0x40
 8014632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8014636:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 801463a:	781a      	ldrb	r2, [r3, #0]
 801463c:	404a      	eors	r2, r1
 801463e:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8014642:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8014646:	7829      	ldrb	r1, [r5, #0]
 8014648:	404a      	eors	r2, r1
 801464a:	7002      	strb	r2, [r0, #0]
 801464c:	e7dc      	b.n	8014608 <mbedtls_md_hmac_starts+0x6c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801464e:	7011      	strb	r1, [r2, #0]
 8014650:	e7de      	b.n	8014610 <mbedtls_md_hmac_starts+0x74>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014652:	4801      	ldr	r0, [pc, #4]	; (8014658 <mbedtls_md_hmac_starts+0xbc>)
 8014654:	e7ec      	b.n	8014630 <mbedtls_md_hmac_starts+0x94>
 8014656:	bf00      	nop
 8014658:	ffffaf00 	.word	0xffffaf00

0801465c <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 801465c:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 801465e:	b140      	cbz	r0, 8014672 <mbedtls_md_hmac_update+0x16>
 8014660:	6803      	ldr	r3, [r0, #0]
 8014662:	b133      	cbz	r3, 8014672 <mbedtls_md_hmac_update+0x16>
 8014664:	6884      	ldr	r4, [r0, #8]
 8014666:	b124      	cbz	r4, 8014672 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014668:	6840      	ldr	r0, [r0, #4]
 801466a:	695b      	ldr	r3, [r3, #20]
 801466c:	4798      	blx	r3

    return( 0 );
 801466e:	2000      	movs	r0, #0
}
 8014670:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014672:	4801      	ldr	r0, [pc, #4]	; (8014678 <mbedtls_md_hmac_update+0x1c>)
 8014674:	e7fc      	b.n	8014670 <mbedtls_md_hmac_update+0x14>
 8014676:	bf00      	nop
 8014678:	ffffaf00 	.word	0xffffaf00

0801467c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 801467c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801467e:	460e      	mov	r6, r1
 8014680:	b091      	sub	sp, #68	; 0x44
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014682:	4604      	mov	r4, r0
 8014684:	b308      	cbz	r0, 80146ca <mbedtls_md_hmac_finish+0x4e>
 8014686:	6802      	ldr	r2, [r0, #0]
 8014688:	b1fa      	cbz	r2, 80146ca <mbedtls_md_hmac_finish+0x4e>
 801468a:	6883      	ldr	r3, [r0, #8]
 801468c:	b1eb      	cbz	r3, 80146ca <mbedtls_md_hmac_finish+0x4e>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 801468e:	68d5      	ldr	r5, [r2, #12]

    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 8014690:	6840      	ldr	r0, [r0, #4]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014692:	441d      	add	r5, r3
    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 8014694:	4669      	mov	r1, sp
 8014696:	6993      	ldr	r3, [r2, #24]
 8014698:	4798      	blx	r3
    ctx->md_info->starts_func( ctx->md_ctx );
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	6860      	ldr	r0, [r4, #4]
 801469e:	691b      	ldr	r3, [r3, #16]
 80146a0:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, opad, ctx->md_info->block_size );
 80146a2:	6823      	ldr	r3, [r4, #0]
 80146a4:	6860      	ldr	r0, [r4, #4]
 80146a6:	68da      	ldr	r2, [r3, #12]
 80146a8:	695f      	ldr	r7, [r3, #20]
 80146aa:	4629      	mov	r1, r5
 80146ac:	47b8      	blx	r7
    ctx->md_info->update_func( ctx->md_ctx, tmp, ctx->md_info->size );
 80146ae:	6823      	ldr	r3, [r4, #0]
 80146b0:	6860      	ldr	r0, [r4, #4]
 80146b2:	689a      	ldr	r2, [r3, #8]
 80146b4:	695d      	ldr	r5, [r3, #20]
 80146b6:	4669      	mov	r1, sp
 80146b8:	47a8      	blx	r5
    ctx->md_info->finish_func( ctx->md_ctx, output );
 80146ba:	6823      	ldr	r3, [r4, #0]
 80146bc:	6860      	ldr	r0, [r4, #4]
 80146be:	699b      	ldr	r3, [r3, #24]
 80146c0:	4631      	mov	r1, r6
 80146c2:	4798      	blx	r3

    return( 0 );
 80146c4:	2000      	movs	r0, #0
}
 80146c6:	b011      	add	sp, #68	; 0x44
 80146c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80146ca:	4801      	ldr	r0, [pc, #4]	; (80146d0 <mbedtls_md_hmac_finish+0x54>)
 80146cc:	e7fb      	b.n	80146c6 <mbedtls_md_hmac_finish+0x4a>
 80146ce:	bf00      	nop
 80146d0:	ffffaf00 	.word	0xffffaf00

080146d4 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 80146d4:	b570      	push	{r4, r5, r6, lr}
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80146d6:	4604      	mov	r4, r0
 80146d8:	b170      	cbz	r0, 80146f8 <mbedtls_md_hmac_reset+0x24>
 80146da:	6803      	ldr	r3, [r0, #0]
 80146dc:	b163      	cbz	r3, 80146f8 <mbedtls_md_hmac_reset+0x24>
 80146de:	6885      	ldr	r5, [r0, #8]
 80146e0:	b155      	cbz	r5, 80146f8 <mbedtls_md_hmac_reset+0x24>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    ctx->md_info->starts_func( ctx->md_ctx );
 80146e2:	691b      	ldr	r3, [r3, #16]
 80146e4:	6840      	ldr	r0, [r0, #4]
 80146e6:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 80146e8:	6823      	ldr	r3, [r4, #0]
 80146ea:	6860      	ldr	r0, [r4, #4]
 80146ec:	695e      	ldr	r6, [r3, #20]
 80146ee:	68da      	ldr	r2, [r3, #12]
 80146f0:	4629      	mov	r1, r5
 80146f2:	47b0      	blx	r6

    return( 0 );
 80146f4:	2000      	movs	r0, #0
}
 80146f6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80146f8:	4800      	ldr	r0, [pc, #0]	; (80146fc <mbedtls_md_hmac_reset+0x28>)
 80146fa:	e7fc      	b.n	80146f6 <mbedtls_md_hmac_reset+0x22>
 80146fc:	ffffaf00 	.word	0xffffaf00

08014700 <mbedtls_md_process>:

    return( 0 );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
 8014700:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014702:	b130      	cbz	r0, 8014712 <mbedtls_md_process+0x12>
 8014704:	6803      	ldr	r3, [r0, #0]
 8014706:	b123      	cbz	r3, 8014712 <mbedtls_md_process+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->process_func( ctx->md_ctx, data );
 8014708:	6840      	ldr	r0, [r0, #4]
 801470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801470c:	4798      	blx	r3

    return( 0 );
 801470e:	2000      	movs	r0, #0
}
 8014710:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014712:	4801      	ldr	r0, [pc, #4]	; (8014718 <mbedtls_md_process+0x18>)
 8014714:	e7fc      	b.n	8014710 <mbedtls_md_process+0x10>
 8014716:	bf00      	nop
 8014718:	ffffaf00 	.word	0xffffaf00

0801471c <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 801471c:	b100      	cbz	r0, 8014720 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 801471e:	7a00      	ldrb	r0, [r0, #8]
}
 8014720:	4770      	bx	lr

08014722 <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8014722:	b100      	cbz	r0, 8014726 <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
 8014724:	6840      	ldr	r0, [r0, #4]
}
 8014726:	4770      	bx	lr

08014728 <mbedtls_md5_init>:
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8014728:	2258      	movs	r2, #88	; 0x58
 801472a:	2100      	movs	r1, #0
 801472c:	f00d bdff 	b.w	802232e <memset>

08014730 <mbedtls_md5_free>:
}

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
    if( ctx == NULL )
 8014730:	b120      	cbz	r0, 801473c <mbedtls_md5_free+0xc>
 8014732:	f100 0358 	add.w	r3, r0, #88	; 0x58
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014736:	2200      	movs	r2, #0
 8014738:	4298      	cmp	r0, r3
 801473a:	d100      	bne.n	801473e <mbedtls_md5_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_md5_context ) );
}
 801473c:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801473e:	7002      	strb	r2, [r0, #0]
 8014740:	3001      	adds	r0, #1
 8014742:	e7f9      	b.n	8014738 <mbedtls_md5_free+0x8>

08014744 <mbedtls_md5_clone>:

void mbedtls_md5_clone( mbedtls_md5_context *dst,
                        const mbedtls_md5_context *src )
{
 8014744:	b508      	push	{r3, lr}
    *dst = *src;
 8014746:	2258      	movs	r2, #88	; 0x58
 8014748:	f00d fdcd 	bl	80222e6 <memcpy>
}
 801474c:	bd08      	pop	{r3, pc}
	...

08014750 <mbedtls_md5_starts>:
/*
 * MD5 context setup
 */
void mbedtls_md5_starts( mbedtls_md5_context *ctx )
{
    ctx->total[0] = 0;
 8014750:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 8014752:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 8014756:	4b08      	ldr	r3, [pc, #32]	; (8014778 <mbedtls_md5_starts+0x28>)
 8014758:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 801475a:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 801475e:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 8014760:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 8014764:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 8014768:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 801476c:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 801476e:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 8014772:	6143      	str	r3, [r0, #20]
}
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop
 8014778:	67452301 	.word	0x67452301

0801477c <mbedtls_md5_process>:

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
void mbedtls_md5_process( mbedtls_md5_context *ctx, const unsigned char data[64] )
{
 801477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014780:	b08d      	sub	sp, #52	; 0x34
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
    GET_UINT32_LE( X[ 1], data,  4 );
 8014782:	684b      	ldr	r3, [r1, #4]
 8014784:	9301      	str	r3, [sp, #4]
    GET_UINT32_LE( X[ 2], data,  8 );
 8014786:	688b      	ldr	r3, [r1, #8]
 8014788:	9302      	str	r3, [sp, #8]
    GET_UINT32_LE( X[ 3], data, 12 );
 801478a:	68cb      	ldr	r3, [r1, #12]
 801478c:	9303      	str	r3, [sp, #12]
    GET_UINT32_LE( X[ 4], data, 16 );
 801478e:	690b      	ldr	r3, [r1, #16]
 8014790:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X[ 5], data, 20 );
    GET_UINT32_LE( X[ 6], data, 24 );
 8014792:	698b      	ldr	r3, [r1, #24]
 8014794:	9305      	str	r3, [sp, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
    GET_UINT32_LE( X[ 8], data, 32 );
 8014796:	6a0b      	ldr	r3, [r1, #32]
 8014798:	9306      	str	r3, [sp, #24]
    GET_UINT32_LE( X[ 9], data, 36 );
 801479a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801479c:	9307      	str	r3, [sp, #28]
    GET_UINT32_LE( X[10], data, 40 );
 801479e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80147a0:	9308      	str	r3, [sp, #32]
    GET_UINT32_LE( X[11], data, 44 );
 80147a2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80147a4:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_LE( X[12], data, 48 );
    GET_UINT32_LE( X[13], data, 52 );
 80147a6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80147a8:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_LE( X[14], data, 56 );
    GET_UINT32_LE( X[15], data, 60 );
 80147aa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80147ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80147ae:	4adb      	ldr	r2, [pc, #876]	; (8014b1c <mbedtls_md5_process+0x3a0>)
 80147b0:	6883      	ldr	r3, [r0, #8]
    GET_UINT32_LE( X[ 0], data,  0 );
 80147b2:	f8d1 a000 	ldr.w	sl, [r1]
    GET_UINT32_LE( X[ 5], data, 20 );
 80147b6:	f8d1 e014 	ldr.w	lr, [r1, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
 80147ba:	f8d1 901c 	ldr.w	r9, [r1, #28]
    GET_UINT32_LE( X[12], data, 48 );
 80147be:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
    GET_UINT32_LE( X[14], data, 56 );
 80147c2:	f8d1 8038 	ldr.w	r8, [r1, #56]	; 0x38
{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80147c6:	68c6      	ldr	r6, [r0, #12]
 80147c8:	4dd5      	ldr	r5, [pc, #852]	; (8014b20 <mbedtls_md5_process+0x3a4>)
 80147ca:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 8014bb4 <mbedtls_md5_process+0x438>
 80147ce:	441a      	add	r2, r3
    C = ctx->state[2];
    D = ctx->state[3];

#define F(x,y,z) (z ^ (x & (y ^ z)))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 80147d0:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 80147d4:	404b      	eors	r3, r1
 80147d6:	4033      	ands	r3, r6
 80147d8:	4452      	add	r2, sl
 80147da:	404b      	eors	r3, r1
 80147dc:	4413      	add	r3, r2
 80147de:	4ad1      	ldr	r2, [pc, #836]	; (8014b24 <mbedtls_md5_process+0x3a8>)
 80147e0:	440a      	add	r2, r1
 80147e2:	9901      	ldr	r1, [sp, #4]
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80147e4:	6904      	ldr	r4, [r0, #16]
 80147e6:	9f04      	ldr	r7, [sp, #16]
 80147e8:	440a      	add	r2, r1
 80147ea:	6901      	ldr	r1, [r0, #16]
    P( A, B, C, D,  0,  7, 0xD76AA478 );
 80147ec:	eb06 6373 	add.w	r3, r6, r3, ror #25
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80147f0:	4071      	eors	r1, r6
 80147f2:	4019      	ands	r1, r3
 80147f4:	4061      	eors	r1, r4
 80147f6:	4411      	add	r1, r2
 80147f8:	4acb      	ldr	r2, [pc, #812]	; (8014b28 <mbedtls_md5_process+0x3ac>)
 80147fa:	4422      	add	r2, r4
 80147fc:	9c02      	ldr	r4, [sp, #8]
 80147fe:	eb03 5131 	add.w	r1, r3, r1, ror #20
 8014802:	4422      	add	r2, r4
    P( C, D, A, B,  2, 17, 0x242070DB );
 8014804:	ea86 0403 	eor.w	r4, r6, r3
 8014808:	400c      	ands	r4, r1
 801480a:	4074      	eors	r4, r6
 801480c:	4414      	add	r4, r2
 801480e:	9a03      	ldr	r2, [sp, #12]
 8014810:	4435      	add	r5, r6
 8014812:	eb01 34f4 	add.w	r4, r1, r4, ror #15
 8014816:	4415      	add	r5, r2
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 8014818:	ea83 0201 	eor.w	r2, r3, r1
 801481c:	4022      	ands	r2, r4
 801481e:	405a      	eors	r2, r3
 8014820:	442a      	add	r2, r5
 8014822:	4dc2      	ldr	r5, [pc, #776]	; (8014b2c <mbedtls_md5_process+0x3b0>)
 8014824:	443d      	add	r5, r7
 8014826:	eb04 22b2 	add.w	r2, r4, r2, ror #10
 801482a:	441d      	add	r5, r3
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 801482c:	ea81 0304 	eor.w	r3, r1, r4
 8014830:	4013      	ands	r3, r2
 8014832:	404b      	eors	r3, r1
 8014834:	442b      	add	r3, r5
 8014836:	4dbe      	ldr	r5, [pc, #760]	; (8014b30 <mbedtls_md5_process+0x3b4>)
 8014838:	9f05      	ldr	r7, [sp, #20]
 801483a:	4475      	add	r5, lr
 801483c:	eb02 6373 	add.w	r3, r2, r3, ror #25
 8014840:	440d      	add	r5, r1
    P( D, A, B, C,  5, 12, 0x4787C62A );
 8014842:	ea84 0102 	eor.w	r1, r4, r2
 8014846:	4019      	ands	r1, r3
 8014848:	4061      	eors	r1, r4
 801484a:	4429      	add	r1, r5
 801484c:	4db9      	ldr	r5, [pc, #740]	; (8014b34 <mbedtls_md5_process+0x3b8>)
 801484e:	443d      	add	r5, r7
 8014850:	eb03 5131 	add.w	r1, r3, r1, ror #20
 8014854:	4425      	add	r5, r4
    P( C, D, A, B,  6, 17, 0xA8304613 );
 8014856:	ea82 0403 	eor.w	r4, r2, r3
 801485a:	400c      	ands	r4, r1
 801485c:	4054      	eors	r4, r2
 801485e:	442c      	add	r4, r5
 8014860:	4db5      	ldr	r5, [pc, #724]	; (8014b38 <mbedtls_md5_process+0x3bc>)
 8014862:	9f06      	ldr	r7, [sp, #24]
 8014864:	444d      	add	r5, r9
 8014866:	eb01 34f4 	add.w	r4, r1, r4, ror #15
 801486a:	4415      	add	r5, r2
    P( B, C, D, A,  7, 22, 0xFD469501 );
 801486c:	ea83 0201 	eor.w	r2, r3, r1
 8014870:	4022      	ands	r2, r4
 8014872:	405a      	eors	r2, r3
 8014874:	442a      	add	r2, r5
 8014876:	4db1      	ldr	r5, [pc, #708]	; (8014b3c <mbedtls_md5_process+0x3c0>)
 8014878:	443d      	add	r5, r7
 801487a:	eb04 22b2 	add.w	r2, r4, r2, ror #10
 801487e:	441d      	add	r5, r3
    P( A, B, C, D,  8,  7, 0x698098D8 );
 8014880:	ea81 0304 	eor.w	r3, r1, r4
 8014884:	4013      	ands	r3, r2
 8014886:	404b      	eors	r3, r1
 8014888:	9f07      	ldr	r7, [sp, #28]
 801488a:	442b      	add	r3, r5
 801488c:	4dac      	ldr	r5, [pc, #688]	; (8014b40 <mbedtls_md5_process+0x3c4>)
 801488e:	443d      	add	r5, r7
 8014890:	eb02 6373 	add.w	r3, r2, r3, ror #25
 8014894:	440d      	add	r5, r1
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 8014896:	ea84 0102 	eor.w	r1, r4, r2
 801489a:	4019      	ands	r1, r3
 801489c:	4061      	eors	r1, r4
 801489e:	4429      	add	r1, r5
 80148a0:	9d08      	ldr	r5, [sp, #32]
 80148a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80148a4:	f5a5 4524 	sub.w	r5, r5, #41984	; 0xa400
 80148a8:	3d4f      	subs	r5, #79	; 0x4f
 80148aa:	eb03 5131 	add.w	r1, r3, r1, ror #20
 80148ae:	4425      	add	r5, r4
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 80148b0:	ea82 0403 	eor.w	r4, r2, r3
 80148b4:	400c      	ands	r4, r1
 80148b6:	4054      	eors	r4, r2
 80148b8:	442c      	add	r4, r5
 80148ba:	4da2      	ldr	r5, [pc, #648]	; (8014b44 <mbedtls_md5_process+0x3c8>)
 80148bc:	443d      	add	r5, r7
 80148be:	eb01 34f4 	add.w	r4, r1, r4, ror #15
 80148c2:	4415      	add	r5, r2
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 80148c4:	ea83 0201 	eor.w	r2, r3, r1
 80148c8:	4022      	ands	r2, r4
 80148ca:	405a      	eors	r2, r3
 80148cc:	442a      	add	r2, r5
 80148ce:	4d9e      	ldr	r5, [pc, #632]	; (8014b48 <mbedtls_md5_process+0x3cc>)
 80148d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80148d2:	4465      	add	r5, ip
 80148d4:	eb04 22b2 	add.w	r2, r4, r2, ror #10
 80148d8:	441d      	add	r5, r3
    P( A, B, C, D, 12,  7, 0x6B901122 );
 80148da:	ea81 0304 	eor.w	r3, r1, r4
 80148de:	4013      	ands	r3, r2
 80148e0:	404b      	eors	r3, r1
 80148e2:	442b      	add	r3, r5
 80148e4:	4d99      	ldr	r5, [pc, #612]	; (8014b4c <mbedtls_md5_process+0x3d0>)
 80148e6:	443d      	add	r5, r7
 80148e8:	eb02 6373 	add.w	r3, r2, r3, ror #25
 80148ec:	440d      	add	r5, r1
    P( D, A, B, C, 13, 12, 0xFD987193 );
 80148ee:	ea84 0102 	eor.w	r1, r4, r2
 80148f2:	4019      	ands	r1, r3
 80148f4:	4061      	eors	r1, r4
 80148f6:	4429      	add	r1, r5
 80148f8:	4d95      	ldr	r5, [pc, #596]	; (8014b50 <mbedtls_md5_process+0x3d4>)
 80148fa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80148fc:	4445      	add	r5, r8
 80148fe:	eb03 5131 	add.w	r1, r3, r1, ror #20
 8014902:	4425      	add	r5, r4
    P( C, D, A, B, 14, 17, 0xA679438E );
 8014904:	ea82 0403 	eor.w	r4, r2, r3
 8014908:	400c      	ands	r4, r1
 801490a:	4054      	eors	r4, r2
 801490c:	442c      	add	r4, r5
 801490e:	4d91      	ldr	r5, [pc, #580]	; (8014b54 <mbedtls_md5_process+0x3d8>)
 8014910:	443d      	add	r5, r7
 8014912:	eb01 34f4 	add.w	r4, r1, r4, ror #15
 8014916:	4415      	add	r5, r2
    P( B, C, D, A, 15, 22, 0x49B40821 );
 8014918:	ea83 0201 	eor.w	r2, r3, r1
 801491c:	4022      	ands	r2, r4
 801491e:	405a      	eors	r2, r3
 8014920:	9f01      	ldr	r7, [sp, #4]
 8014922:	442a      	add	r2, r5
 8014924:	4d8c      	ldr	r5, [pc, #560]	; (8014b58 <mbedtls_md5_process+0x3dc>)
 8014926:	eb04 22b2 	add.w	r2, r4, r2, ror #10
 801492a:	443d      	add	r5, r7
 801492c:	441d      	add	r5, r3

#undef F

#define F(x,y,z) (y ^ (z & (x ^ y)))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 801492e:	ea84 0302 	eor.w	r3, r4, r2
 8014932:	400b      	ands	r3, r1
 8014934:	4063      	eors	r3, r4
 8014936:	9f05      	ldr	r7, [sp, #20]
 8014938:	442b      	add	r3, r5
 801493a:	4d88      	ldr	r5, [pc, #544]	; (8014b5c <mbedtls_md5_process+0x3e0>)
 801493c:	eb02 63f3 	add.w	r3, r2, r3, ror #27
 8014940:	443d      	add	r5, r7
 8014942:	440d      	add	r5, r1
    P( D, A, B, C,  6,  9, 0xC040B340 );
 8014944:	ea82 0103 	eor.w	r1, r2, r3
 8014948:	4021      	ands	r1, r4
 801494a:	4051      	eors	r1, r2
 801494c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801494e:	4429      	add	r1, r5
 8014950:	4d83      	ldr	r5, [pc, #524]	; (8014b60 <mbedtls_md5_process+0x3e4>)
 8014952:	eb03 51f1 	add.w	r1, r3, r1, ror #23
 8014956:	443d      	add	r5, r7
 8014958:	4425      	add	r5, r4
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 801495a:	ea83 0401 	eor.w	r4, r3, r1
 801495e:	4014      	ands	r4, r2
 8014960:	405c      	eors	r4, r3
 8014962:	442c      	add	r4, r5
 8014964:	4d7f      	ldr	r5, [pc, #508]	; (8014b64 <mbedtls_md5_process+0x3e8>)
 8014966:	9f08      	ldr	r7, [sp, #32]
 8014968:	eb01 44b4 	add.w	r4, r1, r4, ror #18
 801496c:	4455      	add	r5, sl
 801496e:	4415      	add	r5, r2
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 8014970:	ea81 0204 	eor.w	r2, r1, r4
 8014974:	401a      	ands	r2, r3
 8014976:	404a      	eors	r2, r1
 8014978:	442a      	add	r2, r5
 801497a:	4d7b      	ldr	r5, [pc, #492]	; (8014b68 <mbedtls_md5_process+0x3ec>)
 801497c:	eb04 3232 	add.w	r2, r4, r2, ror #12
 8014980:	4475      	add	r5, lr
 8014982:	441d      	add	r5, r3
    P( A, B, C, D,  5,  5, 0xD62F105D );
 8014984:	ea84 0302 	eor.w	r3, r4, r2
 8014988:	400b      	ands	r3, r1
 801498a:	4063      	eors	r3, r4
 801498c:	442b      	add	r3, r5
 801498e:	4d77      	ldr	r5, [pc, #476]	; (8014b6c <mbedtls_md5_process+0x3f0>)
 8014990:	eb02 63f3 	add.w	r3, r2, r3, ror #27
 8014994:	443d      	add	r5, r7
 8014996:	440d      	add	r5, r1
    P( D, A, B, C, 10,  9, 0x02441453 );
 8014998:	ea82 0103 	eor.w	r1, r2, r3
 801499c:	4021      	ands	r1, r4
 801499e:	4051      	eors	r1, r2
 80149a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80149a2:	4429      	add	r1, r5
 80149a4:	4d72      	ldr	r5, [pc, #456]	; (8014b70 <mbedtls_md5_process+0x3f4>)
 80149a6:	eb03 51f1 	add.w	r1, r3, r1, ror #23
 80149aa:	443d      	add	r5, r7
 80149ac:	4425      	add	r5, r4
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 80149ae:	ea83 0401 	eor.w	r4, r3, r1
 80149b2:	4014      	ands	r4, r2
 80149b4:	405c      	eors	r4, r3
 80149b6:	9f04      	ldr	r7, [sp, #16]
 80149b8:	442c      	add	r4, r5
 80149ba:	4d6e      	ldr	r5, [pc, #440]	; (8014b74 <mbedtls_md5_process+0x3f8>)
 80149bc:	eb01 44b4 	add.w	r4, r1, r4, ror #18
 80149c0:	443d      	add	r5, r7
 80149c2:	4415      	add	r5, r2
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 80149c4:	ea81 0204 	eor.w	r2, r1, r4
 80149c8:	401a      	ands	r2, r3
 80149ca:	404a      	eors	r2, r1
 80149cc:	9f07      	ldr	r7, [sp, #28]
 80149ce:	442a      	add	r2, r5
 80149d0:	4d69      	ldr	r5, [pc, #420]	; (8014b78 <mbedtls_md5_process+0x3fc>)
 80149d2:	eb04 3232 	add.w	r2, r4, r2, ror #12
 80149d6:	443d      	add	r5, r7
 80149d8:	441d      	add	r5, r3
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 80149da:	ea84 0302 	eor.w	r3, r4, r2
 80149de:	400b      	ands	r3, r1
 80149e0:	4063      	eors	r3, r4
 80149e2:	442b      	add	r3, r5
 80149e4:	4d65      	ldr	r5, [pc, #404]	; (8014b7c <mbedtls_md5_process+0x400>)
 80149e6:	9f03      	ldr	r7, [sp, #12]
 80149e8:	eb02 63f3 	add.w	r3, r2, r3, ror #27
 80149ec:	4445      	add	r5, r8
 80149ee:	440d      	add	r5, r1
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 80149f0:	ea82 0103 	eor.w	r1, r2, r3
 80149f4:	4021      	ands	r1, r4
 80149f6:	4051      	eors	r1, r2
 80149f8:	4429      	add	r1, r5
 80149fa:	4d61      	ldr	r5, [pc, #388]	; (8014b80 <mbedtls_md5_process+0x404>)
 80149fc:	eb03 51f1 	add.w	r1, r3, r1, ror #23
 8014a00:	443d      	add	r5, r7
 8014a02:	442c      	add	r4, r5
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 8014a04:	ea83 0501 	eor.w	r5, r3, r1
 8014a08:	4015      	ands	r5, r2
 8014a0a:	405d      	eors	r5, r3
 8014a0c:	9f06      	ldr	r7, [sp, #24]
 8014a0e:	442c      	add	r4, r5
 8014a10:	4d5c      	ldr	r5, [pc, #368]	; (8014b84 <mbedtls_md5_process+0x408>)
 8014a12:	eb01 44b4 	add.w	r4, r1, r4, ror #18
 8014a16:	443d      	add	r5, r7
 8014a18:	442a      	add	r2, r5
    P( B, C, D, A,  8, 20, 0x455A14ED );
 8014a1a:	ea81 0504 	eor.w	r5, r1, r4
 8014a1e:	401d      	ands	r5, r3
 8014a20:	404d      	eors	r5, r1
 8014a22:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014a24:	442a      	add	r2, r5
 8014a26:	4d58      	ldr	r5, [pc, #352]	; (8014b88 <mbedtls_md5_process+0x40c>)
 8014a28:	eb04 3232 	add.w	r2, r4, r2, ror #12
 8014a2c:	443d      	add	r5, r7
 8014a2e:	442b      	add	r3, r5
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 8014a30:	ea84 0502 	eor.w	r5, r4, r2
 8014a34:	400d      	ands	r5, r1
 8014a36:	4065      	eors	r5, r4
 8014a38:	9f02      	ldr	r7, [sp, #8]
 8014a3a:	442b      	add	r3, r5
 8014a3c:	4d53      	ldr	r5, [pc, #332]	; (8014b8c <mbedtls_md5_process+0x410>)
 8014a3e:	eb02 63f3 	add.w	r3, r2, r3, ror #27
 8014a42:	443d      	add	r5, r7
 8014a44:	4429      	add	r1, r5
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 8014a46:	ea82 0503 	eor.w	r5, r2, r3
 8014a4a:	4025      	ands	r5, r4
 8014a4c:	4055      	eors	r5, r2
 8014a4e:	4429      	add	r1, r5
 8014a50:	4d4f      	ldr	r5, [pc, #316]	; (8014b90 <mbedtls_md5_process+0x414>)
 8014a52:	9f06      	ldr	r7, [sp, #24]
 8014a54:	eb03 51f1 	add.w	r1, r3, r1, ror #23
 8014a58:	444d      	add	r5, r9
 8014a5a:	442c      	add	r4, r5
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 8014a5c:	ea83 0501 	eor.w	r5, r3, r1
 8014a60:	4015      	ands	r5, r2
 8014a62:	405d      	eors	r5, r3
 8014a64:	4425      	add	r5, r4
 8014a66:	eb01 45b5 	add.w	r5, r1, r5, ror #18
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 8014a6a:	ea81 0405 	eor.w	r4, r1, r5
 8014a6e:	44e3      	add	fp, ip
 8014a70:	4493      	add	fp, r2
 8014a72:	ea04 0203 	and.w	r2, r4, r3
 8014a76:	404a      	eors	r2, r1
 8014a78:	445a      	add	r2, fp
 8014a7a:	f5ae 2bb8 	sub.w	fp, lr, #376832	; 0x5c000
 8014a7e:	eb05 3232 	add.w	r2, r5, r2, ror #12
 8014a82:	f2ab 6bbe 	subw	fp, fp, #1726	; 0x6be

#undef F

#define F(x,y,z) (x ^ y ^ z)

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 8014a86:	4054      	eors	r4, r2
 8014a88:	445b      	add	r3, fp
 8014a8a:	4423      	add	r3, r4
 8014a8c:	4c41      	ldr	r4, [pc, #260]	; (8014b94 <mbedtls_md5_process+0x418>)
 8014a8e:	443c      	add	r4, r7
 8014a90:	eb02 7333 	add.w	r3, r2, r3, ror #28
 8014a94:	440c      	add	r4, r1
    P( D, A, B, C,  8, 11, 0x8771F681 );
 8014a96:	ea85 0102 	eor.w	r1, r5, r2
 8014a9a:	4059      	eors	r1, r3
 8014a9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014a9e:	4421      	add	r1, r4
 8014aa0:	4c3d      	ldr	r4, [pc, #244]	; (8014b98 <mbedtls_md5_process+0x41c>)
 8014aa2:	443c      	add	r4, r7
 8014aa4:	eb03 5171 	add.w	r1, r3, r1, ror #21
 8014aa8:	4425      	add	r5, r4
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 8014aaa:	ea82 0403 	eor.w	r4, r2, r3
 8014aae:	404c      	eors	r4, r1
 8014ab0:	4425      	add	r5, r4
 8014ab2:	4c3a      	ldr	r4, [pc, #232]	; (8014b9c <mbedtls_md5_process+0x420>)
 8014ab4:	9f01      	ldr	r7, [sp, #4]
 8014ab6:	4444      	add	r4, r8
 8014ab8:	eb01 4535 	add.w	r5, r1, r5, ror #16
 8014abc:	4414      	add	r4, r2
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 8014abe:	ea83 0201 	eor.w	r2, r3, r1
 8014ac2:	406a      	eors	r2, r5
 8014ac4:	4422      	add	r2, r4
 8014ac6:	4c36      	ldr	r4, [pc, #216]	; (8014ba0 <mbedtls_md5_process+0x424>)
 8014ac8:	443c      	add	r4, r7
 8014aca:	eb05 2272 	add.w	r2, r5, r2, ror #9
 8014ace:	441c      	add	r4, r3
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 8014ad0:	ea81 0305 	eor.w	r3, r1, r5
 8014ad4:	4053      	eors	r3, r2
 8014ad6:	9f04      	ldr	r7, [sp, #16]
 8014ad8:	4423      	add	r3, r4
 8014ada:	4c32      	ldr	r4, [pc, #200]	; (8014ba4 <mbedtls_md5_process+0x428>)
 8014adc:	443c      	add	r4, r7
 8014ade:	eb02 7333 	add.w	r3, r2, r3, ror #28
 8014ae2:	440c      	add	r4, r1
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 8014ae4:	ea85 0102 	eor.w	r1, r5, r2
 8014ae8:	4059      	eors	r1, r3
 8014aea:	4421      	add	r1, r4
 8014aec:	4c2e      	ldr	r4, [pc, #184]	; (8014ba8 <mbedtls_md5_process+0x42c>)
 8014aee:	9f08      	ldr	r7, [sp, #32]
 8014af0:	444c      	add	r4, r9
 8014af2:	eb03 5171 	add.w	r1, r3, r1, ror #21
 8014af6:	4425      	add	r5, r4
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 8014af8:	ea82 0403 	eor.w	r4, r2, r3
 8014afc:	404c      	eors	r4, r1
 8014afe:	442c      	add	r4, r5
 8014b00:	4d2a      	ldr	r5, [pc, #168]	; (8014bac <mbedtls_md5_process+0x430>)
 8014b02:	443d      	add	r5, r7
 8014b04:	eb01 4434 	add.w	r4, r1, r4, ror #16
 8014b08:	4415      	add	r5, r2
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 8014b0a:	ea83 0201 	eor.w	r2, r3, r1
 8014b0e:	4062      	eors	r2, r4
 8014b10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014b12:	442a      	add	r2, r5
 8014b14:	4d26      	ldr	r5, [pc, #152]	; (8014bb0 <mbedtls_md5_process+0x434>)
 8014b16:	443d      	add	r5, r7
 8014b18:	e04e      	b.n	8014bb8 <mbedtls_md5_process+0x43c>
 8014b1a:	bf00      	nop
 8014b1c:	d76aa478 	.word	0xd76aa478
 8014b20:	c1bdceee 	.word	0xc1bdceee
 8014b24:	e8c7b756 	.word	0xe8c7b756
 8014b28:	242070db 	.word	0x242070db
 8014b2c:	f57c0faf 	.word	0xf57c0faf
 8014b30:	4787c62a 	.word	0x4787c62a
 8014b34:	a8304613 	.word	0xa8304613
 8014b38:	fd469501 	.word	0xfd469501
 8014b3c:	698098d8 	.word	0x698098d8
 8014b40:	8b44f7af 	.word	0x8b44f7af
 8014b44:	895cd7be 	.word	0x895cd7be
 8014b48:	6b901122 	.word	0x6b901122
 8014b4c:	fd987193 	.word	0xfd987193
 8014b50:	a679438e 	.word	0xa679438e
 8014b54:	49b40821 	.word	0x49b40821
 8014b58:	f61e2562 	.word	0xf61e2562
 8014b5c:	c040b340 	.word	0xc040b340
 8014b60:	265e5a51 	.word	0x265e5a51
 8014b64:	e9b6c7aa 	.word	0xe9b6c7aa
 8014b68:	d62f105d 	.word	0xd62f105d
 8014b6c:	02441453 	.word	0x02441453
 8014b70:	d8a1e681 	.word	0xd8a1e681
 8014b74:	e7d3fbc8 	.word	0xe7d3fbc8
 8014b78:	21e1cde6 	.word	0x21e1cde6
 8014b7c:	c33707d6 	.word	0xc33707d6
 8014b80:	f4d50d87 	.word	0xf4d50d87
 8014b84:	455a14ed 	.word	0x455a14ed
 8014b88:	a9e3e905 	.word	0xa9e3e905
 8014b8c:	fcefa3f8 	.word	0xfcefa3f8
 8014b90:	676f02d9 	.word	0x676f02d9
 8014b94:	8771f681 	.word	0x8771f681
 8014b98:	6d9d6122 	.word	0x6d9d6122
 8014b9c:	fde5380c 	.word	0xfde5380c
 8014ba0:	a4beea44 	.word	0xa4beea44
 8014ba4:	4bdecfa9 	.word	0x4bdecfa9
 8014ba8:	f6bb4b60 	.word	0xf6bb4b60
 8014bac:	bebfbc70 	.word	0xbebfbc70
 8014bb0:	289b7ec6 	.word	0x289b7ec6
 8014bb4:	8d2a4c8a 	.word	0x8d2a4c8a
 8014bb8:	eb04 2272 	add.w	r2, r4, r2, ror #9
 8014bbc:	441d      	add	r5, r3
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 8014bbe:	ea81 0304 	eor.w	r3, r1, r4
 8014bc2:	4053      	eors	r3, r2
 8014bc4:	442b      	add	r3, r5
 8014bc6:	4d7b      	ldr	r5, [pc, #492]	; (8014db4 <mbedtls_md5_process+0x638>)
 8014bc8:	9f03      	ldr	r7, [sp, #12]
 8014bca:	4455      	add	r5, sl
 8014bcc:	eb02 7333 	add.w	r3, r2, r3, ror #28
 8014bd0:	4429      	add	r1, r5
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 8014bd2:	ea84 0502 	eor.w	r5, r4, r2
 8014bd6:	405d      	eors	r5, r3
 8014bd8:	4429      	add	r1, r5
 8014bda:	4d77      	ldr	r5, [pc, #476]	; (8014db8 <mbedtls_md5_process+0x63c>)
 8014bdc:	443d      	add	r5, r7
 8014bde:	eb03 5171 	add.w	r1, r3, r1, ror #21
 8014be2:	4425      	add	r5, r4
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 8014be4:	ea82 0403 	eor.w	r4, r2, r3
 8014be8:	404c      	eors	r4, r1
 8014bea:	9f05      	ldr	r7, [sp, #20]
 8014bec:	442c      	add	r4, r5
 8014bee:	4d73      	ldr	r5, [pc, #460]	; (8014dbc <mbedtls_md5_process+0x640>)
 8014bf0:	443d      	add	r5, r7
 8014bf2:	eb01 4434 	add.w	r4, r1, r4, ror #16
 8014bf6:	442a      	add	r2, r5
    P( B, C, D, A,  6, 23, 0x04881D05 );
 8014bf8:	ea83 0501 	eor.w	r5, r3, r1
 8014bfc:	4065      	eors	r5, r4
 8014bfe:	9f07      	ldr	r7, [sp, #28]
 8014c00:	4415      	add	r5, r2
 8014c02:	4a6f      	ldr	r2, [pc, #444]	; (8014dc0 <mbedtls_md5_process+0x644>)
 8014c04:	443a      	add	r2, r7
 8014c06:	eb04 2575 	add.w	r5, r4, r5, ror #9
 8014c0a:	4413      	add	r3, r2
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 8014c0c:	ea81 0204 	eor.w	r2, r1, r4
 8014c10:	406a      	eors	r2, r5
 8014c12:	441a      	add	r2, r3
 8014c14:	4b6b      	ldr	r3, [pc, #428]	; (8014dc4 <mbedtls_md5_process+0x648>)
 8014c16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014c18:	4463      	add	r3, ip
 8014c1a:	eb05 7232 	add.w	r2, r5, r2, ror #28
 8014c1e:	440b      	add	r3, r1
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 8014c20:	ea84 0105 	eor.w	r1, r4, r5
 8014c24:	4051      	eors	r1, r2
 8014c26:	4419      	add	r1, r3
 8014c28:	4b67      	ldr	r3, [pc, #412]	; (8014dc8 <mbedtls_md5_process+0x64c>)
 8014c2a:	443b      	add	r3, r7
 8014c2c:	eb02 5171 	add.w	r1, r2, r1, ror #21
 8014c30:	441c      	add	r4, r3
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 8014c32:	ea85 0302 	eor.w	r3, r5, r2
 8014c36:	404b      	eors	r3, r1
 8014c38:	9f02      	ldr	r7, [sp, #8]
 8014c3a:	441c      	add	r4, r3
 8014c3c:	4b63      	ldr	r3, [pc, #396]	; (8014dcc <mbedtls_md5_process+0x650>)
 8014c3e:	443b      	add	r3, r7
 8014c40:	eb01 4434 	add.w	r4, r1, r4, ror #16
 8014c44:	441d      	add	r5, r3
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 8014c46:	ea82 0301 	eor.w	r3, r2, r1
 8014c4a:	4063      	eors	r3, r4
 8014c4c:	442b      	add	r3, r5
 8014c4e:	4d60      	ldr	r5, [pc, #384]	; (8014dd0 <mbedtls_md5_process+0x654>)
 8014c50:	9f03      	ldr	r7, [sp, #12]
 8014c52:	eb04 2373 	add.w	r3, r4, r3, ror #9
 8014c56:	4455      	add	r5, sl

#undef F

#define F(x,y,z) (y ^ (x | ~z))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 8014c58:	ea63 0a01 	orn	sl, r3, r1
 8014c5c:	ea8a 0a04 	eor.w	sl, sl, r4
 8014c60:	442a      	add	r2, r5
 8014c62:	4452      	add	r2, sl
 8014c64:	4d5b      	ldr	r5, [pc, #364]	; (8014dd4 <mbedtls_md5_process+0x658>)
 8014c66:	eb03 62b2 	add.w	r2, r3, r2, ror #26
 8014c6a:	444d      	add	r5, r9
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 8014c6c:	ea62 0904 	orn	r9, r2, r4
 8014c70:	ea89 0903 	eor.w	r9, r9, r3
 8014c74:	4429      	add	r1, r5
 8014c76:	4449      	add	r1, r9
 8014c78:	4d57      	ldr	r5, [pc, #348]	; (8014dd8 <mbedtls_md5_process+0x65c>)
 8014c7a:	eb02 51b1 	add.w	r1, r2, r1, ror #22
 8014c7e:	4445      	add	r5, r8
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 8014c80:	ea61 0803 	orn	r8, r1, r3
 8014c84:	ea88 0802 	eor.w	r8, r8, r2
 8014c88:	442c      	add	r4, r5
 8014c8a:	4444      	add	r4, r8
 8014c8c:	4d53      	ldr	r5, [pc, #332]	; (8014ddc <mbedtls_md5_process+0x660>)
 8014c8e:	eb01 4474 	add.w	r4, r1, r4, ror #17
 8014c92:	4475      	add	r5, lr
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 8014c94:	ea64 0e02 	orn	lr, r4, r2
 8014c98:	ea8e 0e01 	eor.w	lr, lr, r1
 8014c9c:	442b      	add	r3, r5
 8014c9e:	4473      	add	r3, lr
 8014ca0:	4d4f      	ldr	r5, [pc, #316]	; (8014de0 <mbedtls_md5_process+0x664>)
 8014ca2:	eb04 23f3 	add.w	r3, r4, r3, ror #11
 8014ca6:	4465      	add	r5, ip
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 8014ca8:	ea63 0c01 	orn	ip, r3, r1
 8014cac:	ea8c 0c04 	eor.w	ip, ip, r4
 8014cb0:	442a      	add	r2, r5
 8014cb2:	4d4c      	ldr	r5, [pc, #304]	; (8014de4 <mbedtls_md5_process+0x668>)
 8014cb4:	4462      	add	r2, ip
 8014cb6:	eb03 62b2 	add.w	r2, r3, r2, ror #26
 8014cba:	443d      	add	r5, r7
 8014cbc:	4429      	add	r1, r5
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 8014cbe:	ea62 0704 	orn	r7, r2, r4
 8014cc2:	9d08      	ldr	r5, [sp, #32]
 8014cc4:	405f      	eors	r7, r3
 8014cc6:	4439      	add	r1, r7
 8014cc8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014ccc:	eb02 51b1 	add.w	r1, r2, r1, ror #22
 8014cd0:	f6a5 3583 	subw	r5, r5, #2947	; 0xb83
 8014cd4:	4425      	add	r5, r4
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 8014cd6:	ea61 0403 	orn	r4, r1, r3
 8014cda:	4054      	eors	r4, r2
 8014cdc:	9f01      	ldr	r7, [sp, #4]
 8014cde:	442c      	add	r4, r5
 8014ce0:	4d41      	ldr	r5, [pc, #260]	; (8014de8 <mbedtls_md5_process+0x66c>)
 8014ce2:	eb01 4474 	add.w	r4, r1, r4, ror #17
 8014ce6:	443d      	add	r5, r7
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 8014ce8:	ea64 0702 	orn	r7, r4, r2
 8014cec:	404f      	eors	r7, r1
 8014cee:	442b      	add	r3, r5
 8014cf0:	443b      	add	r3, r7
 8014cf2:	4d3e      	ldr	r5, [pc, #248]	; (8014dec <mbedtls_md5_process+0x670>)
 8014cf4:	9f06      	ldr	r7, [sp, #24]
 8014cf6:	eb04 23f3 	add.w	r3, r4, r3, ror #11
 8014cfa:	443d      	add	r5, r7
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 8014cfc:	ea63 0701 	orn	r7, r3, r1
 8014d00:	4067      	eors	r7, r4
 8014d02:	442a      	add	r2, r5
 8014d04:	443a      	add	r2, r7
 8014d06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014d08:	4f39      	ldr	r7, [pc, #228]	; (8014df0 <mbedtls_md5_process+0x674>)
 8014d0a:	eb03 62b2 	add.w	r2, r3, r2, ror #26
 8014d0e:	442f      	add	r7, r5
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 8014d10:	ea62 0c04 	orn	ip, r2, r4
 8014d14:	ea8c 0c03 	eor.w	ip, ip, r3
 8014d18:	4439      	add	r1, r7
 8014d1a:	4461      	add	r1, ip
 8014d1c:	9f05      	ldr	r7, [sp, #20]
 8014d1e:	4d35      	ldr	r5, [pc, #212]	; (8014df4 <mbedtls_md5_process+0x678>)
 8014d20:	eb02 51b1 	add.w	r1, r2, r1, ror #22
 8014d24:	443d      	add	r5, r7
    P( C, D, A, B,  6, 15, 0xA3014314 );
 8014d26:	ea61 0703 	orn	r7, r1, r3
 8014d2a:	4057      	eors	r7, r2
 8014d2c:	442c      	add	r4, r5
 8014d2e:	443c      	add	r4, r7
 8014d30:	4d31      	ldr	r5, [pc, #196]	; (8014df8 <mbedtls_md5_process+0x67c>)
 8014d32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014d34:	eb01 4474 	add.w	r4, r1, r4, ror #17
 8014d38:	443d      	add	r5, r7
 8014d3a:	441d      	add	r5, r3
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 8014d3c:	ea64 0302 	orn	r3, r4, r2
 8014d40:	404b      	eors	r3, r1
 8014d42:	9f04      	ldr	r7, [sp, #16]
 8014d44:	442b      	add	r3, r5
 8014d46:	4d2d      	ldr	r5, [pc, #180]	; (8014dfc <mbedtls_md5_process+0x680>)
 8014d48:	eb04 23f3 	add.w	r3, r4, r3, ror #11
 8014d4c:	443d      	add	r5, r7
 8014d4e:	4415      	add	r5, r2
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 8014d50:	ea63 0201 	orn	r2, r3, r1
 8014d54:	4062      	eors	r2, r4
 8014d56:	442a      	add	r2, r5
 8014d58:	4f29      	ldr	r7, [pc, #164]	; (8014e00 <mbedtls_md5_process+0x684>)
 8014d5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014d5c:	eb03 62b2 	add.w	r2, r3, r2, ror #26
 8014d60:	442f      	add	r7, r5
 8014d62:	440f      	add	r7, r1
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 8014d64:	ea62 0104 	orn	r1, r2, r4
 8014d68:	4059      	eors	r1, r3
 8014d6a:	4439      	add	r1, r7
 8014d6c:	4d25      	ldr	r5, [pc, #148]	; (8014e04 <mbedtls_md5_process+0x688>)
 8014d6e:	9f02      	ldr	r7, [sp, #8]
 8014d70:	eb02 51b1 	add.w	r1, r2, r1, ror #22
 8014d74:	443d      	add	r5, r7
 8014d76:	4425      	add	r5, r4
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 8014d78:	ea61 0403 	orn	r4, r1, r3
 8014d7c:	4054      	eors	r4, r2
 8014d7e:	442c      	add	r4, r5
 8014d80:	9f07      	ldr	r7, [sp, #28]
 8014d82:	4d21      	ldr	r5, [pc, #132]	; (8014e08 <mbedtls_md5_process+0x68c>)
 8014d84:	443d      	add	r5, r7
 8014d86:	442b      	add	r3, r5
    P( B, C, D, A,  9, 21, 0xEB86D391 );

#undef F

    ctx->state[0] += A;
 8014d88:	6885      	ldr	r5, [r0, #8]
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 8014d8a:	eb01 4474 	add.w	r4, r1, r4, ror #17
    ctx->state[0] += A;
 8014d8e:	4415      	add	r5, r2
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 8014d90:	ea64 0202 	orn	r2, r4, r2
 8014d94:	404a      	eors	r2, r1
 8014d96:	441a      	add	r2, r3
    ctx->state[1] += B;
    ctx->state[2] += C;
 8014d98:	6903      	ldr	r3, [r0, #16]
    ctx->state[0] += A;
 8014d9a:	6085      	str	r5, [r0, #8]
    ctx->state[1] += B;
 8014d9c:	4426      	add	r6, r4
    ctx->state[2] += C;
 8014d9e:	441c      	add	r4, r3
    ctx->state[3] += D;
 8014da0:	6943      	ldr	r3, [r0, #20]
    ctx->state[2] += C;
 8014da2:	6104      	str	r4, [r0, #16]
    ctx->state[1] += B;
 8014da4:	eb06 26f2 	add.w	r6, r6, r2, ror #11
    ctx->state[3] += D;
 8014da8:	4419      	add	r1, r3
    ctx->state[1] += B;
 8014daa:	60c6      	str	r6, [r0, #12]
    ctx->state[3] += D;
 8014dac:	6141      	str	r1, [r0, #20]
}
 8014dae:	b00d      	add	sp, #52	; 0x34
 8014db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db4:	eaa127fa 	.word	0xeaa127fa
 8014db8:	d4ef3085 	.word	0xd4ef3085
 8014dbc:	04881d05 	.word	0x04881d05
 8014dc0:	d9d4d039 	.word	0xd9d4d039
 8014dc4:	e6db99e5 	.word	0xe6db99e5
 8014dc8:	1fa27cf8 	.word	0x1fa27cf8
 8014dcc:	c4ac5665 	.word	0xc4ac5665
 8014dd0:	f4292244 	.word	0xf4292244
 8014dd4:	432aff97 	.word	0x432aff97
 8014dd8:	ab9423a7 	.word	0xab9423a7
 8014ddc:	fc93a039 	.word	0xfc93a039
 8014de0:	655b59c3 	.word	0x655b59c3
 8014de4:	8f0ccc92 	.word	0x8f0ccc92
 8014de8:	85845dd1 	.word	0x85845dd1
 8014dec:	6fa87e4f 	.word	0x6fa87e4f
 8014df0:	fe2ce6e0 	.word	0xfe2ce6e0
 8014df4:	a3014314 	.word	0xa3014314
 8014df8:	4e0811a1 	.word	0x4e0811a1
 8014dfc:	f7537e82 	.word	0xf7537e82
 8014e00:	bd3af235 	.word	0xbd3af235
 8014e04:	2ad7d2bb 	.word	0x2ad7d2bb
 8014e08:	eb86d391 	.word	0xeb86d391

08014e0c <mbedtls_md5_update.part.0>:
#endif /* !MBEDTLS_MD5_PROCESS_ALT */

/*
 * MD5 process buffer
 */
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 8014e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 8014e10:	6803      	ldr	r3, [r0, #0]
 8014e12:	f003 073f 	and.w	r7, r3, #63	; 0x3f
 8014e16:	189b      	adds	r3, r3, r2
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8014e18:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8014e1a:	bf24      	itt	cs
 8014e1c:	6843      	ldrcs	r3, [r0, #4]
 8014e1e:	3301      	addcs	r3, #1
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 8014e20:	4604      	mov	r4, r0
 8014e22:	460e      	mov	r6, r1
 8014e24:	4615      	mov	r5, r2
        ctx->total[1]++;
 8014e26:	bf28      	it	cs
 8014e28:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8014e2a:	b197      	cbz	r7, 8014e52 <mbedtls_md5_update.part.0+0x46>
    fill = 64 - left;
 8014e2c:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 8014e30:	4590      	cmp	r8, r2
 8014e32:	d80e      	bhi.n	8014e52 <mbedtls_md5_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8014e34:	f100 0918 	add.w	r9, r0, #24
 8014e38:	4642      	mov	r2, r8
 8014e3a:	eb09 0007 	add.w	r0, r9, r7
 8014e3e:	f00d fa52 	bl	80222e6 <memcpy>
        mbedtls_md5_process( ctx, ctx->buffer );
 8014e42:	4649      	mov	r1, r9
 8014e44:	4620      	mov	r0, r4
 8014e46:	f7ff fc99 	bl	801477c <mbedtls_md5_process>
        input += fill;
 8014e4a:	4446      	add	r6, r8
        ilen  -= fill;
 8014e4c:	eba5 0508 	sub.w	r5, r5, r8
        left = 0;
 8014e50:	2700      	movs	r7, #0
 8014e52:	46a8      	mov	r8, r5
 8014e54:	eb06 0905 	add.w	r9, r6, r5
 8014e58:	e004      	b.n	8014e64 <mbedtls_md5_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_md5_process( ctx, input );
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f7ff fc8e 	bl	801477c <mbedtls_md5_process>
        input += 64;
        ilen  -= 64;
 8014e60:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 8014e64:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8014e68:	eba9 0108 	sub.w	r1, r9, r8
 8014e6c:	d8f5      	bhi.n	8014e5a <mbedtls_md5_update.part.0+0x4e>
 8014e6e:	09aa      	lsrs	r2, r5, #6
 8014e70:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8014e74:	eb06 1182 	add.w	r1, r6, r2, lsl #6
 8014e78:	fb03 5202 	mla	r2, r3, r2, r5
    }

    if( ilen > 0 )
 8014e7c:	b132      	cbz	r2, 8014e8c <mbedtls_md5_update.part.0+0x80>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8014e7e:	f104 0018 	add.w	r0, r4, #24
 8014e82:	4438      	add	r0, r7
    }
}
 8014e84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8014e88:	f00d ba2d 	b.w	80222e6 <memcpy>
}
 8014e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014e90 <mbedtls_md5_update>:
    if( ilen == 0 )
 8014e90:	b10a      	cbz	r2, 8014e96 <mbedtls_md5_update+0x6>
 8014e92:	f7ff bfbb 	b.w	8014e0c <mbedtls_md5_update.part.0>
}
 8014e96:	4770      	bx	lr

08014e98 <mbedtls_md5_finish>:

/*
 * MD5 final digest
 */
void mbedtls_md5_finish( mbedtls_md5_context *ctx, unsigned char output[16] )
{
 8014e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e9a:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8014e9c:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8014ea0:	0f53      	lsrs	r3, r2, #29
 8014ea2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8014ea6:	00d1      	lsls	r1, r2, #3
{
 8014ea8:	4604      	mov	r4, r0

    PUT_UINT32_LE( low,  msglen, 0 );
 8014eaa:	0a08      	lsrs	r0, r1, #8
 8014eac:	f88d 1000 	strb.w	r1, [sp]
 8014eb0:	f88d 0001 	strb.w	r0, [sp, #1]
 8014eb4:	0c08      	lsrs	r0, r1, #16
 8014eb6:	0e09      	lsrs	r1, r1, #24
    PUT_UINT32_LE( high, msglen, 4 );

    last = ctx->total[0] & 0x3F;
 8014eb8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    PUT_UINT32_LE( low,  msglen, 0 );
 8014ebc:	f88d 1003 	strb.w	r1, [sp, #3]
    PUT_UINT32_LE( high, msglen, 4 );
 8014ec0:	0a19      	lsrs	r1, r3, #8
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8014ec2:	2a37      	cmp	r2, #55	; 0x37
    PUT_UINT32_LE( high, msglen, 4 );
 8014ec4:	f88d 1005 	strb.w	r1, [sp, #5]
 8014ec8:	ea4f 4113 	mov.w	r1, r3, lsr #16
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8014ecc:	bf94      	ite	ls
 8014ece:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 8014ed2:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
    PUT_UINT32_LE( low,  msglen, 0 );
 8014ed6:	f88d 0002 	strb.w	r0, [sp, #2]
    PUT_UINT32_LE( high, msglen, 4 );
 8014eda:	f88d 3004 	strb.w	r3, [sp, #4]
 8014ede:	f88d 1006 	strb.w	r1, [sp, #6]
 8014ee2:	0e1b      	lsrs	r3, r3, #24

    mbedtls_md5_update( ctx, md5_padding, padn );
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	4918      	ldr	r1, [pc, #96]	; (8014f48 <mbedtls_md5_finish+0xb0>)
    PUT_UINT32_LE( high, msglen, 4 );
 8014ee8:	f88d 3007 	strb.w	r3, [sp, #7]
    mbedtls_md5_update( ctx, md5_padding, padn );
 8014eec:	f7ff ffd0 	bl	8014e90 <mbedtls_md5_update>
 8014ef0:	2208      	movs	r2, #8
 8014ef2:	4669      	mov	r1, sp
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f7ff ff89 	bl	8014e0c <mbedtls_md5_update.part.0>
    mbedtls_md5_update( ctx, msglen, 8 );

    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8014efa:	68a3      	ldr	r3, [r4, #8]
 8014efc:	702b      	strb	r3, [r5, #0]
 8014efe:	68a3      	ldr	r3, [r4, #8]
 8014f00:	0a1b      	lsrs	r3, r3, #8
 8014f02:	706b      	strb	r3, [r5, #1]
 8014f04:	8963      	ldrh	r3, [r4, #10]
 8014f06:	70ab      	strb	r3, [r5, #2]
 8014f08:	7ae3      	ldrb	r3, [r4, #11]
 8014f0a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8014f0c:	68e3      	ldr	r3, [r4, #12]
 8014f0e:	712b      	strb	r3, [r5, #4]
 8014f10:	68e3      	ldr	r3, [r4, #12]
 8014f12:	0a1b      	lsrs	r3, r3, #8
 8014f14:	716b      	strb	r3, [r5, #5]
 8014f16:	89e3      	ldrh	r3, [r4, #14]
 8014f18:	71ab      	strb	r3, [r5, #6]
 8014f1a:	7be3      	ldrb	r3, [r4, #15]
 8014f1c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 8014f1e:	6923      	ldr	r3, [r4, #16]
 8014f20:	722b      	strb	r3, [r5, #8]
 8014f22:	6923      	ldr	r3, [r4, #16]
 8014f24:	0a1b      	lsrs	r3, r3, #8
 8014f26:	726b      	strb	r3, [r5, #9]
 8014f28:	8a63      	ldrh	r3, [r4, #18]
 8014f2a:	72ab      	strb	r3, [r5, #10]
 8014f2c:	7ce3      	ldrb	r3, [r4, #19]
 8014f2e:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8014f30:	6963      	ldr	r3, [r4, #20]
 8014f32:	732b      	strb	r3, [r5, #12]
 8014f34:	6963      	ldr	r3, [r4, #20]
 8014f36:	0a1b      	lsrs	r3, r3, #8
 8014f38:	736b      	strb	r3, [r5, #13]
 8014f3a:	8ae3      	ldrh	r3, [r4, #22]
 8014f3c:	73ab      	strb	r3, [r5, #14]
 8014f3e:	7de3      	ldrb	r3, [r4, #23]
 8014f40:	73eb      	strb	r3, [r5, #15]
}
 8014f42:	b003      	add	sp, #12
 8014f44:	bd30      	pop	{r4, r5, pc}
 8014f46:	bf00      	nop
 8014f48:	0802b694 	.word	0x0802b694

08014f4c <mbedtls_md5>:

/*
 * output = MD5( input buffer )
 */
void mbedtls_md5( const unsigned char *input, size_t ilen, unsigned char output[16] )
{
 8014f4c:	b570      	push	{r4, r5, r6, lr}
 8014f4e:	b096      	sub	sp, #88	; 0x58
 8014f50:	4605      	mov	r5, r0
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
 8014f52:	4668      	mov	r0, sp
{
 8014f54:	460e      	mov	r6, r1
 8014f56:	4614      	mov	r4, r2
    mbedtls_md5_init( &ctx );
 8014f58:	f7ff fbe6 	bl	8014728 <mbedtls_md5_init>
    mbedtls_md5_starts( &ctx );
 8014f5c:	4668      	mov	r0, sp
 8014f5e:	f7ff fbf7 	bl	8014750 <mbedtls_md5_starts>
    mbedtls_md5_update( &ctx, input, ilen );
 8014f62:	4632      	mov	r2, r6
 8014f64:	4629      	mov	r1, r5
 8014f66:	4668      	mov	r0, sp
 8014f68:	f7ff ff92 	bl	8014e90 <mbedtls_md5_update>
    mbedtls_md5_finish( &ctx, output );
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	4668      	mov	r0, sp
 8014f70:	f7ff ff92 	bl	8014e98 <mbedtls_md5_finish>
    mbedtls_md5_free( &ctx );
 8014f74:	4668      	mov	r0, sp
 8014f76:	f7ff fbdb 	bl	8014730 <mbedtls_md5_free>
}
 8014f7a:	b016      	add	sp, #88	; 0x58
 8014f7c:	bd70      	pop	{r4, r5, r6, pc}

08014f7e <md5_process_wrap>:
                 (const mbedtls_md5_context *) src );
}

static void md5_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_md5_process( (mbedtls_md5_context *) ctx, data );
 8014f7e:	f7ff bbfd 	b.w	801477c <mbedtls_md5_process>

08014f82 <md5_clone_wrap>:
    mbedtls_md5_clone( (mbedtls_md5_context *) dst,
 8014f82:	f7ff bbdf 	b.w	8014744 <mbedtls_md5_clone>
	...

08014f88 <md5_ctx_free>:
{
 8014f88:	b510      	push	{r4, lr}
 8014f8a:	4604      	mov	r4, r0
    mbedtls_md5_free( (mbedtls_md5_context *) ctx );
 8014f8c:	f7ff fbd0 	bl	8014730 <mbedtls_md5_free>
    mbedtls_free( ctx );
 8014f90:	4b02      	ldr	r3, [pc, #8]	; (8014f9c <md5_ctx_free+0x14>)
 8014f92:	4620      	mov	r0, r4
 8014f94:	681b      	ldr	r3, [r3, #0]
}
 8014f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8014f9a:	4718      	bx	r3
 8014f9c:	200005a4 	.word	0x200005a4

08014fa0 <md5_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 8014fa0:	4b05      	ldr	r3, [pc, #20]	; (8014fb8 <md5_ctx_alloc+0x18>)
{
 8014fa2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	2158      	movs	r1, #88	; 0x58
 8014fa8:	2001      	movs	r0, #1
 8014faa:	4798      	blx	r3
    if( ctx != NULL )
 8014fac:	4604      	mov	r4, r0
 8014fae:	b108      	cbz	r0, 8014fb4 <md5_ctx_alloc+0x14>
        mbedtls_md5_init( (mbedtls_md5_context *) ctx );
 8014fb0:	f7ff fbba 	bl	8014728 <mbedtls_md5_init>
}
 8014fb4:	4620      	mov	r0, r4
 8014fb6:	bd10      	pop	{r4, pc}
 8014fb8:	200005a0 	.word	0x200005a0

08014fbc <md5_finish_wrap>:
    mbedtls_md5_finish( (mbedtls_md5_context *) ctx, output );
 8014fbc:	f7ff bf6c 	b.w	8014e98 <mbedtls_md5_finish>

08014fc0 <md5_update_wrap>:
    mbedtls_md5_update( (mbedtls_md5_context *) ctx, input, ilen );
 8014fc0:	f7ff bf66 	b.w	8014e90 <mbedtls_md5_update>

08014fc4 <md5_starts_wrap>:
    mbedtls_md5_starts( (mbedtls_md5_context *) ctx );
 8014fc4:	f7ff bbc4 	b.w	8014750 <mbedtls_md5_starts>

08014fc8 <sha1_process_wrap>:
    mbedtls_free( ctx );
}

static void sha1_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha1_process( (mbedtls_sha1_context *) ctx, data );
 8014fc8:	f002 bb02 	b.w	80175d0 <mbedtls_sha1_process>

08014fcc <sha1_clone_wrap>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 8014fcc:	f002 bae1 	b.w	8017592 <mbedtls_sha1_clone>

08014fd0 <sha1_ctx_free>:
{
 8014fd0:	b510      	push	{r4, lr}
 8014fd2:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8014fd4:	f002 fad3 	bl	801757e <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8014fd8:	4b02      	ldr	r3, [pc, #8]	; (8014fe4 <sha1_ctx_free+0x14>)
 8014fda:	4620      	mov	r0, r4
 8014fdc:	681b      	ldr	r3, [r3, #0]
}
 8014fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8014fe2:	4718      	bx	r3
 8014fe4:	200005a4 	.word	0x200005a4

08014fe8 <sha1_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8014fe8:	4b05      	ldr	r3, [pc, #20]	; (8015000 <sha1_ctx_alloc+0x18>)
{
 8014fea:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	215c      	movs	r1, #92	; 0x5c
 8014ff0:	2001      	movs	r0, #1
 8014ff2:	4798      	blx	r3
    if( ctx != NULL )
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	b108      	cbz	r0, 8014ffc <sha1_ctx_alloc+0x14>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8014ff8:	f002 fabd 	bl	8017576 <mbedtls_sha1_init>
}
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	bd10      	pop	{r4, pc}
 8015000:	200005a0 	.word	0x200005a0

08015004 <sha1_finish_wrap>:
    mbedtls_sha1_finish( (mbedtls_sha1_context *) ctx, output );
 8015004:	f003 ba2c 	b.w	8018460 <mbedtls_sha1_finish>

08015008 <sha1_update_wrap>:
    mbedtls_sha1_update( (mbedtls_sha1_context *) ctx, input, ilen );
 8015008:	f003 ba26 	b.w	8018458 <mbedtls_sha1_update>

0801500c <sha1_starts_wrap>:
    mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx );
 801500c:	f002 bac6 	b.w	801759c <mbedtls_sha1_starts>

08015010 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static void sha224_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha256_process( (mbedtls_sha256_context *) ctx, data );
 8015010:	f003 bb06 	b.w	8018620 <mbedtls_sha256_process>

08015014 <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 8015014:	f003 baad 	b.w	8018572 <mbedtls_sha256_clone>

08015018 <sha224_ctx_free>:
{
 8015018:	b510      	push	{r4, lr}
 801501a:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 801501c:	f003 fa9f 	bl	801855e <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8015020:	4b02      	ldr	r3, [pc, #8]	; (801502c <sha224_ctx_free+0x14>)
 8015022:	4620      	mov	r0, r4
 8015024:	681b      	ldr	r3, [r3, #0]
}
 8015026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801502a:	4718      	bx	r3
 801502c:	200005a4 	.word	0x200005a4

08015030 <sha224_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8015030:	4b05      	ldr	r3, [pc, #20]	; (8015048 <sha224_ctx_alloc+0x18>)
{
 8015032:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	216c      	movs	r1, #108	; 0x6c
 8015038:	2001      	movs	r0, #1
 801503a:	4798      	blx	r3
    if( ctx != NULL )
 801503c:	4604      	mov	r4, r0
 801503e:	b108      	cbz	r0, 8015044 <sha224_ctx_alloc+0x14>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8015040:	f003 fa89 	bl	8018556 <mbedtls_sha256_init>
}
 8015044:	4620      	mov	r0, r4
 8015046:	bd10      	pop	{r4, pc}
 8015048:	200005a0 	.word	0x200005a0

0801504c <sha224_wrap>:
    mbedtls_sha256( input, ilen, output, 1 );
 801504c:	2301      	movs	r3, #1
 801504e:	f003 bf11 	b.w	8018e74 <mbedtls_sha256>

08015052 <sha256_wrap>:
}

static void sha256_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha256( input, ilen, output, 0 );
 8015052:	2300      	movs	r3, #0
 8015054:	f003 bf0e 	b.w	8018e74 <mbedtls_sha256>

08015058 <sha224_finish_wrap>:
    mbedtls_sha256_finish( (mbedtls_sha256_context *) ctx, output );
 8015058:	f003 be8a 	b.w	8018d70 <mbedtls_sha256_finish>

0801505c <sha224_update_wrap>:
    mbedtls_sha256_update( (mbedtls_sha256_context *) ctx, input, ilen );
 801505c:	f003 be84 	b.w	8018d68 <mbedtls_sha256_update>

08015060 <sha224_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 1 );
 8015060:	2101      	movs	r1, #1
 8015062:	f003 ba8b 	b.w	801857c <mbedtls_sha256_starts>

08015066 <sha256_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 0 );
 8015066:	2100      	movs	r1, #0
 8015068:	f003 ba88 	b.w	801857c <mbedtls_sha256_starts>

0801506c <sha384_process_wrap>:
                    (const mbedtls_sha512_context *) src );
}

static void sha384_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha512_process( (mbedtls_sha512_context *) ctx, data );
 801506c:	f003 bfcc 	b.w	8019008 <mbedtls_sha512_process>

08015070 <sha384_clone_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 8015070:	f003 bf29 	b.w	8018ec6 <mbedtls_sha512_clone>

08015074 <sha384_ctx_free>:
{
 8015074:	b510      	push	{r4, lr}
 8015076:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8015078:	f003 ff1b 	bl	8018eb2 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 801507c:	4b02      	ldr	r3, [pc, #8]	; (8015088 <sha384_ctx_free+0x14>)
 801507e:	4620      	mov	r0, r4
 8015080:	681b      	ldr	r3, [r3, #0]
}
 8015082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015086:	4718      	bx	r3
 8015088:	200005a4 	.word	0x200005a4

0801508c <sha384_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 801508c:	4b05      	ldr	r3, [pc, #20]	; (80150a4 <sha384_ctx_alloc+0x18>)
{
 801508e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	21d8      	movs	r1, #216	; 0xd8
 8015094:	2001      	movs	r0, #1
 8015096:	4798      	blx	r3
    if( ctx != NULL )
 8015098:	4604      	mov	r4, r0
 801509a:	b108      	cbz	r0, 80150a0 <sha384_ctx_alloc+0x14>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 801509c:	f003 ff05 	bl	8018eaa <mbedtls_sha512_init>
}
 80150a0:	4620      	mov	r0, r4
 80150a2:	bd10      	pop	{r4, pc}
 80150a4:	200005a0 	.word	0x200005a0

080150a8 <sha384_wrap>:
    mbedtls_sha512( input, ilen, output, 1 );
 80150a8:	2301      	movs	r3, #1
 80150aa:	f004 bfd3 	b.w	801a054 <mbedtls_sha512>

080150ae <sha512_wrap>:
}

static void sha512_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha512( input, ilen, output, 0 );
 80150ae:	2300      	movs	r3, #0
 80150b0:	f004 bfd0 	b.w	801a054 <mbedtls_sha512>

080150b4 <sha384_finish_wrap>:
    mbedtls_sha512_finish( (mbedtls_sha512_context *) ctx, output );
 80150b4:	f004 beaa 	b.w	8019e0c <mbedtls_sha512_finish>

080150b8 <sha384_update_wrap>:
    mbedtls_sha512_update( (mbedtls_sha512_context *) ctx, input, ilen );
 80150b8:	f004 bea3 	b.w	8019e02 <mbedtls_sha512_update>

080150bc <sha384_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 1 );
 80150bc:	2101      	movs	r1, #1
 80150be:	f003 bf07 	b.w	8018ed0 <mbedtls_sha512_starts>

080150c2 <sha512_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 0 );
 80150c2:	2100      	movs	r1, #0
 80150c4:	f003 bf04 	b.w	8018ed0 <mbedtls_sha512_starts>

080150c8 <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80150c8:	b538      	push	{r3, r4, r5, lr}
 80150ca:	4605      	mov	r5, r0
 80150cc:	b180      	cbz	r0, 80150f0 <oid_sig_alg_from_asn1+0x28>
 80150ce:	4c09      	ldr	r4, [pc, #36]	; (80150f4 <oid_sig_alg_from_asn1+0x2c>)
 80150d0:	6820      	ldr	r0, [r4, #0]
 80150d2:	b910      	cbnz	r0, 80150da <oid_sig_alg_from_asn1+0x12>
 80150d4:	4604      	mov	r4, r0
 80150d6:	4620      	mov	r0, r4
 80150d8:	bd38      	pop	{r3, r4, r5, pc}
 80150da:	6862      	ldr	r2, [r4, #4]
 80150dc:	686b      	ldr	r3, [r5, #4]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d104      	bne.n	80150ec <oid_sig_alg_from_asn1+0x24>
 80150e2:	68a9      	ldr	r1, [r5, #8]
 80150e4:	f00d f8f0 	bl	80222c8 <memcmp>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d0f4      	beq.n	80150d6 <oid_sig_alg_from_asn1+0xe>
 80150ec:	3414      	adds	r4, #20
 80150ee:	e7ef      	b.n	80150d0 <oid_sig_alg_from_asn1+0x8>
 80150f0:	4604      	mov	r4, r0
 80150f2:	e7f0      	b.n	80150d6 <oid_sig_alg_from_asn1+0xe>
 80150f4:	0802bab8 	.word	0x0802bab8

080150f8 <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80150f8:	b570      	push	{r4, r5, r6, lr}
 80150fa:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80150fc:	4605      	mov	r5, r0
 80150fe:	b110      	cbz	r0, 8015106 <mbedtls_oid_get_attr_short_name+0xe>
 8015100:	4c09      	ldr	r4, [pc, #36]	; (8015128 <mbedtls_oid_get_attr_short_name+0x30>)
 8015102:	6820      	ldr	r0, [r4, #0]
 8015104:	b910      	cbnz	r0, 801510c <mbedtls_oid_get_attr_short_name+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8015106:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801510a:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 801510c:	6862      	ldr	r2, [r4, #4]
 801510e:	686b      	ldr	r3, [r5, #4]
 8015110:	429a      	cmp	r2, r3
 8015112:	d103      	bne.n	801511c <mbedtls_oid_get_attr_short_name+0x24>
 8015114:	68a9      	ldr	r1, [r5, #8]
 8015116:	f00d f8d7 	bl	80222c8 <memcmp>
 801511a:	b108      	cbz	r0, 8015120 <mbedtls_oid_get_attr_short_name+0x28>
 801511c:	3414      	adds	r4, #20
 801511e:	e7f0      	b.n	8015102 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8015120:	6923      	ldr	r3, [r4, #16]
 8015122:	6033      	str	r3, [r6, #0]
 8015124:	e7f1      	b.n	801510a <mbedtls_oid_get_attr_short_name+0x12>
 8015126:	bf00      	nop
 8015128:	0802bbd0 	.word	0x0802bbd0

0801512c <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 801512c:	b570      	push	{r4, r5, r6, lr}
 801512e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8015130:	4605      	mov	r5, r0
 8015132:	b110      	cbz	r0, 801513a <mbedtls_oid_get_x509_ext_type+0xe>
 8015134:	4c09      	ldr	r4, [pc, #36]	; (801515c <mbedtls_oid_get_x509_ext_type+0x30>)
 8015136:	6820      	ldr	r0, [r4, #0]
 8015138:	b910      	cbnz	r0, 8015140 <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 801513a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801513e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8015140:	6862      	ldr	r2, [r4, #4]
 8015142:	686b      	ldr	r3, [r5, #4]
 8015144:	429a      	cmp	r2, r3
 8015146:	d103      	bne.n	8015150 <mbedtls_oid_get_x509_ext_type+0x24>
 8015148:	68a9      	ldr	r1, [r5, #8]
 801514a:	f00d f8bd 	bl	80222c8 <memcmp>
 801514e:	b108      	cbz	r0, 8015154 <mbedtls_oid_get_x509_ext_type+0x28>
 8015150:	3414      	adds	r4, #20
 8015152:	e7f0      	b.n	8015136 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8015154:	6923      	ldr	r3, [r4, #16]
 8015156:	6033      	str	r3, [r6, #0]
 8015158:	e7f1      	b.n	801513e <mbedtls_oid_get_x509_ext_type+0x12>
 801515a:	bf00      	nop
 801515c:	0802bd60 	.word	0x0802bd60

08015160 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8015160:	b570      	push	{r4, r5, r6, lr}
 8015162:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8015164:	4605      	mov	r5, r0
 8015166:	b110      	cbz	r0, 801516e <mbedtls_oid_get_extended_key_usage+0xe>
 8015168:	4c09      	ldr	r4, [pc, #36]	; (8015190 <mbedtls_oid_get_extended_key_usage+0x30>)
 801516a:	6820      	ldr	r0, [r4, #0]
 801516c:	b910      	cbnz	r0, 8015174 <mbedtls_oid_get_extended_key_usage+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 801516e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015172:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8015174:	6862      	ldr	r2, [r4, #4]
 8015176:	686b      	ldr	r3, [r5, #4]
 8015178:	429a      	cmp	r2, r3
 801517a:	d103      	bne.n	8015184 <mbedtls_oid_get_extended_key_usage+0x24>
 801517c:	68a9      	ldr	r1, [r5, #8]
 801517e:	f00d f8a3 	bl	80222c8 <memcmp>
 8015182:	b108      	cbz	r0, 8015188 <mbedtls_oid_get_extended_key_usage+0x28>
 8015184:	3410      	adds	r4, #16
 8015186:	e7f0      	b.n	801516a <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8015188:	68e3      	ldr	r3, [r4, #12]
 801518a:	6033      	str	r3, [r6, #0]
 801518c:	e7f1      	b.n	8015172 <mbedtls_oid_get_extended_key_usage+0x12>
 801518e:	bf00      	nop
 8015190:	0802bdd8 	.word	0x0802bdd8

08015194 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8015194:	b510      	push	{r4, lr}
 8015196:	460c      	mov	r4, r1
 8015198:	f7ff ff96 	bl	80150c8 <oid_sig_alg_from_asn1>
 801519c:	b118      	cbz	r0, 80151a6 <mbedtls_oid_get_sig_alg_desc+0x12>
 801519e:	68c3      	ldr	r3, [r0, #12]
 80151a0:	6023      	str	r3, [r4, #0]
 80151a2:	2000      	movs	r0, #0
 80151a4:	bd10      	pop	{r4, pc}
 80151a6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80151aa:	e7fb      	b.n	80151a4 <mbedtls_oid_get_sig_alg_desc+0x10>

080151ac <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80151ac:	b538      	push	{r3, r4, r5, lr}
 80151ae:	460d      	mov	r5, r1
 80151b0:	4614      	mov	r4, r2
 80151b2:	f7ff ff89 	bl	80150c8 <oid_sig_alg_from_asn1>
 80151b6:	b128      	cbz	r0, 80151c4 <mbedtls_oid_get_sig_alg+0x18>
 80151b8:	7c03      	ldrb	r3, [r0, #16]
 80151ba:	702b      	strb	r3, [r5, #0]
 80151bc:	7c43      	ldrb	r3, [r0, #17]
 80151be:	7023      	strb	r3, [r4, #0]
 80151c0:	2000      	movs	r0, #0
 80151c2:	bd38      	pop	{r3, r4, r5, pc}
 80151c4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80151c8:	e7fb      	b.n	80151c2 <mbedtls_oid_get_sig_alg+0x16>
	...

080151cc <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80151cc:	b570      	push	{r4, r5, r6, lr}
 80151ce:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80151d0:	4605      	mov	r5, r0
 80151d2:	b110      	cbz	r0, 80151da <mbedtls_oid_get_pk_alg+0xe>
 80151d4:	4c09      	ldr	r4, [pc, #36]	; (80151fc <mbedtls_oid_get_pk_alg+0x30>)
 80151d6:	6820      	ldr	r0, [r4, #0]
 80151d8:	b910      	cbnz	r0, 80151e0 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80151da:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80151de:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80151e0:	6862      	ldr	r2, [r4, #4]
 80151e2:	686b      	ldr	r3, [r5, #4]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d103      	bne.n	80151f0 <mbedtls_oid_get_pk_alg+0x24>
 80151e8:	68a9      	ldr	r1, [r5, #8]
 80151ea:	f00d f86d 	bl	80222c8 <memcmp>
 80151ee:	b108      	cbz	r0, 80151f4 <mbedtls_oid_get_pk_alg+0x28>
 80151f0:	3414      	adds	r4, #20
 80151f2:	e7f0      	b.n	80151d6 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80151f4:	7c23      	ldrb	r3, [r4, #16]
 80151f6:	7033      	strb	r3, [r6, #0]
 80151f8:	e7f1      	b.n	80151de <mbedtls_oid_get_pk_alg+0x12>
 80151fa:	bf00      	nop
 80151fc:	0802be48 	.word	0x0802be48

08015200 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8015200:	b570      	push	{r4, r5, r6, lr}
 8015202:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 8015204:	4605      	mov	r5, r0
 8015206:	b110      	cbz	r0, 801520e <mbedtls_oid_get_ec_grp+0xe>
 8015208:	4c09      	ldr	r4, [pc, #36]	; (8015230 <mbedtls_oid_get_ec_grp+0x30>)
 801520a:	6820      	ldr	r0, [r4, #0]
 801520c:	b910      	cbnz	r0, 8015214 <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 801520e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015212:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 8015214:	6862      	ldr	r2, [r4, #4]
 8015216:	686b      	ldr	r3, [r5, #4]
 8015218:	429a      	cmp	r2, r3
 801521a:	d103      	bne.n	8015224 <mbedtls_oid_get_ec_grp+0x24>
 801521c:	68a9      	ldr	r1, [r5, #8]
 801521e:	f00d f853 	bl	80222c8 <memcmp>
 8015222:	b108      	cbz	r0, 8015228 <mbedtls_oid_get_ec_grp+0x28>
 8015224:	3414      	adds	r4, #20
 8015226:	e7f0      	b.n	801520a <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8015228:	7c23      	ldrb	r3, [r4, #16]
 801522a:	7033      	strb	r3, [r6, #0]
 801522c:	e7f1      	b.n	8015212 <mbedtls_oid_get_ec_grp+0x12>
 801522e:	bf00      	nop
 8015230:	0802be98 	.word	0x0802be98

08015234 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 8015234:	b570      	push	{r4, r5, r6, lr}
 8015236:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 8015238:	4605      	mov	r5, r0
 801523a:	b110      	cbz	r0, 8015242 <mbedtls_oid_get_md_alg+0xe>
 801523c:	4c09      	ldr	r4, [pc, #36]	; (8015264 <mbedtls_oid_get_md_alg+0x30>)
 801523e:	6820      	ldr	r0, [r4, #0]
 8015240:	b910      	cbnz	r0, 8015248 <mbedtls_oid_get_md_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 8015242:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015246:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 8015248:	6862      	ldr	r2, [r4, #4]
 801524a:	686b      	ldr	r3, [r5, #4]
 801524c:	429a      	cmp	r2, r3
 801524e:	d103      	bne.n	8015258 <mbedtls_oid_get_md_alg+0x24>
 8015250:	68a9      	ldr	r1, [r5, #8]
 8015252:	f00d f839 	bl	80222c8 <memcmp>
 8015256:	b108      	cbz	r0, 801525c <mbedtls_oid_get_md_alg+0x28>
 8015258:	3414      	adds	r4, #20
 801525a:	e7f0      	b.n	801523e <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 801525c:	7c23      	ldrb	r3, [r4, #16]
 801525e:	7033      	strb	r3, [r6, #0]
 8015260:	e7f1      	b.n	8015246 <mbedtls_oid_get_md_alg+0x12>
 8015262:	bf00      	nop
 8015264:	0802bf4c 	.word	0x0802bf4c

08015268 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8015268:	b530      	push	{r4, r5, lr}
 801526a:	4b08      	ldr	r3, [pc, #32]	; (801528c <mbedtls_oid_get_oid_by_md+0x24>)
 801526c:	681c      	ldr	r4, [r3, #0]
 801526e:	b914      	cbnz	r4, 8015276 <mbedtls_oid_get_oid_by_md+0xe>
 8015270:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015274:	e006      	b.n	8015284 <mbedtls_oid_get_oid_by_md+0x1c>
 8015276:	7c1d      	ldrb	r5, [r3, #16]
 8015278:	4285      	cmp	r5, r0
 801527a:	d104      	bne.n	8015286 <mbedtls_oid_get_oid_by_md+0x1e>
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	600c      	str	r4, [r1, #0]
 8015280:	2000      	movs	r0, #0
 8015282:	6013      	str	r3, [r2, #0]
 8015284:	bd30      	pop	{r4, r5, pc}
 8015286:	3314      	adds	r3, #20
 8015288:	e7f0      	b.n	801526c <mbedtls_oid_get_oid_by_md+0x4>
 801528a:	bf00      	nop
 801528c:	0802bf4c 	.word	0x0802bf4c

08015290 <pem_aes_decrypt>:
 * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
 */
static void pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
                               unsigned char *buf, size_t buflen,
                               const unsigned char *pwd, size_t pwdlen )
{
 8015290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015294:	b0eb      	sub	sp, #428	; 0x1ac
 8015296:	4607      	mov	r7, r0
    mbedtls_aes_context aes_ctx;
    unsigned char aes_key[32];

    mbedtls_aes_init( &aes_ctx );
 8015298:	a824      	add	r0, sp, #144	; 0x90
{
 801529a:	4699      	mov	r9, r3
 801529c:	460e      	mov	r6, r1
 801529e:	4690      	mov	r8, r2
    mbedtls_aes_init( &aes_ctx );
 80152a0:	f7f7 ff4f 	bl	800d142 <mbedtls_aes_init>
    mbedtls_md5_init( &md5_ctx );
 80152a4:	a80e      	add	r0, sp, #56	; 0x38
 80152a6:	f7ff fa3f 	bl	8014728 <mbedtls_md5_init>
    mbedtls_md5_starts( &md5_ctx );
 80152aa:	a80e      	add	r0, sp, #56	; 0x38
 80152ac:	f7ff fa50 	bl	8014750 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 80152b0:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 80152b2:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 80152b4:	a80e      	add	r0, sp, #56	; 0x38
 80152b6:	f7ff fdeb 	bl	8014e90 <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 80152ba:	ac02      	add	r4, sp, #8
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 80152bc:	2208      	movs	r2, #8
 80152be:	4639      	mov	r1, r7
 80152c0:	a80e      	add	r0, sp, #56	; 0x38
 80152c2:	f7ff fde5 	bl	8014e90 <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 80152c6:	4621      	mov	r1, r4
 80152c8:	a80e      	add	r0, sp, #56	; 0x38
 80152ca:	f7ff fde5 	bl	8014e98 <mbedtls_md5_finish>
        memcpy( key, md5sum, keylen );
 80152ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80152d2:	ad06      	add	r5, sp, #24
    if( keylen <= 16 )
 80152d4:	2e10      	cmp	r6, #16
        memcpy( key, md5sum, keylen );
 80152d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        mbedtls_md5_free( &md5_ctx );
 80152da:	a80e      	add	r0, sp, #56	; 0x38
    if( keylen <= 16 )
 80152dc:	d121      	bne.n	8015322 <pem_aes_decrypt+0x92>
        mbedtls_md5_free( &md5_ctx );
 80152de:	f7ff fa27 	bl	8014730 <mbedtls_md5_free>
 80152e2:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80152e4:	4619      	mov	r1, r3
 80152e6:	18e2      	adds	r2, r4, r3
 80152e8:	3301      	adds	r3, #1
 80152ea:	2b11      	cmp	r3, #17
 80152ec:	d117      	bne.n	801531e <pem_aes_decrypt+0x8e>

    pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen );

    mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 );
 80152ee:	ac06      	add	r4, sp, #24
 80152f0:	00f2      	lsls	r2, r6, #3
 80152f2:	4621      	mov	r1, r4
 80152f4:	a824      	add	r0, sp, #144	; 0x90
 80152f6:	f7f8 f83d 	bl	800d374 <mbedtls_aes_setkey_dec>
    mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
 80152fa:	463b      	mov	r3, r7
 80152fc:	464a      	mov	r2, r9
 80152fe:	2100      	movs	r1, #0
 8015300:	e9cd 8800 	strd	r8, r8, [sp]
 8015304:	a824      	add	r0, sp, #144	; 0x90
 8015306:	f7f8 fc36 	bl	800db76 <mbedtls_aes_crypt_cbc>
                     aes_iv, buf, buf );

    mbedtls_aes_free( &aes_ctx );
 801530a:	a824      	add	r0, sp, #144	; 0x90
 801530c:	f7f7 ff1e 	bl	800d14c <mbedtls_aes_free>
 8015310:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015312:	461a      	mov	r2, r3
 8015314:	429e      	cmp	r6, r3
 8015316:	d12d      	bne.n	8015374 <pem_aes_decrypt+0xe4>
    mbedtls_zeroize( aes_key, keylen );
}
 8015318:	b06b      	add	sp, #428	; 0x1ac
 801531a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801531e:	7011      	strb	r1, [r2, #0]
 8015320:	e7e1      	b.n	80152e6 <pem_aes_decrypt+0x56>
    mbedtls_md5_starts( &md5_ctx );
 8015322:	f7ff fa15 	bl	8014750 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, md5sum,  16 );
 8015326:	2210      	movs	r2, #16
 8015328:	4621      	mov	r1, r4
 801532a:	a80e      	add	r0, sp, #56	; 0x38
 801532c:	f7ff fdb0 	bl	8014e90 <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 8015330:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 8015332:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 8015334:	a80e      	add	r0, sp, #56	; 0x38
 8015336:	f7ff fdab 	bl	8014e90 <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 801533a:	2208      	movs	r2, #8
 801533c:	4639      	mov	r1, r7
 801533e:	a80e      	add	r0, sp, #56	; 0x38
 8015340:	f7ff fda6 	bl	8014e90 <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 8015344:	4621      	mov	r1, r4
 8015346:	a80e      	add	r0, sp, #56	; 0x38
 8015348:	f7ff fda6 	bl	8014e98 <mbedtls_md5_finish>
    if( keylen < 32 )
 801534c:	2e20      	cmp	r6, #32
    memcpy( key + 16, md5sum, use_len );
 801534e:	4621      	mov	r1, r4
        use_len = keylen - 16;
 8015350:	bf14      	ite	ne
 8015352:	f1a6 0210 	subne.w	r2, r6, #16
    use_len = 16;
 8015356:	2210      	moveq	r2, #16
    memcpy( key + 16, md5sum, use_len );
 8015358:	a80a      	add	r0, sp, #40	; 0x28
 801535a:	f00c ffc4 	bl	80222e6 <memcpy>
    mbedtls_md5_free( &md5_ctx );
 801535e:	a80e      	add	r0, sp, #56	; 0x38
 8015360:	f7ff f9e6 	bl	8014730 <mbedtls_md5_free>
 8015364:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015366:	4619      	mov	r1, r3
 8015368:	18e2      	adds	r2, r4, r3
 801536a:	3301      	adds	r3, #1
 801536c:	2b11      	cmp	r3, #17
 801536e:	d0be      	beq.n	80152ee <pem_aes_decrypt+0x5e>
 8015370:	7011      	strb	r1, [r2, #0]
 8015372:	e7f9      	b.n	8015368 <pem_aes_decrypt+0xd8>
 8015374:	54e2      	strb	r2, [r4, r3]
 8015376:	3301      	adds	r3, #1
 8015378:	e7cc      	b.n	8015314 <pem_aes_decrypt+0x84>

0801537a <mbedtls_pem_init>:
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 801537a:	2300      	movs	r3, #0
 801537c:	6003      	str	r3, [r0, #0]
 801537e:	6043      	str	r3, [r0, #4]
 8015380:	6083      	str	r3, [r0, #8]
}
 8015382:	4770      	bx	lr

08015384 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8015384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015388:	b089      	sub	sp, #36	; 0x24
 801538a:	460d      	mov	r5, r1
 801538c:	4693      	mov	fp, r2
 801538e:	469a      	mov	sl, r3
 8015390:	e9dd 6812 	ldrd	r6, r8, [sp, #72]	; 0x48
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8015394:	4607      	mov	r7, r0
 8015396:	2800      	cmp	r0, #0
 8015398:	f000 8121 	beq.w	80155de <mbedtls_pem_read_buffer+0x25a>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 801539c:	4618      	mov	r0, r3
 801539e:	f00e fa80 	bl	80238a2 <strstr>

    if( s1 == NULL )
 80153a2:	4604      	mov	r4, r0
 80153a4:	2800      	cmp	r0, #0
 80153a6:	f000 811c 	beq.w	80155e2 <mbedtls_pem_read_buffer+0x25e>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 80153aa:	4659      	mov	r1, fp
 80153ac:	4650      	mov	r0, sl
 80153ae:	f00e fa78 	bl	80238a2 <strstr>

    if( s2 == NULL || s2 <= s1 )
 80153b2:	4681      	mov	r9, r0
 80153b4:	2800      	cmp	r0, #0
 80153b6:	f000 8114 	beq.w	80155e2 <mbedtls_pem_read_buffer+0x25e>
 80153ba:	4284      	cmp	r4, r0
 80153bc:	f080 8111 	bcs.w	80155e2 <mbedtls_pem_read_buffer+0x25e>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 80153c0:	4628      	mov	r0, r5
 80153c2:	f7ea ff0f 	bl	80001e4 <strlen>
    if( *s1 == ' '  ) s1++;
 80153c6:	5c23      	ldrb	r3, [r4, r0]
    s1 += strlen( header );
 80153c8:	1825      	adds	r5, r4, r0
    if( *s1 == ' '  ) s1++;
 80153ca:	2b20      	cmp	r3, #32
 80153cc:	bf08      	it	eq
 80153ce:	3501      	addeq	r5, #1
    if( *s1 == '\r' ) s1++;
 80153d0:	782b      	ldrb	r3, [r5, #0]
 80153d2:	2b0d      	cmp	r3, #13
 80153d4:	bf08      	it	eq
 80153d6:	3501      	addeq	r5, #1
    if( *s1 == '\n' ) s1++;
 80153d8:	782b      	ldrb	r3, [r5, #0]
 80153da:	2b0a      	cmp	r3, #10
 80153dc:	f040 8101 	bne.w	80155e2 <mbedtls_pem_read_buffer+0x25e>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80153e0:	4658      	mov	r0, fp
 80153e2:	f7ea feff 	bl	80001e4 <strlen>
    if( *end == ' '  ) end++;
 80153e6:	f819 2000 	ldrb.w	r2, [r9, r0]
    end += strlen( footer );
 80153ea:	eb09 0300 	add.w	r3, r9, r0
    if( *end == ' '  ) end++;
 80153ee:	2a20      	cmp	r2, #32
 80153f0:	bf08      	it	eq
 80153f2:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 80153f4:	1c6c      	adds	r4, r5, #1
    if( *end == '\r' ) end++;
 80153f6:	781a      	ldrb	r2, [r3, #0]
 80153f8:	2a0d      	cmp	r2, #13
 80153fa:	bf08      	it	eq
 80153fc:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 80153fe:	781a      	ldrb	r2, [r3, #0]
 8015400:	2a0a      	cmp	r2, #10
 8015402:	bf08      	it	eq
 8015404:	3301      	addeq	r3, #1
    *use_len = end - data;
 8015406:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015408:	eba3 030a 	sub.w	r3, r3, sl
 801540c:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 801540e:	eba9 0304 	sub.w	r3, r9, r4
 8015412:	2b15      	cmp	r3, #21
 8015414:	f340 80a6 	ble.w	8015564 <mbedtls_pem_read_buffer+0x1e0>
 8015418:	2216      	movs	r2, #22
 801541a:	4976      	ldr	r1, [pc, #472]	; (80155f4 <mbedtls_pem_read_buffer+0x270>)
 801541c:	4620      	mov	r0, r4
 801541e:	f00c ff53 	bl	80222c8 <memcmp>
 8015422:	2800      	cmp	r0, #0
 8015424:	f040 809e 	bne.w	8015564 <mbedtls_pem_read_buffer+0x1e0>
#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
        enc++;

        s1 += 22;
        if( *s1 == '\r' ) s1++;
 8015428:	7deb      	ldrb	r3, [r5, #23]
 801542a:	2b0d      	cmp	r3, #13
 801542c:	bf0a      	itet	eq
 801542e:	7e2b      	ldrbeq	r3, [r5, #24]
        s1 += 22;
 8015430:	f105 0417 	addne.w	r4, r5, #23
        if( *s1 == '\r' ) s1++;
 8015434:	f105 0418 	addeq.w	r4, r5, #24
        if( *s1 == '\n' ) s1++;
 8015438:	2b0a      	cmp	r3, #10
 801543a:	d004      	beq.n	8015446 <mbedtls_pem_read_buffer+0xc2>
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
 801543c:	4c6e      	ldr	r4, [pc, #440]	; (80155f8 <mbedtls_pem_read_buffer+0x274>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 801543e:	4620      	mov	r0, r4
 8015440:	b009      	add	sp, #36	; 0x24
 8015442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *s1 == '\n' ) s1++;
 8015446:	1c65      	adds	r5, r4, #1
        if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
 8015448:	eba9 0a05 	sub.w	sl, r9, r5
 801544c:	f1ba 0f0d 	cmp.w	sl, #13
 8015450:	f340 80c9 	ble.w	80155e6 <mbedtls_pem_read_buffer+0x262>
 8015454:	220e      	movs	r2, #14
 8015456:	4969      	ldr	r1, [pc, #420]	; (80155fc <mbedtls_pem_read_buffer+0x278>)
 8015458:	4628      	mov	r0, r5
 801545a:	f00c ff35 	bl	80222c8 <memcmp>
 801545e:	2800      	cmp	r0, #0
 8015460:	f040 80c1 	bne.w	80155e6 <mbedtls_pem_read_buffer+0x262>
            if( s2 - s1 < 22 )
 8015464:	f1ba 0f15 	cmp.w	sl, #21
 8015468:	f340 80bd 	ble.w	80155e6 <mbedtls_pem_read_buffer+0x262>
            else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
 801546c:	2216      	movs	r2, #22
 801546e:	4964      	ldr	r1, [pc, #400]	; (8015600 <mbedtls_pem_read_buffer+0x27c>)
 8015470:	4628      	mov	r0, r5
 8015472:	f00c ff29 	bl	80222c8 <memcmp>
 8015476:	b1b0      	cbz	r0, 80154a6 <mbedtls_pem_read_buffer+0x122>
            else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
 8015478:	2216      	movs	r2, #22
 801547a:	4962      	ldr	r1, [pc, #392]	; (8015604 <mbedtls_pem_read_buffer+0x280>)
 801547c:	4628      	mov	r0, r5
 801547e:	f00c ff23 	bl	80222c8 <memcmp>
 8015482:	b190      	cbz	r0, 80154aa <mbedtls_pem_read_buffer+0x126>
            else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
 8015484:	2216      	movs	r2, #22
 8015486:	4960      	ldr	r1, [pc, #384]	; (8015608 <mbedtls_pem_read_buffer+0x284>)
 8015488:	4628      	mov	r0, r5
 801548a:	f00c ff1d 	bl	80222c8 <memcmp>
 801548e:	2800      	cmp	r0, #0
 8015490:	f040 80a9 	bne.w	80155e6 <mbedtls_pem_read_buffer+0x262>
                enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
 8015494:	2507      	movs	r5, #7
            s1 += 22;
 8015496:	f104 0b17 	add.w	fp, r4, #23
            if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
 801549a:	eba9 030b 	sub.w	r3, r9, fp
 801549e:	2b1f      	cmp	r3, #31
 80154a0:	dc05      	bgt.n	80154ae <mbedtls_pem_read_buffer+0x12a>
                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
 80154a2:	4c5a      	ldr	r4, [pc, #360]	; (801560c <mbedtls_pem_read_buffer+0x288>)
 80154a4:	e7cb      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
 80154a6:	2505      	movs	r5, #5
 80154a8:	e7f5      	b.n	8015496 <mbedtls_pem_read_buffer+0x112>
                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
 80154aa:	2506      	movs	r5, #6
 80154ac:	e7f3      	b.n	8015496 <mbedtls_pem_read_buffer+0x112>
    memset( iv, 0, iv_len );
 80154ae:	f10d 0a10 	add.w	sl, sp, #16
 80154b2:	2210      	movs	r2, #16
 80154b4:	2100      	movs	r1, #0
 80154b6:	4650      	mov	r0, sl
 80154b8:	f00c ff39 	bl	802232e <memset>
    for( i = 0; i < iv_len * 2; i++, s++ )
 80154bc:	2200      	movs	r2, #0
        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
 80154be:	f81b 1002 	ldrb.w	r1, [fp, r2]
 80154c2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80154c6:	b2d8      	uxtb	r0, r3
 80154c8:	2809      	cmp	r0, #9
 80154ca:	d905      	bls.n	80154d8 <mbedtls_pem_read_buffer+0x154>
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 80154cc:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80154d0:	2b05      	cmp	r3, #5
 80154d2:	d813      	bhi.n	80154fc <mbedtls_pem_read_buffer+0x178>
 80154d4:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80154d8:	0850      	lsrs	r0, r2, #1
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 80154da:	07d1      	lsls	r1, r2, #31
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80154dc:	f81a 1000 	ldrb.w	r1, [sl, r0]
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 80154e0:	bf58      	it	pl
 80154e2:	011b      	lslpl	r3, r3, #4
    for( i = 0; i < iv_len * 2; i++, s++ )
 80154e4:	3201      	adds	r2, #1
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80154e6:	430b      	orrs	r3, r1
    for( i = 0; i < iv_len * 2; i++, s++ )
 80154e8:	2a20      	cmp	r2, #32
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80154ea:	f80a 3000 	strb.w	r3, [sl, r0]
    for( i = 0; i < iv_len * 2; i++, s++ )
 80154ee:	d1e6      	bne.n	80154be <mbedtls_pem_read_buffer+0x13a>
        if( *s1 == '\r' ) s1++;
 80154f0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80154f4:	2b0d      	cmp	r3, #13
 80154f6:	d008      	beq.n	801550a <mbedtls_pem_read_buffer+0x186>
            s1 += 32;
 80154f8:	3437      	adds	r4, #55	; 0x37
 80154fa:	e007      	b.n	801550c <mbedtls_pem_read_buffer+0x188>
        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
 80154fc:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8015500:	2b05      	cmp	r3, #5
 8015502:	d8ce      	bhi.n	80154a2 <mbedtls_pem_read_buffer+0x11e>
 8015504:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
 8015508:	e7e6      	b.n	80154d8 <mbedtls_pem_read_buffer+0x154>
        if( *s1 == '\r' ) s1++;
 801550a:	3438      	adds	r4, #56	; 0x38
        if( *s1 == '\n' ) s1++;
 801550c:	7823      	ldrb	r3, [r4, #0]
 801550e:	2b0a      	cmp	r3, #10
 8015510:	d194      	bne.n	801543c <mbedtls_pem_read_buffer+0xb8>
 8015512:	3401      	adds	r4, #1
        enc++;
 8015514:	f04f 0a01 	mov.w	sl, #1
    if( s1 >= s2 )
 8015518:	454c      	cmp	r4, r9
 801551a:	d28f      	bcs.n	801543c <mbedtls_pem_read_buffer+0xb8>
    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 801551c:	2100      	movs	r1, #0
 801551e:	eba9 0904 	sub.w	r9, r9, r4
 8015522:	f8cd 9000 	str.w	r9, [sp]
 8015526:	4623      	mov	r3, r4
 8015528:	aa03      	add	r2, sp, #12
 801552a:	4608      	mov	r0, r1
 801552c:	f7f8 fdae 	bl	800e08c <mbedtls_base64_decode>
    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 8015530:	302c      	adds	r0, #44	; 0x2c
 8015532:	d05a      	beq.n	80155ea <mbedtls_pem_read_buffer+0x266>
    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8015534:	4b36      	ldr	r3, [pc, #216]	; (8015610 <mbedtls_pem_read_buffer+0x28c>)
 8015536:	9903      	ldr	r1, [sp, #12]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	2001      	movs	r0, #1
 801553c:	4798      	blx	r3
 801553e:	4683      	mov	fp, r0
 8015540:	2800      	cmp	r0, #0
 8015542:	d054      	beq.n	80155ee <mbedtls_pem_read_buffer+0x26a>
    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8015544:	4623      	mov	r3, r4
 8015546:	f8cd 9000 	str.w	r9, [sp]
 801554a:	aa03      	add	r2, sp, #12
 801554c:	9903      	ldr	r1, [sp, #12]
 801554e:	f7f8 fd9d 	bl	800e08c <mbedtls_base64_decode>
 8015552:	4604      	mov	r4, r0
 8015554:	b148      	cbz	r0, 801556a <mbedtls_pem_read_buffer+0x1e6>
        mbedtls_free( buf );
 8015556:	4b2f      	ldr	r3, [pc, #188]	; (8015614 <mbedtls_pem_read_buffer+0x290>)
 8015558:	4658      	mov	r0, fp
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	4798      	blx	r3
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 801555e:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100
 8015562:	e76c      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
    mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
 8015564:	2500      	movs	r5, #0
    enc = 0;
 8015566:	46aa      	mov	sl, r5
 8015568:	e7d6      	b.n	8015518 <mbedtls_pem_read_buffer+0x194>
    if( enc != 0 )
 801556a:	f1ba 0f00 	cmp.w	sl, #0
 801556e:	d031      	beq.n	80155d4 <mbedtls_pem_read_buffer+0x250>
        if( pwd == NULL )
 8015570:	b92e      	cbnz	r6, 801557e <mbedtls_pem_read_buffer+0x1fa>
            mbedtls_free( buf );
 8015572:	4b28      	ldr	r3, [pc, #160]	; (8015614 <mbedtls_pem_read_buffer+0x290>)
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 8015574:	4c28      	ldr	r4, [pc, #160]	; (8015618 <mbedtls_pem_read_buffer+0x294>)
            mbedtls_free( buf );
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4658      	mov	r0, fp
 801557a:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 801557c:	e75f      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
        if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
 801557e:	2d05      	cmp	r5, #5
 8015580:	9b03      	ldr	r3, [sp, #12]
 8015582:	d118      	bne.n	80155b6 <mbedtls_pem_read_buffer+0x232>
            pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
 8015584:	e9cd 6800 	strd	r6, r8, [sp]
 8015588:	2110      	movs	r1, #16
 801558a:	465a      	mov	r2, fp
 801558c:	eb0d 0001 	add.w	r0, sp, r1
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 8015590:	f7ff fe7e 	bl	8015290 <pem_aes_decrypt>
        if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
 8015594:	9b03      	ldr	r3, [sp, #12]
 8015596:	2b02      	cmp	r3, #2
 8015598:	d907      	bls.n	80155aa <mbedtls_pem_read_buffer+0x226>
 801559a:	f89b 3000 	ldrb.w	r3, [fp]
 801559e:	2b30      	cmp	r3, #48	; 0x30
 80155a0:	d103      	bne.n	80155aa <mbedtls_pem_read_buffer+0x226>
 80155a2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80155a6:	2b83      	cmp	r3, #131	; 0x83
 80155a8:	d914      	bls.n	80155d4 <mbedtls_pem_read_buffer+0x250>
            mbedtls_free( buf );
 80155aa:	4b1a      	ldr	r3, [pc, #104]	; (8015614 <mbedtls_pem_read_buffer+0x290>)
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 80155ac:	4c1b      	ldr	r4, [pc, #108]	; (801561c <mbedtls_pem_read_buffer+0x298>)
            mbedtls_free( buf );
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	4658      	mov	r0, fp
 80155b2:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 80155b4:	e743      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
        else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
 80155b6:	2d06      	cmp	r5, #6
 80155b8:	d105      	bne.n	80155c6 <mbedtls_pem_read_buffer+0x242>
            pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
 80155ba:	e9cd 6800 	strd	r6, r8, [sp]
 80155be:	465a      	mov	r2, fp
 80155c0:	2118      	movs	r1, #24
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 80155c2:	a804      	add	r0, sp, #16
 80155c4:	e7e4      	b.n	8015590 <mbedtls_pem_read_buffer+0x20c>
        else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
 80155c6:	2d07      	cmp	r5, #7
 80155c8:	d1e4      	bne.n	8015594 <mbedtls_pem_read_buffer+0x210>
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 80155ca:	e9cd 6800 	strd	r6, r8, [sp]
 80155ce:	465a      	mov	r2, fp
 80155d0:	2120      	movs	r1, #32
 80155d2:	e7f6      	b.n	80155c2 <mbedtls_pem_read_buffer+0x23e>
    ctx->buflen = len;
 80155d4:	9b03      	ldr	r3, [sp, #12]
    ctx->buf = buf;
 80155d6:	f8c7 b000 	str.w	fp, [r7]
    ctx->buflen = len;
 80155da:	607b      	str	r3, [r7, #4]
    return( 0 );
 80155dc:	e72f      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 80155de:	4c10      	ldr	r4, [pc, #64]	; (8015620 <mbedtls_pem_read_buffer+0x29c>)
 80155e0:	e72d      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 80155e2:	4c10      	ldr	r4, [pc, #64]	; (8015624 <mbedtls_pem_read_buffer+0x2a0>)
 80155e4:	e72b      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
            return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
 80155e6:	4c10      	ldr	r4, [pc, #64]	; (8015628 <mbedtls_pem_read_buffer+0x2a4>)
 80155e8:	e729      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80155ea:	4c10      	ldr	r4, [pc, #64]	; (801562c <mbedtls_pem_read_buffer+0x2a8>)
 80155ec:	e727      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 80155ee:	4c10      	ldr	r4, [pc, #64]	; (8015630 <mbedtls_pem_read_buffer+0x2ac>)
 80155f0:	e725      	b.n	801543e <mbedtls_pem_read_buffer+0xba>
 80155f2:	bf00      	nop
 80155f4:	080304d1 	.word	0x080304d1
 80155f8:	ffffef00 	.word	0xffffef00
 80155fc:	080304e8 	.word	0x080304e8
 8015600:	080304f7 	.word	0x080304f7
 8015604:	0803050e 	.word	0x0803050e
 8015608:	08030525 	.word	0x08030525
 801560c:	ffffee00 	.word	0xffffee00
 8015610:	200005a0 	.word	0x200005a0
 8015614:	200005a4 	.word	0x200005a4
 8015618:	ffffed00 	.word	0xffffed00
 801561c:	ffffec80 	.word	0xffffec80
 8015620:	ffffeb80 	.word	0xffffeb80
 8015624:	ffffef80 	.word	0xffffef80
 8015628:	ffffed80 	.word	0xffffed80
 801562c:	ffffeed4 	.word	0xffffeed4
 8015630:	ffffee80 	.word	0xffffee80

08015634 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 8015634:	b538      	push	{r3, r4, r5, lr}
    mbedtls_free( ctx->buf );
 8015636:	4d08      	ldr	r5, [pc, #32]	; (8015658 <mbedtls_pem_free+0x24>)
{
 8015638:	4604      	mov	r4, r0
    mbedtls_free( ctx->buf );
 801563a:	682b      	ldr	r3, [r5, #0]
 801563c:	6800      	ldr	r0, [r0, #0]
 801563e:	4798      	blx	r3
    mbedtls_free( ctx->info );
 8015640:	682b      	ldr	r3, [r5, #0]
 8015642:	68a0      	ldr	r0, [r4, #8]
 8015644:	4798      	blx	r3
 8015646:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801564a:	2200      	movs	r2, #0
 801564c:	429c      	cmp	r4, r3
 801564e:	d100      	bne.n	8015652 <mbedtls_pem_free+0x1e>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
}
 8015650:	bd38      	pop	{r3, r4, r5, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015652:	7022      	strb	r2, [r4, #0]
 8015654:	3401      	adds	r4, #1
 8015656:	e7f9      	b.n	801564c <mbedtls_pem_free+0x18>
 8015658:	200005a4 	.word	0x200005a4

0801565c <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 801565c:	b110      	cbz	r0, 8015664 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 801565e:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 8015660:	e9c0 3300 	strd	r3, r3, [r0]
}
 8015664:	4770      	bx	lr

08015666 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 8015666:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015668:	4604      	mov	r4, r0
 801566a:	b148      	cbz	r0, 8015680 <mbedtls_pk_free+0x1a>
 801566c:	6803      	ldr	r3, [r0, #0]
 801566e:	b13b      	cbz	r3, 8015680 <mbedtls_pk_free+0x1a>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 8015670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015672:	6840      	ldr	r0, [r0, #4]
 8015674:	4798      	blx	r3
 8015676:	f104 0308 	add.w	r3, r4, #8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801567a:	2200      	movs	r2, #0
 801567c:	429c      	cmp	r4, r3
 801567e:	d100      	bne.n	8015682 <mbedtls_pk_free+0x1c>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );
}
 8015680:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015682:	7022      	strb	r2, [r4, #0]
 8015684:	3401      	adds	r4, #1
 8015686:	e7f9      	b.n	801567c <mbedtls_pk_free+0x16>

08015688 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 8015688:	3801      	subs	r0, #1
 801568a:	b2c0      	uxtb	r0, r0
 801568c:	2803      	cmp	r0, #3
 801568e:	bf9a      	itte	ls
 8015690:	4b02      	ldrls	r3, [pc, #8]	; (801569c <mbedtls_pk_info_from_type+0x14>)
 8015692:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015696:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	0802bfe4 	.word	0x0802bfe4

080156a0 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 80156a0:	b570      	push	{r4, r5, r6, lr}
 80156a2:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 80156a4:	4605      	mov	r5, r0
 80156a6:	b148      	cbz	r0, 80156bc <mbedtls_pk_setup+0x1c>
 80156a8:	b141      	cbz	r1, 80156bc <mbedtls_pk_setup+0x1c>
 80156aa:	6804      	ldr	r4, [r0, #0]
 80156ac:	b934      	cbnz	r4, 80156bc <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 80156ae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80156b0:	4798      	blx	r3
 80156b2:	6068      	str	r0, [r5, #4]
 80156b4:	b120      	cbz	r0, 80156c0 <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 80156b6:	602e      	str	r6, [r5, #0]

    return( 0 );
 80156b8:	4620      	mov	r0, r4
}
 80156ba:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80156bc:	4801      	ldr	r0, [pc, #4]	; (80156c4 <mbedtls_pk_setup+0x24>)
 80156be:	e7fc      	b.n	80156ba <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80156c0:	4801      	ldr	r0, [pc, #4]	; (80156c8 <mbedtls_pk_setup+0x28>)
 80156c2:	e7fa      	b.n	80156ba <mbedtls_pk_setup+0x1a>
 80156c4:	ffffc180 	.word	0xffffc180
 80156c8:	ffffc080 	.word	0xffffc080

080156cc <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 80156cc:	b120      	cbz	r0, 80156d8 <mbedtls_pk_can_do+0xc>
 80156ce:	6803      	ldr	r3, [r0, #0]
 80156d0:	b113      	cbz	r3, 80156d8 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	4608      	mov	r0, r1
 80156d6:	4718      	bx	r3
}
 80156d8:	2000      	movs	r0, #0
 80156da:	4770      	bx	lr

080156dc <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 80156dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156e0:	460e      	mov	r6, r1
 80156e2:	4617      	mov	r7, r2
 80156e4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL ||
 80156e8:	4604      	mov	r4, r0
 80156ea:	b910      	cbnz	r0, 80156f2 <mbedtls_pk_verify+0x16>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80156ec:	480e      	ldr	r0, [pc, #56]	; (8015728 <mbedtls_pk_verify+0x4c>)
    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
}
 80156ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 80156f2:	6802      	ldr	r2, [r0, #0]
 80156f4:	2a00      	cmp	r2, #0
 80156f6:	d0f9      	beq.n	80156ec <mbedtls_pk_verify+0x10>
    if( *hash_len != 0 )
 80156f8:	b93b      	cbnz	r3, 801570a <mbedtls_pk_verify+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80156fa:	4608      	mov	r0, r1
 80156fc:	f7fe febe 	bl	801447c <mbedtls_md_info_from_type>
 8015700:	2800      	cmp	r0, #0
 8015702:	d0f3      	beq.n	80156ec <mbedtls_pk_verify+0x10>
    *hash_len = mbedtls_md_get_size( md_info );
 8015704:	f7ff f80a 	bl	801471c <mbedtls_md_get_size>
 8015708:	4603      	mov	r3, r0
    if( ctx->pk_info->verify_func == NULL )
 801570a:	6822      	ldr	r2, [r4, #0]
 801570c:	6915      	ldr	r5, [r2, #16]
 801570e:	b145      	cbz	r5, 8015722 <mbedtls_pk_verify+0x46>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015710:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8015714:	463a      	mov	r2, r7
 8015716:	4631      	mov	r1, r6
 8015718:	6860      	ldr	r0, [r4, #4]
 801571a:	46ac      	mov	ip, r5
}
 801571c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015720:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015722:	4802      	ldr	r0, [pc, #8]	; (801572c <mbedtls_pk_verify+0x50>)
 8015724:	e7e3      	b.n	80156ee <mbedtls_pk_verify+0x12>
 8015726:	bf00      	nop
 8015728:	ffffc180 	.word	0xffffc180
 801572c:	ffffc100 	.word	0xffffc100

08015730 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015734:	460d      	mov	r5, r1
 8015736:	4616      	mov	r6, r2
 8015738:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 801573c:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015740:	4604      	mov	r4, r0
 8015742:	b910      	cbnz	r0, 801574a <mbedtls_pk_sign+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015744:	4810      	ldr	r0, [pc, #64]	; (8015788 <mbedtls_pk_sign+0x58>)
    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
}
 8015746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 801574a:	6802      	ldr	r2, [r0, #0]
 801574c:	2a00      	cmp	r2, #0
 801574e:	d0f9      	beq.n	8015744 <mbedtls_pk_sign+0x14>
    if( *hash_len != 0 )
 8015750:	b93b      	cbnz	r3, 8015762 <mbedtls_pk_sign+0x32>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8015752:	4608      	mov	r0, r1
 8015754:	f7fe fe92 	bl	801447c <mbedtls_md_info_from_type>
 8015758:	2800      	cmp	r0, #0
 801575a:	d0f3      	beq.n	8015744 <mbedtls_pk_sign+0x14>
    *hash_len = mbedtls_md_get_size( md_info );
 801575c:	f7fe ffde 	bl	801471c <mbedtls_md_get_size>
 8015760:	4603      	mov	r3, r0
    if( ctx->pk_info->sign_func == NULL )
 8015762:	6822      	ldr	r2, [r4, #0]
 8015764:	f8d2 e014 	ldr.w	lr, [r2, #20]
 8015768:	f1be 0f00 	cmp.w	lr, #0
 801576c:	d00a      	beq.n	8015784 <mbedtls_pk_sign+0x54>
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 801576e:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8015772:	e9cd 7808 	strd	r7, r8, [sp, #32]
 8015776:	4632      	mov	r2, r6
 8015778:	4629      	mov	r1, r5
 801577a:	6860      	ldr	r0, [r4, #4]
 801577c:	46f4      	mov	ip, lr
}
 801577e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015782:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015784:	4801      	ldr	r0, [pc, #4]	; (801578c <mbedtls_pk_sign+0x5c>)
 8015786:	e7de      	b.n	8015746 <mbedtls_pk_sign+0x16>
 8015788:	ffffc180 	.word	0xffffc180
 801578c:	ffffc100 	.word	0xffffc100

08015790 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015790:	b410      	push	{r4}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015792:	b140      	cbz	r0, 80157a6 <mbedtls_pk_encrypt+0x16>
 8015794:	6804      	ldr	r4, [r0, #0]
 8015796:	b134      	cbz	r4, 80157a6 <mbedtls_pk_encrypt+0x16>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 8015798:	69e4      	ldr	r4, [r4, #28]
 801579a:	b144      	cbz	r4, 80157ae <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 801579c:	46a4      	mov	ip, r4
 801579e:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
 80157a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 80157a4:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80157a6:	4803      	ldr	r0, [pc, #12]	; (80157b4 <mbedtls_pk_encrypt+0x24>)
}
 80157a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157ac:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80157ae:	4802      	ldr	r0, [pc, #8]	; (80157b8 <mbedtls_pk_encrypt+0x28>)
 80157b0:	e7fa      	b.n	80157a8 <mbedtls_pk_encrypt+0x18>
 80157b2:	bf00      	nop
 80157b4:	ffffc180 	.word	0xffffc180
 80157b8:	ffffc100 	.word	0xffffc100

080157bc <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80157bc:	b120      	cbz	r0, 80157c8 <mbedtls_pk_get_bitlen+0xc>
 80157be:	6803      	ldr	r3, [r0, #0]
 80157c0:	b113      	cbz	r3, 80157c8 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 80157c2:	689b      	ldr	r3, [r3, #8]
 80157c4:	6840      	ldr	r0, [r0, #4]
 80157c6:	4718      	bx	r3
}
 80157c8:	2000      	movs	r0, #0
 80157ca:	4770      	bx	lr

080157cc <mbedtls_pk_verify_ext>:
{
 80157cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d0:	b087      	sub	sp, #28
 80157d2:	4683      	mov	fp, r0
 80157d4:	460c      	mov	r4, r1
 80157d6:	461f      	mov	r7, r3
 80157d8:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80157dc:	e9dd a612 	ldrd	sl, r6, [sp, #72]	; 0x48
    if( ctx == NULL || ctx->pk_info == NULL )
 80157e0:	4615      	mov	r5, r2
 80157e2:	b922      	cbnz	r2, 80157ee <mbedtls_pk_verify_ext+0x22>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80157e4:	4c23      	ldr	r4, [pc, #140]	; (8015874 <mbedtls_pk_verify_ext+0xa8>)
}
 80157e6:	4620      	mov	r0, r4
 80157e8:	b007      	add	sp, #28
 80157ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx == NULL || ctx->pk_info == NULL )
 80157ee:	6813      	ldr	r3, [r2, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d0f7      	beq.n	80157e4 <mbedtls_pk_verify_ext+0x18>
    if( ! mbedtls_pk_can_do( ctx, type ) )
 80157f4:	4601      	mov	r1, r0
 80157f6:	4610      	mov	r0, r2
 80157f8:	f7ff ff68 	bl	80156cc <mbedtls_pk_can_do>
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d034      	beq.n	801586a <mbedtls_pk_verify_ext+0x9e>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 8015800:	f1bb 0f06 	cmp.w	fp, #6
 8015804:	d124      	bne.n	8015850 <mbedtls_pk_verify_ext+0x84>
        if( options == NULL )
 8015806:	2c00      	cmp	r4, #0
 8015808:	d0ec      	beq.n	80157e4 <mbedtls_pk_verify_ext+0x18>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 801580a:	4628      	mov	r0, r5
 801580c:	f7ff ffd6 	bl	80157bc <mbedtls_pk_get_bitlen>
 8015810:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
 8015812:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 8015816:	d32a      	bcc.n	801586e <mbedtls_pk_verify_ext+0xa2>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
 8015818:	f8cd a014 	str.w	sl, [sp, #20]
 801581c:	6863      	ldr	r3, [r4, #4]
 801581e:	9304      	str	r3, [sp, #16]
 8015820:	7823      	ldrb	r3, [r4, #0]
 8015822:	e9cd 7900 	strd	r7, r9, [sp]
 8015826:	e9cd 8302 	strd	r8, r3, [sp, #8]
 801582a:	2300      	movs	r3, #0
 801582c:	461a      	mov	r2, r3
 801582e:	4619      	mov	r1, r3
 8015830:	6868      	ldr	r0, [r5, #4]
 8015832:	f001 fc99 	bl	8017168 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 8015836:	4604      	mov	r4, r0
 8015838:	2800      	cmp	r0, #0
 801583a:	d1d4      	bne.n	80157e6 <mbedtls_pk_verify_ext+0x1a>
 801583c:	4628      	mov	r0, r5
 801583e:	f7ff ffbd 	bl	80157bc <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015842:	4b0d      	ldr	r3, [pc, #52]	; (8015878 <mbedtls_pk_verify_ext+0xac>)
 8015844:	3007      	adds	r0, #7
 8015846:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 801584a:	bf88      	it	hi
 801584c:	461c      	movhi	r4, r3
 801584e:	e7ca      	b.n	80157e6 <mbedtls_pk_verify_ext+0x1a>
    if( options != NULL )
 8015850:	2c00      	cmp	r4, #0
 8015852:	d1c7      	bne.n	80157e4 <mbedtls_pk_verify_ext+0x18>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015854:	464b      	mov	r3, r9
 8015856:	4642      	mov	r2, r8
 8015858:	4639      	mov	r1, r7
 801585a:	4628      	mov	r0, r5
 801585c:	e9cd a610 	strd	sl, r6, [sp, #64]	; 0x40
}
 8015860:	b007      	add	sp, #28
 8015862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015866:	f7ff bf39 	b.w	80156dc <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801586a:	4c04      	ldr	r4, [pc, #16]	; (801587c <mbedtls_pk_verify_ext+0xb0>)
 801586c:	e7bb      	b.n	80157e6 <mbedtls_pk_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 801586e:	4c04      	ldr	r4, [pc, #16]	; (8015880 <mbedtls_pk_verify_ext+0xb4>)
 8015870:	e7b9      	b.n	80157e6 <mbedtls_pk_verify_ext+0x1a>
 8015872:	bf00      	nop
 8015874:	ffffc180 	.word	0xffffc180
 8015878:	ffffc700 	.word	0xffffc700
 801587c:	ffffc100 	.word	0xffffc100
 8015880:	ffffbc80 	.word	0xffffbc80

08015884 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 8015884:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015886:	b138      	cbz	r0, 8015898 <mbedtls_pk_debug+0x14>
 8015888:	6803      	ldr	r3, [r0, #0]
 801588a:	b12b      	cbz	r3, 8015898 <mbedtls_pk_debug+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 801588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801588e:	b12b      	cbz	r3, 801589c <mbedtls_pk_debug+0x18>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 8015890:	6840      	ldr	r0, [r0, #4]
 8015892:	4798      	blx	r3
    return( 0 );
 8015894:	2000      	movs	r0, #0
}
 8015896:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015898:	4801      	ldr	r0, [pc, #4]	; (80158a0 <mbedtls_pk_debug+0x1c>)
 801589a:	e7fc      	b.n	8015896 <mbedtls_pk_debug+0x12>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801589c:	4801      	ldr	r0, [pc, #4]	; (80158a4 <mbedtls_pk_debug+0x20>)
 801589e:	e7fa      	b.n	8015896 <mbedtls_pk_debug+0x12>
 80158a0:	ffffc180 	.word	0xffffc180
 80158a4:	ffffc100 	.word	0xffffc100

080158a8 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80158a8:	b118      	cbz	r0, 80158b2 <mbedtls_pk_get_name+0xa>
 80158aa:	6803      	ldr	r3, [r0, #0]
 80158ac:	b10b      	cbz	r3, 80158b2 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 80158ae:	6858      	ldr	r0, [r3, #4]
 80158b0:	4770      	bx	lr
        return( "invalid PK" );
 80158b2:	4801      	ldr	r0, [pc, #4]	; (80158b8 <mbedtls_pk_get_name+0x10>)
}
 80158b4:	4770      	bx	lr
 80158b6:	bf00      	nop
 80158b8:	0803053c 	.word	0x0803053c

080158bc <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80158bc:	b110      	cbz	r0, 80158c4 <mbedtls_pk_get_type+0x8>
 80158be:	6800      	ldr	r0, [r0, #0]
 80158c0:	b100      	cbz	r0, 80158c4 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 80158c2:	7800      	ldrb	r0, [r0, #0]
}
 80158c4:	4770      	bx	lr

080158c6 <rsa_can_do>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 80158c6:	2801      	cmp	r0, #1
 80158c8:	d002      	beq.n	80158d0 <rsa_can_do+0xa>
 80158ca:	1f83      	subs	r3, r0, #6
 80158cc:	4258      	negs	r0, r3
 80158ce:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 80158d0:	4770      	bx	lr

080158d2 <rsa_get_bitlen>:

static size_t rsa_get_bitlen( const void *ctx )
{
    return( 8 * ((const mbedtls_rsa_context *) ctx)->len );
 80158d2:	6840      	ldr	r0, [r0, #4]
}
 80158d4:	00c0      	lsls	r0, r0, #3
 80158d6:	4770      	bx	lr

080158d8 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80158d8:	2301      	movs	r3, #1
    items->name = "rsa.N";
 80158da:	4a06      	ldr	r2, [pc, #24]	; (80158f4 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80158dc:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 80158de:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 80158e0:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80158e2:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
 80158e6:	4b04      	ldr	r3, [pc, #16]	; (80158f8 <rsa_debug+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80158e8:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80158ea:	3014      	adds	r0, #20
    items->name = "rsa.E";
 80158ec:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80158ee:	6148      	str	r0, [r1, #20]
}
 80158f0:	4770      	bx	lr
 80158f2:	bf00      	nop
 80158f4:	08030547 	.word	0x08030547
 80158f8:	0803054d 	.word	0x0803054d

080158fc <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 80158fc:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 80158fe:	2802      	cmp	r0, #2
 8015900:	bf8c      	ite	hi
 8015902:	2000      	movhi	r0, #0
 8015904:	2001      	movls	r0, #1
 8015906:	4770      	bx	lr

08015908 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 8015908:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801590a:	4770      	bx	lr

0801590c <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 801590c:	2302      	movs	r3, #2
 801590e:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015910:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
 8015912:	4b02      	ldr	r3, [pc, #8]	; (801591c <eckey_debug+0x10>)
 8015914:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015916:	6088      	str	r0, [r1, #8]
}
 8015918:	4770      	bx	lr
 801591a:	bf00      	nop
 801591c:	08030553 	.word	0x08030553

08015920 <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 8015920:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 8015922:	2801      	cmp	r0, #1
 8015924:	bf8c      	ite	hi
 8015926:	2000      	movhi	r0, #0
 8015928:	2001      	movls	r0, #1
 801592a:	4770      	bx	lr

0801592c <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 801592c:	1f03      	subs	r3, r0, #4
 801592e:	4258      	negs	r0, r3
 8015930:	4158      	adcs	r0, r3
 8015932:	4770      	bx	lr

08015934 <rsa_free_wrap>:
{
 8015934:	b510      	push	{r4, lr}
 8015936:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8015938:	f001 fde6 	bl	8017508 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 801593c:	4b02      	ldr	r3, [pc, #8]	; (8015948 <rsa_free_wrap+0x14>)
 801593e:	4620      	mov	r0, r4
 8015940:	681b      	ldr	r3, [r3, #0]
}
 8015942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015946:	4718      	bx	r3
 8015948:	200005a4 	.word	0x200005a4

0801594c <rsa_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 801594c:	4b06      	ldr	r3, [pc, #24]	; (8015968 <rsa_alloc_wrap+0x1c>)
{
 801594e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	21ac      	movs	r1, #172	; 0xac
 8015954:	2001      	movs	r0, #1
 8015956:	4798      	blx	r3
    if( ctx != NULL )
 8015958:	4604      	mov	r4, r0
 801595a:	b118      	cbz	r0, 8015964 <rsa_alloc_wrap+0x18>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 801595c:	2200      	movs	r2, #0
 801595e:	4611      	mov	r1, r2
 8015960:	f000 fcc0 	bl	80162e4 <mbedtls_rsa_init>
}
 8015964:	4620      	mov	r0, r4
 8015966:	bd10      	pop	{r4, pc}
 8015968:	200005a0 	.word	0x200005a0

0801596c <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 801596c:	f000 bdf8 	b.w	8016560 <mbedtls_rsa_check_pub_priv>

08015970 <rsa_encrypt_wrap>:
{
 8015970:	b4f0      	push	{r4, r5, r6, r7}
    *olen = ((mbedtls_rsa_context *) ctx)->len;
 8015972:	9f04      	ldr	r7, [sp, #16]
 8015974:	6844      	ldr	r4, [r0, #4]
 8015976:	603c      	str	r4, [r7, #0]
    if( *olen > osize )
 8015978:	9f05      	ldr	r7, [sp, #20]
 801597a:	42bc      	cmp	r4, r7
{
 801597c:	460e      	mov	r6, r1
 801597e:	4615      	mov	r5, r2
 8015980:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    if( *olen > osize )
 8015984:	d806      	bhi.n	8015994 <rsa_encrypt_wrap+0x24>
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015986:	e9cd 6305 	strd	r6, r3, [sp, #20]
 801598a:	9504      	str	r5, [sp, #16]
 801598c:	2300      	movs	r3, #0
}
 801598e:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015990:	f001 b8c4 	b.w	8016b1c <mbedtls_rsa_pkcs1_encrypt>
}
 8015994:	4801      	ldr	r0, [pc, #4]	; (801599c <rsa_encrypt_wrap+0x2c>)
 8015996:	bcf0      	pop	{r4, r5, r6, r7}
 8015998:	4770      	bx	lr
 801599a:	bf00      	nop
 801599c:	ffffbc00 	.word	0xffffbc00

080159a0 <rsa_decrypt_wrap>:
{
 80159a0:	b4f0      	push	{r4, r5, r6, r7}
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 80159a2:	6847      	ldr	r7, [r0, #4]
{
 80159a4:	9c07      	ldr	r4, [sp, #28]
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 80159a6:	4297      	cmp	r7, r2
{
 80159a8:	460d      	mov	r5, r1
 80159aa:	e9dd 6105 	ldrd	r6, r1, [sp, #20]
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 80159ae:	d107      	bne.n	80159c0 <rsa_decrypt_wrap+0x20>
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 80159b0:	e9cd 3606 	strd	r3, r6, [sp, #24]
 80159b4:	9505      	str	r5, [sp, #20]
 80159b6:	4622      	mov	r2, r4
 80159b8:	2301      	movs	r3, #1
}
 80159ba:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 80159bc:	f001 ba1e 	b.w	8016dfc <mbedtls_rsa_pkcs1_decrypt>
}
 80159c0:	4801      	ldr	r0, [pc, #4]	; (80159c8 <rsa_decrypt_wrap+0x28>)
 80159c2:	bcf0      	pop	{r4, r5, r6, r7}
 80159c4:	4770      	bx	lr
 80159c6:	bf00      	nop
 80159c8:	ffffbf80 	.word	0xffffbf80

080159cc <rsa_sign_wrap>:
{
 80159cc:	b4f0      	push	{r4, r5, r6, r7}
    *sig_len = ((mbedtls_rsa_context *) ctx)->len;
 80159ce:	9e05      	ldr	r6, [sp, #20]
 80159d0:	6847      	ldr	r7, [r0, #4]
 80159d2:	6037      	str	r7, [r6, #0]
{
 80159d4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80159d8:	9e04      	ldr	r6, [sp, #16]
 80159da:	e9cd 1304 	strd	r1, r3, [sp, #16]
 80159de:	e9cd 2606 	strd	r2, r6, [sp, #24]
 80159e2:	4621      	mov	r1, r4
 80159e4:	462a      	mov	r2, r5
 80159e6:	2301      	movs	r3, #1
}
 80159e8:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80159ea:	f001 bba7 	b.w	801713c <mbedtls_rsa_pkcs1_sign>
	...

080159f0 <rsa_verify_wrap>:
{
 80159f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80159f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 80159f4:	6846      	ldr	r6, [r0, #4]
 80159f6:	42a6      	cmp	r6, r4
{
 80159f8:	4605      	mov	r5, r0
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 80159fa:	d811      	bhi.n	8015a20 <rsa_verify_wrap+0x30>
    if( ( ret = mbedtls_rsa_pkcs1_verify( (mbedtls_rsa_context *) ctx, NULL, NULL,
 80159fc:	9e08      	ldr	r6, [sp, #32]
 80159fe:	e9cd 1300 	strd	r1, r3, [sp]
 8015a02:	2300      	movs	r3, #0
 8015a04:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8015a08:	4619      	mov	r1, r3
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	f001 fd66 	bl	80174dc <mbedtls_rsa_pkcs1_verify>
 8015a10:	b920      	cbnz	r0, 8015a1c <rsa_verify_wrap+0x2c>
    if( sig_len > ((mbedtls_rsa_context *) ctx)->len )
 8015a12:	686a      	ldr	r2, [r5, #4]
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015a14:	4b03      	ldr	r3, [pc, #12]	; (8015a24 <rsa_verify_wrap+0x34>)
 8015a16:	42a2      	cmp	r2, r4
 8015a18:	bf38      	it	cc
 8015a1a:	4618      	movcc	r0, r3
}
 8015a1c:	b004      	add	sp, #16
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8015a20:	4801      	ldr	r0, [pc, #4]	; (8015a28 <rsa_verify_wrap+0x38>)
 8015a22:	e7fb      	b.n	8015a1c <rsa_verify_wrap+0x2c>
 8015a24:	ffffc700 	.word	0xffffc700
 8015a28:	ffffbc80 	.word	0xffffbc80

08015a2c <eckey_free_wrap>:
{
 8015a2c:	b510      	push	{r4, lr}
 8015a2e:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 8015a30:	f7fc f8d8 	bl	8011be4 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 8015a34:	4b02      	ldr	r3, [pc, #8]	; (8015a40 <eckey_free_wrap+0x14>)
 8015a36:	4620      	mov	r0, r4
 8015a38:	681b      	ldr	r3, [r3, #0]
}
 8015a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015a3e:	4718      	bx	r3
 8015a40:	200005a4 	.word	0x200005a4

08015a44 <eckey_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015a44:	4b05      	ldr	r3, [pc, #20]	; (8015a5c <eckey_alloc_wrap+0x18>)
{
 8015a46:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	21ac      	movs	r1, #172	; 0xac
 8015a4c:	2001      	movs	r0, #1
 8015a4e:	4798      	blx	r3
    if( ctx != NULL )
 8015a50:	4604      	mov	r4, r0
 8015a52:	b108      	cbz	r0, 8015a58 <eckey_alloc_wrap+0x14>
        mbedtls_ecp_keypair_init( ctx );
 8015a54:	f7fc f87c 	bl	8011b50 <mbedtls_ecp_keypair_init>
}
 8015a58:	4620      	mov	r0, r4
 8015a5a:	bd10      	pop	{r4, pc}
 8015a5c:	200005a0 	.word	0x200005a0

08015a60 <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 8015a60:	f7fd b856 	b.w	8012b10 <mbedtls_ecp_check_pub_priv>

08015a64 <ecdsa_alloc_wrap>:
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}

static void *ecdsa_alloc_wrap( void )
{
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015a64:	4b05      	ldr	r3, [pc, #20]	; (8015a7c <ecdsa_alloc_wrap+0x18>)
{
 8015a66:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	21ac      	movs	r1, #172	; 0xac
 8015a6c:	2001      	movs	r0, #1
 8015a6e:	4798      	blx	r3

    if( ctx != NULL )
 8015a70:	4604      	mov	r4, r0
 8015a72:	b108      	cbz	r0, 8015a78 <ecdsa_alloc_wrap+0x14>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 8015a74:	f7fb fb4e 	bl	8011114 <mbedtls_ecdsa_init>

    return( ctx );
}
 8015a78:	4620      	mov	r0, r4
 8015a7a:	bd10      	pop	{r4, pc}
 8015a7c:	200005a0 	.word	0x200005a0

08015a80 <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 8015a80:	b510      	push	{r4, lr}
 8015a82:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 8015a84:	f7fb fb48 	bl	8011118 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 8015a88:	4b02      	ldr	r3, [pc, #8]	; (8015a94 <ecdsa_free_wrap+0x14>)
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	681b      	ldr	r3, [r3, #0]
}
 8015a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015a92:	4718      	bx	r3
 8015a94:	200005a4 	.word	0x200005a4

08015a98 <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015a98:	f7fb ba7e 	b.w	8010f98 <mbedtls_ecdsa_write_signature>

08015a9c <eckey_sign_wrap>:
{
 8015a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a9e:	b0b1      	sub	sp, #196	; 0xc4
 8015aa0:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015aa2:	a805      	add	r0, sp, #20
{
 8015aa4:	460d      	mov	r5, r1
 8015aa6:	4616      	mov	r6, r2
 8015aa8:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 8015aaa:	f7fb fb33 	bl	8011114 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015aae:	4621      	mov	r1, r4
 8015ab0:	a805      	add	r0, sp, #20
 8015ab2:	f7fb fb13 	bl	80110dc <mbedtls_ecdsa_from_keypair>
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	b970      	cbnz	r0, 8015ad8 <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015aba:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8015abc:	9303      	str	r3, [sp, #12]
 8015abe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015ac0:	9302      	str	r3, [sp, #8]
 8015ac2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8015ac4:	9301      	str	r3, [sp, #4]
 8015ac6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015ac8:	9300      	str	r3, [sp, #0]
 8015aca:	4632      	mov	r2, r6
 8015acc:	463b      	mov	r3, r7
 8015ace:	4629      	mov	r1, r5
 8015ad0:	a805      	add	r0, sp, #20
 8015ad2:	f7fb fa61 	bl	8010f98 <mbedtls_ecdsa_write_signature>
 8015ad6:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015ad8:	a805      	add	r0, sp, #20
 8015ada:	f7fb fb1d 	bl	8011118 <mbedtls_ecdsa_free>
}
 8015ade:	4620      	mov	r0, r4
 8015ae0:	b031      	add	sp, #196	; 0xc4
 8015ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ae4 <ecdsa_verify_wrap>:
{
 8015ae4:	b507      	push	{r0, r1, r2, lr}
 8015ae6:	4611      	mov	r1, r2
 8015ae8:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 8015aea:	9b05      	ldr	r3, [sp, #20]
 8015aec:	9300      	str	r3, [sp, #0]
 8015aee:	9b04      	ldr	r3, [sp, #16]
 8015af0:	f7fb faa4 	bl	801103c <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 8015af4:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015af8:	bf08      	it	eq
 8015afa:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 8015afe:	b003      	add	sp, #12
 8015b00:	f85d fb04 	ldr.w	pc, [sp], #4

08015b04 <eckey_verify_wrap>:
{
 8015b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b06:	b0af      	sub	sp, #188	; 0xbc
 8015b08:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015b0a:	a803      	add	r0, sp, #12
{
 8015b0c:	460d      	mov	r5, r1
 8015b0e:	4616      	mov	r6, r2
 8015b10:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 8015b12:	f7fb faff 	bl	8011114 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015b16:	4621      	mov	r1, r4
 8015b18:	a803      	add	r0, sp, #12
 8015b1a:	f7fb fadf 	bl	80110dc <mbedtls_ecdsa_from_keypair>
 8015b1e:	4604      	mov	r4, r0
 8015b20:	b950      	cbnz	r0, 8015b38 <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 8015b22:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8015b24:	9301      	str	r3, [sp, #4]
 8015b26:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015b28:	9300      	str	r3, [sp, #0]
 8015b2a:	4632      	mov	r2, r6
 8015b2c:	463b      	mov	r3, r7
 8015b2e:	4629      	mov	r1, r5
 8015b30:	a803      	add	r0, sp, #12
 8015b32:	f7ff ffd7 	bl	8015ae4 <ecdsa_verify_wrap>
 8015b36:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015b38:	a803      	add	r0, sp, #12
 8015b3a:	f7fb faed 	bl	8011118 <mbedtls_ecdsa_free>
}
 8015b3e:	4620      	mov	r0, r4
 8015b40:	b02f      	add	sp, #188	; 0xbc
 8015b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b44 <pk_use_ecparams>:
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 8015b44:	6803      	ldr	r3, [r0, #0]
 8015b46:	2b06      	cmp	r3, #6
{
 8015b48:	b513      	push	{r0, r1, r4, lr}
 8015b4a:	460c      	mov	r4, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 8015b4c:	d002      	beq.n	8015b54 <pk_use_ecparams+0x10>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8015b4e:	480a      	ldr	r0, [pc, #40]	; (8015b78 <pk_use_ecparams+0x34>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
 8015b50:	b002      	add	sp, #8
 8015b52:	bd10      	pop	{r4, pc}
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 8015b54:	f10d 0107 	add.w	r1, sp, #7
 8015b58:	f7ff fb52 	bl	8015200 <mbedtls_oid_get_ec_grp>
 8015b5c:	b948      	cbnz	r0, 8015b72 <pk_use_ecparams+0x2e>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 8015b5e:	7823      	ldrb	r3, [r4, #0]
 8015b60:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015b64:	b10b      	cbz	r3, 8015b6a <pk_use_ecparams+0x26>
 8015b66:	428b      	cmp	r3, r1
 8015b68:	d1f1      	bne.n	8015b4e <pk_use_ecparams+0xa>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f7fd fe1e 	bl	80137ac <mbedtls_ecp_group_load>
 8015b70:	e7ee      	b.n	8015b50 <pk_use_ecparams+0xc>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 8015b72:	4802      	ldr	r0, [pc, #8]	; (8015b7c <pk_use_ecparams+0x38>)
 8015b74:	e7ec      	b.n	8015b50 <pk_use_ecparams+0xc>
 8015b76:	bf00      	nop
 8015b78:	ffffc300 	.word	0xffffc300
 8015b7c:	ffffc600 	.word	0xffffc600

08015b80 <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8015b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015b82:	2330      	movs	r3, #48	; 0x30
{
 8015b84:	4605      	mov	r5, r0
    p = (unsigned char *) key;
 8015b86:	9101      	str	r1, [sp, #4]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015b88:	a801      	add	r0, sp, #4
    end = p + keylen;
 8015b8a:	4411      	add	r1, r2
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015b8c:	466a      	mov	r2, sp
 8015b8e:	f7f8 f874 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015b92:	b120      	cbz	r0, 8015b9e <pk_parse_key_pkcs1_der+0x1e>

    end = p + len;

    if( ( ret = mbedtls_asn1_get_int( &p, end, &rsa->ver ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015b94:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
        return( ret );
    }

    return( 0 );
}
 8015b98:	4620      	mov	r0, r4
 8015b9a:	b003      	add	sp, #12
 8015b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8015b9e:	e9dd 3600 	ldrd	r3, r6, [sp]
 8015ba2:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &rsa->ver ) ) != 0 )
 8015ba4:	462a      	mov	r2, r5
 8015ba6:	4631      	mov	r1, r6
 8015ba8:	a801      	add	r0, sp, #4
 8015baa:	f7f8 f892 	bl	800dcd2 <mbedtls_asn1_get_int>
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	d1f0      	bne.n	8015b94 <pk_parse_key_pkcs1_der+0x14>
    if( rsa->ver != 0 )
 8015bb2:	682b      	ldr	r3, [r5, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d15b      	bne.n	8015c70 <pk_parse_key_pkcs1_der+0xf0>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->N  ) ) != 0 ||
 8015bb8:	f105 0708 	add.w	r7, r5, #8
 8015bbc:	463a      	mov	r2, r7
 8015bbe:	4631      	mov	r1, r6
 8015bc0:	a801      	add	r0, sp, #4
 8015bc2:	f7f8 f8aa 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	bbb8      	cbnz	r0, 8015c3a <pk_parse_key_pkcs1_der+0xba>
 8015bca:	f105 0214 	add.w	r2, r5, #20
 8015bce:	4631      	mov	r1, r6
 8015bd0:	a801      	add	r0, sp, #4
 8015bd2:	f7f8 f8a2 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	bb78      	cbnz	r0, 8015c3a <pk_parse_key_pkcs1_der+0xba>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->E  ) ) != 0 ||
 8015bda:	f105 0220 	add.w	r2, r5, #32
 8015bde:	4631      	mov	r1, r6
 8015be0:	a801      	add	r0, sp, #4
 8015be2:	f7f8 f89a 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015be6:	4604      	mov	r4, r0
 8015be8:	bb38      	cbnz	r0, 8015c3a <pk_parse_key_pkcs1_der+0xba>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->D  ) ) != 0 ||
 8015bea:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8015bee:	4631      	mov	r1, r6
 8015bf0:	a801      	add	r0, sp, #4
 8015bf2:	f7f8 f892 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015bf6:	4604      	mov	r4, r0
 8015bf8:	b9f8      	cbnz	r0, 8015c3a <pk_parse_key_pkcs1_der+0xba>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->P  ) ) != 0 ||
 8015bfa:	f105 0238 	add.w	r2, r5, #56	; 0x38
 8015bfe:	4631      	mov	r1, r6
 8015c00:	a801      	add	r0, sp, #4
 8015c02:	f7f8 f88a 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015c06:	4604      	mov	r4, r0
 8015c08:	b9b8      	cbnz	r0, 8015c3a <pk_parse_key_pkcs1_der+0xba>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->Q  ) ) != 0 ||
 8015c0a:	f105 0244 	add.w	r2, r5, #68	; 0x44
 8015c0e:	4631      	mov	r1, r6
 8015c10:	a801      	add	r0, sp, #4
 8015c12:	f7f8 f882 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015c16:	4604      	mov	r4, r0
 8015c18:	b978      	cbnz	r0, 8015c3a <pk_parse_key_pkcs1_der+0xba>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
 8015c1a:	f105 0250 	add.w	r2, r5, #80	; 0x50
 8015c1e:	4631      	mov	r1, r6
 8015c20:	a801      	add	r0, sp, #4
 8015c22:	f7f8 f87a 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015c26:	4604      	mov	r4, r0
 8015c28:	b938      	cbnz	r0, 8015c3a <pk_parse_key_pkcs1_der+0xba>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
 8015c2a:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 8015c2e:	4631      	mov	r1, r6
 8015c30:	a801      	add	r0, sp, #4
 8015c32:	f7f8 f872 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015c36:	4604      	mov	r4, r0
 8015c38:	b128      	cbz	r0, 8015c46 <pk_parse_key_pkcs1_der+0xc6>
        mbedtls_rsa_free( rsa );
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	f001 fc64 	bl	8017508 <mbedtls_rsa_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015c40:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 8015c44:	e7a8      	b.n	8015b98 <pk_parse_key_pkcs1_der+0x18>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 8015c46:	4638      	mov	r0, r7
 8015c48:	f7f8 fda8 	bl	800e79c <mbedtls_mpi_size>
    if( p != end )
 8015c4c:	9b01      	ldr	r3, [sp, #4]
    rsa->len = mbedtls_mpi_size( &rsa->N );
 8015c4e:	6068      	str	r0, [r5, #4]
    if( p != end )
 8015c50:	42b3      	cmp	r3, r6
        mbedtls_rsa_free( rsa );
 8015c52:	4628      	mov	r0, r5
    if( p != end )
 8015c54:	d003      	beq.n	8015c5e <pk_parse_key_pkcs1_der+0xde>
        mbedtls_rsa_free( rsa );
 8015c56:	f001 fc57 	bl	8017508 <mbedtls_rsa_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015c5a:	4c06      	ldr	r4, [pc, #24]	; (8015c74 <pk_parse_key_pkcs1_der+0xf4>)
 8015c5c:	e79c      	b.n	8015b98 <pk_parse_key_pkcs1_der+0x18>
    if( ( ret = mbedtls_rsa_check_privkey( rsa ) ) != 0 )
 8015c5e:	f000 fb77 	bl	8016350 <mbedtls_rsa_check_privkey>
 8015c62:	4604      	mov	r4, r0
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d097      	beq.n	8015b98 <pk_parse_key_pkcs1_der+0x18>
        mbedtls_rsa_free( rsa );
 8015c68:	4628      	mov	r0, r5
 8015c6a:	f001 fc4d 	bl	8017508 <mbedtls_rsa_free>
        return( ret );
 8015c6e:	e793      	b.n	8015b98 <pk_parse_key_pkcs1_der+0x18>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8015c70:	4c01      	ldr	r4, [pc, #4]	; (8015c78 <pk_parse_key_pkcs1_der+0xf8>)
 8015c72:	e791      	b.n	8015b98 <pk_parse_key_pkcs1_der+0x18>
 8015c74:	ffffc29a 	.word	0xffffc29a
 8015c78:	ffffc280 	.word	0xffffc280

08015c7c <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 8015c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c7e:	b089      	sub	sp, #36	; 0x24
 8015c80:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8015c82:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015c84:	2330      	movs	r3, #48	; 0x30
    unsigned char *end = p + keylen;
 8015c86:	4411      	add	r1, r2
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015c88:	a804      	add	r0, sp, #16
 8015c8a:	aa03      	add	r2, sp, #12
 8015c8c:	f7f7 fff5 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015c90:	b120      	cbz	r0, 8015c9c <pk_parse_key_sec1_der+0x20>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015c92:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 8015c96:	4620      	mov	r0, r4
 8015c98:	b009      	add	sp, #36	; 0x24
 8015c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8015c9c:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 8015ca0:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8015ca2:	aa02      	add	r2, sp, #8
 8015ca4:	4639      	mov	r1, r7
 8015ca6:	a804      	add	r0, sp, #16
 8015ca8:	f7f8 f813 	bl	800dcd2 <mbedtls_asn1_get_int>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d1f0      	bne.n	8015c92 <pk_parse_key_sec1_der+0x16>
    if( version != 1 )
 8015cb0:	9b02      	ldr	r3, [sp, #8]
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	f040 8090 	bne.w	8015dd8 <pk_parse_key_sec1_der+0x15c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8015cb8:	2304      	movs	r3, #4
 8015cba:	aa03      	add	r2, sp, #12
 8015cbc:	4639      	mov	r1, r7
 8015cbe:	a804      	add	r0, sp, #16
 8015cc0:	f7f7 ffdb 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	d1e4      	bne.n	8015c92 <pk_parse_key_sec1_der+0x16>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 8015cc8:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8015ccc:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	f7f8 fd69 	bl	800e7a8 <mbedtls_mpi_read_binary>
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	b128      	cbz	r0, 8015ce6 <pk_parse_key_sec1_der+0x6a>
        mbedtls_ecp_keypair_free( eck );
 8015cda:	4628      	mov	r0, r5
 8015cdc:	f7fb ff82 	bl	8011be4 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015ce0:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 8015ce4:	e7d7      	b.n	8015c96 <pk_parse_key_sec1_der+0x1a>
    p += len;
 8015ce6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015cea:	4413      	add	r3, r2
    if( p != end )
 8015cec:	42bb      	cmp	r3, r7
    p += len;
 8015cee:	9304      	str	r3, [sp, #16]
    if( p != end )
 8015cf0:	d05b      	beq.n	8015daa <pk_parse_key_sec1_der+0x12e>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015cf2:	23a0      	movs	r3, #160	; 0xa0
 8015cf4:	aa03      	add	r2, sp, #12
 8015cf6:	4639      	mov	r1, r7
 8015cf8:	a804      	add	r0, sp, #16
 8015cfa:	f7f7 ffbe 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015cfe:	4604      	mov	r4, r0
 8015d00:	bb20      	cbnz	r0, 8015d4c <pk_parse_key_sec1_der+0xd0>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8015d02:	e9dd 4303 	ldrd	r4, r3, [sp, #12]
 8015d06:	441c      	add	r4, r3
    params->tag = **p;
 8015d08:	781b      	ldrb	r3, [r3, #0]
 8015d0a:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
 8015d0c:	2b06      	cmp	r3, #6
 8015d0e:	d11b      	bne.n	8015d48 <pk_parse_key_sec1_der+0xcc>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 8015d10:	aa06      	add	r2, sp, #24
 8015d12:	4621      	mov	r1, r4
 8015d14:	a804      	add	r0, sp, #16
 8015d16:	f7f7 ffb0 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015d1a:	b160      	cbz	r0, 8015d36 <pk_parse_key_sec1_der+0xba>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8015d1c:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 8015d20:	d105      	bne.n	8015d2e <pk_parse_key_sec1_der+0xb2>
 8015d22:	4629      	mov	r1, r5
 8015d24:	a805      	add	r0, sp, #20
 8015d26:	f7ff ff0d 	bl	8015b44 <pk_use_ecparams>
 8015d2a:	4604      	mov	r4, r0
 8015d2c:	b188      	cbz	r0, 8015d52 <pk_parse_key_sec1_der+0xd6>
        mbedtls_ecp_keypair_free( eck );
 8015d2e:	4628      	mov	r0, r5
 8015d30:	f7fb ff58 	bl	8011be4 <mbedtls_ecp_keypair_free>
        return( ret );
 8015d34:	e7af      	b.n	8015c96 <pk_parse_key_sec1_der+0x1a>
    params->p = *p;
 8015d36:	9b04      	ldr	r3, [sp, #16]
    *p += params->len;
 8015d38:	9a06      	ldr	r2, [sp, #24]
    params->p = *p;
 8015d3a:	9307      	str	r3, [sp, #28]
    *p += params->len;
 8015d3c:	4413      	add	r3, r2
    if( *p != end )
 8015d3e:	429c      	cmp	r4, r3
    *p += params->len;
 8015d40:	9304      	str	r3, [sp, #16]
    if( *p != end )
 8015d42:	d0ee      	beq.n	8015d22 <pk_parse_key_sec1_der+0xa6>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015d44:	4c26      	ldr	r4, [pc, #152]	; (8015de0 <pk_parse_key_sec1_der+0x164>)
 8015d46:	e7f2      	b.n	8015d2e <pk_parse_key_sec1_der+0xb2>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015d48:	4c26      	ldr	r4, [pc, #152]	; (8015de4 <pk_parse_key_sec1_der+0x168>)
 8015d4a:	e7f0      	b.n	8015d2e <pk_parse_key_sec1_der+0xb2>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8015d4c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8015d50:	d1c3      	bne.n	8015cda <pk_parse_key_sec1_der+0x5e>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015d52:	23a1      	movs	r3, #161	; 0xa1
 8015d54:	aa03      	add	r2, sp, #12
 8015d56:	4639      	mov	r1, r7
 8015d58:	a804      	add	r0, sp, #16
 8015d5a:	f7f7 ff8e 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015d5e:	4604      	mov	r4, r0
 8015d60:	bb00      	cbnz	r0, 8015da4 <pk_parse_key_sec1_der+0x128>
            end2 = p + len;
 8015d62:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 8015d66:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 8015d68:	aa03      	add	r2, sp, #12
 8015d6a:	4621      	mov	r1, r4
 8015d6c:	a804      	add	r0, sp, #16
 8015d6e:	f7f8 f80a 	bl	800dd86 <mbedtls_asn1_get_bitstring_null>
 8015d72:	2800      	cmp	r0, #0
 8015d74:	d18d      	bne.n	8015c92 <pk_parse_key_sec1_der+0x16>
            if( p + len != end2 )
 8015d76:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8015d7a:	18d1      	adds	r1, r2, r3
 8015d7c:	428c      	cmp	r4, r1
 8015d7e:	d12d      	bne.n	8015ddc <pk_parse_key_sec1_der+0x160>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8015d80:	f105 0788 	add.w	r7, r5, #136	; 0x88
 8015d84:	4639      	mov	r1, r7
 8015d86:	4628      	mov	r0, r5
 8015d88:	f7fc fc60 	bl	801264c <mbedtls_ecp_point_read_binary>
 8015d8c:	b918      	cbnz	r0, 8015d96 <pk_parse_key_sec1_der+0x11a>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8015d8e:	4639      	mov	r1, r7
 8015d90:	4628      	mov	r0, r5
 8015d92:	f7fc fce7 	bl	8012764 <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 8015d96:	9404      	str	r4, [sp, #16]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 8015d98:	b1a8      	cbz	r0, 8015dc6 <pk_parse_key_sec1_der+0x14a>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 8015d9a:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 8015d9e:	d004      	beq.n	8015daa <pk_parse_key_sec1_der+0x12e>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8015da0:	4c11      	ldr	r4, [pc, #68]	; (8015de8 <pk_parse_key_sec1_der+0x16c>)
 8015da2:	e778      	b.n	8015c96 <pk_parse_key_sec1_der+0x1a>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8015da4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8015da8:	d197      	bne.n	8015cda <pk_parse_key_sec1_der+0x5e>
    if( ! pubkey_done &&
 8015daa:	2300      	movs	r3, #0
 8015dac:	e9cd 3300 	strd	r3, r3, [sp]
 8015db0:	4632      	mov	r2, r6
 8015db2:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015db6:	f105 0188 	add.w	r1, r5, #136	; 0x88
 8015dba:	4628      	mov	r0, r5
 8015dbc:	f7fc fdb6 	bl	801292c <mbedtls_ecp_mul>
 8015dc0:	4604      	mov	r4, r0
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d189      	bne.n	8015cda <pk_parse_key_sec1_der+0x5e>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 8015dc6:	4631      	mov	r1, r6
 8015dc8:	4628      	mov	r0, r5
 8015dca:	f7fc fd91 	bl	80128f0 <mbedtls_ecp_check_privkey>
 8015dce:	4604      	mov	r4, r0
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	f43f af60 	beq.w	8015c96 <pk_parse_key_sec1_der+0x1a>
 8015dd6:	e7aa      	b.n	8015d2e <pk_parse_key_sec1_der+0xb2>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8015dd8:	4c04      	ldr	r4, [pc, #16]	; (8015dec <pk_parse_key_sec1_der+0x170>)
 8015dda:	e75c      	b.n	8015c96 <pk_parse_key_sec1_der+0x1a>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015ddc:	4c00      	ldr	r4, [pc, #0]	; (8015de0 <pk_parse_key_sec1_der+0x164>)
 8015dde:	e75a      	b.n	8015c96 <pk_parse_key_sec1_der+0x1a>
 8015de0:	ffffc29a 	.word	0xffffc29a
 8015de4:	ffffc29e 	.word	0xffffc29e
 8015de8:	ffffc300 	.word	0xffffc300
 8015dec:	ffffc280 	.word	0xffffc280

08015df0 <pk_get_pk_alg>:
{
 8015df0:	b530      	push	{r4, r5, lr}
 8015df2:	4615      	mov	r5, r2
 8015df4:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8015df6:	2200      	movs	r2, #0
 8015df8:	e9c3 2200 	strd	r2, r2, [r3]
 8015dfc:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8015dfe:	aa01      	add	r2, sp, #4
{
 8015e00:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8015e02:	f7f8 f819 	bl	800de38 <mbedtls_asn1_get_alg>
 8015e06:	b118      	cbz	r0, 8015e10 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8015e08:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
 8015e0c:	b005      	add	sp, #20
 8015e0e:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8015e10:	4629      	mov	r1, r5
 8015e12:	a801      	add	r0, sp, #4
 8015e14:	f7ff f9da 	bl	80151cc <mbedtls_oid_get_pk_alg>
 8015e18:	b960      	cbnz	r0, 8015e34 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8015e1a:	782b      	ldrb	r3, [r5, #0]
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d1f5      	bne.n	8015e0c <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8015e20:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8015e22:	2b05      	cmp	r3, #5
 8015e24:	d000      	beq.n	8015e28 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8015e26:	b93b      	cbnz	r3, 8015e38 <pk_get_pk_alg+0x48>
 8015e28:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8015e2a:	4b04      	ldr	r3, [pc, #16]	; (8015e3c <pk_get_pk_alg+0x4c>)
 8015e2c:	2a00      	cmp	r2, #0
 8015e2e:	bf18      	it	ne
 8015e30:	4618      	movne	r0, r3
 8015e32:	e7eb      	b.n	8015e0c <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8015e34:	4802      	ldr	r0, [pc, #8]	; (8015e40 <pk_get_pk_alg+0x50>)
 8015e36:	e7e9      	b.n	8015e0c <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8015e38:	4800      	ldr	r0, [pc, #0]	; (8015e3c <pk_get_pk_alg+0x4c>)
 8015e3a:	e7e7      	b.n	8015e0c <pk_get_pk_alg+0x1c>
 8015e3c:	ffffc580 	.word	0xffffc580
 8015e40:	ffffc380 	.word	0xffffc380

08015e44 <pk_parse_key_pkcs8_unencrypted_der>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8015e44:	b530      	push	{r4, r5, lr}
 8015e46:	b089      	sub	sp, #36	; 0x24
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8015e48:	2300      	movs	r3, #0
{
 8015e4a:	4605      	mov	r5, r0
    unsigned char *p = (unsigned char *) key;
 8015e4c:	9104      	str	r1, [sp, #16]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8015e4e:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned char *end = p + keylen;
 8015e52:	4411      	add	r1, r2
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015e54:	2330      	movs	r3, #48	; 0x30
 8015e56:	aa03      	add	r2, sp, #12
 8015e58:	a804      	add	r0, sp, #16
 8015e5a:	f7f7 ff0e 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015e5e:	b120      	cbz	r0, 8015e6a <pk_parse_key_pkcs8_unencrypted_der+0x26>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015e60:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 8015e64:	4620      	mov	r0, r4
 8015e66:	b009      	add	sp, #36	; 0x24
 8015e68:	bd30      	pop	{r4, r5, pc}
    end = p + len;
 8015e6a:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 8015e6e:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8015e70:	aa02      	add	r2, sp, #8
 8015e72:	4621      	mov	r1, r4
 8015e74:	a804      	add	r0, sp, #16
 8015e76:	f7f7 ff2c 	bl	800dcd2 <mbedtls_asn1_get_int>
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	d1f0      	bne.n	8015e60 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( version != 0 )
 8015e7e:	9b02      	ldr	r3, [sp, #8]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d140      	bne.n	8015f06 <pk_parse_key_pkcs8_unencrypted_der+0xc2>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 8015e84:	ab05      	add	r3, sp, #20
 8015e86:	f10d 0207 	add.w	r2, sp, #7
 8015e8a:	4621      	mov	r1, r4
 8015e8c:	a804      	add	r0, sp, #16
 8015e8e:	f7ff ffaf 	bl	8015df0 <pk_get_pk_alg>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d1e4      	bne.n	8015e60 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8015e96:	2304      	movs	r3, #4
 8015e98:	aa03      	add	r2, sp, #12
 8015e9a:	4621      	mov	r1, r4
 8015e9c:	a804      	add	r0, sp, #16
 8015e9e:	f7f7 feec 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	d1dc      	bne.n	8015e60 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( len < 1 )
 8015ea6:	9b03      	ldr	r3, [sp, #12]
 8015ea8:	b37b      	cbz	r3, 8015f0a <pk_parse_key_pkcs8_unencrypted_der+0xc6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8015eaa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015eae:	f7ff fbeb 	bl	8015688 <mbedtls_pk_info_from_type>
 8015eb2:	4601      	mov	r1, r0
 8015eb4:	b908      	cbnz	r0, 8015eba <pk_parse_key_pkcs8_unencrypted_der+0x76>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8015eb6:	4c16      	ldr	r4, [pc, #88]	; (8015f10 <pk_parse_key_pkcs8_unencrypted_der+0xcc>)
 8015eb8:	e7d4      	b.n	8015e64 <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8015eba:	4628      	mov	r0, r5
 8015ebc:	f7ff fbf0 	bl	80156a0 <mbedtls_pk_setup>
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	d1ce      	bne.n	8015e64 <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( pk_alg == MBEDTLS_PK_RSA )
 8015ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	d10b      	bne.n	8015ee6 <pk_parse_key_pkcs8_unencrypted_der+0xa2>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 8015ece:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8015ed2:	6868      	ldr	r0, [r5, #4]
 8015ed4:	f7ff fe54 	bl	8015b80 <pk_parse_key_pkcs1_der>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8015ed8:	4604      	mov	r4, r0
 8015eda:	2800      	cmp	r0, #0
 8015edc:	d0c2      	beq.n	8015e64 <pk_parse_key_pkcs8_unencrypted_der+0x20>
            mbedtls_pk_free( pk );
 8015ede:	4628      	mov	r0, r5
 8015ee0:	f7ff fbc1 	bl	8015666 <mbedtls_pk_free>
            return( ret );
 8015ee4:	e7be      	b.n	8015e64 <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 8015ee6:	3b02      	subs	r3, #2
 8015ee8:	2b01      	cmp	r3, #1
 8015eea:	d8e4      	bhi.n	8015eb6 <pk_parse_key_pkcs8_unencrypted_der+0x72>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8015eec:	6869      	ldr	r1, [r5, #4]
 8015eee:	a805      	add	r0, sp, #20
 8015ef0:	f7ff fe28 	bl	8015b44 <pk_use_ecparams>
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	d1f1      	bne.n	8015ede <pk_parse_key_pkcs8_unencrypted_der+0x9a>
 8015efa:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8015efe:	6868      	ldr	r0, [r5, #4]
 8015f00:	f7ff febc 	bl	8015c7c <pk_parse_key_sec1_der>
 8015f04:	e7e8      	b.n	8015ed8 <pk_parse_key_pkcs8_unencrypted_der+0x94>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 8015f06:	4c03      	ldr	r4, [pc, #12]	; (8015f14 <pk_parse_key_pkcs8_unencrypted_der+0xd0>)
 8015f08:	e7ac      	b.n	8015e64 <pk_parse_key_pkcs8_unencrypted_der+0x20>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015f0a:	4c03      	ldr	r4, [pc, #12]	; (8015f18 <pk_parse_key_pkcs8_unencrypted_der+0xd4>)
 8015f0c:	e7aa      	b.n	8015e64 <pk_parse_key_pkcs8_unencrypted_der+0x20>
 8015f0e:	bf00      	nop
 8015f10:	ffffc380 	.word	0xffffc380
 8015f14:	ffffc280 	.word	0xffffc280
 8015f18:	ffffc2a0 	.word	0xffffc2a0

08015f1c <mbedtls_pk_parse_subpubkey>:
{
 8015f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f20:	b086      	sub	sp, #24
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8015f22:	2300      	movs	r3, #0
{
 8015f24:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8015f26:	f88d 3003 	strb.w	r3, [sp, #3]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8015f2a:	aa01      	add	r2, sp, #4
 8015f2c:	2330      	movs	r3, #48	; 0x30
{
 8015f2e:	4607      	mov	r7, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8015f30:	f7f7 fea3 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015f34:	b128      	cbz	r0, 8015f42 <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015f36:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
}
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	b006      	add	sp, #24
 8015f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    end = *p + len;
 8015f42:	9b01      	ldr	r3, [sp, #4]
 8015f44:	683e      	ldr	r6, [r7, #0]
 8015f46:	441e      	add	r6, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8015f48:	f10d 0203 	add.w	r2, sp, #3
 8015f4c:	ab03      	add	r3, sp, #12
 8015f4e:	4631      	mov	r1, r6
 8015f50:	4638      	mov	r0, r7
 8015f52:	f7ff ff4d 	bl	8015df0 <pk_get_pk_alg>
 8015f56:	4605      	mov	r5, r0
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	d1ee      	bne.n	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8015f5c:	aa01      	add	r2, sp, #4
 8015f5e:	4631      	mov	r1, r6
 8015f60:	4638      	mov	r0, r7
 8015f62:	f7f7 ff10 	bl	800dd86 <mbedtls_asn1_get_bitstring_null>
 8015f66:	b110      	cbz	r0, 8015f6e <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8015f68:	f5a0 556c 	sub.w	r5, r0, #15104	; 0x3b00
 8015f6c:	e7e5      	b.n	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	9a01      	ldr	r2, [sp, #4]
 8015f72:	4413      	add	r3, r2
 8015f74:	429e      	cmp	r6, r3
 8015f76:	d16d      	bne.n	8016054 <mbedtls_pk_parse_subpubkey+0x138>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8015f78:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8015f7c:	f7ff fb84 	bl	8015688 <mbedtls_pk_info_from_type>
 8015f80:	4601      	mov	r1, r0
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d068      	beq.n	8016058 <mbedtls_pk_parse_subpubkey+0x13c>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8015f86:	4640      	mov	r0, r8
 8015f88:	f7ff fb8a 	bl	80156a0 <mbedtls_pk_setup>
 8015f8c:	4605      	mov	r5, r0
 8015f8e:	2800      	cmp	r0, #0
 8015f90:	d1d3      	bne.n	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 8015f92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	d139      	bne.n	801600e <mbedtls_pk_parse_subpubkey+0xf2>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8015f9a:	2330      	movs	r3, #48	; 0x30
 8015f9c:	aa02      	add	r2, sp, #8
 8015f9e:	4631      	mov	r1, r6
 8015fa0:	4638      	mov	r0, r7
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 8015fa2:	f8d8 4004 	ldr.w	r4, [r8, #4]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8015fa6:	f7f7 fe68 	bl	800dc7a <mbedtls_asn1_get_tag>
 8015faa:	b138      	cbz	r0, 8015fbc <mbedtls_pk_parse_subpubkey+0xa0>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8015fac:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
    if( ret == 0 && *p != end )
 8015fb0:	b33c      	cbz	r4, 8016002 <mbedtls_pk_parse_subpubkey+0xe6>
        mbedtls_pk_free( pk );
 8015fb2:	4640      	mov	r0, r8
 8015fb4:	f7ff fb57 	bl	8015666 <mbedtls_pk_free>
 8015fb8:	4625      	mov	r5, r4
 8015fba:	e7be      	b.n	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	9a02      	ldr	r2, [sp, #8]
 8015fc0:	4413      	add	r3, r2
 8015fc2:	429e      	cmp	r6, r3
 8015fc4:	d001      	beq.n	8015fca <mbedtls_pk_parse_subpubkey+0xae>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 8015fc6:	4c25      	ldr	r4, [pc, #148]	; (801605c <mbedtls_pk_parse_subpubkey+0x140>)
 8015fc8:	e7f3      	b.n	8015fb2 <mbedtls_pk_parse_subpubkey+0x96>
    if( ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->N ) ) != 0 ||
 8015fca:	f104 0908 	add.w	r9, r4, #8
 8015fce:	464a      	mov	r2, r9
 8015fd0:	4631      	mov	r1, r6
 8015fd2:	4638      	mov	r0, r7
 8015fd4:	f7f7 fea1 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015fd8:	2800      	cmp	r0, #0
 8015fda:	d1e7      	bne.n	8015fac <mbedtls_pk_parse_subpubkey+0x90>
 8015fdc:	f104 0214 	add.w	r2, r4, #20
 8015fe0:	4631      	mov	r1, r6
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	f7f7 fe99 	bl	800dd1a <mbedtls_asn1_get_mpi>
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d1df      	bne.n	8015fac <mbedtls_pk_parse_subpubkey+0x90>
    if( *p != end )
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	429e      	cmp	r6, r3
 8015ff0:	d1e9      	bne.n	8015fc6 <mbedtls_pk_parse_subpubkey+0xaa>
    if( ( ret = mbedtls_rsa_check_pubkey( rsa ) ) != 0 )
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f000 f980 	bl	80162f8 <mbedtls_rsa_check_pubkey>
 8015ff8:	b938      	cbnz	r0, 801600a <mbedtls_pk_parse_subpubkey+0xee>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 8015ffa:	4648      	mov	r0, r9
 8015ffc:	f7f8 fbce 	bl	800e79c <mbedtls_mpi_size>
 8016000:	6060      	str	r0, [r4, #4]
    if( ret == 0 && *p != end )
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	42b3      	cmp	r3, r6
 8016006:	d1de      	bne.n	8015fc6 <mbedtls_pk_parse_subpubkey+0xaa>
 8016008:	e797      	b.n	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 801600a:	4c15      	ldr	r4, [pc, #84]	; (8016060 <mbedtls_pk_parse_subpubkey+0x144>)
 801600c:	e7d1      	b.n	8015fb2 <mbedtls_pk_parse_subpubkey+0x96>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 801600e:	3b02      	subs	r3, #2
 8016010:	2b01      	cmp	r3, #1
 8016012:	d81d      	bhi.n	8016050 <mbedtls_pk_parse_subpubkey+0x134>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 8016014:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016018:	a803      	add	r0, sp, #12
 801601a:	f7ff fd93 	bl	8015b44 <pk_use_ecparams>
        if( ret == 0 )
 801601e:	4604      	mov	r4, r0
 8016020:	2800      	cmp	r0, #0
 8016022:	d1c6      	bne.n	8015fb2 <mbedtls_pk_parse_subpubkey+0x96>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 8016024:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8016028:	683a      	ldr	r2, [r7, #0]
 801602a:	f109 0a88 	add.w	sl, r9, #136	; 0x88
 801602e:	1ab3      	subs	r3, r6, r2
 8016030:	4651      	mov	r1, sl
 8016032:	4648      	mov	r0, r9
 8016034:	f7fc fb0a 	bl	801264c <mbedtls_ecp_point_read_binary>
 8016038:	4604      	mov	r4, r0
 801603a:	b920      	cbnz	r0, 8016046 <mbedtls_pk_parse_subpubkey+0x12a>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 801603c:	4651      	mov	r1, sl
 801603e:	4648      	mov	r0, r9
 8016040:	f7fc fb90 	bl	8012764 <mbedtls_ecp_check_pubkey>
 8016044:	4604      	mov	r4, r0
    *p = (unsigned char *) end;
 8016046:	603e      	str	r6, [r7, #0]
    if( ret == 0 && *p != end )
 8016048:	2c00      	cmp	r4, #0
 801604a:	f43f af76 	beq.w	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
 801604e:	e7b0      	b.n	8015fb2 <mbedtls_pk_parse_subpubkey+0x96>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8016050:	4c04      	ldr	r4, [pc, #16]	; (8016064 <mbedtls_pk_parse_subpubkey+0x148>)
 8016052:	e7ae      	b.n	8015fb2 <mbedtls_pk_parse_subpubkey+0x96>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8016054:	4d01      	ldr	r5, [pc, #4]	; (801605c <mbedtls_pk_parse_subpubkey+0x140>)
 8016056:	e770      	b.n	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016058:	4d02      	ldr	r5, [pc, #8]	; (8016064 <mbedtls_pk_parse_subpubkey+0x148>)
 801605a:	e76e      	b.n	8015f3a <mbedtls_pk_parse_subpubkey+0x1e>
 801605c:	ffffc49a 	.word	0xffffc49a
 8016060:	ffffc500 	.word	0xffffc500
 8016064:	ffffc380 	.word	0xffffc380

08016068 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8016068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801606c:	b088      	sub	sp, #32
 801606e:	4605      	mov	r5, r0
 8016070:	4617      	mov	r7, r2

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8016072:	a805      	add	r0, sp, #20
{
 8016074:	460e      	mov	r6, r1
 8016076:	4699      	mov	r9, r3
 8016078:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    mbedtls_pem_init( &pem );
 801607c:	f7ff f97d 	bl	801537a <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8016080:	2f00      	cmp	r7, #0
 8016082:	d139      	bne.n	80160f8 <mbedtls_pk_parse_key+0x90>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8016084:	463a      	mov	r2, r7
 8016086:	4631      	mov	r1, r6
 8016088:	4628      	mov	r0, r5
 801608a:	f7ff fedb 	bl	8015e44 <pk_parse_key_pkcs8_unencrypted_der>
 801608e:	2800      	cmp	r0, #0
 8016090:	f000 80b5 	beq.w	80161fe <mbedtls_pk_parse_key+0x196>
        return( 0 );

    mbedtls_pk_free( pk );
 8016094:	4628      	mov	r0, r5
 8016096:	f7ff fae6 	bl	8015666 <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 801609a:	2001      	movs	r0, #1
 801609c:	f7ff faf4 	bl	8015688 <mbedtls_pk_info_from_type>
 80160a0:	4601      	mov	r1, r0
 80160a2:	2800      	cmp	r0, #0
 80160a4:	d040      	beq.n	8016128 <mbedtls_pk_parse_key+0xc0>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                           ) ) != 0 ||
 80160a6:	4628      	mov	r0, r5
 80160a8:	f7ff fafa 	bl	80156a0 <mbedtls_pk_setup>
 80160ac:	2800      	cmp	r0, #0
 80160ae:	f040 80a6 	bne.w	80161fe <mbedtls_pk_parse_key+0x196>
 80160b2:	463a      	mov	r2, r7
 80160b4:	4631      	mov	r1, r6
 80160b6:	6868      	ldr	r0, [r5, #4]
 80160b8:	f7ff fd62 	bl	8015b80 <pk_parse_key_pkcs1_der>
 80160bc:	2800      	cmp	r0, #0
 80160be:	f000 809e 	beq.w	80161fe <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) ) == 0 )
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 80160c2:	4628      	mov	r0, r5
 80160c4:	f7ff facf 	bl	8015666 <mbedtls_pk_free>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 80160c8:	2002      	movs	r0, #2
 80160ca:	f7ff fadd 	bl	8015688 <mbedtls_pk_info_from_type>
 80160ce:	4601      	mov	r1, r0
 80160d0:	b350      	cbz	r0, 8016128 <mbedtls_pk_parse_key+0xc0>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                         ) ) != 0 ||
 80160d2:	4628      	mov	r0, r5
 80160d4:	f7ff fae4 	bl	80156a0 <mbedtls_pk_setup>
 80160d8:	2800      	cmp	r0, #0
 80160da:	f040 8090 	bne.w	80161fe <mbedtls_pk_parse_key+0x196>
 80160de:	463a      	mov	r2, r7
 80160e0:	4631      	mov	r1, r6
 80160e2:	6868      	ldr	r0, [r5, #4]
 80160e4:	f7ff fdca 	bl	8015c7c <pk_parse_key_sec1_der>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	f000 8088 	beq.w	80161fe <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), key, keylen ) ) == 0 )
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 80160ee:	4628      	mov	r0, r5
 80160f0:	f7ff fab9 	bl	8015666 <mbedtls_pk_free>
#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80160f4:	4c43      	ldr	r4, [pc, #268]	; (8016204 <mbedtls_pk_parse_key+0x19c>)
 80160f6:	e018      	b.n	801612a <mbedtls_pk_parse_key+0xc2>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80160f8:	f107 38ff 	add.w	r8, r7, #4294967295
 80160fc:	f816 3008 	ldrb.w	r3, [r6, r8]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d136      	bne.n	8016172 <mbedtls_pk_parse_key+0x10a>
        ret = mbedtls_pem_read_buffer( &pem,
 8016104:	ab04      	add	r3, sp, #16
 8016106:	e9cd a301 	strd	sl, r3, [sp, #4]
 801610a:	f8cd 9000 	str.w	r9, [sp]
 801610e:	4633      	mov	r3, r6
 8016110:	4a3d      	ldr	r2, [pc, #244]	; (8016208 <mbedtls_pk_parse_key+0x1a0>)
 8016112:	493e      	ldr	r1, [pc, #248]	; (801620c <mbedtls_pk_parse_key+0x1a4>)
 8016114:	a805      	add	r0, sp, #20
 8016116:	f7ff f935 	bl	8015384 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 801611a:	4604      	mov	r4, r0
 801611c:	b9e0      	cbnz	r0, 8016158 <mbedtls_pk_parse_key+0xf0>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 801611e:	2001      	movs	r0, #1
 8016120:	f7ff fab2 	bl	8015688 <mbedtls_pk_info_from_type>
 8016124:	4601      	mov	r1, r0
 8016126:	b920      	cbnz	r0, 8016132 <mbedtls_pk_parse_key+0xca>
            return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016128:	4c39      	ldr	r4, [pc, #228]	; (8016210 <mbedtls_pk_parse_key+0x1a8>)
}
 801612a:	4620      	mov	r0, r4
 801612c:	b008      	add	sp, #32
 801612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( ( ret = mbedtls_pk_setup( pk, pk_info                    ) ) != 0 ||
 8016132:	4628      	mov	r0, r5
 8016134:	f7ff fab4 	bl	80156a0 <mbedtls_pk_setup>
 8016138:	4604      	mov	r4, r0
 801613a:	b930      	cbnz	r0, 801614a <mbedtls_pk_parse_key+0xe2>
 801613c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8016140:	6868      	ldr	r0, [r5, #4]
 8016142:	f7ff fd1d 	bl	8015b80 <pk_parse_key_pkcs1_der>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8016146:	4604      	mov	r4, r0
 8016148:	b110      	cbz	r0, 8016150 <mbedtls_pk_parse_key+0xe8>
            mbedtls_pk_free( pk );
 801614a:	4628      	mov	r0, r5
 801614c:	f7ff fa8b 	bl	8015666 <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 8016150:	a805      	add	r0, sp, #20
 8016152:	f7ff fa6f 	bl	8015634 <mbedtls_pem_free>
        return( ret );
 8016156:	e7e8      	b.n	801612a <mbedtls_pk_parse_key+0xc2>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8016158:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 801615c:	d101      	bne.n	8016162 <mbedtls_pk_parse_key+0xfa>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 801615e:	4c2d      	ldr	r4, [pc, #180]	; (8016214 <mbedtls_pk_parse_key+0x1ac>)
 8016160:	e7e3      	b.n	801612a <mbedtls_pk_parse_key+0xc2>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8016162:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8016166:	d101      	bne.n	801616c <mbedtls_pk_parse_key+0x104>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8016168:	4c2b      	ldr	r4, [pc, #172]	; (8016218 <mbedtls_pk_parse_key+0x1b0>)
 801616a:	e7de      	b.n	801612a <mbedtls_pk_parse_key+0xc2>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801616c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8016170:	d1db      	bne.n	801612a <mbedtls_pk_parse_key+0xc2>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8016172:	f816 3008 	ldrb.w	r3, [r6, r8]
 8016176:	bb3b      	cbnz	r3, 80161c8 <mbedtls_pk_parse_key+0x160>
        ret = mbedtls_pem_read_buffer( &pem,
 8016178:	ab04      	add	r3, sp, #16
 801617a:	e9cd a301 	strd	sl, r3, [sp, #4]
 801617e:	f8cd 9000 	str.w	r9, [sp]
 8016182:	4633      	mov	r3, r6
 8016184:	4a25      	ldr	r2, [pc, #148]	; (801621c <mbedtls_pk_parse_key+0x1b4>)
 8016186:	4926      	ldr	r1, [pc, #152]	; (8016220 <mbedtls_pk_parse_key+0x1b8>)
 8016188:	a805      	add	r0, sp, #20
 801618a:	f7ff f8fb 	bl	8015384 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 801618e:	4604      	mov	r4, r0
 8016190:	b988      	cbnz	r0, 80161b6 <mbedtls_pk_parse_key+0x14e>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 8016192:	2002      	movs	r0, #2
 8016194:	f7ff fa78 	bl	8015688 <mbedtls_pk_info_from_type>
 8016198:	4601      	mov	r1, r0
 801619a:	2800      	cmp	r0, #0
 801619c:	d0c4      	beq.n	8016128 <mbedtls_pk_parse_key+0xc0>
        if( ( ret = mbedtls_pk_setup( pk, pk_info                   ) ) != 0 ||
 801619e:	4628      	mov	r0, r5
 80161a0:	f7ff fa7e 	bl	80156a0 <mbedtls_pk_setup>
 80161a4:	4604      	mov	r4, r0
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d1cf      	bne.n	801614a <mbedtls_pk_parse_key+0xe2>
 80161aa:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80161ae:	6868      	ldr	r0, [r5, #4]
 80161b0:	f7ff fd64 	bl	8015c7c <pk_parse_key_sec1_der>
 80161b4:	e7c7      	b.n	8016146 <mbedtls_pk_parse_key+0xde>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80161b6:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80161ba:	d0d0      	beq.n	801615e <mbedtls_pk_parse_key+0xf6>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80161bc:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80161c0:	d0d2      	beq.n	8016168 <mbedtls_pk_parse_key+0x100>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80161c2:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80161c6:	d1b0      	bne.n	801612a <mbedtls_pk_parse_key+0xc2>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80161c8:	f816 3008 	ldrb.w	r3, [r6, r8]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	f47f af59 	bne.w	8016084 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 80161d2:	aa04      	add	r2, sp, #16
 80161d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80161d8:	9300      	str	r3, [sp, #0]
 80161da:	4a12      	ldr	r2, [pc, #72]	; (8016224 <mbedtls_pk_parse_key+0x1bc>)
 80161dc:	4912      	ldr	r1, [pc, #72]	; (8016228 <mbedtls_pk_parse_key+0x1c0>)
 80161de:	4633      	mov	r3, r6
 80161e0:	a805      	add	r0, sp, #20
 80161e2:	f7ff f8cf 	bl	8015384 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 80161e6:	4604      	mov	r4, r0
 80161e8:	b928      	cbnz	r0, 80161f6 <mbedtls_pk_parse_key+0x18e>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 80161ea:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80161ee:	4628      	mov	r0, r5
 80161f0:	f7ff fe28 	bl	8015e44 <pk_parse_key_pkcs8_unencrypted_der>
 80161f4:	e7a7      	b.n	8016146 <mbedtls_pk_parse_key+0xde>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80161f6:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80161fa:	d196      	bne.n	801612a <mbedtls_pk_parse_key+0xc2>
 80161fc:	e742      	b.n	8016084 <mbedtls_pk_parse_key+0x1c>
        return( 0 );
 80161fe:	2400      	movs	r4, #0
 8016200:	e793      	b.n	801612a <mbedtls_pk_parse_key+0xc2>
 8016202:	bf00      	nop
 8016204:	ffffc300 	.word	0xffffc300
 8016208:	0803056a 	.word	0x0803056a
 801620c:	08030588 	.word	0x08030588
 8016210:	ffffc380 	.word	0xffffc380
 8016214:	ffffc480 	.word	0xffffc480
 8016218:	ffffc400 	.word	0xffffc400
 801621c:	080305a8 	.word	0x080305a8
 8016220:	080305c5 	.word	0x080305c5
 8016224:	080305e4 	.word	0x080305e4
 8016228:	080305fe 	.word	0x080305fe

0801622c <mbedtls_platform_set_calloc_free>:
void (*mbedtls_free)( void * )     = MBEDTLS_PLATFORM_STD_FREE;

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc = calloc_func;
 801622c:	4b02      	ldr	r3, [pc, #8]	; (8016238 <mbedtls_platform_set_calloc_free+0xc>)
    mbedtls_free = free_func;
 801622e:	e9c3 0100 	strd	r0, r1, [r3]
    return( 0 );
}
 8016232:	2000      	movs	r0, #0
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	200005a0 	.word	0x200005a0

0801623c <mbedtls_zeroize>:
#define mbedtls_calloc calloc
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 801623c:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 801623e:	2300      	movs	r3, #0
 8016240:	4288      	cmp	r0, r1
 8016242:	d100      	bne.n	8016246 <mbedtls_zeroize+0xa>
}
 8016244:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8016246:	7003      	strb	r3, [r0, #0]
 8016248:	3001      	adds	r0, #1
 801624a:	e7f9      	b.n	8016240 <mbedtls_zeroize+0x4>

0801624c <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static void mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 801624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016250:	b095      	sub	sp, #84	; 0x54
    unsigned char counter[4];
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8016252:	ad04      	add	r5, sp, #16
{
 8016254:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8016256:	4607      	mov	r7, r0
 8016258:	460e      	mov	r6, r1
 801625a:	4691      	mov	r9, r2
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 801625c:	2100      	movs	r1, #0
 801625e:	2240      	movs	r2, #64	; 0x40
 8016260:	4628      	mov	r0, r5
    memset( counter, 0, 4 );
 8016262:	f10d 0850 	add.w	r8, sp, #80	; 0x50
{
 8016266:	469a      	mov	sl, r3
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8016268:	f00c f861 	bl	802232e <memset>
    memset( counter, 0, 4 );
 801626c:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 801626e:	6820      	ldr	r0, [r4, #0]
    memset( counter, 0, 4 );
 8016270:	f848 3d44 	str.w	r3, [r8, #-68]!
    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8016274:	f7fe fa52 	bl	801471c <mbedtls_md_get_size>
 8016278:	4683      	mov	fp, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 801627a:	b936      	cbnz	r6, 801628a <mgf_mask+0x3e>
        counter[3]++;

        dlen -= use_len;
    }

    mbedtls_zeroize( mask, sizeof( mask ) );
 801627c:	2140      	movs	r1, #64	; 0x40
 801627e:	4628      	mov	r0, r5
 8016280:	f7ff ffdc 	bl	801623c <mbedtls_zeroize>
}
 8016284:	b015      	add	sp, #84	; 0x54
 8016286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801628a:	455e      	cmp	r6, fp
 801628c:	4633      	mov	r3, r6
        mbedtls_md_starts( md_ctx );
 801628e:	4620      	mov	r0, r4
 8016290:	bf28      	it	cs
 8016292:	465b      	movcs	r3, fp
 8016294:	9301      	str	r3, [sp, #4]
 8016296:	f7fe f949 	bl	801452c <mbedtls_md_starts>
        mbedtls_md_update( md_ctx, src, slen );
 801629a:	4652      	mov	r2, sl
 801629c:	4649      	mov	r1, r9
 801629e:	4620      	mov	r0, r4
 80162a0:	f7fe f952 	bl	8014548 <mbedtls_md_update>
        mbedtls_md_update( md_ctx, counter, 4 );
 80162a4:	2204      	movs	r2, #4
 80162a6:	4641      	mov	r1, r8
 80162a8:	4620      	mov	r0, r4
 80162aa:	f7fe f94d 	bl	8014548 <mbedtls_md_update>
        mbedtls_md_finish( md_ctx, mask );
 80162ae:	4629      	mov	r1, r5
 80162b0:	4620      	mov	r0, r4
 80162b2:	f7fe f957 	bl	8014564 <mbedtls_md_finish>
        for( i = 0; i < use_len; ++i )
 80162b6:	9b01      	ldr	r3, [sp, #4]
 80162b8:	4639      	mov	r1, r7
 80162ba:	2200      	movs	r2, #0
 80162bc:	429a      	cmp	r2, r3
 80162be:	d107      	bne.n	80162d0 <mgf_mask+0x84>
        counter[3]++;
 80162c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80162c4:	3301      	adds	r3, #1
 80162c6:	4417      	add	r7, r2
 80162c8:	f88d 300f 	strb.w	r3, [sp, #15]
        dlen -= use_len;
 80162cc:	1ab6      	subs	r6, r6, r2
 80162ce:	e7d4      	b.n	801627a <mgf_mask+0x2e>
            *p++ ^= mask[i];
 80162d0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80162d4:	f815 c002 	ldrb.w	ip, [r5, r2]
 80162d8:	ea80 000c 	eor.w	r0, r0, ip
 80162dc:	f801 0c01 	strb.w	r0, [r1, #-1]
        for( i = 0; i < use_len; ++i )
 80162e0:	3201      	adds	r2, #1
 80162e2:	e7eb      	b.n	80162bc <mgf_mask+0x70>

080162e4 <mbedtls_rsa_init>:
{
 80162e4:	b538      	push	{r3, r4, r5, lr}
 80162e6:	460d      	mov	r5, r1
 80162e8:	4614      	mov	r4, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80162ea:	2100      	movs	r1, #0
 80162ec:	22a4      	movs	r2, #164	; 0xa4
 80162ee:	f00c f81e 	bl	802232e <memset>
    ctx->hash_id = hash_id;
 80162f2:	e9c0 5429 	strd	r5, r4, [r0, #164]	; 0xa4
}
 80162f6:	bd38      	pop	{r3, r4, r5, pc}

080162f8 <mbedtls_rsa_check_pubkey>:
    if( !ctx->N.p || !ctx->E.p )
 80162f8:	6902      	ldr	r2, [r0, #16]
{
 80162fa:	b538      	push	{r3, r4, r5, lr}
 80162fc:	4604      	mov	r4, r0
    if( !ctx->N.p || !ctx->E.p )
 80162fe:	b302      	cbz	r2, 8016342 <mbedtls_rsa_check_pubkey+0x4a>
 8016300:	69c3      	ldr	r3, [r0, #28]
 8016302:	b1f3      	cbz	r3, 8016342 <mbedtls_rsa_check_pubkey+0x4a>
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 8016304:	6812      	ldr	r2, [r2, #0]
 8016306:	07d2      	lsls	r2, r2, #31
 8016308:	d51b      	bpl.n	8016342 <mbedtls_rsa_check_pubkey+0x4a>
        ( ctx->E.p[0] & 1 ) == 0 )
 801630a:	681b      	ldr	r3, [r3, #0]
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 801630c:	07db      	lsls	r3, r3, #31
 801630e:	d518      	bpl.n	8016342 <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 8016310:	f100 0508 	add.w	r5, r0, #8
 8016314:	4628      	mov	r0, r5
 8016316:	f7f8 fa21 	bl	800e75c <mbedtls_mpi_bitlen>
 801631a:	287f      	cmp	r0, #127	; 0x7f
 801631c:	d911      	bls.n	8016342 <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_bitlen( &ctx->N ) > MBEDTLS_MPI_MAX_BITS )
 801631e:	4628      	mov	r0, r5
 8016320:	f7f8 fa1c 	bl	800e75c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 8016324:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8016328:	d80b      	bhi.n	8016342 <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 801632a:	3414      	adds	r4, #20
 801632c:	4620      	mov	r0, r4
 801632e:	f7f8 fa15 	bl	800e75c <mbedtls_mpi_bitlen>
 8016332:	2801      	cmp	r0, #1
 8016334:	d905      	bls.n	8016342 <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 8016336:	4629      	mov	r1, r5
 8016338:	4620      	mov	r0, r4
 801633a:	f7f8 fba3 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 801633e:	2800      	cmp	r0, #0
 8016340:	db01      	blt.n	8016346 <mbedtls_rsa_check_pubkey+0x4e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016342:	4802      	ldr	r0, [pc, #8]	; (801634c <mbedtls_rsa_check_pubkey+0x54>)
}
 8016344:	bd38      	pop	{r3, r4, r5, pc}
    return( 0 );
 8016346:	2000      	movs	r0, #0
 8016348:	e7fc      	b.n	8016344 <mbedtls_rsa_check_pubkey+0x4c>
 801634a:	bf00      	nop
 801634c:	ffffbe00 	.word	0xffffbe00

08016350 <mbedtls_rsa_check_privkey>:
{
 8016350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016354:	b0a9      	sub	sp, #164	; 0xa4
 8016356:	4605      	mov	r5, r0
    if( ( ret = mbedtls_rsa_check_pubkey( ctx ) ) != 0 )
 8016358:	f7ff ffce 	bl	80162f8 <mbedtls_rsa_check_pubkey>
 801635c:	4604      	mov	r4, r0
 801635e:	2800      	cmp	r0, #0
 8016360:	f040 80cb 	bne.w	80164fa <mbedtls_rsa_check_privkey+0x1aa>
    if( !ctx->P.p || !ctx->Q.p || !ctx->D.p )
 8016364:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8016366:	2b00      	cmp	r3, #0
 8016368:	f000 80f5 	beq.w	8016556 <mbedtls_rsa_check_privkey+0x206>
 801636c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801636e:	2b00      	cmp	r3, #0
 8016370:	f000 80f1 	beq.w	8016556 <mbedtls_rsa_check_privkey+0x206>
 8016374:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016376:	2b00      	cmp	r3, #0
 8016378:	f000 80ed 	beq.w	8016556 <mbedtls_rsa_check_privkey+0x206>
    mbedtls_mpi_init( &PQ ); mbedtls_mpi_init( &DE ); mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 );
 801637c:	a801      	add	r0, sp, #4
 801637e:	f7f8 f8b7 	bl	800e4f0 <mbedtls_mpi_init>
 8016382:	a804      	add	r0, sp, #16
 8016384:	f7f8 f8b4 	bl	800e4f0 <mbedtls_mpi_init>
 8016388:	a807      	add	r0, sp, #28
 801638a:	f7f8 f8b1 	bl	800e4f0 <mbedtls_mpi_init>
 801638e:	a80a      	add	r0, sp, #40	; 0x28
 8016390:	f7f8 f8ae 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &H  ); mbedtls_mpi_init( &I  ); mbedtls_mpi_init( &G  ); mbedtls_mpi_init( &G2 );
 8016394:	a80d      	add	r0, sp, #52	; 0x34
 8016396:	f7f8 f8ab 	bl	800e4f0 <mbedtls_mpi_init>
 801639a:	a810      	add	r0, sp, #64	; 0x40
 801639c:	f7f8 f8a8 	bl	800e4f0 <mbedtls_mpi_init>
 80163a0:	a813      	add	r0, sp, #76	; 0x4c
 80163a2:	f7f8 f8a5 	bl	800e4f0 <mbedtls_mpi_init>
 80163a6:	a816      	add	r0, sp, #88	; 0x58
 80163a8:	f7f8 f8a2 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L1 ); mbedtls_mpi_init( &L2 ); mbedtls_mpi_init( &DP ); mbedtls_mpi_init( &DQ );
 80163ac:	a819      	add	r0, sp, #100	; 0x64
 80163ae:	f7f8 f89f 	bl	800e4f0 <mbedtls_mpi_init>
 80163b2:	a81c      	add	r0, sp, #112	; 0x70
 80163b4:	f7f8 f89c 	bl	800e4f0 <mbedtls_mpi_init>
 80163b8:	a81f      	add	r0, sp, #124	; 0x7c
 80163ba:	f7f8 f899 	bl	800e4f0 <mbedtls_mpi_init>
 80163be:	a822      	add	r0, sp, #136	; 0x88
 80163c0:	f7f8 f896 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 80163c4:	f105 072c 	add.w	r7, r5, #44	; 0x2c
    mbedtls_mpi_init( &QP );
 80163c8:	a825      	add	r0, sp, #148	; 0x94
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 80163ca:	f105 0638 	add.w	r6, r5, #56	; 0x38
    mbedtls_mpi_init( &QP );
 80163ce:	f7f8 f88f 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 80163d2:	4632      	mov	r2, r6
 80163d4:	4639      	mov	r1, r7
 80163d6:	a801      	add	r0, sp, #4
 80163d8:	f7f8 fca6 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80163dc:	4604      	mov	r4, r0
 80163de:	2800      	cmp	r0, #0
 80163e0:	d15e      	bne.n	80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DE, &ctx->D, &ctx->E ) );
 80163e2:	f105 0820 	add.w	r8, r5, #32
 80163e6:	f105 0914 	add.w	r9, r5, #20
 80163ea:	464a      	mov	r2, r9
 80163ec:	4641      	mov	r1, r8
 80163ee:	a804      	add	r0, sp, #16
 80163f0:	f7f8 fc9a 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80163f4:	4604      	mov	r4, r0
 80163f6:	2800      	cmp	r0, #0
 80163f8:	d152      	bne.n	80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80163fa:	2201      	movs	r2, #1
 80163fc:	4639      	mov	r1, r7
 80163fe:	a807      	add	r0, sp, #28
 8016400:	f7f8 fc7c 	bl	800ecfc <mbedtls_mpi_sub_int>
 8016404:	4604      	mov	r4, r0
 8016406:	2800      	cmp	r0, #0
 8016408:	d14a      	bne.n	80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 801640a:	2201      	movs	r2, #1
 801640c:	4631      	mov	r1, r6
 801640e:	a80a      	add	r0, sp, #40	; 0x28
 8016410:	f7f8 fc74 	bl	800ecfc <mbedtls_mpi_sub_int>
 8016414:	4604      	mov	r4, r0
 8016416:	2800      	cmp	r0, #0
 8016418:	d142      	bne.n	80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &P1, &Q1 ) );
 801641a:	aa0a      	add	r2, sp, #40	; 0x28
 801641c:	a907      	add	r1, sp, #28
 801641e:	a80d      	add	r0, sp, #52	; 0x34
 8016420:	f7f8 fc82 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8016424:	4604      	mov	r4, r0
 8016426:	2800      	cmp	r0, #0
 8016428:	d13a      	bne.n	80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
 801642a:	aa0d      	add	r2, sp, #52	; 0x34
 801642c:	4649      	mov	r1, r9
 801642e:	a813      	add	r0, sp, #76	; 0x4c
 8016430:	f7f9 f910 	bl	800f654 <mbedtls_mpi_gcd>
 8016434:	4604      	mov	r4, r0
 8016436:	2800      	cmp	r0, #0
 8016438:	d132      	bne.n	80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G2, &P1, &Q1 ) );
 801643a:	aa0a      	add	r2, sp, #40	; 0x28
 801643c:	a907      	add	r1, sp, #28
 801643e:	a816      	add	r0, sp, #88	; 0x58
 8016440:	f7f9 f908 	bl	800f654 <mbedtls_mpi_gcd>
 8016444:	4604      	mov	r4, r0
 8016446:	bb58      	cbnz	r0, 80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L1, &L2, &H, &G2 ) );
 8016448:	ab16      	add	r3, sp, #88	; 0x58
 801644a:	aa0d      	add	r2, sp, #52	; 0x34
 801644c:	a91c      	add	r1, sp, #112	; 0x70
 801644e:	a819      	add	r0, sp, #100	; 0x64
 8016450:	f7f8 fce1 	bl	800ee16 <mbedtls_mpi_div_mpi>
 8016454:	4604      	mov	r4, r0
 8016456:	bb18      	cbnz	r0, 80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &I, &DE, &L1  ) );
 8016458:	aa19      	add	r2, sp, #100	; 0x64
 801645a:	a904      	add	r1, sp, #16
 801645c:	a810      	add	r0, sp, #64	; 0x40
 801645e:	f7f8 fe90 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8016462:	4604      	mov	r4, r0
 8016464:	b9e0      	cbnz	r0, 80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DP, &ctx->D, &P1 ) );
 8016466:	aa07      	add	r2, sp, #28
 8016468:	4641      	mov	r1, r8
 801646a:	a81f      	add	r0, sp, #124	; 0x7c
 801646c:	f7f8 fe89 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8016470:	4604      	mov	r4, r0
 8016472:	b9a8      	cbnz	r0, 80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DQ, &ctx->D, &Q1 ) );
 8016474:	aa0a      	add	r2, sp, #40	; 0x28
 8016476:	4641      	mov	r1, r8
 8016478:	a822      	add	r0, sp, #136	; 0x88
 801647a:	f7f8 fe82 	bl	800f182 <mbedtls_mpi_mod_mpi>
 801647e:	4604      	mov	r4, r0
 8016480:	b970      	cbnz	r0, 80164a0 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &QP, &ctx->Q, &ctx->P ) );
 8016482:	463a      	mov	r2, r7
 8016484:	4631      	mov	r1, r6
 8016486:	a825      	add	r0, sp, #148	; 0x94
 8016488:	f7f9 f981 	bl	800f78e <mbedtls_mpi_inv_mod>
 801648c:	4604      	mov	r4, r0
 801648e:	b938      	cbnz	r0, 80164a0 <mbedtls_rsa_check_privkey+0x150>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 8016490:	f105 0108 	add.w	r1, r5, #8
 8016494:	a801      	add	r0, sp, #4
 8016496:	f7f8 faf5 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 801649a:	2800      	cmp	r0, #0
 801649c:	d031      	beq.n	8016502 <mbedtls_rsa_check_privkey+0x1b2>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801649e:	4c2f      	ldr	r4, [pc, #188]	; (801655c <mbedtls_rsa_check_privkey+0x20c>)
    mbedtls_mpi_free( &PQ ); mbedtls_mpi_free( &DE ); mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 );
 80164a0:	a801      	add	r0, sp, #4
 80164a2:	f7f8 f82d 	bl	800e500 <mbedtls_mpi_free>
 80164a6:	a804      	add	r0, sp, #16
 80164a8:	f7f8 f82a 	bl	800e500 <mbedtls_mpi_free>
 80164ac:	a807      	add	r0, sp, #28
 80164ae:	f7f8 f827 	bl	800e500 <mbedtls_mpi_free>
 80164b2:	a80a      	add	r0, sp, #40	; 0x28
 80164b4:	f7f8 f824 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &H  ); mbedtls_mpi_free( &I  ); mbedtls_mpi_free( &G  ); mbedtls_mpi_free( &G2 );
 80164b8:	a80d      	add	r0, sp, #52	; 0x34
 80164ba:	f7f8 f821 	bl	800e500 <mbedtls_mpi_free>
 80164be:	a810      	add	r0, sp, #64	; 0x40
 80164c0:	f7f8 f81e 	bl	800e500 <mbedtls_mpi_free>
 80164c4:	a813      	add	r0, sp, #76	; 0x4c
 80164c6:	f7f8 f81b 	bl	800e500 <mbedtls_mpi_free>
 80164ca:	a816      	add	r0, sp, #88	; 0x58
 80164cc:	f7f8 f818 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L1 ); mbedtls_mpi_free( &L2 ); mbedtls_mpi_free( &DP ); mbedtls_mpi_free( &DQ );
 80164d0:	a819      	add	r0, sp, #100	; 0x64
 80164d2:	f7f8 f815 	bl	800e500 <mbedtls_mpi_free>
 80164d6:	a81c      	add	r0, sp, #112	; 0x70
 80164d8:	f7f8 f812 	bl	800e500 <mbedtls_mpi_free>
 80164dc:	a81f      	add	r0, sp, #124	; 0x7c
 80164de:	f7f8 f80f 	bl	800e500 <mbedtls_mpi_free>
 80164e2:	a822      	add	r0, sp, #136	; 0x88
 80164e4:	f7f8 f80c 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &QP );
 80164e8:	a825      	add	r0, sp, #148	; 0x94
 80164ea:	f7f8 f809 	bl	800e500 <mbedtls_mpi_free>
    if( ret == MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 80164ee:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 80164f2:	d002      	beq.n	80164fa <mbedtls_rsa_check_privkey+0x1aa>
    if( ret != 0 )
 80164f4:	b10c      	cbz	r4, 80164fa <mbedtls_rsa_check_privkey+0x1aa>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED + ret );
 80164f6:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
}
 80164fa:	4620      	mov	r0, r4
 80164fc:	b029      	add	sp, #164	; 0xa4
 80164fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 8016502:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8016506:	a81f      	add	r0, sp, #124	; 0x7c
 8016508:	f7f8 fabc 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 801650c:	2800      	cmp	r0, #0
 801650e:	d1c6      	bne.n	801649e <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 8016510:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8016514:	a822      	add	r0, sp, #136	; 0x88
 8016516:	f7f8 fab5 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 801651a:	2800      	cmp	r0, #0
 801651c:	d1bf      	bne.n	801649e <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 801651e:	f105 015c 	add.w	r1, r5, #92	; 0x5c
 8016522:	a825      	add	r0, sp, #148	; 0x94
 8016524:	f7f8 faae 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 8016528:	2800      	cmp	r0, #0
 801652a:	d1b8      	bne.n	801649e <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 801652c:	2100      	movs	r1, #0
 801652e:	a81c      	add	r0, sp, #112	; 0x70
 8016530:	f7f8 fae8 	bl	800eb04 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 8016534:	2800      	cmp	r0, #0
 8016536:	d1b2      	bne.n	801649e <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &I, 1 ) != 0 ||
 8016538:	2101      	movs	r1, #1
 801653a:	a810      	add	r0, sp, #64	; 0x40
 801653c:	f7f8 fae2 	bl	800eb04 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 8016540:	2800      	cmp	r0, #0
 8016542:	d1ac      	bne.n	801649e <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8016544:	2101      	movs	r1, #1
 8016546:	a813      	add	r0, sp, #76	; 0x4c
 8016548:	f7f8 fadc 	bl	800eb04 <mbedtls_mpi_cmp_int>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801654c:	4c03      	ldr	r4, [pc, #12]	; (801655c <mbedtls_rsa_check_privkey+0x20c>)
 801654e:	2800      	cmp	r0, #0
 8016550:	bf08      	it	eq
 8016552:	2400      	moveq	r4, #0
 8016554:	e7a4      	b.n	80164a0 <mbedtls_rsa_check_privkey+0x150>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016556:	4c01      	ldr	r4, [pc, #4]	; (801655c <mbedtls_rsa_check_privkey+0x20c>)
 8016558:	e7cf      	b.n	80164fa <mbedtls_rsa_check_privkey+0x1aa>
 801655a:	bf00      	nop
 801655c:	ffffbe00 	.word	0xffffbe00

08016560 <mbedtls_rsa_check_pub_priv>:
{
 8016560:	b538      	push	{r3, r4, r5, lr}
 8016562:	4605      	mov	r5, r0
 8016564:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 8016566:	f7ff fec7 	bl	80162f8 <mbedtls_rsa_check_pubkey>
 801656a:	b988      	cbnz	r0, 8016590 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 801656c:	4620      	mov	r0, r4
 801656e:	f7ff feef 	bl	8016350 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 8016572:	b968      	cbnz	r0, 8016590 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8016574:	f104 0108 	add.w	r1, r4, #8
 8016578:	f105 0008 	add.w	r0, r5, #8
 801657c:	f7f8 fa82 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 8016580:	b930      	cbnz	r0, 8016590 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8016582:	f104 0114 	add.w	r1, r4, #20
 8016586:	f105 0014 	add.w	r0, r5, #20
 801658a:	f7f8 fa7b 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 801658e:	b100      	cbz	r0, 8016592 <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016590:	4800      	ldr	r0, [pc, #0]	; (8016594 <mbedtls_rsa_check_pub_priv+0x34>)
}
 8016592:	bd38      	pop	{r3, r4, r5, pc}
 8016594:	ffffbe00 	.word	0xffffbe00

08016598 <mbedtls_rsa_public>:
{
 8016598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801659a:	4605      	mov	r5, r0
 801659c:	b087      	sub	sp, #28
 801659e:	460c      	mov	r4, r1
    mbedtls_mpi_init( &T );
 80165a0:	a803      	add	r0, sp, #12
{
 80165a2:	4616      	mov	r6, r2
    mbedtls_mpi_init( &T );
 80165a4:	f7f7 ffa4 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80165a8:	4621      	mov	r1, r4
 80165aa:	686a      	ldr	r2, [r5, #4]
 80165ac:	a803      	add	r0, sp, #12
 80165ae:	f7f8 f8fb 	bl	800e7a8 <mbedtls_mpi_read_binary>
 80165b2:	4604      	mov	r4, r0
 80165b4:	b9d0      	cbnz	r0, 80165ec <mbedtls_rsa_public+0x54>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80165b6:	f105 0408 	add.w	r4, r5, #8
 80165ba:	4621      	mov	r1, r4
 80165bc:	a803      	add	r0, sp, #12
 80165be:	f7f8 fa61 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 80165c2:	2800      	cmp	r0, #0
 80165c4:	da1b      	bge.n	80165fe <mbedtls_rsa_public+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80165c6:	f105 0368 	add.w	r3, r5, #104	; 0x68
 80165ca:	a903      	add	r1, sp, #12
 80165cc:	9300      	str	r3, [sp, #0]
 80165ce:	f105 0214 	add.w	r2, r5, #20
 80165d2:	4623      	mov	r3, r4
 80165d4:	4608      	mov	r0, r1
    olen = ctx->len;
 80165d6:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80165d8:	f7f8 fe05 	bl	800f1e6 <mbedtls_mpi_exp_mod>
 80165dc:	4604      	mov	r4, r0
 80165de:	b928      	cbnz	r0, 80165ec <mbedtls_rsa_public+0x54>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80165e0:	463a      	mov	r2, r7
 80165e2:	4631      	mov	r1, r6
 80165e4:	a803      	add	r0, sp, #12
 80165e6:	f7f8 f912 	bl	800e80e <mbedtls_mpi_write_binary>
 80165ea:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 80165ec:	a803      	add	r0, sp, #12
 80165ee:	f7f7 ff87 	bl	800e500 <mbedtls_mpi_free>
    if( ret != 0 )
 80165f2:	b10c      	cbz	r4, 80165f8 <mbedtls_rsa_public+0x60>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80165f4:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 80165f8:	4620      	mov	r0, r4
 80165fa:	b007      	add	sp, #28
 80165fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80165fe:	f06f 0403 	mvn.w	r4, #3
 8016602:	e7f3      	b.n	80165ec <mbedtls_rsa_public+0x54>

08016604 <mbedtls_rsa_private>:
{
 8016604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016608:	461d      	mov	r5, r3
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 801660a:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 801660c:	b09d      	sub	sp, #116	; 0x74
 801660e:	4604      	mov	r4, r0
 8016610:	460e      	mov	r6, r1
 8016612:	4692      	mov	sl, r2
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 8016614:	2b00      	cmp	r3, #0
 8016616:	f000 8179 	beq.w	801690c <mbedtls_rsa_private+0x308>
 801661a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801661c:	2b00      	cmp	r3, #0
 801661e:	f000 8175 	beq.w	801690c <mbedtls_rsa_private+0x308>
 8016622:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016624:	2b00      	cmp	r3, #0
 8016626:	f000 8171 	beq.w	801690c <mbedtls_rsa_private+0x308>
    mbedtls_mpi_init( &T ); mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 801662a:	a804      	add	r0, sp, #16
 801662c:	f7f7 ff60 	bl	800e4f0 <mbedtls_mpi_init>
 8016630:	a807      	add	r0, sp, #28
 8016632:	f7f7 ff5d 	bl	800e4f0 <mbedtls_mpi_init>
 8016636:	a80a      	add	r0, sp, #40	; 0x28
 8016638:	f7f7 ff5a 	bl	800e4f0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 ); mbedtls_mpi_init( &R );
 801663c:	a80d      	add	r0, sp, #52	; 0x34
 801663e:	f7f7 ff57 	bl	800e4f0 <mbedtls_mpi_init>
 8016642:	a810      	add	r0, sp, #64	; 0x40
 8016644:	f7f7 ff54 	bl	800e4f0 <mbedtls_mpi_init>
 8016648:	a813      	add	r0, sp, #76	; 0x4c
 801664a:	f7f7 ff51 	bl	800e4f0 <mbedtls_mpi_init>
    if( f_rng != NULL )
 801664e:	b12e      	cbz	r6, 801665c <mbedtls_rsa_private+0x58>
        mbedtls_mpi_init( &DP_blind );
 8016650:	a816      	add	r0, sp, #88	; 0x58
 8016652:	f7f7 ff4d 	bl	800e4f0 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8016656:	a819      	add	r0, sp, #100	; 0x64
 8016658:	f7f7 ff4a 	bl	800e4f0 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801665c:	6862      	ldr	r2, [r4, #4]
 801665e:	4629      	mov	r1, r5
 8016660:	a804      	add	r0, sp, #16
 8016662:	f7f8 f8a1 	bl	800e7a8 <mbedtls_mpi_read_binary>
 8016666:	4603      	mov	r3, r0
 8016668:	2800      	cmp	r0, #0
 801666a:	f040 80e0 	bne.w	801682e <mbedtls_rsa_private+0x22a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 801666e:	f104 0508 	add.w	r5, r4, #8
 8016672:	4629      	mov	r1, r5
 8016674:	a804      	add	r0, sp, #16
 8016676:	f7f8 fa05 	bl	800ea84 <mbedtls_mpi_cmp_mpi>
 801667a:	2800      	cmp	r0, #0
 801667c:	f280 8141 	bge.w	8016902 <mbedtls_rsa_private+0x2fe>
    mbedtls_mpi *DP = &ctx->DP;
 8016680:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8016684:	f104 0850 	add.w	r8, r4, #80	; 0x50
    if( f_rng != NULL )
 8016688:	2e00      	cmp	r6, #0
 801668a:	f000 8089 	beq.w	80167a0 <mbedtls_rsa_private+0x19c>
    if( ctx->Vf.p != NULL )
 801668e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8016692:	2b00      	cmp	r3, #0
 8016694:	f000 80ee 	beq.w	8016874 <mbedtls_rsa_private+0x270>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8016698:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 801669c:	463a      	mov	r2, r7
 801669e:	4639      	mov	r1, r7
 80166a0:	4638      	mov	r0, r7
 80166a2:	f7f8 fb41 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80166a6:	4603      	mov	r3, r0
 80166a8:	2800      	cmp	r0, #0
 80166aa:	f040 80c0 	bne.w	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80166ae:	462a      	mov	r2, r5
 80166b0:	4639      	mov	r1, r7
 80166b2:	4638      	mov	r0, r7
 80166b4:	f7f8 fd65 	bl	800f182 <mbedtls_mpi_mod_mpi>
 80166b8:	4603      	mov	r3, r0
 80166ba:	2800      	cmp	r0, #0
 80166bc:	f040 80b7 	bne.w	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80166c0:	f104 0798 	add.w	r7, r4, #152	; 0x98
 80166c4:	463a      	mov	r2, r7
 80166c6:	4639      	mov	r1, r7
 80166c8:	4638      	mov	r0, r7
 80166ca:	f7f8 fb2d 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80166ce:	4603      	mov	r3, r0
 80166d0:	2800      	cmp	r0, #0
 80166d2:	f040 80ac 	bne.w	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80166d6:	462a      	mov	r2, r5
 80166d8:	4639      	mov	r1, r7
 80166da:	4638      	mov	r0, r7
 80166dc:	f7f8 fd51 	bl	800f182 <mbedtls_mpi_mod_mpi>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80166e0:	4603      	mov	r3, r0
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 80166e2:	2800      	cmp	r0, #0
 80166e4:	f040 80a3 	bne.w	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80166e8:	a904      	add	r1, sp, #16
 80166ea:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80166ee:	4608      	mov	r0, r1
 80166f0:	f7f8 fb1a 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80166f4:	4603      	mov	r3, r0
 80166f6:	2800      	cmp	r0, #0
 80166f8:	f040 8099 	bne.w	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80166fc:	a904      	add	r1, sp, #16
 80166fe:	462a      	mov	r2, r5
 8016700:	4608      	mov	r0, r1
 8016702:	f7f8 fd3e 	bl	800f182 <mbedtls_mpi_mod_mpi>
 8016706:	4603      	mov	r3, r0
 8016708:	2800      	cmp	r0, #0
 801670a:	f040 8090 	bne.w	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 801670e:	2201      	movs	r2, #1
 8016710:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8016714:	a80d      	add	r0, sp, #52	; 0x34
 8016716:	f7f8 faf1 	bl	800ecfc <mbedtls_mpi_sub_int>
 801671a:	4603      	mov	r3, r0
 801671c:	2800      	cmp	r0, #0
 801671e:	f040 8086 	bne.w	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8016722:	2201      	movs	r2, #1
 8016724:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8016728:	a810      	add	r0, sp, #64	; 0x40
 801672a:	f7f8 fae7 	bl	800ecfc <mbedtls_mpi_sub_int>
 801672e:	4603      	mov	r3, r0
 8016730:	2800      	cmp	r0, #0
 8016732:	d17c      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8016734:	4653      	mov	r3, sl
 8016736:	4632      	mov	r2, r6
 8016738:	211c      	movs	r1, #28
 801673a:	a813      	add	r0, sp, #76	; 0x4c
 801673c:	f7f9 f80e 	bl	800f75c <mbedtls_mpi_fill_random>
 8016740:	4603      	mov	r3, r0
 8016742:	2800      	cmp	r0, #0
 8016744:	d173      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8016746:	aa13      	add	r2, sp, #76	; 0x4c
 8016748:	a90d      	add	r1, sp, #52	; 0x34
 801674a:	a816      	add	r0, sp, #88	; 0x58
 801674c:	f7f8 faec 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8016750:	4603      	mov	r3, r0
 8016752:	2800      	cmp	r0, #0
 8016754:	d16b      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8016756:	a916      	add	r1, sp, #88	; 0x58
 8016758:	464a      	mov	r2, r9
 801675a:	4608      	mov	r0, r1
 801675c:	f7f8 fa89 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8016760:	4603      	mov	r3, r0
 8016762:	2800      	cmp	r0, #0
 8016764:	d163      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8016766:	4653      	mov	r3, sl
 8016768:	4632      	mov	r2, r6
 801676a:	211c      	movs	r1, #28
 801676c:	a813      	add	r0, sp, #76	; 0x4c
 801676e:	f7f8 fff5 	bl	800f75c <mbedtls_mpi_fill_random>
 8016772:	4603      	mov	r3, r0
 8016774:	2800      	cmp	r0, #0
 8016776:	d15a      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8016778:	aa13      	add	r2, sp, #76	; 0x4c
 801677a:	a910      	add	r1, sp, #64	; 0x40
 801677c:	a819      	add	r0, sp, #100	; 0x64
 801677e:	f7f8 fad3 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 8016782:	4603      	mov	r3, r0
 8016784:	2800      	cmp	r0, #0
 8016786:	d152      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8016788:	a919      	add	r1, sp, #100	; 0x64
 801678a:	4642      	mov	r2, r8
 801678c:	4608      	mov	r0, r1
 801678e:	f7f8 fa70 	bl	800ec72 <mbedtls_mpi_add_mpi>
 8016792:	4603      	mov	r3, r0
 8016794:	2800      	cmp	r0, #0
 8016796:	d14a      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        DQ = &DQ_blind;
 8016798:	f10d 0864 	add.w	r8, sp, #100	; 0x64
        DP = &DP_blind;
 801679c:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T1, &T, DP, &ctx->P, &ctx->RP ) );
 80167a0:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80167a4:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
 80167a8:	9300      	str	r3, [sp, #0]
 80167aa:	464a      	mov	r2, r9
 80167ac:	4653      	mov	r3, sl
 80167ae:	a904      	add	r1, sp, #16
 80167b0:	a807      	add	r0, sp, #28
 80167b2:	f7f8 fd18 	bl	800f1e6 <mbedtls_mpi_exp_mod>
 80167b6:	4603      	mov	r3, r0
 80167b8:	2800      	cmp	r0, #0
 80167ba:	d138      	bne.n	801682e <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T2, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80167bc:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80167c0:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80167c4:	9300      	str	r3, [sp, #0]
 80167c6:	4642      	mov	r2, r8
 80167c8:	463b      	mov	r3, r7
 80167ca:	a904      	add	r1, sp, #16
 80167cc:	a80a      	add	r0, sp, #40	; 0x28
 80167ce:	f7f8 fd0a 	bl	800f1e6 <mbedtls_mpi_exp_mod>
 80167d2:	4603      	mov	r3, r0
 80167d4:	bb58      	cbnz	r0, 801682e <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &T1, &T2 ) );
 80167d6:	aa0a      	add	r2, sp, #40	; 0x28
 80167d8:	a907      	add	r1, sp, #28
 80167da:	a804      	add	r0, sp, #16
 80167dc:	f7f8 fa6b 	bl	800ecb6 <mbedtls_mpi_sub_mpi>
 80167e0:	4603      	mov	r3, r0
 80167e2:	bb20      	cbnz	r0, 801682e <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->QP ) );
 80167e4:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80167e8:	a904      	add	r1, sp, #16
 80167ea:	a807      	add	r0, sp, #28
 80167ec:	f7f8 fa9c 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80167f0:	4603      	mov	r3, r0
 80167f2:	b9e0      	cbnz	r0, 801682e <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T1, &ctx->P ) );
 80167f4:	4652      	mov	r2, sl
 80167f6:	a907      	add	r1, sp, #28
 80167f8:	a804      	add	r0, sp, #16
 80167fa:	f7f8 fcc2 	bl	800f182 <mbedtls_mpi_mod_mpi>
 80167fe:	4603      	mov	r3, r0
 8016800:	b9a8      	cbnz	r0, 801682e <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->Q ) );
 8016802:	463a      	mov	r2, r7
 8016804:	a904      	add	r1, sp, #16
 8016806:	a807      	add	r0, sp, #28
 8016808:	f7f8 fa8e 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 801680c:	4603      	mov	r3, r0
 801680e:	b970      	cbnz	r0, 801682e <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &T2, &T1 ) );
 8016810:	aa07      	add	r2, sp, #28
 8016812:	a90a      	add	r1, sp, #40	; 0x28
 8016814:	a804      	add	r0, sp, #16
 8016816:	f7f8 fa2c 	bl	800ec72 <mbedtls_mpi_add_mpi>
 801681a:	4603      	mov	r3, r0
 801681c:	b938      	cbnz	r0, 801682e <mbedtls_rsa_private+0x22a>
    if( f_rng != NULL )
 801681e:	2e00      	cmp	r6, #0
 8016820:	d15d      	bne.n	80168de <mbedtls_rsa_private+0x2da>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8016822:	6862      	ldr	r2, [r4, #4]
 8016824:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016826:	a804      	add	r0, sp, #16
 8016828:	f7f7 fff1 	bl	800e80e <mbedtls_mpi_write_binary>
 801682c:	4603      	mov	r3, r0
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 801682e:	a804      	add	r0, sp, #16
 8016830:	9303      	str	r3, [sp, #12]
 8016832:	f7f7 fe65 	bl	800e500 <mbedtls_mpi_free>
 8016836:	a807      	add	r0, sp, #28
 8016838:	f7f7 fe62 	bl	800e500 <mbedtls_mpi_free>
 801683c:	a80a      	add	r0, sp, #40	; 0x28
 801683e:	f7f7 fe5f 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 ); mbedtls_mpi_free( &R );
 8016842:	a80d      	add	r0, sp, #52	; 0x34
 8016844:	f7f7 fe5c 	bl	800e500 <mbedtls_mpi_free>
 8016848:	a810      	add	r0, sp, #64	; 0x40
 801684a:	f7f7 fe59 	bl	800e500 <mbedtls_mpi_free>
 801684e:	a813      	add	r0, sp, #76	; 0x4c
 8016850:	f7f7 fe56 	bl	800e500 <mbedtls_mpi_free>
    if( f_rng != NULL )
 8016854:	9b03      	ldr	r3, [sp, #12]
 8016856:	b136      	cbz	r6, 8016866 <mbedtls_rsa_private+0x262>
        mbedtls_mpi_free( &DP_blind );
 8016858:	a816      	add	r0, sp, #88	; 0x58
 801685a:	f7f7 fe51 	bl	800e500 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 801685e:	a819      	add	r0, sp, #100	; 0x64
 8016860:	f7f7 fe4e 	bl	800e500 <mbedtls_mpi_free>
 8016864:	9b03      	ldr	r3, [sp, #12]
    if( ret != 0 )
 8016866:	b10b      	cbz	r3, 801686c <mbedtls_rsa_private+0x268>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8016868:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 801686c:	4618      	mov	r0, r3
 801686e:	b01d      	add	sp, #116	; 0x74
 8016870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx->Vf.p != NULL )
 8016874:	230c      	movs	r3, #12
 8016876:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016878:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 801687c:	f104 078c 	add.w	r7, r4, #140	; 0x8c
        if( count++ > 10 )
 8016880:	9b03      	ldr	r3, [sp, #12]
 8016882:	3b01      	subs	r3, #1
 8016884:	9303      	str	r3, [sp, #12]
 8016886:	d03f      	beq.n	8016908 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016888:	6861      	ldr	r1, [r4, #4]
 801688a:	4653      	mov	r3, sl
 801688c:	4632      	mov	r2, r6
 801688e:	3901      	subs	r1, #1
 8016890:	4658      	mov	r0, fp
 8016892:	f7f8 ff63 	bl	800f75c <mbedtls_mpi_fill_random>
 8016896:	4603      	mov	r3, r0
 8016898:	2800      	cmp	r0, #0
 801689a:	d1c8      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 801689c:	462a      	mov	r2, r5
 801689e:	4659      	mov	r1, fp
 80168a0:	4638      	mov	r0, r7
 80168a2:	f7f8 fed7 	bl	800f654 <mbedtls_mpi_gcd>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2800      	cmp	r0, #0
 80168aa:	d1c0      	bne.n	801682e <mbedtls_rsa_private+0x22a>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 80168ac:	2101      	movs	r1, #1
 80168ae:	4638      	mov	r0, r7
 80168b0:	f7f8 f928 	bl	800eb04 <mbedtls_mpi_cmp_int>
 80168b4:	2800      	cmp	r0, #0
 80168b6:	d1e3      	bne.n	8016880 <mbedtls_rsa_private+0x27c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80168b8:	462a      	mov	r2, r5
 80168ba:	4659      	mov	r1, fp
 80168bc:	4638      	mov	r0, r7
 80168be:	f7f8 ff66 	bl	800f78e <mbedtls_mpi_inv_mod>
 80168c2:	4603      	mov	r3, r0
 80168c4:	2800      	cmp	r0, #0
 80168c6:	d1b2      	bne.n	801682e <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80168c8:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	f104 0214 	add.w	r2, r4, #20
 80168d2:	462b      	mov	r3, r5
 80168d4:	4639      	mov	r1, r7
 80168d6:	4638      	mov	r0, r7
 80168d8:	f7f8 fc85 	bl	800f1e6 <mbedtls_mpi_exp_mod>
 80168dc:	e700      	b.n	80166e0 <mbedtls_rsa_private+0xdc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80168de:	a904      	add	r1, sp, #16
 80168e0:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80168e4:	4608      	mov	r0, r1
 80168e6:	f7f8 fa1f 	bl	800ed28 <mbedtls_mpi_mul_mpi>
 80168ea:	4603      	mov	r3, r0
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d19e      	bne.n	801682e <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80168f0:	a904      	add	r1, sp, #16
 80168f2:	462a      	mov	r2, r5
 80168f4:	4608      	mov	r0, r1
 80168f6:	f7f8 fc44 	bl	800f182 <mbedtls_mpi_mod_mpi>
 80168fa:	4603      	mov	r3, r0
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d090      	beq.n	8016822 <mbedtls_rsa_private+0x21e>
 8016900:	e795      	b.n	801682e <mbedtls_rsa_private+0x22a>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8016902:	f06f 0303 	mvn.w	r3, #3
 8016906:	e792      	b.n	801682e <mbedtls_rsa_private+0x22a>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8016908:	4b01      	ldr	r3, [pc, #4]	; (8016910 <mbedtls_rsa_private+0x30c>)
 801690a:	e790      	b.n	801682e <mbedtls_rsa_private+0x22a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801690c:	4b01      	ldr	r3, [pc, #4]	; (8016914 <mbedtls_rsa_private+0x310>)
 801690e:	e7ad      	b.n	801686c <mbedtls_rsa_private+0x268>
 8016910:	ffffbb80 	.word	0xffffbb80
 8016914:	ffffbf80 	.word	0xffffbf80

08016918 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8016918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801691c:	b08b      	sub	sp, #44	; 0x2c
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801691e:	2b01      	cmp	r3, #1
{
 8016920:	4681      	mov	r9, r0
 8016922:	468b      	mov	fp, r1
 8016924:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801692c:	d108      	bne.n	8016940 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
 801692e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016932:	2b01      	cmp	r3, #1
 8016934:	d004      	beq.n	8016940 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016936:	4c3f      	ldr	r4, [pc, #252]	; (8016a34 <mbedtls_rsa_rsaes_oaep_encrypt+0x11c>)
    mbedtls_md_free( &md_ctx );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 8016938:	4620      	mov	r0, r4
 801693a:	b00b      	add	sp, #44	; 0x2c
 801693c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 8016940:	f1bb 0f00 	cmp.w	fp, #0
 8016944:	d0f7      	beq.n	8016936 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016946:	f899 00a8 	ldrb.w	r0, [r9, #168]	; 0xa8
 801694a:	f7fd fd97 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801694e:	9003      	str	r0, [sp, #12]
 8016950:	2800      	cmp	r0, #0
 8016952:	d0f0      	beq.n	8016936 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
 8016954:	f8d9 5004 	ldr.w	r5, [r9, #4]
    hlen = mbedtls_md_get_size( md_info );
 8016958:	f7fd fee0 	bl	801471c <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 801695c:	b203      	sxth	r3, r0
 801695e:	005b      	lsls	r3, r3, #1
 8016960:	9302      	str	r3, [sp, #8]
 8016962:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016964:	9a02      	ldr	r2, [sp, #8]
 8016966:	3302      	adds	r3, #2
 8016968:	4413      	add	r3, r2
 801696a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801696c:	4293      	cmp	r3, r2
    hlen = mbedtls_md_get_size( md_info );
 801696e:	4606      	mov	r6, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8016970:	d3e1      	bcc.n	8016936 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8016972:	42ab      	cmp	r3, r5
 8016974:	d8df      	bhi.n	8016936 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
 8016976:	462a      	mov	r2, r5
 8016978:	2100      	movs	r1, #0
 801697a:	4640      	mov	r0, r8
 801697c:	f00b fcd7 	bl	802232e <memset>
    *p++ = 0;
 8016980:	f108 0a01 	add.w	sl, r8, #1
 8016984:	2300      	movs	r3, #0
 8016986:	f888 3000 	strb.w	r3, [r8]
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 801698a:	4632      	mov	r2, r6
 801698c:	4651      	mov	r1, sl
 801698e:	9804      	ldr	r0, [sp, #16]
 8016990:	47d8      	blx	fp
 8016992:	4604      	mov	r4, r0
 8016994:	b110      	cbz	r0, 801699c <mbedtls_rsa_rsaes_oaep_encrypt+0x84>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016996:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
 801699a:	e7cd      	b.n	8016938 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += hlen;
 801699c:	eb0a 0706 	add.w	r7, sl, r6
    mbedtls_md( md_info, label, label_len, p );
 80169a0:	463b      	mov	r3, r7
 80169a2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80169a6:	9803      	ldr	r0, [sp, #12]
 80169a8:	f7fd fdea 	bl	8014580 <mbedtls_md>
    p += olen - 2 * hlen - 2 - ilen;
 80169ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80169ae:	9a02      	ldr	r2, [sp, #8]
 80169b0:	1aeb      	subs	r3, r5, r3
 80169b2:	3b02      	subs	r3, #2
 80169b4:	4433      	add	r3, r6
 80169b6:	1a9b      	subs	r3, r3, r2
 80169b8:	18f8      	adds	r0, r7, r3
    *p++ = 1;
 80169ba:	2201      	movs	r2, #1
 80169bc:	54fa      	strb	r2, [r7, r3]
    memcpy( p, input, ilen );
 80169be:	3001      	adds	r0, #1
 80169c0:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
    mbedtls_md_init( &md_ctx );
 80169c4:	af07      	add	r7, sp, #28
    memcpy( p, input, ilen );
 80169c6:	f00b fc8e 	bl	80222e6 <memcpy>
    mbedtls_md_init( &md_ctx );
 80169ca:	4638      	mov	r0, r7
 80169cc:	f7fd fd62 	bl	8014494 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80169d0:	4622      	mov	r2, r4
 80169d2:	9903      	ldr	r1, [sp, #12]
 80169d4:	4638      	mov	r0, r7
 80169d6:	f7fd fd87 	bl	80144e8 <mbedtls_md_setup>
 80169da:	4604      	mov	r4, r0
 80169dc:	b118      	cbz	r0, 80169e6 <mbedtls_rsa_rsaes_oaep_encrypt+0xce>
        mbedtls_md_free( &md_ctx );
 80169de:	4638      	mov	r0, r7
 80169e0:	f7fd fd5e 	bl	80144a0 <mbedtls_md_free>
        return( ret );
 80169e4:	e7a8      	b.n	8016938 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 80169e6:	1c74      	adds	r4, r6, #1
 80169e8:	3d01      	subs	r5, #1
 80169ea:	4444      	add	r4, r8
 80169ec:	1bad      	subs	r5, r5, r6
 80169ee:	4633      	mov	r3, r6
 80169f0:	4652      	mov	r2, sl
 80169f2:	4629      	mov	r1, r5
 80169f4:	4620      	mov	r0, r4
 80169f6:	9700      	str	r7, [sp, #0]
 80169f8:	f7ff fc28 	bl	801624c <mgf_mask>
    mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 80169fc:	462b      	mov	r3, r5
 80169fe:	4622      	mov	r2, r4
 8016a00:	4631      	mov	r1, r6
 8016a02:	4650      	mov	r0, sl
 8016a04:	9700      	str	r7, [sp, #0]
 8016a06:	f7ff fc21 	bl	801624c <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8016a0a:	4638      	mov	r0, r7
 8016a0c:	f7fd fd48 	bl	80144a0 <mbedtls_md_free>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016a10:	9b05      	ldr	r3, [sp, #20]
 8016a12:	b933      	cbnz	r3, 8016a22 <mbedtls_rsa_rsaes_oaep_encrypt+0x10a>
 8016a14:	4642      	mov	r2, r8
 8016a16:	4641      	mov	r1, r8
 8016a18:	4648      	mov	r0, r9
 8016a1a:	f7ff fdbd 	bl	8016598 <mbedtls_rsa_public>
 8016a1e:	4604      	mov	r4, r0
 8016a20:	e78a      	b.n	8016938 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
 8016a22:	f8cd 8000 	str.w	r8, [sp]
 8016a26:	4643      	mov	r3, r8
 8016a28:	9a04      	ldr	r2, [sp, #16]
 8016a2a:	4659      	mov	r1, fp
 8016a2c:	4648      	mov	r0, r9
 8016a2e:	f7ff fde9 	bl	8016604 <mbedtls_rsa_private>
 8016a32:	e7f4      	b.n	8016a1e <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 8016a34:	ffffbf80 	.word	0xffffbf80

08016a38 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8016a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a3c:	4699      	mov	r9, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016a3e:	f1b9 0f01 	cmp.w	r9, #1
{
 8016a42:	4606      	mov	r6, r0
 8016a44:	4688      	mov	r8, r1
 8016a46:	4693      	mov	fp, r2
 8016a48:	e9dd 730c 	ldrd	r7, r3, [sp, #48]	; 0x30
 8016a4c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016a4e:	d103      	bne.n	8016a58 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
 8016a50:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8016a54:	2a00      	cmp	r2, #0
 8016a56:	d158      	bne.n	8016b0a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8016a58:	f1b8 0f00 	cmp.w	r8, #0
 8016a5c:	d055      	beq.n	8016b0a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d053      	beq.n	8016b0a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 8016a62:	2d00      	cmp	r5, #0
 8016a64:	d051      	beq.n	8016b0a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016a66:	f117 0f0c 	cmn.w	r7, #12
    olen = ctx->len;
 8016a6a:	6872      	ldr	r2, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016a6c:	d84d      	bhi.n	8016b0a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 8016a6e:	f107 010b 	add.w	r1, r7, #11
 8016a72:	4291      	cmp	r1, r2
 8016a74:	d849      	bhi.n	8016b0a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 8016a76:	462c      	mov	r4, r5
 8016a78:	2100      	movs	r1, #0
    nb_pad = olen - 3 - ilen;
 8016a7a:	1bd2      	subs	r2, r2, r7
    *p++ = 0;
 8016a7c:	f804 1b02 	strb.w	r1, [r4], #2
    nb_pad = olen - 3 - ilen;
 8016a80:	3a03      	subs	r2, #3
 8016a82:	18a2      	adds	r2, r4, r2
 8016a84:	9200      	str	r2, [sp, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 8016a86:	f1b9 0f00 	cmp.w	r9, #0
 8016a8a:	d12b      	bne.n	8016ae4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 8016a8c:	2202      	movs	r2, #2
 8016a8e:	706a      	strb	r2, [r5, #1]

        while( nb_pad-- > 0 )
 8016a90:	9a00      	ldr	r2, [sp, #0]
 8016a92:	42a2      	cmp	r2, r4
 8016a94:	d112      	bne.n	8016abc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x84>

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
    }

    *p++ = 0;
 8016a96:	4620      	mov	r0, r4
 8016a98:	2200      	movs	r2, #0
 8016a9a:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	463a      	mov	r2, r7
 8016aa2:	f00b fc20 	bl	80222e6 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016aa6:	f1b9 0f00 	cmp.w	r9, #0
 8016aaa:	d124      	bne.n	8016af6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbe>
 8016aac:	462a      	mov	r2, r5
 8016aae:	4629      	mov	r1, r5
 8016ab0:	4630      	mov	r0, r6
}
 8016ab2:	b003      	add	sp, #12
 8016ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016ab8:	f7ff bd6e 	b.w	8016598 <mbedtls_rsa_public>
 8016abc:	f04f 0a64 	mov.w	sl, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 8016ac0:	2201      	movs	r2, #1
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	4658      	mov	r0, fp
 8016ac6:	9301      	str	r3, [sp, #4]
 8016ac8:	47c0      	blx	r8
            } while( *p == 0 && --rng_dl && ret == 0 );
 8016aca:	7822      	ldrb	r2, [r4, #0]
 8016acc:	9b01      	ldr	r3, [sp, #4]
 8016ace:	b9f2      	cbnz	r2, 8016b0e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd6>
 8016ad0:	f1ba 0a01 	subs.w	sl, sl, #1
 8016ad4:	d001      	beq.n	8016ada <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	d0f2      	beq.n	8016ac0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x88>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016ada:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
}
 8016ade:	b003      	add	sp, #12
 8016ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *p++ = MBEDTLS_RSA_SIGN;
 8016ae4:	2201      	movs	r2, #1
 8016ae6:	706a      	strb	r2, [r5, #1]
            *p++ = 0xFF;
 8016ae8:	22ff      	movs	r2, #255	; 0xff
        while( nb_pad-- > 0 )
 8016aea:	9900      	ldr	r1, [sp, #0]
 8016aec:	428c      	cmp	r4, r1
 8016aee:	d0d2      	beq.n	8016a96 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
            *p++ = 0xFF;
 8016af0:	f804 2b01 	strb.w	r2, [r4], #1
 8016af4:	e7f9      	b.n	8016aea <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb2>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016af6:	462b      	mov	r3, r5
 8016af8:	465a      	mov	r2, fp
 8016afa:	4641      	mov	r1, r8
 8016afc:	4630      	mov	r0, r6
 8016afe:	950c      	str	r5, [sp, #48]	; 0x30
}
 8016b00:	b003      	add	sp, #12
 8016b02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016b06:	f7ff bd7d 	b.w	8016604 <mbedtls_rsa_private>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016b0a:	4803      	ldr	r0, [pc, #12]	; (8016b18 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8016b0c:	e7e7      	b.n	8016ade <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa6>
            if( rng_dl == 0 || ret != 0 )
 8016b0e:	2800      	cmp	r0, #0
 8016b10:	d1e3      	bne.n	8016ada <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
            p++;
 8016b12:	3401      	adds	r4, #1
 8016b14:	e7bc      	b.n	8016a90 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
 8016b16:	bf00      	nop
 8016b18:	ffffbf80 	.word	0xffffbf80

08016b1c <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8016b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8016b1e:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8016b22:	b087      	sub	sp, #28
 8016b24:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016b28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    switch( ctx->padding )
 8016b2a:	b11c      	cbz	r4, 8016b34 <mbedtls_rsa_pkcs1_encrypt+0x18>
 8016b2c:	2c01      	cmp	r4, #1
 8016b2e:	d006      	beq.n	8016b3e <mbedtls_rsa_pkcs1_encrypt+0x22>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8016b30:	4808      	ldr	r0, [pc, #32]	; (8016b54 <mbedtls_rsa_pkcs1_encrypt+0x38>)
 8016b32:	e00c      	b.n	8016b4e <mbedtls_rsa_pkcs1_encrypt+0x32>
    }
}
 8016b34:	b007      	add	sp, #28
 8016b36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8016b3a:	f7ff bf7d 	b.w	8016a38 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8016b3e:	2400      	movs	r4, #0
 8016b40:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8016b44:	9502      	str	r5, [sp, #8]
 8016b46:	e9cd 4400 	strd	r4, r4, [sp]
 8016b4a:	f7ff fee5 	bl	8016918 <mbedtls_rsa_rsaes_oaep_encrypt>
}
 8016b4e:	b007      	add	sp, #28
 8016b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b52:	bf00      	nop
 8016b54:	ffffbf00 	.word	0xffffbf00

08016b58 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8016b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016b5c:	2b01      	cmp	r3, #1
{
 8016b5e:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 8016b62:	4604      	mov	r4, r0
 8016b64:	468a      	mov	sl, r1
 8016b66:	4693      	mov	fp, r2
 8016b68:	461f      	mov	r7, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016b6a:	d109      	bne.n	8016b80 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
 8016b6c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016b70:	2b01      	cmp	r3, #1
 8016b72:	d005      	beq.n	8016b80 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016b74:	4c57      	ldr	r4, [pc, #348]	; (8016cd4 <mbedtls_rsa_rsaes_oaep_decrypt+0x17c>)
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8016b76:	4620      	mov	r0, r4
 8016b78:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8016b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
 8016b80:	6865      	ldr	r5, [r4, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 8016b82:	f1a5 0310 	sub.w	r3, r5, #16
 8016b86:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8016b8a:	d8f3      	bhi.n	8016b74 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016b8c:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 8016b90:	f7fd fc74 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8016b94:	4680      	mov	r8, r0
 8016b96:	2800      	cmp	r0, #0
 8016b98:	d0ec      	beq.n	8016b74 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    hlen = mbedtls_md_get_size( md_info );
 8016b9a:	f7fd fdbf 	bl	801471c <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
 8016b9e:	f100 0901 	add.w	r9, r0, #1
 8016ba2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8016ba6:	42ab      	cmp	r3, r5
    hlen = mbedtls_md_get_size( md_info );
 8016ba8:	4606      	mov	r6, r0
    if( 2 * hlen + 2 > ilen )
 8016baa:	9303      	str	r3, [sp, #12]
 8016bac:	d8e2      	bhi.n	8016b74 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 8016bae:	aa18      	add	r2, sp, #96	; 0x60
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016bb0:	b9f7      	cbnz	r7, 8016bf0 <mbedtls_rsa_rsaes_oaep_decrypt+0x98>
 8016bb2:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	f7ff fcee 	bl	8016598 <mbedtls_rsa_public>
 8016bbc:	4604      	mov	r4, r0
    if( ret != 0 )
 8016bbe:	b968      	cbnz	r0, 8016bdc <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
    mbedtls_md_init( &md_ctx );
 8016bc0:	af05      	add	r7, sp, #20
 8016bc2:	4638      	mov	r0, r7
 8016bc4:	f7fd fc66 	bl	8014494 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8016bc8:	4622      	mov	r2, r4
 8016bca:	4641      	mov	r1, r8
 8016bcc:	4638      	mov	r0, r7
 8016bce:	f7fd fc8b 	bl	80144e8 <mbedtls_md_setup>
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	b1a8      	cbz	r0, 8016c02 <mbedtls_rsa_rsaes_oaep_decrypt+0xaa>
        mbedtls_md_free( &md_ctx );
 8016bd6:	4638      	mov	r0, r7
 8016bd8:	f7fd fc62 	bl	80144a0 <mbedtls_md_free>
    mbedtls_zeroize( buf, sizeof( buf ) );
 8016bdc:	a818      	add	r0, sp, #96	; 0x60
 8016bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016be2:	f7ff fb2b 	bl	801623c <mbedtls_zeroize>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 8016be6:	2140      	movs	r1, #64	; 0x40
 8016be8:	a808      	add	r0, sp, #32
 8016bea:	f7ff fb27 	bl	801623c <mbedtls_zeroize>
    return( ret );
 8016bee:	e7c2      	b.n	8016b76 <mbedtls_rsa_rsaes_oaep_decrypt+0x1e>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016bf0:	9200      	str	r2, [sp, #0]
 8016bf2:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 8016bf6:	465a      	mov	r2, fp
 8016bf8:	4651      	mov	r1, sl
 8016bfa:	4620      	mov	r0, r4
 8016bfc:	f7ff fd02 	bl	8016604 <mbedtls_rsa_private>
 8016c00:	e7dc      	b.n	8016bbc <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
    mbedtls_md( md_info, label, label_len, lhash );
 8016c02:	4640      	mov	r0, r8
 8016c04:	f10d 0a20 	add.w	sl, sp, #32
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8016c08:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8016c0c:	f105 3bff 	add.w	fp, r5, #4294967295
    mbedtls_md( md_info, label, label_len, lhash );
 8016c10:	4653      	mov	r3, sl
 8016c12:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 8016c16:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8016c1a:	44c1      	add	r9, r8
 8016c1c:	ebab 0b06 	sub.w	fp, fp, r6
    mbedtls_md( md_info, label, label_len, lhash );
 8016c20:	f7fd fcae 	bl	8014580 <mbedtls_md>
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8016c24:	465b      	mov	r3, fp
 8016c26:	464a      	mov	r2, r9
 8016c28:	4631      	mov	r1, r6
 8016c2a:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 8016c2e:	9700      	str	r7, [sp, #0]
 8016c30:	f7ff fb0c 	bl	801624c <mgf_mask>
    mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
 8016c34:	4633      	mov	r3, r6
 8016c36:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8016c3a:	4659      	mov	r1, fp
 8016c3c:	4648      	mov	r0, r9
 8016c3e:	9700      	str	r7, [sp, #0]
 8016c40:	f7ff fb04 	bl	801624c <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8016c44:	4638      	mov	r0, r7
 8016c46:	f7fd fc2b 	bl	80144a0 <mbedtls_md_free>
    p += hlen; /* Skip seed */
 8016c4a:	f10d 0261 	add.w	r2, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
 8016c4e:	f898 3000 	ldrb.w	r3, [r8]
    p += hlen; /* Skip seed */
 8016c52:	1991      	adds	r1, r2, r6
    for( i = 0; i < hlen; i++ )
 8016c54:	4622      	mov	r2, r4
 8016c56:	42b2      	cmp	r2, r6
 8016c58:	b258      	sxtb	r0, r3
 8016c5a:	d321      	bcc.n	8016ca0 <mbedtls_rsa_rsaes_oaep_decrypt+0x148>
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8016c5c:	9b03      	ldr	r3, [sp, #12]
 8016c5e:	440e      	add	r6, r1
 8016c60:	1aeb      	subs	r3, r5, r3
    pad_done = 0;
 8016c62:	f04f 0c00 	mov.w	ip, #0
 8016c66:	4637      	mov	r7, r6
 8016c68:	4433      	add	r3, r6
    pad_len = 0;
 8016c6a:	4661      	mov	r1, ip
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8016c6c:	42bb      	cmp	r3, r7
 8016c6e:	d11f      	bne.n	8016cb0 <mbedtls_rsa_rsaes_oaep_decrypt+0x158>
    bad |= *p++ ^ 0x01;
 8016c70:	5c73      	ldrb	r3, [r6, r1]
 8016c72:	f083 0301 	eor.w	r3, r3, #1
 8016c76:	4303      	orrs	r3, r0
    if( bad != 0 )
 8016c78:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016c7c:	d126      	bne.n	8016ccc <mbedtls_rsa_rsaes_oaep_decrypt+0x174>
    bad |= *p++ ^ 0x01;
 8016c7e:	3101      	adds	r1, #1
 8016c80:	4431      	add	r1, r6
    if( ilen - ( p - buf ) > output_max_len )
 8016c82:	eba1 0208 	sub.w	r2, r1, r8
 8016c86:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 8016c8a:	1aaa      	subs	r2, r5, r2
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d81f      	bhi.n	8016cd0 <mbedtls_rsa_rsaes_oaep_decrypt+0x178>
    *olen = ilen - (p - buf);
 8016c90:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    memcpy( output, p, *olen );
 8016c94:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
    *olen = ilen - (p - buf);
 8016c98:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8016c9a:	f00b fb24 	bl	80222e6 <memcpy>
 8016c9e:	e79d      	b.n	8016bdc <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
        bad |= lhash[i] ^ *p++;
 8016ca0:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8016ca4:	5c8f      	ldrb	r7, [r1, r2]
 8016ca6:	407b      	eors	r3, r7
 8016ca8:	4303      	orrs	r3, r0
 8016caa:	b2db      	uxtb	r3, r3
    for( i = 0; i < hlen; i++ )
 8016cac:	3201      	adds	r2, #1
 8016cae:	e7d2      	b.n	8016c56 <mbedtls_rsa_rsaes_oaep_decrypt+0xfe>
        pad_done |= p[i];
 8016cb0:	f817 2b01 	ldrb.w	r2, [r7], #1
 8016cb4:	ea42 0c0c 	orr.w	ip, r2, ip
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8016cb8:	f1cc 0200 	rsb	r2, ip, #0
 8016cbc:	ea4c 0202 	orr.w	r2, ip, r2
 8016cc0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8016cc4:	f082 0201 	eor.w	r2, r2, #1
 8016cc8:	4411      	add	r1, r2
 8016cca:	e7cf      	b.n	8016c6c <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8016ccc:	4c02      	ldr	r4, [pc, #8]	; (8016cd8 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>)
 8016cce:	e785      	b.n	8016bdc <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8016cd0:	4c02      	ldr	r4, [pc, #8]	; (8016cdc <mbedtls_rsa_rsaes_oaep_decrypt+0x184>)
 8016cd2:	e783      	b.n	8016bdc <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
 8016cd4:	ffffbf80 	.word	0xffffbf80
 8016cd8:	ffffbf00 	.word	0xffffbf00
 8016cdc:	ffffbc00 	.word	0xffffbc00

08016ce0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8016ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016ce2:	2b01      	cmp	r3, #1
{
 8016ce4:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8016ce8:	461f      	mov	r7, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016cea:	d103      	bne.n	8016cf4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 8016cec:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d17b      	bne.n	8016dec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8016cf4:	6846      	ldr	r6, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 8016cf6:	f1a6 0310 	sub.w	r3, r6, #16
 8016cfa:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8016cfe:	d875      	bhi.n	8016dec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>
 8016d00:	ad02      	add	r5, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016d02:	b9cf      	cbnz	r7, 8016d38 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x58>
 8016d04:	462a      	mov	r2, r5
 8016d06:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 8016d0a:	f7ff fc45 	bl	8016598 <mbedtls_rsa_public>

    if( ret != 0 )
 8016d0e:	4604      	mov	r4, r0
 8016d10:	2800      	cmp	r0, #0
 8016d12:	d13e      	bne.n	8016d92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb2>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8016d14:	7828      	ldrb	r0, [r5, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8016d16:	786c      	ldrb	r4, [r5, #1]
    unsigned char *p, bad, pad_done = 0;
 8016d18:	2300      	movs	r3, #0
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8016d1a:	f084 0401 	eor.w	r4, r4, #1
 8016d1e:	4304      	orrs	r4, r0

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8016d20:	4619      	mov	r1, r3
    size_t ilen, pad_count = 0, i;
 8016d22:	461a      	mov	r2, r3
        for( i = 0; i < ilen - 3; i++ )
 8016d24:	1ef0      	subs	r0, r6, #3
 8016d26:	4288      	cmp	r0, r1
 8016d28:	d850      	bhi.n	8016dcc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xec>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8016d2a:	f10d 030a 	add.w	r3, sp, #10
 8016d2e:	1c51      	adds	r1, r2, #1
 8016d30:	4419      	add	r1, r3
 8016d32:	5c9b      	ldrb	r3, [r3, r2]
 8016d34:	431c      	orrs	r4, r3
 8016d36:	e019      	b.n	8016d6c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016d38:	9500      	str	r5, [sp, #0]
 8016d3a:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 8016d3e:	f7ff fc61 	bl	8016604 <mbedtls_rsa_private>
    if( ret != 0 )
 8016d42:	4604      	mov	r4, r0
 8016d44:	bb28      	cbnz	r0, 8016d92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb2>
    if( mode == MBEDTLS_RSA_PRIVATE )
 8016d46:	2f01      	cmp	r7, #1
    bad |= *p++; /* First byte must be 0 */
 8016d48:	7828      	ldrb	r0, [r5, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
 8016d4a:	d1e4      	bne.n	8016d16 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8016d4c:	786b      	ldrb	r3, [r5, #1]
 8016d4e:	f083 0302 	eor.w	r3, r3, #2
 8016d52:	4318      	orrs	r0, r3
        for( i = 0; i < ilen - 3; i++ )
 8016d54:	4621      	mov	r1, r4
    size_t ilen, pad_count = 0, i;
 8016d56:	4622      	mov	r2, r4
        for( i = 0; i < ilen - 3; i++ )
 8016d58:	1ef7      	subs	r7, r6, #3
 8016d5a:	428f      	cmp	r7, r1
 8016d5c:	d822      	bhi.n	8016da4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        bad |= *p++; /* Must be zero */
 8016d5e:	f10d 030a 	add.w	r3, sp, #10
 8016d62:	1c51      	adds	r1, r2, #1
 8016d64:	4419      	add	r1, r3
 8016d66:	5c9b      	ldrb	r3, [r3, r2]
 8016d68:	ea40 0403 	orr.w	r4, r0, r3
    }

    bad |= ( pad_count < 8 );
 8016d6c:	2a07      	cmp	r2, #7
 8016d6e:	bf98      	it	ls
 8016d70:	f044 0401 	orrls.w	r4, r4, #1

    if( bad )
 8016d74:	b264      	sxtb	r4, r4
 8016d76:	bbac      	cbnz	r4, 8016de4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8016d78:	1b4a      	subs	r2, r1, r5
 8016d7a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 8016d7e:	1ab2      	subs	r2, r6, r2
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d831      	bhi.n	8016de8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x108>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8016d84:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 8016d88:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    *olen = ilen - (p - buf);
 8016d8c:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8016d8e:	f00b faaa 	bl	80222e6 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8016d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016d96:	4628      	mov	r0, r5
 8016d98:	f7ff fa50 	bl	801623c <mbedtls_zeroize>

    return( ret );
}
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8016da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8016da4:	186b      	adds	r3, r5, r1
        for( i = 0; i < ilen - 3; i++ )
 8016da6:	3101      	adds	r1, #1
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8016da8:	789b      	ldrb	r3, [r3, #2]
 8016daa:	f1c3 0c00 	rsb	ip, r3, #0
 8016dae:	ea43 030c 	orr.w	r3, r3, ip
 8016db2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016db6:	f083 0301 	eor.w	r3, r3, #1
 8016dba:	431c      	orrs	r4, r3
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8016dbc:	4263      	negs	r3, r4
 8016dbe:	4323      	orrs	r3, r4
 8016dc0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016dc4:	f083 0301 	eor.w	r3, r3, #1
 8016dc8:	441a      	add	r2, r3
 8016dca:	e7c6      	b.n	8016d5a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x7a>
            pad_done |= ( p[i] != 0xFF );
 8016dcc:	186f      	adds	r7, r5, r1
        for( i = 0; i < ilen - 3; i++ )
 8016dce:	3101      	adds	r1, #1
            pad_done |= ( p[i] != 0xFF );
 8016dd0:	78bf      	ldrb	r7, [r7, #2]
 8016dd2:	2fff      	cmp	r7, #255	; 0xff
 8016dd4:	bf18      	it	ne
 8016dd6:	f043 0301 	orrne.w	r3, r3, #1
            pad_count += ( pad_done == 0 );
 8016dda:	f083 0701 	eor.w	r7, r3, #1
 8016dde:	fa52 f287 	uxtab	r2, r2, r7
 8016de2:	e7a0      	b.n	8016d26 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x46>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8016de4:	4c02      	ldr	r4, [pc, #8]	; (8016df0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x110>)
 8016de6:	e7d4      	b.n	8016d92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb2>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8016de8:	4c02      	ldr	r4, [pc, #8]	; (8016df4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>)
 8016dea:	e7d2      	b.n	8016d92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb2>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016dec:	4c02      	ldr	r4, [pc, #8]	; (8016df8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x118>)
 8016dee:	e7d5      	b.n	8016d9c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xbc>
 8016df0:	ffffbf00 	.word	0xffffbf00
 8016df4:	ffffbc00 	.word	0xffffbc00
 8016df8:	ffffbf80 	.word	0xffffbf80

08016dfc <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8016dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8016dfe:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8016e02:	b087      	sub	sp, #28
 8016e04:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016e08:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
 8016e0c:	b11c      	cbz	r4, 8016e16 <mbedtls_rsa_pkcs1_decrypt+0x1a>
 8016e0e:	2c01      	cmp	r4, #1
 8016e10:	d006      	beq.n	8016e20 <mbedtls_rsa_pkcs1_decrypt+0x24>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8016e12:	4809      	ldr	r0, [pc, #36]	; (8016e38 <mbedtls_rsa_pkcs1_decrypt+0x3c>)
 8016e14:	e00d      	b.n	8016e32 <mbedtls_rsa_pkcs1_decrypt+0x36>
    }
}
 8016e16:	b007      	add	sp, #28
 8016e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 8016e1c:	f7ff bf60 	b.w	8016ce0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8016e20:	2400      	movs	r4, #0
 8016e22:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8016e26:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8016e2a:	e9cd 4400 	strd	r4, r4, [sp]
 8016e2e:	f7ff fe93 	bl	8016b58 <mbedtls_rsa_rsaes_oaep_decrypt>
}
 8016e32:	b007      	add	sp, #28
 8016e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e36:	bf00      	nop
 8016e38:	ffffbf00 	.word	0xffffbf00

08016e3c <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 8016e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e40:	b09d      	sub	sp, #116	; 0x74
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016e42:	2b01      	cmp	r3, #1
{
 8016e44:	4680      	mov	r8, r0
 8016e46:	468a      	mov	sl, r1
 8016e48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016e4c:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 8016e50:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016e52:	d109      	bne.n	8016e68 <mbedtls_rsa_rsassa_pss_sign+0x2c>
 8016e54:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8016e58:	2b01      	cmp	r3, #1
 8016e5a:	d005      	beq.n	8016e68 <mbedtls_rsa_rsassa_pss_sign+0x2c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016e5c:	f8df b144 	ldr.w	fp, [pc, #324]	; 8016fa4 <mbedtls_rsa_rsassa_pss_sign+0x168>
    *p++ = 0xBC;

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
}
 8016e60:	4658      	mov	r0, fp
 8016e62:	b01d      	add	sp, #116	; 0x74
 8016e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 8016e68:	f1ba 0f00 	cmp.w	sl, #0
 8016e6c:	d0f6      	beq.n	8016e5c <mbedtls_rsa_rsassa_pss_sign+0x20>
    olen = ctx->len;
 8016e6e:	f8d8 6004 	ldr.w	r6, [r8, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 8016e72:	b130      	cbz	r0, 8016e82 <mbedtls_rsa_rsassa_pss_sign+0x46>
        md_info = mbedtls_md_info_from_type( md_alg );
 8016e74:	f7fd fb02 	bl	801447c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	d0ef      	beq.n	8016e5c <mbedtls_rsa_rsassa_pss_sign+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 8016e7c:	f7fd fc4e 	bl	801471c <mbedtls_md_get_size>
 8016e80:	9027      	str	r0, [sp, #156]	; 0x9c
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016e82:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8016e86:	f7fd faf9 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8016e8a:	4683      	mov	fp, r0
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	d0e5      	beq.n	8016e5c <mbedtls_rsa_rsassa_pss_sign+0x20>
    hlen = mbedtls_md_get_size( md_info );
 8016e90:	f7fd fc44 	bl	801471c <mbedtls_md_get_size>
    if( olen < hlen + slen + 2 )
 8016e94:	b204      	sxth	r4, r0
 8016e96:	0064      	lsls	r4, r4, #1
 8016e98:	1ca3      	adds	r3, r4, #2
 8016e9a:	42b3      	cmp	r3, r6
    hlen = mbedtls_md_get_size( md_info );
 8016e9c:	4607      	mov	r7, r0
    if( olen < hlen + slen + 2 )
 8016e9e:	d8dd      	bhi.n	8016e5c <mbedtls_rsa_rsassa_pss_sign+0x20>
    memset( sig, 0, olen );
 8016ea0:	4632      	mov	r2, r6
 8016ea2:	2100      	movs	r1, #0
 8016ea4:	4628      	mov	r0, r5
 8016ea6:	f00b fa42 	bl	802232e <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8016eaa:	463a      	mov	r2, r7
 8016eac:	a90c      	add	r1, sp, #48	; 0x30
 8016eae:	9804      	ldr	r0, [sp, #16]
 8016eb0:	47d0      	blx	sl
 8016eb2:	b110      	cbz	r0, 8016eba <mbedtls_rsa_rsassa_pss_sign+0x7e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016eb4:	f5a0 4b89 	sub.w	fp, r0, #17536	; 0x4480
 8016eb8:	e7d2      	b.n	8016e60 <mbedtls_rsa_rsassa_pss_sign+0x24>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8016eba:	f108 0308 	add.w	r3, r8, #8
 8016ebe:	9007      	str	r0, [sp, #28]
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	9303      	str	r3, [sp, #12]
 8016ec4:	f7f7 fc4a 	bl	800e75c <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 8016ec8:	1eb2      	subs	r2, r6, #2
 8016eca:	1b14      	subs	r4, r2, r4
 8016ecc:	eb05 0904 	add.w	r9, r5, r4
    *p++ = 0x01;
 8016ed0:	2201      	movs	r2, #1
 8016ed2:	f109 0901 	add.w	r9, r9, #1
 8016ed6:	552a      	strb	r2, [r5, r4]
    memcpy( p, salt, slen );
 8016ed8:	a90c      	add	r1, sp, #48	; 0x30
 8016eda:	463a      	mov	r2, r7
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8016edc:	9006      	str	r0, [sp, #24]
    mbedtls_md_init( &md_ctx );
 8016ede:	ac09      	add	r4, sp, #36	; 0x24
    memcpy( p, salt, slen );
 8016ee0:	4648      	mov	r0, r9
 8016ee2:	f00b fa00 	bl	80222e6 <memcpy>
    mbedtls_md_init( &md_ctx );
 8016ee6:	4620      	mov	r0, r4
 8016ee8:	f7fd fad4 	bl	8014494 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8016eec:	9b07      	ldr	r3, [sp, #28]
 8016eee:	4659      	mov	r1, fp
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f7fd faf8 	bl	80144e8 <mbedtls_md_setup>
 8016ef8:	4683      	mov	fp, r0
 8016efa:	b118      	cbz	r0, 8016f04 <mbedtls_rsa_rsassa_pss_sign+0xc8>
        mbedtls_md_free( &md_ctx );
 8016efc:	4620      	mov	r0, r4
 8016efe:	f7fd facf 	bl	80144a0 <mbedtls_md_free>
        return( ret );
 8016f02:	e7ad      	b.n	8016e60 <mbedtls_rsa_rsassa_pss_sign+0x24>
    p += slen;
 8016f04:	eb09 0b07 	add.w	fp, r9, r7
    mbedtls_md_starts( &md_ctx );
 8016f08:	4620      	mov	r0, r4
 8016f0a:	f7fd fb0f 	bl	801452c <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, p, 8 );
 8016f0e:	2208      	movs	r2, #8
 8016f10:	4659      	mov	r1, fp
 8016f12:	4620      	mov	r0, r4
 8016f14:	f7fd fb18 	bl	8014548 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 8016f18:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8016f1c:	4620      	mov	r0, r4
 8016f1e:	f7fd fb13 	bl	8014548 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, salt, slen );
 8016f22:	463a      	mov	r2, r7
 8016f24:	a90c      	add	r1, sp, #48	; 0x30
 8016f26:	4620      	mov	r0, r4
 8016f28:	f7fd fb0e 	bl	8014548 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, p );
 8016f2c:	4659      	mov	r1, fp
 8016f2e:	4620      	mov	r0, r4
 8016f30:	f7fd fb18 	bl	8014564 <mbedtls_md_finish>
    mbedtls_zeroize( salt, sizeof( salt ) );
 8016f34:	a80c      	add	r0, sp, #48	; 0x30
 8016f36:	2140      	movs	r1, #64	; 0x40
 8016f38:	f7ff f980 	bl	801623c <mbedtls_zeroize>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8016f3c:	9b06      	ldr	r3, [sp, #24]
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8016f3e:	9400      	str	r4, [sp, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8016f40:	3b01      	subs	r3, #1
    if( msb % 8 == 0 )
 8016f42:	f013 0f07 	tst.w	r3, #7
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8016f46:	f106 31ff 	add.w	r1, r6, #4294967295
    if( msb % 8 == 0 )
 8016f4a:	bf0c      	ite	eq
 8016f4c:	2001      	moveq	r0, #1
 8016f4e:	2000      	movne	r0, #0
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8016f50:	1bc9      	subs	r1, r1, r7
 8016f52:	463b      	mov	r3, r7
 8016f54:	1a09      	subs	r1, r1, r0
 8016f56:	465a      	mov	r2, fp
 8016f58:	4428      	add	r0, r5
 8016f5a:	f7ff f977 	bl	801624c <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f7fd fa9e 	bl	80144a0 <mbedtls_md_free>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8016f64:	9803      	ldr	r0, [sp, #12]
 8016f66:	f7f7 fbf9 	bl	800e75c <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8016f6a:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 8016f6e:	3001      	adds	r0, #1
 8016f70:	26ff      	movs	r6, #255	; 0xff
 8016f72:	fa46 f000 	asr.w	r0, r6, r0
 8016f76:	782e      	ldrb	r6, [r5, #0]
    *p++ = 0xBC;
 8016f78:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8016f7a:	4030      	ands	r0, r6
 8016f7c:	7028      	strb	r0, [r5, #0]
    *p++ = 0xBC;
 8016f7e:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 8016f82:	9b05      	ldr	r3, [sp, #20]
 8016f84:	b933      	cbnz	r3, 8016f94 <mbedtls_rsa_rsassa_pss_sign+0x158>
 8016f86:	462a      	mov	r2, r5
 8016f88:	4629      	mov	r1, r5
 8016f8a:	4640      	mov	r0, r8
 8016f8c:	f7ff fb04 	bl	8016598 <mbedtls_rsa_public>
 8016f90:	4683      	mov	fp, r0
 8016f92:	e765      	b.n	8016e60 <mbedtls_rsa_rsassa_pss_sign+0x24>
 8016f94:	9500      	str	r5, [sp, #0]
 8016f96:	462b      	mov	r3, r5
 8016f98:	9a04      	ldr	r2, [sp, #16]
 8016f9a:	4651      	mov	r1, sl
 8016f9c:	4640      	mov	r0, r8
 8016f9e:	f7ff fb31 	bl	8016604 <mbedtls_rsa_private>
 8016fa2:	e7f5      	b.n	8016f90 <mbedtls_rsa_rsassa_pss_sign+0x154>
 8016fa4:	ffffbf80 	.word	0xffffbf80

08016fa8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8016fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fac:	4699      	mov	r9, r3
 8016fae:	b089      	sub	sp, #36	; 0x24
    size_t nb_pad, olen, oid_size = 0;
 8016fb0:	2300      	movs	r3, #0
    size_t i;
    unsigned char diff;
    volatile unsigned char diff_no_optimize;
    int ret;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016fb2:	f1b9 0f01 	cmp.w	r9, #1
{
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	9103      	str	r1, [sp, #12]
 8016fba:	4692      	mov	sl, r2
 8016fbc:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8016fc0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8016fc2:	9e15      	ldr	r6, [sp, #84]	; 0x54
    const char *oid = NULL;
 8016fc4:	e9cd 3306 	strd	r3, r3, [sp, #24]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016fc8:	d107      	bne.n	8016fda <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
 8016fca:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016fce:	b123      	cbz	r3, 8016fda <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016fd0:	4c56      	ldr	r4, [pc, #344]	; (801712c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x184>)
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	b009      	add	sp, #36	; 0x24
 8016fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    olen = ctx->len;
 8016fda:	f8d5 b004 	ldr.w	fp, [r5, #4]
    nb_pad = olen - 3;
 8016fde:	f1ab 0403 	sub.w	r4, fp, #3
    if( md_alg != MBEDTLS_MD_NONE )
 8016fe2:	f1b8 0f00 	cmp.w	r8, #0
 8016fe6:	d013      	beq.n	8017010 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x68>
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8016fe8:	4640      	mov	r0, r8
 8016fea:	f7fd fa47 	bl	801447c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8016fee:	4607      	mov	r7, r0
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	d0ed      	beq.n	8016fd0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x28>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8016ff4:	aa06      	add	r2, sp, #24
 8016ff6:	a907      	add	r1, sp, #28
 8016ff8:	4640      	mov	r0, r8
 8016ffa:	f7fe f935 	bl	8015268 <mbedtls_oid_get_oid_by_md>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	d1e6      	bne.n	8016fd0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x28>
        nb_pad -= 10 + oid_size;
 8017002:	9b06      	ldr	r3, [sp, #24]
        hashlen = mbedtls_md_get_size( md_info );
 8017004:	4638      	mov	r0, r7
        nb_pad -= 10 + oid_size;
 8017006:	1ae4      	subs	r4, r4, r3
        hashlen = mbedtls_md_get_size( md_info );
 8017008:	f7fd fb88 	bl	801471c <mbedtls_md_get_size>
        nb_pad -= 10 + oid_size;
 801700c:	3c0a      	subs	r4, #10
        hashlen = mbedtls_md_get_size( md_info );
 801700e:	4607      	mov	r7, r0
    nb_pad -= hashlen;
 8017010:	1be4      	subs	r4, r4, r7
    if( ( nb_pad < 8 ) || ( nb_pad > olen ) )
 8017012:	2c07      	cmp	r4, #7
 8017014:	d9dc      	bls.n	8016fd0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x28>
 8017016:	45a3      	cmp	fp, r4
 8017018:	d3da      	bcc.n	8016fd0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x28>
    *p++ = 0;
 801701a:	4633      	mov	r3, r6
 801701c:	f04f 0b00 	mov.w	fp, #0
 8017020:	f803 bb02 	strb.w	fp, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8017024:	2201      	movs	r2, #1
 8017026:	7072      	strb	r2, [r6, #1]
    memset( p, 0xFF, nb_pad );
 8017028:	4618      	mov	r0, r3
 801702a:	4622      	mov	r2, r4
 801702c:	21ff      	movs	r1, #255	; 0xff
 801702e:	f00b f97e 	bl	802232e <memset>
 8017032:	4603      	mov	r3, r0
    p += nb_pad;
 8017034:	4420      	add	r0, r4
    *p++ = 0;
 8017036:	f803 b004 	strb.w	fp, [r3, r4]
    if( md_alg == MBEDTLS_MD_NONE )
 801703a:	f1b8 0f00 	cmp.w	r8, #0
 801703e:	d10e      	bne.n	801705e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb6>
        memcpy( p, hash, hashlen );
 8017040:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017042:	463a      	mov	r2, r7
 8017044:	3001      	adds	r0, #1
        memcpy( p, hash, hashlen );
 8017046:	f00b f94e 	bl	80222e6 <memcpy>
    if( mode == MBEDTLS_RSA_PUBLIC )
 801704a:	f1b9 0f00 	cmp.w	r9, #0
 801704e:	d12a      	bne.n	80170a6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xfe>
        return( mbedtls_rsa_public(  ctx, sig, sig ) );
 8017050:	4632      	mov	r2, r6
 8017052:	4631      	mov	r1, r6
 8017054:	4628      	mov	r0, r5
 8017056:	f7ff fa9f 	bl	8016598 <mbedtls_rsa_public>
 801705a:	4604      	mov	r4, r0
 801705c:	e7b9      	b.n	8016fd2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 801705e:	2230      	movs	r2, #48	; 0x30
 8017060:	7042      	strb	r2, [r0, #1]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 8017062:	9c06      	ldr	r4, [sp, #24]
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8017064:	70c2      	strb	r2, [r0, #3]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 8017066:	fa5f f887 	uxtb.w	r8, r7
 801706a:	f104 0308 	add.w	r3, r4, #8
        *p++ = (unsigned char) ( 0x04 + oid_size );
 801706e:	b2e2      	uxtb	r2, r4
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 8017070:	4443      	add	r3, r8
 8017072:	7083      	strb	r3, [r0, #2]
        *p++ = (unsigned char) ( 0x04 + oid_size );
 8017074:	1d13      	adds	r3, r2, #4
 8017076:	7103      	strb	r3, [r0, #4]
        *p++ = MBEDTLS_ASN1_OID;
 8017078:	2306      	movs	r3, #6
 801707a:	7143      	strb	r3, [r0, #5]
        *p++ = oid_size & 0xFF;
 801707c:	1dc3      	adds	r3, r0, #7
 801707e:	7182      	strb	r2, [r0, #6]
        memcpy( p, oid, oid_size );
 8017080:	9907      	ldr	r1, [sp, #28]
 8017082:	4622      	mov	r2, r4
 8017084:	4618      	mov	r0, r3
 8017086:	f00b f92e 	bl	80222e6 <memcpy>
 801708a:	4603      	mov	r3, r0
        *p++ = MBEDTLS_ASN1_NULL;
 801708c:	2205      	movs	r2, #5
        p += oid_size;
 801708e:	4420      	add	r0, r4
        *p++ = MBEDTLS_ASN1_NULL;
 8017090:	551a      	strb	r2, [r3, r4]
        *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8017092:	2304      	movs	r3, #4
        *p++ = 0x00;
 8017094:	f880 b001 	strb.w	fp, [r0, #1]
        *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8017098:	7083      	strb	r3, [r0, #2]
        *p++ = hashlen;
 801709a:	f880 8003 	strb.w	r8, [r0, #3]
        memcpy( p, hash, hashlen );
 801709e:	463a      	mov	r2, r7
 80170a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80170a2:	4418      	add	r0, r3
 80170a4:	e7cf      	b.n	8017046 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9e>
    sig_try = mbedtls_calloc( 1, ctx->len );
 80170a6:	4c22      	ldr	r4, [pc, #136]	; (8017130 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x188>)
 80170a8:	6869      	ldr	r1, [r5, #4]
 80170aa:	6823      	ldr	r3, [r4, #0]
 80170ac:	2001      	movs	r0, #1
 80170ae:	4798      	blx	r3
    if( sig_try == NULL )
 80170b0:	4607      	mov	r7, r0
 80170b2:	b148      	cbz	r0, 80170c8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x120>
    verif   = mbedtls_calloc( 1, ctx->len );
 80170b4:	6823      	ldr	r3, [r4, #0]
 80170b6:	6869      	ldr	r1, [r5, #4]
 80170b8:	2001      	movs	r0, #1
 80170ba:	4798      	blx	r3
    if( verif == NULL )
 80170bc:	4680      	mov	r8, r0
 80170be:	b930      	cbnz	r0, 80170ce <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x126>
        mbedtls_free( sig_try );
 80170c0:	4b1c      	ldr	r3, [pc, #112]	; (8017134 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x18c>)
 80170c2:	4638      	mov	r0, r7
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	4798      	blx	r3
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80170c8:	f06f 040f 	mvn.w	r4, #15
 80170cc:	e781      	b.n	8016fd2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80170ce:	9700      	str	r7, [sp, #0]
 80170d0:	4633      	mov	r3, r6
 80170d2:	4652      	mov	r2, sl
 80170d4:	9903      	ldr	r1, [sp, #12]
 80170d6:	4628      	mov	r0, r5
 80170d8:	f7ff fa94 	bl	8016604 <mbedtls_rsa_private>
 80170dc:	4604      	mov	r4, r0
 80170de:	b9a0      	cbnz	r0, 801710a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x162>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80170e0:	4642      	mov	r2, r8
 80170e2:	4639      	mov	r1, r7
 80170e4:	4628      	mov	r0, r5
 80170e6:	f7ff fa57 	bl	8016598 <mbedtls_rsa_public>
 80170ea:	4604      	mov	r4, r0
 80170ec:	b968      	cbnz	r0, 801710a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x162>
    for( diff = 0, i = 0; i < ctx->len; i++ )
 80170ee:	686a      	ldr	r2, [r5, #4]
 80170f0:	4601      	mov	r1, r0
 80170f2:	4603      	mov	r3, r0
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d110      	bne.n	801711a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x172>
    diff_no_optimize = diff;
 80170f8:	f88d 1017 	strb.w	r1, [sp, #23]
    if( diff_no_optimize != 0 )
 80170fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8017100:	b993      	cbnz	r3, 8017128 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x180>
    memcpy( sig, sig_try, ctx->len );
 8017102:	4639      	mov	r1, r7
 8017104:	4630      	mov	r0, r6
 8017106:	f00b f8ee 	bl	80222e6 <memcpy>
    mbedtls_free( sig_try );
 801710a:	4d0a      	ldr	r5, [pc, #40]	; (8017134 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x18c>)
 801710c:	4638      	mov	r0, r7
 801710e:	682b      	ldr	r3, [r5, #0]
 8017110:	4798      	blx	r3
    mbedtls_free( verif );
 8017112:	682b      	ldr	r3, [r5, #0]
 8017114:	4640      	mov	r0, r8
 8017116:	4798      	blx	r3
    return( ret );
 8017118:	e75b      	b.n	8016fd2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x2a>
        diff |= verif[i] ^ sig[i];
 801711a:	f818 0003 	ldrb.w	r0, [r8, r3]
 801711e:	5cf5      	ldrb	r5, [r6, r3]
 8017120:	4068      	eors	r0, r5
 8017122:	4301      	orrs	r1, r0
    for( diff = 0, i = 0; i < ctx->len; i++ )
 8017124:	3301      	adds	r3, #1
 8017126:	e7e5      	b.n	80170f4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x14c>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8017128:	4c03      	ldr	r4, [pc, #12]	; (8017138 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x190>)
 801712a:	e7ee      	b.n	801710a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x162>
 801712c:	ffffbf80 	.word	0xffffbf80
 8017130:	200005a0 	.word	0x200005a0
 8017134:	200005a4 	.word	0x200005a4
 8017138:	ffffbd00 	.word	0xffffbd00

0801713c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 801713c:	b430      	push	{r4, r5}
    switch( ctx->padding )
 801713e:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 8017142:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 8017146:	b125      	cbz	r5, 8017152 <mbedtls_rsa_pkcs1_sign+0x16>
 8017148:	2d01      	cmp	r5, #1
 801714a:	d006      	beq.n	801715a <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 801714c:	4805      	ldr	r0, [pc, #20]	; (8017164 <mbedtls_rsa_pkcs1_sign+0x28>)
 801714e:	bc30      	pop	{r4, r5}
 8017150:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017152:	9402      	str	r4, [sp, #8]
}
 8017154:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017156:	f7ff bf27 	b.w	8016fa8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 801715a:	9402      	str	r4, [sp, #8]
}
 801715c:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 801715e:	f7ff be6d 	b.w	8016e3c <mbedtls_rsa_rsassa_pss_sign>
 8017162:	bf00      	nop
 8017164:	ffffbf00 	.word	0xffffbf00

08017168 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8017168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801716c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    size_t slen, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017170:	2b01      	cmp	r3, #1
{
 8017172:	4604      	mov	r4, r0
 8017174:	f89d 7490 	ldrb.w	r7, [sp, #1168]	; 0x490
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017178:	d10a      	bne.n	8017190 <mbedtls_rsa_rsassa_pss_verify_ext+0x28>
 801717a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 801717e:	2801      	cmp	r0, #1
 8017180:	d006      	beq.n	8017190 <mbedtls_rsa_rsassa_pss_verify_ext+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017182:	f8df b188 	ldr.w	fp, [pc, #392]	; 801730c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>

    if( memcmp( p + slen, result, hlen ) == 0 )
        return( 0 );
    else
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
}
 8017186:	4658      	mov	r0, fp
 8017188:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
 8017190:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 8017194:	f1a8 0010 	sub.w	r0, r8, #16
 8017198:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 801719c:	d8f1      	bhi.n	8017182 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 801719e:	ad1a      	add	r5, sp, #104	; 0x68
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d14c      	bne.n	801723e <mbedtls_rsa_rsassa_pss_verify_ext+0xd6>
 80171a4:	462a      	mov	r2, r5
 80171a6:	f8dd 14a4 	ldr.w	r1, [sp, #1188]	; 0x4a4
 80171aa:	4620      	mov	r0, r4
 80171ac:	f7ff f9f4 	bl	8016598 <mbedtls_rsa_public>
 80171b0:	4683      	mov	fp, r0
    if( ret != 0 )
 80171b2:	2800      	cmp	r0, #0
 80171b4:	d1e7      	bne.n	8017186 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    if( buf[siglen - 1] != 0xBC )
 80171b6:	f108 36ff 	add.w	r6, r8, #4294967295
 80171ba:	5dab      	ldrb	r3, [r5, r6]
 80171bc:	2bbc      	cmp	r3, #188	; 0xbc
 80171be:	f040 809f 	bne.w	8017300 <mbedtls_rsa_rsassa_pss_verify_ext+0x198>
    if( md_alg != MBEDTLS_MD_NONE )
 80171c2:	b147      	cbz	r7, 80171d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x6e>
        md_info = mbedtls_md_info_from_type( md_alg );
 80171c4:	4638      	mov	r0, r7
 80171c6:	f7fd f959 	bl	801447c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80171ca:	2800      	cmp	r0, #0
 80171cc:	d0d9      	beq.n	8017182 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        hashlen = mbedtls_md_get_size( md_info );
 80171ce:	f7fd faa5 	bl	801471c <mbedtls_md_get_size>
 80171d2:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80171d6:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
 80171da:	f7fd f94f 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80171de:	4683      	mov	fp, r0
 80171e0:	2800      	cmp	r0, #0
 80171e2:	d0ce      	beq.n	8017182 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
    hlen = mbedtls_md_get_size( md_info );
 80171e4:	f7fd fa9a 	bl	801471c <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
 80171e8:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
 80171ea:	4681      	mov	r9, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80171ec:	f104 0008 	add.w	r0, r4, #8
    memset( zeros, 0, 8 );
 80171f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80171f4:	f7f7 fab2 	bl	800e75c <mbedtls_mpi_bitlen>
 80171f8:	f100 3aff 	add.w	sl, r0, #4294967295
    if( msb % 8 == 0 )
 80171fc:	f01a 0f07 	tst.w	sl, #7
        siglen -= 1;
 8017200:	bf08      	it	eq
 8017202:	46b0      	moveq	r8, r6
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8017204:	f100 0307 	add.w	r3, r0, #7
 8017208:	782a      	ldrb	r2, [r5, #0]
 801720a:	f06f 0007 	mvn.w	r0, #7
 801720e:	fb00 3008 	mla	r0, r0, r8, r3
    p = buf;
 8017212:	bf14      	ite	ne
 8017214:	462f      	movne	r7, r5
        p++;
 8017216:	f10d 0769 	addeq.w	r7, sp, #105	; 0x69
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 801721a:	4102      	asrs	r2, r0
 801721c:	9203      	str	r2, [sp, #12]
 801721e:	d1b0      	bne.n	8017182 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
    mbedtls_md_init( &md_ctx );
 8017220:	ac07      	add	r4, sp, #28
 8017222:	4620      	mov	r0, r4
 8017224:	f7fd f936 	bl	8014494 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8017228:	4659      	mov	r1, fp
 801722a:	9a03      	ldr	r2, [sp, #12]
 801722c:	4620      	mov	r0, r4
 801722e:	f7fd f95b 	bl	80144e8 <mbedtls_md_setup>
 8017232:	4683      	mov	fp, r0
 8017234:	b150      	cbz	r0, 801724c <mbedtls_rsa_rsassa_pss_verify_ext+0xe4>
        mbedtls_md_free( &md_ctx );
 8017236:	4620      	mov	r0, r4
 8017238:	f7fd f932 	bl	80144a0 <mbedtls_md_free>
        return( ret );
 801723c:	e7a3      	b.n	8017186 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801723e:	9500      	str	r5, [sp, #0]
 8017240:	f8dd 34a4 	ldr.w	r3, [sp, #1188]	; 0x4a4
 8017244:	4620      	mov	r0, r4
 8017246:	f7ff f9dd 	bl	8016604 <mbedtls_rsa_private>
 801724a:	e7b1      	b.n	80171b0 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
    mgf_mask( p, siglen - hlen - 1, p + siglen - hlen - 1, hlen, &md_ctx );
 801724c:	ea6f 0109 	mvn.w	r1, r9
 8017250:	4441      	add	r1, r8
 8017252:	464b      	mov	r3, r9
 8017254:	9400      	str	r4, [sp, #0]
 8017256:	187a      	adds	r2, r7, r1
 8017258:	4638      	mov	r0, r7
 801725a:	f7fe fff7 	bl	801624c <mgf_mask>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 801725e:	ebca 03c8 	rsb	r3, sl, r8, lsl #3
 8017262:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8017266:	fa4a fa03 	asr.w	sl, sl, r3
 801726a:	782b      	ldrb	r3, [r5, #0]
 801726c:	ea0a 0a03 	and.w	sl, sl, r3
 8017270:	f885 a000 	strb.w	sl, [r5]
    while( p < buf + siglen && *p == 0 )
 8017274:	44a8      	add	r8, r5
 8017276:	45b8      	cmp	r8, r7
 8017278:	d93e      	bls.n	80172f8 <mbedtls_rsa_rsassa_pss_verify_ext+0x190>
 801727a:	783b      	ldrb	r3, [r7, #0]
 801727c:	1c7a      	adds	r2, r7, #1
 801727e:	2b00      	cmp	r3, #0
 8017280:	d038      	beq.n	80172f4 <mbedtls_rsa_rsassa_pss_verify_ext+0x18c>
    if( p == buf + siglen ||
 8017282:	783b      	ldrb	r3, [r7, #0]
 8017284:	2b01      	cmp	r3, #1
        *p++ != 0x01 )
 8017286:	f107 0801 	add.w	r8, r7, #1
    if( p == buf + siglen ||
 801728a:	d136      	bne.n	80172fa <mbedtls_rsa_rsassa_pss_verify_ext+0x192>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 801728c:	f8dd 34a0 	ldr.w	r3, [sp, #1184]	; 0x4a0
    slen = siglen - hlen - 1; /* Currently length of salt + padding */
 8017290:	eba6 0609 	sub.w	r6, r6, r9
    slen -= p - buf;
 8017294:	eba8 0505 	sub.w	r5, r8, r5
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8017298:	1c5a      	adds	r2, r3, #1
    slen -= p - buf;
 801729a:	eba6 0505 	sub.w	r5, r6, r5
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 801729e:	d001      	beq.n	80172a4 <mbedtls_rsa_rsassa_pss_verify_ext+0x13c>
 80172a0:	42ab      	cmp	r3, r5
 80172a2:	d12a      	bne.n	80172fa <mbedtls_rsa_rsassa_pss_verify_ext+0x192>
    mbedtls_md_starts( &md_ctx );
 80172a4:	4620      	mov	r0, r4
 80172a6:	f7fd f941 	bl	801452c <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, zeros, 8 );
 80172aa:	2208      	movs	r2, #8
 80172ac:	a905      	add	r1, sp, #20
 80172ae:	4620      	mov	r0, r4
 80172b0:	f7fd f94a 	bl	8014548 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 80172b4:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
 80172b8:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
 80172bc:	4620      	mov	r0, r4
 80172be:	f7fd f943 	bl	8014548 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, p, slen );
 80172c2:	462a      	mov	r2, r5
 80172c4:	4641      	mov	r1, r8
 80172c6:	4620      	mov	r0, r4
 80172c8:	f7fd f93e 	bl	8014548 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, result );
 80172cc:	a90a      	add	r1, sp, #40	; 0x28
 80172ce:	4620      	mov	r0, r4
 80172d0:	f7fd f948 	bl	8014564 <mbedtls_md_finish>
    mbedtls_md_free( &md_ctx );
 80172d4:	4620      	mov	r0, r4
 80172d6:	f7fd f8e3 	bl	80144a0 <mbedtls_md_free>
    if( memcmp( p + slen, result, hlen ) == 0 )
 80172da:	464a      	mov	r2, r9
 80172dc:	a90a      	add	r1, sp, #40	; 0x28
 80172de:	eb08 0005 	add.w	r0, r8, r5
 80172e2:	f00a fff1 	bl	80222c8 <memcmp>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80172e6:	4b08      	ldr	r3, [pc, #32]	; (8017308 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 80172e8:	2800      	cmp	r0, #0
 80172ea:	bf14      	ite	ne
 80172ec:	469b      	movne	fp, r3
 80172ee:	f04f 0b00 	moveq.w	fp, #0
 80172f2:	e748      	b.n	8017186 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        p++;
 80172f4:	4617      	mov	r7, r2
 80172f6:	e7be      	b.n	8017276 <mbedtls_rsa_rsassa_pss_verify_ext+0x10e>
    if( p == buf + siglen ||
 80172f8:	d1c3      	bne.n	8017282 <mbedtls_rsa_rsassa_pss_verify_ext+0x11a>
        mbedtls_md_free( &md_ctx );
 80172fa:	4620      	mov	r0, r4
 80172fc:	f7fd f8d0 	bl	80144a0 <mbedtls_md_free>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8017300:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8017310 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
 8017304:	e73f      	b.n	8017186 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 8017306:	bf00      	nop
 8017308:	ffffbc80 	.word	0xffffbc80
 801730c:	ffffbf80 	.word	0xffffbf80
 8017310:	ffffbf00 	.word	0xffffbf00

08017314 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8017314:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 8017316:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
 801731a:	b086      	sub	sp, #24
 801731c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8017320:	b17c      	cbz	r4, 8017342 <mbedtls_rsa_rsassa_pss_verify+0x2e>
 8017322:	b2e4      	uxtb	r4, r4

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 8017324:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017326:	9605      	str	r6, [sp, #20]
 8017328:	f04f 36ff 	mov.w	r6, #4294967295
 801732c:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8017330:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017332:	9402      	str	r4, [sp, #8]
 8017334:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017336:	e9cd 5400 	strd	r5, r4, [sp]
 801733a:	f7ff ff15 	bl	8017168 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
 801733e:	b006      	add	sp, #24
 8017340:	bd70      	pop	{r4, r5, r6, pc}
                             : md_alg;
 8017342:	462c      	mov	r4, r5
 8017344:	e7ee      	b.n	8017324 <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

08017348 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8017348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801734c:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
    mbedtls_md_type_t msg_md_alg;
    const mbedtls_md_info_t *md_info;
    mbedtls_asn1_buf oid;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017350:	2b01      	cmp	r3, #1
{
 8017352:	f89d 6440 	ldrb.w	r6, [sp, #1088]	; 0x440
 8017356:	f8dd 8444 	ldr.w	r8, [sp, #1092]	; 0x444
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801735a:	d108      	bne.n	801736e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x26>
 801735c:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 8017360:	b12c      	cbz	r4, 801736e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017362:	4d5b      	ldr	r5, [pc, #364]	; (80174d0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x188>)

    if( p != end )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    return( 0 );
}
 8017364:	4628      	mov	r0, r5
 8017366:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 801736a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    siglen = ctx->len;
 801736e:	6847      	ldr	r7, [r0, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 8017370:	f1a7 0410 	sub.w	r4, r7, #16
 8017374:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 8017378:	d8f3      	bhi.n	8017362 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
 801737a:	ac08      	add	r4, sp, #32
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801737c:	b95b      	cbnz	r3, 8017396 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
 801737e:	4622      	mov	r2, r4
 8017380:	f8dd 144c 	ldr.w	r1, [sp, #1100]	; 0x44c
 8017384:	f7ff f908 	bl	8016598 <mbedtls_rsa_public>
 8017388:	4605      	mov	r5, r0
    if( ret != 0 )
 801738a:	2800      	cmp	r0, #0
 801738c:	d1ea      	bne.n	8017364 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1c>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 801738e:	7823      	ldrb	r3, [r4, #0]
 8017390:	b13b      	cbz	r3, 80173a2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8017392:	4d50      	ldr	r5, [pc, #320]	; (80174d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18c>)
 8017394:	e7e6      	b.n	8017364 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8017396:	9400      	str	r4, [sp, #0]
 8017398:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
 801739c:	f7ff f932 	bl	8016604 <mbedtls_rsa_private>
 80173a0:	e7f2      	b.n	8017388 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x40>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 80173a2:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80173a6:	9304      	str	r3, [sp, #16]
 80173a8:	7863      	ldrb	r3, [r4, #1]
 80173aa:	2b01      	cmp	r3, #1
 80173ac:	d1f1      	bne.n	8017392 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4a>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 80173ae:	1e7b      	subs	r3, r7, #1
 80173b0:	4423      	add	r3, r4
    while( *p != 0 )
 80173b2:	9804      	ldr	r0, [sp, #16]
 80173b4:	7802      	ldrb	r2, [r0, #0]
 80173b6:	b992      	cbnz	r2, 80173de <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x96>
    p++; /* skip 00 byte */
 80173b8:	3001      	adds	r0, #1
    if( p - buf < 11 )
 80173ba:	1b04      	subs	r4, r0, r4
 80173bc:	2c0a      	cmp	r4, #10
    p++; /* skip 00 byte */
 80173be:	9004      	str	r0, [sp, #16]
    if( p - buf < 11 )
 80173c0:	dde7      	ble.n	8017392 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4a>
    len = siglen - ( p - buf );
 80173c2:	1b3f      	subs	r7, r7, r4
    if( len == hashlen && md_alg == MBEDTLS_MD_NONE )
 80173c4:	4547      	cmp	r7, r8
 80173c6:	d111      	bne.n	80173ec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa4>
 80173c8:	b986      	cbnz	r6, 80173ec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa4>
        if( memcmp( p, hash, hashlen ) == 0 )
 80173ca:	4642      	mov	r2, r8
 80173cc:	f8dd 1448 	ldr.w	r1, [sp, #1096]	; 0x448
 80173d0:	f00a ff7a 	bl	80222c8 <memcmp>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80173d4:	4b40      	ldr	r3, [pc, #256]	; (80174d8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x190>)
 80173d6:	2800      	cmp	r0, #0
 80173d8:	bf18      	it	ne
 80173da:	461d      	movne	r5, r3
 80173dc:	e7c2      	b.n	8017364 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1c>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 80173de:	4298      	cmp	r0, r3
 80173e0:	d2d7      	bcs.n	8017392 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4a>
 80173e2:	2aff      	cmp	r2, #255	; 0xff
 80173e4:	d1d5      	bne.n	8017392 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4a>
        p++;
 80173e6:	3001      	adds	r0, #1
 80173e8:	9004      	str	r0, [sp, #16]
 80173ea:	e7e2      	b.n	80173b2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6a>
    md_info = mbedtls_md_info_from_type( md_alg );
 80173ec:	4630      	mov	r0, r6
 80173ee:	f7fd f845 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80173f2:	2800      	cmp	r0, #0
 80173f4:	d0b5      	beq.n	8017362 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
    hashlen = mbedtls_md_get_size( md_info );
 80173f6:	f7fd f991 	bl	801471c <mbedtls_md_get_size>
    end = p + len;
 80173fa:	9c04      	ldr	r4, [sp, #16]
 80173fc:	eb04 0807 	add.w	r8, r4, r7
    hashlen = mbedtls_md_get_size( md_info );
 8017400:	4681      	mov	r9, r0
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 8017402:	2330      	movs	r3, #48	; 0x30
 8017404:	aa03      	add	r2, sp, #12
 8017406:	4641      	mov	r1, r8
 8017408:	a804      	add	r0, sp, #16
 801740a:	f7f6 fc36 	bl	800dc7a <mbedtls_asn1_get_tag>
 801740e:	b108      	cbz	r0, 8017414 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xcc>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8017410:	4d31      	ldr	r5, [pc, #196]	; (80174d8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x190>)
 8017412:	e7a7      	b.n	8017364 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1c>
    if( p != p0 + 2 || asn1_len + 2 != len )
 8017414:	9a04      	ldr	r2, [sp, #16]
 8017416:	1ca3      	adds	r3, r4, #2
 8017418:	429a      	cmp	r2, r3
 801741a:	d1f9      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
 801741c:	9b03      	ldr	r3, [sp, #12]
 801741e:	3302      	adds	r3, #2
 8017420:	42bb      	cmp	r3, r7
 8017422:	d1f5      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 8017424:	2330      	movs	r3, #48	; 0x30
 8017426:	aa03      	add	r2, sp, #12
 8017428:	4641      	mov	r1, r8
 801742a:	a804      	add	r0, sp, #16
 801742c:	f7f6 fc25 	bl	800dc7a <mbedtls_asn1_get_tag>
 8017430:	2800      	cmp	r0, #0
 8017432:	d1ed      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( p != p0 + 2 || asn1_len + 6 + hashlen != len )
 8017434:	9a04      	ldr	r2, [sp, #16]
 8017436:	1d23      	adds	r3, r4, #4
 8017438:	429a      	cmp	r2, r3
 801743a:	d1e9      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
 801743c:	9b03      	ldr	r3, [sp, #12]
 801743e:	3306      	adds	r3, #6
 8017440:	444b      	add	r3, r9
 8017442:	42bb      	cmp	r3, r7
 8017444:	d1e4      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8017446:	2306      	movs	r3, #6
 8017448:	aa06      	add	r2, sp, #24
 801744a:	4641      	mov	r1, r8
 801744c:	a804      	add	r0, sp, #16
 801744e:	f7f6 fc14 	bl	800dc7a <mbedtls_asn1_get_tag>
 8017452:	2800      	cmp	r0, #0
 8017454:	d1dc      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( p != p0 + 2 )
 8017456:	9b04      	ldr	r3, [sp, #16]
 8017458:	3406      	adds	r4, #6
 801745a:	429c      	cmp	r4, r3
 801745c:	d1d8      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    p += oid.len;
 801745e:	9b06      	ldr	r3, [sp, #24]
    oid.p = p;
 8017460:	9407      	str	r4, [sp, #28]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 8017462:	f10d 010b 	add.w	r1, sp, #11
    p += oid.len;
 8017466:	441c      	add	r4, r3
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 8017468:	a805      	add	r0, sp, #20
    p += oid.len;
 801746a:	9404      	str	r4, [sp, #16]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 801746c:	f7fd fee2 	bl	8015234 <mbedtls_oid_get_md_alg>
 8017470:	2800      	cmp	r0, #0
 8017472:	d1cd      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( md_alg != msg_md_alg )
 8017474:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8017478:	42b3      	cmp	r3, r6
 801747a:	d1c9      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 801747c:	2305      	movs	r3, #5
 801747e:	aa03      	add	r2, sp, #12
 8017480:	4641      	mov	r1, r8
 8017482:	a804      	add	r0, sp, #16
    p0 = p;
 8017484:	9c04      	ldr	r4, [sp, #16]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 8017486:	f7f6 fbf8 	bl	800dc7a <mbedtls_asn1_get_tag>
 801748a:	2800      	cmp	r0, #0
 801748c:	d1c0      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( p != p0 + 2 )
 801748e:	9a04      	ldr	r2, [sp, #16]
 8017490:	1ca3      	adds	r3, r4, #2
 8017492:	429a      	cmp	r2, r3
 8017494:	d1bc      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8017496:	2304      	movs	r3, #4
 8017498:	aa03      	add	r2, sp, #12
 801749a:	4641      	mov	r1, r8
 801749c:	a804      	add	r0, sp, #16
 801749e:	f7f6 fbec 	bl	800dc7a <mbedtls_asn1_get_tag>
 80174a2:	2800      	cmp	r0, #0
 80174a4:	d1b4      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( p != p0 + 2 || asn1_len != hashlen )
 80174a6:	9b04      	ldr	r3, [sp, #16]
 80174a8:	3404      	adds	r4, #4
 80174aa:	429c      	cmp	r4, r3
 80174ac:	d1b0      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
 80174ae:	9b03      	ldr	r3, [sp, #12]
 80174b0:	454b      	cmp	r3, r9
 80174b2:	d1ad      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    if( memcmp( p, hash, hashlen ) != 0 )
 80174b4:	464a      	mov	r2, r9
 80174b6:	f8dd 1448 	ldr.w	r1, [sp, #1096]	; 0x448
 80174ba:	4620      	mov	r0, r4
 80174bc:	f00a ff04 	bl	80222c8 <memcmp>
 80174c0:	2800      	cmp	r0, #0
 80174c2:	d1a5      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
    p += hashlen;
 80174c4:	44a1      	add	r9, r4
    if( p != end )
 80174c6:	45c8      	cmp	r8, r9
 80174c8:	f43f af4c 	beq.w	8017364 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1c>
 80174cc:	e7a0      	b.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
 80174ce:	bf00      	nop
 80174d0:	ffffbf80 	.word	0xffffbf80
 80174d4:	ffffbf00 	.word	0xffffbf00
 80174d8:	ffffbc80 	.word	0xffffbc80

080174dc <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80174dc:	b430      	push	{r4, r5}
    switch( ctx->padding )
 80174de:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 80174e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 80174e6:	b125      	cbz	r5, 80174f2 <mbedtls_rsa_pkcs1_verify+0x16>
 80174e8:	2d01      	cmp	r5, #1
 80174ea:	d006      	beq.n	80174fa <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80174ec:	4805      	ldr	r0, [pc, #20]	; (8017504 <mbedtls_rsa_pkcs1_verify+0x28>)
 80174ee:	bc30      	pop	{r4, r5}
 80174f0:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80174f2:	9402      	str	r4, [sp, #8]
}
 80174f4:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80174f6:	f7ff bf27 	b.w	8017348 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 80174fa:	9402      	str	r4, [sp, #8]
}
 80174fc:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 80174fe:	f7ff bf09 	b.w	8017314 <mbedtls_rsa_rsassa_pss_verify>
 8017502:	bf00      	nop
 8017504:	ffffbf00 	.word	0xffffbf00

08017508 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8017508:	b510      	push	{r4, lr}
 801750a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 801750c:	308c      	adds	r0, #140	; 0x8c
 801750e:	f7f6 fff7 	bl	800e500 <mbedtls_mpi_free>
 8017512:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8017516:	f7f6 fff3 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP ); mbedtls_mpi_free( &ctx->RN );
 801751a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801751e:	f7f6 ffef 	bl	800e500 <mbedtls_mpi_free>
 8017522:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8017526:	f7f6 ffeb 	bl	800e500 <mbedtls_mpi_free>
 801752a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801752e:	f7f6 ffe7 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ ); mbedtls_mpi_free( &ctx->DP );
 8017532:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017536:	f7f6 ffe3 	bl	800e500 <mbedtls_mpi_free>
 801753a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801753e:	f7f6 ffdf 	bl	800e500 <mbedtls_mpi_free>
 8017542:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8017546:	f7f6 ffdb 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  ); mbedtls_mpi_free( &ctx->D );
 801754a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801754e:	f7f6 ffd7 	bl	800e500 <mbedtls_mpi_free>
 8017552:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017556:	f7f6 ffd3 	bl	800e500 <mbedtls_mpi_free>
 801755a:	f104 0020 	add.w	r0, r4, #32
 801755e:	f7f6 ffcf 	bl	800e500 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8017562:	f104 0014 	add.w	r0, r4, #20
 8017566:	f7f6 ffcb 	bl	800e500 <mbedtls_mpi_free>
 801756a:	f104 0008 	add.w	r0, r4, #8

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 801756e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8017572:	f7f6 bfc5 	b.w	800e500 <mbedtls_mpi_free>

08017576 <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 8017576:	225c      	movs	r2, #92	; 0x5c
 8017578:	2100      	movs	r1, #0
 801757a:	f00a bed8 	b.w	802232e <memset>

0801757e <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 801757e:	b120      	cbz	r0, 801758a <mbedtls_sha1_free+0xc>
 8017580:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8017584:	2200      	movs	r2, #0
 8017586:	4298      	cmp	r0, r3
 8017588:	d100      	bne.n	801758c <mbedtls_sha1_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}
 801758a:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 801758c:	7002      	strb	r2, [r0, #0]
 801758e:	3001      	adds	r0, #1
 8017590:	e7f9      	b.n	8017586 <mbedtls_sha1_free+0x8>

08017592 <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 8017592:	b508      	push	{r3, lr}
    *dst = *src;
 8017594:	225c      	movs	r2, #92	; 0x5c
 8017596:	f00a fea6 	bl	80222e6 <memcpy>
}
 801759a:	bd08      	pop	{r3, pc}

0801759c <mbedtls_sha1_starts>:
/*
 * SHA-1 context setup
 */
void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 801759c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 801759e:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 80175a2:	4b09      	ldr	r3, [pc, #36]	; (80175c8 <mbedtls_sha1_starts+0x2c>)
 80175a4:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 80175a6:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80175aa:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 80175ac:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 80175b0:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 80175b4:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 80175b8:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 80175ba:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 80175be:	6143      	str	r3, [r0, #20]
    ctx->state[4] = 0xC3D2E1F0;
 80175c0:	4b02      	ldr	r3, [pc, #8]	; (80175cc <mbedtls_sha1_starts+0x30>)
 80175c2:	6183      	str	r3, [r0, #24]
}
 80175c4:	4770      	bx	lr
 80175c6:	bf00      	nop
 80175c8:	67452301 	.word	0x67452301
 80175cc:	c3d2e1f0 	.word	0xc3d2e1f0

080175d0 <mbedtls_sha1_process>:

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
void mbedtls_sha1_process( mbedtls_sha1_context *ctx, const unsigned char data[64] )
{
 80175d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d4:	680c      	ldr	r4, [r1, #0]
 80175d6:	694d      	ldr	r5, [r1, #20]
 80175d8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 80175da:	f8d1 e028 	ldr.w	lr, [r1, #40]	; 0x28
 80175de:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
 80175e2:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80175e6:	68ca      	ldr	r2, [r1, #12]
 80175e8:	f8d1 a010 	ldr.w	sl, [r1, #16]
 80175ec:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80175f0:	b097      	sub	sp, #92	; 0x5c
 80175f2:	ba23      	rev	r3, r4
 80175f4:	9304      	str	r3, [sp, #16]
 80175f6:	684b      	ldr	r3, [r1, #4]
 80175f8:	9000      	str	r0, [sp, #0]
 80175fa:	ba1b      	rev	r3, r3
 80175fc:	9305      	str	r3, [sp, #20]
 80175fe:	ba2b      	rev	r3, r5
 8017600:	930c      	str	r3, [sp, #48]	; 0x30
 8017602:	698b      	ldr	r3, [r1, #24]
 8017604:	69c8      	ldr	r0, [r1, #28]
 8017606:	ba1b      	rev	r3, r3
 8017608:	930d      	str	r3, [sp, #52]	; 0x34
 801760a:	ba03      	rev	r3, r0
 801760c:	930e      	str	r3, [sp, #56]	; 0x38
 801760e:	ba3b      	rev	r3, r7
 8017610:	9308      	str	r3, [sp, #32]
 8017612:	fa9e f38e 	rev.w	r3, lr
 8017616:	f8d1 e02c 	ldr.w	lr, [r1, #44]	; 0x2c
 801761a:	9309      	str	r3, [sp, #36]	; 0x24
 801761c:	fa9e f38e 	rev.w	r3, lr
 8017620:	930a      	str	r3, [sp, #40]	; 0x28
 8017622:	fa9c f38c 	rev.w	r3, ip
 8017626:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 801762a:	930b      	str	r3, [sp, #44]	; 0x2c
 801762c:	fa9c f38c 	rev.w	r3, ip
 8017630:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
 8017634:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 8017636:	9301      	str	r3, [sp, #4]
 8017638:	fa9c f38c 	rev.w	r3, ip
 801763c:	9302      	str	r3, [sp, #8]
 801763e:	ba3b      	rev	r3, r7
 8017640:	9303      	str	r3, [sp, #12]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8017642:	9b00      	ldr	r3, [sp, #0]
 8017644:	689b      	ldr	r3, [r3, #8]
 8017646:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 8017648:	9b00      	ldr	r3, [sp, #0]
 801764a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 8017650:	9b00      	ldr	r3, [sp, #0]
 8017652:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017654:	691b      	ldr	r3, [r3, #16]
 8017656:	9311      	str	r3, [sp, #68]	; 0x44
    D = ctx->state[3];
 8017658:	9b00      	ldr	r3, [sp, #0]
 801765a:	695b      	ldr	r3, [r3, #20]
 801765c:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 801765e:	9b00      	ldr	r3, [sp, #0]

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8017660:	9913      	ldr	r1, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8017662:	699b      	ldr	r3, [r3, #24]
 8017664:	9315      	str	r3, [sp, #84]	; 0x54
    P( A, B, C, D, E, W[0]  );
 8017666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017668:	ea83 0c01 	eor.w	ip, r3, r1
 801766c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801766e:	ea0c 0c03 	and.w	ip, ip, r3
 8017672:	ea8c 0c01 	eor.w	ip, ip, r1
 8017676:	4be0      	ldr	r3, [pc, #896]	; (80179f8 <mbedtls_sha1_process+0x428>)
 8017678:	9915      	ldr	r1, [sp, #84]	; 0x54
 801767a:	4419      	add	r1, r3
 801767c:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8017680:	448c      	add	ip, r1
 8017682:	9904      	ldr	r1, [sp, #16]
 8017684:	448c      	add	ip, r1
 8017686:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017688:	ea4f 05b1 	mov.w	r5, r1, ror #2
    P( E, A, B, C, D, W[1]  );
 801768c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801768e:	4069      	eors	r1, r5
 8017690:	4001      	ands	r1, r0
 8017692:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017694:	4041      	eors	r1, r0
 8017696:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017698:	4418      	add	r0, r3
 801769a:	4401      	add	r1, r0
 801769c:	9805      	ldr	r0, [sp, #20]
 801769e:	4401      	add	r1, r0
 80176a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80176a2:	ea4f 0eb0 	mov.w	lr, r0, ror #2
 80176a6:	9811      	ldr	r0, [sp, #68]	; 0x44
    P( D, E, A, B, C, W[2]  );
 80176a8:	ea85 070e 	eor.w	r7, r5, lr
 80176ac:	fa99 f989 	rev.w	r9, r9
 80176b0:	ea07 070c 	and.w	r7, r7, ip
 80176b4:	4418      	add	r0, r3
    P( E, A, B, C, D, W[1]  );
 80176b6:	eb01 61fc 	add.w	r1, r1, ip, ror #27
 80176ba:	4448      	add	r0, r9
    P( D, E, A, B, C, W[2]  );
 80176bc:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 80176c0:	406f      	eors	r7, r5
 80176c2:	4407      	add	r7, r0
    P( C, D, E, A, B, W[3]  );
 80176c4:	ea8e 000c 	eor.w	r0, lr, ip
 80176c8:	ba12      	rev	r2, r2
 80176ca:	4008      	ands	r0, r1
 80176cc:	441d      	add	r5, r3
    P( D, E, A, B, C, W[2]  );
 80176ce:	eb07 67f1 	add.w	r7, r7, r1, ror #27
 80176d2:	4415      	add	r5, r2
    P( C, D, E, A, B, W[3]  );
 80176d4:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80176d8:	ea80 000e 	eor.w	r0, r0, lr
    P( B, C, D, E, A, W[4]  );
 80176dc:	ea8c 0601 	eor.w	r6, ip, r1
 80176e0:	4428      	add	r0, r5
 80176e2:	fa9a fa8a 	rev.w	sl, sl
    P( C, D, E, A, B, W[3]  );
 80176e6:	eb00 60f7 	add.w	r0, r0, r7, ror #27
    P( B, C, D, E, A, W[4]  );
 80176ea:	403e      	ands	r6, r7
 80176ec:	449e      	add	lr, r3
 80176ee:	ea4f 07b7 	mov.w	r7, r7, ror #2
 80176f2:	44d6      	add	lr, sl
    P( A, B, C, D, E, W[5]  );
 80176f4:	ea81 0507 	eor.w	r5, r1, r7
    P( B, C, D, E, A, W[4]  );
 80176f8:	ea86 060c 	eor.w	r6, r6, ip
 80176fc:	4476      	add	r6, lr
    P( A, B, C, D, E, W[5]  );
 80176fe:	4005      	ands	r5, r0
 8017700:	eb04 0e03 	add.w	lr, r4, r3
    P( B, C, D, E, A, W[4]  );
 8017704:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8017708:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( A, B, C, D, E, W[5]  );
 801770a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 801770e:	44f4      	add	ip, lr
 8017710:	404d      	eors	r5, r1
 8017712:	4465      	add	r5, ip
    P( E, A, B, C, D, W[6]  );
 8017714:	ea87 0c00 	eor.w	ip, r7, r0
 8017718:	eb04 0e03 	add.w	lr, r4, r3
 801771c:	ea0c 0c06 	and.w	ip, ip, r6
 8017720:	4471      	add	r1, lr
 8017722:	ea8c 0c07 	eor.w	ip, ip, r7
    P( A, B, C, D, E, W[5]  );
 8017726:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 801772a:	448c      	add	ip, r1
    P( E, A, B, C, D, W[6]  );
 801772c:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8017730:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017732:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, W[7]  );
 8017734:	ea80 0e06 	eor.w	lr, r0, r6
    P( E, A, B, C, D, W[6]  );
 8017738:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
 801773c:	4419      	add	r1, r3
    P( D, E, A, B, C, W[7]  );
 801773e:	ea0e 0e05 	and.w	lr, lr, r5
 8017742:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8017746:	fa98 f888 	rev.w	r8, r8
 801774a:	440f      	add	r7, r1
 801774c:	ea8e 0e00 	eor.w	lr, lr, r0
    P( C, D, E, A, B, W[8]  );
 8017750:	ea86 0105 	eor.w	r1, r6, r5
 8017754:	44be      	add	lr, r7
 8017756:	ea01 010c 	and.w	r1, r1, ip
 801775a:	eb08 0703 	add.w	r7, r8, r3
 801775e:	4438      	add	r0, r7
 8017760:	4071      	eors	r1, r6
    P( D, E, A, B, C, W[7]  );
 8017762:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
 8017766:	4401      	add	r1, r0
    P( C, D, E, A, B, W[8]  );
 8017768:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 801776c:	9808      	ldr	r0, [sp, #32]
    P( B, C, D, E, A, W[9]  );
 801776e:	ea85 070c 	eor.w	r7, r5, ip
 8017772:	4418      	add	r0, r3
 8017774:	ea07 070e 	and.w	r7, r7, lr
    P( C, D, E, A, B, W[8]  );
 8017778:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 801777c:	4406      	add	r6, r0
    P( B, C, D, E, A, W[9]  );
 801777e:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017782:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017784:	406f      	eors	r7, r5
    P( A, B, C, D, E, W[10] );
 8017786:	ea8c 0b0e 	eor.w	fp, ip, lr
 801778a:	4437      	add	r7, r6
    P( B, C, D, E, A, W[9]  );
 801778c:	eb07 67f1 	add.w	r7, r7, r1, ror #27
 8017790:	4418      	add	r0, r3
    P( A, B, C, D, E, W[10] );
 8017792:	ea0b 0b01 	and.w	fp, fp, r1
 8017796:	ea4f 01b1 	mov.w	r1, r1, ror #2
 801779a:	4405      	add	r5, r0
 801779c:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( E, A, B, C, D, W[11] );
 80177a0:	ea8e 0001 	eor.w	r0, lr, r1
 80177a4:	44ab      	add	fp, r5
 80177a6:	4038      	ands	r0, r7
 80177a8:	18e5      	adds	r5, r4, r3
    P( A, B, C, D, E, W[10] );
 80177aa:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
 80177ae:	44ac      	add	ip, r5
    P( E, A, B, C, D, W[11] );
 80177b0:	ea4f 07b7 	mov.w	r7, r7, ror #2
 80177b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80177b6:	ea80 000e 	eor.w	r0, r0, lr
 80177ba:	4460      	add	r0, ip
    P( D, E, A, B, C, W[12] );
 80177bc:	ea81 0c07 	eor.w	ip, r1, r7
 80177c0:	18e5      	adds	r5, r4, r3
 80177c2:	ea0c 0c0b 	and.w	ip, ip, fp
 80177c6:	9c01      	ldr	r4, [sp, #4]
    P( E, A, B, C, D, W[11] );
 80177c8:	eb00 60fb 	add.w	r0, r0, fp, ror #27
 80177cc:	44ae      	add	lr, r5
    P( D, E, A, B, C, W[12] );
 80177ce:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 80177d2:	ea8c 0c01 	eor.w	ip, ip, r1
 80177d6:	44f4      	add	ip, lr
    P( C, D, E, A, B, W[13] );
 80177d8:	ea87 0e0b 	eor.w	lr, r7, fp
 80177dc:	18e5      	adds	r5, r4, r3
 80177de:	ea0e 0e00 	and.w	lr, lr, r0
 80177e2:	4429      	add	r1, r5
 80177e4:	ea8e 0e07 	eor.w	lr, lr, r7
 80177e8:	448e      	add	lr, r1
 80177ea:	9902      	ldr	r1, [sp, #8]
 80177ec:	4419      	add	r1, r3
    P( D, E, A, B, C, W[12] );
 80177ee:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
 80177f2:	440f      	add	r7, r1
    P( C, D, E, A, B, W[13] );
 80177f4:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80177f8:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, W[14] );
 80177fa:	ea8b 0600 	eor.w	r6, fp, r0
 80177fe:	4419      	add	r1, r3
 8017800:	ea06 060c 	and.w	r6, r6, ip
 8017804:	ea86 060b 	eor.w	r6, r6, fp
 8017808:	448b      	add	fp, r1
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 801780a:	9904      	ldr	r1, [sp, #16]
    P( C, D, E, A, B, W[13] );
 801780c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
 8017810:	443e      	add	r6, r7
    P( B, C, D, E, A, W[14] );
 8017812:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( E, A, B, C, D, R(16) );
 8017816:	ea81 0709 	eor.w	r7, r1, r9
    P( A, B, C, D, E, W[15] );
 801781a:	ea80 050c 	eor.w	r5, r0, ip
    P( E, A, B, C, D, R(16) );
 801781e:	ea87 0708 	eor.w	r7, r7, r8
    P( B, C, D, E, A, W[14] );
 8017822:	eb06 66fe 	add.w	r6, r6, lr, ror #27
    P( E, A, B, C, D, R(16) );
 8017826:	4067      	eors	r7, r4
    P( A, B, C, D, E, W[15] );
 8017828:	ea05 050e 	and.w	r5, r5, lr
 801782c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( E, A, B, C, D, R(16) );
 8017830:	ea4f 71f7 	mov.w	r1, r7, ror #31
 8017834:	ea8c 040e 	eor.w	r4, ip, lr
 8017838:	9104      	str	r1, [sp, #16]
 801783a:	4034      	ands	r4, r6
 801783c:	4419      	add	r1, r3
    P( A, B, C, D, E, W[15] );
 801783e:	4045      	eors	r5, r0
    P( E, A, B, C, D, R(16) );
 8017840:	ea84 040c 	eor.w	r4, r4, ip
 8017844:	4408      	add	r0, r1
    P( D, E, A, B, C, R(17) );
 8017846:	9905      	ldr	r1, [sp, #20]
 8017848:	4404      	add	r4, r0
 801784a:	9808      	ldr	r0, [sp, #32]
 801784c:	4051      	eors	r1, r2
 801784e:	4041      	eors	r1, r0
 8017850:	9802      	ldr	r0, [sp, #8]
 8017852:	4041      	eors	r1, r0
 8017854:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8017858:	9105      	str	r1, [sp, #20]
 801785a:	4419      	add	r1, r3
 801785c:	448c      	add	ip, r1
    P( C, D, E, A, B, R(18) );
 801785e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017860:	ea89 090a 	eor.w	r9, r9, sl
 8017864:	ea89 0901 	eor.w	r9, r9, r1
 8017868:	9903      	ldr	r1, [sp, #12]
 801786a:	ea89 0901 	eor.w	r9, r9, r1
 801786e:	ea4f 71f9 	mov.w	r1, r9, ror #31
 8017872:	9106      	str	r1, [sp, #24]
 8017874:	445d      	add	r5, fp
    P( A, B, C, D, E, W[15] );
 8017876:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 801787a:	9f06      	ldr	r7, [sp, #24]
    P( E, A, B, C, D, R(16) );
 801787c:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( D, E, A, B, C, R(17) );
 8017880:	ea8e 0006 	eor.w	r0, lr, r6
 8017884:	441f      	add	r7, r3
 8017886:	4028      	ands	r0, r5
 8017888:	ea80 000e 	eor.w	r0, r0, lr
 801788c:	44be      	add	lr, r7
    P( B, C, D, E, A, R(19) );
 801788e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017890:	407a      	eors	r2, r7
 8017892:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(16) );
 8017894:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( B, C, D, E, A, R(19) );
 8017898:	407a      	eors	r2, r7
    P( D, E, A, B, C, R(17) );
 801789a:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(19) );
 801789e:	9f04      	ldr	r7, [sp, #16]
    P( C, D, E, A, B, R(18) );
 80178a0:	ea86 0105 	eor.w	r1, r6, r5
 80178a4:	4460      	add	r0, ip
    P( D, E, A, B, C, R(17) );
 80178a6:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( C, D, E, A, B, R(18) );
 80178aa:	4021      	ands	r1, r4
    P( B, C, D, E, A, R(19) );
 80178ac:	407a      	eors	r2, r7
    P( C, D, E, A, B, R(18) );
 80178ae:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(19) );
 80178b2:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80178b6:	ea85 0704 	eor.w	r7, r5, r4
 80178ba:	4007      	ands	r7, r0
 80178bc:	4413      	add	r3, r2
 80178be:	4433      	add	r3, r6
 80178c0:	406f      	eors	r7, r5
 80178c2:	441f      	add	r7, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80178c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
 80178c6:	4071      	eors	r1, r6
    P( A, B, C, D, E, R(20) );
 80178c8:	ea8a 0603 	eor.w	r6, sl, r3
 80178cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178ce:	405e      	eors	r6, r3
 80178d0:	9b05      	ldr	r3, [sp, #20]
 80178d2:	405e      	eors	r6, r3
 80178d4:	ea4f 73f6 	mov.w	r3, r6, ror #31
 80178d8:	9307      	str	r3, [sp, #28]
 80178da:	9e07      	ldr	r6, [sp, #28]
 80178dc:	4b47      	ldr	r3, [pc, #284]	; (80179fc <mbedtls_sha1_process+0x42c>)
 80178de:	4471      	add	r1, lr
    P( C, D, E, A, B, R(18) );
 80178e0:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( B, C, D, E, A, R(19) );
 80178e4:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80178e8:	eb06 0c03 	add.w	ip, r6, r3
    P( A, B, C, D, E, R(20) );
 80178ec:	ea84 0b00 	eor.w	fp, r4, r0
 80178f0:	4465      	add	r5, ip
 80178f2:	ea8b 0b01 	eor.w	fp, fp, r1
 80178f6:	44ab      	add	fp, r5
    P( E, A, B, C, D, R(21) );
 80178f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178fa:	462e      	mov	r6, r5
 80178fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80178fe:	4075      	eors	r5, r6
 8017900:	9e01      	ldr	r6, [sp, #4]
 8017902:	4075      	eors	r5, r6
 8017904:	9e06      	ldr	r6, [sp, #24]
 8017906:	4075      	eors	r5, r6
 8017908:	ea4f 75f5 	mov.w	r5, r5, ror #31
    P( B, C, D, E, A, R(19) );
 801790c:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( A, B, C, D, E, R(20) );
 8017910:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8017914:	eb05 0c03 	add.w	ip, r5, r3
    P( E, A, B, C, D, R(21) );
 8017918:	ea80 0a01 	eor.w	sl, r0, r1
 801791c:	4464      	add	r4, ip
 801791e:	ea8a 0a07 	eor.w	sl, sl, r7
 8017922:	44a2      	add	sl, r4
    P( D, E, A, B, C, R(22) );
 8017924:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017926:	9e02      	ldr	r6, [sp, #8]
 8017928:	ea84 0408 	eor.w	r4, r4, r8
 801792c:	4074      	eors	r4, r6
 801792e:	4054      	eors	r4, r2
 8017930:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( A, B, C, D, E, R(20) );
 8017934:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
    P( E, A, B, C, D, R(21) );
 8017938:	ea4f 07b7 	mov.w	r7, r7, ror #2
 801793c:	eb04 0e03 	add.w	lr, r4, r3
    P( D, E, A, B, C, R(22) );
 8017940:	ea81 0c07 	eor.w	ip, r1, r7
 8017944:	4470      	add	r0, lr
 8017946:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( C, D, E, A, B, R(23) );
 801794a:	9e08      	ldr	r6, [sp, #32]
 801794c:	4484      	add	ip, r0
 801794e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017950:	4070      	eors	r0, r6
 8017952:	9e03      	ldr	r6, [sp, #12]
 8017954:	4070      	eors	r0, r6
 8017956:	9e07      	ldr	r6, [sp, #28]
 8017958:	4070      	eors	r0, r6
 801795a:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( E, A, B, C, D, R(21) );
 801795e:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( D, E, A, B, C, R(22) );
 8017962:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8017966:	eb00 0e03 	add.w	lr, r0, r3
    P( C, D, E, A, B, R(23) );
 801796a:	ea87 090b 	eor.w	r9, r7, fp
 801796e:	4471      	add	r1, lr
 8017970:	ea89 090a 	eor.w	r9, r9, sl
 8017974:	4489      	add	r9, r1
    P( B, C, D, E, A, R(24) );
 8017976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017978:	9e04      	ldr	r6, [sp, #16]
 801797a:	ea88 0101 	eor.w	r1, r8, r1
 801797e:	4071      	eors	r1, r6
 8017980:	4069      	eors	r1, r5
 8017982:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( D, E, A, B, C, R(22) );
 8017986:	eb0c 6cfa 	add.w	ip, ip, sl, ror #27
    P( C, D, E, A, B, R(23) );
 801798a:	ea4f 0aba 	mov.w	sl, sl, ror #2
 801798e:	eb01 0e03 	add.w	lr, r1, r3
    P( B, C, D, E, A, R(24) );
 8017992:	ea8b 080a 	eor.w	r8, fp, sl
 8017996:	4477      	add	r7, lr
 8017998:	ea88 080c 	eor.w	r8, r8, ip
    P( A, B, C, D, E, R(25) );
 801799c:	9e08      	ldr	r6, [sp, #32]
 801799e:	44b8      	add	r8, r7
 80179a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80179a2:	4077      	eors	r7, r6
 80179a4:	9e05      	ldr	r6, [sp, #20]
 80179a6:	4077      	eors	r7, r6
 80179a8:	4067      	eors	r7, r4
 80179aa:	ea4f 76f7 	mov.w	r6, r7, ror #31
 80179ae:	9608      	str	r6, [sp, #32]
 80179b0:	eb06 0e03 	add.w	lr, r6, r3
    P( E, A, B, C, D, R(26) );
 80179b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80179b6:	44f3      	add	fp, lr
 80179b8:	46b6      	mov	lr, r6
 80179ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80179bc:	ea8e 0e06 	eor.w	lr, lr, r6
 80179c0:	9e06      	ldr	r6, [sp, #24]
 80179c2:	ea8e 0e06 	eor.w	lr, lr, r6
 80179c6:	ea8e 0e00 	eor.w	lr, lr, r0
 80179ca:	ea4f 76fe 	mov.w	r6, lr, ror #31
 80179ce:	9609      	str	r6, [sp, #36]	; 0x24
 80179d0:	eb06 0e03 	add.w	lr, r6, r3
    P( D, E, A, B, C, R(27) );
 80179d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(23) );
 80179d6:	eb09 69fc 	add.w	r9, r9, ip, ror #27
    P( B, C, D, E, A, R(24) );
 80179da:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(25) );
 80179de:	ea8a 070c 	eor.w	r7, sl, ip
 80179e2:	44f2      	add	sl, lr
    P( D, E, A, B, C, R(27) );
 80179e4:	46b6      	mov	lr, r6
 80179e6:	9e01      	ldr	r6, [sp, #4]
 80179e8:	ea8e 0e06 	eor.w	lr, lr, r6
    P( B, C, D, E, A, R(24) );
 80179ec:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( A, B, C, D, E, R(25) );
 80179f0:	ea87 0709 	eor.w	r7, r7, r9
 80179f4:	e004      	b.n	8017a00 <mbedtls_sha1_process+0x430>
 80179f6:	bf00      	nop
 80179f8:	5a827999 	.word	0x5a827999
 80179fc:	6ed9eba1 	.word	0x6ed9eba1
    P( D, E, A, B, C, R(27) );
 8017a00:	ea8e 0e02 	eor.w	lr, lr, r2
    P( A, B, C, D, E, R(25) );
 8017a04:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(27) );
 8017a08:	ea8e 0e01 	eor.w	lr, lr, r1
 8017a0c:	445f      	add	r7, fp
    P( E, A, B, C, D, R(26) );
 8017a0e:	ea8c 0b09 	eor.w	fp, ip, r9
    P( A, B, C, D, E, R(25) );
 8017a12:	eb07 67f8 	add.w	r7, r7, r8, ror #27
    P( D, E, A, B, C, R(27) );
 8017a16:	ea4f 76fe 	mov.w	r6, lr, ror #31
    P( E, A, B, C, D, R(26) );
 8017a1a:	ea8b 0b08 	eor.w	fp, fp, r8
 8017a1e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(27) );
 8017a22:	960a      	str	r6, [sp, #40]	; 0x28
 8017a24:	eb06 0e03 	add.w	lr, r6, r3
 8017a28:	44d3      	add	fp, sl
    P( C, D, E, A, B, R(28) );
 8017a2a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(27) );
 8017a2c:	ea89 0a08 	eor.w	sl, r9, r8
 8017a30:	44f4      	add	ip, lr
 8017a32:	ea8a 0a07 	eor.w	sl, sl, r7
 8017a36:	44e2      	add	sl, ip
    P( C, D, E, A, B, R(28) );
 8017a38:	46b4      	mov	ip, r6
 8017a3a:	9e02      	ldr	r6, [sp, #8]
 8017a3c:	ea8c 0c06 	eor.w	ip, ip, r6
 8017a40:	9e07      	ldr	r6, [sp, #28]
 8017a42:	ea8c 0c06 	eor.w	ip, ip, r6
 8017a46:	9e08      	ldr	r6, [sp, #32]
 8017a48:	ea8c 0c06 	eor.w	ip, ip, r6
    P( E, A, B, C, D, R(26) );
 8017a4c:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
    P( C, D, E, A, B, R(28) );
 8017a50:	ea4f 76fc 	mov.w	r6, ip, ror #31
    P( D, E, A, B, C, R(27) );
 8017a54:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(28) );
 8017a58:	960b      	str	r6, [sp, #44]	; 0x2c
 8017a5a:	eb06 0e03 	add.w	lr, r6, r3
 8017a5e:	ea88 0c07 	eor.w	ip, r8, r7
    P( B, C, D, E, A, R(29) );
 8017a62:	9e01      	ldr	r6, [sp, #4]
    P( C, D, E, A, B, R(28) );
 8017a64:	ea8c 0c0b 	eor.w	ip, ip, fp
 8017a68:	44f1      	add	r9, lr
 8017a6a:	44e1      	add	r9, ip
    P( B, C, D, E, A, R(29) );
 8017a6c:	46b4      	mov	ip, r6
 8017a6e:	9e03      	ldr	r6, [sp, #12]
 8017a70:	ea8c 0c06 	eor.w	ip, ip, r6
 8017a74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017a76:	ea8c 0c05 	eor.w	ip, ip, r5
 8017a7a:	ea8c 0c06 	eor.w	ip, ip, r6
 8017a7e:	ea4f 76fc 	mov.w	r6, ip, ror #31
 8017a82:	9601      	str	r6, [sp, #4]
 8017a84:	eb06 0c03 	add.w	ip, r6, r3
    P( A, B, C, D, E, R(30) );
 8017a88:	9e02      	ldr	r6, [sp, #8]
 8017a8a:	44e0      	add	r8, ip
 8017a8c:	46b4      	mov	ip, r6
 8017a8e:	9e04      	ldr	r6, [sp, #16]
 8017a90:	ea8c 0c06 	eor.w	ip, ip, r6
 8017a94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
 8017a96:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( A, B, C, D, E, R(30) );
 8017a9a:	ea8c 0c04 	eor.w	ip, ip, r4
    P( C, D, E, A, B, R(28) );
 8017a9e:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(29) );
 8017aa2:	ea87 0e0b 	eor.w	lr, r7, fp
    P( A, B, C, D, E, R(30) );
 8017aa6:	ea8c 0c06 	eor.w	ip, ip, r6
    P( C, D, E, A, B, R(28) );
 8017aaa:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( A, B, C, D, E, R(30) );
 8017aae:	ea4f 76fc 	mov.w	r6, ip, ror #31
    P( B, C, D, E, A, R(29) );
 8017ab2:	ea8e 0e0a 	eor.w	lr, lr, sl
 8017ab6:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8017aba:	eb06 0c03 	add.w	ip, r6, r3
 8017abe:	44c6      	add	lr, r8
    P( A, B, C, D, E, R(30) );
 8017ac0:	ea8b 080a 	eor.w	r8, fp, sl
 8017ac4:	4467      	add	r7, ip
 8017ac6:	ea88 0809 	eor.w	r8, r8, r9
 8017aca:	9602      	str	r6, [sp, #8]
 8017acc:	44b8      	add	r8, r7
    P( E, A, B, C, D, R(31) );
 8017ace:	9e03      	ldr	r6, [sp, #12]
 8017ad0:	9f05      	ldr	r7, [sp, #20]
 8017ad2:	4077      	eors	r7, r6
 8017ad4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017ad6:	4047      	eors	r7, r0
 8017ad8:	4077      	eors	r7, r6
 8017ada:	ea4f 76f7 	mov.w	r6, r7, ror #31
 8017ade:	18f7      	adds	r7, r6, r3
 8017ae0:	9603      	str	r6, [sp, #12]
 8017ae2:	44bb      	add	fp, r7
    P( D, E, A, B, C, R(32) );
 8017ae4:	9e04      	ldr	r6, [sp, #16]
 8017ae6:	9f06      	ldr	r7, [sp, #24]
 8017ae8:	4077      	eors	r7, r6
 8017aea:	9e01      	ldr	r6, [sp, #4]
    P( B, C, D, E, A, R(29) );
 8017aec:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
    P( D, E, A, B, C, R(32) );
 8017af0:	404f      	eors	r7, r1
    P( A, B, C, D, E, R(30) );
 8017af2:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(31) );
 8017af6:	ea8a 0c09 	eor.w	ip, sl, r9
    P( D, E, A, B, C, R(32) );
 8017afa:	4077      	eors	r7, r6
    P( A, B, C, D, E, R(30) );
 8017afc:	eb08 68fe 	add.w	r8, r8, lr, ror #27
    P( D, E, A, B, C, R(32) );
 8017b00:	ea4f 76f7 	mov.w	r6, r7, ror #31
    P( E, A, B, C, D, R(31) );
 8017b04:	ea8c 0c0e 	eor.w	ip, ip, lr
 8017b08:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(32) );
 8017b0c:	ea89 070e 	eor.w	r7, r9, lr
 8017b10:	44dc      	add	ip, fp
 8017b12:	eb06 0b03 	add.w	fp, r6, r3
 8017b16:	44da      	add	sl, fp
 8017b18:	ea87 0708 	eor.w	r7, r7, r8
    P( E, A, B, C, D, R(31) );
 8017b1c:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
 8017b20:	4457      	add	r7, sl
    P( D, E, A, B, C, R(32) );
 8017b22:	9604      	str	r6, [sp, #16]
 8017b24:	eb07 66fc 	add.w	r6, r7, ip, ror #27
 8017b28:	960c      	str	r6, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(33) );
 8017b2a:	9e05      	ldr	r6, [sp, #20]
 8017b2c:	ea86 0a02 	eor.w	sl, r6, r2
 8017b30:	9e08      	ldr	r6, [sp, #32]
 8017b32:	ea8a 0a06 	eor.w	sl, sl, r6
 8017b36:	9e02      	ldr	r6, [sp, #8]
 8017b38:	ea8a 0a06 	eor.w	sl, sl, r6
    P( D, E, A, B, C, R(32) );
 8017b3c:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(33) );
 8017b40:	ea4f 76fa 	mov.w	r6, sl, ror #31
 8017b44:	eb06 0a03 	add.w	sl, r6, r3
 8017b48:	ea8e 0b08 	eor.w	fp, lr, r8
 8017b4c:	9605      	str	r6, [sp, #20]
 8017b4e:	44d1      	add	r9, sl
 8017b50:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017b52:	ea8b 0b0c 	eor.w	fp, fp, ip
 8017b56:	44cb      	add	fp, r9
 8017b58:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( B, C, D, E, A, R(34) );
 8017b5c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8017b60:	ea86 0907 	eor.w	r9, r6, r7
 8017b64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017b66:	ea89 0906 	eor.w	r9, r9, r6
 8017b6a:	9e03      	ldr	r6, [sp, #12]
 8017b6c:	ea89 0906 	eor.w	r9, r9, r6
 8017b70:	ea4f 76f9 	mov.w	r6, r9, ror #31
 8017b74:	9606      	str	r6, [sp, #24]
    P( C, D, E, A, B, R(33) );
 8017b76:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( B, C, D, E, A, R(34) );
 8017b7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017b7c:	ea88 0a0c 	eor.w	sl, r8, ip
 8017b80:	ea8a 0a06 	eor.w	sl, sl, r6
 8017b84:	9e06      	ldr	r6, [sp, #24]
 8017b86:	eb06 0903 	add.w	r9, r6, r3
 8017b8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017b8c:	ea4f 07b6 	mov.w	r7, r6, ror #2
    P( A, B, C, D, E, R(35) );
 8017b90:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017b92:	406a      	eors	r2, r5
 8017b94:	4072      	eors	r2, r6
 8017b96:	9e04      	ldr	r6, [sp, #16]
 8017b98:	4072      	eors	r2, r6
 8017b9a:	44ce      	add	lr, r9
 8017b9c:	ea4f 79f2 	mov.w	r9, r2, ror #31
 8017ba0:	44f2      	add	sl, lr
 8017ba2:	ea8c 0207 	eor.w	r2, ip, r7
 8017ba6:	eb09 0e03 	add.w	lr, r9, r3
    P( E, A, B, C, D, R(36) );
 8017baa:	9e07      	ldr	r6, [sp, #28]
    P( A, B, C, D, E, R(35) );
 8017bac:	ea82 020b 	eor.w	r2, r2, fp
 8017bb0:	44f0      	add	r8, lr
 8017bb2:	4490      	add	r8, r2
    P( E, A, B, C, D, R(36) );
 8017bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017bb6:	4066      	eors	r6, r4
 8017bb8:	4056      	eors	r6, r2
 8017bba:	9a05      	ldr	r2, [sp, #20]
 8017bbc:	4056      	eors	r6, r2
 8017bbe:	ea4f 72f6 	mov.w	r2, r6, ror #31
 8017bc2:	9207      	str	r2, [sp, #28]
 8017bc4:	eb02 0e03 	add.w	lr, r2, r3
    P( D, E, A, B, C, R(37) );
 8017bc8:	9a01      	ldr	r2, [sp, #4]
 8017bca:	4045      	eors	r5, r0
    P( B, C, D, E, A, R(34) );
 8017bcc:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( D, E, A, B, C, R(37) );
 8017bd0:	4055      	eors	r5, r2
    P( A, B, C, D, E, R(35) );
 8017bd2:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( D, E, A, B, C, R(37) );
 8017bd6:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, R(36) );
 8017bd8:	ea87 060b 	eor.w	r6, r7, fp
 8017bdc:	ea86 060a 	eor.w	r6, r6, sl
 8017be0:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(37) );
 8017be2:	4055      	eors	r5, r2
    P( A, B, C, D, E, R(35) );
 8017be4:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( D, E, A, B, C, R(37) );
 8017be8:	ea4f 72f5 	mov.w	r2, r5, ror #31
    P( E, A, B, C, D, R(36) );
 8017bec:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8017bf0:	44b4      	add	ip, r6
 8017bf2:	eb0c 66f8 	add.w	r6, ip, r8, ror #27
    P( D, E, A, B, C, R(37) );
 8017bf6:	ea8b 050a 	eor.w	r5, fp, sl
 8017bfa:	eb02 0c03 	add.w	ip, r2, r3
 8017bfe:	ea85 0508 	eor.w	r5, r5, r8
 8017c02:	4467      	add	r7, ip
 8017c04:	442f      	add	r7, r5
 8017c06:	eb07 65f6 	add.w	r5, r7, r6, ror #27
    P( C, D, E, A, B, R(38) );
 8017c0a:	9f02      	ldr	r7, [sp, #8]
    P( D, E, A, B, C, R(37) );
 8017c0c:	920c      	str	r2, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(38) );
 8017c0e:	404c      	eors	r4, r1
 8017c10:	407c      	eors	r4, r7
 8017c12:	ea84 0409 	eor.w	r4, r4, r9
 8017c16:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8017c1a:	940d      	str	r4, [sp, #52]	; 0x34
 8017c1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017c1e:	441f      	add	r7, r3
 8017c20:	44bb      	add	fp, r7
    P( B, C, D, E, A, R(39) );
 8017c22:	9f08      	ldr	r7, [sp, #32]
 8017c24:	4078      	eors	r0, r7
 8017c26:	9f03      	ldr	r7, [sp, #12]
 8017c28:	4078      	eors	r0, r7
 8017c2a:	9f07      	ldr	r7, [sp, #28]
 8017c2c:	4078      	eors	r0, r7
 8017c2e:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8017c32:	900e      	str	r0, [sp, #56]	; 0x38
 8017c34:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(37) );
 8017c36:	ea4f 02b8 	mov.w	r2, r8, ror #2
 8017c3a:	443b      	add	r3, r7
    P( C, D, E, A, B, R(38) );
 8017c3c:	ea8a 0402 	eor.w	r4, sl, r2
 8017c40:	449a      	add	sl, r3
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8017c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c44:	4059      	eors	r1, r3
 8017c46:	9b04      	ldr	r3, [sp, #16]
 8017c48:	4059      	eors	r1, r3
 8017c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c4c:	4059      	eors	r1, r3
 8017c4e:	ea4f 73f1 	mov.w	r3, r1, ror #31
 8017c52:	930f      	str	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(38) );
 8017c54:	4074      	eors	r4, r6
 8017c56:	4bd7      	ldr	r3, [pc, #860]	; (8017fb4 <mbedtls_sha1_process+0x9e4>)
 8017c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017c5a:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(39) );
 8017c5e:	ea82 0006 	eor.w	r0, r2, r6
 8017c62:	44a3      	add	fp, r4
    P( C, D, E, A, B, R(38) );
 8017c64:	eb0b 64f5 	add.w	r4, fp, r5, ror #27
    P( B, C, D, E, A, R(39) );
 8017c68:	4068      	eors	r0, r5
 8017c6a:	4419      	add	r1, r3
 8017c6c:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8017c70:	4482      	add	sl, r0
 8017c72:	440a      	add	r2, r1
    P( A, B, C, D, E, R(40) );
 8017c74:	ea44 0105 	orr.w	r1, r4, r5
    P( B, C, D, E, A, R(39) );
 8017c78:	eb0a 60f4 	add.w	r0, sl, r4, ror #27
    P( A, B, C, D, E, R(40) );
 8017c7c:	ea04 0705 	and.w	r7, r4, r5
 8017c80:	4031      	ands	r1, r6
 8017c82:	4339      	orrs	r1, r7
 8017c84:	eb02 62f0 	add.w	r2, r2, r0, ror #27
 8017c88:	440a      	add	r2, r1
    P( E, A, B, C, D, R(41) );
 8017c8a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017c8c:	9908      	ldr	r1, [sp, #32]
 8017c8e:	404f      	eors	r7, r1
 8017c90:	9905      	ldr	r1, [sp, #20]
 8017c92:	404f      	eors	r7, r1
 8017c94:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(40) );
 8017c96:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(41) );
 8017c9a:	404f      	eors	r7, r1
 8017c9c:	ea40 0c04 	orr.w	ip, r0, r4
 8017ca0:	ea4f 71f7 	mov.w	r1, r7, ror #31
 8017ca4:	9108      	str	r1, [sp, #32]
 8017ca6:	ea0c 0105 	and.w	r1, ip, r5
 8017caa:	ea00 0c04 	and.w	ip, r0, r4
 8017cae:	ea41 0c0c 	orr.w	ip, r1, ip
 8017cb2:	9908      	ldr	r1, [sp, #32]
 8017cb4:	4419      	add	r1, r3
 8017cb6:	440e      	add	r6, r1
 8017cb8:	4466      	add	r6, ip
 8017cba:	eb06 6cf2 	add.w	ip, r6, r2, ror #27
    P( D, E, A, B, C, R(42) );
 8017cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017cc0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017cc2:	ea81 0e06 	eor.w	lr, r1, r6
 8017cc6:	9906      	ldr	r1, [sp, #24]
    P( C, D, E, A, B, R(43) );
 8017cc8:	9e01      	ldr	r6, [sp, #4]
    P( D, E, A, B, C, R(42) );
 8017cca:	ea8e 0e01 	eor.w	lr, lr, r1
 8017cce:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017cd0:	ea8e 0e01 	eor.w	lr, lr, r1
 8017cd4:	ea4f 71fe 	mov.w	r1, lr, ror #31
    P( E, A, B, C, D, R(41) );
 8017cd8:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017cdc:	18cf      	adds	r7, r1, r3
 8017cde:	443d      	add	r5, r7
    P( D, E, A, B, C, R(42) );
 8017ce0:	ea42 0700 	orr.w	r7, r2, r0
 8017ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8017ce6:	4027      	ands	r7, r4
 8017ce8:	ea02 0100 	and.w	r1, r2, r0
 8017cec:	430f      	orrs	r7, r1
    P( C, D, E, A, B, R(43) );
 8017cee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017cf0:	ea81 0e06 	eor.w	lr, r1, r6
 8017cf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017cf6:	ea8e 0e09 	eor.w	lr, lr, r9
    P( D, E, A, B, C, R(42) );
 8017cfa:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( C, D, E, A, B, R(43) );
 8017cfe:	ea8e 0e01 	eor.w	lr, lr, r1
 8017d02:	ea4c 0602 	orr.w	r6, ip, r2
 8017d06:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8017d0a:	910a      	str	r1, [sp, #40]	; 0x28
 8017d0c:	ea06 0100 	and.w	r1, r6, r0
 8017d10:	ea0c 0602 	and.w	r6, ip, r2
 8017d14:	430e      	orrs	r6, r1
 8017d16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017d18:	4419      	add	r1, r3
 8017d1a:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8017d1e:	440c      	add	r4, r1
    P( D, E, A, B, C, R(42) );
 8017d20:	443d      	add	r5, r7
 8017d22:	4434      	add	r4, r6
    P( C, D, E, A, B, R(43) );
 8017d24:	eb04 66f5 	add.w	r6, r4, r5, ror #27
    P( B, C, D, E, A, R(44) );
 8017d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d2a:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(43) );
 8017d2c:	ea4f 0ebc 	mov.w	lr, ip, ror #2
    P( B, C, D, E, A, R(44) );
 8017d30:	ea81 0c04 	eor.w	ip, r1, r4
 8017d34:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(45) );
 8017d36:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(44) );
 8017d38:	ea8c 0c01 	eor.w	ip, ip, r1
 8017d3c:	9908      	ldr	r1, [sp, #32]
 8017d3e:	ea8c 0c01 	eor.w	ip, ip, r1
 8017d42:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8017d46:	18cf      	adds	r7, r1, r3
 8017d48:	4438      	add	r0, r7
 8017d4a:	ea45 070e 	orr.w	r7, r5, lr
 8017d4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017d50:	4017      	ands	r7, r2
 8017d52:	ea05 010e 	and.w	r1, r5, lr
 8017d56:	430f      	orrs	r7, r1
    P( A, B, C, D, E, R(45) );
 8017d58:	9901      	ldr	r1, [sp, #4]
 8017d5a:	ea81 0c04 	eor.w	ip, r1, r4
 8017d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d60:	ea8c 0c01 	eor.w	ip, ip, r1
 8017d64:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(44) );
 8017d66:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( A, B, C, D, E, R(45) );
 8017d6a:	ea8c 0c01 	eor.w	ip, ip, r1
 8017d6e:	ea46 0a05 	orr.w	sl, r6, r5
 8017d72:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8017d76:	9101      	str	r1, [sp, #4]
 8017d78:	ea0a 010e 	and.w	r1, sl, lr
 8017d7c:	ea06 0a05 	and.w	sl, r6, r5
 8017d80:	ea41 0a0a 	orr.w	sl, r1, sl
 8017d84:	9901      	ldr	r1, [sp, #4]
 8017d86:	eb00 60f6 	add.w	r0, r0, r6, ror #27
    P( B, C, D, E, A, R(44) );
 8017d8a:	4438      	add	r0, r7
 8017d8c:	18cf      	adds	r7, r1, r3
 8017d8e:	443a      	add	r2, r7
 8017d90:	4452      	add	r2, sl
    P( A, B, C, D, E, R(45) );
 8017d92:	eb02 6af0 	add.w	sl, r2, r0, ror #27
    P( E, A, B, C, D, R(46) );
 8017d96:	9a02      	ldr	r2, [sp, #8]
 8017d98:	9904      	ldr	r1, [sp, #16]
 8017d9a:	4051      	eors	r1, r2
 8017d9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d9e:	4051      	eors	r1, r2
 8017da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017da2:	4051      	eors	r1, r2
 8017da4:	ea4f 72f1 	mov.w	r2, r1, ror #31
 8017da8:	9202      	str	r2, [sp, #8]
    P( D, E, A, B, C, R(47) );
 8017daa:	9905      	ldr	r1, [sp, #20]
 8017dac:	eb02 0c03 	add.w	ip, r2, r3
 8017db0:	9a03      	ldr	r2, [sp, #12]
 8017db2:	404a      	eors	r2, r1
 8017db4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017db6:	404a      	eors	r2, r1
 8017db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(45) );
 8017dba:	ea4f 04b6 	mov.w	r4, r6, ror #2
 8017dbe:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(47) );
 8017dc0:	404a      	eors	r2, r1
 8017dc2:	eb0c 6efa 	add.w	lr, ip, sl, ror #27
    P( E, A, B, C, D, R(46) );
 8017dc6:	ea40 0604 	orr.w	r6, r0, r4
 8017dca:	ea00 0c04 	and.w	ip, r0, r4
    P( D, E, A, B, C, R(47) );
 8017dce:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( E, A, B, C, D, R(46) );
 8017dd2:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 8017dd6:	9203      	str	r2, [sp, #12]
 8017dd8:	ea4a 0200 	orr.w	r2, sl, r0
 8017ddc:	ea02 0104 	and.w	r1, r2, r4
 8017de0:	ea0a 0200 	and.w	r2, sl, r0
 8017de4:	430a      	orrs	r2, r1
 8017de6:	9903      	ldr	r1, [sp, #12]
 8017de8:	4419      	add	r1, r3
    P( E, A, B, C, D, R(46) );
 8017dea:	402e      	ands	r6, r5
 8017dec:	440d      	add	r5, r1
 8017dee:	4415      	add	r5, r2
    P( C, D, E, A, B, R(48) );
 8017df0:	9906      	ldr	r1, [sp, #24]
 8017df2:	9a04      	ldr	r2, [sp, #16]
 8017df4:	4051      	eors	r1, r2
 8017df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017df8:	4051      	eors	r1, r2
 8017dfa:	9a01      	ldr	r2, [sp, #4]
 8017dfc:	4051      	eors	r1, r2
 8017dfe:	ea4f 72f1 	mov.w	r2, r1, ror #31
    P( E, A, B, C, D, R(46) );
 8017e02:	ea46 060c 	orr.w	r6, r6, ip
 8017e06:	eb06 0c0e 	add.w	ip, r6, lr
    P( D, E, A, B, C, R(47) );
 8017e0a:	ea4f 0eba 	mov.w	lr, sl, ror #2
 8017e0e:	18d6      	adds	r6, r2, r3
 8017e10:	4426      	add	r6, r4
    P( C, D, E, A, B, R(48) );
 8017e12:	ea4c 040e 	orr.w	r4, ip, lr
 8017e16:	9204      	str	r2, [sp, #16]
 8017e18:	4004      	ands	r4, r0
 8017e1a:	ea0c 020e 	and.w	r2, ip, lr
 8017e1e:	4314      	orrs	r4, r2
    P( B, C, D, E, A, R(49) );
 8017e20:	9a05      	ldr	r2, [sp, #20]
 8017e22:	9908      	ldr	r1, [sp, #32]
 8017e24:	ea82 0209 	eor.w	r2, r2, r9
    P( D, E, A, B, C, R(47) );
 8017e28:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( B, C, D, E, A, R(49) );
 8017e2c:	404a      	eors	r2, r1
 8017e2e:	9902      	ldr	r1, [sp, #8]
 8017e30:	eb06 66f5 	add.w	r6, r6, r5, ror #27
    P( C, D, E, A, B, R(48) );
 8017e34:	4434      	add	r4, r6
    P( B, C, D, E, A, R(49) );
 8017e36:	404a      	eors	r2, r1
    P( C, D, E, A, B, R(48) );
 8017e38:	ea4f 06bc 	mov.w	r6, ip, ror #2
    P( B, C, D, E, A, R(49) );
 8017e3c:	ea45 0806 	orr.w	r8, r5, r6
 8017e40:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8017e44:	9205      	str	r2, [sp, #20]
 8017e46:	ea08 020e 	and.w	r2, r8, lr
 8017e4a:	ea05 0806 	and.w	r8, r5, r6
 8017e4e:	ea42 0808 	orr.w	r8, r2, r8
 8017e52:	9a05      	ldr	r2, [sp, #20]
 8017e54:	441a      	add	r2, r3
 8017e56:	4410      	add	r0, r2
    P( A, B, C, D, E, R(50) );
 8017e58:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8017e5c:	404a      	eors	r2, r1
 8017e5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e60:	404a      	eors	r2, r1
 8017e62:	9903      	ldr	r1, [sp, #12]
 8017e64:	404a      	eors	r2, r1
 8017e66:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8017e6a:	9206      	str	r2, [sp, #24]
 8017e6c:	4480      	add	r8, r0
 8017e6e:	441a      	add	r2, r3
    P( B, C, D, E, A, R(49) );
 8017e70:	eb08 68f4 	add.w	r8, r8, r4, ror #27
 8017e74:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8017e78:	4496      	add	lr, r2
 8017e7a:	eb0e 62f8 	add.w	r2, lr, r8, ror #27
    P( A, B, C, D, E, R(50) );
 8017e7e:	ea44 0e05 	orr.w	lr, r4, r5
 8017e82:	ea04 0105 	and.w	r1, r4, r5
 8017e86:	ea0e 0e06 	and.w	lr, lr, r6
 8017e8a:	ea4e 0e01 	orr.w	lr, lr, r1
 8017e8e:	4496      	add	lr, r2
    P( E, A, B, C, D, R(51) );
 8017e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(52) );
 8017e92:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(51) );
 8017e94:	ea89 0002 	eor.w	r0, r9, r2
 8017e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e9a:	4050      	eors	r0, r2
 8017e9c:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(50) );
 8017e9e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(51) );
 8017ea2:	ea48 0704 	orr.w	r7, r8, r4
 8017ea6:	4050      	eors	r0, r2
 8017ea8:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8017eac:	ea07 0005 	and.w	r0, r7, r5
 8017eb0:	ea08 0704 	and.w	r7, r8, r4
 8017eb4:	9210      	str	r2, [sp, #64]	; 0x40
 8017eb6:	4307      	orrs	r7, r0
 8017eb8:	18d0      	adds	r0, r2, r3
    P( D, E, A, B, C, R(52) );
 8017eba:	9a07      	ldr	r2, [sp, #28]
 8017ebc:	ea82 0c01 	eor.w	ip, r2, r1
 8017ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ec2:	ea8c 0c02 	eor.w	ip, ip, r2
 8017ec6:	9a05      	ldr	r2, [sp, #20]
    P( C, D, E, A, B, R(53) );
 8017ec8:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(52) );
 8017eca:	ea8c 0c02 	eor.w	ip, ip, r2
 8017ece:	ea4f 7bfc 	mov.w	fp, ip, ror #31
    P( E, A, B, C, D, R(51) );
 8017ed2:	ea4f 08b8 	mov.w	r8, r8, ror #2
 8017ed6:	eb0b 0c03 	add.w	ip, fp, r3
 8017eda:	4465      	add	r5, ip
    P( D, E, A, B, C, R(52) );
 8017edc:	ea4e 0c08 	orr.w	ip, lr, r8
 8017ee0:	ea0e 0208 	and.w	r2, lr, r8
 8017ee4:	ea0c 0c04 	and.w	ip, ip, r4
 8017ee8:	ea4c 0c02 	orr.w	ip, ip, r2
    P( C, D, E, A, B, R(53) );
 8017eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017eee:	4430      	add	r0, r6
 8017ef0:	4438      	add	r0, r7
 8017ef2:	ea82 0701 	eor.w	r7, r2, r1
 8017ef6:	9a01      	ldr	r2, [sp, #4]
    P( B, C, D, E, A, R(54) );
 8017ef8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(53) );
 8017efa:	4057      	eors	r7, r2
 8017efc:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, R(51) );
 8017efe:	eb00 60fe 	add.w	r0, r0, lr, ror #27
    P( D, E, A, B, C, R(52) );
 8017f02:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( C, D, E, A, B, R(53) );
 8017f06:	ea40 090e 	orr.w	r9, r0, lr
 8017f0a:	4057      	eors	r7, r2
 8017f0c:	ea4f 7af7 	mov.w	sl, r7, ror #31
 8017f10:	ea09 0208 	and.w	r2, r9, r8
 8017f14:	ea00 090e 	and.w	r9, r0, lr
 8017f18:	ea42 0909 	orr.w	r9, r2, r9
 8017f1c:	eb0a 0203 	add.w	r2, sl, r3
 8017f20:	4414      	add	r4, r2
    P( B, C, D, E, A, R(54) );
 8017f22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017f24:	4051      	eors	r1, r2
 8017f26:	9a02      	ldr	r2, [sp, #8]
 8017f28:	4051      	eors	r1, r2
 8017f2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f2c:	4051      	eors	r1, r2
 8017f2e:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8017f32:	ea4f 72f1 	mov.w	r2, r1, ror #31
    P( D, E, A, B, C, R(52) );
 8017f36:	44ac      	add	ip, r5
 8017f38:	18d1      	adds	r1, r2, r3
 8017f3a:	44a1      	add	r9, r4
    P( C, D, E, A, B, R(53) );
 8017f3c:	ea4f 07b0 	mov.w	r7, r0, ror #2
 8017f40:	eb09 69fc 	add.w	r9, r9, ip, ror #27
 8017f44:	4441      	add	r1, r8
 8017f46:	eb01 68f9 	add.w	r8, r1, r9, ror #27
    P( B, C, D, E, A, R(54) );
 8017f4a:	ea4c 0107 	orr.w	r1, ip, r7
 8017f4e:	9207      	str	r2, [sp, #28]
 8017f50:	ea01 010e 	and.w	r1, r1, lr
 8017f54:	ea0c 0207 	and.w	r2, ip, r7
    P( A, B, C, D, E, R(55) );
 8017f58:	9808      	ldr	r0, [sp, #32]
    P( E, A, B, C, D, R(56) );
 8017f5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(54) );
 8017f5c:	4311      	orrs	r1, r2
    P( A, B, C, D, E, R(55) );
 8017f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017f60:	4042      	eors	r2, r0
 8017f62:	9803      	ldr	r0, [sp, #12]
 8017f64:	4042      	eors	r2, r0
    P( B, C, D, E, A, R(54) );
 8017f66:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(55) );
 8017f6a:	ea82 020b 	eor.w	r2, r2, fp
    P( B, C, D, E, A, R(54) );
 8017f6e:	4441      	add	r1, r8
    P( A, B, C, D, E, R(55) );
 8017f70:	ea4f 78f2 	mov.w	r8, r2, ror #31
 8017f74:	ea49 020c 	orr.w	r2, r9, ip
 8017f78:	ea02 0007 	and.w	r0, r2, r7
 8017f7c:	ea09 020c 	and.w	r2, r9, ip
 8017f80:	4302      	orrs	r2, r0
 8017f82:	eb08 0003 	add.w	r0, r8, r3
 8017f86:	4486      	add	lr, r0
    P( E, A, B, C, D, R(56) );
 8017f88:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017f8a:	ea80 0604 	eor.w	r6, r0, r4
 8017f8e:	9804      	ldr	r0, [sp, #16]
 8017f90:	4046      	eors	r6, r0
 8017f92:	ea86 060a 	eor.w	r6, r6, sl
 8017f96:	ea4f 70f6 	mov.w	r0, r6, ror #31
 8017f9a:	18c6      	adds	r6, r0, r3
 8017f9c:	4472      	add	r2, lr
    P( A, B, C, D, E, R(55) );
 8017f9e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8017fa2:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8017fa6:	443e      	add	r6, r7
    P( E, A, B, C, D, R(56) );
 8017fa8:	900c      	str	r0, [sp, #48]	; 0x30
 8017faa:	eb06 60f2 	add.w	r0, r6, r2, ror #27
 8017fae:	ea41 0609 	orr.w	r6, r1, r9
 8017fb2:	e001      	b.n	8017fb8 <mbedtls_sha1_process+0x9e8>
 8017fb4:	8f1bbcdc 	.word	0x8f1bbcdc
 8017fb8:	ea01 0409 	and.w	r4, r1, r9
 8017fbc:	ea06 060c 	and.w	r6, r6, ip
 8017fc0:	4326      	orrs	r6, r4
 8017fc2:	4406      	add	r6, r0
    P( D, E, A, B, C, R(57) );
 8017fc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017fc6:	9808      	ldr	r0, [sp, #32]
 8017fc8:	ea80 0504 	eor.w	r5, r0, r4
 8017fcc:	9805      	ldr	r0, [sp, #20]
    P( C, D, E, A, B, R(58) );
 8017fce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(57) );
 8017fd0:	4045      	eors	r5, r0
 8017fd2:	9807      	ldr	r0, [sp, #28]
    P( E, A, B, C, D, R(56) );
 8017fd4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(57) );
 8017fd8:	4045      	eors	r5, r0
 8017fda:	ea4f 70f5 	mov.w	r0, r5, ror #31
 8017fde:	ea42 0501 	orr.w	r5, r2, r1
 8017fe2:	9008      	str	r0, [sp, #32]
 8017fe4:	ea05 0009 	and.w	r0, r5, r9
 8017fe8:	ea02 0501 	and.w	r5, r2, r1
 8017fec:	4305      	orrs	r5, r0
 8017fee:	9808      	ldr	r0, [sp, #32]
 8017ff0:	4418      	add	r0, r3
 8017ff2:	4484      	add	ip, r0
    P( C, D, E, A, B, R(58) );
 8017ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ff6:	ea80 0704 	eor.w	r7, r0, r4
 8017ffa:	9806      	ldr	r0, [sp, #24]
 8017ffc:	4047      	eors	r7, r0
 8017ffe:	ea87 0708 	eor.w	r7, r7, r8
 8018002:	ea4f 70f7 	mov.w	r0, r7, ror #31
 8018006:	9009      	str	r0, [sp, #36]	; 0x24
 8018008:	4465      	add	r5, ip
 801800a:	4418      	add	r0, r3
    P( D, E, A, B, C, R(57) );
 801800c:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8018010:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8018014:	4481      	add	r9, r0
 8018016:	eb09 60f5 	add.w	r0, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 801801a:	ea46 0902 	orr.w	r9, r6, r2
 801801e:	ea06 0402 	and.w	r4, r6, r2
 8018022:	ea09 0901 	and.w	r9, r9, r1
 8018026:	ea49 0904 	orr.w	r9, r9, r4
 801802a:	4481      	add	r9, r0
    P( B, C, D, E, A, R(59) );
 801802c:	9c01      	ldr	r4, [sp, #4]
 801802e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018030:	4060      	eors	r0, r4
 8018032:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018034:	4060      	eors	r0, r4
 8018036:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018038:	4060      	eors	r0, r4
    P( C, D, E, A, B, R(58) );
 801803a:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(59) );
 801803e:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8018042:	900a      	str	r0, [sp, #40]	; 0x28
 8018044:	ea45 0006 	orr.w	r0, r5, r6
 8018048:	4010      	ands	r0, r2
 801804a:	ea05 0e06 	and.w	lr, r5, r6
 801804e:	ea40 0e0e 	orr.w	lr, r0, lr
 8018052:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018054:	4403      	add	r3, r0
 8018056:	440b      	add	r3, r1
 8018058:	449e      	add	lr, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 801805a:	9902      	ldr	r1, [sp, #8]
 801805c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801805e:	404b      	eors	r3, r1
 8018060:	9908      	ldr	r1, [sp, #32]
 8018062:	ea83 030b 	eor.w	r3, r3, fp
 8018066:	404b      	eors	r3, r1
 8018068:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801806c:	930b      	str	r3, [sp, #44]	; 0x2c
 801806e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018070:	4bd5      	ldr	r3, [pc, #852]	; (80183c8 <mbedtls_sha1_process+0xdf8>)
    P( B, C, D, E, A, R(59) );
 8018072:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( A, B, C, D, E, R(60) );
 8018076:	ea86 0405 	eor.w	r4, r6, r5
 801807a:	4419      	add	r1, r3
 801807c:	440a      	add	r2, r1
 801807e:	ea84 0409 	eor.w	r4, r4, r9
    P( E, A, B, C, D, R(61) );
 8018082:	9903      	ldr	r1, [sp, #12]
 8018084:	4414      	add	r4, r2
 8018086:	9a01      	ldr	r2, [sp, #4]
 8018088:	404a      	eors	r2, r1
 801808a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801808c:	ea82 020a 	eor.w	r2, r2, sl
 8018090:	404a      	eors	r2, r1
 8018092:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8018096:	9201      	str	r2, [sp, #4]
 8018098:	441a      	add	r2, r3
    P( D, E, A, B, C, R(62) );
 801809a:	9904      	ldr	r1, [sp, #16]
 801809c:	4416      	add	r6, r2
 801809e:	9a02      	ldr	r2, [sp, #8]
 80180a0:	4051      	eors	r1, r2
 80180a2:	9a07      	ldr	r2, [sp, #28]
 80180a4:	4051      	eors	r1, r2
 80180a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180a8:	4051      	eors	r1, r2
 80180aa:	ea4f 72f1 	mov.w	r2, r1, ror #31
    P( B, C, D, E, A, R(59) );
 80180ae:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
    P( D, E, A, B, C, R(62) );
 80180b2:	9202      	str	r2, [sp, #8]
    P( A, B, C, D, E, R(60) );
 80180b4:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80180b8:	441a      	add	r2, r3
    P( C, D, E, A, B, R(63) );
 80180ba:	9905      	ldr	r1, [sp, #20]
    P( E, A, B, C, D, R(61) );
 80180bc:	ea85 0009 	eor.w	r0, r5, r9
 80180c0:	4415      	add	r5, r2
    P( C, D, E, A, B, R(63) );
 80180c2:	9a03      	ldr	r2, [sp, #12]
 80180c4:	404a      	eors	r2, r1
 80180c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80180c8:	ea82 0208 	eor.w	r2, r2, r8
 80180cc:	404a      	eors	r2, r1
 80180ce:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( A, B, C, D, E, R(60) );
 80180d2:	eb04 64fe 	add.w	r4, r4, lr, ror #27
    P( C, D, E, A, B, R(63) );
 80180d6:	9203      	str	r2, [sp, #12]
    P( E, A, B, C, D, R(61) );
 80180d8:	ea80 000e 	eor.w	r0, r0, lr
 80180dc:	441a      	add	r2, r3
 80180de:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(62) );
 80180e2:	ea89 0c0e 	eor.w	ip, r9, lr
    P( B, C, D, E, A, R(64) );
 80180e6:	9906      	ldr	r1, [sp, #24]
 80180e8:	4491      	add	r9, r2
 80180ea:	9a04      	ldr	r2, [sp, #16]
 80180ec:	4051      	eors	r1, r2
 80180ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80180f0:	4051      	eors	r1, r2
 80180f2:	9a01      	ldr	r2, [sp, #4]
 80180f4:	4051      	eors	r1, r2
 80180f6:	ea4f 72f1 	mov.w	r2, r1, ror #31
 80180fa:	4430      	add	r0, r6
    P( E, A, B, C, D, R(61) );
 80180fc:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(64) );
 8018100:	9204      	str	r2, [sp, #16]
    P( D, E, A, B, C, R(62) );
 8018102:	ea8c 0c04 	eor.w	ip, ip, r4
 8018106:	441a      	add	r2, r3
 8018108:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( C, D, E, A, B, R(63) );
 801810c:	ea8e 0704 	eor.w	r7, lr, r4
 8018110:	44ac      	add	ip, r5
 8018112:	4496      	add	lr, r2
    P( A, B, C, D, E, R(65) );
 8018114:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8018116:	9a05      	ldr	r2, [sp, #20]
 8018118:	406a      	eors	r2, r5
 801811a:	9d08      	ldr	r5, [sp, #32]
 801811c:	406a      	eors	r2, r5
 801811e:	9d02      	ldr	r5, [sp, #8]
 8018120:	406a      	eors	r2, r5
 8018122:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( D, E, A, B, C, R(62) );
 8018126:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
    P( A, B, C, D, E, R(65) );
 801812a:	9205      	str	r2, [sp, #20]
    P( C, D, E, A, B, R(63) );
 801812c:	4047      	eors	r7, r0
 801812e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(64) );
 8018132:	ea84 0100 	eor.w	r1, r4, r0
 8018136:	9d05      	ldr	r5, [sp, #20]
 8018138:	444f      	add	r7, r9
    P( C, D, E, A, B, R(63) );
 801813a:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( B, C, D, E, A, R(64) );
 801813e:	ea81 010c 	eor.w	r1, r1, ip
 8018142:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(65) );
 8018146:	ea80 020c 	eor.w	r2, r0, ip
 801814a:	441d      	add	r5, r3
 801814c:	442c      	add	r4, r5
 801814e:	407a      	eors	r2, r7
 8018150:	4422      	add	r2, r4
    P( E, A, B, C, D, R(66) );
 8018152:	9c06      	ldr	r4, [sp, #24]
 8018154:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018156:	ea84 040b 	eor.w	r4, r4, fp
 801815a:	406c      	eors	r4, r5
 801815c:	9d03      	ldr	r5, [sp, #12]
 801815e:	4471      	add	r1, lr
 8018160:	406c      	eors	r4, r5
    P( B, C, D, E, A, R(64) );
 8018162:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, R(66) );
 8018166:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( A, B, C, D, E, R(65) );
 801816a:	ea4f 07b7 	mov.w	r7, r7, ror #2
 801816e:	18e5      	adds	r5, r4, r3
    P( E, A, B, C, D, R(66) );
 8018170:	ea8c 0607 	eor.w	r6, ip, r7
 8018174:	4428      	add	r0, r5
 8018176:	404e      	eors	r6, r1
 8018178:	4406      	add	r6, r0
    P( D, E, A, B, C, R(67) );
 801817a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801817c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801817e:	ea80 000a 	eor.w	r0, r0, sl
 8018182:	4068      	eors	r0, r5
 8018184:	9d04      	ldr	r5, [sp, #16]
 8018186:	4068      	eors	r0, r5
    P( A, B, C, D, E, R(65) );
 8018188:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(67) );
 801818c:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( E, A, B, C, D, R(66) );
 8018190:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
 8018194:	9006      	str	r0, [sp, #24]
 8018196:	eb00 0e03 	add.w	lr, r0, r3
 801819a:	ea87 0501 	eor.w	r5, r7, r1
    P( C, D, E, A, B, R(68) );
 801819e:	9807      	ldr	r0, [sp, #28]
 80181a0:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(67) );
 80181a2:	4055      	eors	r5, r2
 80181a4:	4465      	add	r5, ip
    P( C, D, E, A, B, R(68) );
 80181a6:	ea8b 0c00 	eor.w	ip, fp, r0
 80181aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80181ac:	ea8c 0c00 	eor.w	ip, ip, r0
 80181b0:	9805      	ldr	r0, [sp, #20]
 80181b2:	ea8c 0c00 	eor.w	ip, ip, r0
    P( E, A, B, C, D, R(66) );
 80181b6:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(68) );
 80181ba:	ea4f 70fc 	mov.w	r0, ip, ror #31
    P( D, E, A, B, C, R(67) );
 80181be:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80181c2:	eb00 0c03 	add.w	ip, r0, r3
    P( C, D, E, A, B, R(68) );
 80181c6:	ea81 0b02 	eor.w	fp, r1, r2
 80181ca:	900d      	str	r0, [sp, #52]	; 0x34
 80181cc:	4467      	add	r7, ip
    P( B, C, D, E, A, R(69) );
 80181ce:	9801      	ldr	r0, [sp, #4]
    P( C, D, E, A, B, R(68) );
 80181d0:	ea8b 0b06 	eor.w	fp, fp, r6
 80181d4:	44bb      	add	fp, r7
    P( B, C, D, E, A, R(69) );
 80181d6:	ea8a 0708 	eor.w	r7, sl, r8
 80181da:	4047      	eors	r7, r0
 80181dc:	4067      	eors	r7, r4
    P( D, E, A, B, C, R(67) );
 80181de:	eb05 65f6 	add.w	r5, r5, r6, ror #27
    P( B, C, D, E, A, R(69) );
 80181e2:	ea4f 70f7 	mov.w	r0, r7, ror #31
    P( C, D, E, A, B, R(68) );
 80181e6:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80181ea:	18c7      	adds	r7, r0, r3
    P( B, C, D, E, A, R(69) );
 80181ec:	ea82 0a06 	eor.w	sl, r2, r6
 80181f0:	4439      	add	r1, r7
 80181f2:	ea8a 0a05 	eor.w	sl, sl, r5
 80181f6:	900e      	str	r0, [sp, #56]	; 0x38
 80181f8:	448a      	add	sl, r1
    P( A, B, C, D, E, R(70) );
 80181fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80181fc:	9907      	ldr	r1, [sp, #28]
 80181fe:	4041      	eors	r1, r0
 8018200:	9802      	ldr	r0, [sp, #8]
 8018202:	4041      	eors	r1, r0
 8018204:	9806      	ldr	r0, [sp, #24]
 8018206:	4041      	eors	r1, r0
    P( C, D, E, A, B, R(68) );
 8018208:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( A, B, C, D, E, R(70) );
 801820c:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( B, C, D, E, A, R(69) );
 8018210:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8018214:	18cf      	adds	r7, r1, r3
    P( A, B, C, D, E, R(70) );
 8018216:	ea86 0905 	eor.w	r9, r6, r5
 801821a:	443a      	add	r2, r7
 801821c:	ea89 090b 	eor.w	r9, r9, fp
 8018220:	4491      	add	r9, r2
    P( E, A, B, C, D, R(71) );
 8018222:	9a08      	ldr	r2, [sp, #32]
 8018224:	9803      	ldr	r0, [sp, #12]
 8018226:	ea88 0202 	eor.w	r2, r8, r2
 801822a:	4042      	eors	r2, r0
 801822c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801822e:	4042      	eors	r2, r0
    P( B, C, D, E, A, R(69) );
 8018230:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( E, A, B, C, D, R(71) );
 8018234:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( A, B, C, D, E, R(70) );
 8018238:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 801823c:	18d7      	adds	r7, r2, r3
    P( E, A, B, C, D, R(71) );
 801823e:	ea85 080b 	eor.w	r8, r5, fp
 8018242:	443e      	add	r6, r7
 8018244:	ea88 080a 	eor.w	r8, r8, sl
    P( D, E, A, B, C, R(72) );
 8018248:	980c      	ldr	r0, [sp, #48]	; 0x30
 801824a:	44b0      	add	r8, r6
 801824c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801824e:	4046      	eors	r6, r0
 8018250:	9804      	ldr	r0, [sp, #16]
 8018252:	4046      	eors	r6, r0
 8018254:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018256:	4046      	eors	r6, r0
    P( A, B, C, D, E, R(70) );
 8018258:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( D, E, A, B, C, R(72) );
 801825c:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( E, A, B, C, D, R(71) );
 8018260:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8018264:	18f7      	adds	r7, r6, r3
    P( D, E, A, B, C, R(72) );
 8018266:	ea8b 0e0a 	eor.w	lr, fp, sl
 801826a:	443d      	add	r5, r7
 801826c:	ea8e 0e09 	eor.w	lr, lr, r9
    P( C, D, E, A, B, R(73) );
 8018270:	9808      	ldr	r0, [sp, #32]
 8018272:	44ae      	add	lr, r5
 8018274:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018276:	4045      	eors	r5, r0
 8018278:	9805      	ldr	r0, [sp, #20]
 801827a:	4045      	eors	r5, r0
 801827c:	404d      	eors	r5, r1
 801827e:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8018282:	18ef      	adds	r7, r5, r3
    P( B, C, D, E, A, R(74) );
 8018284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018286:	44bb      	add	fp, r7
 8018288:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801828a:	4047      	eors	r7, r0
    P( E, A, B, C, D, R(71) );
 801828c:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( B, C, D, E, A, R(74) );
 8018290:	407c      	eors	r4, r7
    P( D, E, A, B, C, R(72) );
 8018292:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( C, D, E, A, B, R(73) );
 8018296:	ea8a 0c09 	eor.w	ip, sl, r9
    P( B, C, D, E, A, R(74) );
 801829a:	4054      	eors	r4, r2
 801829c:	ea4f 70f4 	mov.w	r0, r4, ror #31
    P( C, D, E, A, B, R(73) );
 80182a0:	ea8c 0c08 	eor.w	ip, ip, r8
    P( B, C, D, E, A, R(74) );
 80182a4:	9007      	str	r0, [sp, #28]
 80182a6:	44dc      	add	ip, fp
 80182a8:	eb00 0b03 	add.w	fp, r0, r3
    P( A, B, C, D, E, R(75) );
 80182ac:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(72) );
 80182ae:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27
    P( C, D, E, A, B, R(73) );
 80182b2:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( B, C, D, E, A, R(74) );
 80182b6:	ea89 0708 	eor.w	r7, r9, r8
    P( A, B, C, D, E, R(75) );
 80182ba:	4604      	mov	r4, r0
 80182bc:	9801      	ldr	r0, [sp, #4]
 80182be:	44da      	add	sl, fp
    P( B, C, D, E, A, R(74) );
 80182c0:	ea87 070e 	eor.w	r7, r7, lr
 80182c4:	4457      	add	r7, sl
    P( A, B, C, D, E, R(75) );
 80182c6:	ea84 0a00 	eor.w	sl, r4, r0
 80182ca:	9806      	ldr	r0, [sp, #24]
    P( E, A, B, C, D, R(76) );
 80182cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(75) );
 80182ce:	ea8a 0000 	eor.w	r0, sl, r0
 80182d2:	4046      	eors	r6, r0
    P( C, D, E, A, B, R(73) );
 80182d4:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( A, B, C, D, E, R(75) );
 80182d8:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( B, C, D, E, A, R(74) );
 80182dc:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80182e0:	eb06 0a03 	add.w	sl, r6, r3
    P( A, B, C, D, E, R(75) );
 80182e4:	ea88 000e 	eor.w	r0, r8, lr
 80182e8:	44d1      	add	r9, sl
 80182ea:	ea80 000c 	eor.w	r0, r0, ip
 80182ee:	4448      	add	r0, r9
    P( E, A, B, C, D, R(76) );
 80182f0:	46a1      	mov	r9, r4
 80182f2:	9c02      	ldr	r4, [sp, #8]
 80182f4:	ea89 0904 	eor.w	r9, r9, r4
 80182f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80182fa:	ea89 0904 	eor.w	r9, r9, r4
 80182fe:	ea89 0505 	eor.w	r5, r9, r5
    P( B, C, D, E, A, R(74) );
 8018302:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( E, A, B, C, D, R(76) );
 8018306:	ea4f 75f5 	mov.w	r5, r5, ror #31
    P( A, B, C, D, E, R(75) );
 801830a:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 801830e:	eb05 0a03 	add.w	sl, r5, r3
    P( E, A, B, C, D, R(76) );
 8018312:	ea8e 090c 	eor.w	r9, lr, ip
    P( D, E, A, B, C, R(77) );
 8018316:	9c01      	ldr	r4, [sp, #4]
 8018318:	44d0      	add	r8, sl
    P( E, A, B, C, D, R(76) );
 801831a:	ea89 0907 	eor.w	r9, r9, r7
 801831e:	44c1      	add	r9, r8
    P( D, E, A, B, C, R(77) );
 8018320:	46a0      	mov	r8, r4
 8018322:	9c03      	ldr	r4, [sp, #12]
 8018324:	ea88 0804 	eor.w	r8, r8, r4
 8018328:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801832a:	ea88 0804 	eor.w	r8, r8, r4
 801832e:	9c07      	ldr	r4, [sp, #28]
 8018330:	ea88 0804 	eor.w	r8, r8, r4
    P( A, B, C, D, E, R(75) );
 8018334:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8018338:	eb03 78f8 	add.w	r8, r3, r8, ror #31
    P( E, A, B, C, D, R(76) );
 801833c:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(78) );
 8018340:	9c02      	ldr	r4, [sp, #8]
 8018342:	44c6      	add	lr, r8
    P( D, E, A, B, C, R(77) );
 8018344:	ea8c 0807 	eor.w	r8, ip, r7
 8018348:	ea88 0800 	eor.w	r8, r8, r0
 801834c:	44c6      	add	lr, r8
    P( C, D, E, A, B, R(78) );
 801834e:	46a0      	mov	r8, r4
 8018350:	9c04      	ldr	r4, [sp, #16]
 8018352:	ea88 0404 	eor.w	r4, r8, r4
 8018356:	4061      	eors	r1, r4
 8018358:	4071      	eors	r1, r6
    P( E, A, B, C, D, R(76) );
 801835a:	eb09 69f0 	add.w	r9, r9, r0, ror #27
 801835e:	eb03 71f1 	add.w	r1, r3, r1, ror #31
    P( D, E, A, B, C, R(77) );
 8018362:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8018366:	448c      	add	ip, r1
    P( C, D, E, A, B, R(78) );
 8018368:	ea87 0100 	eor.w	r1, r7, r0
 801836c:	ea81 0109 	eor.w	r1, r1, r9
 8018370:	448c      	add	ip, r1
    P( B, C, D, E, A, R(79) );
 8018372:	9c05      	ldr	r4, [sp, #20]
 8018374:	9903      	ldr	r1, [sp, #12]
 8018376:	4061      	eors	r1, r4
 8018378:	404a      	eors	r2, r1
 801837a:	4055      	eors	r5, r2

#undef K
#undef F

    ctx->state[0] += A;
 801837c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(77) );
 801837e:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
    ctx->state[0] += A;
 8018382:	4413      	add	r3, r2
    P( C, D, E, A, B, R(78) );
 8018384:	ea4f 09b9 	mov.w	r9, r9, ror #2
    ctx->state[0] += A;
 8018388:	eb03 75f5 	add.w	r5, r3, r5, ror #31
    P( B, C, D, E, A, R(79) );
 801838c:	ea80 0309 	eor.w	r3, r0, r9
 8018390:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
 8018394:	442f      	add	r7, r5
    P( C, D, E, A, B, R(78) );
 8018396:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    ctx->state[0] += A;
 801839a:	441f      	add	r7, r3
 801839c:	9b00      	ldr	r3, [sp, #0]
    ctx->state[1] += B;
    ctx->state[2] += C;
 801839e:	9a00      	ldr	r2, [sp, #0]
    ctx->state[0] += A;
 80183a0:	eb07 67fc 	add.w	r7, r7, ip, ror #27
 80183a4:	609f      	str	r7, [r3, #8]
    ctx->state[1] += B;
 80183a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183a8:	eb03 010c 	add.w	r1, r3, ip
 80183ac:	9b00      	ldr	r3, [sp, #0]
 80183ae:	60d9      	str	r1, [r3, #12]
    ctx->state[2] += C;
 80183b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80183b2:	eb03 03be 	add.w	r3, r3, lr, ror #2
 80183b6:	6113      	str	r3, [r2, #16]
    ctx->state[3] += D;
 80183b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80183ba:	444b      	add	r3, r9
 80183bc:	6153      	str	r3, [r2, #20]
    ctx->state[4] += E;
 80183be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183c0:	4418      	add	r0, r3
 80183c2:	6190      	str	r0, [r2, #24]
}
 80183c4:	e002      	b.n	80183cc <mbedtls_sha1_process+0xdfc>
 80183c6:	bf00      	nop
 80183c8:	ca62c1d6 	.word	0xca62c1d6
 80183cc:	b017      	add	sp, #92	; 0x5c
 80183ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183d2:	bf00      	nop

080183d4 <mbedtls_sha1_update.part.0>:
#endif /* !MBEDTLS_SHA1_PROCESS_ALT */

/*
 * SHA-1 process buffer
 */
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 80183d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 80183d8:	6803      	ldr	r3, [r0, #0]
 80183da:	f003 073f 	and.w	r7, r3, #63	; 0x3f
 80183de:	189b      	adds	r3, r3, r2
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80183e0:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80183e2:	bf24      	itt	cs
 80183e4:	6843      	ldrcs	r3, [r0, #4]
 80183e6:	3301      	addcs	r3, #1
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 80183e8:	4604      	mov	r4, r0
 80183ea:	460e      	mov	r6, r1
 80183ec:	4615      	mov	r5, r2
        ctx->total[1]++;
 80183ee:	bf28      	it	cs
 80183f0:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 80183f2:	b197      	cbz	r7, 801841a <mbedtls_sha1_update.part.0+0x46>
    fill = 64 - left;
 80183f4:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 80183f8:	4590      	cmp	r8, r2
 80183fa:	d80e      	bhi.n	801841a <mbedtls_sha1_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80183fc:	f100 091c 	add.w	r9, r0, #28
 8018400:	4642      	mov	r2, r8
 8018402:	eb09 0007 	add.w	r0, r9, r7
 8018406:	f009 ff6e 	bl	80222e6 <memcpy>
        mbedtls_sha1_process( ctx, ctx->buffer );
 801840a:	4649      	mov	r1, r9
 801840c:	4620      	mov	r0, r4
 801840e:	f7ff f8df 	bl	80175d0 <mbedtls_sha1_process>
        input += fill;
 8018412:	4446      	add	r6, r8
        ilen  -= fill;
 8018414:	eba5 0508 	sub.w	r5, r5, r8
        left = 0;
 8018418:	2700      	movs	r7, #0
 801841a:	46a8      	mov	r8, r5
 801841c:	eb06 0905 	add.w	r9, r6, r5
 8018420:	e004      	b.n	801842c <mbedtls_sha1_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha1_process( ctx, input );
 8018422:	4620      	mov	r0, r4
 8018424:	f7ff f8d4 	bl	80175d0 <mbedtls_sha1_process>
        input += 64;
        ilen  -= 64;
 8018428:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 801842c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8018430:	eba9 0108 	sub.w	r1, r9, r8
 8018434:	d8f5      	bhi.n	8018422 <mbedtls_sha1_update.part.0+0x4e>
 8018436:	09aa      	lsrs	r2, r5, #6
 8018438:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 801843c:	eb06 1182 	add.w	r1, r6, r2, lsl #6
 8018440:	fb03 5202 	mla	r2, r3, r2, r5
    }

    if( ilen > 0 )
 8018444:	b132      	cbz	r2, 8018454 <mbedtls_sha1_update.part.0+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018446:	f104 001c 	add.w	r0, r4, #28
 801844a:	4438      	add	r0, r7
}
 801844c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018450:	f009 bf49 	b.w	80222e6 <memcpy>
}
 8018454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018458 <mbedtls_sha1_update>:
    if( ilen == 0 )
 8018458:	b10a      	cbz	r2, 801845e <mbedtls_sha1_update+0x6>
 801845a:	f7ff bfbb 	b.w	80183d4 <mbedtls_sha1_update.part.0>
}
 801845e:	4770      	bx	lr

08018460 <mbedtls_sha1_finish>:

/*
 * SHA-1 final digest
 */
void mbedtls_sha1_finish( mbedtls_sha1_context *ctx, unsigned char output[20] )
{
 8018460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018462:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8018464:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8018468:	0f53      	lsrs	r3, r2, #29
 801846a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
{
 801846e:	4604      	mov	r4, r0
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8018470:	0e18      	lsrs	r0, r3, #24
    low  = ( ctx->total[0] <<  3 );
 8018472:	00d1      	lsls	r1, r2, #3
    PUT_UINT32_BE( high, msglen, 0 );
 8018474:	f88d 0000 	strb.w	r0, [sp]
 8018478:	0c18      	lsrs	r0, r3, #16
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 801847a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    PUT_UINT32_BE( high, msglen, 0 );
 801847e:	f88d 0001 	strb.w	r0, [sp, #1]
 8018482:	f88d 3003 	strb.w	r3, [sp, #3]
 8018486:	0a18      	lsrs	r0, r3, #8
    PUT_UINT32_BE( low,  msglen, 4 );
 8018488:	0e0b      	lsrs	r3, r1, #24
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 801848a:	2a37      	cmp	r2, #55	; 0x37
    PUT_UINT32_BE( low,  msglen, 4 );
 801848c:	f88d 3004 	strb.w	r3, [sp, #4]
 8018490:	ea4f 4311 	mov.w	r3, r1, lsr #16
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018494:	bf94      	ite	ls
 8018496:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 801849a:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
    PUT_UINT32_BE( high, msglen, 0 );
 801849e:	f88d 0002 	strb.w	r0, [sp, #2]
    PUT_UINT32_BE( low,  msglen, 4 );
 80184a2:	f88d 3005 	strb.w	r3, [sp, #5]
 80184a6:	f88d 1007 	strb.w	r1, [sp, #7]
 80184aa:	0a0b      	lsrs	r3, r1, #8

    mbedtls_sha1_update( ctx, sha1_padding, padn );
 80184ac:	4620      	mov	r0, r4
 80184ae:	491c      	ldr	r1, [pc, #112]	; (8018520 <mbedtls_sha1_finish+0xc0>)
    PUT_UINT32_BE( low,  msglen, 4 );
 80184b0:	f88d 3006 	strb.w	r3, [sp, #6]
    mbedtls_sha1_update( ctx, sha1_padding, padn );
 80184b4:	f7ff ffd0 	bl	8018458 <mbedtls_sha1_update>
 80184b8:	2208      	movs	r2, #8
 80184ba:	4669      	mov	r1, sp
 80184bc:	4620      	mov	r0, r4
 80184be:	f7ff ff89 	bl	80183d4 <mbedtls_sha1_update.part.0>
    mbedtls_sha1_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80184c2:	7ae3      	ldrb	r3, [r4, #11]
 80184c4:	702b      	strb	r3, [r5, #0]
 80184c6:	8963      	ldrh	r3, [r4, #10]
 80184c8:	706b      	strb	r3, [r5, #1]
 80184ca:	68a3      	ldr	r3, [r4, #8]
 80184cc:	0a1b      	lsrs	r3, r3, #8
 80184ce:	70ab      	strb	r3, [r5, #2]
 80184d0:	68a3      	ldr	r3, [r4, #8]
 80184d2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80184d4:	7be3      	ldrb	r3, [r4, #15]
 80184d6:	712b      	strb	r3, [r5, #4]
 80184d8:	89e3      	ldrh	r3, [r4, #14]
 80184da:	716b      	strb	r3, [r5, #5]
 80184dc:	68e3      	ldr	r3, [r4, #12]
 80184de:	0a1b      	lsrs	r3, r3, #8
 80184e0:	71ab      	strb	r3, [r5, #6]
 80184e2:	68e3      	ldr	r3, [r4, #12]
 80184e4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80184e6:	7ce3      	ldrb	r3, [r4, #19]
 80184e8:	722b      	strb	r3, [r5, #8]
 80184ea:	8a63      	ldrh	r3, [r4, #18]
 80184ec:	726b      	strb	r3, [r5, #9]
 80184ee:	6923      	ldr	r3, [r4, #16]
 80184f0:	0a1b      	lsrs	r3, r3, #8
 80184f2:	72ab      	strb	r3, [r5, #10]
 80184f4:	6923      	ldr	r3, [r4, #16]
 80184f6:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80184f8:	7de3      	ldrb	r3, [r4, #23]
 80184fa:	732b      	strb	r3, [r5, #12]
 80184fc:	8ae3      	ldrh	r3, [r4, #22]
 80184fe:	736b      	strb	r3, [r5, #13]
 8018500:	6963      	ldr	r3, [r4, #20]
 8018502:	0a1b      	lsrs	r3, r3, #8
 8018504:	73ab      	strb	r3, [r5, #14]
 8018506:	6963      	ldr	r3, [r4, #20]
 8018508:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 801850a:	7ee3      	ldrb	r3, [r4, #27]
 801850c:	742b      	strb	r3, [r5, #16]
 801850e:	8b63      	ldrh	r3, [r4, #26]
 8018510:	746b      	strb	r3, [r5, #17]
 8018512:	69a3      	ldr	r3, [r4, #24]
 8018514:	0a1b      	lsrs	r3, r3, #8
 8018516:	74ab      	strb	r3, [r5, #18]
 8018518:	69a3      	ldr	r3, [r4, #24]
 801851a:	74eb      	strb	r3, [r5, #19]
}
 801851c:	b003      	add	sp, #12
 801851e:	bd30      	pop	{r4, r5, pc}
 8018520:	0802c0b4 	.word	0x0802c0b4

08018524 <mbedtls_sha1>:

/*
 * output = SHA-1( input buffer )
 */
void mbedtls_sha1( const unsigned char *input, size_t ilen, unsigned char output[20] )
{
 8018524:	b570      	push	{r4, r5, r6, lr}
 8018526:	b098      	sub	sp, #96	; 0x60
 8018528:	4605      	mov	r5, r0
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 801852a:	a801      	add	r0, sp, #4
{
 801852c:	460e      	mov	r6, r1
 801852e:	4614      	mov	r4, r2
    mbedtls_sha1_init( &ctx );
 8018530:	f7ff f821 	bl	8017576 <mbedtls_sha1_init>
    mbedtls_sha1_starts( &ctx );
 8018534:	a801      	add	r0, sp, #4
 8018536:	f7ff f831 	bl	801759c <mbedtls_sha1_starts>
    mbedtls_sha1_update( &ctx, input, ilen );
 801853a:	4632      	mov	r2, r6
 801853c:	4629      	mov	r1, r5
 801853e:	a801      	add	r0, sp, #4
 8018540:	f7ff ff8a 	bl	8018458 <mbedtls_sha1_update>
    mbedtls_sha1_finish( &ctx, output );
 8018544:	4621      	mov	r1, r4
 8018546:	a801      	add	r0, sp, #4
 8018548:	f7ff ff8a 	bl	8018460 <mbedtls_sha1_finish>
    mbedtls_sha1_free( &ctx );
 801854c:	a801      	add	r0, sp, #4
 801854e:	f7ff f816 	bl	801757e <mbedtls_sha1_free>
}
 8018552:	b018      	add	sp, #96	; 0x60
 8018554:	bd70      	pop	{r4, r5, r6, pc}

08018556 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8018556:	226c      	movs	r2, #108	; 0x6c
 8018558:	2100      	movs	r1, #0
 801855a:	f009 bee8 	b.w	802232e <memset>

0801855e <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 801855e:	b120      	cbz	r0, 801856a <mbedtls_sha256_free+0xc>
 8018560:	f100 036c 	add.w	r3, r0, #108	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8018564:	2200      	movs	r2, #0
 8018566:	4298      	cmp	r0, r3
 8018568:	d100      	bne.n	801856c <mbedtls_sha256_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}
 801856a:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801856c:	7002      	strb	r2, [r0, #0]
 801856e:	3001      	adds	r0, #1
 8018570:	e7f9      	b.n	8018566 <mbedtls_sha256_free+0x8>

08018572 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8018572:	b508      	push	{r3, lr}
    *dst = *src;
 8018574:	226c      	movs	r2, #108	; 0x6c
 8018576:	f009 feb6 	bl	80222e6 <memcpy>
}
 801857a:	bd08      	pop	{r3, pc}

0801857c <mbedtls_sha256_starts>:
/*
 * SHA-256 context setup
 */
void mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 801857c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 801857e:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8018582:	b9b9      	cbnz	r1, 80185b4 <mbedtls_sha256_starts+0x38>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 8018584:	4a19      	ldr	r2, [pc, #100]	; (80185ec <mbedtls_sha256_starts+0x70>)
 8018586:	4b1a      	ldr	r3, [pc, #104]	; (80185f0 <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8018588:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8018618 <mbedtls_sha256_starts+0x9c>
        ctx->state[1] = 0xBB67AE85;
 801858c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 8018590:	4b18      	ldr	r3, [pc, #96]	; (80185f4 <mbedtls_sha256_starts+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 8018592:	4a19      	ldr	r2, [pc, #100]	; (80185f8 <mbedtls_sha256_starts+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 8018594:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 8018598:	4b18      	ldr	r3, [pc, #96]	; (80185fc <mbedtls_sha256_starts+0x80>)
 801859a:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 801859e:	4b18      	ldr	r3, [pc, #96]	; (8018600 <mbedtls_sha256_starts+0x84>)
 80185a0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 80185a2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80185a6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80185aa:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 80185ae:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 80185b0:	6681      	str	r1, [r0, #104]	; 0x68
}
 80185b2:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 80185b4:	4b13      	ldr	r3, [pc, #76]	; (8018604 <mbedtls_sha256_starts+0x88>)
 80185b6:	4a14      	ldr	r2, [pc, #80]	; (8018608 <mbedtls_sha256_starts+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 80185b8:	f8df c060 	ldr.w	ip, [pc, #96]	; 801861c <mbedtls_sha256_starts+0xa0>
        ctx->state[1] = 0x367CD507;
 80185bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 80185c0:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 80185c4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80185c8:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80185cc:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 80185ce:	4b0f      	ldr	r3, [pc, #60]	; (801860c <mbedtls_sha256_starts+0x90>)
 80185d0:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 80185d4:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 80185d8:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 80185dc:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80185e0:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 80185e2:	4b0b      	ldr	r3, [pc, #44]	; (8018610 <mbedtls_sha256_starts+0x94>)
 80185e4:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80185e6:	4b0b      	ldr	r3, [pc, #44]	; (8018614 <mbedtls_sha256_starts+0x98>)
 80185e8:	e7e1      	b.n	80185ae <mbedtls_sha256_starts+0x32>
 80185ea:	bf00      	nop
 80185ec:	6a09e667 	.word	0x6a09e667
 80185f0:	bb67ae85 	.word	0xbb67ae85
 80185f4:	a54ff53a 	.word	0xa54ff53a
 80185f8:	510e527f 	.word	0x510e527f
 80185fc:	9b05688c 	.word	0x9b05688c
 8018600:	1f83d9ab 	.word	0x1f83d9ab
 8018604:	367cd507 	.word	0x367cd507
 8018608:	c1059ed8 	.word	0xc1059ed8
 801860c:	ffc00b31 	.word	0xffc00b31
 8018610:	64f98fa7 	.word	0x64f98fa7
 8018614:	befa4fa4 	.word	0xbefa4fa4
 8018618:	3c6ef372 	.word	0x3c6ef372
 801861c:	f70e5939 	.word	0xf70e5939

08018620 <mbedtls_sha256_process>:
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

void mbedtls_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[64] )
{
 8018620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018624:	b0cf      	sub	sp, #316	; 0x13c
 8018626:	f100 0308 	add.w	r3, r0, #8
 801862a:	9304      	str	r3, [sp, #16]
 801862c:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 801862e:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 8018630:	ac06      	add	r4, sp, #24
 8018632:	f852 0b04 	ldr.w	r0, [r2], #4
 8018636:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 801863a:	3301      	adds	r3, #1
 801863c:	2b08      	cmp	r3, #8
 801863e:	d1f7      	bne.n	8018630 <mbedtls_sha256_process+0x10>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8018640:	2200      	movs	r2, #0
        GET_UINT32_BE( W[i], data, 4 * i );
 8018642:	784b      	ldrb	r3, [r1, #1]
 8018644:	7808      	ldrb	r0, [r1, #0]
 8018646:	041b      	lsls	r3, r3, #16
 8018648:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801864c:	78c8      	ldrb	r0, [r1, #3]
 801864e:	4303      	orrs	r3, r0
 8018650:	7888      	ldrb	r0, [r1, #2]
 8018652:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8018656:	a80e      	add	r0, sp, #56	; 0x38
 8018658:	3104      	adds	r1, #4
 801865a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 801865e:	3201      	adds	r2, #1
 8018660:	2a10      	cmp	r2, #16
 8018662:	d1ee      	bne.n	8018642 <mbedtls_sha256_process+0x22>
 8018664:	4da1      	ldr	r5, [pc, #644]	; (80188ec <mbedtls_sha256_process+0x2cc>)
 8018666:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801866a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801866c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801866e:	9b08      	ldr	r3, [sp, #32]
 8018670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018672:	9a07      	ldr	r2, [sp, #28]
 8018674:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8018678:	9f06      	ldr	r7, [sp, #24]
 801867a:	9500      	str	r5, [sp, #0]
 801867c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8018680:	46da      	mov	sl, fp
 8018682:	46a8      	mov	r8, r5

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018684:	f8d8 5000 	ldr.w	r5, [r8]
 8018688:	f8da 6000 	ldr.w	r6, [sl]
 801868c:	ea4f 2cf9 	mov.w	ip, r9, ror #11
 8018690:	ea8c 1cb9 	eor.w	ip, ip, r9, ror #6
 8018694:	4435      	add	r5, r6
 8018696:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 801869a:	44ac      	add	ip, r5
 801869c:	ea80 0501 	eor.w	r5, r0, r1
 80186a0:	ea05 0509 	and.w	r5, r5, r9
 80186a4:	4045      	eors	r5, r0
 80186a6:	44ac      	add	ip, r5
 80186a8:	ea47 0602 	orr.w	r6, r7, r2
 80186ac:	ea4f 3577 	mov.w	r5, r7, ror #13
 80186b0:	44e6      	add	lr, ip
 80186b2:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 80186b6:	ea07 0c02 	and.w	ip, r7, r2
 80186ba:	401e      	ands	r6, r3
 80186bc:	ea85 55b7 	eor.w	r5, r5, r7, ror #22
 80186c0:	ea46 060c 	orr.w	r6, r6, ip
 80186c4:	442e      	add	r6, r5
 80186c6:	4474      	add	r4, lr
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80186c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80186cc:	44b6      	add	lr, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80186ce:	f8da 6004 	ldr.w	r6, [sl, #4]
 80186d2:	4435      	add	r5, r6
 80186d4:	4405      	add	r5, r0
 80186d6:	ea89 0001 	eor.w	r0, r9, r1
 80186da:	4020      	ands	r0, r4
 80186dc:	ea80 0c01 	eor.w	ip, r0, r1
 80186e0:	eb05 000c 	add.w	r0, r5, ip
 80186e4:	ea4f 25f4 	mov.w	r5, r4, ror #11
 80186e8:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
 80186ec:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 80186f0:	4405      	add	r5, r0
 80186f2:	ea4e 0607 	orr.w	r6, lr, r7
 80186f6:	ea4f 307e 	mov.w	r0, lr, ror #13
 80186fa:	ea0e 0c07 	and.w	ip, lr, r7
 80186fe:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8018702:	4016      	ands	r6, r2
 8018704:	ea46 060c 	orr.w	r6, r6, ip
 8018708:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 801870c:	4430      	add	r0, r6
 801870e:	4428      	add	r0, r5
 8018710:	442b      	add	r3, r5
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018712:	f8da 6008 	ldr.w	r6, [sl, #8]
 8018716:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801871a:	4435      	add	r5, r6
 801871c:	440d      	add	r5, r1
 801871e:	ea84 0109 	eor.w	r1, r4, r9
 8018722:	4019      	ands	r1, r3
 8018724:	ea81 0c09 	eor.w	ip, r1, r9
 8018728:	eb05 010c 	add.w	r1, r5, ip
 801872c:	ea4f 25f3 	mov.w	r5, r3, ror #11
 8018730:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 8018734:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 8018738:	440d      	add	r5, r1
 801873a:	ea4e 0600 	orr.w	r6, lr, r0
 801873e:	ea4f 3170 	mov.w	r1, r0, ror #13
 8018742:	ea0e 0c00 	and.w	ip, lr, r0
 8018746:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 801874a:	403e      	ands	r6, r7
 801874c:	ea46 060c 	orr.w	r6, r6, ip
 8018750:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8018754:	4431      	add	r1, r6
 8018756:	4429      	add	r1, r5
 8018758:	442a      	add	r2, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 801875a:	f8da 600c 	ldr.w	r6, [sl, #12]
 801875e:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8018762:	4435      	add	r5, r6
 8018764:	44a9      	add	r9, r5
 8018766:	ea84 0503 	eor.w	r5, r4, r3
 801876a:	4015      	ands	r5, r2
 801876c:	ea85 0c04 	eor.w	ip, r5, r4
 8018770:	eb09 050c 	add.w	r5, r9, ip
 8018774:	ea4f 29f2 	mov.w	r9, r2, ror #11
 8018778:	ea89 19b2 	eor.w	r9, r9, r2, ror #6
 801877c:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8018780:	44a9      	add	r9, r5
 8018782:	ea40 0601 	orr.w	r6, r0, r1
 8018786:	ea4f 3571 	mov.w	r5, r1, ror #13
 801878a:	eb07 0c09 	add.w	ip, r7, r9
 801878e:	ea85 05b1 	eor.w	r5, r5, r1, ror #2
 8018792:	ea00 0701 	and.w	r7, r0, r1
 8018796:	ea06 060e 	and.w	r6, r6, lr
 801879a:	433e      	orrs	r6, r7
 801879c:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80187a0:	f8da 7010 	ldr.w	r7, [sl, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80187a4:	4435      	add	r5, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80187a6:	f8d8 6010 	ldr.w	r6, [r8, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80187aa:	444d      	add	r5, r9
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80187ac:	443e      	add	r6, r7
 80187ae:	ea83 0902 	eor.w	r9, r3, r2
 80187b2:	4434      	add	r4, r6
 80187b4:	ea09 090c 	and.w	r9, r9, ip
 80187b8:	ea4f 26fc 	mov.w	r6, ip, ror #11
 80187bc:	ea89 0903 	eor.w	r9, r9, r3
 80187c0:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 80187c4:	444c      	add	r4, r9
 80187c6:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 80187ca:	4426      	add	r6, r4
 80187cc:	ea41 0705 	orr.w	r7, r1, r5
 80187d0:	ea4f 3475 	mov.w	r4, r5, ror #13
 80187d4:	ea01 0905 	and.w	r9, r1, r5
 80187d8:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 80187dc:	4007      	ands	r7, r0
 80187de:	ea47 0709 	orr.w	r7, r7, r9
 80187e2:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 80187e6:	443c      	add	r4, r7
 80187e8:	4434      	add	r4, r6
 80187ea:	44b6      	add	lr, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80187ec:	f8d8 7014 	ldr.w	r7, [r8, #20]
 80187f0:	f8da 6014 	ldr.w	r6, [sl, #20]
 80187f4:	443e      	add	r6, r7
 80187f6:	4433      	add	r3, r6
 80187f8:	ea82 060c 	eor.w	r6, r2, ip
 80187fc:	ea06 060e 	and.w	r6, r6, lr
 8018800:	4056      	eors	r6, r2
 8018802:	4433      	add	r3, r6
 8018804:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8018808:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 801880c:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 8018810:	441e      	add	r6, r3
 8018812:	ea45 0704 	orr.w	r7, r5, r4
 8018816:	ea4f 3374 	mov.w	r3, r4, ror #13
 801881a:	ea05 0904 	and.w	r9, r5, r4
 801881e:	400f      	ands	r7, r1
 8018820:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 8018824:	ea47 0709 	orr.w	r7, r7, r9
 8018828:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 801882c:	443b      	add	r3, r7
 801882e:	4433      	add	r3, r6
 8018830:	4430      	add	r0, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8018832:	f8d8 7018 	ldr.w	r7, [r8, #24]
 8018836:	f8da 6018 	ldr.w	r6, [sl, #24]
 801883a:	ea8c 090e 	eor.w	r9, ip, lr
 801883e:	443e      	add	r6, r7
 8018840:	4432      	add	r2, r6
 8018842:	ea09 0900 	and.w	r9, r9, r0
 8018846:	ea4f 26f0 	mov.w	r6, r0, ror #11
 801884a:	ea89 090c 	eor.w	r9, r9, ip
 801884e:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 8018852:	444a      	add	r2, r9
 8018854:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 8018858:	4416      	add	r6, r2
 801885a:	ea44 0703 	orr.w	r7, r4, r3
 801885e:	ea4f 3273 	mov.w	r2, r3, ror #13
 8018862:	402f      	ands	r7, r5
 8018864:	ea04 0903 	and.w	r9, r4, r3
 8018868:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 801886c:	ea47 0709 	orr.w	r7, r7, r9
 8018870:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8018874:	443a      	add	r2, r7
 8018876:	4432      	add	r2, r6
 8018878:	4431      	add	r1, r6
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 801887a:	f8da 701c 	ldr.w	r7, [sl, #28]
 801887e:	f8d8 601c 	ldr.w	r6, [r8, #28]
 8018882:	ea8e 0900 	eor.w	r9, lr, r0
 8018886:	443e      	add	r6, r7
 8018888:	ea09 0901 	and.w	r9, r9, r1
 801888c:	ea4f 27f1 	mov.w	r7, r1, ror #11
 8018890:	44b4      	add	ip, r6
 8018892:	ea89 090e 	eor.w	r9, r9, lr
 8018896:	ea87 17b1 	eor.w	r7, r7, r1, ror #6
 801889a:	44cc      	add	ip, r9
 801889c:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 80188a0:	44bc      	add	ip, r7
 80188a2:	eb05 090c 	add.w	r9, r5, ip
 80188a6:	ea4f 3772 	mov.w	r7, r2, ror #13
 80188aa:	ea43 0502 	orr.w	r5, r3, r2
 80188ae:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80188b2:	4025      	ands	r5, r4
 80188b4:	ea03 0602 	and.w	r6, r3, r2
 80188b8:	4335      	orrs	r5, r6
 80188ba:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80188be:	442f      	add	r7, r5
    for( i = 0; i < 16; i += 8 )
 80188c0:	4d0b      	ldr	r5, [pc, #44]	; (80188f0 <mbedtls_sha256_process+0x2d0>)
 80188c2:	f108 0820 	add.w	r8, r8, #32
 80188c6:	4545      	cmp	r5, r8
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80188c8:	4467      	add	r7, ip
 80188ca:	f10a 0a20 	add.w	sl, sl, #32
    for( i = 0; i < 16; i += 8 )
 80188ce:	f47f aed9 	bne.w	8018684 <mbedtls_sha256_process+0x64>
 80188d2:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 80188d6:	e9cd 7206 	strd	r7, r2, [sp, #24]
 80188da:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80188de:	ad3e      	add	r5, sp, #248	; 0xf8
 80188e0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80188e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80188e8:	9505      	str	r5, [sp, #20]
 80188ea:	e003      	b.n	80188f4 <mbedtls_sha256_process+0x2d4>
 80188ec:	0802c1e8 	.word	0x0802c1e8
 80188f0:	0802c228 	.word	0x0802c228
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80188f4:	f8db 5038 	ldr.w	r5, [fp, #56]	; 0x38
 80188f8:	f8db c004 	ldr.w	ip, [fp, #4]
 80188fc:	f8db 6000 	ldr.w	r6, [fp]
 8018900:	ea4f 48f5 	mov.w	r8, r5, ror #19
 8018904:	ea88 4875 	eor.w	r8, r8, r5, ror #17
 8018908:	ea88 2895 	eor.w	r8, r8, r5, lsr #10
 801890c:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
 8018910:	ea4f 4abc 	mov.w	sl, ip, ror #18
 8018914:	4435      	add	r5, r6
 8018916:	ea8a 1afc 	eor.w	sl, sl, ip, ror #7
 801891a:	ea8a 0adc 	eor.w	sl, sl, ip, lsr #3
 801891e:	44a8      	add	r8, r5
 8018920:	ea4f 26f9 	mov.w	r6, r9, ror #11
 8018924:	eb08 050a 	add.w	r5, r8, sl
 8018928:	ea86 16b9 	eor.w	r6, r6, r9, ror #6
 801892c:	9503      	str	r5, [sp, #12]
 801892e:	ea86 6579 	eor.w	r5, r6, r9, ror #25
 8018932:	ea80 0601 	eor.w	r6, r0, r1
 8018936:	ea06 0609 	and.w	r6, r6, r9
 801893a:	4046      	eors	r6, r0
 801893c:	442e      	add	r6, r5
 801893e:	9d00      	ldr	r5, [sp, #0]
 8018940:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8018942:	4435      	add	r5, r6
 8018944:	9e03      	ldr	r6, [sp, #12]
 8018946:	f8cb 6040 	str.w	r6, [fp, #64]	; 0x40
 801894a:	4435      	add	r5, r6
 801894c:	44ae      	add	lr, r5
 801894e:	eb04 080e 	add.w	r8, r4, lr
 8018952:	ea47 0502 	orr.w	r5, r7, r2
 8018956:	ea4f 3477 	mov.w	r4, r7, ror #13
 801895a:	ea07 0602 	and.w	r6, r7, r2
 801895e:	ea84 04b7 	eor.w	r4, r4, r7, ror #2
 8018962:	401d      	ands	r5, r3
 8018964:	ea84 54b7 	eor.w	r4, r4, r7, ror #22
 8018968:	4335      	orrs	r5, r6
 801896a:	4425      	add	r5, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 801896c:	f8db 403c 	ldr.w	r4, [fp, #60]	; 0x3c
 8018970:	f8db 6008 	ldr.w	r6, [fp, #8]
 8018974:	ea4f 4af4 	mov.w	sl, r4, ror #19
 8018978:	ea8a 4a74 	eor.w	sl, sl, r4, ror #17
 801897c:	ea8a 2a94 	eor.w	sl, sl, r4, lsr #10
 8018980:	f8db 4028 	ldr.w	r4, [fp, #40]	; 0x28
 8018984:	4464      	add	r4, ip
 8018986:	44a2      	add	sl, r4
 8018988:	9c00      	ldr	r4, [sp, #0]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 801898a:	44ae      	add	lr, r5
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 801898c:	ea4f 45b6 	mov.w	r5, r6, ror #18
 8018990:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
 8018994:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8018996:	ea89 0c01 	eor.w	ip, r9, r1
 801899a:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 801899e:	4455      	add	r5, sl
 80189a0:	ea0c 0c08 	and.w	ip, ip, r8
 80189a4:	4404      	add	r4, r0
 80189a6:	ea4f 20f8 	mov.w	r0, r8, ror #11
 80189aa:	442c      	add	r4, r5
 80189ac:	ea8c 0c01 	eor.w	ip, ip, r1
 80189b0:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
 80189b4:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 80189b8:	44a4      	add	ip, r4
 80189ba:	eb00 040c 	add.w	r4, r0, ip
 80189be:	4423      	add	r3, r4
 80189c0:	9301      	str	r3, [sp, #4]
 80189c2:	ea4f 307e 	mov.w	r0, lr, ror #13
 80189c6:	ea47 030e 	orr.w	r3, r7, lr
 80189ca:	ea07 0c0e 	and.w	ip, r7, lr
 80189ce:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80189d2:	4013      	ands	r3, r2
 80189d4:	ea43 030c 	orr.w	r3, r3, ip
 80189d8:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80189dc:	4418      	add	r0, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80189de:	9b03      	ldr	r3, [sp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80189e0:	f8cb 5044 	str.w	r5, [fp, #68]	; 0x44
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80189e4:	ea4f 4cf3 	mov.w	ip, r3, ror #19
 80189e8:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80189ec:	4420      	add	r0, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80189ee:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 80189f2:	f8db 400c 	ldr.w	r4, [fp, #12]
 80189f6:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 80189fa:	441e      	add	r6, r3
 80189fc:	ea4f 43b4 	mov.w	r3, r4, ror #18
 8018a00:	ea83 13f4 	eor.w	r3, r3, r4, ror #7
 8018a04:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
 8018a08:	4466      	add	r6, ip
 8018a0a:	441e      	add	r6, r3
 8018a0c:	9b01      	ldr	r3, [sp, #4]
 8018a0e:	f8cb 6048 	str.w	r6, [fp, #72]	; 0x48
 8018a12:	ea89 0c08 	eor.w	ip, r9, r8
 8018a16:	ea0c 0c03 	and.w	ip, ip, r3
 8018a1a:	9b00      	ldr	r3, [sp, #0]
 8018a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a1e:	440b      	add	r3, r1
 8018a20:	4433      	add	r3, r6
 8018a22:	ea8c 0c09 	eor.w	ip, ip, r9
 8018a26:	449c      	add	ip, r3
 8018a28:	9b01      	ldr	r3, [sp, #4]
 8018a2a:	ea4f 21f3 	mov.w	r1, r3, ror #11
 8018a2e:	ea81 11b3 	eor.w	r1, r1, r3, ror #6
 8018a32:	ea81 6173 	eor.w	r1, r1, r3, ror #25
 8018a36:	eb01 030c 	add.w	r3, r1, ip
 8018a3a:	441a      	add	r2, r3
 8018a3c:	9202      	str	r2, [sp, #8]
 8018a3e:	ea4f 3170 	mov.w	r1, r0, ror #13
 8018a42:	ea4e 0200 	orr.w	r2, lr, r0
 8018a46:	ea0e 0c00 	and.w	ip, lr, r0
 8018a4a:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8018a4e:	403a      	ands	r2, r7
 8018a50:	ea42 020c 	orr.w	r2, r2, ip
 8018a54:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8018a58:	4411      	add	r1, r2
 8018a5a:	4419      	add	r1, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018a5c:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8018a60:	f8db 2010 	ldr.w	r2, [fp, #16]
 8018a64:	ea4f 4cf5 	mov.w	ip, r5, ror #19
 8018a68:	441c      	add	r4, r3
 8018a6a:	ea8c 4c75 	eor.w	ip, ip, r5, ror #17
 8018a6e:	9b01      	ldr	r3, [sp, #4]
 8018a70:	ea8c 2595 	eor.w	r5, ip, r5, lsr #10
 8018a74:	4425      	add	r5, r4
 8018a76:	ea88 0403 	eor.w	r4, r8, r3
 8018a7a:	9b02      	ldr	r3, [sp, #8]
 8018a7c:	401c      	ands	r4, r3
 8018a7e:	9b00      	ldr	r3, [sp, #0]
 8018a80:	ea4f 4cb2 	mov.w	ip, r2, ror #18
 8018a84:	ea8c 1cf2 	eor.w	ip, ip, r2, ror #7
 8018a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a8a:	ea8c 0cd2 	eor.w	ip, ip, r2, lsr #3
 8018a8e:	44ac      	add	ip, r5
 8018a90:	444b      	add	r3, r9
 8018a92:	4463      	add	r3, ip
 8018a94:	ea84 0408 	eor.w	r4, r4, r8
 8018a98:	f8cb c04c 	str.w	ip, [fp, #76]	; 0x4c
 8018a9c:	441c      	add	r4, r3
 8018a9e:	9b02      	ldr	r3, [sp, #8]
 8018aa0:	ea4f 25f3 	mov.w	r5, r3, ror #11
 8018aa4:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 8018aa8:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 8018aac:	192b      	adds	r3, r5, r4
 8018aae:	ea40 0501 	orr.w	r5, r0, r1
 8018ab2:	ea00 0401 	and.w	r4, r0, r1
 8018ab6:	ea05 050e 	and.w	r5, r5, lr
 8018aba:	4325      	orrs	r5, r4
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018abc:	ea4f 44f6 	mov.w	r4, r6, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018ac0:	ea4f 3971 	mov.w	r9, r1, ror #13
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018ac4:	ea84 4476 	eor.w	r4, r4, r6, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018ac8:	ea89 09b1 	eor.w	r9, r9, r1, ror #2
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018acc:	ea84 2696 	eor.w	r6, r4, r6, lsr #10
 8018ad0:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018ad4:	eb07 0a03 	add.w	sl, r7, r3
 8018ad8:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018adc:	f8db 7014 	ldr.w	r7, [fp, #20]
 8018ae0:	4422      	add	r2, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018ae2:	444d      	add	r5, r9
 8018ae4:	441d      	add	r5, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018ae6:	4416      	add	r6, r2
 8018ae8:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8018aec:	ea4f 42b7 	mov.w	r2, r7, ror #18
 8018af0:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 8018af4:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 8018af8:	4432      	add	r2, r6
 8018afa:	ea83 0604 	eor.w	r6, r3, r4
 8018afe:	ea06 060a 	and.w	r6, r6, sl
 8018b02:	405e      	eors	r6, r3
 8018b04:	9b00      	ldr	r3, [sp, #0]
 8018b06:	f8cb 2050 	str.w	r2, [fp, #80]	; 0x50
 8018b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b0c:	ea4f 24fa 	mov.w	r4, sl, ror #11
 8018b10:	4413      	add	r3, r2
 8018b12:	4443      	add	r3, r8
 8018b14:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
 8018b18:	441e      	add	r6, r3
 8018b1a:	ea84 647a 	eor.w	r4, r4, sl, ror #25
 8018b1e:	19a3      	adds	r3, r4, r6
 8018b20:	ea41 0605 	orr.w	r6, r1, r5
 8018b24:	ea4f 3475 	mov.w	r4, r5, ror #13
 8018b28:	ea01 0805 	and.w	r8, r1, r5
 8018b2c:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 8018b30:	4006      	ands	r6, r0
 8018b32:	ea46 0608 	orr.w	r6, r6, r8
 8018b36:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 8018b3a:	4434      	add	r4, r6
 8018b3c:	441c      	add	r4, r3
 8018b3e:	449e      	add	lr, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8018b40:	f8db 8018 	ldr.w	r8, [fp, #24]
 8018b44:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8018b48:	ea4f 46fc 	mov.w	r6, ip, ror #19
 8018b4c:	ea86 467c 	eor.w	r6, r6, ip, ror #17
 8018b50:	ea86 2c9c 	eor.w	ip, r6, ip, lsr #10
 8018b54:	19de      	adds	r6, r3, r7
 8018b56:	ea4f 43b8 	mov.w	r3, r8, ror #18
 8018b5a:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
 8018b5e:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
 8018b62:	4466      	add	r6, ip
 8018b64:	441e      	add	r6, r3
 8018b66:	9b02      	ldr	r3, [sp, #8]
 8018b68:	9f01      	ldr	r7, [sp, #4]
 8018b6a:	f8cb 6054 	str.w	r6, [fp, #84]	; 0x54
 8018b6e:	ea83 0c0a 	eor.w	ip, r3, sl
 8018b72:	ea0c 0c0e 	and.w	ip, ip, lr
 8018b76:	ea8c 0c03 	eor.w	ip, ip, r3
 8018b7a:	9b00      	ldr	r3, [sp, #0]
 8018b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b7e:	4433      	add	r3, r6
 8018b80:	443b      	add	r3, r7
 8018b82:	449c      	add	ip, r3
 8018b84:	ea4f 23fe 	mov.w	r3, lr, ror #11
 8018b88:	ea83 13be 	eor.w	r3, r3, lr, ror #6
 8018b8c:	ea83 637e 	eor.w	r3, r3, lr, ror #25
 8018b90:	eb03 070c 	add.w	r7, r3, ip
 8018b94:	ea45 0c04 	orr.w	ip, r5, r4
 8018b98:	ea4f 3374 	mov.w	r3, r4, ror #13
 8018b9c:	ea05 0904 	and.w	r9, r5, r4
 8018ba0:	ea0c 0c01 	and.w	ip, ip, r1
 8018ba4:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 8018ba8:	ea4c 0c09 	orr.w	ip, ip, r9
 8018bac:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 8018bb0:	4463      	add	r3, ip
 8018bb2:	443b      	add	r3, r7
 8018bb4:	4438      	add	r0, r7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8018bb6:	f8db 701c 	ldr.w	r7, [fp, #28]
 8018bba:	9701      	str	r7, [sp, #4]
 8018bbc:	ea4f 4cf2 	mov.w	ip, r2, ror #19
 8018bc0:	f8db 703c 	ldr.w	r7, [fp, #60]	; 0x3c
 8018bc4:	ea8c 4c72 	eor.w	ip, ip, r2, ror #17
 8018bc8:	ea8c 2292 	eor.w	r2, ip, r2, lsr #10
 8018bcc:	44b8      	add	r8, r7
 8018bce:	4490      	add	r8, r2
 8018bd0:	9a01      	ldr	r2, [sp, #4]
 8018bd2:	9f01      	ldr	r7, [sp, #4]
 8018bd4:	ea4f 42b2 	mov.w	r2, r2, ror #18
 8018bd8:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 8018bdc:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 8018be0:	4490      	add	r8, r2
 8018be2:	9a00      	ldr	r2, [sp, #0]
 8018be4:	9f02      	ldr	r7, [sp, #8]
 8018be6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8018be8:	f8cb 8058 	str.w	r8, [fp, #88]	; 0x58
 8018bec:	ea8a 090e 	eor.w	r9, sl, lr
 8018bf0:	4442      	add	r2, r8
 8018bf2:	ea09 0900 	and.w	r9, r9, r0
 8018bf6:	ea4f 2cf0 	mov.w	ip, r0, ror #11
 8018bfa:	ea89 090a 	eor.w	r9, r9, sl
 8018bfe:	443a      	add	r2, r7
 8018c00:	ea8c 1cb0 	eor.w	ip, ip, r0, ror #6
 8018c04:	444a      	add	r2, r9
 8018c06:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
 8018c0a:	4494      	add	ip, r2
 8018c0c:	ea44 0803 	orr.w	r8, r4, r3
 8018c10:	ea4f 3273 	mov.w	r2, r3, ror #13
 8018c14:	ea08 0805 	and.w	r8, r8, r5
 8018c18:	ea04 0903 	and.w	r9, r4, r3
 8018c1c:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 8018c20:	ea48 0809 	orr.w	r8, r8, r9
 8018c24:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8018c28:	4442      	add	r2, r8
 8018c2a:	4462      	add	r2, ip
 8018c2c:	4461      	add	r1, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8018c2e:	ea4f 4cf6 	mov.w	ip, r6, ror #19
 8018c32:	ea8c 4c76 	eor.w	ip, ip, r6, ror #17
 8018c36:	f8db 8020 	ldr.w	r8, [fp, #32]
 8018c3a:	9f03      	ldr	r7, [sp, #12]
 8018c3c:	ea8c 2c96 	eor.w	ip, ip, r6, lsr #10
 8018c40:	9e01      	ldr	r6, [sp, #4]
 8018c42:	443e      	add	r6, r7
 8018c44:	ea4f 47b8 	mov.w	r7, r8, ror #18
 8018c48:	ea87 17f8 	eor.w	r7, r7, r8, ror #7
 8018c4c:	ea87 08d8 	eor.w	r8, r7, r8, lsr #3
 8018c50:	9f00      	ldr	r7, [sp, #0]
 8018c52:	4466      	add	r6, ip
 8018c54:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 8018c56:	4446      	add	r6, r8
 8018c58:	ea8e 0800 	eor.w	r8, lr, r0
 8018c5c:	4437      	add	r7, r6
 8018c5e:	ea08 0801 	and.w	r8, r8, r1
 8018c62:	ea4f 2cf1 	mov.w	ip, r1, ror #11
 8018c66:	4457      	add	r7, sl
 8018c68:	ea88 080e 	eor.w	r8, r8, lr
 8018c6c:	ea8c 1cb1 	eor.w	ip, ip, r1, ror #6
 8018c70:	44b8      	add	r8, r7
 8018c72:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 8018c76:	44c4      	add	ip, r8
 8018c78:	eb05 090c 	add.w	r9, r5, ip
 8018c7c:	ea4f 3772 	mov.w	r7, r2, ror #13
 8018c80:	ea43 0502 	orr.w	r5, r3, r2
 8018c84:	f8cb 605c 	str.w	r6, [fp, #92]	; 0x5c
 8018c88:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 8018c8c:	4025      	ands	r5, r4
 8018c8e:	ea03 0602 	and.w	r6, r3, r2
 8018c92:	4335      	orrs	r5, r6
 8018c94:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 8018c98:	442f      	add	r7, r5
 8018c9a:	9d00      	ldr	r5, [sp, #0]
 8018c9c:	3520      	adds	r5, #32
 8018c9e:	9500      	str	r5, [sp, #0]
    for( i = 16; i < 64; i += 8 )
 8018ca0:	9d05      	ldr	r5, [sp, #20]
 8018ca2:	f10b 0b20 	add.w	fp, fp, #32
 8018ca6:	455d      	cmp	r5, fp
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8018ca8:	4467      	add	r7, ip
    for( i = 16; i < 64; i += 8 )
 8018caa:	f47f ae23 	bne.w	80188f4 <mbedtls_sha256_process+0x2d4>
 8018cae:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 8018cb2:	e9cd 7206 	strd	r7, r2, [sp, #24]
 8018cb6:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8018cba:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8018cbe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8018cc2:	2300      	movs	r3, #0
        ctx->state[i] += A[i];
 8018cc4:	9a04      	ldr	r2, [sp, #16]
 8018cc6:	6811      	ldr	r1, [r2, #0]
 8018cc8:	aa06      	add	r2, sp, #24
 8018cca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018cce:	440a      	add	r2, r1
 8018cd0:	9904      	ldr	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 8018cd2:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 8018cd4:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
 8018cd8:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 8018cda:	9104      	str	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 8018cdc:	d1f2      	bne.n	8018cc4 <mbedtls_sha256_process+0x6a4>
}
 8018cde:	b04f      	add	sp, #316	; 0x13c
 8018ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ce4 <mbedtls_sha256_update.part.0>:
#endif /* !MBEDTLS_SHA256_PROCESS_ALT */

/*
 * SHA-256 process buffer
 */
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 8018ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 8018ce8:	6803      	ldr	r3, [r0, #0]
 8018cea:	f003 073f 	and.w	r7, r3, #63	; 0x3f
 8018cee:	189b      	adds	r3, r3, r2
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8018cf0:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8018cf2:	bf24      	itt	cs
 8018cf4:	6843      	ldrcs	r3, [r0, #4]
 8018cf6:	3301      	addcs	r3, #1
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 8018cf8:	4604      	mov	r4, r0
 8018cfa:	460e      	mov	r6, r1
 8018cfc:	4615      	mov	r5, r2
        ctx->total[1]++;
 8018cfe:	bf28      	it	cs
 8018d00:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8018d02:	b197      	cbz	r7, 8018d2a <mbedtls_sha256_update.part.0+0x46>
    fill = 64 - left;
 8018d04:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 8018d08:	4590      	cmp	r8, r2
 8018d0a:	d80e      	bhi.n	8018d2a <mbedtls_sha256_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8018d0c:	f100 0928 	add.w	r9, r0, #40	; 0x28
 8018d10:	4642      	mov	r2, r8
 8018d12:	eb09 0007 	add.w	r0, r9, r7
 8018d16:	f009 fae6 	bl	80222e6 <memcpy>
        mbedtls_sha256_process( ctx, ctx->buffer );
 8018d1a:	4649      	mov	r1, r9
 8018d1c:	4620      	mov	r0, r4
 8018d1e:	f7ff fc7f 	bl	8018620 <mbedtls_sha256_process>
        input += fill;
 8018d22:	4446      	add	r6, r8
        ilen  -= fill;
 8018d24:	eba5 0508 	sub.w	r5, r5, r8
        left = 0;
 8018d28:	2700      	movs	r7, #0
 8018d2a:	46a8      	mov	r8, r5
 8018d2c:	eb06 0905 	add.w	r9, r6, r5
 8018d30:	e004      	b.n	8018d3c <mbedtls_sha256_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha256_process( ctx, input );
 8018d32:	4620      	mov	r0, r4
 8018d34:	f7ff fc74 	bl	8018620 <mbedtls_sha256_process>
        input += 64;
        ilen  -= 64;
 8018d38:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 8018d3c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8018d40:	eba9 0108 	sub.w	r1, r9, r8
 8018d44:	d8f5      	bhi.n	8018d32 <mbedtls_sha256_update.part.0+0x4e>
 8018d46:	09aa      	lsrs	r2, r5, #6
 8018d48:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8018d4c:	eb06 1182 	add.w	r1, r6, r2, lsl #6
 8018d50:	fb03 5202 	mla	r2, r3, r2, r5
    }

    if( ilen > 0 )
 8018d54:	b132      	cbz	r2, 8018d64 <mbedtls_sha256_update.part.0+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018d56:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018d5a:	4438      	add	r0, r7
}
 8018d5c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018d60:	f009 bac1 	b.w	80222e6 <memcpy>
}
 8018d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018d68 <mbedtls_sha256_update>:
    if( ilen == 0 )
 8018d68:	b10a      	cbz	r2, 8018d6e <mbedtls_sha256_update+0x6>
 8018d6a:	f7ff bfbb 	b.w	8018ce4 <mbedtls_sha256_update.part.0>
}
 8018d6e:	4770      	bx	lr

08018d70 <mbedtls_sha256_finish>:

/*
 * SHA-256 final digest
 */
void mbedtls_sha256_finish( mbedtls_sha256_context *ctx, unsigned char output[32] )
{
 8018d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d72:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8018d74:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8018d78:	0f53      	lsrs	r3, r2, #29
 8018d7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
{
 8018d7e:	4604      	mov	r4, r0
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8018d80:	0e18      	lsrs	r0, r3, #24
    low  = ( ctx->total[0] <<  3 );
 8018d82:	00d1      	lsls	r1, r2, #3
    PUT_UINT32_BE( high, msglen, 0 );
 8018d84:	f88d 0000 	strb.w	r0, [sp]
 8018d88:	0c18      	lsrs	r0, r3, #16
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 8018d8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    PUT_UINT32_BE( high, msglen, 0 );
 8018d8e:	f88d 0001 	strb.w	r0, [sp, #1]
 8018d92:	f88d 3003 	strb.w	r3, [sp, #3]
 8018d96:	0a18      	lsrs	r0, r3, #8
    PUT_UINT32_BE( low,  msglen, 4 );
 8018d98:	0e0b      	lsrs	r3, r1, #24
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018d9a:	2a37      	cmp	r2, #55	; 0x37
    PUT_UINT32_BE( low,  msglen, 4 );
 8018d9c:	f88d 3004 	strb.w	r3, [sp, #4]
 8018da0:	ea4f 4311 	mov.w	r3, r1, lsr #16
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018da4:	bf94      	ite	ls
 8018da6:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 8018daa:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
    PUT_UINT32_BE( high, msglen, 0 );
 8018dae:	f88d 0002 	strb.w	r0, [sp, #2]
    PUT_UINT32_BE( low,  msglen, 4 );
 8018db2:	f88d 3005 	strb.w	r3, [sp, #5]
 8018db6:	f88d 1007 	strb.w	r1, [sp, #7]
 8018dba:	0a0b      	lsrs	r3, r1, #8

    mbedtls_sha256_update( ctx, sha256_padding, padn );
 8018dbc:	4620      	mov	r0, r4
 8018dbe:	492c      	ldr	r1, [pc, #176]	; (8018e70 <mbedtls_sha256_finish+0x100>)
    PUT_UINT32_BE( low,  msglen, 4 );
 8018dc0:	f88d 3006 	strb.w	r3, [sp, #6]
    mbedtls_sha256_update( ctx, sha256_padding, padn );
 8018dc4:	f7ff ffd0 	bl	8018d68 <mbedtls_sha256_update>
 8018dc8:	2208      	movs	r2, #8
 8018dca:	4669      	mov	r1, sp
 8018dcc:	4620      	mov	r0, r4
 8018dce:	f7ff ff89 	bl	8018ce4 <mbedtls_sha256_update.part.0>
    mbedtls_sha256_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8018dd2:	7ae3      	ldrb	r3, [r4, #11]
 8018dd4:	702b      	strb	r3, [r5, #0]
 8018dd6:	8963      	ldrh	r3, [r4, #10]
 8018dd8:	706b      	strb	r3, [r5, #1]
 8018dda:	68a3      	ldr	r3, [r4, #8]
 8018ddc:	0a1b      	lsrs	r3, r3, #8
 8018dde:	70ab      	strb	r3, [r5, #2]
 8018de0:	68a3      	ldr	r3, [r4, #8]
 8018de2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8018de4:	7be3      	ldrb	r3, [r4, #15]
 8018de6:	712b      	strb	r3, [r5, #4]
 8018de8:	89e3      	ldrh	r3, [r4, #14]
 8018dea:	716b      	strb	r3, [r5, #5]
 8018dec:	68e3      	ldr	r3, [r4, #12]
 8018dee:	0a1b      	lsrs	r3, r3, #8
 8018df0:	71ab      	strb	r3, [r5, #6]
 8018df2:	68e3      	ldr	r3, [r4, #12]
 8018df4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8018df6:	7ce3      	ldrb	r3, [r4, #19]
 8018df8:	722b      	strb	r3, [r5, #8]
 8018dfa:	8a63      	ldrh	r3, [r4, #18]
 8018dfc:	726b      	strb	r3, [r5, #9]
 8018dfe:	6923      	ldr	r3, [r4, #16]
 8018e00:	0a1b      	lsrs	r3, r3, #8
 8018e02:	72ab      	strb	r3, [r5, #10]
 8018e04:	6923      	ldr	r3, [r4, #16]
 8018e06:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8018e08:	7de3      	ldrb	r3, [r4, #23]
 8018e0a:	732b      	strb	r3, [r5, #12]
 8018e0c:	8ae3      	ldrh	r3, [r4, #22]
 8018e0e:	736b      	strb	r3, [r5, #13]
 8018e10:	6963      	ldr	r3, [r4, #20]
 8018e12:	0a1b      	lsrs	r3, r3, #8
 8018e14:	73ab      	strb	r3, [r5, #14]
 8018e16:	6963      	ldr	r3, [r4, #20]
 8018e18:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8018e1a:	7ee3      	ldrb	r3, [r4, #27]
 8018e1c:	742b      	strb	r3, [r5, #16]
 8018e1e:	8b63      	ldrh	r3, [r4, #26]
 8018e20:	746b      	strb	r3, [r5, #17]
 8018e22:	69a3      	ldr	r3, [r4, #24]
 8018e24:	0a1b      	lsrs	r3, r3, #8
 8018e26:	74ab      	strb	r3, [r5, #18]
 8018e28:	69a3      	ldr	r3, [r4, #24]
 8018e2a:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8018e2c:	7fe3      	ldrb	r3, [r4, #31]
 8018e2e:	752b      	strb	r3, [r5, #20]
 8018e30:	8be3      	ldrh	r3, [r4, #30]
 8018e32:	756b      	strb	r3, [r5, #21]
 8018e34:	69e3      	ldr	r3, [r4, #28]
 8018e36:	0a1b      	lsrs	r3, r3, #8
 8018e38:	75ab      	strb	r3, [r5, #22]
 8018e3a:	69e3      	ldr	r3, [r4, #28]
 8018e3c:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8018e3e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8018e42:	762b      	strb	r3, [r5, #24]
 8018e44:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8018e46:	766b      	strb	r3, [r5, #25]
 8018e48:	6a23      	ldr	r3, [r4, #32]
 8018e4a:	0a1b      	lsrs	r3, r3, #8
 8018e4c:	76ab      	strb	r3, [r5, #26]
 8018e4e:	6a23      	ldr	r3, [r4, #32]
 8018e50:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8018e52:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8018e54:	b94b      	cbnz	r3, 8018e6a <mbedtls_sha256_finish+0xfa>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8018e56:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8018e5a:	772b      	strb	r3, [r5, #28]
 8018e5c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8018e5e:	776b      	strb	r3, [r5, #29]
 8018e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e62:	0a1b      	lsrs	r3, r3, #8
 8018e64:	77ab      	strb	r3, [r5, #30]
 8018e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e68:	77eb      	strb	r3, [r5, #31]
}
 8018e6a:	b003      	add	sp, #12
 8018e6c:	bd30      	pop	{r4, r5, pc}
 8018e6e:	bf00      	nop
 8018e70:	0802c2e8 	.word	0x0802c2e8

08018e74 <mbedtls_sha256>:
/*
 * output = SHA-256( input buffer )
 */
void mbedtls_sha256( const unsigned char *input, size_t ilen,
             unsigned char output[32], int is224 )
{
 8018e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e76:	b09d      	sub	sp, #116	; 0x74
 8018e78:	461f      	mov	r7, r3
 8018e7a:	4605      	mov	r5, r0
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8018e7c:	a801      	add	r0, sp, #4
{
 8018e7e:	4614      	mov	r4, r2
 8018e80:	460e      	mov	r6, r1
    mbedtls_sha256_init( &ctx );
 8018e82:	f7ff fb68 	bl	8018556 <mbedtls_sha256_init>
    mbedtls_sha256_starts( &ctx, is224 );
 8018e86:	4639      	mov	r1, r7
 8018e88:	a801      	add	r0, sp, #4
 8018e8a:	f7ff fb77 	bl	801857c <mbedtls_sha256_starts>
    mbedtls_sha256_update( &ctx, input, ilen );
 8018e8e:	4632      	mov	r2, r6
 8018e90:	4629      	mov	r1, r5
 8018e92:	a801      	add	r0, sp, #4
 8018e94:	f7ff ff68 	bl	8018d68 <mbedtls_sha256_update>
    mbedtls_sha256_finish( &ctx, output );
 8018e98:	4621      	mov	r1, r4
 8018e9a:	a801      	add	r0, sp, #4
 8018e9c:	f7ff ff68 	bl	8018d70 <mbedtls_sha256_finish>
    mbedtls_sha256_free( &ctx );
 8018ea0:	a801      	add	r0, sp, #4
 8018ea2:	f7ff fb5c 	bl	801855e <mbedtls_sha256_free>
}
 8018ea6:	b01d      	add	sp, #116	; 0x74
 8018ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018eaa <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8018eaa:	22d8      	movs	r2, #216	; 0xd8
 8018eac:	2100      	movs	r1, #0
 8018eae:	f009 ba3e 	b.w	802232e <memset>

08018eb2 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 8018eb2:	b120      	cbz	r0, 8018ebe <mbedtls_sha512_free+0xc>
 8018eb4:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8018eb8:	2200      	movs	r2, #0
 8018eba:	4298      	cmp	r0, r3
 8018ebc:	d100      	bne.n	8018ec0 <mbedtls_sha512_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}
 8018ebe:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8018ec0:	7002      	strb	r2, [r0, #0]
 8018ec2:	3001      	adds	r0, #1
 8018ec4:	e7f9      	b.n	8018eba <mbedtls_sha512_free+0x8>

08018ec6 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 8018ec6:	b508      	push	{r3, lr}
    *dst = *src;
 8018ec8:	22d8      	movs	r2, #216	; 0xd8
 8018eca:	f009 fa0c 	bl	80222e6 <memcpy>
}
 8018ece:	bd08      	pop	{r3, pc}

08018ed0 <mbedtls_sha512_starts>:
/*
 * SHA-512 context setup
 */
void mbedtls_sha512_starts( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 8018ed8:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 8018edc:	2900      	cmp	r1, #0
 8018ede:	d12a      	bne.n	8018f36 <mbedtls_sha512_starts+0x66>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 8018ee0:	a329      	add	r3, pc, #164	; (adr r3, 8018f88 <mbedtls_sha512_starts+0xb8>)
 8018ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee6:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 8018eea:	a329      	add	r3, pc, #164	; (adr r3, 8018f90 <mbedtls_sha512_starts+0xc0>)
 8018eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef0:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 8018ef4:	a328      	add	r3, pc, #160	; (adr r3, 8018f98 <mbedtls_sha512_starts+0xc8>)
 8018ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018efa:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 8018efe:	a328      	add	r3, pc, #160	; (adr r3, 8018fa0 <mbedtls_sha512_starts+0xd0>)
 8018f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f04:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 8018f08:	a327      	add	r3, pc, #156	; (adr r3, 8018fa8 <mbedtls_sha512_starts+0xd8>)
 8018f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f0e:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 8018f12:	a327      	add	r3, pc, #156	; (adr r3, 8018fb0 <mbedtls_sha512_starts+0xe0>)
 8018f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f18:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 8018f1c:	a326      	add	r3, pc, #152	; (adr r3, 8018fb8 <mbedtls_sha512_starts+0xe8>)
 8018f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f22:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 8018f26:	a326      	add	r3, pc, #152	; (adr r3, 8018fc0 <mbedtls_sha512_starts+0xf0>)
 8018f28:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 8018f2c:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 8018f30:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
}
 8018f34:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 8018f36:	a324      	add	r3, pc, #144	; (adr r3, 8018fc8 <mbedtls_sha512_starts+0xf8>)
 8018f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 8018f40:	a323      	add	r3, pc, #140	; (adr r3, 8018fd0 <mbedtls_sha512_starts+0x100>)
 8018f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f46:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 8018f4a:	a323      	add	r3, pc, #140	; (adr r3, 8018fd8 <mbedtls_sha512_starts+0x108>)
 8018f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f50:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 8018f54:	a322      	add	r3, pc, #136	; (adr r3, 8018fe0 <mbedtls_sha512_starts+0x110>)
 8018f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f5a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 8018f5e:	a322      	add	r3, pc, #136	; (adr r3, 8018fe8 <mbedtls_sha512_starts+0x118>)
 8018f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f64:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 8018f68:	a321      	add	r3, pc, #132	; (adr r3, 8018ff0 <mbedtls_sha512_starts+0x120>)
 8018f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f6e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 8018f72:	a321      	add	r3, pc, #132	; (adr r3, 8018ff8 <mbedtls_sha512_starts+0x128>)
 8018f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f78:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 8018f7c:	a320      	add	r3, pc, #128	; (adr r3, 8019000 <mbedtls_sha512_starts+0x130>)
 8018f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f82:	e7d3      	b.n	8018f2c <mbedtls_sha512_starts+0x5c>
 8018f84:	f3af 8000 	nop.w
 8018f88:	f3bcc908 	.word	0xf3bcc908
 8018f8c:	6a09e667 	.word	0x6a09e667
 8018f90:	84caa73b 	.word	0x84caa73b
 8018f94:	bb67ae85 	.word	0xbb67ae85
 8018f98:	fe94f82b 	.word	0xfe94f82b
 8018f9c:	3c6ef372 	.word	0x3c6ef372
 8018fa0:	5f1d36f1 	.word	0x5f1d36f1
 8018fa4:	a54ff53a 	.word	0xa54ff53a
 8018fa8:	ade682d1 	.word	0xade682d1
 8018fac:	510e527f 	.word	0x510e527f
 8018fb0:	2b3e6c1f 	.word	0x2b3e6c1f
 8018fb4:	9b05688c 	.word	0x9b05688c
 8018fb8:	fb41bd6b 	.word	0xfb41bd6b
 8018fbc:	1f83d9ab 	.word	0x1f83d9ab
 8018fc0:	137e2179 	.word	0x137e2179
 8018fc4:	5be0cd19 	.word	0x5be0cd19
 8018fc8:	c1059ed8 	.word	0xc1059ed8
 8018fcc:	cbbb9d5d 	.word	0xcbbb9d5d
 8018fd0:	367cd507 	.word	0x367cd507
 8018fd4:	629a292a 	.word	0x629a292a
 8018fd8:	3070dd17 	.word	0x3070dd17
 8018fdc:	9159015a 	.word	0x9159015a
 8018fe0:	f70e5939 	.word	0xf70e5939
 8018fe4:	152fecd8 	.word	0x152fecd8
 8018fe8:	ffc00b31 	.word	0xffc00b31
 8018fec:	67332667 	.word	0x67332667
 8018ff0:	68581511 	.word	0x68581511
 8018ff4:	8eb44a87 	.word	0x8eb44a87
 8018ff8:	64f98fa7 	.word	0x64f98fa7
 8018ffc:	db0c2e0d 	.word	0xdb0c2e0d
 8019000:	befa4fa4 	.word	0xbefa4fa4
 8019004:	47b5481d 	.word	0x47b5481d

08019008 <mbedtls_sha512_process>:
    UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

void mbedtls_sha512_process( mbedtls_sha512_context *ctx, const unsigned char data[128] )
{
 8019008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801900c:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8019010:	4686      	mov	lr, r0
 8019012:	f101 0680 	add.w	r6, r1, #128	; 0x80
 8019016:	a87e      	add	r0, sp, #504	; 0x1f8
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 8019018:	780a      	ldrb	r2, [r1, #0]
 801901a:	784c      	ldrb	r4, [r1, #1]
 801901c:	f891 9003 	ldrb.w	r9, [r1, #3]
 8019020:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8019024:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 8019028:	ea48 030b 	orr.w	r3, r8, fp
 801902c:	2500      	movs	r5, #0
 801902e:	79cc      	ldrb	r4, [r1, #7]
 8019030:	f04f 0a00 	mov.w	sl, #0
 8019034:	ea43 0805 	orr.w	r8, r3, r5
 8019038:	ea4a 020a 	orr.w	r2, sl, sl
 801903c:	4643      	mov	r3, r8
 801903e:	f891 8002 	ldrb.w	r8, [r1, #2]
 8019042:	ea42 0704 	orr.w	r7, r2, r4
 8019046:	ea4f 2508 	mov.w	r5, r8, lsl #8
 801904a:	463a      	mov	r2, r7
 801904c:	4654      	mov	r4, sl
 801904e:	f891 8004 	ldrb.w	r8, [r1, #4]
 8019052:	4322      	orrs	r2, r4
 8019054:	432b      	orrs	r3, r5
 8019056:	ea42 040a 	orr.w	r4, r2, sl
 801905a:	ea43 0509 	orr.w	r5, r3, r9
 801905e:	4622      	mov	r2, r4
 8019060:	462b      	mov	r3, r5
 8019062:	ea4f 6408 	mov.w	r4, r8, lsl #24
 8019066:	ea4f 2518 	mov.w	r5, r8, lsr #8
 801906a:	f891 8005 	ldrb.w	r8, [r1, #5]
 801906e:	432b      	orrs	r3, r5
 8019070:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8019074:	4322      	orrs	r2, r4
 8019076:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801907a:	ea43 0805 	orr.w	r8, r3, r5
 801907e:	4643      	mov	r3, r8
 8019080:	f891 8006 	ldrb.w	r8, [r1, #6]
 8019084:	ea42 0704 	orr.w	r7, r2, r4
 8019088:	463a      	mov	r2, r7
 801908a:	ea4f 6518 	mov.w	r5, r8, lsr #24
 801908e:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8019092:	3108      	adds	r1, #8
 8019094:	4322      	orrs	r2, r4
 8019096:	432b      	orrs	r3, r5
    for( i = 0; i < 16; i++ )
 8019098:	428e      	cmp	r6, r1
        GET_UINT64_BE( W[i], data, i << 3 );
 801909a:	e9e0 2302 	strd	r2, r3, [r0, #8]!
    for( i = 0; i < 16; i++ )
 801909e:	d1bb      	bne.n	8019018 <mbedtls_sha512_process+0x10>
 80190a0:	ab80      	add	r3, sp, #512	; 0x200
 80190a2:	f50d 6880 	add.w	r8, sp, #1024	; 0x400
 80190a6:	461a      	mov	r2, r3
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80190a8:	e9d2 971c 	ldrd	r9, r7, [r2, #112]	; 0x70
 80190ac:	ea4f 41d9 	mov.w	r1, r9, lsr #19
 80190b0:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
 80190b4:	9100      	str	r1, [sp, #0]
 80190b6:	0cf9      	lsrs	r1, r7, #19
 80190b8:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
 80190bc:	9101      	str	r1, [sp, #4]
 80190be:	00f9      	lsls	r1, r7, #3
 80190c0:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
 80190c4:	9103      	str	r1, [sp, #12]
 80190c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80190ca:	ea41 7157 	orr.w	r1, r1, r7, lsr #29
 80190ce:	9102      	str	r1, [sp, #8]
 80190d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190d4:	e9dd 4500 	ldrd	r4, r5, [sp]
 80190d8:	4044      	eors	r4, r0
 80190da:	ea4f 1099 	mov.w	r0, r9, lsr #6
 80190de:	4616      	mov	r6, r2
 80190e0:	ea40 6087 	orr.w	r0, r0, r7, lsl #26
 80190e4:	404d      	eors	r5, r1
 80190e6:	09b9      	lsrs	r1, r7, #6
 80190e8:	4044      	eors	r4, r0
 80190ea:	404d      	eors	r5, r1
               S0(W[i - 15]) + W[i - 16];
 80190ec:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 80190f0:	e9d6 6700 	ldrd	r6, r7, [r6]
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80190f4:	e9cd 4508 	strd	r4, r5, [sp, #32]
               S0(W[i - 15]) + W[i - 16];
 80190f8:	1834      	adds	r4, r6, r0
 80190fa:	eb47 0501 	adc.w	r5, r7, r1
 80190fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019102:	e9d2 ac02 	ldrd	sl, ip, [r2, #8]
 8019106:	1900      	adds	r0, r0, r4
 8019108:	4169      	adcs	r1, r5
 801910a:	460f      	mov	r7, r1
 801910c:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8019110:	ea41 71cc 	orr.w	r1, r1, ip, lsl #31
 8019114:	9104      	str	r1, [sp, #16]
 8019116:	ea4f 015c 	mov.w	r1, ip, lsr #1
 801911a:	ea41 71ca 	orr.w	r1, r1, sl, lsl #31
 801911e:	9105      	str	r1, [sp, #20]
 8019120:	ea4f 211a 	mov.w	r1, sl, lsr #8
 8019124:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 8019128:	9106      	str	r1, [sp, #24]
 801912a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801912e:	ea41 610a 	orr.w	r1, r1, sl, lsl #24
 8019132:	9107      	str	r1, [sp, #28]
 8019134:	4606      	mov	r6, r0
 8019136:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801913a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801913e:	4044      	eors	r4, r0
 8019140:	ea4f 10da 	mov.w	r0, sl, lsr #7
 8019144:	ea40 604c 	orr.w	r0, r0, ip, lsl #25
 8019148:	404d      	eors	r5, r1
 801914a:	ea80 0904 	eor.w	r9, r0, r4
 801914e:	ea4f 11dc 	mov.w	r1, ip, lsr #7
 8019152:	eb19 0006 	adds.w	r0, r9, r6
 8019156:	f102 0208 	add.w	r2, r2, #8
 801915a:	ea81 0a05 	eor.w	sl, r1, r5
 801915e:	eb4a 0107 	adc.w	r1, sl, r7
    for( ; i < 80; i++ )
 8019162:	4590      	cmp	r8, r2
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8019164:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
    for( ; i < 80; i++ )
 8019168:	d19e      	bne.n	80190a8 <mbedtls_sha512_process+0xa0>
    }

    A = ctx->state[0];
 801916a:	e9de 1204 	ldrd	r1, r2, [lr, #16]
 801916e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    B = ctx->state[1];
 8019172:	e9de 1206 	ldrd	r1, r2, [lr, #24]
 8019176:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
    C = ctx->state[2];
 801917a:	e9de 1208 	ldrd	r1, r2, [lr, #32]
 801917e:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
    D = ctx->state[3];
 8019182:	e9de 120a 	ldrd	r1, r2, [lr, #40]	; 0x28
 8019186:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
    E = ctx->state[4];
 801918a:	e9de 120c 	ldrd	r1, r2, [lr, #48]	; 0x30
 801918e:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
    F = ctx->state[5];
 8019192:	e9de 120e 	ldrd	r1, r2, [lr, #56]	; 0x38
 8019196:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
    G = ctx->state[6];
 801919a:	e9de 1210 	ldrd	r1, r2, [lr, #64]	; 0x40
 801919e:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
    H = ctx->state[7];
 80191a2:	e9de 1212 	ldrd	r1, r2, [lr, #72]	; 0x48
 80191a6:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 80191aa:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 80191ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    G = ctx->state[6];
 80191b2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80191b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    F = ctx->state[5];
 80191ba:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80191be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    E = ctx->state[4];
 80191c2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80191c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    D = ctx->state[3];
 80191ca:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80191ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
    C = ctx->state[2];
 80191d2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80191d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    B = ctx->state[1];
 80191da:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80191de:	e9cd 0102 	strd	r0, r1, [sp, #8]
    A = ctx->state[0];
 80191e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80191e6:	e9cd 0100 	strd	r0, r1, [sp]
 80191ea:	4a02      	ldr	r2, [pc, #8]	; (80191f4 <mbedtls_sha512_process+0x1ec>)
 80191ec:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 80191f0:	e002      	b.n	80191f8 <mbedtls_sha512_process+0x1f0>
 80191f2:	bf00      	nop
 80191f4:	0802c4a0 	.word	0x0802c4a0
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80191f8:	9908      	ldr	r1, [sp, #32]
 80191fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191fc:	0b89      	lsrs	r1, r1, #14
 80191fe:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 8019202:	9120      	str	r1, [sp, #128]	; 0x80
 8019204:	0b81      	lsrs	r1, r0, #14
 8019206:	9808      	ldr	r0, [sp, #32]
 8019208:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 801920c:	9121      	str	r1, [sp, #132]	; 0x84
 801920e:	0c81      	lsrs	r1, r0, #18
 8019210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019212:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8019216:	9122      	str	r1, [sp, #136]	; 0x88
 8019218:	0c81      	lsrs	r1, r0, #18
 801921a:	9808      	ldr	r0, [sp, #32]
 801921c:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8019220:	9123      	str	r1, [sp, #140]	; 0x8c
 8019222:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8019226:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 801922a:	404f      	eors	r7, r1
 801922c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801922e:	4046      	eors	r6, r0
 8019230:	9808      	ldr	r0, [sp, #32]
 8019232:	05c9      	lsls	r1, r1, #23
 8019234:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8019238:	9125      	str	r1, [sp, #148]	; 0x94
 801923a:	05c1      	lsls	r1, r0, #23
 801923c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801923e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8019242:	9124      	str	r1, [sp, #144]	; 0x90
 8019244:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8019248:	4070      	eors	r0, r6
 801924a:	4079      	eors	r1, r7
 801924c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8019250:	4606      	mov	r6, r0
 8019252:	460f      	mov	r7, r1
 8019254:	e9d2 0100 	ldrd	r0, r1, [r2]
 8019258:	eb10 0804 	adds.w	r8, r0, r4
 801925c:	eb41 0905 	adc.w	r9, r1, r5
 8019260:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8019264:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019268:	4060      	eors	r0, r4
 801926a:	4069      	eors	r1, r5
 801926c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8019270:	4004      	ands	r4, r0
 8019272:	400d      	ands	r5, r1
 8019274:	4620      	mov	r0, r4
 8019276:	4629      	mov	r1, r5
 8019278:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 801927c:	4044      	eors	r4, r0
 801927e:	404d      	eors	r5, r1
 8019280:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019284:	eb16 0a08 	adds.w	sl, r6, r8
 8019288:	eb47 0b09 	adc.w	fp, r7, r9
 801928c:	eb1a 0604 	adds.w	r6, sl, r4
 8019290:	eb4b 0705 	adc.w	r7, fp, r5
 8019294:	1980      	adds	r0, r0, r6
 8019296:	4179      	adcs	r1, r7
 8019298:	4606      	mov	r6, r0
 801929a:	460f      	mov	r7, r1
 801929c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80192a0:	1980      	adds	r0, r0, r6
 80192a2:	4179      	adcs	r1, r7
 80192a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80192a8:	9900      	ldr	r1, [sp, #0]
 80192aa:	9801      	ldr	r0, [sp, #4]
 80192ac:	0f09      	lsrs	r1, r1, #28
 80192ae:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80192b2:	9126      	str	r1, [sp, #152]	; 0x98
 80192b4:	0f01      	lsrs	r1, r0, #28
 80192b6:	9800      	ldr	r0, [sp, #0]
 80192b8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80192bc:	9127      	str	r1, [sp, #156]	; 0x9c
 80192be:	9901      	ldr	r1, [sp, #4]
 80192c0:	0789      	lsls	r1, r1, #30
 80192c2:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80192c6:	9129      	str	r1, [sp, #164]	; 0xa4
 80192c8:	0781      	lsls	r1, r0, #30
 80192ca:	9801      	ldr	r0, [sp, #4]
 80192cc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80192d0:	9128      	str	r1, [sp, #160]	; 0xa0
 80192d2:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 80192d6:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80192da:	4060      	eors	r0, r4
 80192dc:	9c01      	ldr	r4, [sp, #4]
 80192de:	4069      	eors	r1, r5
 80192e0:	9d00      	ldr	r5, [sp, #0]
 80192e2:	0664      	lsls	r4, r4, #25
 80192e4:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 80192e8:	942b      	str	r4, [sp, #172]	; 0xac
 80192ea:	066c      	lsls	r4, r5, #25
 80192ec:	9d01      	ldr	r5, [sp, #4]
 80192ee:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 80192f2:	942a      	str	r4, [sp, #168]	; 0xa8
 80192f4:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 80192f8:	4044      	eors	r4, r0
 80192fa:	404d      	eors	r5, r1
 80192fc:	4620      	mov	r0, r4
 80192fe:	4629      	mov	r1, r5
 8019300:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019304:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019308:	ea48 0804 	orr.w	r8, r8, r4
 801930c:	ea49 0905 	orr.w	r9, r9, r5
 8019310:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8019314:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8019318:	ea04 0408 	and.w	r4, r4, r8
 801931c:	ea05 0509 	and.w	r5, r5, r9
 8019320:	e9dd 8900 	ldrd	r8, r9, [sp]
 8019324:	ea0a 0a08 	and.w	sl, sl, r8
 8019328:	ea4a 0804 	orr.w	r8, sl, r4
 801932c:	ea0b 0b09 	and.w	fp, fp, r9
 8019330:	eb18 0400 	adds.w	r4, r8, r0
 8019334:	ea4b 0905 	orr.w	r9, fp, r5
 8019338:	eb49 0501 	adc.w	r5, r9, r1
 801933c:	19a0      	adds	r0, r4, r6
 801933e:	eb45 0107 	adc.w	r1, r5, r7
 8019342:	e9cd 0106 	strd	r0, r1, [sp, #24]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 8019346:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 801934a:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 801934e:	1826      	adds	r6, r4, r0
 8019350:	eb45 0701 	adc.w	r7, r5, r1
 8019354:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8019358:	19a4      	adds	r4, r4, r6
 801935a:	417d      	adcs	r5, r7
 801935c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019360:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019364:	4070      	eors	r0, r6
 8019366:	4079      	eors	r1, r7
 8019368:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 801936c:	4006      	ands	r6, r0
 801936e:	400f      	ands	r7, r1
 8019370:	4630      	mov	r0, r6
 8019372:	4639      	mov	r1, r7
 8019374:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019378:	4046      	eors	r6, r0
 801937a:	1930      	adds	r0, r6, r4
 801937c:	ea87 0701 	eor.w	r7, r7, r1
 8019380:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019382:	eb47 0105 	adc.w	r1, r7, r5
 8019386:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019388:	0ba4      	lsrs	r4, r4, #14
 801938a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 801938e:	942c      	str	r4, [sp, #176]	; 0xb0
 8019390:	0bac      	lsrs	r4, r5, #14
 8019392:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019394:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 8019398:	942d      	str	r4, [sp, #180]	; 0xb4
 801939a:	0cac      	lsrs	r4, r5, #18
 801939c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801939e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80193a2:	942e      	str	r4, [sp, #184]	; 0xb8
 80193a4:	0cac      	lsrs	r4, r5, #18
 80193a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193a8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80193ac:	942f      	str	r4, [sp, #188]	; 0xbc
 80193ae:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 80193b2:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 80193b6:	4074      	eors	r4, r6
 80193b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80193ba:	407d      	eors	r5, r7
 80193bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80193be:	05f6      	lsls	r6, r6, #23
 80193c0:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80193c4:	9631      	str	r6, [sp, #196]	; 0xc4
 80193c6:	05fe      	lsls	r6, r7, #23
 80193c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80193ca:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80193ce:	9630      	str	r6, [sp, #192]	; 0xc0
 80193d0:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
 80193d4:	4066      	eors	r6, r4
 80193d6:	1986      	adds	r6, r0, r6
 80193d8:	ea87 0705 	eor.w	r7, r7, r5
 80193dc:	eb41 0707 	adc.w	r7, r1, r7
 80193e0:	9906      	ldr	r1, [sp, #24]
 80193e2:	9807      	ldr	r0, [sp, #28]
 80193e4:	0f09      	lsrs	r1, r1, #28
 80193e6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80193ea:	9132      	str	r1, [sp, #200]	; 0xc8
 80193ec:	0f01      	lsrs	r1, r0, #28
 80193ee:	9806      	ldr	r0, [sp, #24]
 80193f0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80193f4:	9133      	str	r1, [sp, #204]	; 0xcc
 80193f6:	9907      	ldr	r1, [sp, #28]
 80193f8:	0789      	lsls	r1, r1, #30
 80193fa:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80193fe:	9135      	str	r1, [sp, #212]	; 0xd4
 8019400:	0781      	lsls	r1, r0, #30
 8019402:	9807      	ldr	r0, [sp, #28]
 8019404:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019408:	9134      	str	r1, [sp, #208]	; 0xd0
 801940a:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 801940e:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 8019412:	4060      	eors	r0, r4
 8019414:	9c07      	ldr	r4, [sp, #28]
 8019416:	4069      	eors	r1, r5
 8019418:	9d06      	ldr	r5, [sp, #24]
 801941a:	0664      	lsls	r4, r4, #25
 801941c:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019420:	9437      	str	r4, [sp, #220]	; 0xdc
 8019422:	066c      	lsls	r4, r5, #25
 8019424:	9d07      	ldr	r5, [sp, #28]
 8019426:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 801942a:	9436      	str	r4, [sp, #216]	; 0xd8
 801942c:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 8019430:	4044      	eors	r4, r0
 8019432:	404d      	eors	r5, r1
 8019434:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019438:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801943c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019440:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019444:	ea44 040a 	orr.w	r4, r4, sl
 8019448:	ea45 050b 	orr.w	r5, r5, fp
 801944c:	4620      	mov	r0, r4
 801944e:	4629      	mov	r1, r5
 8019450:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019454:	e9dd ab00 	ldrd	sl, fp, [sp]
 8019458:	4004      	ands	r4, r0
 801945a:	400d      	ands	r5, r1
 801945c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019460:	ea0a 0a00 	and.w	sl, sl, r0
 8019464:	ea0b 0b01 	and.w	fp, fp, r1
 8019468:	ea4a 0a04 	orr.w	sl, sl, r4
 801946c:	ea4b 0b05 	orr.w	fp, fp, r5
 8019470:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8019474:	eb18 0806 	adds.w	r8, r8, r6
 8019478:	eb49 0907 	adc.w	r9, r9, r7
 801947c:	eb14 040a 	adds.w	r4, r4, sl
 8019480:	eb45 050b 	adc.w	r5, r5, fp
 8019484:	19a0      	adds	r0, r4, r6
 8019486:	eb45 0107 	adc.w	r1, r5, r7
 801948a:	e9cd 0104 	strd	r0, r1, [sp, #16]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 801948e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8019492:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8019496:	1826      	adds	r6, r4, r0
 8019498:	eb45 0701 	adc.w	r7, r5, r1
 801949c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80194a0:	19a4      	adds	r4, r4, r6
 80194a2:	417d      	adcs	r5, r7
 80194a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80194a8:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80194ac:	4070      	eors	r0, r6
 80194ae:	4079      	eors	r1, r7
 80194b0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80194b4:	ea00 0008 	and.w	r0, r0, r8
 80194b8:	4046      	eors	r6, r0
 80194ba:	1930      	adds	r0, r6, r4
 80194bc:	ea4f 3498 	mov.w	r4, r8, lsr #14
 80194c0:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 80194c4:	9438      	str	r4, [sp, #224]	; 0xe0
 80194c6:	ea4f 3499 	mov.w	r4, r9, lsr #14
 80194ca:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 80194ce:	9439      	str	r4, [sp, #228]	; 0xe4
 80194d0:	ea4f 4498 	mov.w	r4, r8, lsr #18
 80194d4:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 80194d8:	943a      	str	r4, [sp, #232]	; 0xe8
 80194da:	ea4f 4499 	mov.w	r4, r9, lsr #18
 80194de:	ea01 0109 	and.w	r1, r1, r9
 80194e2:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 80194e6:	943b      	str	r4, [sp, #236]	; 0xec
 80194e8:	ea87 0701 	eor.w	r7, r7, r1
 80194ec:	eb47 0105 	adc.w	r1, r7, r5
 80194f0:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80194f4:	e9dd 4538 	ldrd	r4, r5, [sp, #224]	; 0xe0
 80194f8:	4074      	eors	r4, r6
 80194fa:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 80194fe:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 8019502:	963d      	str	r6, [sp, #244]	; 0xf4
 8019504:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 8019508:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 801950c:	963c      	str	r6, [sp, #240]	; 0xf0
 801950e:	407d      	eors	r5, r7
 8019510:	e9dd 673c 	ldrd	r6, r7, [sp, #240]	; 0xf0
 8019514:	4066      	eors	r6, r4
 8019516:	1986      	adds	r6, r0, r6
 8019518:	ea87 0705 	eor.w	r7, r7, r5
 801951c:	eb41 0707 	adc.w	r7, r1, r7
 8019520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019524:	1980      	adds	r0, r0, r6
 8019526:	4179      	adcs	r1, r7
 8019528:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801952c:	9904      	ldr	r1, [sp, #16]
 801952e:	9805      	ldr	r0, [sp, #20]
 8019530:	0f09      	lsrs	r1, r1, #28
 8019532:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019536:	913e      	str	r1, [sp, #248]	; 0xf8
 8019538:	0f01      	lsrs	r1, r0, #28
 801953a:	9804      	ldr	r0, [sp, #16]
 801953c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019540:	913f      	str	r1, [sp, #252]	; 0xfc
 8019542:	9905      	ldr	r1, [sp, #20]
 8019544:	0789      	lsls	r1, r1, #30
 8019546:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 801954a:	9141      	str	r1, [sp, #260]	; 0x104
 801954c:	0781      	lsls	r1, r0, #30
 801954e:	9805      	ldr	r0, [sp, #20]
 8019550:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019554:	9140      	str	r1, [sp, #256]	; 0x100
 8019556:	ac40      	add	r4, sp, #256	; 0x100
 8019558:	e9d4 4500 	ldrd	r4, r5, [r4]
 801955c:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 8019560:	4060      	eors	r0, r4
 8019562:	9c05      	ldr	r4, [sp, #20]
 8019564:	4069      	eors	r1, r5
 8019566:	9d04      	ldr	r5, [sp, #16]
 8019568:	0664      	lsls	r4, r4, #25
 801956a:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 801956e:	9443      	str	r4, [sp, #268]	; 0x10c
 8019570:	066c      	lsls	r4, r5, #25
 8019572:	9d05      	ldr	r5, [sp, #20]
 8019574:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019578:	9442      	str	r4, [sp, #264]	; 0x108
 801957a:	ac42      	add	r4, sp, #264	; 0x108
 801957c:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019580:	4044      	eors	r4, r0
 8019582:	404d      	eors	r5, r1
 8019584:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019588:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801958c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8019590:	ea44 040a 	orr.w	r4, r4, sl
 8019594:	ea45 050b 	orr.w	r5, r5, fp
 8019598:	e9dd ab00 	ldrd	sl, fp, [sp]
 801959c:	ea0a 0a04 	and.w	sl, sl, r4
 80195a0:	ea0b 0b05 	and.w	fp, fp, r5
 80195a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80195a8:	4654      	mov	r4, sl
 80195aa:	465d      	mov	r5, fp
 80195ac:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80195b0:	ea0a 0a00 	and.w	sl, sl, r0
 80195b4:	ea0b 0b01 	and.w	fp, fp, r1
 80195b8:	ea4a 0a04 	orr.w	sl, sl, r4
 80195bc:	ea4b 0b05 	orr.w	fp, fp, r5
 80195c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80195c4:	eb14 040a 	adds.w	r4, r4, sl
 80195c8:	eb45 050b 	adc.w	r5, r5, fp
 80195cc:	19a0      	adds	r0, r4, r6
 80195ce:	eb45 0107 	adc.w	r1, r5, r7
 80195d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80195d6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80195da:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 80195de:	1826      	adds	r6, r4, r0
 80195e0:	eb45 0701 	adc.w	r7, r5, r1
 80195e4:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80195e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80195ec:	19a4      	adds	r4, r4, r6
 80195ee:	ea80 0008 	eor.w	r0, r0, r8
 80195f2:	ea81 0109 	eor.w	r1, r1, r9
 80195f6:	417d      	adcs	r5, r7
 80195f8:	4606      	mov	r6, r0
 80195fa:	460f      	mov	r7, r1
 80195fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019600:	4030      	ands	r0, r6
 8019602:	4039      	ands	r1, r7
 8019604:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8019608:	4046      	eors	r6, r0
 801960a:	1930      	adds	r0, r6, r4
 801960c:	ea87 0701 	eor.w	r7, r7, r1
 8019610:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019612:	eb47 0105 	adc.w	r1, r7, r5
 8019616:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019618:	0ba4      	lsrs	r4, r4, #14
 801961a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 801961e:	9444      	str	r4, [sp, #272]	; 0x110
 8019620:	0bac      	lsrs	r4, r5, #14
 8019622:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019624:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 8019628:	9445      	str	r4, [sp, #276]	; 0x114
 801962a:	0cac      	lsrs	r4, r5, #18
 801962c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801962e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 8019632:	9446      	str	r4, [sp, #280]	; 0x118
 8019634:	0cac      	lsrs	r4, r5, #18
 8019636:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019638:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 801963c:	9447      	str	r4, [sp, #284]	; 0x11c
 801963e:	ae46      	add	r6, sp, #280	; 0x118
 8019640:	ac44      	add	r4, sp, #272	; 0x110
 8019642:	e9d6 6700 	ldrd	r6, r7, [r6]
 8019646:	e9d4 4500 	ldrd	r4, r5, [r4]
 801964a:	4074      	eors	r4, r6
 801964c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801964e:	407d      	eors	r5, r7
 8019650:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019652:	05f6      	lsls	r6, r6, #23
 8019654:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 8019658:	9649      	str	r6, [sp, #292]	; 0x124
 801965a:	05fe      	lsls	r6, r7, #23
 801965c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801965e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 8019662:	9648      	str	r6, [sp, #288]	; 0x120
 8019664:	ae48      	add	r6, sp, #288	; 0x120
 8019666:	e9d6 6700 	ldrd	r6, r7, [r6]
 801966a:	4066      	eors	r6, r4
 801966c:	1986      	adds	r6, r0, r6
 801966e:	ea87 0705 	eor.w	r7, r7, r5
 8019672:	eb41 0707 	adc.w	r7, r1, r7
 8019676:	e9cd 6708 	strd	r6, r7, [sp, #32]
 801967a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801967e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019682:	1836      	adds	r6, r6, r0
 8019684:	414f      	adcs	r7, r1
 8019686:	9902      	ldr	r1, [sp, #8]
 8019688:	9803      	ldr	r0, [sp, #12]
 801968a:	0f09      	lsrs	r1, r1, #28
 801968c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019690:	914a      	str	r1, [sp, #296]	; 0x128
 8019692:	0f01      	lsrs	r1, r0, #28
 8019694:	9802      	ldr	r0, [sp, #8]
 8019696:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 801969a:	914b      	str	r1, [sp, #300]	; 0x12c
 801969c:	9903      	ldr	r1, [sp, #12]
 801969e:	0789      	lsls	r1, r1, #30
 80196a0:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80196a4:	914d      	str	r1, [sp, #308]	; 0x134
 80196a6:	0781      	lsls	r1, r0, #30
 80196a8:	9803      	ldr	r0, [sp, #12]
 80196aa:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80196ae:	914c      	str	r1, [sp, #304]	; 0x130
 80196b0:	ac4c      	add	r4, sp, #304	; 0x130
 80196b2:	a94a      	add	r1, sp, #296	; 0x128
 80196b4:	e9d4 4500 	ldrd	r4, r5, [r4]
 80196b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196bc:	4060      	eors	r0, r4
 80196be:	9c03      	ldr	r4, [sp, #12]
 80196c0:	4069      	eors	r1, r5
 80196c2:	9d02      	ldr	r5, [sp, #8]
 80196c4:	0664      	lsls	r4, r4, #25
 80196c6:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 80196ca:	944f      	str	r4, [sp, #316]	; 0x13c
 80196cc:	066c      	lsls	r4, r5, #25
 80196ce:	9d03      	ldr	r5, [sp, #12]
 80196d0:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 80196d4:	944e      	str	r4, [sp, #312]	; 0x138
 80196d6:	ac4e      	add	r4, sp, #312	; 0x138
 80196d8:	e9d4 4500 	ldrd	r4, r5, [r4]
 80196dc:	4044      	eors	r4, r0
 80196de:	404d      	eors	r5, r1
 80196e0:	e9cd 4500 	strd	r4, r5, [sp]
 80196e4:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80196e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80196ec:	ea44 040a 	orr.w	r4, r4, sl
 80196f0:	ea45 050b 	orr.w	r5, r5, fp
 80196f4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80196f8:	ea0a 0a04 	and.w	sl, sl, r4
 80196fc:	ea0b 0b05 	and.w	fp, fp, r5
 8019700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019704:	4654      	mov	r4, sl
 8019706:	465d      	mov	r5, fp
 8019708:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801970c:	ea0a 0a00 	and.w	sl, sl, r0
 8019710:	ea0b 0b01 	and.w	fp, fp, r1
 8019714:	ea4a 0a04 	orr.w	sl, sl, r4
 8019718:	ea4b 0b05 	orr.w	fp, fp, r5
 801971c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019720:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019724:	eb14 040a 	adds.w	r4, r4, sl
 8019728:	eb45 050b 	adc.w	r5, r5, fp
 801972c:	1900      	adds	r0, r0, r4
 801972e:	4169      	adcs	r1, r5
 8019730:	e9cd 0100 	strd	r0, r1, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 8019734:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8019738:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
 801973c:	eb10 0a04 	adds.w	sl, r0, r4
 8019740:	eb41 0b05 	adc.w	fp, r1, r5
 8019744:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019748:	eb10 000a 	adds.w	r0, r0, sl
 801974c:	eb41 010b 	adc.w	r1, r1, fp
 8019750:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8019754:	ea8a 0a08 	eor.w	sl, sl, r8
 8019758:	ea8b 0b09 	eor.w	fp, fp, r9
 801975c:	ea0a 0406 	and.w	r4, sl, r6
 8019760:	ea0b 0507 	and.w	r5, fp, r7
 8019764:	ea84 0a08 	eor.w	sl, r4, r8
 8019768:	eb1a 0400 	adds.w	r4, sl, r0
 801976c:	ea85 0b09 	eor.w	fp, r5, r9
 8019770:	eb4b 0501 	adc.w	r5, fp, r1
 8019774:	0bb1      	lsrs	r1, r6, #14
 8019776:	ea41 4187 	orr.w	r1, r1, r7, lsl #18
 801977a:	9150      	str	r1, [sp, #320]	; 0x140
 801977c:	0bb9      	lsrs	r1, r7, #14
 801977e:	ea41 4186 	orr.w	r1, r1, r6, lsl #18
 8019782:	9151      	str	r1, [sp, #324]	; 0x144
 8019784:	0cb1      	lsrs	r1, r6, #18
 8019786:	ea41 3187 	orr.w	r1, r1, r7, lsl #14
 801978a:	9152      	str	r1, [sp, #328]	; 0x148
 801978c:	0cb9      	lsrs	r1, r7, #18
 801978e:	ea41 3186 	orr.w	r1, r1, r6, lsl #14
 8019792:	9153      	str	r1, [sp, #332]	; 0x14c
 8019794:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8019798:	a950      	add	r1, sp, #320	; 0x140
 801979a:	e9da ab00 	ldrd	sl, fp, [sl]
 801979e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197a2:	ea81 010b 	eor.w	r1, r1, fp
 80197a6:	468b      	mov	fp, r1
 80197a8:	05f9      	lsls	r1, r7, #23
 80197aa:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 80197ae:	9155      	str	r1, [sp, #340]	; 0x154
 80197b0:	05f1      	lsls	r1, r6, #23
 80197b2:	ea41 2157 	orr.w	r1, r1, r7, lsr #9
 80197b6:	9154      	str	r1, [sp, #336]	; 0x150
 80197b8:	ea80 000a 	eor.w	r0, r0, sl
 80197bc:	a954      	add	r1, sp, #336	; 0x150
 80197be:	4682      	mov	sl, r0
 80197c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197c4:	ea80 000a 	eor.w	r0, r0, sl
 80197c8:	eb14 0a00 	adds.w	sl, r4, r0
 80197cc:	ea81 010b 	eor.w	r1, r1, fp
 80197d0:	eb45 0b01 	adc.w	fp, r5, r1
 80197d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80197d8:	eb10 000a 	adds.w	r0, r0, sl
 80197dc:	eb41 010b 	adc.w	r1, r1, fp
 80197e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80197e4:	9900      	ldr	r1, [sp, #0]
 80197e6:	9801      	ldr	r0, [sp, #4]
 80197e8:	0f09      	lsrs	r1, r1, #28
 80197ea:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80197ee:	9156      	str	r1, [sp, #344]	; 0x158
 80197f0:	0f01      	lsrs	r1, r0, #28
 80197f2:	9800      	ldr	r0, [sp, #0]
 80197f4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80197f8:	9157      	str	r1, [sp, #348]	; 0x15c
 80197fa:	9901      	ldr	r1, [sp, #4]
 80197fc:	0789      	lsls	r1, r1, #30
 80197fe:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019802:	9159      	str	r1, [sp, #356]	; 0x164
 8019804:	0781      	lsls	r1, r0, #30
 8019806:	9801      	ldr	r0, [sp, #4]
 8019808:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 801980c:	9158      	str	r1, [sp, #352]	; 0x160
 801980e:	ac58      	add	r4, sp, #352	; 0x160
 8019810:	a956      	add	r1, sp, #344	; 0x158
 8019812:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801981a:	4060      	eors	r0, r4
 801981c:	9c01      	ldr	r4, [sp, #4]
 801981e:	4069      	eors	r1, r5
 8019820:	9d00      	ldr	r5, [sp, #0]
 8019822:	0664      	lsls	r4, r4, #25
 8019824:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019828:	945b      	str	r4, [sp, #364]	; 0x16c
 801982a:	066c      	lsls	r4, r5, #25
 801982c:	9d01      	ldr	r5, [sp, #4]
 801982e:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019832:	945a      	str	r4, [sp, #360]	; 0x168
 8019834:	ac5a      	add	r4, sp, #360	; 0x168
 8019836:	e9d4 4500 	ldrd	r4, r5, [r4]
 801983a:	4044      	eors	r4, r0
 801983c:	404d      	eors	r5, r1
 801983e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019842:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019846:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801984a:	e9dd ab00 	ldrd	sl, fp, [sp]
 801984e:	ea44 040a 	orr.w	r4, r4, sl
 8019852:	ea45 050b 	orr.w	r5, r5, fp
 8019856:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801985a:	ea0a 0a04 	and.w	sl, sl, r4
 801985e:	ea0b 0b05 	and.w	fp, fp, r5
 8019862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019866:	4654      	mov	r4, sl
 8019868:	465d      	mov	r5, fp
 801986a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 801986e:	ea0a 0a00 	and.w	sl, sl, r0
 8019872:	ea0b 0b01 	and.w	fp, fp, r1
 8019876:	ea4a 0a04 	orr.w	sl, sl, r4
 801987a:	ea4b 0b05 	orr.w	fp, fp, r5
 801987e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8019882:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019886:	eb14 040a 	adds.w	r4, r4, sl
 801988a:	eb45 050b 	adc.w	r5, r5, fp
 801988e:	1900      	adds	r0, r0, r4
 8019890:	4169      	adcs	r1, r5
 8019892:	e9cd 0106 	strd	r0, r1, [sp, #24]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 8019896:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 801989a:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
 801989e:	eb10 0a04 	adds.w	sl, r0, r4
 80198a2:	eb41 0b05 	adc.w	fp, r1, r5
 80198a6:	eb1a 0008 	adds.w	r0, sl, r8
 80198aa:	eb4b 0109 	adc.w	r1, fp, r9
 80198ae:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80198b2:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80198b6:	ea88 0806 	eor.w	r8, r8, r6
 80198ba:	ea89 0907 	eor.w	r9, r9, r7
 80198be:	ea04 0408 	and.w	r4, r4, r8
 80198c2:	ea05 0509 	and.w	r5, r5, r9
 80198c6:	46a0      	mov	r8, r4
 80198c8:	46a9      	mov	r9, r5
 80198ca:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80198ce:	ea84 0408 	eor.w	r4, r4, r8
 80198d2:	eb14 0800 	adds.w	r8, r4, r0
 80198d6:	ea85 0509 	eor.w	r5, r5, r9
 80198da:	eb45 0901 	adc.w	r9, r5, r1
 80198de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80198e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80198e2:	0b89      	lsrs	r1, r1, #14
 80198e4:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80198e8:	915c      	str	r1, [sp, #368]	; 0x170
 80198ea:	0b81      	lsrs	r1, r0, #14
 80198ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80198ee:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80198f2:	915d      	str	r1, [sp, #372]	; 0x174
 80198f4:	0c81      	lsrs	r1, r0, #18
 80198f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80198f8:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80198fc:	915e      	str	r1, [sp, #376]	; 0x178
 80198fe:	0c81      	lsrs	r1, r0, #18
 8019900:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019902:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8019906:	915f      	str	r1, [sp, #380]	; 0x17c
 8019908:	ac5e      	add	r4, sp, #376	; 0x178
 801990a:	a95c      	add	r1, sp, #368	; 0x170
 801990c:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019914:	4060      	eors	r0, r4
 8019916:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019918:	4069      	eors	r1, r5
 801991a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801991c:	05e4      	lsls	r4, r4, #23
 801991e:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 8019922:	9461      	str	r4, [sp, #388]	; 0x184
 8019924:	05ec      	lsls	r4, r5, #23
 8019926:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019928:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 801992c:	9460      	str	r4, [sp, #384]	; 0x180
 801992e:	ac60      	add	r4, sp, #384	; 0x180
 8019930:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019934:	4044      	eors	r4, r0
 8019936:	404d      	eors	r5, r1
 8019938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801993c:	eb18 0404 	adds.w	r4, r8, r4
 8019940:	eb49 0505 	adc.w	r5, r9, r5
 8019944:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8019948:	1824      	adds	r4, r4, r0
 801994a:	414d      	adcs	r5, r1
 801994c:	4620      	mov	r0, r4
 801994e:	4629      	mov	r1, r5
 8019950:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019954:	9906      	ldr	r1, [sp, #24]
 8019956:	9807      	ldr	r0, [sp, #28]
 8019958:	0f09      	lsrs	r1, r1, #28
 801995a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 801995e:	9162      	str	r1, [sp, #392]	; 0x188
 8019960:	0f01      	lsrs	r1, r0, #28
 8019962:	9806      	ldr	r0, [sp, #24]
 8019964:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019968:	9163      	str	r1, [sp, #396]	; 0x18c
 801996a:	9907      	ldr	r1, [sp, #28]
 801996c:	0789      	lsls	r1, r1, #30
 801996e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019972:	9165      	str	r1, [sp, #404]	; 0x194
 8019974:	0781      	lsls	r1, r0, #30
 8019976:	9807      	ldr	r0, [sp, #28]
 8019978:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 801997c:	9164      	str	r1, [sp, #400]	; 0x190
 801997e:	ac64      	add	r4, sp, #400	; 0x190
 8019980:	a962      	add	r1, sp, #392	; 0x188
 8019982:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019986:	e9d1 0100 	ldrd	r0, r1, [r1]
 801998a:	4060      	eors	r0, r4
 801998c:	9c07      	ldr	r4, [sp, #28]
 801998e:	4069      	eors	r1, r5
 8019990:	9d06      	ldr	r5, [sp, #24]
 8019992:	0664      	lsls	r4, r4, #25
 8019994:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019998:	9467      	str	r4, [sp, #412]	; 0x19c
 801999a:	066c      	lsls	r4, r5, #25
 801999c:	9d07      	ldr	r5, [sp, #28]
 801999e:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 80199a2:	9466      	str	r4, [sp, #408]	; 0x198
 80199a4:	ac66      	add	r4, sp, #408	; 0x198
 80199a6:	e9d4 4500 	ldrd	r4, r5, [r4]
 80199aa:	4044      	eors	r4, r0
 80199ac:	404d      	eors	r5, r1
 80199ae:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80199b2:	4620      	mov	r0, r4
 80199b4:	4629      	mov	r1, r5
 80199b6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80199ba:	ea44 0408 	orr.w	r4, r4, r8
 80199be:	ea45 0509 	orr.w	r5, r5, r9
 80199c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80199c6:	ea08 0804 	and.w	r8, r8, r4
 80199ca:	ea09 0905 	and.w	r9, r9, r5
 80199ce:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80199d2:	4644      	mov	r4, r8
 80199d4:	464d      	mov	r5, r9
 80199d6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80199da:	ea08 080a 	and.w	r8, r8, sl
 80199de:	ea09 090b 	and.w	r9, r9, fp
 80199e2:	ea48 0804 	orr.w	r8, r8, r4
 80199e6:	eb18 0400 	adds.w	r4, r8, r0
 80199ea:	ea49 0905 	orr.w	r9, r9, r5
 80199ee:	eb49 0501 	adc.w	r5, r9, r1
 80199f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80199f6:	1900      	adds	r0, r0, r4
 80199f8:	4169      	adcs	r1, r5
 80199fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80199fe:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8019a02:	e9d2 010c 	ldrd	r0, r1, [r2, #48]	; 0x30
 8019a06:	eb10 0804 	adds.w	r8, r0, r4
 8019a0a:	eb41 0905 	adc.w	r9, r1, r5
 8019a0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019a12:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8019a16:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8019a1a:	4070      	eors	r0, r6
 8019a1c:	4079      	eors	r1, r7
 8019a1e:	4004      	ands	r4, r0
 8019a20:	eb1a 0a08 	adds.w	sl, sl, r8
 8019a24:	ea84 0406 	eor.w	r4, r4, r6
 8019a28:	ea05 0501 	and.w	r5, r5, r1
 8019a2c:	eb4b 0b09 	adc.w	fp, fp, r9
 8019a30:	407d      	eors	r5, r7
 8019a32:	eb14 080a 	adds.w	r8, r4, sl
 8019a36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019a38:	eb45 090b 	adc.w	r9, r5, fp
 8019a3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019a3e:	0ba4      	lsrs	r4, r4, #14
 8019a40:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 8019a44:	9468      	str	r4, [sp, #416]	; 0x1a0
 8019a46:	0bac      	lsrs	r4, r5, #14
 8019a48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019a4a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 8019a4e:	9469      	str	r4, [sp, #420]	; 0x1a4
 8019a50:	0cac      	lsrs	r4, r5, #18
 8019a52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019a54:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 8019a58:	946a      	str	r4, [sp, #424]	; 0x1a8
 8019a5a:	0cac      	lsrs	r4, r5, #18
 8019a5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019a5e:	a968      	add	r1, sp, #416	; 0x1a0
 8019a60:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 8019a64:	946b      	str	r4, [sp, #428]	; 0x1ac
 8019a66:	e9d1 4500 	ldrd	r4, r5, [r1]
 8019a6a:	a96a      	add	r1, sp, #424	; 0x1a8
 8019a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a70:	404d      	eors	r5, r1
 8019a72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019a74:	ea4f 5ac1 	mov.w	sl, r1, lsl #23
 8019a78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019a7a:	ea4a 2151 	orr.w	r1, sl, r1, lsr #9
 8019a7e:	916d      	str	r1, [sp, #436]	; 0x1b4
 8019a80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019a82:	ea4f 5ac1 	mov.w	sl, r1, lsl #23
 8019a86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019a88:	ea4a 2151 	orr.w	r1, sl, r1, lsr #9
 8019a8c:	916c      	str	r1, [sp, #432]	; 0x1b0
 8019a8e:	a96c      	add	r1, sp, #432	; 0x1b0
 8019a90:	4044      	eors	r4, r0
 8019a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a96:	4060      	eors	r0, r4
 8019a98:	eb18 0a00 	adds.w	sl, r8, r0
 8019a9c:	ea81 0105 	eor.w	r1, r1, r5
 8019aa0:	eb49 0b01 	adc.w	fp, r9, r1
 8019aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019aa8:	eb10 000a 	adds.w	r0, r0, sl
 8019aac:	eb41 010b 	adc.w	r1, r1, fp
 8019ab0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019ab4:	9904      	ldr	r1, [sp, #16]
 8019ab6:	9805      	ldr	r0, [sp, #20]
 8019ab8:	0f09      	lsrs	r1, r1, #28
 8019aba:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019abe:	916e      	str	r1, [sp, #440]	; 0x1b8
 8019ac0:	0f01      	lsrs	r1, r0, #28
 8019ac2:	9804      	ldr	r0, [sp, #16]
 8019ac4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019ac8:	916f      	str	r1, [sp, #444]	; 0x1bc
 8019aca:	9905      	ldr	r1, [sp, #20]
 8019acc:	0789      	lsls	r1, r1, #30
 8019ace:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019ad2:	9171      	str	r1, [sp, #452]	; 0x1c4
 8019ad4:	0781      	lsls	r1, r0, #30
 8019ad6:	9805      	ldr	r0, [sp, #20]
 8019ad8:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019adc:	9170      	str	r1, [sp, #448]	; 0x1c0
 8019ade:	ac70      	add	r4, sp, #448	; 0x1c0
 8019ae0:	a96e      	add	r1, sp, #440	; 0x1b8
 8019ae2:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019aea:	4060      	eors	r0, r4
 8019aec:	9c05      	ldr	r4, [sp, #20]
 8019aee:	4069      	eors	r1, r5
 8019af0:	9d04      	ldr	r5, [sp, #16]
 8019af2:	0664      	lsls	r4, r4, #25
 8019af4:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019af8:	9473      	str	r4, [sp, #460]	; 0x1cc
 8019afa:	066c      	lsls	r4, r5, #25
 8019afc:	9d05      	ldr	r5, [sp, #20]
 8019afe:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019b02:	9472      	str	r4, [sp, #456]	; 0x1c8
 8019b04:	ac72      	add	r4, sp, #456	; 0x1c8
 8019b06:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019b0a:	4044      	eors	r4, r0
 8019b0c:	404d      	eors	r5, r1
 8019b0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019b16:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8019b1a:	e9dd 8900 	ldrd	r8, r9, [sp]
 8019b1e:	4320      	orrs	r0, r4
 8019b20:	4329      	orrs	r1, r5
 8019b22:	ea08 0800 	and.w	r8, r8, r0
 8019b26:	ea09 0901 	and.w	r9, r9, r1
 8019b2a:	4644      	mov	r4, r8
 8019b2c:	464d      	mov	r5, r9
 8019b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019b32:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8019b36:	ea00 0008 	and.w	r0, r0, r8
 8019b3a:	ea01 0109 	and.w	r1, r1, r9
 8019b3e:	ea40 0804 	orr.w	r8, r0, r4
 8019b42:	ea41 0905 	orr.w	r9, r1, r5
 8019b46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019b4a:	eb14 0408 	adds.w	r4, r4, r8
 8019b4e:	eb45 0509 	adc.w	r5, r5, r9
 8019b52:	eb1a 0004 	adds.w	r0, sl, r4
 8019b56:	eb4b 0105 	adc.w	r1, fp, r5
 8019b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019b5e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8019b62:	e9d2 010e 	ldrd	r0, r1, [r2, #56]	; 0x38
 8019b66:	eb14 0800 	adds.w	r8, r4, r0
 8019b6a:	eb45 0901 	adc.w	r9, r5, r1
 8019b6e:	eb18 0406 	adds.w	r4, r8, r6
 8019b72:	eb49 0507 	adc.w	r5, r9, r7
 8019b76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019b7a:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8019b7e:	4070      	eors	r0, r6
 8019b80:	4079      	eors	r1, r7
 8019b82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019b86:	4006      	ands	r6, r0
 8019b88:	400f      	ands	r7, r1
 8019b8a:	4630      	mov	r0, r6
 8019b8c:	4639      	mov	r1, r7
 8019b8e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8019b92:	4046      	eors	r6, r0
 8019b94:	1930      	adds	r0, r6, r4
 8019b96:	ea87 0701 	eor.w	r7, r7, r1
 8019b9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019b9c:	eb47 0105 	adc.w	r1, r7, r5
 8019ba0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019ba2:	0ba4      	lsrs	r4, r4, #14
 8019ba4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 8019ba8:	9474      	str	r4, [sp, #464]	; 0x1d0
 8019baa:	0bac      	lsrs	r4, r5, #14
 8019bac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019bae:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 8019bb2:	9475      	str	r4, [sp, #468]	; 0x1d4
 8019bb4:	0cac      	lsrs	r4, r5, #18
 8019bb6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019bb8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 8019bbc:	9476      	str	r4, [sp, #472]	; 0x1d8
 8019bbe:	0cac      	lsrs	r4, r5, #18
 8019bc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019bc2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 8019bc6:	9477      	str	r4, [sp, #476]	; 0x1dc
 8019bc8:	ae76      	add	r6, sp, #472	; 0x1d8
 8019bca:	ac74      	add	r4, sp, #464	; 0x1d0
 8019bcc:	e9d6 6700 	ldrd	r6, r7, [r6]
 8019bd0:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019bd4:	4074      	eors	r4, r6
 8019bd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019bd8:	407d      	eors	r5, r7
 8019bda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019bdc:	05f6      	lsls	r6, r6, #23
 8019bde:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 8019be2:	9679      	str	r6, [sp, #484]	; 0x1e4
 8019be4:	05fe      	lsls	r6, r7, #23
 8019be6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019be8:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 8019bec:	9678      	str	r6, [sp, #480]	; 0x1e0
 8019bee:	ae78      	add	r6, sp, #480	; 0x1e0
 8019bf0:	e9d6 6700 	ldrd	r6, r7, [r6]
 8019bf4:	4066      	eors	r6, r4
 8019bf6:	1986      	adds	r6, r0, r6
 8019bf8:	ea87 0705 	eor.w	r7, r7, r5
 8019bfc:	eb41 0707 	adc.w	r7, r1, r7
 8019c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019c04:	1980      	adds	r0, r0, r6
 8019c06:	4179      	adcs	r1, r7
 8019c08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019c0c:	9902      	ldr	r1, [sp, #8]
 8019c0e:	9803      	ldr	r0, [sp, #12]
 8019c10:	0f09      	lsrs	r1, r1, #28
 8019c12:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019c16:	917a      	str	r1, [sp, #488]	; 0x1e8
 8019c18:	0f01      	lsrs	r1, r0, #28
 8019c1a:	9802      	ldr	r0, [sp, #8]
 8019c1c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8019c20:	917b      	str	r1, [sp, #492]	; 0x1ec
 8019c22:	9903      	ldr	r1, [sp, #12]
 8019c24:	0789      	lsls	r1, r1, #30
 8019c26:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019c2a:	917d      	str	r1, [sp, #500]	; 0x1f4
 8019c2c:	0781      	lsls	r1, r0, #30
 8019c2e:	9803      	ldr	r0, [sp, #12]
 8019c30:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 8019c34:	917c      	str	r1, [sp, #496]	; 0x1f0
 8019c36:	ac7c      	add	r4, sp, #496	; 0x1f0
 8019c38:	a97a      	add	r1, sp, #488	; 0x1e8
 8019c3a:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c42:	4060      	eors	r0, r4
 8019c44:	9c03      	ldr	r4, [sp, #12]
 8019c46:	4069      	eors	r1, r5
 8019c48:	9d02      	ldr	r5, [sp, #8]
 8019c4a:	0664      	lsls	r4, r4, #25
 8019c4c:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019c50:	947f      	str	r4, [sp, #508]	; 0x1fc
 8019c52:	066c      	lsls	r4, r5, #25
 8019c54:	9d03      	ldr	r5, [sp, #12]
 8019c56:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 8019c5a:	947e      	str	r4, [sp, #504]	; 0x1f8
 8019c5c:	ac7e      	add	r4, sp, #504	; 0x1f8
 8019c5e:	e9d4 4500 	ldrd	r4, r5, [r4]
 8019c62:	4044      	eors	r4, r0
 8019c64:	404d      	eors	r5, r1
 8019c66:	4620      	mov	r0, r4
 8019c68:	4629      	mov	r1, r5
 8019c6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019c6e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8019c72:	ea44 0408 	orr.w	r4, r4, r8
 8019c76:	ea45 0509 	orr.w	r5, r5, r9
 8019c7a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8019c7e:	ea08 0804 	and.w	r8, r8, r4
 8019c82:	ea09 0905 	and.w	r9, r9, r5
 8019c86:	4644      	mov	r4, r8
 8019c88:	464d      	mov	r5, r9
 8019c8a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8019c8e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019c92:	ea08 080a 	and.w	r8, r8, sl
 8019c96:	ea09 090b 	and.w	r9, r9, fp
 8019c9a:	ea48 0804 	orr.w	r8, r8, r4
 8019c9e:	eb18 0400 	adds.w	r4, r8, r0
 8019ca2:	ea49 0905 	orr.w	r9, r9, r5
 8019ca6:	eb49 0501 	adc.w	r5, r9, r1
 8019caa:	3340      	adds	r3, #64	; 0x40
 8019cac:	19a0      	adds	r0, r4, r6
 8019cae:	eb45 0107 	adc.w	r1, r5, r7
    }
    while( i < 80 );
 8019cb2:	459c      	cmp	ip, r3
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019cb4:	e9cd 0100 	strd	r0, r1, [sp]
 8019cb8:	f102 0240 	add.w	r2, r2, #64	; 0x40
    while( i < 80 );
 8019cbc:	f47f aa9c 	bne.w	80191f8 <mbedtls_sha512_process+0x1f0>

    ctx->state[0] += A;
 8019cc0:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8019cc4:	1824      	adds	r4, r4, r0
 8019cc6:	414d      	adcs	r5, r1
    ctx->state[1] += B;
 8019cc8:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    ctx->state[0] += A;
 8019ccc:	e9ce 4504 	strd	r4, r5, [lr, #16]
    ctx->state[1] += B;
 8019cd0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8019cd4:	eb13 030a 	adds.w	r3, r3, sl
 8019cd8:	eb44 040b 	adc.w	r4, r4, fp
    ctx->state[2] += C;
 8019cdc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    ctx->state[1] += B;
 8019ce0:	469a      	mov	sl, r3
 8019ce2:	46a3      	mov	fp, r4
    ctx->state[2] += C;
 8019ce4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8019ce8:	eb13 0308 	adds.w	r3, r3, r8
 8019cec:	eb44 0409 	adc.w	r4, r4, r9
 8019cf0:	4698      	mov	r8, r3
 8019cf2:	46a1      	mov	r9, r4
    ctx->state[3] += D;
 8019cf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019cf8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8019cfc:	18a4      	adds	r4, r4, r2
 8019cfe:	415d      	adcs	r5, r3
 8019d00:	e9ce 450a 	strd	r4, r5, [lr, #40]	; 0x28
    ctx->state[4] += E;
 8019d04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019d08:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8019d0c:	18a4      	adds	r4, r4, r2
 8019d0e:	415d      	adcs	r5, r3
 8019d10:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 8019d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019d18:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8019d1c:	18a4      	adds	r4, r4, r2
 8019d1e:	415d      	adcs	r5, r3
 8019d20:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 8019d24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019d28:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8019d2c:	18a4      	adds	r4, r4, r2
 8019d2e:	415d      	adcs	r5, r3
 8019d30:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 8019d34:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8019d38:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8019d3c:	18a4      	adds	r4, r4, r2
 8019d3e:	415d      	adcs	r5, r3
    ctx->state[1] += B;
 8019d40:	e9ce ab06 	strd	sl, fp, [lr, #24]
    ctx->state[2] += C;
 8019d44:	e9ce 8908 	strd	r8, r9, [lr, #32]
    ctx->state[7] += H;
 8019d48:	e9ce 4512 	strd	r4, r5, [lr, #72]	; 0x48
}
 8019d4c:	f20d 4d84 	addw	sp, sp, #1156	; 0x484
 8019d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d54 <mbedtls_sha512_update.part.0>:
#endif /* !MBEDTLS_SHA512_PROCESS_ALT */

/*
 * SHA-512 process buffer
 */
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d58:	4615      	mov	r5, r2
    unsigned int left;

    if( ilen == 0 )
        return;

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019d5a:	e9d0 2300 	ldrd	r2, r3, [r0]
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019d5e:	4688      	mov	r8, r1
 8019d60:	1956      	adds	r6, r2, r5
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 8019d62:	f04f 0100 	mov.w	r1, #0
 8019d66:	eb53 0701 	adcs.w	r7, r3, r1
 8019d6a:	f04f 0a00 	mov.w	sl, #0
 8019d6e:	f04f 0b00 	mov.w	fp, #0
 8019d72:	bf24      	itt	cs
 8019d74:	f04f 0a01 	movcs.w	sl, #1
 8019d78:	f04f 0b00 	movcs.w	fp, #0
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019d7c:	4604      	mov	r4, r0

    if( ctx->total[0] < (uint64_t) ilen )
 8019d7e:	ea5a 030b 	orrs.w	r3, sl, fp
    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019d82:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    ctx->total[0] += (uint64_t) ilen;
 8019d86:	e9c4 6700 	strd	r6, r7, [r4]
    if( ctx->total[0] < (uint64_t) ilen )
 8019d8a:	d006      	beq.n	8019d9a <mbedtls_sha512_update.part.0+0x46>
        ctx->total[1]++;
 8019d8c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8019d90:	1c50      	adds	r0, r2, #1
 8019d92:	f143 0100 	adc.w	r1, r3, #0
 8019d96:	e9c4 0102 	strd	r0, r1, [r4, #8]

    if( left && ilen >= fill )
 8019d9a:	f1b9 0f00 	cmp.w	r9, #0
 8019d9e:	d013      	beq.n	8019dc8 <mbedtls_sha512_update.part.0+0x74>
    fill = 128 - left;
 8019da0:	f1c9 0680 	rsb	r6, r9, #128	; 0x80
    if( left && ilen >= fill )
 8019da4:	42ae      	cmp	r6, r5
 8019da6:	d80f      	bhi.n	8019dc8 <mbedtls_sha512_update.part.0+0x74>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8019da8:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8019dac:	4641      	mov	r1, r8
 8019dae:	4632      	mov	r2, r6
 8019db0:	eb07 0009 	add.w	r0, r7, r9
 8019db4:	f008 fa97 	bl	80222e6 <memcpy>
        mbedtls_sha512_process( ctx, ctx->buffer );
 8019db8:	4639      	mov	r1, r7
 8019dba:	4620      	mov	r0, r4
 8019dbc:	f7ff f924 	bl	8019008 <mbedtls_sha512_process>
        input += fill;
 8019dc0:	44b0      	add	r8, r6
        ilen  -= fill;
 8019dc2:	1bad      	subs	r5, r5, r6
        left = 0;
 8019dc4:	f04f 0900 	mov.w	r9, #0
 8019dc8:	462e      	mov	r6, r5
 8019dca:	eb08 0705 	add.w	r7, r8, r5
 8019dce:	e003      	b.n	8019dd8 <mbedtls_sha512_update.part.0+0x84>
    }

    while( ilen >= 128 )
    {
        mbedtls_sha512_process( ctx, input );
 8019dd0:	4620      	mov	r0, r4
 8019dd2:	f7ff f919 	bl	8019008 <mbedtls_sha512_process>
        input += 128;
        ilen  -= 128;
 8019dd6:	3e80      	subs	r6, #128	; 0x80
    while( ilen >= 128 )
 8019dd8:	2e7f      	cmp	r6, #127	; 0x7f
 8019dda:	eba7 0106 	sub.w	r1, r7, r6
 8019dde:	d8f7      	bhi.n	8019dd0 <mbedtls_sha512_update.part.0+0x7c>
 8019de0:	09ea      	lsrs	r2, r5, #7
 8019de2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8019de6:	eb08 11c2 	add.w	r1, r8, r2, lsl #7
 8019dea:	fb03 5202 	mla	r2, r3, r2, r5
    }

    if( ilen > 0 )
 8019dee:	b132      	cbz	r2, 8019dfe <mbedtls_sha512_update.part.0+0xaa>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019df0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019df4:	4448      	add	r0, r9
}
 8019df6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019dfa:	f008 ba74 	b.w	80222e6 <memcpy>
}
 8019dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e02 <mbedtls_sha512_update>:
    if( ilen == 0 )
 8019e02:	b10a      	cbz	r2, 8019e08 <mbedtls_sha512_update+0x6>
 8019e04:	f7ff bfa6 	b.w	8019d54 <mbedtls_sha512_update.part.0>
}
 8019e08:	4770      	bx	lr
	...

08019e0c <mbedtls_sha512_finish>:

/*
 * SHA-512 final digest
 */
void mbedtls_sha512_finish( mbedtls_sha512_context *ctx, unsigned char output[64] )
{
 8019e0c:	e92d 48ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
 8019e10:	4604      	mov	r4, r0
 8019e12:	460d      	mov	r5, r1
    size_t last, padn;
    uint64_t high, low;
    unsigned char msglen[16];

    high = ( ctx->total[0] >> 61 )
 8019e14:	e9d0 2300 	ldrd	r2, r3, [r0]
         | ( ctx->total[1] <<  3 );
 8019e18:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
 8019e1c:	00ce      	lsls	r6, r1, #3
 8019e1e:	00c7      	lsls	r7, r0, #3
    high = ( ctx->total[0] >> 61 )
 8019e20:	0f58      	lsrs	r0, r3, #29
 8019e22:	ea40 0b06 	orr.w	fp, r0, r6
         | ( ctx->total[1] <<  3 );
 8019e26:	ea47 7751 	orr.w	r7, r7, r1, lsr #29
    high = ( ctx->total[0] >> 61 )
 8019e2a:	2100      	movs	r1, #0
 8019e2c:	ea41 0c07 	orr.w	ip, r1, r7
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, msglen, 0 );
 8019e30:	ea4f 611b 	mov.w	r1, fp, lsr #24
 8019e34:	f88d 1004 	strb.w	r1, [sp, #4]
    low  = ( ctx->total[0] <<  3 );
 8019e38:	00db      	lsls	r3, r3, #3
    PUT_UINT64_BE( high, msglen, 0 );
 8019e3a:	ea4f 411b 	mov.w	r1, fp, lsr #16
    low  = ( ctx->total[0] <<  3 );
 8019e3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    PUT_UINT64_BE( high, msglen, 0 );
 8019e42:	f88d 1005 	strb.w	r1, [sp, #5]
 8019e46:	ea4f 211b 	mov.w	r1, fp, lsr #8
 8019e4a:	f88d 1006 	strb.w	r1, [sp, #6]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e4e:	0e19      	lsrs	r1, r3, #24
    low  = ( ctx->total[0] <<  3 );
 8019e50:	00d6      	lsls	r6, r2, #3
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e52:	f88d 1008 	strb.w	r1, [sp, #8]
 8019e56:	0c19      	lsrs	r1, r3, #16

    last = (size_t)( ctx->total[0] & 0x7F );
 8019e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    PUT_UINT64_BE( high, msglen, 0 );
 8019e5c:	ea4f 671c 	mov.w	r7, ip, lsr #24
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e60:	f88d 1009 	strb.w	r1, [sp, #9]
 8019e64:	f88d 300b 	strb.w	r3, [sp, #11]
 8019e68:	0a19      	lsrs	r1, r3, #8
 8019e6a:	0e33      	lsrs	r3, r6, #24
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 8019e6c:	2a6f      	cmp	r2, #111	; 0x6f
    PUT_UINT64_BE( high, msglen, 0 );
 8019e6e:	f88d 7000 	strb.w	r7, [sp]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e72:	f88d 300c 	strb.w	r3, [sp, #12]
    PUT_UINT64_BE( high, msglen, 0 );
 8019e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e7a:	ea4f 4316 	mov.w	r3, r6, lsr #16
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 8019e7e:	bf94      	ite	ls
 8019e80:	f1c2 0270 	rsbls	r2, r2, #112	; 0x70
 8019e84:	f1c2 02f0 	rsbhi	r2, r2, #240	; 0xf0
    PUT_UINT64_BE( high, msglen, 0 );
 8019e88:	f88d 7001 	strb.w	r7, [sp, #1]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e8c:	f88d 100a 	strb.w	r1, [sp, #10]
    PUT_UINT64_BE( high, msglen, 0 );
 8019e90:	ea4f 271c 	mov.w	r7, ip, lsr #8
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e94:	f88d 300d 	strb.w	r3, [sp, #13]

    mbedtls_sha512_update( ctx, sha512_padding, padn );
 8019e98:	496d      	ldr	r1, [pc, #436]	; (801a050 <mbedtls_sha512_finish+0x244>)
    PUT_UINT64_BE( high, msglen, 0 );
 8019e9a:	f88d c003 	strb.w	ip, [sp, #3]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019e9e:	0a33      	lsrs	r3, r6, #8
    mbedtls_sha512_update( ctx, sha512_padding, padn );
 8019ea0:	4620      	mov	r0, r4
    PUT_UINT64_BE( low,  msglen, 8 );
 8019ea2:	f88d 300e 	strb.w	r3, [sp, #14]
    PUT_UINT64_BE( high, msglen, 0 );
 8019ea6:	f88d 7002 	strb.w	r7, [sp, #2]
 8019eaa:	f88d b007 	strb.w	fp, [sp, #7]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019eae:	f88d 600f 	strb.w	r6, [sp, #15]
    mbedtls_sha512_update( ctx, sha512_padding, padn );
 8019eb2:	f7ff ffa6 	bl	8019e02 <mbedtls_sha512_update>
 8019eb6:	2210      	movs	r2, #16
 8019eb8:	4669      	mov	r1, sp
 8019eba:	4620      	mov	r0, r4
 8019ebc:	f7ff ff4a 	bl	8019d54 <mbedtls_sha512_update.part.0>
    mbedtls_sha512_update( ctx, msglen, 16 );

    PUT_UINT64_BE( ctx->state[0], output,  0 );
 8019ec0:	7de3      	ldrb	r3, [r4, #23]
 8019ec2:	702b      	strb	r3, [r5, #0]
 8019ec4:	8ae3      	ldrh	r3, [r4, #22]
 8019ec6:	706b      	strb	r3, [r5, #1]
 8019ec8:	6963      	ldr	r3, [r4, #20]
 8019eca:	0a1b      	lsrs	r3, r3, #8
 8019ecc:	70ab      	strb	r3, [r5, #2]
 8019ece:	6963      	ldr	r3, [r4, #20]
 8019ed0:	70eb      	strb	r3, [r5, #3]
 8019ed2:	7ce3      	ldrb	r3, [r4, #19]
 8019ed4:	712b      	strb	r3, [r5, #4]
 8019ed6:	8a63      	ldrh	r3, [r4, #18]
 8019ed8:	716b      	strb	r3, [r5, #5]
 8019eda:	6923      	ldr	r3, [r4, #16]
 8019edc:	0a1b      	lsrs	r3, r3, #8
 8019ede:	71ab      	strb	r3, [r5, #6]
 8019ee0:	6923      	ldr	r3, [r4, #16]
 8019ee2:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 8019ee4:	7fe3      	ldrb	r3, [r4, #31]
 8019ee6:	722b      	strb	r3, [r5, #8]
 8019ee8:	8be3      	ldrh	r3, [r4, #30]
 8019eea:	726b      	strb	r3, [r5, #9]
 8019eec:	69e3      	ldr	r3, [r4, #28]
 8019eee:	0a1b      	lsrs	r3, r3, #8
 8019ef0:	72ab      	strb	r3, [r5, #10]
 8019ef2:	69e3      	ldr	r3, [r4, #28]
 8019ef4:	72eb      	strb	r3, [r5, #11]
 8019ef6:	7ee3      	ldrb	r3, [r4, #27]
 8019ef8:	732b      	strb	r3, [r5, #12]
 8019efa:	8b63      	ldrh	r3, [r4, #26]
 8019efc:	736b      	strb	r3, [r5, #13]
 8019efe:	69a3      	ldr	r3, [r4, #24]
 8019f00:	0a1b      	lsrs	r3, r3, #8
 8019f02:	73ab      	strb	r3, [r5, #14]
 8019f04:	69a3      	ldr	r3, [r4, #24]
 8019f06:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 8019f08:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8019f0c:	742b      	strb	r3, [r5, #16]
 8019f0e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019f10:	746b      	strb	r3, [r5, #17]
 8019f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f14:	0a1b      	lsrs	r3, r3, #8
 8019f16:	74ab      	strb	r3, [r5, #18]
 8019f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f1a:	74eb      	strb	r3, [r5, #19]
 8019f1c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8019f20:	752b      	strb	r3, [r5, #20]
 8019f22:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8019f24:	756b      	strb	r3, [r5, #21]
 8019f26:	6a23      	ldr	r3, [r4, #32]
 8019f28:	0a1b      	lsrs	r3, r3, #8
 8019f2a:	75ab      	strb	r3, [r5, #22]
 8019f2c:	6a23      	ldr	r3, [r4, #32]
 8019f2e:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 8019f30:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8019f34:	762b      	strb	r3, [r5, #24]
 8019f36:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8019f38:	766b      	strb	r3, [r5, #25]
 8019f3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019f3c:	0a1b      	lsrs	r3, r3, #8
 8019f3e:	76ab      	strb	r3, [r5, #26]
 8019f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019f42:	76eb      	strb	r3, [r5, #27]
 8019f44:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8019f48:	772b      	strb	r3, [r5, #28]
 8019f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8019f4c:	776b      	strb	r3, [r5, #29]
 8019f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019f50:	0a1b      	lsrs	r3, r3, #8
 8019f52:	77ab      	strb	r3, [r5, #30]
 8019f54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019f56:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 8019f58:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019f5c:	f885 3020 	strb.w	r3, [r5, #32]
 8019f60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019f62:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 8019f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f68:	0a1b      	lsrs	r3, r3, #8
 8019f6a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8019f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f70:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 8019f74:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8019f78:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8019f7c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019f7e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8019f82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019f84:	0a1b      	lsrs	r3, r3, #8
 8019f86:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 8019f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019f8c:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 8019f90:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8019f94:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8019f98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8019f9a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 8019f9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019fa0:	0a1b      	lsrs	r3, r3, #8
 8019fa2:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 8019fa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019fa8:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 8019fac:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8019fb0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 8019fb4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8019fb6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 8019fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019fbc:	0a1b      	lsrs	r3, r3, #8
 8019fbe:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 8019fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019fc4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 8019fc8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d13b      	bne.n	801a048 <mbedtls_sha512_finish+0x23c>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 8019fd0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8019fd4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8019fd8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8019fdc:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 8019fe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019fe2:	0a1b      	lsrs	r3, r3, #8
 8019fe4:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8019fe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019fea:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 8019fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019ff2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8019ff6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8019ffa:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8019ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a000:	0a1b      	lsrs	r3, r3, #8
 801a002:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 801a006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a008:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 801a00c:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 801a010:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801a014:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801a018:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 801a01c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a01e:	0a1b      	lsrs	r3, r3, #8
 801a020:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 801a024:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a026:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 801a02a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 801a02e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 801a032:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801a036:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 801a03a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a03c:	0a1b      	lsrs	r3, r3, #8
 801a03e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 801a042:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a044:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }
}
 801a048:	b004      	add	sp, #16
 801a04a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801a04e:	bf00      	nop
 801a050:	0802c720 	.word	0x0802c720

0801a054 <mbedtls_sha512>:
/*
 * output = SHA-512( input buffer )
 */
void mbedtls_sha512( const unsigned char *input, size_t ilen,
             unsigned char output[64], int is384 )
{
 801a054:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a056:	b0b7      	sub	sp, #220	; 0xdc
 801a058:	461f      	mov	r7, r3
 801a05a:	4605      	mov	r5, r0
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 801a05c:	4668      	mov	r0, sp
{
 801a05e:	4614      	mov	r4, r2
 801a060:	460e      	mov	r6, r1
    mbedtls_sha512_init( &ctx );
 801a062:	f7fe ff22 	bl	8018eaa <mbedtls_sha512_init>
    mbedtls_sha512_starts( &ctx, is384 );
 801a066:	4639      	mov	r1, r7
 801a068:	4668      	mov	r0, sp
 801a06a:	f7fe ff31 	bl	8018ed0 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx, input, ilen );
 801a06e:	4632      	mov	r2, r6
 801a070:	4629      	mov	r1, r5
 801a072:	4668      	mov	r0, sp
 801a074:	f7ff fec5 	bl	8019e02 <mbedtls_sha512_update>
    mbedtls_sha512_finish( &ctx, output );
 801a078:	4621      	mov	r1, r4
 801a07a:	4668      	mov	r0, sp
 801a07c:	f7ff fec6 	bl	8019e0c <mbedtls_sha512_finish>
    mbedtls_sha512_free( &ctx );
 801a080:	4668      	mov	r0, sp
 801a082:	f7fe ff16 	bl	8018eb2 <mbedtls_sha512_free>
}
 801a086:	b037      	add	sp, #220	; 0xdc
 801a088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a08c <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 801a08c:	b510      	push	{r4, lr}
 801a08e:	4c06      	ldr	r4, [pc, #24]	; (801a0a8 <mbedtls_ssl_ciphersuite_from_id+0x1c>)
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 801a090:	2300      	movs	r3, #0
 801a092:	591a      	ldr	r2, [r3, r4]
 801a094:	18e1      	adds	r1, r4, r3
 801a096:	b90a      	cbnz	r2, 801a09c <mbedtls_ssl_ciphersuite_from_id+0x10>
            return( cur );

        cur++;
    }

    return( NULL );
 801a098:	4611      	mov	r1, r2
 801a09a:	e003      	b.n	801a0a4 <mbedtls_ssl_ciphersuite_from_id+0x18>
        if( cur->id == ciphersuite )
 801a09c:	4282      	cmp	r2, r0
 801a09e:	f103 0320 	add.w	r3, r3, #32
 801a0a2:	d1f6      	bne.n	801a092 <mbedtls_ssl_ciphersuite_from_id+0x6>
}
 801a0a4:	4608      	mov	r0, r1
 801a0a6:	bd10      	pop	{r4, pc}
 801a0a8:	0802ca80 	.word	0x0802ca80

0801a0ac <mbedtls_ssl_list_ciphersuites>:
{
 801a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( supported_init == 0 )
 801a0b0:	4c0e      	ldr	r4, [pc, #56]	; (801a0ec <mbedtls_ssl_list_ciphersuites+0x40>)
 801a0b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a0b4:	b953      	cbnz	r3, 801a0cc <mbedtls_ssl_list_ciphersuites+0x20>
 801a0b6:	4f0e      	ldr	r7, [pc, #56]	; (801a0f0 <mbedtls_ssl_list_ciphersuites+0x44>)
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801a0b8:	4625      	mov	r5, r4
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801a0ba:	f104 0848 	add.w	r8, r4, #72	; 0x48
 801a0be:	f857 6f04 	ldr.w	r6, [r7, #4]!
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801a0c2:	b936      	cbnz	r6, 801a0d2 <mbedtls_ssl_list_ciphersuites+0x26>
        *q = 0;
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	602b      	str	r3, [r5, #0]
        supported_init = 1;
 801a0c8:	2301      	movs	r3, #1
 801a0ca:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 801a0cc:	4807      	ldr	r0, [pc, #28]	; (801a0ec <mbedtls_ssl_list_ciphersuites+0x40>)
 801a0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801a0d2:	4545      	cmp	r5, r8
 801a0d4:	d2f6      	bcs.n	801a0c4 <mbedtls_ssl_list_ciphersuites+0x18>
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
 801a0d6:	4630      	mov	r0, r6
 801a0d8:	f7ff ffd8 	bl	801a08c <mbedtls_ssl_ciphersuite_from_id>
 801a0dc:	2800      	cmp	r0, #0
 801a0de:	d0ee      	beq.n	801a0be <mbedtls_ssl_list_ciphersuites+0x12>
 801a0e0:	7a03      	ldrb	r3, [r0, #8]
 801a0e2:	2b2a      	cmp	r3, #42	; 0x2a
                *(q++) = *p;
 801a0e4:	bf1c      	itt	ne
 801a0e6:	602e      	strne	r6, [r5, #0]
 801a0e8:	3504      	addne	r5, #4
 801a0ea:	e7e8      	b.n	801a0be <mbedtls_ssl_list_ciphersuites+0x12>
 801a0ec:	200010dc 	.word	0x200010dc
 801a0f0:	0802ccdc 	.word	0x0802ccdc

0801a0f4 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 801a0f4:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 801a0f6:	f7ff ffc9 	bl	801a08c <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 801a0fa:	b108      	cbz	r0, 801a100 <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 801a0fc:	6840      	ldr	r0, [r0, #4]
}
 801a0fe:	bd08      	pop	{r3, pc}
        return( "unknown" );
 801a100:	4800      	ldr	r0, [pc, #0]	; (801a104 <mbedtls_ssl_get_ciphersuite_name+0x10>)
 801a102:	e7fc      	b.n	801a0fe <mbedtls_ssl_get_ciphersuite_name+0xa>
 801a104:	0803064e 	.word	0x0803064e

0801a108 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801a108:	7a83      	ldrb	r3, [r0, #10]
 801a10a:	2b0a      	cmp	r3, #10
 801a10c:	d80e      	bhi.n	801a12c <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x24>
 801a10e:	2001      	movs	r0, #1
 801a110:	fa00 f303 	lsl.w	r3, r0, r3
 801a114:	f013 0f8e 	tst.w	r3, #142	; 0x8e
 801a118:	d10b      	bne.n	801a132 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x2a>
 801a11a:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 801a11e:	d107      	bne.n	801a130 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x28>
 801a120:	f013 0f10 	tst.w	r3, #16
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
            return( MBEDTLS_PK_RSA );

        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );
 801a124:	bf0c      	ite	eq
 801a126:	2000      	moveq	r0, #0
 801a128:	2004      	movne	r0, #4
 801a12a:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );

        default:
            return( MBEDTLS_PK_NONE );
 801a12c:	2000      	movs	r0, #0
 801a12e:	4770      	bx	lr
            return( MBEDTLS_PK_ECKEY );
 801a130:	2002      	movs	r0, #2
    }
}
 801a132:	4770      	bx	lr

0801a134 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801a134:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a136:	b113      	cbz	r3, 801a13e <mbedtls_ssl_own_key+0xa>
 801a138:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801a13c:	b913      	cbnz	r3, 801a144 <mbedtls_ssl_own_key+0x10>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 801a13e:	6803      	ldr	r3, [r0, #0]
 801a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    return( key_cert == NULL ? NULL : key_cert->key );
 801a142:	b10b      	cbz	r3, 801a148 <mbedtls_ssl_own_key+0x14>
 801a144:	6858      	ldr	r0, [r3, #4]
 801a146:	4770      	bx	lr
 801a148:	4618      	mov	r0, r3
}
 801a14a:	4770      	bx	lr

0801a14c <ssl_write_client_hello>:

    return( 0 );
}

static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
{
 801a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a150:	b089      	sub	sp, #36	; 0x24
 801a152:	4604      	mov	r4, r0
    unsigned char *p, *q;
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 801a154:	4bb7      	ldr	r3, [pc, #732]	; (801a434 <ssl_write_client_hello+0x2e8>)
 801a156:	9300      	str	r3, [sp, #0]
 801a158:	2102      	movs	r1, #2
 801a15a:	f240 23cf 	movw	r3, #719	; 0x2cf
 801a15e:	4ab6      	ldr	r2, [pc, #728]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a160:	f7f6 fa66 	bl	8010630 <mbedtls_debug_print_msg>

    if( ssl->conf->f_rng == NULL )
 801a164:	6821      	ldr	r1, [r4, #0]
 801a166:	698b      	ldr	r3, [r1, #24]
 801a168:	b96b      	cbnz	r3, 801a186 <ssl_write_client_hello+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a16a:	4bb4      	ldr	r3, [pc, #720]	; (801a43c <ssl_write_client_hello+0x2f0>)
 801a16c:	9300      	str	r3, [sp, #0]
 801a16e:	4ab2      	ldr	r2, [pc, #712]	; (801a438 <ssl_write_client_hello+0x2ec>)
        return( MBEDTLS_ERR_SSL_NO_RNG );
 801a170:	4db3      	ldr	r5, [pc, #716]	; (801a440 <ssl_write_client_hello+0x2f4>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a172:	f240 23d3 	movw	r3, #723	; 0x2d3
 801a176:	2101      	movs	r1, #1
 801a178:	4620      	mov	r0, r4
 801a17a:	f7f6 fa59 	bl	8010630 <mbedtls_debug_print_msg>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );

    return( 0 );
}
 801a17e:	4628      	mov	r0, r5
 801a180:	b009      	add	sp, #36	; 0x24
 801a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a186:	68a3      	ldr	r3, [r4, #8]
 801a188:	b92b      	cbnz	r3, 801a196 <ssl_write_client_hello+0x4a>
        ssl->major_ver = ssl->conf->min_major_ver;
 801a18a:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 801a18e:	6123      	str	r3, [r4, #16]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 801a190:	f891 306b 	ldrb.w	r3, [r1, #107]	; 0x6b
 801a194:	6163      	str	r3, [r4, #20]
    if( ssl->conf->max_major_ver == 0 )
 801a196:	f891 0068 	ldrb.w	r0, [r1, #104]	; 0x68
 801a19a:	b950      	cbnz	r0, 801a1b2 <ssl_write_client_hello+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a19c:	4ba9      	ldr	r3, [pc, #676]	; (801a444 <ssl_write_client_hello+0x2f8>)
 801a19e:	9300      	str	r3, [sp, #0]
 801a1a0:	4aa5      	ldr	r2, [pc, #660]	; (801a438 <ssl_write_client_hello+0x2ec>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a1a2:	4da9      	ldr	r5, [pc, #676]	; (801a448 <ssl_write_client_hello+0x2fc>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a1a4:	f240 23e2 	movw	r3, #738	; 0x2e2
 801a1a8:	2101      	movs	r1, #1
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f7f6 fa40 	bl	8010630 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a1b0:	e7e5      	b.n	801a17e <ssl_write_client_hello+0x32>
    buf = ssl->out_msg;
 801a1b2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                       ssl->conf->transport, p );
 801a1b6:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
    buf = ssl->out_msg;
 801a1ba:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801a1bc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801a1c0:	3304      	adds	r3, #4
 801a1c2:	f891 1069 	ldrb.w	r1, [r1, #105]	; 0x69
 801a1c6:	f005 f835 	bl	801f234 <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 801a1ca:	9b05      	ldr	r3, [sp, #20]
 801a1cc:	4a9a      	ldr	r2, [pc, #616]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a1ce:	795b      	ldrb	r3, [r3, #5]
 801a1d0:	9302      	str	r3, [sp, #8]
 801a1d2:	9b05      	ldr	r3, [sp, #20]
 801a1d4:	791b      	ldrb	r3, [r3, #4]
 801a1d6:	9301      	str	r3, [sp, #4]
 801a1d8:	4b9c      	ldr	r3, [pc, #624]	; (801a44c <ssl_write_client_hello+0x300>)
 801a1da:	9300      	str	r3, [sp, #0]
 801a1dc:	2103      	movs	r1, #3
 801a1de:	f240 23f5 	movw	r3, #757	; 0x2f5
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	f7f6 fa24 	bl	8010630 <mbedtls_debug_print_msg>
    t = mbedtls_time( NULL );
 801a1e8:	2000      	movs	r0, #0
    unsigned char *p = ssl->handshake->randbytes;
 801a1ea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    t = mbedtls_time( NULL );
 801a1ec:	f7e9 f80e 	bl	800320c <time>
    *p++ = (unsigned char)( t >> 24 );
 801a1f0:	0e03      	lsrs	r3, r0, #24
 801a1f2:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
    *p++ = (unsigned char)( t >> 16 );
 801a1f6:	0c03      	lsrs	r3, r0, #16
 801a1f8:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
    *p++ = (unsigned char)( t >>  8 );
 801a1fc:	0a03      	lsrs	r3, r0, #8
 801a1fe:	f885 32ae 	strb.w	r3, [r5, #686]	; 0x2ae
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a202:	4b93      	ldr	r3, [pc, #588]	; (801a450 <ssl_write_client_hello+0x304>)
    *p++ = (unsigned char)( t       );
 801a204:	f885 02af 	strb.w	r0, [r5, #687]	; 0x2af
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a208:	4a8b      	ldr	r2, [pc, #556]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a20a:	9300      	str	r3, [sp, #0]
 801a20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a210:	f240 23b7 	movw	r3, #695	; 0x2b7
 801a214:	2103      	movs	r1, #3
 801a216:	4620      	mov	r0, r4
 801a218:	f7f6 fa0a 	bl	8010630 <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 801a21c:	6823      	ldr	r3, [r4, #0]
 801a21e:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 801a222:	699e      	ldr	r6, [r3, #24]
 801a224:	69d8      	ldr	r0, [r3, #28]
 801a226:	221c      	movs	r2, #28
 801a228:	47b0      	blx	r6
 801a22a:	4605      	mov	r5, r0
 801a22c:	b150      	cbz	r0, 801a244 <ssl_write_client_hello+0xf8>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 801a22e:	4b89      	ldr	r3, [pc, #548]	; (801a454 <ssl_write_client_hello+0x308>)
 801a230:	9300      	str	r3, [sp, #0]
 801a232:	9001      	str	r0, [sp, #4]
 801a234:	f240 23f9 	movw	r3, #761	; 0x2f9
 801a238:	4a7f      	ldr	r2, [pc, #508]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a23a:	2101      	movs	r1, #1
 801a23c:	4620      	mov	r0, r4
 801a23e:	f7f6 fa27 	bl	8010690 <mbedtls_debug_print_ret>
        return( ret );
 801a242:	e79c      	b.n	801a17e <ssl_write_client_hello+0x32>
    p += 2;
 801a244:	9b05      	ldr	r3, [sp, #20]
 801a246:	1d99      	adds	r1, r3, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 801a248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a24a:	4608      	mov	r0, r1
 801a24c:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801a250:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801a254:	f852 5b04 	ldr.w	r5, [r2], #4
 801a258:	f840 5b04 	str.w	r5, [r0], #4
 801a25c:	429a      	cmp	r2, r3
 801a25e:	d1f9      	bne.n	801a254 <ssl_write_client_hello+0x108>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 801a260:	2320      	movs	r3, #32
 801a262:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a266:	4b7c      	ldr	r3, [pc, #496]	; (801a458 <ssl_write_client_hello+0x30c>)
 801a268:	9300      	str	r3, [sp, #0]
 801a26a:	4a73      	ldr	r2, [pc, #460]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a26c:	f240 23fe 	movw	r3, #766	; 0x2fe
 801a270:	2103      	movs	r1, #3
 801a272:	4620      	mov	r0, r4
 801a274:	f7f6 fa3a 	bl	80106ec <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 801a278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a27a:	690b      	ldr	r3, [r1, #16]
    if( n < 16 || n > 32 ||
 801a27c:	f1a3 0210 	sub.w	r2, r3, #16
 801a280:	2a10      	cmp	r2, #16
 801a282:	68a2      	ldr	r2, [r4, #8]
 801a284:	d818      	bhi.n	801a2b8 <ssl_write_client_hello+0x16c>
 801a286:	b9ba      	cbnz	r2, 801a2b8 <ssl_write_client_hello+0x16c>
        ssl->handshake->resume == 0 )
 801a288:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801a28a:	f8d2 2330 	ldr.w	r2, [r2, #816]	; 0x330
        n = 0;
 801a28e:	2a00      	cmp	r2, #0
 801a290:	bf08      	it	eq
 801a292:	2300      	moveq	r3, #0
        if( ssl->session_negotiate->ticket != NULL &&
 801a294:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 801a296:	b192      	cbz	r2, 801a2be <ssl_write_client_hello+0x172>
 801a298:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 801a29a:	b182      	cbz	r2, 801a2be <ssl_write_client_hello+0x172>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 801a29c:	6823      	ldr	r3, [r4, #0]
 801a29e:	2220      	movs	r2, #32
 801a2a0:	699d      	ldr	r5, [r3, #24]
 801a2a2:	69d8      	ldr	r0, [r3, #28]
 801a2a4:	3114      	adds	r1, #20
 801a2a6:	47a8      	blx	r5
            if( ret != 0 )
 801a2a8:	4605      	mov	r5, r0
 801a2aa:	2800      	cmp	r0, #0
 801a2ac:	f47f af67 	bne.w	801a17e <ssl_write_client_hello+0x32>
            ssl->session_negotiate->id_len = n = 32;
 801a2b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a2b2:	2320      	movs	r3, #32
 801a2b4:	6113      	str	r3, [r2, #16]
 801a2b6:	e002      	b.n	801a2be <ssl_write_client_hello+0x172>
        n = 0;
 801a2b8:	2300      	movs	r3, #0
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a2ba:	2a00      	cmp	r2, #0
 801a2bc:	d0ea      	beq.n	801a294 <ssl_write_client_hello+0x148>
    *p++ = (unsigned char) n;
 801a2be:	9a05      	ldr	r2, [sp, #20]
    for( i = 0; i < n; i++ )
 801a2c0:	2500      	movs	r5, #0
    *p++ = (unsigned char) n;
 801a2c2:	f102 0627 	add.w	r6, r2, #39	; 0x27
 801a2c6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    for( i = 0; i < n; i++ )
 801a2ca:	429d      	cmp	r5, r3
 801a2cc:	f040 80d8 	bne.w	801a480 <ssl_write_client_hello+0x334>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 801a2d0:	4b62      	ldr	r3, [pc, #392]	; (801a45c <ssl_write_client_hello+0x310>)
 801a2d2:	9501      	str	r5, [sp, #4]
 801a2d4:	9300      	str	r3, [sp, #0]
 801a2d6:	4a58      	ldr	r2, [pc, #352]	; (801a438 <ssl_write_client_hello+0x2ec>)
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a2d8:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 801a47c <ssl_write_client_hello+0x330>
 801a2dc:	f8df b158 	ldr.w	fp, [pc, #344]	; 801a438 <ssl_write_client_hello+0x2ec>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 801a2e0:	f240 3333 	movw	r3, #819	; 0x333
 801a2e4:	2103      	movs	r1, #3
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	f7f6 f9a2 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 801a2ec:	4b5c      	ldr	r3, [pc, #368]	; (801a460 <ssl_write_client_hello+0x314>)
 801a2ee:	9300      	str	r3, [sp, #0]
 801a2f0:	e9cd 6501 	strd	r6, r5, [sp, #4]
 801a2f4:	f44f 734d 	mov.w	r3, #820	; 0x334
 801a2f8:	4a4f      	ldr	r2, [pc, #316]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a2fa:	2103      	movs	r1, #3
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	f7f6 f9f5 	bl	80106ec <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 801a302:	6823      	ldr	r3, [r4, #0]
 801a304:	6962      	ldr	r2, [r4, #20]
 801a306:	eb06 0805 	add.w	r8, r6, r5
 801a30a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
    p += 2;
 801a30e:	f108 0602 	add.w	r6, r8, #2
    n = 0;
 801a312:	2500      	movs	r5, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a314:	6838      	ldr	r0, [r7, #0]
 801a316:	f106 0902 	add.w	r9, r6, #2
 801a31a:	2800      	cmp	r0, #0
 801a31c:	f040 80b6 	bne.w	801a48c <ssl_write_client_hello+0x340>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a320:	68a3      	ldr	r3, [r4, #8]
 801a322:	b923      	cbnz	r3, 801a32e <ssl_write_client_hello+0x1e2>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 801a324:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 801a326:	23ff      	movs	r3, #255	; 0xff
 801a328:	7073      	strb	r3, [r6, #1]
        n++;
 801a32a:	3501      	adds	r5, #1
 801a32c:	464e      	mov	r6, r9
    *q++ = (unsigned char)( n >> 7 );
 801a32e:	09eb      	lsrs	r3, r5, #7
 801a330:	f888 3000 	strb.w	r3, [r8]
    *q++ = (unsigned char)( n << 1 );
 801a334:	006b      	lsls	r3, r5, #1
 801a336:	f888 3001 	strb.w	r3, [r8, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites", n ) );
 801a33a:	4b4a      	ldr	r3, [pc, #296]	; (801a464 <ssl_write_client_hello+0x318>)
 801a33c:	9501      	str	r5, [sp, #4]
 801a33e:	9300      	str	r3, [sp, #0]
 801a340:	4a3d      	ldr	r2, [pc, #244]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a342:	f44f 7366 	mov.w	r3, #920	; 0x398
 801a346:	2103      	movs	r1, #3
 801a348:	4620      	mov	r0, r4
 801a34a:	f7f6 f971 	bl	8010630 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 801a34e:	2501      	movs	r5, #1
 801a350:	4b45      	ldr	r3, [pc, #276]	; (801a468 <ssl_write_client_hello+0x31c>)
 801a352:	9300      	str	r3, [sp, #0]
 801a354:	4a38      	ldr	r2, [pc, #224]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a356:	9501      	str	r5, [sp, #4]
 801a358:	f240 33b7 	movw	r3, #951	; 0x3b7
 801a35c:	2103      	movs	r1, #3
 801a35e:	4620      	mov	r0, r4
 801a360:	f7f6 f966 	bl	8010630 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a364:	f04f 0900 	mov.w	r9, #0
 801a368:	4b40      	ldr	r3, [pc, #256]	; (801a46c <ssl_write_client_hello+0x320>)
 801a36a:	9300      	str	r3, [sp, #0]
        *p++ = 1;
 801a36c:	4637      	mov	r7, r6
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a36e:	f240 33b9 	movw	r3, #953	; 0x3b9
 801a372:	f8cd 9004 	str.w	r9, [sp, #4]
 801a376:	4a30      	ldr	r2, [pc, #192]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a378:	2103      	movs	r1, #3
 801a37a:	4620      	mov	r0, r4
 801a37c:	f7f6 f958 	bl	8010630 <mbedtls_debug_print_msg>
        *p++ = 1;
 801a380:	f807 5b02 	strb.w	r5, [r7], #2
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a384:	1d33      	adds	r3, r6, #4
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 801a386:	f886 9001 	strb.w	r9, [r6, #1]
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a38a:	9306      	str	r3, [sp, #24]
    if( ssl->hostname == NULL )
 801a38c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801a390:	2b00      	cmp	r3, #0
 801a392:	f000 80b7 	beq.w	801a504 <ssl_write_client_hello+0x3b8>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a396:	9301      	str	r3, [sp, #4]
 801a398:	4b35      	ldr	r3, [pc, #212]	; (801a470 <ssl_write_client_hello+0x324>)
 801a39a:	4a27      	ldr	r2, [pc, #156]	; (801a438 <ssl_write_client_hello+0x2ec>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a39c:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a3a0:	9300      	str	r3, [sp, #0]
 801a3a2:	2103      	movs	r1, #3
 801a3a4:	2348      	movs	r3, #72	; 0x48
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	f7f6 f942 	bl	8010630 <mbedtls_debug_print_msg>
    hostname_len = strlen( ssl->hostname );
 801a3ac:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801a3b0:	f7e5 ff18 	bl	80001e4 <strlen>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a3b4:	f505 559c 	add.w	r5, r5, #4992	; 0x1380
 801a3b8:	3508      	adds	r5, #8
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a3ba:	1d33      	adds	r3, r6, #4
 801a3bc:	42ab      	cmp	r3, r5
    hostname_len = strlen( ssl->hostname );
 801a3be:	4602      	mov	r2, r0
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a3c0:	d805      	bhi.n	801a3ce <ssl_write_client_hello+0x282>
 801a3c2:	f100 0809 	add.w	r8, r0, #9
 801a3c6:	1aed      	subs	r5, r5, r3
 801a3c8:	4545      	cmp	r5, r8
 801a3ca:	f080 8080 	bcs.w	801a4ce <ssl_write_client_hello+0x382>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a3ce:	4b29      	ldr	r3, [pc, #164]	; (801a474 <ssl_write_client_hello+0x328>)
 801a3d0:	9300      	str	r3, [sp, #0]
 801a3d2:	4a19      	ldr	r2, [pc, #100]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a3d4:	234e      	movs	r3, #78	; 0x4e
 801a3d6:	2101      	movs	r1, #1
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f7f6 f929 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a3de:	f04f 0800 	mov.w	r8, #0
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801a3e2:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801a3e6:	f1ba 0f01 	cmp.w	sl, #1
 801a3ea:	d121      	bne.n	801a430 <ssl_write_client_hello+0x2e4>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a3ec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a3f0:	4a11      	ldr	r2, [pc, #68]	; (801a438 <ssl_write_client_hello+0x2ec>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a3f2:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a3f6:	f108 0502 	add.w	r5, r8, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a3fa:	4b1f      	ldr	r3, [pc, #124]	; (801a478 <ssl_write_client_hello+0x32c>)
 801a3fc:	9300      	str	r3, [sp, #0]
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a3fe:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a400:	f109 0908 	add.w	r9, r9, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a404:	2384      	movs	r3, #132	; 0x84
 801a406:	2103      	movs	r1, #3
 801a408:	4620      	mov	r0, r4
 801a40a:	f7f6 f911 	bl	8010630 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 + ssl->verify_data_len )
 801a40e:	454d      	cmp	r5, r9
 801a410:	d806      	bhi.n	801a420 <ssl_write_client_hello+0x2d4>
 801a412:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a416:	eba9 0905 	sub.w	r9, r9, r5
 801a41a:	3305      	adds	r3, #5
 801a41c:	4599      	cmp	r9, r3
 801a41e:	d273      	bcs.n	801a508 <ssl_write_client_hello+0x3bc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a420:	4b14      	ldr	r3, [pc, #80]	; (801a474 <ssl_write_client_hello+0x328>)
 801a422:	9300      	str	r3, [sp, #0]
 801a424:	4a04      	ldr	r2, [pc, #16]	; (801a438 <ssl_write_client_hello+0x2ec>)
 801a426:	2388      	movs	r3, #136	; 0x88
 801a428:	2101      	movs	r1, #1
 801a42a:	4620      	mov	r0, r4
 801a42c:	f7f6 f900 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a430:	2500      	movs	r5, #0
 801a432:	e080      	b.n	801a536 <ssl_write_client_hello+0x3ea>
 801a434:	08030939 	.word	0x08030939
 801a438:	080308d8 	.word	0x080308d8
 801a43c:	0803094f 	.word	0x0803094f
 801a440:	ffff8c00 	.word	0xffff8c00
 801a444:	0803095f 	.word	0x0803095f
 801a448:	ffff8f00 	.word	0xffff8f00
 801a44c:	080309b5 	.word	0x080309b5
 801a450:	080309d8 	.word	0x080309d8
 801a454:	080309f8 	.word	0x080309f8
 801a458:	08030a0c 	.word	0x08030a0c
 801a45c:	08030a27 	.word	0x08030a27
 801a460:	08030a49 	.word	0x08030a49
 801a464:	08030a86 	.word	0x08030a86
 801a468:	08030aa8 	.word	0x08030aa8
 801a46c:	08030ac8 	.word	0x08030ac8
 801a470:	08030ae8 	.word	0x08030ae8
 801a474:	08030b17 	.word	0x08030b17
 801a478:	08030b28 	.word	0x08030b28
 801a47c:	08030a62 	.word	0x08030a62
        *p++ = ssl->session_negotiate->id[i];
 801a480:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a482:	442a      	add	r2, r5
 801a484:	7d12      	ldrb	r2, [r2, #20]
 801a486:	5572      	strb	r2, [r6, r5]
    for( i = 0; i < n; i++ )
 801a488:	3501      	adds	r5, #1
 801a48a:	e71e      	b.n	801a2ca <ssl_write_client_hello+0x17e>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 801a48c:	f7ff fdfe 	bl	801a08c <mbedtls_ssl_ciphersuite_from_id>
        if( ciphersuite_info == NULL )
 801a490:	b1d8      	cbz	r0, 801a4ca <ssl_write_client_hello+0x37e>
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a492:	6823      	ldr	r3, [r4, #0]
 801a494:	6901      	ldr	r1, [r0, #16]
 801a496:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801a49a:	4291      	cmp	r1, r2
 801a49c:	dc15      	bgt.n	801a4ca <ssl_write_client_hello+0x37e>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 801a49e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a4a2:	6982      	ldr	r2, [r0, #24]
 801a4a4:	429a      	cmp	r2, r3
 801a4a6:	db10      	blt.n	801a4ca <ssl_write_client_hello+0x37e>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	465a      	mov	r2, fp
 801a4ac:	e9cd a300 	strd	sl, r3, [sp]
 801a4b0:	2103      	movs	r1, #3
 801a4b2:	f240 3377 	movw	r3, #887	; 0x377
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	f7f6 f8ba 	bl	8010630 <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 801a4bc:	683b      	ldr	r3, [r7, #0]
 801a4be:	121b      	asrs	r3, r3, #8
 801a4c0:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a4c2:	683b      	ldr	r3, [r7, #0]
 801a4c4:	7073      	strb	r3, [r6, #1]
        n++;
 801a4c6:	3501      	adds	r5, #1
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a4c8:	464e      	mov	r6, r9
 801a4ca:	3704      	adds	r7, #4
 801a4cc:	e722      	b.n	801a314 <ssl_write_client_hello+0x1c8>
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 801a4ce:	1d43      	adds	r3, r0, #5
 801a4d0:	0a1b      	lsrs	r3, r3, #8
 801a4d2:	71b3      	strb	r3, [r6, #6]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 801a4d4:	b2c3      	uxtb	r3, r0
 801a4d6:	1d59      	adds	r1, r3, #5
 801a4d8:	71f1      	strb	r1, [r6, #7]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 801a4da:	1cc1      	adds	r1, r0, #3
 801a4dc:	0a09      	lsrs	r1, r1, #8
 801a4de:	7231      	strb	r1, [r6, #8]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 801a4e0:	1cd9      	adds	r1, r3, #3
 801a4e2:	7271      	strb	r1, [r6, #9]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 801a4e4:	0a01      	lsrs	r1, r0, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 801a4e6:	f886 9004 	strb.w	r9, [r6, #4]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 801a4ea:	f886 9005 	strb.w	r9, [r6, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 801a4ee:	f886 900a 	strb.w	r9, [r6, #10]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 801a4f2:	72f1      	strb	r1, [r6, #11]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 801a4f4:	7333      	strb	r3, [r6, #12]
    memcpy( p, ssl->hostname, hostname_len );
 801a4f6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 801a4fa:	f106 000d 	add.w	r0, r6, #13
 801a4fe:	f007 fef2 	bl	80222e6 <memcpy>
 801a502:	e76e      	b.n	801a3e2 <ssl_write_client_hello+0x296>
    *olen = 0;
 801a504:	4698      	mov	r8, r3
 801a506:	e76c      	b.n	801a3e2 <ssl_write_client_hello+0x296>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );
 801a508:	23ff      	movs	r3, #255	; 0xff
 801a50a:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801a50c:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );
 801a50e:	f885 a001 	strb.w	sl, [r5, #1]
    *p++ = 0x00;
 801a512:	70ab      	strb	r3, [r5, #2]
    *p++ = ( ssl->verify_data_len + 1 ) & 0xFF;
 801a514:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a518:	3301      	adds	r3, #1
 801a51a:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->verify_data_len & 0xFF;
 801a51c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a520:	712b      	strb	r3, [r5, #4]
    memcpy( p, ssl->own_verify_data, ssl->verify_data_len );
 801a522:	1d68      	adds	r0, r5, #5
 801a524:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 801a528:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 801a52c:	f007 fedb 	bl	80222e6 <memcpy>
    *olen = 5 + ssl->verify_data_len;
 801a530:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 801a534:	3505      	adds	r5, #5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a536:	6823      	ldr	r3, [r4, #0]
 801a538:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 801a53c:	2903      	cmp	r1, #3
    ext_len += olen;
 801a53e:	44a8      	add	r8, r5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a540:	d176      	bne.n	801a630 <ssl_write_client_hello+0x4e4>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a542:	4b47      	ldr	r3, [pc, #284]	; (801a660 <ssl_write_client_hello+0x514>)
 801a544:	9300      	str	r3, [sp, #0]
 801a546:	4620      	mov	r0, r4
 801a548:	23b2      	movs	r3, #178	; 0xb2
 801a54a:	4a46      	ldr	r2, [pc, #280]	; (801a664 <ssl_write_client_hello+0x518>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a54c:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a550:	f7f6 f86e 	bl	8010630 <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a554:	6823      	ldr	r3, [r4, #0]
 801a556:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a558:	4603      	mov	r3, r0
 801a55a:	1a1a      	subs	r2, r3, r0
 801a55c:	f853 1b04 	ldr.w	r1, [r3], #4
 801a560:	2900      	cmp	r1, #0
 801a562:	d1fa      	bne.n	801a55a <ssl_write_client_hello+0x40e>
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a564:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a568:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a56c:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a56e:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 801a570:	4599      	cmp	r9, r3
 801a572:	d855      	bhi.n	801a620 <ssl_write_client_hello+0x4d4>
 801a574:	eba3 0309 	sub.w	r3, r3, r9
 801a578:	3206      	adds	r2, #6
 801a57a:	4293      	cmp	r3, r2
 801a57c:	d350      	bcc.n	801a620 <ssl_write_client_hello+0x4d4>
 801a57e:	f1a0 0a04 	sub.w	sl, r0, #4
    unsigned char *sig_alg_list = buf + 6;
 801a582:	f109 0b06 	add.w	fp, r9, #6
    sig_alg_len = 0;
 801a586:	460d      	mov	r5, r1
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a588:	2301      	movs	r3, #1
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a58a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801a58e:	1caa      	adds	r2, r5, #2
 801a590:	f10b 0b04 	add.w	fp, fp, #4
 801a594:	2800      	cmp	r0, #0
 801a596:	d14e      	bne.n	801a636 <ssl_write_client_hello+0x4ea>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 801a598:	230d      	movs	r3, #13
 801a59a:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 801a59e:	0a13      	lsrs	r3, r2, #8
 801a5a0:	f889 3002 	strb.w	r3, [r9, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 801a5a4:	b2eb      	uxtb	r3, r5
 801a5a6:	1c9a      	adds	r2, r3, #2
 801a5a8:	f889 2003 	strb.w	r2, [r9, #3]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a5ac:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 801a5ae:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a5b2:	f889 2004 	strb.w	r2, [r9, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 801a5b6:	f889 3005 	strb.w	r3, [r9, #5]
    *olen = 6 + sig_alg_len;
 801a5ba:	f105 0a06 	add.w	sl, r5, #6
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a5be:	4b2a      	ldr	r3, [pc, #168]	; (801a668 <ssl_write_client_hello+0x51c>)
 801a5c0:	9300      	str	r3, [sp, #0]
 801a5c2:	4a28      	ldr	r2, [pc, #160]	; (801a664 <ssl_write_client_hello+0x518>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a5c4:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a5c8:	f240 1307 	movw	r3, #263	; 0x107
 801a5cc:	2103      	movs	r1, #3
 801a5ce:	4620      	mov	r0, r4
 801a5d0:	f7f6 f82e 	bl	8010630 <mbedtls_debug_print_msg>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a5d4:	6823      	ldr	r3, [r4, #0]
 801a5d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ext_len += olen;
 801a5d8:	44d0      	add	r8, sl
 801a5da:	f103 3bff 	add.w	fp, r3, #4294967295
    size_t elliptic_curve_len = 0;
 801a5de:	f04f 0a00 	mov.w	sl, #0
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a5e2:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 801a5e6:	2800      	cmp	r0, #0
 801a5e8:	d142      	bne.n	801a670 <ssl_write_client_hello+0x524>
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a5ea:	f108 0b02 	add.w	fp, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a5ee:	f509 599c 	add.w	r9, r9, #4992	; 0x1380
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a5f2:	44bb      	add	fp, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a5f4:	f109 0908 	add.w	r9, r9, #8
    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
 801a5f8:	45cb      	cmp	fp, r9
 801a5fa:	d806      	bhi.n	801a60a <ssl_write_client_hello+0x4be>
 801a5fc:	eba9 090b 	sub.w	r9, r9, fp
 801a600:	f10a 0a06 	add.w	sl, sl, #6
 801a604:	45d1      	cmp	r9, sl
 801a606:	f080 817f 	bcs.w	801a908 <ssl_write_client_hello+0x7bc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a60a:	4b18      	ldr	r3, [pc, #96]	; (801a66c <ssl_write_client_hello+0x520>)
 801a60c:	9300      	str	r3, [sp, #0]
 801a60e:	4a15      	ldr	r2, [pc, #84]	; (801a664 <ssl_write_client_hello+0x518>)
 801a610:	f240 131d 	movw	r3, #285	; 0x11d
 801a614:	2101      	movs	r1, #1
 801a616:	4620      	mov	r0, r4
 801a618:	f7f6 f80a 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a61c:	2500      	movs	r5, #0
 801a61e:	e036      	b.n	801a68e <ssl_write_client_hello+0x542>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a620:	4b12      	ldr	r3, [pc, #72]	; (801a66c <ssl_write_client_hello+0x520>)
 801a622:	9300      	str	r3, [sp, #0]
 801a624:	4a0f      	ldr	r2, [pc, #60]	; (801a664 <ssl_write_client_hello+0x518>)
 801a626:	23c0      	movs	r3, #192	; 0xc0
 801a628:	2101      	movs	r1, #1
 801a62a:	4620      	mov	r0, r4
 801a62c:	f7f6 f800 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a630:	f04f 0a00 	mov.w	sl, #0
 801a634:	e7c3      	b.n	801a5be <ssl_write_client_hello+0x472>
 801a636:	9307      	str	r3, [sp, #28]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a638:	f004 fb74 	bl	801ed24 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
 801a63c:	f04f 0303 	mov.w	r3, #3
 801a640:	f80b 3c03 	strb.w	r3, [fp, #-3]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a644:	f80b 0c04 	strb.w	r0, [fp, #-4]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a648:	f8da 0000 	ldr.w	r0, [sl]
 801a64c:	f004 fb6a 	bl	801ed24 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a650:	9b07      	ldr	r3, [sp, #28]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a652:	f80b 0c02 	strb.w	r0, [fp, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a656:	3504      	adds	r5, #4
 801a658:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801a65c:	e795      	b.n	801a58a <ssl_write_client_hello+0x43e>
 801a65e:	bf00      	nop
 801a660:	08030b55 	.word	0x08030b55
 801a664:	080308d8 	.word	0x080308d8
 801a668:	08030b89 	.word	0x08030b89
 801a66c:	08030b17 	.word	0x08030b17
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801a670:	f7f7 fa46 	bl	8011b00 <mbedtls_ecp_curve_info_from_grp_id>
        if( info == NULL )
 801a674:	4605      	mov	r5, r0
 801a676:	2800      	cmp	r0, #0
 801a678:	f040 8143 	bne.w	801a902 <ssl_write_client_hello+0x7b6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
 801a67c:	4bcb      	ldr	r3, [pc, #812]	; (801a9ac <ssl_write_client_hello+0x860>)
 801a67e:	9300      	str	r3, [sp, #0]
 801a680:	4acb      	ldr	r2, [pc, #812]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a682:	f44f 738a 	mov.w	r3, #276	; 0x114
 801a686:	2101      	movs	r1, #1
 801a688:	4620      	mov	r0, r4
 801a68a:	f7f5 ffd1 	bl	8010630 <mbedtls_debug_print_msg>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a68e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a692:	4ac7      	ldr	r2, [pc, #796]	; (801a9b0 <ssl_write_client_hello+0x864>)
    ext_len += olen;
 801a694:	eb08 0a05 	add.w	sl, r8, r5
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a698:	f10a 0502 	add.w	r5, sl, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a69c:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a6a0:	4bc4      	ldr	r3, [pc, #784]	; (801a9b4 <ssl_write_client_hello+0x868>)
 801a6a2:	9300      	str	r3, [sp, #0]
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a6a4:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6a6:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a6aa:	f44f 73a4 	mov.w	r3, #328	; 0x148
 801a6ae:	2103      	movs	r1, #3
 801a6b0:	4620      	mov	r0, r4
 801a6b2:	f7f5 ffbd 	bl	8010630 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 6 )
 801a6b6:	4545      	cmp	r5, r8
 801a6b8:	d804      	bhi.n	801a6c4 <ssl_write_client_hello+0x578>
 801a6ba:	eba8 0305 	sub.w	r3, r8, r5
 801a6be:	2b05      	cmp	r3, #5
 801a6c0:	f200 814f 	bhi.w	801a962 <ssl_write_client_hello+0x816>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a6c4:	4bbc      	ldr	r3, [pc, #752]	; (801a9b8 <ssl_write_client_hello+0x86c>)
 801a6c6:	9300      	str	r3, [sp, #0]
 801a6c8:	4ab9      	ldr	r2, [pc, #740]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a6ca:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 801a6ce:	2101      	movs	r1, #1
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	f7f5 ffad 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a6d6:	f04f 0b00 	mov.w	fp, #0
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a6da:	6823      	ldr	r3, [r4, #0]
 801a6dc:	f8b3 906c 	ldrh.w	r9, [r3, #108]	; 0x6c
 801a6e0:	f419 79e0 	ands.w	r9, r9, #448	; 0x1c0
    ext_len += olen;
 801a6e4:	44da      	add	sl, fp
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a6e6:	d023      	beq.n	801a730 <ssl_write_client_hello+0x5e4>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a6ec:	4ab0      	ldr	r2, [pc, #704]	; (801a9b0 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6ee:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a6f2:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a6f6:	4bb1      	ldr	r3, [pc, #708]	; (801a9bc <ssl_write_client_hello+0x870>)
 801a6f8:	9300      	str	r3, [sp, #0]
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a6fa:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6fc:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a700:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 801a704:	2103      	movs	r1, #3
 801a706:	4620      	mov	r0, r4
 801a708:	f7f5 ff92 	bl	8010630 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 )
 801a70c:	4545      	cmp	r5, r8
 801a70e:	d804      	bhi.n	801a71a <ssl_write_client_hello+0x5ce>
 801a710:	eba8 0305 	sub.w	r3, r8, r5
 801a714:	2b04      	cmp	r3, #4
 801a716:	f200 8131 	bhi.w	801a97c <ssl_write_client_hello+0x830>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a71a:	4ba7      	ldr	r3, [pc, #668]	; (801a9b8 <ssl_write_client_hello+0x86c>)
 801a71c:	9300      	str	r3, [sp, #0]
 801a71e:	4aa4      	ldr	r2, [pc, #656]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a720:	f44f 73df 	mov.w	r3, #446	; 0x1be
 801a724:	2101      	movs	r1, #1
 801a726:	4620      	mov	r0, r4
 801a728:	f7f5 ff82 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a72c:	f04f 0900 	mov.w	r9, #0
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a730:	6823      	ldr	r3, [r4, #0]
 801a732:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a736:	f018 0808 	ands.w	r8, r8, #8
    ext_len += olen;
 801a73a:	44ca      	add	sl, r9
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a73c:	d023      	beq.n	801a786 <ssl_write_client_hello+0x63a>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a73e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a742:	4a9b      	ldr	r2, [pc, #620]	; (801a9b0 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a744:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a748:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a74c:	4b9c      	ldr	r3, [pc, #624]	; (801a9c0 <ssl_write_client_hello+0x874>)
 801a74e:	9300      	str	r3, [sp, #0]
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a750:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a752:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a756:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 801a75a:	2103      	movs	r1, #3
 801a75c:	4620      	mov	r0, r4
 801a75e:	f7f5 ff67 	bl	8010630 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a762:	4545      	cmp	r5, r8
 801a764:	d804      	bhi.n	801a770 <ssl_write_client_hello+0x624>
 801a766:	eba8 0305 	sub.w	r3, r8, r5
 801a76a:	2b03      	cmp	r3, #3
 801a76c:	f200 8115 	bhi.w	801a99a <ssl_write_client_hello+0x84e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a770:	4b91      	ldr	r3, [pc, #580]	; (801a9b8 <ssl_write_client_hello+0x86c>)
 801a772:	9300      	str	r3, [sp, #0]
 801a774:	4a8e      	ldr	r2, [pc, #568]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a776:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a77a:	2101      	movs	r1, #1
 801a77c:	4620      	mov	r0, r4
 801a77e:	f7f5 ff57 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a782:	f04f 0800 	mov.w	r8, #0
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a786:	6823      	ldr	r3, [r4, #0]
 801a788:	f893 506d 	ldrb.w	r5, [r3, #109]	; 0x6d
 801a78c:	f015 0502 	ands.w	r5, r5, #2
    ext_len += olen;
 801a790:	44c2      	add	sl, r8
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a792:	d025      	beq.n	801a7e0 <ssl_write_client_hello+0x694>
 801a794:	f893 5069 	ldrb.w	r5, [r3, #105]	; 0x69
 801a798:	b315      	cbz	r5, 801a7e0 <ssl_write_client_hello+0x694>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a79a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a79e:	4a84      	ldr	r2, [pc, #528]	; (801a9b0 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7a0:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a7a4:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a7a8:	4b86      	ldr	r3, [pc, #536]	; (801a9c4 <ssl_write_client_hello+0x878>)
 801a7aa:	9300      	str	r3, [sp, #0]
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a7ac:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7ae:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a7b2:	f44f 7308 	mov.w	r3, #544	; 0x220
 801a7b6:	2103      	movs	r1, #3
 801a7b8:	4620      	mov	r0, r4
 801a7ba:	f7f5 ff39 	bl	8010630 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a7be:	4545      	cmp	r5, r8
 801a7c0:	d804      	bhi.n	801a7cc <ssl_write_client_hello+0x680>
 801a7c2:	eba8 0305 	sub.w	r3, r8, r5
 801a7c6:	2b03      	cmp	r3, #3
 801a7c8:	f200 8106 	bhi.w	801a9d8 <ssl_write_client_hello+0x88c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a7cc:	4b7a      	ldr	r3, [pc, #488]	; (801a9b8 <ssl_write_client_hello+0x86c>)
 801a7ce:	9300      	str	r3, [sp, #0]
 801a7d0:	4a77      	ldr	r2, [pc, #476]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a7d2:	f44f 7309 	mov.w	r3, #548	; 0x224
 801a7d6:	2101      	movs	r1, #1
 801a7d8:	4620      	mov	r0, r4
 801a7da:	f7f5 ff29 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a7de:	2500      	movs	r5, #0
    if( ssl->conf->alpn_list == NULL )
 801a7e0:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a7e2:	eb0a 0805 	add.w	r8, sl, r5
    if( ssl->conf->alpn_list == NULL )
 801a7e6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801a7e8:	b375      	cbz	r5, 801a848 <ssl_write_client_hello+0x6fc>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a7ea:	4b77      	ldr	r3, [pc, #476]	; (801a9c8 <ssl_write_client_hello+0x87c>)
 801a7ec:	9300      	str	r3, [sp, #0]
 801a7ee:	4a70      	ldr	r2, [pc, #448]	; (801a9b0 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7f0:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a7f4:	f240 236e 	movw	r3, #622	; 0x26e
 801a7f8:	2103      	movs	r1, #3
 801a7fa:	4620      	mov	r0, r4
 801a7fc:	f7f5 ff18 	bl	8010630 <mbedtls_debug_print_msg>
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a800:	6823      	ldr	r3, [r4, #0]
 801a802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    size_t alpnlen = 0;
 801a804:	f04f 0a00 	mov.w	sl, #0
 801a808:	f1a3 0904 	sub.w	r9, r3, #4
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a80c:	f859 0f04 	ldr.w	r0, [r9, #4]!
 801a810:	2800      	cmp	r0, #0
 801a812:	f040 80e9 	bne.w	801a9e8 <ssl_write_client_hello+0x89c>
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a816:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a81a:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a81e:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a820:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < 6 + alpnlen )
 801a822:	4599      	cmp	r9, r3
 801a824:	d806      	bhi.n	801a834 <ssl_write_client_hello+0x6e8>
 801a826:	eba3 0309 	sub.w	r3, r3, r9
 801a82a:	f10a 0a06 	add.w	sl, sl, #6
 801a82e:	4553      	cmp	r3, sl
 801a830:	f080 80e0 	bcs.w	801a9f4 <ssl_write_client_hello+0x8a8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a834:	4b60      	ldr	r3, [pc, #384]	; (801a9b8 <ssl_write_client_hello+0x86c>)
 801a836:	9300      	str	r3, [sp, #0]
 801a838:	4a5d      	ldr	r2, [pc, #372]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a83a:	f240 2375 	movw	r3, #629	; 0x275
 801a83e:	2101      	movs	r1, #1
 801a840:	4620      	mov	r0, r4
 801a842:	f7f5 fef5 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a846:	2500      	movs	r5, #0
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a848:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a84a:	4445      	add	r5, r8
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a84c:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a850:	f018 0810 	ands.w	r8, r8, #16
 801a854:	d028      	beq.n	801a8a8 <ssl_write_client_hello+0x75c>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a856:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a85a:	4a55      	ldr	r2, [pc, #340]	; (801a9b0 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a85c:	f503 5a9c 	add.w	sl, r3, #4992	; 0x1380
    size_t tlen = ssl->session_negotiate->ticket_len;
 801a860:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801a862:	f105 0902 	add.w	r9, r5, #2
    size_t tlen = ssl->session_negotiate->ticket_len;
 801a866:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a86a:	4b58      	ldr	r3, [pc, #352]	; (801a9cc <ssl_write_client_hello+0x880>)
 801a86c:	9300      	str	r3, [sp, #0]
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801a86e:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a870:	f10a 0a08 	add.w	sl, sl, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a874:	f240 2341 	movw	r3, #577	; 0x241
 801a878:	2103      	movs	r1, #3
 801a87a:	4620      	mov	r0, r4
 801a87c:	f7f5 fed8 	bl	8010630 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 + tlen )
 801a880:	45d1      	cmp	r9, sl
 801a882:	d806      	bhi.n	801a892 <ssl_write_client_hello+0x746>
 801a884:	f10b 0804 	add.w	r8, fp, #4
 801a888:	ebaa 0a09 	sub.w	sl, sl, r9
 801a88c:	45c2      	cmp	sl, r8
 801a88e:	f080 80e2 	bcs.w	801aa56 <ssl_write_client_hello+0x90a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a892:	4b49      	ldr	r3, [pc, #292]	; (801a9b8 <ssl_write_client_hello+0x86c>)
 801a894:	9300      	str	r3, [sp, #0]
 801a896:	4a46      	ldr	r2, [pc, #280]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a898:	f240 2345 	movw	r3, #581	; 0x245
 801a89c:	2101      	movs	r1, #1
 801a89e:	4620      	mov	r0, r4
 801a8a0:	f7f5 fec6 	bl	8010630 <mbedtls_debug_print_msg>
    *olen = 0;
 801a8a4:	f04f 0800 	mov.w	r8, #0
    ext_len += olen;
 801a8a8:	4445      	add	r5, r8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 801a8aa:	4b49      	ldr	r3, [pc, #292]	; (801a9d0 <ssl_write_client_hello+0x884>)
 801a8ac:	9300      	str	r3, [sp, #0]
 801a8ae:	9501      	str	r5, [sp, #4]
 801a8b0:	f240 4301 	movw	r3, #1025	; 0x401
 801a8b4:	4a3e      	ldr	r2, [pc, #248]	; (801a9b0 <ssl_write_client_hello+0x864>)
 801a8b6:	2103      	movs	r1, #3
 801a8b8:	4620      	mov	r0, r4
 801a8ba:	f7f5 feb9 	bl	8010630 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 801a8be:	b12d      	cbz	r5, 801a8cc <ssl_write_client_hello+0x780>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 801a8c0:	0a2b      	lsrs	r3, r5, #8
 801a8c2:	70b3      	strb	r3, [r6, #2]
        p += ext_len;
 801a8c4:	9b06      	ldr	r3, [sp, #24]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 801a8c6:	70f5      	strb	r5, [r6, #3]
        p += ext_len;
 801a8c8:	442b      	add	r3, r5
 801a8ca:	461f      	mov	r7, r3
    ssl->out_msglen  = p - buf;
 801a8cc:	9b05      	ldr	r3, [sp, #20]
 801a8ce:	1aff      	subs	r7, r7, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801a8d0:	2316      	movs	r3, #22
 801a8d2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801a8d6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msglen  = p - buf;
 801a8da:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801a8de:	2601      	movs	r6, #1
 801a8e0:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801a8e2:	6863      	ldr	r3, [r4, #4]
 801a8e4:	4433      	add	r3, r6
 801a8e6:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801a8e8:	4620      	mov	r0, r4
 801a8ea:	f002 f9ab 	bl	801cc44 <mbedtls_ssl_write_record>
 801a8ee:	4605      	mov	r5, r0
 801a8f0:	2800      	cmp	r0, #0
 801a8f2:	f000 80d8 	beq.w	801aaa6 <ssl_write_client_hello+0x95a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801a8f6:	4b37      	ldr	r3, [pc, #220]	; (801a9d4 <ssl_write_client_hello+0x888>)
 801a8f8:	9300      	str	r3, [sp, #0]
 801a8fa:	9001      	str	r0, [sp, #4]
 801a8fc:	f240 4317 	movw	r3, #1047	; 0x417
 801a900:	e49a      	b.n	801a238 <ssl_write_client_hello+0xec>
        elliptic_curve_len += 2;
 801a902:	f10a 0a02 	add.w	sl, sl, #2
 801a906:	e66c      	b.n	801a5e2 <ssl_write_client_hello+0x496>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a908:	6823      	ldr	r3, [r4, #0]
 801a90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a90c:	46d9      	mov	r9, fp
 801a90e:	f103 3aff 	add.w	sl, r3, #4294967295
 801a912:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 801a916:	eba9 050b 	sub.w	r5, r9, fp
 801a91a:	f109 0902 	add.w	r9, r9, #2
 801a91e:	b9b0      	cbnz	r0, 801a94e <ssl_write_client_hello+0x802>
    if( elliptic_curve_len == 0 )
 801a920:	2d00      	cmp	r5, #0
 801a922:	f43f aeb4 	beq.w	801a68e <ssl_write_client_hello+0x542>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
 801a926:	230a      	movs	r3, #10
 801a928:	f88b 3001 	strb.w	r3, [fp, #1]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
 801a92c:	1cab      	adds	r3, r5, #2
 801a92e:	0a1b      	lsrs	r3, r3, #8
 801a930:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
 801a934:	b2eb      	uxtb	r3, r5
 801a936:	1c9a      	adds	r2, r3, #2
 801a938:	f88b 2003 	strb.w	r2, [fp, #3]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801a93c:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
 801a93e:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801a942:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
 801a946:	f88b 3005 	strb.w	r3, [fp, #5]
    *olen = 6 + elliptic_curve_len;
 801a94a:	3506      	adds	r5, #6
 801a94c:	e69f      	b.n	801a68e <ssl_write_client_hello+0x542>
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801a94e:	f7f7 f8d7 	bl	8011b00 <mbedtls_ecp_curve_info_from_grp_id>
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
 801a952:	8843      	ldrh	r3, [r0, #2]
 801a954:	0a1b      	lsrs	r3, r3, #8
 801a956:	f889 3004 	strb.w	r3, [r9, #4]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
 801a95a:	8843      	ldrh	r3, [r0, #2]
 801a95c:	f889 3005 	strb.w	r3, [r9, #5]
 801a960:	e7d7      	b.n	801a912 <ssl_write_client_hello+0x7c6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
 801a962:	220b      	movs	r2, #11
 801a964:	706a      	strb	r2, [r5, #1]
    *p++ = 2;
 801a966:	2202      	movs	r2, #2
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801a968:	2300      	movs	r3, #0
    *p++ = 2;
 801a96a:	70ea      	strb	r2, [r5, #3]
    *p++ = 1;
 801a96c:	2201      	movs	r2, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801a96e:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801a970:	70ab      	strb	r3, [r5, #2]
    *p++ = 1;
 801a972:	712a      	strb	r2, [r5, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
 801a974:	716b      	strb	r3, [r5, #5]
    *olen = 6;
 801a976:	f04f 0b06 	mov.w	fp, #6
 801a97a:	e6ae      	b.n	801a6da <ssl_write_client_hello+0x58e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801a97c:	2301      	movs	r3, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 801a97e:	2200      	movs	r2, #0
 801a980:	702a      	strb	r2, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801a982:	706b      	strb	r3, [r5, #1]
    *p++ = 0x00;
 801a984:	70aa      	strb	r2, [r5, #2]
    *p++ = 1;
 801a986:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->conf->mfl_code;
 801a988:	6823      	ldr	r3, [r4, #0]
 801a98a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801a98e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801a992:	712b      	strb	r3, [r5, #4]
    *olen = 5;
 801a994:	f04f 0905 	mov.w	r9, #5
 801a998:	e6ca      	b.n	801a730 <ssl_write_client_hello+0x5e4>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801a99a:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801a99c:	f04f 0804 	mov.w	r8, #4
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801a9a0:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801a9a2:	f885 8001 	strb.w	r8, [r5, #1]
    *p++ = 0x00;
 801a9a6:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801a9a8:	70eb      	strb	r3, [r5, #3]
 801a9aa:	e6ec      	b.n	801a786 <ssl_write_client_hello+0x63a>
 801a9ac:	08030bc2 	.word	0x08030bc2
 801a9b0:	080308d8 	.word	0x080308d8
 801a9b4:	08030be5 	.word	0x08030be5
 801a9b8:	08030b17 	.word	0x08030b17
 801a9bc:	08030c1c 	.word	0x08030c1c
 801a9c0:	08030c4f 	.word	0x08030c4f
 801a9c4:	08030c7d 	.word	0x08030c7d
 801a9c8:	08030cb3 	.word	0x08030cb3
 801a9cc:	08030cd7 	.word	0x08030cd7
 801a9d0:	08030d29 	.word	0x08030d29
 801a9d4:	08030d52 	.word	0x08030d52
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801a9d8:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801a9da:	2217      	movs	r2, #23
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801a9dc:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801a9de:	706a      	strb	r2, [r5, #1]
    *p++ = 0x00;
 801a9e0:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801a9e2:	70eb      	strb	r3, [r5, #3]
    *olen = 4;
 801a9e4:	2504      	movs	r5, #4
 801a9e6:	e6fb      	b.n	801a7e0 <ssl_write_client_hello+0x694>
        alpnlen += (unsigned char)( strlen( *cur ) & 0xFF ) + 1;
 801a9e8:	f7e5 fbfc 	bl	80001e4 <strlen>
 801a9ec:	b2c0      	uxtb	r0, r0
 801a9ee:	3001      	adds	r0, #1
 801a9f0:	4482      	add	sl, r0
 801a9f2:	e70b      	b.n	801a80c <ssl_write_client_hello+0x6c0>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801a9f4:	2310      	movs	r3, #16
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );
 801a9f6:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801a9fa:	f889 3001 	strb.w	r3, [r9, #1]
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a9fe:	6823      	ldr	r3, [r4, #0]
 801aa00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    p += 4;
 801aa02:	f109 0506 	add.w	r5, r9, #6
 801aa06:	f1a3 0b04 	sub.w	fp, r3, #4
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801aa0a:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801aa0e:	b988      	cbnz	r0, 801aa34 <ssl_write_client_hello+0x8e8>
    *olen = p - buf;
 801aa10:	eba5 0509 	sub.w	r5, r5, r9
    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
 801aa14:	1fab      	subs	r3, r5, #6
 801aa16:	0a1b      	lsrs	r3, r3, #8
 801aa18:	f889 3004 	strb.w	r3, [r9, #4]
    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
 801aa1c:	b2eb      	uxtb	r3, r5
 801aa1e:	1f9a      	subs	r2, r3, #6
 801aa20:	f889 2005 	strb.w	r2, [r9, #5]
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801aa24:	1f2a      	subs	r2, r5, #4
 801aa26:	0a12      	lsrs	r2, r2, #8
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801aa28:	3b04      	subs	r3, #4
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801aa2a:	f889 2002 	strb.w	r2, [r9, #2]
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801aa2e:	f889 3003 	strb.w	r3, [r9, #3]
 801aa32:	e709      	b.n	801a848 <ssl_write_client_hello+0x6fc>
        *p = (unsigned char)( strlen( *cur ) & 0xFF );
 801aa34:	f7e5 fbd6 	bl	80001e4 <strlen>
 801aa38:	462b      	mov	r3, r5
 801aa3a:	fa5f fa80 	uxtb.w	sl, r0
 801aa3e:	f803 0b01 	strb.w	r0, [r3], #1
        memcpy( p + 1, *cur, *p );
 801aa42:	4652      	mov	r2, sl
 801aa44:	f8db 1000 	ldr.w	r1, [fp]
 801aa48:	4618      	mov	r0, r3
        p += 1 + *p;
 801aa4a:	f10a 0a01 	add.w	sl, sl, #1
        memcpy( p + 1, *cur, *p );
 801aa4e:	f007 fc4a 	bl	80222e6 <memcpy>
        p += 1 + *p;
 801aa52:	4455      	add	r5, sl
 801aa54:	e7d9      	b.n	801aa0a <ssl_write_client_hello+0x8be>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 801aa56:	2300      	movs	r3, #0
 801aa58:	f889 3000 	strb.w	r3, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 801aa5c:	2323      	movs	r3, #35	; 0x23
 801aa5e:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 801aa62:	ea4f 231b 	mov.w	r3, fp, lsr #8
 801aa66:	f889 3002 	strb.w	r3, [r9, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 801aa6a:	f889 b003 	strb.w	fp, [r9, #3]
    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 801aa6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aa70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa72:	b1ab      	cbz	r3, 801aaa0 <ssl_write_client_hello+0x954>
 801aa74:	f1bb 0f00 	cmp.w	fp, #0
 801aa78:	d012      	beq.n	801aaa0 <ssl_write_client_hello+0x954>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );
 801aa7a:	4b10      	ldr	r3, [pc, #64]	; (801aabc <ssl_write_client_hello+0x970>)
 801aa7c:	9300      	str	r3, [sp, #0]
 801aa7e:	4620      	mov	r0, r4
 801aa80:	f8cd b004 	str.w	fp, [sp, #4]
 801aa84:	f240 2356 	movw	r3, #598	; 0x256
 801aa88:	4a0d      	ldr	r2, [pc, #52]	; (801aac0 <ssl_write_client_hello+0x974>)
 801aa8a:	2103      	movs	r1, #3
 801aa8c:	f7f5 fdd0 	bl	8010630 <mbedtls_debug_print_msg>
    memcpy( p, ssl->session_negotiate->ticket, tlen );
 801aa90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aa92:	465a      	mov	r2, fp
 801aa94:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801aa96:	f109 0004 	add.w	r0, r9, #4
 801aa9a:	f007 fc24 	bl	80222e6 <memcpy>
 801aa9e:	e703      	b.n	801a8a8 <ssl_write_client_hello+0x75c>
    *olen = 4;
 801aaa0:	f04f 0804 	mov.w	r8, #4
 801aaa4:	e700      	b.n	801a8a8 <ssl_write_client_hello+0x75c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 801aaa6:	4b07      	ldr	r3, [pc, #28]	; (801aac4 <ssl_write_client_hello+0x978>)
 801aaa8:	9300      	str	r3, [sp, #0]
 801aaaa:	4a05      	ldr	r2, [pc, #20]	; (801aac0 <ssl_write_client_hello+0x974>)
 801aaac:	f240 431b 	movw	r3, #1051	; 0x41b
 801aab0:	2102      	movs	r1, #2
 801aab2:	4620      	mov	r0, r4
 801aab4:	f7f5 fdbc 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801aab8:	f7ff bb61 	b.w	801a17e <ssl_write_client_hello+0x32>
 801aabc:	08030d05 	.word	0x08030d05
 801aac0:	080308d8 	.word	0x080308d8
 801aac4:	08030d6b 	.word	0x08030d6b

0801aac8 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 801aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801aacc:	6843      	ldr	r3, [r0, #4]
 801aace:	2b10      	cmp	r3, #16
{
 801aad0:	b0a1      	sub	sp, #132	; 0x84
 801aad2:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801aad4:	f000 819e 	beq.w	801ae14 <mbedtls_ssl_handshake_client_step+0x34c>
 801aad8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801aada:	2a00      	cmp	r2, #0
 801aadc:	f000 819a 	beq.w	801ae14 <mbedtls_ssl_handshake_client_step+0x34c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 801aae0:	9301      	str	r3, [sp, #4]
 801aae2:	4bae      	ldr	r3, [pc, #696]	; (801ad9c <mbedtls_ssl_handshake_client_step+0x2d4>)
 801aae4:	9300      	str	r3, [sp, #0]
 801aae6:	4aae      	ldr	r2, [pc, #696]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801aae8:	f640 5323 	movw	r3, #3363	; 0xd23
 801aaec:	2102      	movs	r1, #2
 801aaee:	f7f5 fd9f 	bl	8010630 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	f002 f81a 	bl	801cb2c <mbedtls_ssl_flush_output>
 801aaf8:	4605      	mov	r5, r0
 801aafa:	bb18      	cbnz	r0, 801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801aafc:	6863      	ldr	r3, [r4, #4]
 801aafe:	2b0c      	cmp	r3, #12
 801ab00:	d105      	bne.n	801ab0e <mbedtls_ssl_handshake_client_step+0x46>
        ssl->handshake->new_session_ticket != 0 )
 801ab02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801ab04:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801ab08:	b10b      	cbz	r3, 801ab0e <mbedtls_ssl_handshake_client_step+0x46>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 801ab0a:	2311      	movs	r3, #17
 801ab0c:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 801ab0e:	6863      	ldr	r3, [r4, #4]
 801ab10:	2b11      	cmp	r3, #17
 801ab12:	f201 8226 	bhi.w	801bf62 <mbedtls_ssl_handshake_client_step+0x149a>
 801ab16:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ab1a:	0012      	.short	0x0012
 801ab1c:	001e0019 	.word	0x001e0019
 801ab20:	04280423 	.word	0x04280423
 801ab24:	07220671 	.word	0x07220671
 801ab28:	07930763 	.word	0x07930763
 801ab2c:	095e088b 	.word	0x095e088b
 801ab30:	0a090963 	.word	0x0a090963
 801ab34:	0a130a0e 	.word	0x0a130a0e
 801ab38:	0a240a1f 	.word	0x0a240a1f
 801ab3c:	0968      	.short	0x0968
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 801ab3e:	2201      	movs	r2, #1
 801ab40:	6062      	str	r2, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801ab42:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 801ab44:	4628      	mov	r0, r5
 801ab46:	b021      	add	sp, #132	; 0x84
 801ab48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ret = ssl_write_client_hello( ssl );
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	f7ff fafd 	bl	801a14c <ssl_write_client_hello>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801ab52:	4605      	mov	r5, r0
           break;
 801ab54:	e7f6      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 801ab56:	4b93      	ldr	r3, [pc, #588]	; (801ada4 <mbedtls_ssl_handshake_client_step+0x2dc>)
 801ab58:	9300      	str	r3, [sp, #0]
 801ab5a:	4a91      	ldr	r2, [pc, #580]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801ab5c:	f240 53a7 	movw	r3, #1447	; 0x5a7
 801ab60:	2102      	movs	r1, #2
 801ab62:	4620      	mov	r0, r4
 801ab64:	f7f5 fd64 	bl	8010630 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ab68:	4620      	mov	r0, r4
    buf = ssl->in_msg;
 801ab6a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ab6c:	f002 ffc6 	bl	801dafc <mbedtls_ssl_read_record>
 801ab70:	4605      	mov	r5, r0
 801ab72:	b150      	cbz	r0, 801ab8a <mbedtls_ssl_handshake_client_step+0xc2>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ab74:	4b8c      	ldr	r3, [pc, #560]	; (801ada8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ab76:	9300      	str	r3, [sp, #0]
 801ab78:	9001      	str	r0, [sp, #4]
 801ab7a:	f240 53ae 	movw	r3, #1454	; 0x5ae
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ab7e:	4a88      	ldr	r2, [pc, #544]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801ab80:	2101      	movs	r1, #1
 801ab82:	4620      	mov	r0, r4
 801ab84:	f7f5 fd84 	bl	8010690 <mbedtls_debug_print_ret>
 801ab88:	e7dc      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801ab8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801ab8c:	2b16      	cmp	r3, #22
 801ab8e:	d032      	beq.n	801abf6 <mbedtls_ssl_handshake_client_step+0x12e>
        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801ab90:	68a1      	ldr	r1, [r4, #8]
 801ab92:	2901      	cmp	r1, #1
 801ab94:	d11f      	bne.n	801abd6 <mbedtls_ssl_handshake_client_step+0x10e>
            if( ssl->conf->renego_max_records >= 0 &&
 801ab96:	6822      	ldr	r2, [r4, #0]
            ssl->renego_records_seen++;
 801ab98:	68e3      	ldr	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801ab9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
            ssl->renego_records_seen++;
 801ab9c:	3301      	adds	r3, #1
            if( ssl->conf->renego_max_records >= 0 &&
 801ab9e:	2a00      	cmp	r2, #0
            ssl->renego_records_seen++;
 801aba0:	60e3      	str	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801aba2:	db0a      	blt.n	801abba <mbedtls_ssl_handshake_client_step+0xf2>
 801aba4:	4293      	cmp	r3, r2
 801aba6:	dd08      	ble.n	801abba <mbedtls_ssl_handshake_client_step+0xf2>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801aba8:	4b80      	ldr	r3, [pc, #512]	; (801adac <mbedtls_ssl_handshake_client_step+0x2e4>)
 801abaa:	4a7d      	ldr	r2, [pc, #500]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801abac:	9300      	str	r3, [sp, #0]
 801abae:	f240 53bd 	movw	r3, #1469	; 0x5bd
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801abb2:	4620      	mov	r0, r4
 801abb4:	f7f5 fd3c 	bl	8010630 <mbedtls_debug_print_msg>
 801abb8:	e01b      	b.n	801abf2 <mbedtls_ssl_handshake_client_step+0x12a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801abba:	4b7d      	ldr	r3, [pc, #500]	; (801adb0 <mbedtls_ssl_handshake_client_step+0x2e8>)
 801abbc:	9300      	str	r3, [sp, #0]
 801abbe:	4a78      	ldr	r2, [pc, #480]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
 801abc0:	4d7c      	ldr	r5, [pc, #496]	; (801adb4 <mbedtls_ssl_handshake_client_step+0x2ec>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801abc2:	f240 53c1 	movw	r3, #1473	; 0x5c1
 801abc6:	2101      	movs	r1, #1
 801abc8:	4620      	mov	r0, r4
 801abca:	f7f5 fd31 	bl	8010630 <mbedtls_debug_print_msg>
            ssl->keep_current_message = 1;
 801abce:	2301      	movs	r3, #1
 801abd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801abd4:	e7b6      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801abd6:	4b78      	ldr	r3, [pc, #480]	; (801adb8 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801abd8:	9300      	str	r3, [sp, #0]
 801abda:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 801abde:	4a70      	ldr	r2, [pc, #448]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801abe0:	2101      	movs	r1, #1
 801abe2:	4620      	mov	r0, r4
 801abe4:	f7f5 fd24 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801abe8:	220a      	movs	r2, #10
 801abea:	2102      	movs	r1, #2
 801abec:	4620      	mov	r0, r4
 801abee:	f002 fb67 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801abf2:	4d72      	ldr	r5, [pc, #456]	; (801adbc <mbedtls_ssl_handshake_client_step+0x2f4>)
 801abf4:	e7a6      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 801abf6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801abfa:	2b29      	cmp	r3, #41	; 0x29
 801abfc:	d902      	bls.n	801ac04 <mbedtls_ssl_handshake_client_step+0x13c>
 801abfe:	783b      	ldrb	r3, [r7, #0]
 801ac00:	2b02      	cmp	r3, #2
 801ac02:	d00f      	beq.n	801ac24 <mbedtls_ssl_handshake_client_step+0x15c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ac04:	4b6c      	ldr	r3, [pc, #432]	; (801adb8 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801ac06:	9300      	str	r3, [sp, #0]
 801ac08:	f240 53e4 	movw	r3, #1508	; 0x5e4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ac0c:	4a64      	ldr	r2, [pc, #400]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801ac0e:	2101      	movs	r1, #1
 801ac10:	4620      	mov	r0, r4
 801ac12:	f7f5 fd0d 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ac16:	2232      	movs	r2, #50	; 0x32
 801ac18:	2102      	movs	r1, #2
 801ac1a:	4620      	mov	r0, r4
 801ac1c:	f002 fb50 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801ac20:	4d67      	ldr	r5, [pc, #412]	; (801adc0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ac22:	e78f      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 801ac24:	f107 0804 	add.w	r8, r7, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 801ac28:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801ac2c:	4b65      	ldr	r3, [pc, #404]	; (801adc4 <mbedtls_ssl_handshake_client_step+0x2fc>)
 801ac2e:	9300      	str	r3, [sp, #0]
 801ac30:	4a5b      	ldr	r2, [pc, #364]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801ac32:	f240 53f7 	movw	r3, #1527	; 0x5f7
 801ac36:	2103      	movs	r1, #3
 801ac38:	4620      	mov	r0, r4
 801ac3a:	f7f5 fd57 	bl	80106ec <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 801ac3e:	4621      	mov	r1, r4
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ac40:	f104 0010 	add.w	r0, r4, #16
                      ssl->conf->transport, buf + 0 );
 801ac44:	f851 3b14 	ldr.w	r3, [r1], #20
 801ac48:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ac4c:	4643      	mov	r3, r8
 801ac4e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801ac52:	f004 faf2 	bl	801f23a <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ac56:	6823      	ldr	r3, [r4, #0]
 801ac58:	6922      	ldr	r2, [r4, #16]
 801ac5a:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 801ac5e:	6961      	ldr	r1, [r4, #20]
 801ac60:	f893 6069 	ldrb.w	r6, [r3, #105]	; 0x69
 801ac64:	4282      	cmp	r2, r0
 801ac66:	db09      	blt.n	801ac7c <mbedtls_ssl_handshake_client_step+0x1b4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ac68:	f893 e06b 	ldrb.w	lr, [r3, #107]	; 0x6b
 801ac6c:	f893 c068 	ldrb.w	ip, [r3, #104]	; 0x68
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ac70:	4571      	cmp	r1, lr
 801ac72:	db03      	blt.n	801ac7c <mbedtls_ssl_handshake_client_step+0x1b4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ac74:	4594      	cmp	ip, r2
 801ac76:	db01      	blt.n	801ac7c <mbedtls_ssl_handshake_client_step+0x1b4>
        ssl->major_ver > ssl->conf->max_major_ver ||
 801ac78:	428e      	cmp	r6, r1
 801ac7a:	da19      	bge.n	801acb0 <mbedtls_ssl_handshake_client_step+0x1e8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801ac7c:	9606      	str	r6, [sp, #24]
 801ac7e:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 801ac82:	9203      	str	r2, [sp, #12]
 801ac84:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801ac88:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801ac8c:	4a44      	ldr	r2, [pc, #272]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 801ac8e:	4d4e      	ldr	r5, [pc, #312]	; (801adc8 <mbedtls_ssl_handshake_client_step+0x300>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801ac90:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801ac94:	4b4d      	ldr	r3, [pc, #308]	; (801adcc <mbedtls_ssl_handshake_client_step+0x304>)
 801ac96:	9300      	str	r3, [sp, #0]
 801ac98:	2101      	movs	r1, #1
 801ac9a:	f240 6304 	movw	r3, #1540	; 0x604
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f7f5 fcc6 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801aca4:	2246      	movs	r2, #70	; 0x46
 801aca6:	2102      	movs	r1, #2
 801aca8:	4620      	mov	r0, r4
 801acaa:	f002 fb09 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801acae:	e749      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
 801acb0:	f8d7 3006 	ldr.w	r3, [r7, #6]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu", t ) );
 801acb4:	4a3a      	ldr	r2, [pc, #232]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801acb6:	ba1b      	rev	r3, r3
 801acb8:	9301      	str	r3, [sp, #4]
 801acba:	4b45      	ldr	r3, [pc, #276]	; (801add0 <mbedtls_ssl_handshake_client_step+0x308>)
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	2103      	movs	r1, #3
 801acc0:	f240 6311 	movw	r3, #1553	; 0x611
 801acc4:	4620      	mov	r0, r4
 801acc6:	f7f5 fcb3 	bl	8010630 <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 801acca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801accc:	f107 0906 	add.w	r9, r7, #6
 801acd0:	464a      	mov	r2, r9
 801acd2:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801acd6:	f107 0126 	add.w	r1, r7, #38	; 0x26
 801acda:	f852 0b04 	ldr.w	r0, [r2], #4
 801acde:	f843 0b04 	str.w	r0, [r3], #4
 801ace2:	428a      	cmp	r2, r1
 801ace4:	d1f9      	bne.n	801acda <mbedtls_ssl_handshake_client_step+0x212>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801ace6:	2320      	movs	r3, #32
    n = buf[34];
 801ace8:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801acec:	4a2c      	ldr	r2, [pc, #176]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
 801acee:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801acf2:	4b38      	ldr	r3, [pc, #224]	; (801add4 <mbedtls_ssl_handshake_client_step+0x30c>)
 801acf4:	9300      	str	r3, [sp, #0]
 801acf6:	2103      	movs	r1, #3
 801acf8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801acfc:	4620      	mov	r0, r4
 801acfe:	f7f5 fcf5 	bl	80106ec <mbedtls_debug_print_buf>
    if( n > 32 )
 801ad02:	2e20      	cmp	r6, #32
 801ad04:	d904      	bls.n	801ad10 <mbedtls_ssl_handshake_client_step+0x248>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ad06:	4b2c      	ldr	r3, [pc, #176]	; (801adb8 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801ad08:	9300      	str	r3, [sp, #0]
 801ad0a:	f240 631c 	movw	r3, #1564	; 0x61c
 801ad0e:	e77d      	b.n	801ac0c <mbedtls_ssl_handshake_client_step+0x144>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 801ad10:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801ad14:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 801ad18:	4293      	cmp	r3, r2
 801ad1a:	d916      	bls.n	801ad4a <mbedtls_ssl_handshake_client_step+0x282>
        ext_len = ( ( buf[38 + n] <<  8 )
 801ad1c:	eb08 0206 	add.w	r2, r8, r6
 801ad20:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 801ad24:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 801ad28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801ad2c:	9208      	str	r2, [sp, #32]
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801ad2e:	3a01      	subs	r2, #1
 801ad30:	2a02      	cmp	r2, #2
 801ad32:	d905      	bls.n	801ad40 <mbedtls_ssl_handshake_client_step+0x278>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 801ad34:	9908      	ldr	r1, [sp, #32]
 801ad36:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 801ad3a:	440a      	add	r2, r1
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801ad3c:	4293      	cmp	r3, r2
 801ad3e:	d00f      	beq.n	801ad60 <mbedtls_ssl_handshake_client_step+0x298>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ad40:	4b1d      	ldr	r3, [pc, #116]	; (801adb8 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801ad42:	9300      	str	r3, [sp, #0]
 801ad44:	f240 632a 	movw	r3, #1578	; 0x62a
 801ad48:	e760      	b.n	801ac0c <mbedtls_ssl_handshake_client_step+0x144>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 801ad4a:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 801ad4e:	4293      	cmp	r3, r2
 801ad50:	d004      	beq.n	801ad5c <mbedtls_ssl_handshake_client_step+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ad52:	4b19      	ldr	r3, [pc, #100]	; (801adb8 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801ad54:	9300      	str	r3, [sp, #0]
 801ad56:	f240 6336 	movw	r3, #1590	; 0x636
 801ad5a:	e757      	b.n	801ac0c <mbedtls_ssl_handshake_client_step+0x144>
        ext_len = 0;
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	9308      	str	r3, [sp, #32]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801ad60:	eb08 0306 	add.w	r3, r8, r6
    comp = buf[37 + n];
 801ad64:	f106 0b25 	add.w	fp, r6, #37	; 0x25
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801ad68:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801ad6c:	f893 9024 	ldrb.w	r9, [r3, #36]	; 0x24
    comp = buf[37 + n];
 801ad70:	f818 300b 	ldrb.w	r3, [r8, fp]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801ad74:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 801ad78:	b393      	cbz	r3, 801ade0 <mbedtls_ssl_handshake_client_step+0x318>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 801ad7a:	9301      	str	r3, [sp, #4]
 801ad7c:	4b16      	ldr	r3, [pc, #88]	; (801add8 <mbedtls_ssl_handshake_client_step+0x310>)
 801ad7e:	9300      	str	r3, [sp, #0]
 801ad80:	4a07      	ldr	r2, [pc, #28]	; (801ada0 <mbedtls_ssl_handshake_client_step+0x2d8>)
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 801ad82:	4d16      	ldr	r5, [pc, #88]	; (801addc <mbedtls_ssl_handshake_client_step+0x314>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 801ad84:	f240 6353 	movw	r3, #1619	; 0x653
 801ad88:	2101      	movs	r1, #1
 801ad8a:	4620      	mov	r0, r4
 801ad8c:	f7f5 fc50 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ad90:	222f      	movs	r2, #47	; 0x2f
 801ad92:	2102      	movs	r1, #2
 801ad94:	4620      	mov	r0, r4
 801ad96:	f002 fa93 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801ad9a:	e6d3      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
 801ad9c:	08030d84 	.word	0x08030d84
 801ada0:	080308d8 	.word	0x080308d8
 801ada4:	08030d95 	.word	0x08030d95
 801ada8:	08030dab 	.word	0x08030dab
 801adac:	08030dc3 	.word	0x08030dc3
 801adb0:	08030df6 	.word	0x08030df6
 801adb4:	ffff9500 	.word	0xffff9500
 801adb8:	08030e1a 	.word	0x08030e1a
 801adbc:	ffff8900 	.word	0xffff8900
 801adc0:	ffff8680 	.word	0xffff8680
 801adc4:	08030e33 	.word	0x08030e33
 801adc8:	ffff9180 	.word	0xffff9180
 801adcc:	08030e49 	.word	0x08030e49
 801add0:	08030e95 	.word	0x08030e95
 801add4:	08030eb5 	.word	0x08030eb5
 801add8:	08030ed0 	.word	0x08030ed0
 801addc:	ffff8f80 	.word	0xffff8f80
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801ade0:	4648      	mov	r0, r9
 801ade2:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 801ade6:	f7ff f951 	bl	801a08c <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801adea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801adec:	f8ca 0000 	str.w	r0, [sl]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801adf0:	6819      	ldr	r1, [r3, #0]
 801adf2:	b989      	cbnz	r1, 801ae18 <mbedtls_ssl_handshake_client_step+0x350>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 801adf4:	4ba8      	ldr	r3, [pc, #672]	; (801b098 <mbedtls_ssl_handshake_client_step+0x5d0>)
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	4aa8      	ldr	r2, [pc, #672]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801adfa:	f8cd 9004 	str.w	r9, [sp, #4]
 801adfe:	2101      	movs	r1, #1
 801ae00:	4620      	mov	r0, r4
 801ae02:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 801ae06:	f7f5 fc13 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ae0a:	2250      	movs	r2, #80	; 0x50
 801ae0c:	2102      	movs	r1, #2
 801ae0e:	4620      	mov	r0, r4
 801ae10:	f002 fa56 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801ae14:	4da2      	ldr	r5, [pc, #648]	; (801b0a0 <mbedtls_ssl_handshake_client_step+0x5d8>)
 801ae16:	e695      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 801ae18:	4620      	mov	r0, r4
 801ae1a:	f003 f845 	bl	801dea8 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 801ae1e:	4ba1      	ldr	r3, [pc, #644]	; (801b0a4 <mbedtls_ssl_handshake_client_step+0x5dc>)
 801ae20:	9300      	str	r3, [sp, #0]
 801ae22:	4a9e      	ldr	r2, [pc, #632]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801ae24:	9601      	str	r6, [sp, #4]
 801ae26:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 801ae2a:	2103      	movs	r1, #3
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	f7f5 fbff 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 801ae32:	3727      	adds	r7, #39	; 0x27
 801ae34:	4b9c      	ldr	r3, [pc, #624]	; (801b0a8 <mbedtls_ssl_handshake_client_step+0x5e0>)
 801ae36:	9300      	str	r3, [sp, #0]
 801ae38:	4a98      	ldr	r2, [pc, #608]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801ae3a:	f240 6369 	movw	r3, #1641	; 0x669
 801ae3e:	e9cd 7601 	strd	r7, r6, [sp, #4]
 801ae42:	2103      	movs	r1, #3
 801ae44:	4620      	mov	r0, r4
 801ae46:	f7f5 fc51 	bl	80106ec <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 801ae4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ae4c:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 801ae50:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
 801ae54:	b1ba      	cbz	r2, 801ae86 <mbedtls_ssl_handshake_client_step+0x3be>
 801ae56:	b1b6      	cbz	r6, 801ae86 <mbedtls_ssl_handshake_client_step+0x3be>
 801ae58:	68a2      	ldr	r2, [r4, #8]
 801ae5a:	b9a2      	cbnz	r2, 801ae86 <mbedtls_ssl_handshake_client_step+0x3be>
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801ae5c:	f8da 2008 	ldr.w	r2, [sl, #8]
 801ae60:	4591      	cmp	r9, r2
 801ae62:	d110      	bne.n	801ae86 <mbedtls_ssl_handshake_client_step+0x3be>
        ssl->session_negotiate->ciphersuite != i ||
 801ae64:	f8da 200c 	ldr.w	r2, [sl, #12]
 801ae68:	b96a      	cbnz	r2, 801ae86 <mbedtls_ssl_handshake_client_step+0x3be>
        ssl->session_negotiate->compression != comp ||
 801ae6a:	f8da 2010 	ldr.w	r2, [sl, #16]
 801ae6e:	4296      	cmp	r6, r2
 801ae70:	d109      	bne.n	801ae86 <mbedtls_ssl_handshake_client_step+0x3be>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 801ae72:	4632      	mov	r2, r6
 801ae74:	4639      	mov	r1, r7
 801ae76:	f10a 0014 	add.w	r0, sl, #20
 801ae7a:	9309      	str	r3, [sp, #36]	; 0x24
 801ae7c:	f007 fa24 	bl	80222c8 <memcmp>
        ssl->session_negotiate->id_len != n ||
 801ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae82:	2800      	cmp	r0, #0
 801ae84:	d04f      	beq.n	801af26 <mbedtls_ssl_handshake_client_step+0x45e>
        ssl->state++;
 801ae86:	6862      	ldr	r2, [r4, #4]
 801ae88:	3201      	adds	r2, #1
 801ae8a:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        ssl->session_negotiate->start = mbedtls_time( NULL );
 801ae92:	4610      	mov	r0, r2
 801ae94:	9209      	str	r2, [sp, #36]	; 0x24
 801ae96:	f7e8 f9b9 	bl	800320c <time>
        ssl->session_negotiate->compression = comp;
 801ae9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
        ssl->session_negotiate->start = mbedtls_time( NULL );
 801ae9c:	e9ca 0100 	strd	r0, r1, [sl]
        ssl->session_negotiate->ciphersuite = i;
 801aea0:	6b60      	ldr	r0, [r4, #52]	; 0x34
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 801aea2:	4639      	mov	r1, r7
        ssl->session_negotiate->id_len = n;
 801aea4:	e9c0 2603 	strd	r2, r6, [r0, #12]
        ssl->session_negotiate->ciphersuite = i;
 801aea8:	f8c0 9008 	str.w	r9, [r0, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 801aeac:	4632      	mov	r2, r6
 801aeae:	3014      	adds	r0, #20
 801aeb0:	f007 fa19 	bl	80222e6 <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 801aeb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aeb6:	4a7d      	ldr	r2, [pc, #500]	; (801b0ac <mbedtls_ssl_handshake_client_step+0x5e4>)
 801aeb8:	f8d3 1330 	ldr.w	r1, [r3, #816]	; 0x330
 801aebc:	4b7c      	ldr	r3, [pc, #496]	; (801b0b0 <mbedtls_ssl_handshake_client_step+0x5e8>)
 801aebe:	2900      	cmp	r1, #0
 801aec0:	bf18      	it	ne
 801aec2:	4613      	movne	r3, r2
 801aec4:	9301      	str	r3, [sp, #4]
 801aec6:	4b7b      	ldr	r3, [pc, #492]	; (801b0b4 <mbedtls_ssl_handshake_client_step+0x5ec>)
 801aec8:	9300      	str	r3, [sp, #0]
 801aeca:	4a74      	ldr	r2, [pc, #464]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801aecc:	f240 638f 	movw	r3, #1679	; 0x68f
 801aed0:	2103      	movs	r1, #3
 801aed2:	4620      	mov	r0, r4
 801aed4:	f7f5 fbac 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 801aed8:	4b77      	ldr	r3, [pc, #476]	; (801b0b8 <mbedtls_ssl_handshake_client_step+0x5f0>)
 801aeda:	9300      	str	r3, [sp, #0]
 801aedc:	4a6f      	ldr	r2, [pc, #444]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801aede:	f8cd 9004 	str.w	r9, [sp, #4]
 801aee2:	f240 6391 	movw	r3, #1681	; 0x691
 801aee6:	2103      	movs	r1, #3
 801aee8:	4620      	mov	r0, r4
 801aeea:	f7f5 fba1 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 801aeee:	f818 300b 	ldrb.w	r3, [r8, fp]
 801aef2:	9301      	str	r3, [sp, #4]
 801aef4:	4b71      	ldr	r3, [pc, #452]	; (801b0bc <mbedtls_ssl_handshake_client_step+0x5f4>)
 801aef6:	9300      	str	r3, [sp, #0]
 801aef8:	4620      	mov	r0, r4
 801aefa:	f240 6392 	movw	r3, #1682	; 0x692
 801aefe:	4a67      	ldr	r2, [pc, #412]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801af00:	2103      	movs	r1, #3
 801af02:	f7f5 fb95 	bl	8010630 <mbedtls_debug_print_msg>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 801af06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af08:	6898      	ldr	r0, [r3, #8]
 801af0a:	f7ff f8bf 	bl	801a08c <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL
 801af0e:	bb18      	cbnz	r0, 801af58 <mbedtls_ssl_handshake_client_step+0x490>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801af10:	4b6b      	ldr	r3, [pc, #428]	; (801b0c0 <mbedtls_ssl_handshake_client_step+0x5f8>)
 801af12:	9300      	str	r3, [sp, #0]
 801af14:	f240 639c 	movw	r3, #1692	; 0x69c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801af18:	4a60      	ldr	r2, [pc, #384]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801af1a:	2101      	movs	r1, #1
 801af1c:	4620      	mov	r0, r4
 801af1e:	f7f5 fb87 	bl	8010630 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801af22:	222f      	movs	r2, #47	; 0x2f
 801af24:	e678      	b.n	801ac18 <mbedtls_ssl_handshake_client_step+0x150>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801af26:	230c      	movs	r3, #12
 801af28:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801af2a:	4620      	mov	r0, r4
 801af2c:	f001 faae 	bl	801c48c <mbedtls_ssl_derive_keys>
 801af30:	4607      	mov	r7, r0
 801af32:	2800      	cmp	r0, #0
 801af34:	d0be      	beq.n	801aeb4 <mbedtls_ssl_handshake_client_step+0x3ec>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801af36:	4b63      	ldr	r3, [pc, #396]	; (801b0c4 <mbedtls_ssl_handshake_client_step+0x5fc>)
 801af38:	9001      	str	r0, [sp, #4]
 801af3a:	9300      	str	r3, [sp, #0]
 801af3c:	4a57      	ldr	r2, [pc, #348]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801af3e:	f240 6387 	movw	r3, #1671	; 0x687
 801af42:	2101      	movs	r1, #1
 801af44:	4620      	mov	r0, r4
 801af46:	f7f5 fba3 	bl	8010690 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801af4a:	2250      	movs	r2, #80	; 0x50
 801af4c:	2102      	movs	r1, #2
 801af4e:	4620      	mov	r0, r4
 801af50:	f002 f9b6 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801af54:	463d      	mov	r5, r7
 801af56:	e5f5      	b.n	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 801af58:	6843      	ldr	r3, [r0, #4]
 801af5a:	9301      	str	r3, [sp, #4]
 801af5c:	4b5a      	ldr	r3, [pc, #360]	; (801b0c8 <mbedtls_ssl_handshake_client_step+0x600>)
 801af5e:	9300      	str	r3, [sp, #0]
 801af60:	4a4e      	ldr	r2, [pc, #312]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801af62:	f240 63a2 	movw	r3, #1698	; 0x6a2
 801af66:	2103      	movs	r1, #3
 801af68:	4620      	mov	r0, r4
 801af6a:	f7f5 fb61 	bl	8010630 <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 801af6e:	6823      	ldr	r3, [r4, #0]
 801af70:	6962      	ldr	r2, [r4, #20]
 801af72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af76:	3b04      	subs	r3, #4
 801af78:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801af7c:	b921      	cbnz	r1, 801af88 <mbedtls_ssl_handshake_client_step+0x4c0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801af7e:	4b50      	ldr	r3, [pc, #320]	; (801b0c0 <mbedtls_ssl_handshake_client_step+0x5f8>)
 801af80:	9300      	str	r3, [sp, #0]
 801af82:	f240 63a9 	movw	r3, #1705	; 0x6a9
 801af86:	e7c7      	b.n	801af18 <mbedtls_ssl_handshake_client_step+0x450>
            ssl->session_negotiate->ciphersuite )
 801af88:	6b62      	ldr	r2, [r4, #52]	; 0x34
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 801af8a:	6890      	ldr	r0, [r2, #8]
 801af8c:	4281      	cmp	r1, r0
 801af8e:	d1f3      	bne.n	801af78 <mbedtls_ssl_handshake_client_step+0x4b0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801af90:	9b08      	ldr	r3, [sp, #32]
    ssl->session_negotiate->compression = comp;
 801af92:	f04f 0b00 	mov.w	fp, #0
 801af96:	f8c2 b00c 	str.w	fp, [r2, #12]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801af9a:	9301      	str	r3, [sp, #4]
 801af9c:	4b4b      	ldr	r3, [pc, #300]	; (801b0cc <mbedtls_ssl_handshake_client_step+0x604>)
 801af9e:	9300      	str	r3, [sp, #0]
 801afa0:	4a3e      	ldr	r2, [pc, #248]	; (801b09c <mbedtls_ssl_handshake_client_step+0x5d4>)
 801afa2:	f240 63c5 	movw	r3, #1733	; 0x6c5
 801afa6:	2102      	movs	r1, #2
 801afa8:	4620      	mov	r0, r4
    ext = buf + 40 + n;
 801afaa:	f106 0728 	add.w	r7, r6, #40	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801afae:	f7f5 fb3f 	bl	8010630 <mbedtls_debug_print_msg>
    ext = buf + 40 + n;
 801afb2:	4447      	add	r7, r8
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801afb4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 801b09c <mbedtls_ssl_handshake_client_step+0x5d4>
    while( ext_len )
 801afb8:	9b08      	ldr	r3, [sp, #32]
 801afba:	b98b      	cbnz	r3, 801afe0 <mbedtls_ssl_handshake_client_step+0x518>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801afbc:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801afc0:	2900      	cmp	r1, #0
 801afc2:	f040 819e 	bne.w	801b302 <mbedtls_ssl_handshake_client_step+0x83a>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 801afc6:	6823      	ldr	r3, [r4, #0]
 801afc8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801afcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801afd0:	2b20      	cmp	r3, #32
 801afd2:	f040 8196 	bne.w	801b302 <mbedtls_ssl_handshake_client_step+0x83a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801afd6:	4b3e      	ldr	r3, [pc, #248]	; (801b0d0 <mbedtls_ssl_handshake_client_step+0x608>)
 801afd8:	9300      	str	r3, [sp, #0]
 801afda:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 801afde:	e0a8      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
 801afe0:	887e      	ldrh	r6, [r7, #2]
 801afe2:	883b      	ldrh	r3, [r7, #0]
        if( ext_size + 4 > ext_len )
 801afe4:	9908      	ldr	r1, [sp, #32]
 801afe6:	ba76      	rev16	r6, r6
 801afe8:	b2b6      	uxth	r6, r6
 801afea:	1d32      	adds	r2, r6, #4
 801afec:	ba5b      	rev16	r3, r3
 801afee:	428a      	cmp	r2, r1
 801aff0:	b29b      	uxth	r3, r3
 801aff2:	920a      	str	r2, [sp, #40]	; 0x28
 801aff4:	d904      	bls.n	801b000 <mbedtls_ssl_handshake_client_step+0x538>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801aff6:	4b32      	ldr	r3, [pc, #200]	; (801b0c0 <mbedtls_ssl_handshake_client_step+0x5f8>)
 801aff8:	9300      	str	r3, [sp, #0]
 801affa:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 801affe:	e605      	b.n	801ac0c <mbedtls_ssl_handshake_client_step+0x144>
        switch( ext_id )
 801b000:	2b10      	cmp	r3, #16
 801b002:	f000 8136 	beq.w	801b272 <mbedtls_ssl_handshake_client_step+0x7aa>
 801b006:	d824      	bhi.n	801b052 <mbedtls_ssl_handshake_client_step+0x58a>
 801b008:	2b04      	cmp	r3, #4
 801b00a:	f000 80ba 	beq.w	801b182 <mbedtls_ssl_handshake_client_step+0x6ba>
 801b00e:	2b0b      	cmp	r3, #11
 801b010:	f000 8100 	beq.w	801b214 <mbedtls_ssl_handshake_client_step+0x74c>
 801b014:	2b01      	cmp	r3, #1
 801b016:	f040 816c 	bne.w	801b2f2 <mbedtls_ssl_handshake_client_step+0x82a>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found max_fragment_length extension" ) );
 801b01a:	4b2e      	ldr	r3, [pc, #184]	; (801b0d4 <mbedtls_ssl_handshake_client_step+0x60c>)
 801b01c:	9300      	str	r3, [sp, #0]
 801b01e:	4642      	mov	r2, r8
 801b020:	f240 63e6 	movw	r3, #1766	; 0x6e6
 801b024:	2103      	movs	r1, #3
 801b026:	4620      	mov	r0, r4
 801b028:	f7f5 fb02 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 801b02c:	6823      	ldr	r3, [r4, #0]
 801b02e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801b032:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 801b036:	b13a      	cbz	r2, 801b048 <mbedtls_ssl_handshake_client_step+0x580>
 801b038:	2e01      	cmp	r6, #1
 801b03a:	d105      	bne.n	801b048 <mbedtls_ssl_handshake_client_step+0x580>
        len != 1 ||
 801b03c:	793a      	ldrb	r2, [r7, #4]
 801b03e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801b042:	429a      	cmp	r2, r3
 801b044:	f000 80b4 	beq.w	801b1b0 <mbedtls_ssl_handshake_client_step+0x6e8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching max fragment length extension" ) );
 801b048:	4b23      	ldr	r3, [pc, #140]	; (801b0d8 <mbedtls_ssl_handshake_client_step+0x610>)
 801b04a:	9300      	str	r3, [sp, #0]
 801b04c:	f240 4353 	movw	r3, #1107	; 0x453
 801b050:	e06f      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
        switch( ext_id )
 801b052:	2b23      	cmp	r3, #35	; 0x23
 801b054:	f000 80c5 	beq.w	801b1e2 <mbedtls_ssl_handshake_client_step+0x71a>
 801b058:	f64f 7201 	movw	r2, #65281	; 0xff01
 801b05c:	4293      	cmp	r3, r2
 801b05e:	d041      	beq.n	801b0e4 <mbedtls_ssl_handshake_client_step+0x61c>
 801b060:	2b17      	cmp	r3, #23
 801b062:	f040 8146 	bne.w	801b2f2 <mbedtls_ssl_handshake_client_step+0x82a>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found extended_master_secret extension" ) );
 801b066:	4b1d      	ldr	r3, [pc, #116]	; (801b0dc <mbedtls_ssl_handshake_client_step+0x614>)
 801b068:	9300      	str	r3, [sp, #0]
 801b06a:	4642      	mov	r2, r8
 801b06c:	f240 730d 	movw	r3, #1805	; 0x70d
 801b070:	2103      	movs	r1, #3
 801b072:	4620      	mov	r0, r4
 801b074:	f7f5 fadc 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801b078:	6823      	ldr	r3, [r4, #0]
 801b07a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b07e:	079a      	lsls	r2, r3, #30
 801b080:	d504      	bpl.n	801b08c <mbedtls_ssl_handshake_client_step+0x5c4>
 801b082:	6963      	ldr	r3, [r4, #20]
 801b084:	b113      	cbz	r3, 801b08c <mbedtls_ssl_handshake_client_step+0x5c4>
        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||
 801b086:	2e00      	cmp	r6, #0
 801b088:	f000 80a6 	beq.w	801b1d8 <mbedtls_ssl_handshake_client_step+0x710>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching extended master secret extension" ) );
 801b08c:	4b14      	ldr	r3, [pc, #80]	; (801b0e0 <mbedtls_ssl_handshake_client_step+0x618>)
 801b08e:	9300      	str	r3, [sp, #0]
 801b090:	f240 4393 	movw	r3, #1171	; 0x493
 801b094:	e04d      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
 801b096:	bf00      	nop
 801b098:	08030ef2 	.word	0x08030ef2
 801b09c:	080308d8 	.word	0x080308d8
 801b0a0:	ffff8f00 	.word	0xffff8f00
 801b0a4:	08030f16 	.word	0x08030f16
 801b0a8:	08030f38 	.word	0x08030f38
 801b0ac:	08032414 	.word	0x08032414
 801b0b0:	08030d81 	.word	0x08030d81
 801b0b4:	08030f69 	.word	0x08030f69
 801b0b8:	08030f85 	.word	0x08030f85
 801b0bc:	08030fac 	.word	0x08030fac
 801b0c0:	08030e1a 	.word	0x08030e1a
 801b0c4:	08030f51 	.word	0x08030f51
 801b0c8:	08030fcc 	.word	0x08030fcc
 801b0cc:	08030ff1 	.word	0x08030ff1
 801b0d0:	08031282 	.word	0x08031282
 801b0d4:	0803107b 	.word	0x0803107b
 801b0d8:	0803109f 	.word	0x0803109f
 801b0dc:	0803110f 	.word	0x0803110f
 801b0e0:	08031136 	.word	0x08031136
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 801b0e4:	4bb0      	ldr	r3, [pc, #704]	; (801b3a8 <mbedtls_ssl_handshake_client_step+0x8e0>)
 801b0e6:	9300      	str	r3, [sp, #0]
 801b0e8:	4642      	mov	r2, r8
 801b0ea:	f240 63d9 	movw	r3, #1753	; 0x6d9
 801b0ee:	2103      	movs	r1, #3
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	f7f5 fa9d 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801b0f6:	68a3      	ldr	r3, [r4, #8]
 801b0f8:	b3ab      	cbz	r3, 801b166 <mbedtls_ssl_handshake_client_step+0x69e>
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801b0fa:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 801b0fe:	0043      	lsls	r3, r0, #1
 801b100:	1c5a      	adds	r2, r3, #1
 801b102:	4296      	cmp	r6, r2
 801b104:	d111      	bne.n	801b12a <mbedtls_ssl_handshake_client_step+0x662>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801b106:	793a      	ldrb	r2, [r7, #4]
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801b108:	4293      	cmp	r3, r2
 801b10a:	d10e      	bne.n	801b12a <mbedtls_ssl_handshake_client_step+0x662>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 801b10c:	2300      	movs	r3, #0
            mbedtls_ssl_safer_memcmp( buf + 1,
 801b10e:	f107 0c05 	add.w	ip, r7, #5
                          ssl->own_verify_data, ssl->verify_data_len ) != 0 ||
 801b112:	f104 0ec4 	add.w	lr, r4, #196	; 0xc4

    for( i = 0; i < n; i++ )
 801b116:	461a      	mov	r2, r3
 801b118:	4290      	cmp	r0, r2
 801b11a:	d111      	bne.n	801b140 <mbedtls_ssl_handshake_client_step+0x678>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801b11c:	b92b      	cbnz	r3, 801b12a <mbedtls_ssl_handshake_client_step+0x662>
                          ssl->peer_verify_data, ssl->verify_data_len ) != 0 )
 801b11e:	f104 0cd0 	add.w	ip, r4, #208	; 0xd0
 801b122:	4619      	mov	r1, r3
 801b124:	428a      	cmp	r2, r1
 801b126:	d114      	bne.n	801b152 <mbedtls_ssl_handshake_client_step+0x68a>
                          ssl->own_verify_data, ssl->verify_data_len ) != 0 ||
 801b128:	b343      	cbz	r3, 801b17c <mbedtls_ssl_handshake_client_step+0x6b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching renegotiation info" ) );
 801b12a:	4ba0      	ldr	r3, [pc, #640]	; (801b3ac <mbedtls_ssl_handshake_client_step+0x8e4>)
 801b12c:	9300      	str	r3, [sp, #0]
 801b12e:	f240 432f 	movw	r3, #1071	; 0x42f
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801b132:	4a9f      	ldr	r2, [pc, #636]	; (801b3b0 <mbedtls_ssl_handshake_client_step+0x8e8>)
 801b134:	2101      	movs	r1, #1
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801b136:	4620      	mov	r0, r4
 801b138:	f7f5 fa7a 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b13c:	2228      	movs	r2, #40	; 0x28
 801b13e:	e56b      	b.n	801ac18 <mbedtls_ssl_handshake_client_step+0x150>
        diff |= A[i] ^ B[i];
 801b140:	f81c 1002 	ldrb.w	r1, [ip, r2]
 801b144:	f81e 9002 	ldrb.w	r9, [lr, r2]
 801b148:	ea81 0109 	eor.w	r1, r1, r9
 801b14c:	430b      	orrs	r3, r1
    for( i = 0; i < n; i++ )
 801b14e:	3201      	adds	r2, #1
 801b150:	e7e2      	b.n	801b118 <mbedtls_ssl_handshake_client_step+0x650>
        diff |= A[i] ^ B[i];
 801b152:	1850      	adds	r0, r2, r1
 801b154:	4438      	add	r0, r7
 801b156:	f81c e001 	ldrb.w	lr, [ip, r1]
 801b15a:	7940      	ldrb	r0, [r0, #5]
 801b15c:	ea80 000e 	eor.w	r0, r0, lr
 801b160:	4303      	orrs	r3, r0
    for( i = 0; i < n; i++ )
 801b162:	3101      	adds	r1, #1
 801b164:	e7de      	b.n	801b124 <mbedtls_ssl_handshake_client_step+0x65c>
        if( len != 1 || buf[0] != 0x00 )
 801b166:	2e01      	cmp	r6, #1
 801b168:	d101      	bne.n	801b16e <mbedtls_ssl_handshake_client_step+0x6a6>
 801b16a:	793b      	ldrb	r3, [r7, #4]
 801b16c:	b123      	cbz	r3, 801b178 <mbedtls_ssl_handshake_client_step+0x6b0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 801b16e:	4b91      	ldr	r3, [pc, #580]	; (801b3b4 <mbedtls_ssl_handshake_client_step+0x8ec>)
 801b170:	9300      	str	r3, [sp, #0]
 801b172:	f240 433a 	movw	r3, #1082	; 0x43a
 801b176:	e7dc      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 801b178:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
            renegotiation_info_seen = 1;
 801b17c:	f04f 0b01 	mov.w	fp, #1
 801b180:	e016      	b.n	801b1b0 <mbedtls_ssl_handshake_client_step+0x6e8>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found truncated_hmac extension" ) );
 801b182:	4b8d      	ldr	r3, [pc, #564]	; (801b3b8 <mbedtls_ssl_handshake_client_step+0x8f0>)
 801b184:	9300      	str	r3, [sp, #0]
 801b186:	2103      	movs	r1, #3
 801b188:	f240 63f3 	movw	r3, #1779	; 0x6f3
 801b18c:	4642      	mov	r2, r8
 801b18e:	4620      	mov	r0, r4
 801b190:	f7f5 fa4e 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED ||
 801b194:	6823      	ldr	r3, [r4, #0]
 801b196:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b19a:	0719      	lsls	r1, r3, #28
 801b19c:	d500      	bpl.n	801b1a0 <mbedtls_ssl_handshake_client_step+0x6d8>
 801b19e:	b126      	cbz	r6, 801b1aa <mbedtls_ssl_handshake_client_step+0x6e2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching truncated HMAC extension" ) );
 801b1a0:	4b86      	ldr	r3, [pc, #536]	; (801b3bc <mbedtls_ssl_handshake_client_step+0x8f4>)
 801b1a2:	9300      	str	r3, [sp, #0]
 801b1a4:	f240 4365 	movw	r3, #1125	; 0x465
 801b1a8:	e7c3      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
    ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;
 801b1aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b1ac:	2201      	movs	r2, #1
 801b1ae:	67da      	str	r2, [r3, #124]	; 0x7c
        ext_len -= 4 + ext_size;
 801b1b0:	9b08      	ldr	r3, [sp, #32]
 801b1b2:	1b9e      	subs	r6, r3, r6
 801b1b4:	1f33      	subs	r3, r6, #4
 801b1b6:	9308      	str	r3, [sp, #32]
        if( ext_len > 0 && ext_len < 4 )
 801b1b8:	3e05      	subs	r6, #5
        ext += 4 + ext_size;
 801b1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if( ext_len > 0 && ext_len < 4 )
 801b1bc:	2e02      	cmp	r6, #2
        ext += 4 + ext_size;
 801b1be:	441f      	add	r7, r3
        if( ext_len > 0 && ext_len < 4 )
 801b1c0:	f63f aefa 	bhi.w	801afb8 <mbedtls_ssl_handshake_client_step+0x4f0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b1c4:	4b7e      	ldr	r3, [pc, #504]	; (801b3c0 <mbedtls_ssl_handshake_client_step+0x8f8>)
 801b1c6:	9300      	str	r3, [sp, #0]
 801b1c8:	4a79      	ldr	r2, [pc, #484]	; (801b3b0 <mbedtls_ssl_handshake_client_step+0x8e8>)
 801b1ca:	f240 7355 	movw	r3, #1877	; 0x755
 801b1ce:	2101      	movs	r1, #1
 801b1d0:	4620      	mov	r0, r4
 801b1d2:	f7f5 fa2d 	bl	8010630 <mbedtls_debug_print_msg>
 801b1d6:	e523      	b.n	801ac20 <mbedtls_ssl_handshake_client_step+0x158>
    ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801b1d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b1da:	2201      	movs	r2, #1
 801b1dc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
 801b1e0:	e7e6      	b.n	801b1b0 <mbedtls_ssl_handshake_client_step+0x6e8>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found session_ticket extension" ) );
 801b1e2:	4b78      	ldr	r3, [pc, #480]	; (801b3c4 <mbedtls_ssl_handshake_client_step+0x8fc>)
 801b1e4:	9300      	str	r3, [sp, #0]
 801b1e6:	4642      	mov	r2, r8
 801b1e8:	f240 731a 	movw	r3, #1818	; 0x71a
 801b1ec:	2103      	movs	r1, #3
 801b1ee:	4620      	mov	r0, r4
 801b1f0:	f7f5 fa1e 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 801b1f4:	6823      	ldr	r3, [r4, #0]
 801b1f6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b1fa:	06db      	lsls	r3, r3, #27
 801b1fc:	d500      	bpl.n	801b200 <mbedtls_ssl_handshake_client_step+0x738>
 801b1fe:	b126      	cbz	r6, 801b20a <mbedtls_ssl_handshake_client_step+0x742>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching session ticket extension" ) );
 801b200:	4b71      	ldr	r3, [pc, #452]	; (801b3c8 <mbedtls_ssl_handshake_client_step+0x900>)
 801b202:	9300      	str	r3, [sp, #0]
 801b204:	f240 43a9 	movw	r3, #1193	; 0x4a9
 801b208:	e793      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
    ssl->handshake->new_session_ticket = 1;
 801b20a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b20c:	2201      	movs	r2, #1
 801b20e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 801b212:	e7cd      	b.n	801b1b0 <mbedtls_ssl_handshake_client_step+0x6e8>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported_point_formats extension" ) );
 801b214:	4b6d      	ldr	r3, [pc, #436]	; (801b3cc <mbedtls_ssl_handshake_client_step+0x904>)
 801b216:	9300      	str	r3, [sp, #0]
 801b218:	4642      	mov	r2, r8
 801b21a:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 801b21e:	2103      	movs	r1, #3
 801b220:	4620      	mov	r0, r4
 801b222:	f7f5 fa05 	bl	8010630 <mbedtls_debug_print_msg>
    list_size = buf[0];
 801b226:	793b      	ldrb	r3, [r7, #4]
    if( list_size + 1 != len )
 801b228:	1c5a      	adds	r2, r3, #1
 801b22a:	4296      	cmp	r6, r2
 801b22c:	d004      	beq.n	801b238 <mbedtls_ssl_handshake_client_step+0x770>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b22e:	4b64      	ldr	r3, [pc, #400]	; (801b3c0 <mbedtls_ssl_handshake_client_step+0x8f8>)
 801b230:	9300      	str	r3, [sp, #0]
 801b232:	f240 43c3 	movw	r3, #1219	; 0x4c3
 801b236:	e4e9      	b.n	801ac0c <mbedtls_ssl_handshake_client_step+0x144>
    p = buf + 1;
 801b238:	1d7a      	adds	r2, r7, #5
 801b23a:	4610      	mov	r0, r2
    while( list_size > 0 )
 801b23c:	b923      	cbnz	r3, 801b248 <mbedtls_ssl_handshake_client_step+0x780>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
 801b23e:	4b64      	ldr	r3, [pc, #400]	; (801b3d0 <mbedtls_ssl_handshake_client_step+0x908>)
 801b240:	9300      	str	r3, [sp, #0]
 801b242:	f240 43dd 	movw	r3, #1245	; 0x4dd
 801b246:	e774      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
 801b248:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b24c:	2901      	cmp	r1, #1
 801b24e:	d80e      	bhi.n	801b26e <mbedtls_ssl_handshake_client_step+0x7a6>
            ssl->handshake->ecdh_ctx.point_format = p[0];
 801b250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b252:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
 801b256:	7803      	ldrb	r3, [r0, #0]
 801b258:	9301      	str	r3, [sp, #4]
 801b25a:	4b5e      	ldr	r3, [pc, #376]	; (801b3d4 <mbedtls_ssl_handshake_client_step+0x90c>)
 801b25c:	9300      	str	r3, [sp, #0]
 801b25e:	4642      	mov	r2, r8
 801b260:	f240 43d5 	movw	r3, #1237	; 0x4d5
 801b264:	2104      	movs	r1, #4
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801b266:	4620      	mov	r0, r4
 801b268:	f7f5 f9e2 	bl	8010630 <mbedtls_debug_print_msg>
 801b26c:	e7a0      	b.n	801b1b0 <mbedtls_ssl_handshake_client_step+0x6e8>
        list_size--;
 801b26e:	3b01      	subs	r3, #1
 801b270:	e7e3      	b.n	801b23a <mbedtls_ssl_handshake_client_step+0x772>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801b272:	4b59      	ldr	r3, [pc, #356]	; (801b3d8 <mbedtls_ssl_handshake_client_step+0x910>)
 801b274:	9300      	str	r3, [sp, #0]
 801b276:	4642      	mov	r2, r8
 801b278:	f240 7343 	movw	r3, #1859	; 0x743
 801b27c:	2103      	movs	r1, #3
 801b27e:	4620      	mov	r0, r4
 801b280:	f7f5 f9d6 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->conf->alpn_list == NULL )
 801b284:	6823      	ldr	r3, [r4, #0]
 801b286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b288:	b922      	cbnz	r2, 801b294 <mbedtls_ssl_handshake_client_step+0x7cc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching ALPN extension" ) );
 801b28a:	4b54      	ldr	r3, [pc, #336]	; (801b3dc <mbedtls_ssl_handshake_client_step+0x914>)
 801b28c:	9300      	str	r3, [sp, #0]
 801b28e:	f240 530f 	movw	r3, #1295	; 0x50f
 801b292:	e74e      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
    if( len < 4 )
 801b294:	2e03      	cmp	r6, #3
 801b296:	f67f acbe 	bls.w	801ac16 <mbedtls_ssl_handshake_client_step+0x14e>
    list_len = ( buf[0] << 8 ) | buf[1];
 801b29a:	88bb      	ldrh	r3, [r7, #4]
 801b29c:	ba5b      	rev16	r3, r3
 801b29e:	b29b      	uxth	r3, r3
    if( list_len != len - 2 )
 801b2a0:	1eb1      	subs	r1, r6, #2
 801b2a2:	428b      	cmp	r3, r1
 801b2a4:	f47f acb7 	bne.w	801ac16 <mbedtls_ssl_handshake_client_step+0x14e>
    name_len = buf[2];
 801b2a8:	f897 9006 	ldrb.w	r9, [r7, #6]
    if( name_len != list_len - 1 )
 801b2ac:	1ef1      	subs	r1, r6, #3
 801b2ae:	4589      	cmp	r9, r1
 801b2b0:	f47f acb1 	bne.w	801ac16 <mbedtls_ssl_handshake_client_step+0x14e>
 801b2b4:	1f13      	subs	r3, r2, #4
 801b2b6:	9309      	str	r3, [sp, #36]	; 0x24
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b2b8:	1dfb      	adds	r3, r7, #7
 801b2ba:	930b      	str	r3, [sp, #44]	; 0x2c
    for( p = ssl->conf->alpn_list; *p != NULL; p++ )
 801b2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2be:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b2c2:	9309      	str	r3, [sp, #36]	; 0x24
 801b2c4:	f1ba 0f00 	cmp.w	sl, #0
 801b2c8:	d104      	bne.n	801b2d4 <mbedtls_ssl_handshake_client_step+0x80c>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "ALPN extension: no matching protocol" ) );
 801b2ca:	4b45      	ldr	r3, [pc, #276]	; (801b3e0 <mbedtls_ssl_handshake_client_step+0x918>)
 801b2cc:	9300      	str	r3, [sp, #0]
 801b2ce:	f240 5342 	movw	r3, #1346	; 0x542
 801b2d2:	e72e      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
        if( name_len == strlen( *p ) &&
 801b2d4:	4650      	mov	r0, sl
 801b2d6:	f7e4 ff85 	bl	80001e4 <strlen>
 801b2da:	4581      	cmp	r9, r0
 801b2dc:	d1ee      	bne.n	801b2bc <mbedtls_ssl_handshake_client_step+0x7f4>
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b2de:	464a      	mov	r2, r9
 801b2e0:	4651      	mov	r1, sl
 801b2e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b2e4:	f006 fff0 	bl	80222c8 <memcmp>
        if( name_len == strlen( *p ) &&
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	d1e7      	bne.n	801b2bc <mbedtls_ssl_handshake_client_step+0x7f4>
            ssl->alpn_chosen = *p;
 801b2ec:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
 801b2f0:	e75e      	b.n	801b1b0 <mbedtls_ssl_handshake_client_step+0x6e8>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801b2f2:	9301      	str	r3, [sp, #4]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801b2f4:	4b3b      	ldr	r3, [pc, #236]	; (801b3e4 <mbedtls_ssl_handshake_client_step+0x91c>)
 801b2f6:	9300      	str	r3, [sp, #0]
 801b2f8:	4642      	mov	r2, r8
 801b2fa:	f240 734d 	movw	r3, #1869	; 0x74d
 801b2fe:	2103      	movs	r1, #3
 801b300:	e7b1      	b.n	801b266 <mbedtls_ssl_handshake_client_step+0x79e>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b302:	68a0      	ldr	r0, [r4, #8]
 801b304:	2801      	cmp	r0, #1
 801b306:	d120      	bne.n	801b34a <mbedtls_ssl_handshake_client_step+0x882>
 801b308:	2901      	cmp	r1, #1
 801b30a:	d108      	bne.n	801b31e <mbedtls_ssl_handshake_client_step+0x856>
             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&
 801b30c:	f1bb 0f00 	cmp.w	fp, #0
 801b310:	d11b      	bne.n	801b34a <mbedtls_ssl_handshake_client_step+0x882>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension missing (secure)" ) );
 801b312:	4b35      	ldr	r3, [pc, #212]	; (801b3e8 <mbedtls_ssl_handshake_client_step+0x920>)
 801b314:	9300      	str	r3, [sp, #0]
 801b316:	4a26      	ldr	r2, [pc, #152]	; (801b3b0 <mbedtls_ssl_handshake_client_step+0x8e8>)
 801b318:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 801b31c:	e70b      	b.n	801b136 <mbedtls_ssl_handshake_client_step+0x66e>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b31e:	b9a1      	cbnz	r1, 801b34a <mbedtls_ssl_handshake_client_step+0x882>
             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )
 801b320:	6823      	ldr	r3, [r4, #0]
 801b322:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b326:	f013 0f30 	tst.w	r3, #48	; 0x30
 801b32a:	d104      	bne.n	801b336 <mbedtls_ssl_handshake_client_step+0x86e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation not allowed" ) );
 801b32c:	4b2f      	ldr	r3, [pc, #188]	; (801b3ec <mbedtls_ssl_handshake_client_step+0x924>)
 801b32e:	9300      	str	r3, [sp, #0]
 801b330:	f240 736f 	movw	r3, #1903	; 0x76f
 801b334:	e6fd      	b.n	801b132 <mbedtls_ssl_handshake_client_step+0x66a>
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b336:	f1bb 0f00 	cmp.w	fp, #0
 801b33a:	d006      	beq.n	801b34a <mbedtls_ssl_handshake_client_step+0x882>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801b33c:	4b2c      	ldr	r3, [pc, #176]	; (801b3f0 <mbedtls_ssl_handshake_client_step+0x928>)
 801b33e:	9300      	str	r3, [sp, #0]
 801b340:	4a1b      	ldr	r2, [pc, #108]	; (801b3b0 <mbedtls_ssl_handshake_client_step+0x8e8>)
 801b342:	f240 7376 	movw	r3, #1910	; 0x776
 801b346:	4659      	mov	r1, fp
 801b348:	e6f5      	b.n	801b136 <mbedtls_ssl_handshake_client_step+0x66e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 801b34a:	4b2a      	ldr	r3, [pc, #168]	; (801b3f4 <mbedtls_ssl_handshake_client_step+0x92c>)
 801b34c:	9300      	str	r3, [sp, #0]
 801b34e:	f240 7382 	movw	r3, #1922	; 0x782
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801b352:	4a17      	ldr	r2, [pc, #92]	; (801b3b0 <mbedtls_ssl_handshake_client_step+0x8e8>)
 801b354:	2102      	movs	r1, #2
 801b356:	4620      	mov	r0, r4
 801b358:	f7f5 f96a 	bl	8010630 <mbedtls_debug_print_msg>
 801b35c:	f7ff bbf2 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801b360:	4620      	mov	r0, r4
 801b362:	f003 fd47 	bl	801edf4 <mbedtls_ssl_parse_certificate>
 801b366:	f7ff bbf4 	b.w	801ab52 <mbedtls_ssl_handshake_client_step+0x8a>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b36a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b36c:	4a10      	ldr	r2, [pc, #64]	; (801b3b0 <mbedtls_ssl_handshake_client_step+0x8e8>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b36e:	681f      	ldr	r7, [r3, #0]
    unsigned char *p = NULL, *end = NULL;
 801b370:	2300      	movs	r3, #0
 801b372:	930c      	str	r3, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b374:	4b20      	ldr	r3, [pc, #128]	; (801b3f8 <mbedtls_ssl_handshake_client_step+0x930>)
 801b376:	9300      	str	r3, [sp, #0]
 801b378:	2102      	movs	r1, #2
 801b37a:	f640 03d7 	movw	r3, #2263	; 0x8d7
 801b37e:	4620      	mov	r0, r4
 801b380:	f7f5 f956 	bl	8010630 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801b384:	7abb      	ldrb	r3, [r7, #10]
 801b386:	2b01      	cmp	r3, #1
 801b388:	d13a      	bne.n	801b400 <mbedtls_ssl_handshake_client_step+0x938>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 801b38a:	4b1c      	ldr	r3, [pc, #112]	; (801b3fc <mbedtls_ssl_handshake_client_step+0x934>)
 801b38c:	9300      	str	r3, [sp, #0]
 801b38e:	f640 03dc 	movw	r3, #2268	; 0x8dc
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801b392:	4a07      	ldr	r2, [pc, #28]	; (801b3b0 <mbedtls_ssl_handshake_client_step+0x8e8>)
 801b394:	2102      	movs	r1, #2
 801b396:	4620      	mov	r0, r4
 801b398:	f7f5 f94a 	bl	8010630 <mbedtls_debug_print_msg>
        ssl->state++;
 801b39c:	6863      	ldr	r3, [r4, #4]
 801b39e:	3301      	adds	r3, #1
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801b3a0:	6063      	str	r3, [r4, #4]
           break;
 801b3a2:	f7ff bbcf 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
 801b3a6:	bf00      	nop
 801b3a8:	0803101a 	.word	0x0803101a
 801b3ac:	08031038 	.word	0x08031038
 801b3b0:	080308d8 	.word	0x080308d8
 801b3b4:	08031058 	.word	0x08031058
 801b3b8:	080310ca 	.word	0x080310ca
 801b3bc:	080310e9 	.word	0x080310e9
 801b3c0:	08030e1a 	.word	0x08030e1a
 801b3c4:	08031164 	.word	0x08031164
 801b3c8:	08031183 	.word	0x08031183
 801b3cc:	080311a9 	.word	0x080311a9
 801b3d0:	080311eb 	.word	0x080311eb
 801b3d4:	080311d1 	.word	0x080311d1
 801b3d8:	08031205 	.word	0x08031205
 801b3dc:	0803121a 	.word	0x0803121a
 801b3e0:	08031236 	.word	0x08031236
 801b3e4:	0803125b 	.word	0x0803125b
 801b3e8:	080312af 	.word	0x080312af
 801b3ec:	080312dd 	.word	0x080312dd
 801b3f0:	080312fe 	.word	0x080312fe
 801b3f4:	0803132c 	.word	0x0803132c
 801b3f8:	08031342 	.word	0x08031342
 801b3fc:	0803135f 	.word	0x0803135f
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b400:	4620      	mov	r0, r4
 801b402:	f002 fb7b 	bl	801dafc <mbedtls_ssl_read_record>
 801b406:	4605      	mov	r5, r0
 801b408:	b130      	cbz	r0, 801b418 <mbedtls_ssl_handshake_client_step+0x950>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b40a:	4baf      	ldr	r3, [pc, #700]	; (801b6c8 <mbedtls_ssl_handshake_client_step+0xc00>)
 801b40c:	9300      	str	r3, [sp, #0]
 801b40e:	9001      	str	r0, [sp, #4]
 801b410:	f640 03fc 	movw	r3, #2300	; 0x8fc
 801b414:	f7ff bbb3 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b418:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b41a:	2b16      	cmp	r3, #22
 801b41c:	d005      	beq.n	801b42a <mbedtls_ssl_handshake_client_step+0x962>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b41e:	4bab      	ldr	r3, [pc, #684]	; (801b6cc <mbedtls_ssl_handshake_client_step+0xc04>)
 801b420:	9300      	str	r3, [sp, #0]
 801b422:	f640 1302 	movw	r3, #2306	; 0x902
 801b426:	f7ff bbda 	b.w	801abde <mbedtls_ssl_handshake_client_step+0x116>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 801b42a:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 801b42c:	7833      	ldrb	r3, [r6, #0]
 801b42e:	2b0c      	cmp	r3, #12
 801b430:	d015      	beq.n	801b45e <mbedtls_ssl_handshake_client_step+0x996>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801b432:	7abb      	ldrb	r3, [r7, #10]
 801b434:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b438:	2b05      	cmp	r3, #5
 801b43a:	d10a      	bne.n	801b452 <mbedtls_ssl_handshake_client_step+0x98a>
            ssl->keep_current_message = 1;
 801b43c:	2301      	movs	r3, #1
 801b43e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->state++;
 801b442:	6863      	ldr	r3, [r4, #4]
 801b444:	3301      	adds	r3, #1
 801b446:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 801b448:	4ba1      	ldr	r3, [pc, #644]	; (801b6d0 <mbedtls_ssl_handshake_client_step+0xc08>)
 801b44a:	9300      	str	r3, [sp, #0]
 801b44c:	f640 232f 	movw	r3, #2607	; 0xa2f
 801b450:	e77f      	b.n	801b352 <mbedtls_ssl_handshake_client_step+0x88a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 801b452:	4ba0      	ldr	r3, [pc, #640]	; (801b6d4 <mbedtls_ssl_handshake_client_step+0xc0c>)
 801b454:	9300      	str	r3, [sp, #0]
 801b456:	f640 1318 	movw	r3, #2328	; 0x918
 801b45a:	f7ff bbc0 	b.w	801abde <mbedtls_ssl_handshake_client_step+0x116>
    end = ssl->in_msg + ssl->in_hslen;
 801b45e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b462:	1d32      	adds	r2, r6, #4
    end = ssl->in_msg + ssl->in_hslen;
 801b464:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b466:	3b04      	subs	r3, #4
 801b468:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801b46c:	4b9a      	ldr	r3, [pc, #616]	; (801b6d8 <mbedtls_ssl_handshake_client_step+0xc10>)
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b46e:	920c      	str	r2, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b470:	9300      	str	r3, [sp, #0]
 801b472:	4a9a      	ldr	r2, [pc, #616]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b474:	f640 1321 	movw	r3, #2337	; 0x921
 801b478:	2103      	movs	r1, #3
 801b47a:	4620      	mov	r0, r4
 801b47c:	f7f5 f936 	bl	80106ec <mbedtls_debug_print_buf>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801b480:	7abb      	ldrb	r3, [r7, #10]
 801b482:	1eda      	subs	r2, r3, #3
 801b484:	2a01      	cmp	r2, #1
 801b486:	d901      	bls.n	801b48c <mbedtls_ssl_handshake_client_step+0x9c4>
 801b488:	2b08      	cmp	r3, #8
 801b48a:	d17e      	bne.n	801b58a <mbedtls_ssl_handshake_client_step+0xac2>
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
 801b48c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b48e:	4632      	mov	r2, r6
 801b490:	a90c      	add	r1, sp, #48	; 0x30
 801b492:	3004      	adds	r0, #4
 801b494:	f7f5 fb37 	bl	8010b06 <mbedtls_ecdh_read_params>
 801b498:	b1d0      	cbz	r0, 801b4d0 <mbedtls_ssl_handshake_client_step+0xa08>
        MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ecdh_read_params" ), ret );
 801b49a:	4b91      	ldr	r3, [pc, #580]	; (801b6e0 <mbedtls_ssl_handshake_client_step+0xc18>)
 801b49c:	9001      	str	r0, [sp, #4]
 801b49e:	9300      	str	r3, [sp, #0]
 801b4a0:	4a8e      	ldr	r2, [pc, #568]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b4a2:	f240 73e6 	movw	r3, #2022	; 0x7e6
 801b4a6:	2101      	movs	r1, #1
 801b4a8:	4620      	mov	r0, r4
 801b4aa:	f7f5 f8f1 	bl	8010690 <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b4ae:	4b87      	ldr	r3, [pc, #540]	; (801b6cc <mbedtls_ssl_handshake_client_step+0xc04>)
 801b4b0:	9300      	str	r3, [sp, #0]
 801b4b2:	4a8a      	ldr	r2, [pc, #552]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b4b4:	4d8b      	ldr	r5, [pc, #556]	; (801b6e4 <mbedtls_ssl_handshake_client_step+0xc1c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b4b6:	f640 1354 	movw	r3, #2388	; 0x954
 801b4ba:	2101      	movs	r1, #1
 801b4bc:	4620      	mov	r0, r4
 801b4be:	f7f5 f8b7 	bl	8010630 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b4c2:	222f      	movs	r2, #47	; 0x2f
 801b4c4:	2102      	movs	r1, #2
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f001 fefa 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801b4cc:	f7ff bb3a 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    curve_info = mbedtls_ecp_curve_info_from_grp_id( ssl->handshake->ecdh_ctx.grp.id );
 801b4d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b4d2:	7918      	ldrb	r0, [r3, #4]
 801b4d4:	f7f6 fb14 	bl	8011b00 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
 801b4d8:	b990      	cbnz	r0, 801b500 <mbedtls_ssl_handshake_client_step+0xa38>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b4da:	4b83      	ldr	r3, [pc, #524]	; (801b6e8 <mbedtls_ssl_handshake_client_step+0xc20>)
 801b4dc:	9300      	str	r3, [sp, #0]
 801b4de:	4a7f      	ldr	r2, [pc, #508]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b4e0:	f240 73ba 	movw	r3, #1978	; 0x7ba
 801b4e4:	2101      	movs	r1, #1
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	f7f5 f8a2 	bl	8010630 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message (ECDHE curve)" ) );
 801b4ec:	4b7f      	ldr	r3, [pc, #508]	; (801b6ec <mbedtls_ssl_handshake_client_step+0xc24>)
 801b4ee:	9300      	str	r3, [sp, #0]
 801b4f0:	4a7a      	ldr	r2, [pc, #488]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b4f2:	f240 73ec 	movw	r3, #2028	; 0x7ec
 801b4f6:	2101      	movs	r1, #1
 801b4f8:	4620      	mov	r0, r4
 801b4fa:	f7f5 f899 	bl	8010630 <mbedtls_debug_print_msg>
 801b4fe:	e7d6      	b.n	801b4ae <mbedtls_ssl_handshake_client_step+0x9e6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );
 801b500:	6883      	ldr	r3, [r0, #8]
 801b502:	9301      	str	r3, [sp, #4]
 801b504:	4b7a      	ldr	r3, [pc, #488]	; (801b6f0 <mbedtls_ssl_handshake_client_step+0xc28>)
 801b506:	9300      	str	r3, [sp, #0]
 801b508:	2102      	movs	r1, #2
 801b50a:	f240 73be 	movw	r3, #1982	; 0x7be
 801b50e:	4620      	mov	r0, r4
 801b510:	4a72      	ldr	r2, [pc, #456]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b512:	f7f5 f88d 	bl	8010630 <mbedtls_debug_print_msg>
    if( mbedtls_ssl_check_curve( ssl, ssl->handshake->ecdh_ctx.grp.id ) != 0 )
 801b516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b518:	4620      	mov	r0, r4
 801b51a:	7919      	ldrb	r1, [r3, #4]
 801b51c:	f003 fc0e 	bl	801ed3c <mbedtls_ssl_check_curve>
 801b520:	2800      	cmp	r0, #0
 801b522:	d1e3      	bne.n	801b4ec <mbedtls_ssl_handshake_client_step+0xa24>
    MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Qp", &ssl->handshake->ecdh_ctx.Qp );
 801b524:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b526:	4a6d      	ldr	r2, [pc, #436]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b528:	33b0      	adds	r3, #176	; 0xb0
 801b52a:	9301      	str	r3, [sp, #4]
 801b52c:	4b71      	ldr	r3, [pc, #452]	; (801b6f4 <mbedtls_ssl_handshake_client_step+0xc2c>)
 801b52e:	9300      	str	r3, [sp, #0]
 801b530:	2103      	movs	r1, #3
 801b532:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 801b536:	4620      	mov	r0, r4
 801b538:	f7f5 f9ba 	bl	80108b0 <mbedtls_debug_print_ecp>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801b53c:	7abb      	ldrb	r3, [r7, #10]
 801b53e:	3b02      	subs	r3, #2
 801b540:	2b02      	cmp	r3, #2
 801b542:	f63f af7e 	bhi.w	801b442 <mbedtls_ssl_handshake_client_step+0x97a>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801b546:	6963      	ldr	r3, [r4, #20]
 801b548:	2b03      	cmp	r3, #3
 801b54a:	d16e      	bne.n	801b62a <mbedtls_ssl_handshake_client_step+0xb62>
        size_t params_len = p - params;
 801b54c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    if( (*p) + 2 > end )
 801b550:	f10b 0302 	add.w	r3, fp, #2
 801b554:	429e      	cmp	r6, r3
 801b556:	d313      	bcc.n	801b580 <mbedtls_ssl_handshake_client_step+0xab8>
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b558:	f89b 0000 	ldrb.w	r0, [fp]
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b55c:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b560:	f003 fbd4 	bl	801ed0c <mbedtls_ssl_md_alg_from_hash>
 801b564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b566:	4680      	mov	r8, r0
 801b568:	b9d8      	cbnz	r0, 801b5a2 <mbedtls_ssl_handshake_client_step+0xada>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Server used unsupported "
 801b56a:	781b      	ldrb	r3, [r3, #0]
 801b56c:	9301      	str	r3, [sp, #4]
 801b56e:	4b62      	ldr	r3, [pc, #392]	; (801b6f8 <mbedtls_ssl_handshake_client_step+0xc30>)
 801b570:	9300      	str	r3, [sp, #0]
 801b572:	f640 0385 	movw	r3, #2181	; 0x885
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b576:	4a59      	ldr	r2, [pc, #356]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b578:	2101      	movs	r1, #1
 801b57a:	4620      	mov	r0, r4
 801b57c:	f7f5 f858 	bl	8010630 <mbedtls_debug_print_msg>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b580:	4b52      	ldr	r3, [pc, #328]	; (801b6cc <mbedtls_ssl_handshake_client_step+0xc04>)
 801b582:	9300      	str	r3, [sp, #0]
 801b584:	f640 1385 	movw	r3, #2437	; 0x985
 801b588:	e048      	b.n	801b61c <mbedtls_ssl_handshake_client_step+0xb54>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b58a:	4b57      	ldr	r3, [pc, #348]	; (801b6e8 <mbedtls_ssl_handshake_client_step+0xc20>)
 801b58c:	9300      	str	r3, [sp, #0]
 801b58e:	f640 136e 	movw	r3, #2414	; 0x96e
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b592:	4a52      	ldr	r2, [pc, #328]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b594:	4d59      	ldr	r5, [pc, #356]	; (801b6fc <mbedtls_ssl_handshake_client_step+0xc34>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b596:	2101      	movs	r1, #1
 801b598:	4620      	mov	r0, r4
 801b59a:	f7f5 f849 	bl	8010630 <mbedtls_debug_print_msg>
 801b59e:	f7ff bad1 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
 801b5a2:	7858      	ldrb	r0, [r3, #1]
 801b5a4:	f003 fbab 	bl	801ecfe <mbedtls_ssl_pk_alg_from_sig>
 801b5a8:	4682      	mov	sl, r0
 801b5aa:	b938      	cbnz	r0, 801b5bc <mbedtls_ssl_handshake_client_step+0xaf4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used unsupported "
 801b5ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5ae:	785b      	ldrb	r3, [r3, #1]
 801b5b0:	9301      	str	r3, [sp, #4]
 801b5b2:	4b53      	ldr	r3, [pc, #332]	; (801b700 <mbedtls_ssl_handshake_client_step+0xc38>)
 801b5b4:	9300      	str	r3, [sp, #0]
 801b5b6:	f640 038f 	movw	r3, #2191	; 0x88f
 801b5ba:	e7dc      	b.n	801b576 <mbedtls_ssl_handshake_client_step+0xaae>
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
 801b5bc:	4641      	mov	r1, r8
 801b5be:	4620      	mov	r0, r4
 801b5c0:	f003 fbca 	bl	801ed58 <mbedtls_ssl_check_sig_hash>
 801b5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5c6:	b130      	cbz	r0, 801b5d6 <mbedtls_ssl_handshake_client_step+0xb0e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b5c8:	781b      	ldrb	r3, [r3, #0]
 801b5ca:	9301      	str	r3, [sp, #4]
 801b5cc:	4b4d      	ldr	r3, [pc, #308]	; (801b704 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b5ce:	9300      	str	r3, [sp, #0]
 801b5d0:	f640 0399 	movw	r3, #2201	; 0x899
 801b5d4:	e7cf      	b.n	801b576 <mbedtls_ssl_handshake_client_step+0xaae>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
 801b5d6:	785b      	ldrb	r3, [r3, #1]
 801b5d8:	9301      	str	r3, [sp, #4]
 801b5da:	4b4b      	ldr	r3, [pc, #300]	; (801b708 <mbedtls_ssl_handshake_client_step+0xc40>)
 801b5dc:	9300      	str	r3, [sp, #0]
 801b5de:	4a3f      	ldr	r2, [pc, #252]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b5e0:	f640 039d 	movw	r3, #2205	; 0x89d
 801b5e4:	2102      	movs	r1, #2
 801b5e6:	4620      	mov	r0, r4
 801b5e8:	f7f5 f822 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
 801b5ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5ee:	4a3b      	ldr	r2, [pc, #236]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b5f0:	781b      	ldrb	r3, [r3, #0]
 801b5f2:	9301      	str	r3, [sp, #4]
 801b5f4:	4b45      	ldr	r3, [pc, #276]	; (801b70c <mbedtls_ssl_handshake_client_step+0xc44>)
 801b5f6:	9300      	str	r3, [sp, #0]
 801b5f8:	2102      	movs	r1, #2
 801b5fa:	f640 039e 	movw	r3, #2206	; 0x89e
 801b5fe:	4620      	mov	r0, r4
 801b600:	f7f5 f816 	bl	8010630 <mbedtls_debug_print_msg>
    *p += 2;
 801b604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b606:	4638      	mov	r0, r7
    *p += 2;
 801b608:	3302      	adds	r3, #2
 801b60a:	930c      	str	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b60c:	f7fe fd7c 	bl	801a108 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
 801b610:	4550      	cmp	r0, sl
 801b612:	d017      	beq.n	801b644 <mbedtls_ssl_handshake_client_step+0xb7c>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b614:	4b2d      	ldr	r3, [pc, #180]	; (801b6cc <mbedtls_ssl_handshake_client_step+0xc04>)
 801b616:	9300      	str	r3, [sp, #0]
 801b618:	f640 138d 	movw	r3, #2445	; 0x98d
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b61c:	4a2f      	ldr	r2, [pc, #188]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b61e:	2101      	movs	r1, #1
 801b620:	4620      	mov	r0, r4
 801b622:	f7f5 f805 	bl	8010630 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b626:	222f      	movs	r2, #47	; 0x2f
 801b628:	e01f      	b.n	801b66a <mbedtls_ssl_handshake_client_step+0xba2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b62a:	4b2f      	ldr	r3, [pc, #188]	; (801b6e8 <mbedtls_ssl_handshake_client_step+0xc20>)
 801b62c:	9300      	str	r3, [sp, #0]
 801b62e:	4a2b      	ldr	r2, [pc, #172]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b630:	4e32      	ldr	r6, [pc, #200]	; (801b6fc <mbedtls_ssl_handshake_client_step+0xc34>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b632:	f640 13a2 	movw	r3, #2466	; 0x9a2
 801b636:	2101      	movs	r1, #1
 801b638:	4620      	mov	r0, r4
 801b63a:	f7f4 fff9 	bl	8010630 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b63e:	4635      	mov	r5, r6
 801b640:	f7ff ba80 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
        sig_len = ( p[0] << 8 ) | p[1];
 801b644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b646:	f833 7b02 	ldrh.w	r7, [r3], #2
        p += 2;
 801b64a:	930c      	str	r3, [sp, #48]	; 0x30
        sig_len = ( p[0] << 8 ) | p[1];
 801b64c:	ba7f      	rev16	r7, r7
 801b64e:	b2bf      	uxth	r7, r7
        if( end != p + sig_len )
 801b650:	19da      	adds	r2, r3, r7
 801b652:	4296      	cmp	r6, r2
 801b654:	d00f      	beq.n	801b676 <mbedtls_ssl_handshake_client_step+0xbae>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b656:	4b1d      	ldr	r3, [pc, #116]	; (801b6cc <mbedtls_ssl_handshake_client_step+0xc04>)
 801b658:	9300      	str	r3, [sp, #0]
 801b65a:	4a20      	ldr	r2, [pc, #128]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b65c:	f640 13ae 	movw	r3, #2478	; 0x9ae
 801b660:	2101      	movs	r1, #1
 801b662:	4620      	mov	r0, r4
 801b664:	f7f4 ffe4 	bl	8010630 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b668:	2232      	movs	r2, #50	; 0x32
 801b66a:	2102      	movs	r1, #2
 801b66c:	4620      	mov	r0, r4
 801b66e:	f001 fe27 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b672:	4e1c      	ldr	r6, [pc, #112]	; (801b6e4 <mbedtls_ssl_handshake_client_step+0xc1c>)
 801b674:	e7e3      	b.n	801b63e <mbedtls_ssl_handshake_client_step+0xb76>
        MBEDTLS_SSL_DEBUG_BUF( 3, "signature", p, sig_len );
 801b676:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801b67a:	4b25      	ldr	r3, [pc, #148]	; (801b710 <mbedtls_ssl_handshake_client_step+0xc48>)
 801b67c:	4a17      	ldr	r2, [pc, #92]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b67e:	9300      	str	r3, [sp, #0]
 801b680:	2103      	movs	r1, #3
 801b682:	f640 13b4 	movw	r3, #2484	; 0x9b4
 801b686:	4620      	mov	r0, r4
 801b688:	f7f5 f830 	bl	80106ec <mbedtls_debug_print_buf>
            mbedtls_md_init( &ctx );
 801b68c:	a80d      	add	r0, sp, #52	; 0x34
 801b68e:	f7f8 ff01 	bl	8014494 <mbedtls_md_init>
            if( ( ret = mbedtls_md_setup( &ctx,
 801b692:	4640      	mov	r0, r8
 801b694:	f7f8 fef2 	bl	801447c <mbedtls_md_info_from_type>
 801b698:	2200      	movs	r2, #0
 801b69a:	4601      	mov	r1, r0
 801b69c:	a80d      	add	r0, sp, #52	; 0x34
 801b69e:	f7f8 ff23 	bl	80144e8 <mbedtls_md_setup>
 801b6a2:	4606      	mov	r6, r0
 801b6a4:	b3c0      	cbz	r0, 801b718 <mbedtls_ssl_handshake_client_step+0xc50>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801b6a6:	4b1b      	ldr	r3, [pc, #108]	; (801b714 <mbedtls_ssl_handshake_client_step+0xc4c>)
 801b6a8:	9001      	str	r0, [sp, #4]
 801b6aa:	9300      	str	r3, [sp, #0]
 801b6ac:	4620      	mov	r0, r4
 801b6ae:	f640 13f7 	movw	r3, #2551	; 0x9f7
 801b6b2:	4a0a      	ldr	r2, [pc, #40]	; (801b6dc <mbedtls_ssl_handshake_client_step+0xc14>)
 801b6b4:	2101      	movs	r1, #1
 801b6b6:	f7f4 ffeb 	bl	8010690 <mbedtls_debug_print_ret>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b6ba:	2250      	movs	r2, #80	; 0x50
 801b6bc:	2102      	movs	r1, #2
 801b6be:	4620      	mov	r0, r4
 801b6c0:	f001 fdfe 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801b6c4:	e7bb      	b.n	801b63e <mbedtls_ssl_handshake_client_step+0xb76>
 801b6c6:	bf00      	nop
 801b6c8:	08030dab 	.word	0x08030dab
 801b6cc:	08031381 	.word	0x08031381
 801b6d0:	0803155e 	.word	0x0803155e
 801b6d4:	080313a1 	.word	0x080313a1
 801b6d8:	08031567 	.word	0x08031567
 801b6dc:	080308d8 	.word	0x080308d8
 801b6e0:	080313d1 	.word	0x080313d1
 801b6e4:	ffff8500 	.word	0xffff8500
 801b6e8:	080313ea 	.word	0x080313ea
 801b6ec:	08031416 	.word	0x08031416
 801b6f0:	080313fe 	.word	0x080313fe
 801b6f4:	0803140d 	.word	0x0803140d
 801b6f8:	08031444 	.word	0x08031444
 801b6fc:	ffff9400 	.word	0xffff9400
 801b700:	0803146d 	.word	0x0803146d
 801b704:	0803149b 	.word	0x0803149b
 801b708:	080314cd 	.word	0x080314cd
 801b70c:	080314ef 	.word	0x080314ef
 801b710:	0803150c 	.word	0x0803150c
 801b714:	08031516 	.word	0x08031516
            mbedtls_md_starts( &ctx );
 801b718:	a80d      	add	r0, sp, #52	; 0x34
 801b71a:	f7f8 ff07 	bl	801452c <mbedtls_md_starts>
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b71e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b720:	f109 0904 	add.w	r9, r9, #4
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b724:	2240      	movs	r2, #64	; 0x40
 801b726:	f501 712b 	add.w	r1, r1, #684	; 0x2ac
 801b72a:	a80d      	add	r0, sp, #52	; 0x34
 801b72c:	f7f8 ff0c 	bl	8014548 <mbedtls_md_update>
            mbedtls_md_update( &ctx, params, params_len );
 801b730:	ebab 0209 	sub.w	r2, fp, r9
 801b734:	4649      	mov	r1, r9
 801b736:	a80d      	add	r0, sp, #52	; 0x34
            mbedtls_md_finish( &ctx, hash );
 801b738:	f10d 0940 	add.w	r9, sp, #64	; 0x40
            mbedtls_md_update( &ctx, params, params_len );
 801b73c:	f7f8 ff04 	bl	8014548 <mbedtls_md_update>
            mbedtls_md_finish( &ctx, hash );
 801b740:	4649      	mov	r1, r9
 801b742:	a80d      	add	r0, sp, #52	; 0x34
 801b744:	f7f8 ff0e 	bl	8014564 <mbedtls_md_finish>
            mbedtls_md_free( &ctx );
 801b748:	a80d      	add	r0, sp, #52	; 0x34
 801b74a:	f7f8 fea9 	bl	80144a0 <mbedtls_md_free>
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen != 0 ? hashlen :
 801b74e:	4640      	mov	r0, r8
 801b750:	f7f8 fe94 	bl	801447c <mbedtls_md_info_from_type>
 801b754:	f7f8 ffe2 	bl	801471c <mbedtls_md_get_size>
 801b758:	4ba4      	ldr	r3, [pc, #656]	; (801b9ec <mbedtls_ssl_handshake_client_step+0xf24>)
 801b75a:	9300      	str	r3, [sp, #0]
 801b75c:	e9cd 9001 	strd	r9, r0, [sp, #4]
 801b760:	f640 230c 	movw	r3, #2572	; 0xa0c
 801b764:	4620      	mov	r0, r4
 801b766:	4aa2      	ldr	r2, [pc, #648]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
 801b768:	2103      	movs	r1, #3
 801b76a:	f7f4 ffbf 	bl	80106ec <mbedtls_debug_print_buf>
        if( ssl->session_negotiate->peer_cert == NULL )
 801b76e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b770:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b772:	b978      	cbnz	r0, 801b794 <mbedtls_ssl_handshake_client_step+0xccc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801b774:	4b9f      	ldr	r3, [pc, #636]	; (801b9f4 <mbedtls_ssl_handshake_client_step+0xf2c>)
 801b776:	9300      	str	r3, [sp, #0]
 801b778:	4a9d      	ldr	r2, [pc, #628]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801b77a:	4e9f      	ldr	r6, [pc, #636]	; (801b9f8 <mbedtls_ssl_handshake_client_step+0xf30>)
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801b77c:	f44f 6321 	mov.w	r3, #2576	; 0xa10
 801b780:	2102      	movs	r1, #2
 801b782:	4620      	mov	r0, r4
 801b784:	f7f4 ff54 	bl	8010630 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b788:	2228      	movs	r2, #40	; 0x28
 801b78a:	2102      	movs	r1, #2
 801b78c:	4620      	mov	r0, r4
 801b78e:	f001 fd97 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801b792:	e754      	b.n	801b63e <mbedtls_ssl_handshake_client_step+0xb76>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
 801b794:	4651      	mov	r1, sl
 801b796:	30bc      	adds	r0, #188	; 0xbc
 801b798:	f7f9 ff98 	bl	80156cc <mbedtls_pk_can_do>
 801b79c:	b978      	cbnz	r0, 801b7be <mbedtls_ssl_handshake_client_step+0xcf6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b79e:	4b97      	ldr	r3, [pc, #604]	; (801b9fc <mbedtls_ssl_handshake_client_step+0xf34>)
 801b7a0:	9300      	str	r3, [sp, #0]
 801b7a2:	4a93      	ldr	r2, [pc, #588]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801b7a4:	4e96      	ldr	r6, [pc, #600]	; (801ba00 <mbedtls_ssl_handshake_client_step+0xf38>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b7a6:	f640 231b 	movw	r3, #2587	; 0xa1b
 801b7aa:	2101      	movs	r1, #1
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	f7f4 ff3f 	bl	8010630 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b7b2:	2228      	movs	r2, #40	; 0x28
 801b7b4:	2102      	movs	r1, #2
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	f001 fd82 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801b7bc:	e73f      	b.n	801b63e <mbedtls_ssl_handshake_client_step+0xb76>
        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,
 801b7be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b7c0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7c4:	9300      	str	r3, [sp, #0]
 801b7c6:	9701      	str	r7, [sp, #4]
 801b7c8:	4633      	mov	r3, r6
 801b7ca:	464a      	mov	r2, r9
 801b7cc:	4641      	mov	r1, r8
 801b7ce:	30bc      	adds	r0, #188	; 0xbc
 801b7d0:	f7f9 ff84 	bl	80156dc <mbedtls_pk_verify>
 801b7d4:	4606      	mov	r6, r0
 801b7d6:	2800      	cmp	r0, #0
 801b7d8:	f43f ae33 	beq.w	801b442 <mbedtls_ssl_handshake_client_step+0x97a>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b7dc:	2233      	movs	r2, #51	; 0x33
 801b7de:	2102      	movs	r1, #2
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	f001 fd6d 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_verify", ret );
 801b7e6:	4b87      	ldr	r3, [pc, #540]	; (801ba04 <mbedtls_ssl_handshake_client_step+0xf3c>)
 801b7e8:	9300      	str	r3, [sp, #0]
 801b7ea:	9601      	str	r6, [sp, #4]
 801b7ec:	f640 2326 	movw	r3, #2598	; 0xa26
 801b7f0:	4a7f      	ldr	r2, [pc, #508]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
 801b7f2:	2101      	movs	r1, #1
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	f7f4 ff4b 	bl	8010690 <mbedtls_debug_print_ret>
 801b7fa:	e720      	b.n	801b63e <mbedtls_ssl_handshake_client_step+0xb76>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b7fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b7fe:	4a7c      	ldr	r2, [pc, #496]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b800:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b802:	4b81      	ldr	r3, [pc, #516]	; (801ba08 <mbedtls_ssl_handshake_client_step+0xf40>)
 801b804:	9300      	str	r3, [sp, #0]
 801b806:	2102      	movs	r1, #2
 801b808:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 801b80c:	4620      	mov	r0, r4
 801b80e:	f7f4 ff0f 	bl	8010630 <mbedtls_debug_print_msg>
 801b812:	7ab3      	ldrb	r3, [r6, #10]
 801b814:	3b01      	subs	r3, #1
 801b816:	b2db      	uxtb	r3, r3
 801b818:	2b09      	cmp	r3, #9
 801b81a:	d806      	bhi.n	801b82a <mbedtls_ssl_handshake_client_step+0xd62>
 801b81c:	2701      	movs	r7, #1
 801b81e:	fa07 f303 	lsl.w	r3, r7, r3
 801b822:	f240 320f 	movw	r2, #783	; 0x30f
 801b826:	4213      	tst	r3, r2
 801b828:	d104      	bne.n	801b834 <mbedtls_ssl_handshake_client_step+0xd6c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 801b82a:	4b78      	ldr	r3, [pc, #480]	; (801ba0c <mbedtls_ssl_handshake_client_step+0xf44>)
 801b82c:	9300      	str	r3, [sp, #0]
 801b82e:	f640 2354 	movw	r3, #2644	; 0xa54
 801b832:	e5ae      	b.n	801b392 <mbedtls_ssl_handshake_client_step+0x8ca>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b834:	4620      	mov	r0, r4
 801b836:	f002 f961 	bl	801dafc <mbedtls_ssl_read_record>
 801b83a:	4605      	mov	r5, r0
 801b83c:	b130      	cbz	r0, 801b84c <mbedtls_ssl_handshake_client_step+0xd84>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b83e:	4b74      	ldr	r3, [pc, #464]	; (801ba10 <mbedtls_ssl_handshake_client_step+0xf48>)
 801b840:	9300      	str	r3, [sp, #0]
 801b842:	9001      	str	r0, [sp, #4]
 801b844:	f640 235b 	movw	r3, #2651	; 0xa5b
 801b848:	f7ff b999 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b84c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b84e:	2b16      	cmp	r3, #22
 801b850:	d005      	beq.n	801b85e <mbedtls_ssl_handshake_client_step+0xd96>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b852:	4b70      	ldr	r3, [pc, #448]	; (801ba14 <mbedtls_ssl_handshake_client_step+0xf4c>)
 801b854:	9300      	str	r3, [sp, #0]
 801b856:	f640 2361 	movw	r3, #2657	; 0xa61
 801b85a:	f7ff b9c0 	b.w	801abde <mbedtls_ssl_handshake_client_step+0x116>
    ssl->state++;
 801b85e:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801b860:	4a6d      	ldr	r2, [pc, #436]	; (801ba18 <mbedtls_ssl_handshake_client_step+0xf50>)
    ssl->state++;
 801b862:	3301      	adds	r3, #1
 801b864:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 801b866:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b868:	781b      	ldrb	r3, [r3, #0]
 801b86a:	2b0d      	cmp	r3, #13
 801b86c:	bf0c      	ite	eq
 801b86e:	2301      	moveq	r3, #1
 801b870:	2300      	movne	r3, #0
 801b872:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801b876:	4b69      	ldr	r3, [pc, #420]	; (801ba1c <mbedtls_ssl_handshake_client_step+0xf54>)
 801b878:	bf08      	it	eq
 801b87a:	4613      	moveq	r3, r2
 801b87c:	9301      	str	r3, [sp, #4]
 801b87e:	4b68      	ldr	r3, [pc, #416]	; (801ba20 <mbedtls_ssl_handshake_client_step+0xf58>)
 801b880:	9300      	str	r3, [sp, #0]
 801b882:	4a5b      	ldr	r2, [pc, #364]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
 801b884:	f640 236b 	movw	r3, #2667	; 0xa6b
 801b888:	2103      	movs	r1, #3
 801b88a:	4620      	mov	r0, r4
 801b88c:	f7f4 fed0 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 801b890:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801b894:	b933      	cbnz	r3, 801b8a4 <mbedtls_ssl_handshake_client_step+0xddc>
        ssl->keep_current_message = 1;
 801b896:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 801b89a:	4b62      	ldr	r3, [pc, #392]	; (801ba24 <mbedtls_ssl_handshake_client_step+0xf5c>)
 801b89c:	9300      	str	r3, [sp, #0]
 801b89e:	f640 23c5 	movw	r3, #2757	; 0xac5
 801b8a2:	e556      	b.n	801b352 <mbedtls_ssl_handshake_client_step+0x88a>
    buf = ssl->in_msg;
 801b8a4:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b8a8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 801b8ac:	f898 6004 	ldrb.w	r6, [r8, #4]
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b8b0:	1db3      	adds	r3, r6, #6
 801b8b2:	429a      	cmp	r2, r3
 801b8b4:	d210      	bcs.n	801b8d8 <mbedtls_ssl_handshake_client_step+0xe10>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b8b6:	4b57      	ldr	r3, [pc, #348]	; (801ba14 <mbedtls_ssl_handshake_client_step+0xf4c>)
 801b8b8:	9300      	str	r3, [sp, #0]
 801b8ba:	f640 2394 	movw	r3, #2708	; 0xa94
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b8be:	4a4c      	ldr	r2, [pc, #304]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801b8c0:	4d59      	ldr	r5, [pc, #356]	; (801ba28 <mbedtls_ssl_handshake_client_step+0xf60>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b8c2:	2101      	movs	r1, #1
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	f7f4 feb3 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b8ca:	2232      	movs	r2, #50	; 0x32
 801b8cc:	2102      	movs	r1, #2
 801b8ce:	4620      	mov	r0, r4
 801b8d0:	f001 fcf6 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801b8d4:	f7ff b936 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801b8d8:	6962      	ldr	r2, [r4, #20]
 801b8da:	2a03      	cmp	r2, #3
 801b8dc:	d12d      	bne.n	801b93a <mbedtls_ssl_handshake_client_step+0xe72>
 801b8de:	eb08 0206 	add.w	r2, r8, r6
 801b8e2:	f818 7003 	ldrb.w	r7, [r8, r3]
 801b8e6:	7952      	ldrb	r2, [r2, #5]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801b8e8:	f8df b104 	ldr.w	fp, [pc, #260]	; 801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 801b8ec:	f106 0a07 	add.w	sl, r6, #7
 801b8f0:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 801b8f4:	44c2      	add	sl, r8
        for( i = 0; i < sig_alg_len; i += 2 )
 801b8f6:	46a9      	mov	r9, r5
 801b8f8:	45b9      	cmp	r9, r7
 801b8fa:	d30b      	bcc.n	801b914 <mbedtls_ssl_handshake_client_step+0xe4c>
        n += 2 + sig_alg_len;
 801b8fc:	4437      	add	r7, r6
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b8fe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        n += 2 + sig_alg_len;
 801b902:	1cbe      	adds	r6, r7, #2
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b904:	3708      	adds	r7, #8
 801b906:	42bb      	cmp	r3, r7
 801b908:	d217      	bcs.n	801b93a <mbedtls_ssl_handshake_client_step+0xe72>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b90a:	4b42      	ldr	r3, [pc, #264]	; (801ba14 <mbedtls_ssl_handshake_client_step+0xf4c>)
 801b90c:	9300      	str	r3, [sp, #0]
 801b90e:	f640 23af 	movw	r3, #2735	; 0xaaf
 801b912:	e7d4      	b.n	801b8be <mbedtls_ssl_handshake_client_step+0xdf6>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801b914:	eb0a 0309 	add.w	r3, sl, r9
 801b918:	465a      	mov	r2, fp
 801b91a:	785b      	ldrb	r3, [r3, #1]
 801b91c:	9302      	str	r3, [sp, #8]
 801b91e:	f81a 3009 	ldrb.w	r3, [sl, r9]
 801b922:	9301      	str	r3, [sp, #4]
 801b924:	4b41      	ldr	r3, [pc, #260]	; (801ba2c <mbedtls_ssl_handshake_client_step+0xf64>)
 801b926:	9300      	str	r3, [sp, #0]
 801b928:	2103      	movs	r1, #3
 801b92a:	f640 23a7 	movw	r3, #2727	; 0xaa7
 801b92e:	4620      	mov	r0, r4
 801b930:	f7f4 fe7e 	bl	8010630 <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 801b934:	f109 0902 	add.w	r9, r9, #2
 801b938:	e7de      	b.n	801b8f8 <mbedtls_ssl_handshake_client_step+0xe30>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801b93a:	44b0      	add	r8, r6
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801b93c:	3607      	adds	r6, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801b93e:	f898 2005 	ldrb.w	r2, [r8, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 801b942:	f898 3006 	ldrb.w	r3, [r8, #6]
 801b946:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801b94a:	441e      	add	r6, r3
 801b94c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801b950:	42b3      	cmp	r3, r6
 801b952:	d0a2      	beq.n	801b89a <mbedtls_ssl_handshake_client_step+0xdd2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b954:	4b2f      	ldr	r3, [pc, #188]	; (801ba14 <mbedtls_ssl_handshake_client_step+0xf4c>)
 801b956:	9300      	str	r3, [sp, #0]
 801b958:	f640 23be 	movw	r3, #2750	; 0xabe
 801b95c:	e7af      	b.n	801b8be <mbedtls_ssl_handshake_client_step+0xdf6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 801b95e:	4b34      	ldr	r3, [pc, #208]	; (801ba30 <mbedtls_ssl_handshake_client_step+0xf68>)
 801b960:	9300      	str	r3, [sp, #0]
 801b962:	4a23      	ldr	r2, [pc, #140]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
 801b964:	f640 23cf 	movw	r3, #2767	; 0xacf
 801b968:	2102      	movs	r1, #2
 801b96a:	4620      	mov	r0, r4
 801b96c:	f7f4 fe60 	bl	8010630 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b970:	4620      	mov	r0, r4
 801b972:	f002 f8c3 	bl	801dafc <mbedtls_ssl_read_record>
 801b976:	4605      	mov	r5, r0
 801b978:	b130      	cbz	r0, 801b988 <mbedtls_ssl_handshake_client_step+0xec0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b97a:	4b25      	ldr	r3, [pc, #148]	; (801ba10 <mbedtls_ssl_handshake_client_step+0xf48>)
 801b97c:	9300      	str	r3, [sp, #0]
 801b97e:	9001      	str	r0, [sp, #4]
 801b980:	f640 23d3 	movw	r3, #2771	; 0xad3
 801b984:	f7ff b8fb 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b988:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b98a:	2b16      	cmp	r3, #22
 801b98c:	d007      	beq.n	801b99e <mbedtls_ssl_handshake_client_step+0xed6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801b98e:	4b29      	ldr	r3, [pc, #164]	; (801ba34 <mbedtls_ssl_handshake_client_step+0xf6c>)
 801b990:	9300      	str	r3, [sp, #0]
 801b992:	4a17      	ldr	r2, [pc, #92]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
 801b994:	f640 23d9 	movw	r3, #2777	; 0xad9
 801b998:	2101      	movs	r1, #1
 801b99a:	f7ff b90a 	b.w	801abb2 <mbedtls_ssl_handshake_client_step+0xea>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801b99e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801b9a2:	2b04      	cmp	r3, #4
 801b9a4:	d103      	bne.n	801b9ae <mbedtls_ssl_handshake_client_step+0xee6>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 801b9a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801b9a8:	781b      	ldrb	r3, [r3, #0]
 801b9aa:	2b0e      	cmp	r3, #14
 801b9ac:	d010      	beq.n	801b9d0 <mbedtls_ssl_handshake_client_step+0xf08>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801b9ae:	4b21      	ldr	r3, [pc, #132]	; (801ba34 <mbedtls_ssl_handshake_client_step+0xf6c>)
 801b9b0:	9300      	str	r3, [sp, #0]
 801b9b2:	4a0f      	ldr	r2, [pc, #60]	; (801b9f0 <mbedtls_ssl_handshake_client_step+0xf28>)
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 801b9b4:	4d20      	ldr	r5, [pc, #128]	; (801ba38 <mbedtls_ssl_handshake_client_step+0xf70>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801b9b6:	f44f 632e 	mov.w	r3, #2784	; 0xae0
 801b9ba:	2101      	movs	r1, #1
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f7f4 fe37 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b9c2:	2232      	movs	r2, #50	; 0x32
 801b9c4:	2102      	movs	r1, #2
 801b9c6:	4620      	mov	r0, r4
 801b9c8:	f001 fc7a 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801b9cc:	f7ff b8ba 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    ssl->state++;
 801b9d0:	6863      	ldr	r3, [r4, #4]
 801b9d2:	3301      	adds	r3, #1
 801b9d4:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 801b9d6:	4b19      	ldr	r3, [pc, #100]	; (801ba3c <mbedtls_ssl_handshake_client_step+0xf74>)
 801b9d8:	9300      	str	r3, [sp, #0]
 801b9da:	f640 23ed 	movw	r3, #2797	; 0xaed
 801b9de:	e4b8      	b.n	801b352 <mbedtls_ssl_handshake_client_step+0x88a>
           ret = mbedtls_ssl_write_certificate( ssl );
 801b9e0:	4620      	mov	r0, r4
 801b9e2:	f002 f8e1 	bl	801dba8 <mbedtls_ssl_write_certificate>
 801b9e6:	f7ff b8b4 	b.w	801ab52 <mbedtls_ssl_handshake_client_step+0x8a>
 801b9ea:	bf00      	nop
 801b9ec:	08031527 	.word	0x08031527
 801b9f0:	080308d8 	.word	0x080308d8
 801b9f4:	08031537 	.word	0x08031537
 801b9f8:	ffff8900 	.word	0xffff8900
 801b9fc:	08031381 	.word	0x08031381
 801ba00:	ffff9300 	.word	0xffff9300
 801ba04:	0803154c 	.word	0x0803154c
 801ba08:	0803157b 	.word	0x0803157b
 801ba0c:	08031598 	.word	0x08031598
 801ba10:	08030dab 	.word	0x08030dab
 801ba14:	080315ba 	.word	0x080315ba
 801ba18:	08032414 	.word	0x08032414
 801ba1c:	08030d81 	.word	0x08030d81
 801ba20:	080315da 	.word	0x080315da
 801ba24:	08031620 	.word	0x08031620
 801ba28:	ffff8580 	.word	0xffff8580
 801ba2c:	080315f5 	.word	0x080315f5
 801ba30:	0803163d 	.word	0x0803163d
 801ba34:	08031658 	.word	0x08031658
 801ba38:	ffff8480 	.word	0xffff8480
 801ba3c:	08031676 	.word	0x08031676
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801ba40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801ba42:	4a9f      	ldr	r2, [pc, #636]	; (801bcc0 <mbedtls_ssl_handshake_client_step+0x11f8>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801ba44:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801ba46:	4b9f      	ldr	r3, [pc, #636]	; (801bcc4 <mbedtls_ssl_handshake_client_step+0x11fc>)
 801ba48:	9300      	str	r3, [sp, #0]
 801ba4a:	2102      	movs	r1, #2
 801ba4c:	f640 23f9 	movw	r3, #2809	; 0xaf9
 801ba50:	4620      	mov	r0, r4
 801ba52:	f7f4 fded 	bl	8010630 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801ba56:	7aae      	ldrb	r6, [r5, #10]
 801ba58:	1ef3      	subs	r3, r6, #3
 801ba5a:	2b01      	cmp	r3, #1
 801ba5c:	d903      	bls.n	801ba66 <mbedtls_ssl_handshake_client_step+0xf9e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
 801ba5e:	f1a6 0309 	sub.w	r3, r6, #9
 801ba62:	2b01      	cmp	r3, #1
 801ba64:	d863      	bhi.n	801bb2e <mbedtls_ssl_handshake_client_step+0x1066>
                                ssl->conf->f_rng, ssl->conf->p_rng );
 801ba66:	6823      	ldr	r3, [r4, #0]
        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
 801ba68:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801ba6c:	69d9      	ldr	r1, [r3, #28]
 801ba6e:	9101      	str	r1, [sp, #4]
 801ba70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801ba72:	699b      	ldr	r3, [r3, #24]
 801ba74:	9300      	str	r3, [sp, #0]
 801ba76:	3204      	adds	r2, #4
 801ba78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ba7c:	a910      	add	r1, sp, #64	; 0x40
 801ba7e:	3004      	adds	r0, #4
 801ba80:	f7f5 f856 	bl	8010b30 <mbedtls_ecdh_make_public>
        if( ret != 0 )
 801ba84:	4605      	mov	r5, r0
 801ba86:	b130      	cbz	r0, 801ba96 <mbedtls_ssl_handshake_client_step+0xfce>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_public", ret );
 801ba88:	4b8f      	ldr	r3, [pc, #572]	; (801bcc8 <mbedtls_ssl_handshake_client_step+0x1200>)
 801ba8a:	9300      	str	r3, [sp, #0]
 801ba8c:	9001      	str	r0, [sp, #4]
 801ba8e:	f640 3336 	movw	r3, #2870	; 0xb36
 801ba92:	f7ff b874 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
        MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Q", &ssl->handshake->ecdh_ctx.Q );
 801ba96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ba98:	4a89      	ldr	r2, [pc, #548]	; (801bcc0 <mbedtls_ssl_handshake_client_step+0x11f8>)
 801ba9a:	338c      	adds	r3, #140	; 0x8c
 801ba9c:	9301      	str	r3, [sp, #4]
 801ba9e:	4b8b      	ldr	r3, [pc, #556]	; (801bccc <mbedtls_ssl_handshake_client_step+0x1204>)
 801baa0:	9300      	str	r3, [sp, #0]
 801baa2:	2103      	movs	r1, #3
 801baa4:	f640 333a 	movw	r3, #2874	; 0xb3a
 801baa8:	4620      	mov	r0, r4
 801baaa:	f7f4 ff01 	bl	80108b0 <mbedtls_debug_print_ecp>
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801baae:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 801bab0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bab2:	69da      	ldr	r2, [r3, #28]
 801bab4:	9201      	str	r2, [sp, #4]
 801bab6:	699b      	ldr	r3, [r3, #24]
 801bab8:	9300      	str	r3, [sp, #0]
 801baba:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 801babe:	f500 712a 	add.w	r1, r0, #680	; 0x2a8
 801bac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bac6:	3004      	adds	r0, #4
 801bac8:	f7f5 f858 	bl	8010b7c <mbedtls_ecdh_calc_secret>
 801bacc:	4605      	mov	r5, r0
 801bace:	b130      	cbz	r0, 801bade <mbedtls_ssl_handshake_client_step+0x1016>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
 801bad0:	4b7f      	ldr	r3, [pc, #508]	; (801bcd0 <mbedtls_ssl_handshake_client_step+0x1208>)
 801bad2:	9300      	str	r3, [sp, #0]
 801bad4:	9001      	str	r0, [sp, #4]
 801bad6:	f640 3342 	movw	r3, #2882	; 0xb42
 801bada:	f7ff b850 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
        MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z", &ssl->handshake->ecdh_ctx.z );
 801bade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bae0:	4a77      	ldr	r2, [pc, #476]	; (801bcc0 <mbedtls_ssl_handshake_client_step+0x11f8>)
 801bae2:	33d4      	adds	r3, #212	; 0xd4
 801bae4:	9301      	str	r3, [sp, #4]
 801bae6:	4b7b      	ldr	r3, [pc, #492]	; (801bcd4 <mbedtls_ssl_handshake_client_step+0x120c>)
 801bae8:	9300      	str	r3, [sp, #0]
 801baea:	2103      	movs	r1, #3
 801baec:	f640 3346 	movw	r3, #2886	; 0xb46
 801baf0:	4620      	mov	r0, r4
 801baf2:	f7f4 fe99 	bl	8010828 <mbedtls_debug_print_mpi>
    ssl->out_msglen  = i + n;
 801baf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801baf8:	3304      	adds	r3, #4
 801bafa:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801bafe:	2316      	movs	r3, #22
 801bb00:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 801bb04:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bb08:	2210      	movs	r2, #16
 801bb0a:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801bb0c:	6863      	ldr	r3, [r4, #4]
 801bb0e:	3301      	adds	r3, #1
 801bb10:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801bb12:	4620      	mov	r0, r4
 801bb14:	f001 f896 	bl	801cc44 <mbedtls_ssl_write_record>
 801bb18:	4605      	mov	r5, r0
 801bb1a:	2800      	cmp	r0, #0
 801bb1c:	f000 8082 	beq.w	801bc24 <mbedtls_ssl_handshake_client_step+0x115c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801bb20:	4b6d      	ldr	r3, [pc, #436]	; (801bcd8 <mbedtls_ssl_handshake_client_step+0x1210>)
 801bb22:	9300      	str	r3, [sp, #0]
 801bb24:	9001      	str	r0, [sp, #4]
 801bb26:	f640 33e7 	movw	r3, #3047	; 0xbe7
 801bb2a:	f7ff b828 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801bb2e:	2e01      	cmp	r6, #1
 801bb30:	d173      	bne.n	801bc1a <mbedtls_ssl_handshake_client_step+0x1152>
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bb32:	6820      	ldr	r0, [r4, #0]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801bb34:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bb36:	6963      	ldr	r3, [r4, #20]
                       ssl->conf->transport, p );
 801bb38:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bb3c:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 801bb40:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801bb44:	f505 783b 	add.w	r8, r5, #748	; 0x2ec
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bb48:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bb4a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801bb4e:	4643      	mov	r3, r8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bb50:	bf14      	ite	ne
 801bb52:	2702      	movne	r7, #2
 801bb54:	2700      	moveq	r7, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bb56:	f003 fb6d 	bl	801f234 <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 801bb5a:	6823      	ldr	r3, [r4, #0]
 801bb5c:	f205 21ee 	addw	r1, r5, #750	; 0x2ee
 801bb60:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801bb64:	69d8      	ldr	r0, [r3, #28]
 801bb66:	222e      	movs	r2, #46	; 0x2e
 801bb68:	47c8      	blx	r9
 801bb6a:	4605      	mov	r5, r0
 801bb6c:	b130      	cbz	r0, 801bb7c <mbedtls_ssl_handshake_client_step+0x10b4>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 801bb6e:	4b5b      	ldr	r3, [pc, #364]	; (801bcdc <mbedtls_ssl_handshake_client_step+0x1214>)
 801bb70:	9300      	str	r3, [sp, #0]
 801bb72:	9001      	str	r0, [sp, #4]
 801bb74:	f640 0339 	movw	r3, #2105	; 0x839
 801bb78:	f7ff b801 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    ssl->handshake->pmslen = 48;
 801bb7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bb7e:	2230      	movs	r2, #48	; 0x30
 801bb80:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    if( ssl->session_negotiate->peer_cert == NULL )
 801bb84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bb86:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801bb88:	b938      	cbnz	r0, 801bb9a <mbedtls_ssl_handshake_client_step+0x10d2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801bb8a:	4b55      	ldr	r3, [pc, #340]	; (801bce0 <mbedtls_ssl_handshake_client_step+0x1218>)
 801bb8c:	9300      	str	r3, [sp, #0]
 801bb8e:	4a4c      	ldr	r2, [pc, #304]	; (801bcc0 <mbedtls_ssl_handshake_client_step+0x11f8>)
 801bb90:	f640 0341 	movw	r3, #2113	; 0x841
 801bb94:	2102      	movs	r1, #2
 801bb96:	f7ff b80c 	b.w	801abb2 <mbedtls_ssl_handshake_client_step+0xea>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 801bb9a:	4631      	mov	r1, r6
 801bb9c:	30bc      	adds	r0, #188	; 0xbc
 801bb9e:	f7f9 fd95 	bl	80156cc <mbedtls_pk_can_do>
 801bba2:	b958      	cbnz	r0, 801bbbc <mbedtls_ssl_handshake_client_step+0x10f4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801bba4:	4b4f      	ldr	r3, [pc, #316]	; (801bce4 <mbedtls_ssl_handshake_client_step+0x121c>)
 801bba6:	9300      	str	r3, [sp, #0]
 801bba8:	4a45      	ldr	r2, [pc, #276]	; (801bcc0 <mbedtls_ssl_handshake_client_step+0x11f8>)
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801bbaa:	4d4f      	ldr	r5, [pc, #316]	; (801bce8 <mbedtls_ssl_handshake_client_step+0x1220>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801bbac:	f640 034b 	movw	r3, #2123	; 0x84b
 801bbb0:	4631      	mov	r1, r6
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	f7f4 fd3c 	bl	8010630 <mbedtls_debug_print_msg>
 801bbb8:	f7fe bfc4 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bbbc:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801bbbe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801bbc0:	69d5      	ldr	r5, [r2, #28]
 801bbc2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801bbc4:	9503      	str	r5, [sp, #12]
 801bbc6:	6995      	ldr	r5, [r2, #24]
 801bbc8:	9502      	str	r5, [sp, #8]
 801bbca:	f5c7 559c 	rsb	r5, r7, #4992	; 0x1380
 801bbce:	3504      	adds	r5, #4
 801bbd0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801bbd4:	9501      	str	r5, [sp, #4]
 801bbd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801bbd8:	ad10      	add	r5, sp, #64	; 0x40
 801bbda:	9500      	str	r5, [sp, #0]
    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801bbdc:	1d3b      	adds	r3, r7, #4
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801bbde:	440b      	add	r3, r1
 801bbe0:	f8d2 22a8 	ldr.w	r2, [r2, #680]	; 0x2a8
 801bbe4:	4641      	mov	r1, r8
 801bbe6:	30bc      	adds	r0, #188	; 0xbc
 801bbe8:	f7f9 fdd2 	bl	8015790 <mbedtls_pk_encrypt>
 801bbec:	4605      	mov	r5, r0
 801bbee:	b130      	cbz	r0, 801bbfe <mbedtls_ssl_handshake_client_step+0x1136>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 801bbf0:	4b3e      	ldr	r3, [pc, #248]	; (801bcec <mbedtls_ssl_handshake_client_step+0x1224>)
 801bbf2:	9300      	str	r3, [sp, #0]
 801bbf4:	9001      	str	r0, [sp, #4]
 801bbf6:	f640 0355 	movw	r3, #2133	; 0x855
 801bbfa:	f7fe bfc0 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    if( len_bytes == 2 )
 801bbfe:	2f00      	cmp	r7, #0
 801bc00:	f43f af79 	beq.w	801baf6 <mbedtls_ssl_handshake_client_step+0x102e>
 801bc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc06:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 801bc0a:	0a19      	lsrs	r1, r3, #8
 801bc0c:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 801bc0e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bc12:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 801bc14:	3302      	adds	r3, #2
 801bc16:	9310      	str	r3, [sp, #64]	; 0x40
 801bc18:	e76d      	b.n	801baf6 <mbedtls_ssl_handshake_client_step+0x102e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bc1a:	4b35      	ldr	r3, [pc, #212]	; (801bcf0 <mbedtls_ssl_handshake_client_step+0x1228>)
 801bc1c:	9300      	str	r3, [sp, #0]
 801bc1e:	f640 33db 	movw	r3, #3035	; 0xbdb
 801bc22:	e4b6      	b.n	801b592 <mbedtls_ssl_handshake_client_step+0xaca>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 801bc24:	4b33      	ldr	r3, [pc, #204]	; (801bcf4 <mbedtls_ssl_handshake_client_step+0x122c>)
 801bc26:	9300      	str	r3, [sp, #0]
 801bc28:	f640 33eb 	movw	r3, #3051	; 0xbeb
 801bc2c:	f7ff bb91 	b.w	801b352 <mbedtls_ssl_handshake_client_step+0x88a>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bc30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801bc32:	4a23      	ldr	r2, [pc, #140]	; (801bcc0 <mbedtls_ssl_handshake_client_step+0x11f8>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bc34:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 801bc36:	2300      	movs	r3, #0
 801bc38:	930d      	str	r3, [sp, #52]	; 0x34
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801bc3a:	4b2f      	ldr	r3, [pc, #188]	; (801bcf8 <mbedtls_ssl_handshake_client_step+0x1230>)
 801bc3c:	9300      	str	r3, [sp, #0]
 801bc3e:	2102      	movs	r1, #2
 801bc40:	f640 431e 	movw	r3, #3102	; 0xc1e
 801bc44:	4620      	mov	r0, r4
 801bc46:	f7f4 fcf3 	bl	8010630 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801bc4a:	4620      	mov	r0, r4
 801bc4c:	f000 fc1e 	bl	801c48c <mbedtls_ssl_derive_keys>
 801bc50:	4605      	mov	r5, r0
 801bc52:	b130      	cbz	r0, 801bc62 <mbedtls_ssl_handshake_client_step+0x119a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801bc54:	4b29      	ldr	r3, [pc, #164]	; (801bcfc <mbedtls_ssl_handshake_client_step+0x1234>)
 801bc56:	9300      	str	r3, [sp, #0]
 801bc58:	9001      	str	r0, [sp, #4]
 801bc5a:	f640 4322 	movw	r3, #3106	; 0xc22
 801bc5e:	f7fe bf8e 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801bc62:	7ab3      	ldrb	r3, [r6, #10]
 801bc64:	1f5a      	subs	r2, r3, #5
 801bc66:	2a03      	cmp	r2, #3
 801bc68:	d901      	bls.n	801bc6e <mbedtls_ssl_handshake_client_step+0x11a6>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 801bc6a:	2b0b      	cmp	r3, #11
 801bc6c:	d105      	bne.n	801bc7a <mbedtls_ssl_handshake_client_step+0x11b2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801bc6e:	4b24      	ldr	r3, [pc, #144]	; (801bd00 <mbedtls_ssl_handshake_client_step+0x1238>)
 801bc70:	9300      	str	r3, [sp, #0]
 801bc72:	f640 432c 	movw	r3, #3116	; 0xc2c
 801bc76:	f7ff bb8c 	b.w	801b392 <mbedtls_ssl_handshake_client_step+0x8ca>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 801bc7a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801bc7e:	b14b      	cbz	r3, 801bc94 <mbedtls_ssl_handshake_client_step+0x11cc>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801bc80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801bc82:	b112      	cbz	r2, 801bc8a <mbedtls_ssl_handshake_client_step+0x11c2>
 801bc84:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
 801bc88:	b913      	cbnz	r3, 801bc90 <mbedtls_ssl_handshake_client_step+0x11c8>
        key_cert = ssl->conf->key_cert;
 801bc8a:	6823      	ldr	r3, [r4, #0]
 801bc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801bc8e:	b10b      	cbz	r3, 801bc94 <mbedtls_ssl_handshake_client_step+0x11cc>
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	b92b      	cbnz	r3, 801bca0 <mbedtls_ssl_handshake_client_step+0x11d8>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801bc94:	4b1a      	ldr	r3, [pc, #104]	; (801bd00 <mbedtls_ssl_handshake_client_step+0x1238>)
 801bc96:	9300      	str	r3, [sp, #0]
 801bc98:	f640 4333 	movw	r3, #3123	; 0xc33
 801bc9c:	f7ff bb79 	b.w	801b392 <mbedtls_ssl_handshake_client_step+0x8ca>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 801bca0:	4620      	mov	r0, r4
 801bca2:	f7fe fa47 	bl	801a134 <mbedtls_ssl_own_key>
 801bca6:	bb88      	cbnz	r0, 801bd0c <mbedtls_ssl_handshake_client_step+0x1244>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801bca8:	4b16      	ldr	r3, [pc, #88]	; (801bd04 <mbedtls_ssl_handshake_client_step+0x123c>)
 801bcaa:	9300      	str	r3, [sp, #0]
 801bcac:	4a04      	ldr	r2, [pc, #16]	; (801bcc0 <mbedtls_ssl_handshake_client_step+0x11f8>)
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 801bcae:	4d16      	ldr	r5, [pc, #88]	; (801bd08 <mbedtls_ssl_handshake_client_step+0x1240>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801bcb0:	f640 433a 	movw	r3, #3130	; 0xc3a
 801bcb4:	2101      	movs	r1, #1
 801bcb6:	4620      	mov	r0, r4
 801bcb8:	f7f4 fcba 	bl	8010630 <mbedtls_debug_print_msg>
 801bcbc:	f7fe bf42 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
 801bcc0:	080308d8 	.word	0x080308d8
 801bcc4:	08031691 	.word	0x08031691
 801bcc8:	080316ae 	.word	0x080316ae
 801bccc:	080316c7 	.word	0x080316c7
 801bcd0:	080316cf 	.word	0x080316cf
 801bcd4:	080316e8 	.word	0x080316e8
 801bcd8:	08030d52 	.word	0x08030d52
 801bcdc:	080316f0 	.word	0x080316f0
 801bce0:	08031537 	.word	0x08031537
 801bce4:	080316f6 	.word	0x080316f6
 801bce8:	ffff9300 	.word	0xffff9300
 801bcec:	08031714 	.word	0x08031714
 801bcf0:	080313ea 	.word	0x080313ea
 801bcf4:	0803172e 	.word	0x0803172e
 801bcf8:	0803174b 	.word	0x0803174b
 801bcfc:	08030f51 	.word	0x08030f51
 801bd00:	08031767 	.word	0x08031767
 801bd04:	08031788 	.word	0x08031788
 801bd08:	ffff8a00 	.word	0xffff8a00
    ssl->handshake->calc_verify( ssl, hash );
 801bd0c:	f8d2 329c 	ldr.w	r3, [r2, #668]	; 0x29c
 801bd10:	a910      	add	r1, sp, #64	; 0x40
 801bd12:	4620      	mov	r0, r4
 801bd14:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801bd16:	6963      	ldr	r3, [r4, #20]
 801bd18:	2b03      	cmp	r3, #3
 801bd1a:	d130      	bne.n	801bd7e <mbedtls_ssl_handshake_client_step+0x12b6>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801bd1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801bd1e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bd22:	6812      	ldr	r2, [r2, #0]
 801bd24:	7a55      	ldrb	r5, [r2, #9]
 801bd26:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801bd28:	bf0b      	itete	eq
 801bd2a:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801bd2c:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801bd2e:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801bd30:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801bd32:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
 801bd34:	bf18      	it	ne
 801bd36:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801bd38:	f7fe f9fc 	bl	801a134 <mbedtls_ssl_own_key>
 801bd3c:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 801bd40:	f002 ffcc 	bl	801ecdc <mbedtls_ssl_sig_from_pk>
 801bd44:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801bd46:	4620      	mov	r0, r4
 801bd48:	f7fe f9f4 	bl	801a134 <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bd4c:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801bd4e:	69da      	ldr	r2, [r3, #28]
 801bd50:	9203      	str	r2, [sp, #12]
 801bd52:	699b      	ldr	r3, [r3, #24]
 801bd54:	9302      	str	r3, [sp, #8]
 801bd56:	ab0d      	add	r3, sp, #52	; 0x34
 801bd58:	9301      	str	r3, [sp, #4]
 801bd5a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bd5e:	3308      	adds	r3, #8
 801bd60:	9300      	str	r3, [sp, #0]
 801bd62:	4629      	mov	r1, r5
 801bd64:	2300      	movs	r3, #0
 801bd66:	aa10      	add	r2, sp, #64	; 0x40
 801bd68:	f7f9 fce2 	bl	8015730 <mbedtls_pk_sign>
 801bd6c:	4605      	mov	r5, r0
 801bd6e:	b158      	cbz	r0, 801bd88 <mbedtls_ssl_handshake_client_step+0x12c0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 801bd70:	4b82      	ldr	r3, [pc, #520]	; (801bf7c <mbedtls_ssl_handshake_client_step+0x14b4>)
 801bd72:	9300      	str	r3, [sp, #0]
 801bd74:	9001      	str	r0, [sp, #4]
 801bd76:	f640 4391 	movw	r3, #3217	; 0xc91
 801bd7a:	f7fe bf00 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bd7e:	4b80      	ldr	r3, [pc, #512]	; (801bf80 <mbedtls_ssl_handshake_client_step+0x14b8>)
 801bd80:	9300      	str	r3, [sp, #0]
 801bd82:	f640 4389 	movw	r3, #3209	; 0xc89
 801bd86:	e404      	b.n	801b592 <mbedtls_ssl_handshake_client_step+0xaca>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 801bd88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd8a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bd8e:	0a19      	lsrs	r1, r3, #8
 801bd90:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 801bd92:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bd96:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 801bd98:	3308      	adds	r3, #8
 801bd9a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801bd9e:	2316      	movs	r3, #22
 801bda0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 801bda4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bda8:	220f      	movs	r2, #15
 801bdaa:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801bdac:	6863      	ldr	r3, [r4, #4]
 801bdae:	3301      	adds	r3, #1
 801bdb0:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801bdb2:	4620      	mov	r0, r4
 801bdb4:	f000 ff46 	bl	801cc44 <mbedtls_ssl_write_record>
 801bdb8:	4605      	mov	r5, r0
 801bdba:	b130      	cbz	r0, 801bdca <mbedtls_ssl_handshake_client_step+0x1302>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801bdbc:	4b71      	ldr	r3, [pc, #452]	; (801bf84 <mbedtls_ssl_handshake_client_step+0x14bc>)
 801bdbe:	9300      	str	r3, [sp, #0]
 801bdc0:	9001      	str	r0, [sp, #4]
 801bdc2:	f44f 634a 	mov.w	r3, #3232	; 0xca0
 801bdc6:	f7fe beda 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 801bdca:	4b6f      	ldr	r3, [pc, #444]	; (801bf88 <mbedtls_ssl_handshake_client_step+0x14c0>)
 801bdcc:	9300      	str	r3, [sp, #0]
 801bdce:	f640 43a4 	movw	r3, #3236	; 0xca4
 801bdd2:	f7ff babe 	b.w	801b352 <mbedtls_ssl_handshake_client_step+0x88a>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 801bdd6:	4620      	mov	r0, r4
 801bdd8:	f001 ffb0 	bl	801dd3c <mbedtls_ssl_write_change_cipher_spec>
 801bddc:	f7fe beb9 	b.w	801ab52 <mbedtls_ssl_handshake_client_step+0x8a>
           ret = mbedtls_ssl_write_finished( ssl );
 801bde0:	4620      	mov	r0, r4
 801bde2:	f002 f86f 	bl	801dec4 <mbedtls_ssl_write_finished>
 801bde6:	f7fe beb4 	b.w	801ab52 <mbedtls_ssl_handshake_client_step+0x8a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );
 801bdea:	4b68      	ldr	r3, [pc, #416]	; (801bf8c <mbedtls_ssl_handshake_client_step+0x14c4>)
 801bdec:	9300      	str	r3, [sp, #0]
 801bdee:	4a68      	ldr	r2, [pc, #416]	; (801bf90 <mbedtls_ssl_handshake_client_step+0x14c8>)
 801bdf0:	f640 43b8 	movw	r3, #3256	; 0xcb8
 801bdf4:	2102      	movs	r1, #2
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	f7f4 fc1a 	bl	8010630 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f001 fe7d 	bl	801dafc <mbedtls_ssl_read_record>
 801be02:	4605      	mov	r5, r0
 801be04:	b130      	cbz	r0, 801be14 <mbedtls_ssl_handshake_client_step+0x134c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801be06:	4b63      	ldr	r3, [pc, #396]	; (801bf94 <mbedtls_ssl_handshake_client_step+0x14cc>)
 801be08:	9300      	str	r3, [sp, #0]
 801be0a:	9001      	str	r0, [sp, #4]
 801be0c:	f640 43bc 	movw	r3, #3260	; 0xcbc
 801be10:	f7fe beb5 	b.w	801ab7e <mbedtls_ssl_handshake_client_step+0xb6>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801be14:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801be16:	2b16      	cmp	r3, #22
 801be18:	d005      	beq.n	801be26 <mbedtls_ssl_handshake_client_step+0x135e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801be1a:	4b5f      	ldr	r3, [pc, #380]	; (801bf98 <mbedtls_ssl_handshake_client_step+0x14d0>)
 801be1c:	9300      	str	r3, [sp, #0]
 801be1e:	f640 43c2 	movw	r3, #3266	; 0xcc2
 801be22:	f7fe bedc 	b.w	801abde <mbedtls_ssl_handshake_client_step+0x116>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801be26:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 801be28:	783b      	ldrb	r3, [r7, #0]
 801be2a:	2b04      	cmp	r3, #4
 801be2c:	d103      	bne.n	801be36 <mbedtls_ssl_handshake_client_step+0x136e>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801be2e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801be32:	2b09      	cmp	r3, #9
 801be34:	d810      	bhi.n	801be58 <mbedtls_ssl_handshake_client_step+0x1390>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801be36:	4b58      	ldr	r3, [pc, #352]	; (801bf98 <mbedtls_ssl_handshake_client_step+0x14d0>)
 801be38:	9300      	str	r3, [sp, #0]
 801be3a:	f640 43d5 	movw	r3, #3285	; 0xcd5
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801be3e:	4a54      	ldr	r2, [pc, #336]	; (801bf90 <mbedtls_ssl_handshake_client_step+0x14c8>)
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 801be40:	4d56      	ldr	r5, [pc, #344]	; (801bf9c <mbedtls_ssl_handshake_client_step+0x14d4>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801be42:	2101      	movs	r1, #1
 801be44:	4620      	mov	r0, r4
 801be46:	f7f4 fbf3 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801be4a:	2232      	movs	r2, #50	; 0x32
 801be4c:	2102      	movs	r1, #2
 801be4e:	4620      	mov	r0, r4
 801be50:	f001 fa36 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801be54:	f7fe be76 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
 801be58:	893e      	ldrh	r6, [r7, #8]
 801be5a:	f8d7 9004 	ldr.w	r9, [r7, #4]
 801be5e:	ba76      	rev16	r6, r6
 801be60:	b2b6      	uxth	r6, r6
    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 801be62:	f106 020a 	add.w	r2, r6, #10
 801be66:	4293      	cmp	r3, r2
 801be68:	fa99 f989 	rev.w	r9, r9
 801be6c:	d004      	beq.n	801be78 <mbedtls_ssl_handshake_client_step+0x13b0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801be6e:	4b4a      	ldr	r3, [pc, #296]	; (801bf98 <mbedtls_ssl_handshake_client_step+0x14d0>)
 801be70:	9300      	str	r3, [sp, #0]
 801be72:	f640 43e4 	movw	r3, #3300	; 0xce4
 801be76:	e7e2      	b.n	801be3e <mbedtls_ssl_handshake_client_step+0x1376>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );
 801be78:	4b49      	ldr	r3, [pc, #292]	; (801bfa0 <mbedtls_ssl_handshake_client_step+0x14d8>)
 801be7a:	9300      	str	r3, [sp, #0]
 801be7c:	9601      	str	r6, [sp, #4]
 801be7e:	f640 43ea 	movw	r3, #3306	; 0xcea
 801be82:	4a43      	ldr	r2, [pc, #268]	; (801bf90 <mbedtls_ssl_handshake_client_step+0x14c8>)
 801be84:	2103      	movs	r1, #3
 801be86:	4620      	mov	r0, r4
 801be88:	f7f4 fbd2 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->handshake->new_session_ticket = 0;
 801be8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801be8e:	f8c3 5340 	str.w	r5, [r3, #832]	; 0x340
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801be92:	230c      	movs	r3, #12
 801be94:	6063      	str	r3, [r4, #4]
    if( ticket_len == 0 )
 801be96:	2e00      	cmp	r6, #0
 801be98:	f43e ae54 	beq.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    mbedtls_zeroize( ssl->session_negotiate->ticket,
 801be9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801be9e:	e9d2 321b 	ldrd	r3, r2, [r2, #108]	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bea2:	4629      	mov	r1, r5
 801bea4:	441a      	add	r2, r3
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d121      	bne.n	801beee <mbedtls_ssl_handshake_client_step+0x1426>
    mbedtls_free( ssl->session_negotiate->ticket );
 801beaa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801beac:	4b3d      	ldr	r3, [pc, #244]	; (801bfa4 <mbedtls_ssl_handshake_client_step+0x14dc>)
 801beae:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	4798      	blx	r3
    ssl->session_negotiate->ticket = NULL;
 801beb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801beb6:	f04f 0800 	mov.w	r8, #0
    ssl->session_negotiate->ticket_len = 0;
 801beba:	e9c3 881b 	strd	r8, r8, [r3, #108]	; 0x6c
    if( ( ticket = mbedtls_calloc( 1, ticket_len ) ) == NULL )
 801bebe:	4b3a      	ldr	r3, [pc, #232]	; (801bfa8 <mbedtls_ssl_handshake_client_step+0x14e0>)
 801bec0:	4631      	mov	r1, r6
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	2001      	movs	r0, #1
 801bec6:	4798      	blx	r3
 801bec8:	4682      	mov	sl, r0
 801beca:	b998      	cbnz	r0, 801bef4 <mbedtls_ssl_handshake_client_step+0x142c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
 801becc:	4b37      	ldr	r3, [pc, #220]	; (801bfac <mbedtls_ssl_handshake_client_step+0x14e4>)
 801bece:	9300      	str	r3, [sp, #0]
 801bed0:	4a2f      	ldr	r2, [pc, #188]	; (801bf90 <mbedtls_ssl_handshake_client_step+0x14c8>)
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801bed2:	4d37      	ldr	r5, [pc, #220]	; (801bfb0 <mbedtls_ssl_handshake_client_step+0x14e8>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
 801bed4:	f640 43ff 	movw	r3, #3327	; 0xcff
 801bed8:	2101      	movs	r1, #1
 801beda:	4620      	mov	r0, r4
 801bedc:	f7f4 fba8 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801bee0:	2250      	movs	r2, #80	; 0x50
 801bee2:	2102      	movs	r1, #2
 801bee4:	4620      	mov	r0, r4
 801bee6:	f001 f9eb 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801beea:	f7fe be2b 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801beee:	7019      	strb	r1, [r3, #0]
 801bef0:	3301      	adds	r3, #1
 801bef2:	e7d8      	b.n	801bea6 <mbedtls_ssl_handshake_client_step+0x13de>
    memcpy( ticket, msg + 6, ticket_len );
 801bef4:	4632      	mov	r2, r6
 801bef6:	f107 010a 	add.w	r1, r7, #10
 801befa:	f006 f9f4 	bl	80222e6 <memcpy>
    ssl->session_negotiate->ticket = ticket;
 801befe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
 801bf00:	4a23      	ldr	r2, [pc, #140]	; (801bf90 <mbedtls_ssl_handshake_client_step+0x14c8>)
    ssl->session_negotiate->ticket_lifetime = lifetime;
 801bf02:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
    ssl->session_negotiate->ticket_len = ticket_len;
 801bf06:	e9c3 a61b 	strd	sl, r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
 801bf0a:	4b2a      	ldr	r3, [pc, #168]	; (801bfb4 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801bf0c:	9300      	str	r3, [sp, #0]
 801bf0e:	2103      	movs	r1, #3
 801bf10:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 801bf14:	4620      	mov	r0, r4
 801bf16:	f7f4 fb8b 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->session_negotiate->id_len = 0;
 801bf1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bf1c:	f8c3 8010 	str.w	r8, [r3, #16]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801bf20:	4b25      	ldr	r3, [pc, #148]	; (801bfb8 <mbedtls_ssl_handshake_client_step+0x14f0>)
 801bf22:	9300      	str	r3, [sp, #0]
 801bf24:	f640 5313 	movw	r3, #3347	; 0xd13
 801bf28:	f7ff ba13 	b.w	801b352 <mbedtls_ssl_handshake_client_step+0x88a>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	f001 ff3d 	bl	801ddac <mbedtls_ssl_parse_change_cipher_spec>
 801bf32:	f7fe be0e 	b.w	801ab52 <mbedtls_ssl_handshake_client_step+0x8a>
           ret = mbedtls_ssl_parse_finished( ssl );
 801bf36:	4620      	mov	r0, r4
 801bf38:	f002 f846 	bl	801dfc8 <mbedtls_ssl_parse_finished>
 801bf3c:	f7fe be09 	b.w	801ab52 <mbedtls_ssl_handshake_client_step+0x8a>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 801bf40:	4b1e      	ldr	r3, [pc, #120]	; (801bfbc <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bf42:	9300      	str	r3, [sp, #0]
 801bf44:	4a12      	ldr	r2, [pc, #72]	; (801bf90 <mbedtls_ssl_handshake_client_step+0x14c8>)
 801bf46:	f640 5392 	movw	r3, #3474	; 0xd92
 801bf4a:	2102      	movs	r1, #2
 801bf4c:	4620      	mov	r0, r4
 801bf4e:	f7f4 fb6f 	bl	8010630 <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801bf52:	230f      	movs	r3, #15
 801bf54:	f7ff ba24 	b.w	801b3a0 <mbedtls_ssl_handshake_client_step+0x8d8>
           mbedtls_ssl_handshake_wrapup( ssl );
 801bf58:	4620      	mov	r0, r4
 801bf5a:	f002 fa39 	bl	801e3d0 <mbedtls_ssl_handshake_wrapup>
           break;
 801bf5e:	f7fe bdf1 	b.w	801ab44 <mbedtls_ssl_handshake_client_step+0x7c>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 801bf62:	9301      	str	r3, [sp, #4]
 801bf64:	4b16      	ldr	r3, [pc, #88]	; (801bfc0 <mbedtls_ssl_handshake_client_step+0x14f8>)
 801bf66:	9300      	str	r3, [sp, #0]
 801bf68:	4a09      	ldr	r2, [pc, #36]	; (801bf90 <mbedtls_ssl_handshake_client_step+0x14c8>)
 801bf6a:	f640 539b 	movw	r3, #3483	; 0xd9b
 801bf6e:	2101      	movs	r1, #1
 801bf70:	4620      	mov	r0, r4
 801bf72:	f7f4 fb5d 	bl	8010630 <mbedtls_debug_print_msg>
 801bf76:	f7fe bf4d 	b.w	801ae14 <mbedtls_ssl_handshake_client_step+0x34c>
 801bf7a:	bf00      	nop
 801bf7c:	080317ab 	.word	0x080317ab
 801bf80:	080313ea 	.word	0x080313ea
 801bf84:	08030d52 	.word	0x08030d52
 801bf88:	080317bb 	.word	0x080317bb
 801bf8c:	080317d7 	.word	0x080317d7
 801bf90:	080308d8 	.word	0x080308d8
 801bf94:	08030dab 	.word	0x08030dab
 801bf98:	080317f3 	.word	0x080317f3
 801bf9c:	ffff9200 	.word	0xffff9200
 801bfa0:	08031812 	.word	0x08031812
 801bfa4:	200005a4 	.word	0x200005a4
 801bfa8:	200005a0 	.word	0x200005a0
 801bfac:	08031824 	.word	0x08031824
 801bfb0:	ffff8100 	.word	0xffff8100
 801bfb4:	08031838 	.word	0x08031838
 801bfb8:	0803185d 	.word	0x0803185d
 801bfbc:	08031879 	.word	0x08031879
 801bfc0:	08031889 	.word	0x08031889

0801bfc4 <mbedtls_zeroize>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 801bfc4:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	4288      	cmp	r0, r1
 801bfca:	d100      	bne.n	801bfce <mbedtls_zeroize+0xa>
}
 801bfcc:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bfce:	7003      	strb	r3, [r0, #0]
 801bfd0:	3001      	adds	r0, #1
 801bfd2:	e7f9      	b.n	801bfc8 <mbedtls_zeroize+0x4>

0801bfd4 <ssl_append_key_cert>:
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
    mbedtls_ssl_key_cert *new;

    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bfd4:	4b0d      	ldr	r3, [pc, #52]	; (801c00c <ssl_append_key_cert+0x38>)
{
 801bfd6:	b570      	push	{r4, r5, r6, lr}
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bfd8:	681b      	ldr	r3, [r3, #0]
{
 801bfda:	4604      	mov	r4, r0
 801bfdc:	460e      	mov	r6, r1
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bfde:	2001      	movs	r0, #1
 801bfe0:	210c      	movs	r1, #12
{
 801bfe2:	4615      	mov	r5, r2
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bfe4:	4798      	blx	r3
    if( new == NULL )
 801bfe6:	b178      	cbz	r0, 801c008 <ssl_append_key_cert+0x34>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new->cert = cert;
    new->key  = key;
    new->next = NULL;
 801bfe8:	2300      	movs	r3, #0
 801bfea:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 801bfec:	6822      	ldr	r2, [r4, #0]
    new->key  = key;
 801bfee:	e9c0 6500 	strd	r6, r5, [r0]
    if( *head == NULL )
 801bff2:	b91a      	cbnz	r2, 801bffc <ssl_append_key_cert+0x28>
    {
        *head = new;
 801bff4:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new;
    }

    return( 0 );
 801bff6:	4610      	mov	r0, r2
}
 801bff8:	bd70      	pop	{r4, r5, r6, pc}
 801bffa:	461a      	mov	r2, r3
        while( cur->next != NULL )
 801bffc:	6893      	ldr	r3, [r2, #8]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d1fb      	bne.n	801bffa <ssl_append_key_cert+0x26>
        cur->next = new;
 801c002:	6090      	str	r0, [r2, #8]
    return( 0 );
 801c004:	4618      	mov	r0, r3
 801c006:	e7f7      	b.n	801bff8 <ssl_append_key_cert+0x24>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801c008:	4801      	ldr	r0, [pc, #4]	; (801c010 <ssl_append_key_cert+0x3c>)
 801c00a:	e7f5      	b.n	801bff8 <ssl_append_key_cert+0x24>
 801c00c:	200005a0 	.word	0x200005a0
 801c010:	ffff8100 	.word	0xffff8100

0801c014 <ssl_calc_finished_tls_sha256>:
{
 801c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c018:	6b46      	ldr	r6, [r0, #52]	; 0x34
{
 801c01a:	b0a8      	sub	sp, #160	; 0xa0
 801c01c:	4604      	mov	r4, r0
 801c01e:	4688      	mov	r8, r1
 801c020:	4691      	mov	r9, r2
    if( !session )
 801c022:	b906      	cbnz	r6, 801c026 <ssl_calc_finished_tls_sha256+0x12>
        session = ssl->session;
 801c024:	6b06      	ldr	r6, [r0, #48]	; 0x30
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c026:	4f2a      	ldr	r7, [pc, #168]	; (801c0d0 <ssl_calc_finished_tls_sha256+0xbc>)
    mbedtls_sha256_init( &sha256 );
 801c028:	a80d      	add	r0, sp, #52	; 0x34
 801c02a:	f7fc fa94 	bl	8018556 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 801c02e:	4b29      	ldr	r3, [pc, #164]	; (801c0d4 <ssl_calc_finished_tls_sha256+0xc0>)
 801c030:	9300      	str	r3, [sp, #0]
 801c032:	4a29      	ldr	r2, [pc, #164]	; (801c0d8 <ssl_calc_finished_tls_sha256+0xc4>)
 801c034:	f241 33c2 	movw	r3, #5058	; 0x13c2
 801c038:	4620      	mov	r0, r4
 801c03a:	2102      	movs	r1, #2
 801c03c:	f7f4 faf8 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801c040:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c042:	a80d      	add	r0, sp, #52	; 0x34
 801c044:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801c048:	f7fc fa93 	bl	8018572 <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 801c04c:	ab0f      	add	r3, sp, #60	; 0x3c
 801c04e:	2520      	movs	r5, #32
 801c050:	9301      	str	r3, [sp, #4]
 801c052:	4b22      	ldr	r3, [pc, #136]	; (801c0dc <ssl_calc_finished_tls_sha256+0xc8>)
 801c054:	9300      	str	r3, [sp, #0]
 801c056:	4620      	mov	r0, r4
 801c058:	f241 33ce 	movw	r3, #5070	; 0x13ce
 801c05c:	9502      	str	r5, [sp, #8]
 801c05e:	4a1e      	ldr	r2, [pc, #120]	; (801c0d8 <ssl_calc_finished_tls_sha256+0xc4>)
 801c060:	2104      	movs	r1, #4
 801c062:	f7f4 fb43 	bl	80106ec <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c066:	4a1e      	ldr	r2, [pc, #120]	; (801c0e0 <ssl_calc_finished_tls_sha256+0xcc>)
    mbedtls_sha256_finish( &sha256, padbuf );
 801c068:	a905      	add	r1, sp, #20
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c06a:	f1b9 0f00 	cmp.w	r9, #0
 801c06e:	bf18      	it	ne
 801c070:	4617      	movne	r7, r2
    mbedtls_sha256_finish( &sha256, padbuf );
 801c072:	a80d      	add	r0, sp, #52	; 0x34
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c074:	f04f 090c 	mov.w	r9, #12
    mbedtls_sha256_finish( &sha256, padbuf );
 801c078:	f7fc fe7a 	bl	8018d70 <mbedtls_sha256_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c07c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801c080:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c082:	9500      	str	r5, [sp, #0]
 801c084:	f8d3 a2a4 	ldr.w	sl, [r3, #676]	; 0x2a4
 801c088:	463a      	mov	r2, r7
 801c08a:	ab05      	add	r3, sp, #20
 801c08c:	2130      	movs	r1, #48	; 0x30
 801c08e:	f106 0034 	add.w	r0, r6, #52	; 0x34
 801c092:	47d0      	blx	sl
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801c094:	4b13      	ldr	r3, [pc, #76]	; (801c0e4 <ssl_calc_finished_tls_sha256+0xd0>)
 801c096:	4a10      	ldr	r2, [pc, #64]	; (801c0d8 <ssl_calc_finished_tls_sha256+0xc4>)
 801c098:	9300      	str	r3, [sp, #0]
 801c09a:	2103      	movs	r1, #3
 801c09c:	f241 33da 	movw	r3, #5082	; 0x13da
 801c0a0:	4620      	mov	r0, r4
 801c0a2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801c0a6:	f7f4 fb21 	bl	80106ec <mbedtls_debug_print_buf>
    mbedtls_sha256_free( &sha256 );
 801c0aa:	a80d      	add	r0, sp, #52	; 0x34
 801c0ac:	f7fc fa57 	bl	801855e <mbedtls_sha256_free>
    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 801c0b0:	4629      	mov	r1, r5
 801c0b2:	a805      	add	r0, sp, #20
 801c0b4:	f7ff ff86 	bl	801bfc4 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801c0b8:	4b0b      	ldr	r3, [pc, #44]	; (801c0e8 <ssl_calc_finished_tls_sha256+0xd4>)
 801c0ba:	9300      	str	r3, [sp, #0]
 801c0bc:	4a06      	ldr	r2, [pc, #24]	; (801c0d8 <ssl_calc_finished_tls_sha256+0xc4>)
 801c0be:	f44f 539f 	mov.w	r3, #5088	; 0x13e0
 801c0c2:	2102      	movs	r1, #2
 801c0c4:	4620      	mov	r0, r4
 801c0c6:	f7f4 fab3 	bl	8010630 <mbedtls_debug_print_msg>
}
 801c0ca:	b028      	add	sp, #160	; 0xa0
 801c0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0d0:	0803189a 	.word	0x0803189a
 801c0d4:	0803191b 	.word	0x0803191b
 801c0d8:	080318ba 	.word	0x080318ba
 801c0dc:	08031938 	.word	0x08031938
 801c0e0:	080318aa 	.word	0x080318aa
 801c0e4:	0803194c 	.word	0x0803194c
 801c0e8:	08031961 	.word	0x08031961

0801c0ec <ssl_calc_verify_tls_sha256>:
{
 801c0ec:	b570      	push	{r4, r5, r6, lr}
 801c0ee:	b0a0      	sub	sp, #128	; 0x80
 801c0f0:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 801c0f2:	4d19      	ldr	r5, [pc, #100]	; (801c158 <ssl_calc_verify_tls_sha256+0x6c>)
    mbedtls_sha256_init( &sha256 );
 801c0f4:	a805      	add	r0, sp, #20
{
 801c0f6:	460e      	mov	r6, r1
    mbedtls_sha256_init( &sha256 );
 801c0f8:	f7fc fa2d 	bl	8018556 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 801c0fc:	4b17      	ldr	r3, [pc, #92]	; (801c15c <ssl_calc_verify_tls_sha256+0x70>)
 801c0fe:	9300      	str	r3, [sp, #0]
 801c100:	462a      	mov	r2, r5
 801c102:	f240 4316 	movw	r3, #1046	; 0x416
 801c106:	4620      	mov	r0, r4
 801c108:	2102      	movs	r1, #2
 801c10a:	f7f4 fa91 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801c10e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c110:	a805      	add	r0, sp, #20
 801c112:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801c116:	f7fc fa2c 	bl	8018572 <mbedtls_sha256_clone>
    mbedtls_sha256_finish( &sha256, hash );
 801c11a:	4631      	mov	r1, r6
 801c11c:	a805      	add	r0, sp, #20
 801c11e:	f7fc fe27 	bl	8018d70 <mbedtls_sha256_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 801c122:	2320      	movs	r3, #32
 801c124:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801c128:	4b0d      	ldr	r3, [pc, #52]	; (801c160 <ssl_calc_verify_tls_sha256+0x74>)
 801c12a:	9300      	str	r3, [sp, #0]
 801c12c:	462a      	mov	r2, r5
 801c12e:	4620      	mov	r0, r4
 801c130:	f240 431b 	movw	r3, #1051	; 0x41b
 801c134:	2103      	movs	r1, #3
 801c136:	f7f4 fad9 	bl	80106ec <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c13a:	4b0a      	ldr	r3, [pc, #40]	; (801c164 <ssl_calc_verify_tls_sha256+0x78>)
 801c13c:	9300      	str	r3, [sp, #0]
 801c13e:	462a      	mov	r2, r5
 801c140:	f240 431c 	movw	r3, #1052	; 0x41c
 801c144:	2102      	movs	r1, #2
 801c146:	4620      	mov	r0, r4
 801c148:	f7f4 fa72 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 801c14c:	a805      	add	r0, sp, #20
 801c14e:	f7fc fa06 	bl	801855e <mbedtls_sha256_free>
}
 801c152:	b020      	add	sp, #128	; 0x80
 801c154:	bd70      	pop	{r4, r5, r6, pc}
 801c156:	bf00      	nop
 801c158:	080318ba 	.word	0x080318ba
 801c15c:	08031973 	.word	0x08031973
 801c160:	08031989 	.word	0x08031989
 801c164:	080319a2 	.word	0x080319a2

0801c168 <tls_prf_generic>:
{
 801c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c16c:	b0b7      	sub	sp, #220	; 0xdc
 801c16e:	4604      	mov	r4, r0
    mbedtls_md_init( &md_ctx );
 801c170:	a803      	add	r0, sp, #12
{
 801c172:	4689      	mov	r9, r1
 801c174:	4692      	mov	sl, r2
 801c176:	4698      	mov	r8, r3
 801c178:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
 801c17a:	f7f8 f98b 	bl	8014494 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 801c17e:	4620      	mov	r0, r4
 801c180:	f7f8 f97c 	bl	801447c <mbedtls_md_info_from_type>
 801c184:	4683      	mov	fp, r0
 801c186:	2800      	cmp	r0, #0
 801c188:	d074      	beq.n	801c274 <tls_prf_generic+0x10c>
    md_len = mbedtls_md_get_size( md_info );
 801c18a:	f7f8 fac7 	bl	801471c <mbedtls_md_get_size>
 801c18e:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 801c190:	4640      	mov	r0, r8
 801c192:	f7e4 f827 	bl	80001e4 <strlen>
 801c196:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c198:	1903      	adds	r3, r0, r4
 801c19a:	189a      	adds	r2, r3, r2
 801c19c:	2a80      	cmp	r2, #128	; 0x80
 801c19e:	4605      	mov	r5, r0
 801c1a0:	9301      	str	r3, [sp, #4]
 801c1a2:	d86a      	bhi.n	801c27a <tls_prf_generic+0x112>
    memcpy( tmp + md_len, label, nb );
 801c1a4:	ab16      	add	r3, sp, #88	; 0x58
 801c1a6:	191f      	adds	r7, r3, r4
 801c1a8:	4602      	mov	r2, r0
 801c1aa:	4641      	mov	r1, r8
 801c1ac:	4638      	mov	r0, r7
 801c1ae:	f006 f89a 	bl	80222e6 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 801c1b2:	9b01      	ldr	r3, [sp, #4]
 801c1b4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c1b6:	9940      	ldr	r1, [sp, #256]	; 0x100
 801c1b8:	a816      	add	r0, sp, #88	; 0x58
 801c1ba:	4418      	add	r0, r3
 801c1bc:	f006 f893 	bl	80222e6 <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 801c1c0:	2201      	movs	r2, #1
 801c1c2:	4659      	mov	r1, fp
 801c1c4:	a803      	add	r0, sp, #12
 801c1c6:	f7f8 f98f 	bl	80144e8 <mbedtls_md_setup>
 801c1ca:	4680      	mov	r8, r0
 801c1cc:	bb10      	cbnz	r0, 801c214 <tls_prf_generic+0xac>
    nb += rlen;
 801c1ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c1d0:	4652      	mov	r2, sl
    nb += rlen;
 801c1d2:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c1d4:	4649      	mov	r1, r9
 801c1d6:	a803      	add	r0, sp, #12
 801c1d8:	f7f8 f9e0 	bl	801459c <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 801c1dc:	462a      	mov	r2, r5
 801c1de:	4639      	mov	r1, r7
 801c1e0:	a803      	add	r0, sp, #12
 801c1e2:	f7f8 fa3b 	bl	801465c <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c1e6:	a916      	add	r1, sp, #88	; 0x58
 801c1e8:	a803      	add	r0, sp, #12
 801c1ea:	f7f8 fa47 	bl	801467c <mbedtls_md_hmac_finish>
 801c1ee:	f8dd a108 	ldr.w	sl, [sp, #264]	; 0x108
    for( i = 0; i < dlen; i += md_len )
 801c1f2:	4647      	mov	r7, r8
 801c1f4:	f10d 0918 	add.w	r9, sp, #24
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c1f8:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
 801c1fa:	42b7      	cmp	r7, r6
        mbedtls_md_hmac_reset ( &md_ctx );
 801c1fc:	a803      	add	r0, sp, #12
    for( i = 0; i < dlen; i += md_len )
 801c1fe:	d30d      	bcc.n	801c21c <tls_prf_generic+0xb4>
    mbedtls_md_free( &md_ctx );
 801c200:	f7f8 f94e 	bl	80144a0 <mbedtls_md_free>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c204:	2180      	movs	r1, #128	; 0x80
 801c206:	a816      	add	r0, sp, #88	; 0x58
 801c208:	f7ff fedc 	bl	801bfc4 <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 801c20c:	2140      	movs	r1, #64	; 0x40
 801c20e:	4648      	mov	r0, r9
 801c210:	f7ff fed8 	bl	801bfc4 <mbedtls_zeroize>
}
 801c214:	4640      	mov	r0, r8
 801c216:	b037      	add	sp, #220	; 0xdc
 801c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_md_hmac_reset ( &md_ctx );
 801c21c:	f7f8 fa5a 	bl	80146d4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c220:	462a      	mov	r2, r5
 801c222:	a916      	add	r1, sp, #88	; 0x58
 801c224:	a803      	add	r0, sp, #12
 801c226:	f7f8 fa19 	bl	801465c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 801c22a:	4649      	mov	r1, r9
 801c22c:	a803      	add	r0, sp, #12
 801c22e:	f7f8 fa25 	bl	801467c <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 801c232:	a803      	add	r0, sp, #12
 801c234:	f7f8 fa4e 	bl	80146d4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 801c238:	4622      	mov	r2, r4
 801c23a:	a916      	add	r1, sp, #88	; 0x58
 801c23c:	a803      	add	r0, sp, #12
 801c23e:	f7f8 fa0d 	bl	801465c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c242:	a916      	add	r1, sp, #88	; 0x58
 801c244:	a803      	add	r0, sp, #12
 801c246:	f7f8 fa19 	bl	801467c <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 801c24a:	4427      	add	r7, r4
 801c24c:	42b7      	cmp	r7, r6
 801c24e:	bf94      	ite	ls
 801c250:	4622      	movls	r2, r4
 801c252:	fbb6 f2f4 	udivhi	r2, r6, r4
        for( j = 0; j < k; j++ )
 801c256:	f04f 0300 	mov.w	r3, #0
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 801c25a:	bf88      	it	hi
 801c25c:	fb04 6212 	mlshi	r2, r4, r2, r6
        for( j = 0; j < k; j++ )
 801c260:	4293      	cmp	r3, r2
 801c262:	d101      	bne.n	801c268 <tls_prf_generic+0x100>
 801c264:	44a2      	add	sl, r4
 801c266:	e7c8      	b.n	801c1fa <tls_prf_generic+0x92>
            dstbuf[i + j]  = h_i[j];
 801c268:	f819 1003 	ldrb.w	r1, [r9, r3]
 801c26c:	f80a 1003 	strb.w	r1, [sl, r3]
        for( j = 0; j < k; j++ )
 801c270:	3301      	adds	r3, #1
 801c272:	e7f5      	b.n	801c260 <tls_prf_generic+0xf8>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c274:	f8df 8008 	ldr.w	r8, [pc, #8]	; 801c280 <tls_prf_generic+0x118>
 801c278:	e7cc      	b.n	801c214 <tls_prf_generic+0xac>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c27a:	f8df 8008 	ldr.w	r8, [pc, #8]	; 801c284 <tls_prf_generic+0x11c>
 801c27e:	e7c9      	b.n	801c214 <tls_prf_generic+0xac>
 801c280:	ffff9400 	.word	0xffff9400
 801c284:	ffff8f00 	.word	0xffff8f00

0801c288 <tls_prf_sha256>:
{
 801c288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 801c28a:	9c08      	ldr	r4, [sp, #32]
 801c28c:	9403      	str	r4, [sp, #12]
 801c28e:	9c07      	ldr	r4, [sp, #28]
 801c290:	9402      	str	r4, [sp, #8]
 801c292:	9c06      	ldr	r4, [sp, #24]
 801c294:	e9cd 3400 	strd	r3, r4, [sp]
 801c298:	4613      	mov	r3, r2
 801c29a:	460a      	mov	r2, r1
 801c29c:	4601      	mov	r1, r0
 801c29e:	2006      	movs	r0, #6
 801c2a0:	f7ff ff62 	bl	801c168 <tls_prf_generic>
}
 801c2a4:	b004      	add	sp, #16
 801c2a6:	bd10      	pop	{r4, pc}

0801c2a8 <tls_prf_sha384>:
{
 801c2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
 801c2aa:	9c08      	ldr	r4, [sp, #32]
 801c2ac:	9403      	str	r4, [sp, #12]
 801c2ae:	9c07      	ldr	r4, [sp, #28]
 801c2b0:	9402      	str	r4, [sp, #8]
 801c2b2:	9c06      	ldr	r4, [sp, #24]
 801c2b4:	e9cd 3400 	strd	r3, r4, [sp]
 801c2b8:	4613      	mov	r3, r2
 801c2ba:	460a      	mov	r2, r1
 801c2bc:	4601      	mov	r1, r0
 801c2be:	2007      	movs	r0, #7
 801c2c0:	f7ff ff52 	bl	801c168 <tls_prf_generic>
}
 801c2c4:	b004      	add	sp, #16
 801c2c6:	bd10      	pop	{r4, pc}

0801c2c8 <ssl_calc_finished_tls_sha384>:
{
 801c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c2cc:	6b46      	ldr	r6, [r0, #52]	; 0x34
{
 801c2ce:	b0c6      	sub	sp, #280	; 0x118
 801c2d0:	4604      	mov	r4, r0
 801c2d2:	4688      	mov	r8, r1
 801c2d4:	4615      	mov	r5, r2
    if( !session )
 801c2d6:	b906      	cbnz	r6, 801c2da <ssl_calc_finished_tls_sha384+0x12>
        session = ssl->session;
 801c2d8:	6b06      	ldr	r6, [r0, #48]	; 0x30
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c2da:	4f2a      	ldr	r7, [pc, #168]	; (801c384 <ssl_calc_finished_tls_sha384+0xbc>)
    mbedtls_sha512_init( &sha512 );
 801c2dc:	a810      	add	r0, sp, #64	; 0x40
 801c2de:	f7fc fde4 	bl	8018eaa <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
 801c2e2:	4b29      	ldr	r3, [pc, #164]	; (801c388 <ssl_calc_finished_tls_sha384+0xc0>)
 801c2e4:	9300      	str	r3, [sp, #0]
 801c2e6:	4a29      	ldr	r2, [pc, #164]	; (801c38c <ssl_calc_finished_tls_sha384+0xc4>)
 801c2e8:	f241 33f3 	movw	r3, #5107	; 0x13f3
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	2102      	movs	r1, #2
 801c2f0:	f7f4 f99e 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c2f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c2f6:	a810      	add	r0, sp, #64	; 0x40
 801c2f8:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c2fc:	f7fc fde3 	bl	8018ec6 <mbedtls_sha512_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
 801c300:	2340      	movs	r3, #64	; 0x40
 801c302:	9302      	str	r3, [sp, #8]
 801c304:	ab14      	add	r3, sp, #80	; 0x50
 801c306:	9301      	str	r3, [sp, #4]
 801c308:	4b21      	ldr	r3, [pc, #132]	; (801c390 <ssl_calc_finished_tls_sha384+0xc8>)
 801c30a:	9300      	str	r3, [sp, #0]
 801c30c:	4620      	mov	r0, r4
 801c30e:	f241 33ff 	movw	r3, #5119	; 0x13ff
 801c312:	4a1e      	ldr	r2, [pc, #120]	; (801c38c <ssl_calc_finished_tls_sha384+0xc4>)
 801c314:	2104      	movs	r1, #4
 801c316:	f7f4 f9e9 	bl	80106ec <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c31a:	4a1e      	ldr	r2, [pc, #120]	; (801c394 <ssl_calc_finished_tls_sha384+0xcc>)
    mbedtls_sha512_finish( &sha512, padbuf );
 801c31c:	a904      	add	r1, sp, #16
 801c31e:	a810      	add	r0, sp, #64	; 0x40
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c320:	f04f 090c 	mov.w	r9, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c324:	2d00      	cmp	r5, #0
 801c326:	bf18      	it	ne
 801c328:	4617      	movne	r7, r2
    mbedtls_sha512_finish( &sha512, padbuf );
 801c32a:	f7fd fd6f 	bl	8019e0c <mbedtls_sha512_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c32e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801c332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c334:	2530      	movs	r5, #48	; 0x30
 801c336:	9500      	str	r5, [sp, #0]
 801c338:	f8d3 a2a4 	ldr.w	sl, [r3, #676]	; 0x2a4
 801c33c:	463a      	mov	r2, r7
 801c33e:	ab04      	add	r3, sp, #16
 801c340:	4629      	mov	r1, r5
 801c342:	f106 0034 	add.w	r0, r6, #52	; 0x34
 801c346:	47d0      	blx	sl
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801c348:	4b13      	ldr	r3, [pc, #76]	; (801c398 <ssl_calc_finished_tls_sha384+0xd0>)
 801c34a:	4a10      	ldr	r2, [pc, #64]	; (801c38c <ssl_calc_finished_tls_sha384+0xc4>)
 801c34c:	9300      	str	r3, [sp, #0]
 801c34e:	2103      	movs	r1, #3
 801c350:	f241 430b 	movw	r3, #5131	; 0x140b
 801c354:	4620      	mov	r0, r4
 801c356:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801c35a:	f7f4 f9c7 	bl	80106ec <mbedtls_debug_print_buf>
    mbedtls_sha512_free( &sha512 );
 801c35e:	a810      	add	r0, sp, #64	; 0x40
 801c360:	f7fc fda7 	bl	8018eb2 <mbedtls_sha512_free>
    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 801c364:	4629      	mov	r1, r5
 801c366:	a804      	add	r0, sp, #16
 801c368:	f7ff fe2c 	bl	801bfc4 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801c36c:	4b0b      	ldr	r3, [pc, #44]	; (801c39c <ssl_calc_finished_tls_sha384+0xd4>)
 801c36e:	9300      	str	r3, [sp, #0]
 801c370:	4a06      	ldr	r2, [pc, #24]	; (801c38c <ssl_calc_finished_tls_sha384+0xc4>)
 801c372:	f241 4311 	movw	r3, #5137	; 0x1411
 801c376:	2102      	movs	r1, #2
 801c378:	4620      	mov	r0, r4
 801c37a:	f7f4 f959 	bl	8010630 <mbedtls_debug_print_msg>
}
 801c37e:	b046      	add	sp, #280	; 0x118
 801c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c384:	0803189a 	.word	0x0803189a
 801c388:	080319b1 	.word	0x080319b1
 801c38c:	080318ba 	.word	0x080318ba
 801c390:	080319ce 	.word	0x080319ce
 801c394:	080318aa 	.word	0x080318aa
 801c398:	0803194c 	.word	0x0803194c
 801c39c:	08031961 	.word	0x08031961

0801c3a0 <ssl_calc_verify_tls_sha384>:
{
 801c3a0:	b570      	push	{r4, r5, r6, lr}
 801c3a2:	b0ba      	sub	sp, #232	; 0xe8
 801c3a4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
 801c3a6:	4d19      	ldr	r5, [pc, #100]	; (801c40c <ssl_calc_verify_tls_sha384+0x6c>)
    mbedtls_sha512_init( &sha512 );
 801c3a8:	a804      	add	r0, sp, #16
{
 801c3aa:	460e      	mov	r6, r1
    mbedtls_sha512_init( &sha512 );
 801c3ac:	f7fc fd7d 	bl	8018eaa <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
 801c3b0:	4b17      	ldr	r3, [pc, #92]	; (801c410 <ssl_calc_verify_tls_sha384+0x70>)
 801c3b2:	9300      	str	r3, [sp, #0]
 801c3b4:	462a      	mov	r2, r5
 801c3b6:	f240 432b 	movw	r3, #1067	; 0x42b
 801c3ba:	4620      	mov	r0, r4
 801c3bc:	2102      	movs	r1, #2
 801c3be:	f7f4 f937 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c3c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c3c4:	a804      	add	r0, sp, #16
 801c3c6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c3ca:	f7fc fd7c 	bl	8018ec6 <mbedtls_sha512_clone>
    mbedtls_sha512_finish( &sha512, hash );
 801c3ce:	4631      	mov	r1, r6
 801c3d0:	a804      	add	r0, sp, #16
 801c3d2:	f7fd fd1b 	bl	8019e0c <mbedtls_sha512_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
 801c3d6:	2330      	movs	r3, #48	; 0x30
 801c3d8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801c3dc:	4b0d      	ldr	r3, [pc, #52]	; (801c414 <ssl_calc_verify_tls_sha384+0x74>)
 801c3de:	9300      	str	r3, [sp, #0]
 801c3e0:	462a      	mov	r2, r5
 801c3e2:	4620      	mov	r0, r4
 801c3e4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 801c3e8:	2103      	movs	r1, #3
 801c3ea:	f7f4 f97f 	bl	80106ec <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c3ee:	4b0a      	ldr	r3, [pc, #40]	; (801c418 <ssl_calc_verify_tls_sha384+0x78>)
 801c3f0:	9300      	str	r3, [sp, #0]
 801c3f2:	462a      	mov	r2, r5
 801c3f4:	f240 4331 	movw	r3, #1073	; 0x431
 801c3f8:	2102      	movs	r1, #2
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	f7f4 f918 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_sha512_free( &sha512 );
 801c400:	a804      	add	r0, sp, #16
 801c402:	f7fc fd56 	bl	8018eb2 <mbedtls_sha512_free>
}
 801c406:	b03a      	add	sp, #232	; 0xe8
 801c408:	bd70      	pop	{r4, r5, r6, pc}
 801c40a:	bf00      	nop
 801c40c:	080318ba 	.word	0x080318ba
 801c410:	080319e4 	.word	0x080319e4
 801c414:	08031989 	.word	0x08031989
 801c418:	080319a2 	.word	0x080319a2

0801c41c <ssl_update_checksum_sha256>:
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c41c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c41e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801c422:	f7fc bca1 	b.w	8018d68 <mbedtls_sha256_update>

0801c426 <ssl_update_checksum_sha384>:
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c426:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c428:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 801c42c:	f7fd bce9 	b.w	8019e02 <mbedtls_sha512_update>

0801c430 <ssl_update_checksum_start>:
{
 801c430:	b570      	push	{r4, r5, r6, lr}
 801c432:	4604      	mov	r4, r0
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c434:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c436:	f500 70a8 	add.w	r0, r0, #336	; 0x150
{
 801c43a:	460d      	mov	r5, r1
 801c43c:	4616      	mov	r6, r2
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c43e:	f7fc fc93 	bl	8018d68 <mbedtls_sha256_update>
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c442:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c444:	4632      	mov	r2, r6
 801c446:	4629      	mov	r1, r5
 801c448:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
}
 801c44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c450:	f7fd bcd7 	b.w	8019e02 <mbedtls_sha512_update>

0801c454 <ssl_set_timer>:
    if( ssl->f_set_timer == NULL )
 801c454:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 801c456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c458:	4604      	mov	r4, r0
 801c45a:	460d      	mov	r5, r1
    if( ssl->f_set_timer == NULL )
 801c45c:	b17b      	cbz	r3, 801c47e <ssl_set_timer+0x2a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 801c45e:	4b09      	ldr	r3, [pc, #36]	; (801c484 <ssl_set_timer+0x30>)
 801c460:	9101      	str	r1, [sp, #4]
 801c462:	9300      	str	r3, [sp, #0]
 801c464:	4a08      	ldr	r2, [pc, #32]	; (801c488 <ssl_set_timer+0x34>)
 801c466:	2352      	movs	r3, #82	; 0x52
 801c468:	2103      	movs	r1, #3
 801c46a:	f7f4 f8e1 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c46e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c470:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801c472:	462a      	mov	r2, r5
 801c474:	08a9      	lsrs	r1, r5, #2
}
 801c476:	b003      	add	sp, #12
 801c478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c47c:	4718      	bx	r3
}
 801c47e:	b003      	add	sp, #12
 801c480:	bd30      	pop	{r4, r5, pc}
 801c482:	bf00      	nop
 801c484:	080319fa 	.word	0x080319fa
 801c488:	080318ba 	.word	0x080318ba

0801c48c <mbedtls_ssl_derive_keys>:
{
 801c48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c490:	b0d9      	sub	sp, #356	; 0x164
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c492:	6b43      	ldr	r3, [r0, #52]	; 0x34
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 801c494:	6c85      	ldr	r5, [r0, #72]	; 0x48
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c496:	9307      	str	r3, [sp, #28]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c498:	4b8b      	ldr	r3, [pc, #556]	; (801c6c8 <mbedtls_ssl_derive_keys+0x23c>)
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 801c49a:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c49e:	4a8b      	ldr	r2, [pc, #556]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
 801c4a0:	9300      	str	r3, [sp, #0]
 801c4a2:	2102      	movs	r1, #2
 801c4a4:	f240 13f5 	movw	r3, #501	; 0x1f5
{
 801c4a8:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c4aa:	f7f4 f8c1 	bl	8010630 <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 801c4ae:	682b      	ldr	r3, [r5, #0]
 801c4b0:	7a18      	ldrb	r0, [r3, #8]
 801c4b2:	f7f3 fba3 	bl	800fbfc <mbedtls_cipher_info_from_type>
 801c4b6:	682b      	ldr	r3, [r5, #0]
    if( cipher_info == NULL )
 801c4b8:	4681      	mov	r9, r0
 801c4ba:	b978      	cbnz	r0, 801c4dc <mbedtls_ssl_derive_keys+0x50>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 801c4bc:	7a1b      	ldrb	r3, [r3, #8]
 801c4be:	9301      	str	r3, [sp, #4]
 801c4c0:	4b83      	ldr	r3, [pc, #524]	; (801c6d0 <mbedtls_ssl_derive_keys+0x244>)
 801c4c2:	9300      	str	r3, [sp, #0]
 801c4c4:	f240 13fb 	movw	r3, #507	; 0x1fb
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c4c8:	4a80      	ldr	r2, [pc, #512]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c4ca:	4e82      	ldr	r6, [pc, #520]	; (801c6d4 <mbedtls_ssl_derive_keys+0x248>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c4cc:	2101      	movs	r1, #1
 801c4ce:	4620      	mov	r0, r4
 801c4d0:	f7f4 f8ae 	bl	8010630 <mbedtls_debug_print_msg>
}
 801c4d4:	4630      	mov	r0, r6
 801c4d6:	b059      	add	sp, #356	; 0x164
 801c4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 801c4dc:	7a58      	ldrb	r0, [r3, #9]
 801c4de:	f7f7 ffcd 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801c4e2:	4683      	mov	fp, r0
 801c4e4:	b938      	cbnz	r0, 801c4f6 <mbedtls_ssl_derive_keys+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c4e6:	682b      	ldr	r3, [r5, #0]
 801c4e8:	7a5b      	ldrb	r3, [r3, #9]
 801c4ea:	9301      	str	r3, [sp, #4]
 801c4ec:	4b7a      	ldr	r3, [pc, #488]	; (801c6d8 <mbedtls_ssl_derive_keys+0x24c>)
 801c4ee:	9300      	str	r3, [sp, #0]
 801c4f0:	f240 2303 	movw	r3, #515	; 0x203
 801c4f4:	e7e8      	b.n	801c4c8 <mbedtls_ssl_derive_keys+0x3c>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c4f6:	6963      	ldr	r3, [r4, #20]
 801c4f8:	2b03      	cmp	r3, #3
 801c4fa:	d171      	bne.n	801c5e0 <mbedtls_ssl_derive_keys+0x154>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801c4fc:	682b      	ldr	r3, [r5, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c4fe:	7a5b      	ldrb	r3, [r3, #9]
 801c500:	2b07      	cmp	r3, #7
 801c502:	d165      	bne.n	801c5d0 <mbedtls_ssl_derive_keys+0x144>
        handshake->tls_prf = tls_prf_sha384;
 801c504:	4b75      	ldr	r3, [pc, #468]	; (801c6dc <mbedtls_ssl_derive_keys+0x250>)
 801c506:	f8c8 32a4 	str.w	r3, [r8, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 801c50a:	4b75      	ldr	r3, [pc, #468]	; (801c6e0 <mbedtls_ssl_derive_keys+0x254>)
 801c50c:	f8c8 329c 	str.w	r3, [r8, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 801c510:	4b74      	ldr	r3, [pc, #464]	; (801c6e4 <mbedtls_ssl_derive_keys+0x258>)
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c512:	f8c8 32a0 	str.w	r3, [r8, #672]	; 0x2a0
 801c516:	9b07      	ldr	r3, [sp, #28]
 801c518:	3334      	adds	r3, #52	; 0x34
 801c51a:	9306      	str	r3, [sp, #24]
    if( handshake->resume == 0 )
 801c51c:	f8d8 3330 	ldr.w	r3, [r8, #816]	; 0x330
 801c520:	2b00      	cmp	r3, #0
 801c522:	f040 80c7 	bne.w	801c6b4 <mbedtls_ssl_derive_keys+0x228>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 801c526:	f8d8 32a8 	ldr.w	r3, [r8, #680]	; 0x2a8
 801c52a:	4a68      	ldr	r2, [pc, #416]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
 801c52c:	f508 773b 	add.w	r7, r8, #748	; 0x2ec
 801c530:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801c534:	4b6c      	ldr	r3, [pc, #432]	; (801c6e8 <mbedtls_ssl_derive_keys+0x25c>)
 801c536:	9300      	str	r3, [sp, #0]
 801c538:	2103      	movs	r1, #3
 801c53a:	f240 2343 	movw	r3, #579	; 0x243
 801c53e:	4620      	mov	r0, r4
 801c540:	f7f4 f8d4 	bl	80106ec <mbedtls_debug_print_buf>
        if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )
 801c544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c546:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801c54a:	2b01      	cmp	r3, #1
 801c54c:	d155      	bne.n	801c5fa <mbedtls_ssl_derive_keys+0x16e>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using extended master secret" ) );
 801c54e:	4b67      	ldr	r3, [pc, #412]	; (801c6ec <mbedtls_ssl_derive_keys+0x260>)
 801c550:	9300      	str	r3, [sp, #0]
 801c552:	4a5e      	ldr	r2, [pc, #376]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
 801c554:	f240 234b 	movw	r3, #587	; 0x24b
 801c558:	2103      	movs	r1, #3
 801c55a:	4620      	mov	r0, r4
 801c55c:	f7f4 f868 	bl	8010630 <mbedtls_debug_print_msg>
            ssl->handshake->calc_verify( ssl, session_hash );
 801c560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c562:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 801c566:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801c56a:	4651      	mov	r1, sl
 801c56c:	4620      	mov	r0, r4
 801c56e:	4798      	blx	r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801c570:	6963      	ldr	r3, [r4, #20]
 801c572:	2b03      	cmp	r3, #3
 801c574:	d13f      	bne.n	801c5f6 <mbedtls_ssl_derive_keys+0x16a>
                if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801c576:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	7a5b      	ldrb	r3, [r3, #9]
                    hash_len = 48;
 801c57c:	2b07      	cmp	r3, #7
 801c57e:	bf14      	ite	ne
 801c580:	2620      	movne	r6, #32
 801c582:	2630      	moveq	r6, #48	; 0x30
            MBEDTLS_SSL_DEBUG_BUF( 3, "session hash", session_hash, hash_len );
 801c584:	4b5a      	ldr	r3, [pc, #360]	; (801c6f0 <mbedtls_ssl_derive_keys+0x264>)
 801c586:	9300      	str	r3, [sp, #0]
 801c588:	e9cd a601 	strd	sl, r6, [sp, #4]
 801c58c:	f44f 7318 	mov.w	r3, #608	; 0x260
 801c590:	4a4e      	ldr	r2, [pc, #312]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
 801c592:	2103      	movs	r1, #3
 801c594:	4620      	mov	r0, r4
 801c596:	f7f4 f8a9 	bl	80106ec <mbedtls_debug_print_buf>
            ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c59a:	2330      	movs	r3, #48	; 0x30
 801c59c:	9302      	str	r3, [sp, #8]
 801c59e:	9b06      	ldr	r3, [sp, #24]
 801c5a0:	4a54      	ldr	r2, [pc, #336]	; (801c6f4 <mbedtls_ssl_derive_keys+0x268>)
 801c5a2:	e9cd 6300 	strd	r6, r3, [sp]
 801c5a6:	4638      	mov	r0, r7
 801c5a8:	f8d8 62a4 	ldr.w	r6, [r8, #676]	; 0x2a4
 801c5ac:	f8d8 12a8 	ldr.w	r1, [r8, #680]	; 0x2a8
 801c5b0:	4653      	mov	r3, sl
 801c5b2:	47b0      	blx	r6
            if( ret != 0 )
 801c5b4:	4606      	mov	r6, r0
 801c5b6:	2800      	cmp	r0, #0
 801c5b8:	d036      	beq.n	801c628 <mbedtls_ssl_derive_keys+0x19c>
                MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c5ba:	4b4f      	ldr	r3, [pc, #316]	; (801c6f8 <mbedtls_ssl_derive_keys+0x26c>)
 801c5bc:	9300      	str	r3, [sp, #0]
 801c5be:	9001      	str	r0, [sp, #4]
 801c5c0:	f44f 731a 	mov.w	r3, #616	; 0x268
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c5c4:	4a41      	ldr	r2, [pc, #260]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
 801c5c6:	2101      	movs	r1, #1
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	f7f4 f861 	bl	8010690 <mbedtls_debug_print_ret>
        return( ret );
 801c5ce:	e781      	b.n	801c4d4 <mbedtls_ssl_derive_keys+0x48>
        handshake->tls_prf = tls_prf_sha256;
 801c5d0:	4b4a      	ldr	r3, [pc, #296]	; (801c6fc <mbedtls_ssl_derive_keys+0x270>)
 801c5d2:	f8c8 32a4 	str.w	r3, [r8, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 801c5d6:	4b4a      	ldr	r3, [pc, #296]	; (801c700 <mbedtls_ssl_derive_keys+0x274>)
 801c5d8:	f8c8 329c 	str.w	r3, [r8, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c5dc:	4b49      	ldr	r3, [pc, #292]	; (801c704 <mbedtls_ssl_derive_keys+0x278>)
 801c5de:	e798      	b.n	801c512 <mbedtls_ssl_derive_keys+0x86>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c5e0:	4b49      	ldr	r3, [pc, #292]	; (801c708 <mbedtls_ssl_derive_keys+0x27c>)
 801c5e2:	9300      	str	r3, [sp, #0]
 801c5e4:	f240 2332 	movw	r3, #562	; 0x232
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c5e8:	4a38      	ldr	r2, [pc, #224]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c5ea:	4e48      	ldr	r6, [pc, #288]	; (801c70c <mbedtls_ssl_derive_keys+0x280>)
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c5ec:	2101      	movs	r1, #1
 801c5ee:	4620      	mov	r0, r4
 801c5f0:	f7f4 f81e 	bl	8010630 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c5f4:	e76e      	b.n	801c4d4 <mbedtls_ssl_derive_keys+0x48>
                hash_len = 36;
 801c5f6:	2624      	movs	r6, #36	; 0x24
 801c5f8:	e7c4      	b.n	801c584 <mbedtls_ssl_derive_keys+0xf8>
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c5fa:	2330      	movs	r3, #48	; 0x30
 801c5fc:	9302      	str	r3, [sp, #8]
 801c5fe:	9b06      	ldr	r3, [sp, #24]
 801c600:	9301      	str	r3, [sp, #4]
 801c602:	2340      	movs	r3, #64	; 0x40
 801c604:	9300      	str	r3, [sp, #0]
 801c606:	f8d8 62a4 	ldr.w	r6, [r8, #676]	; 0x2a4
 801c60a:	4a41      	ldr	r2, [pc, #260]	; (801c710 <mbedtls_ssl_derive_keys+0x284>)
 801c60c:	f8d8 12a8 	ldr.w	r1, [r8, #680]	; 0x2a8
 801c610:	f508 732b 	add.w	r3, r8, #684	; 0x2ac
 801c614:	4638      	mov	r0, r7
 801c616:	47b0      	blx	r6
        if( ret != 0 )
 801c618:	4606      	mov	r6, r0
 801c61a:	b128      	cbz	r0, 801c628 <mbedtls_ssl_derive_keys+0x19c>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c61c:	4b36      	ldr	r3, [pc, #216]	; (801c6f8 <mbedtls_ssl_derive_keys+0x26c>)
 801c61e:	9300      	str	r3, [sp, #0]
 801c620:	9001      	str	r0, [sp, #4]
 801c622:	f240 2375 	movw	r3, #629	; 0x275
 801c626:	e7cd      	b.n	801c5c4 <mbedtls_ssl_derive_keys+0x138>
        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 801c628:	2142      	movs	r1, #66	; 0x42
 801c62a:	4638      	mov	r0, r7
 801c62c:	f7ff fcca 	bl	801bfc4 <mbedtls_zeroize>
    memcpy( tmp, handshake->randbytes, 64 );
 801c630:	f508 732b 	add.w	r3, r8, #684	; 0x2ac
 801c634:	ae08      	add	r6, sp, #32
 801c636:	f508 773b 	add.w	r7, r8, #748	; 0x2ec
 801c63a:	469a      	mov	sl, r3
 801c63c:	6818      	ldr	r0, [r3, #0]
 801c63e:	6859      	ldr	r1, [r3, #4]
 801c640:	4632      	mov	r2, r6
 801c642:	c203      	stmia	r2!, {r0, r1}
 801c644:	3308      	adds	r3, #8
 801c646:	42bb      	cmp	r3, r7
 801c648:	4616      	mov	r6, r2
 801c64a:	d1f7      	bne.n	801c63c <mbedtls_ssl_derive_keys+0x1b0>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 801c64c:	ae10      	add	r6, sp, #64	; 0x40
 801c64e:	4652      	mov	r2, sl
 801c650:	af18      	add	r7, sp, #96	; 0x60
 801c652:	4633      	mov	r3, r6
 801c654:	cb03      	ldmia	r3!, {r0, r1}
 801c656:	42bb      	cmp	r3, r7
 801c658:	6010      	str	r0, [r2, #0]
 801c65a:	6051      	str	r1, [r2, #4]
 801c65c:	461e      	mov	r6, r3
 801c65e:	f102 0208 	add.w	r2, r2, #8
 801c662:	d1f6      	bne.n	801c652 <mbedtls_ssl_derive_keys+0x1c6>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 801c664:	ae08      	add	r6, sp, #32
 801c666:	f508 7233 	add.w	r2, r8, #716	; 0x2cc
 801c66a:	af10      	add	r7, sp, #64	; 0x40
 801c66c:	4633      	mov	r3, r6
 801c66e:	cb03      	ldmia	r3!, {r0, r1}
 801c670:	42bb      	cmp	r3, r7
 801c672:	6010      	str	r0, [r2, #0]
 801c674:	6051      	str	r1, [r2, #4]
 801c676:	461e      	mov	r6, r3
 801c678:	f102 0208 	add.w	r2, r2, #8
 801c67c:	d1f6      	bne.n	801c66c <mbedtls_ssl_derive_keys+0x1e0>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c67e:	2140      	movs	r1, #64	; 0x40
 801c680:	a808      	add	r0, sp, #32
 801c682:	f7ff fc9f 	bl	801bfc4 <mbedtls_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 801c686:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c68a:	9302      	str	r3, [sp, #8]
 801c68c:	2740      	movs	r7, #64	; 0x40
 801c68e:	ab18      	add	r3, sp, #96	; 0x60
 801c690:	9301      	str	r3, [sp, #4]
 801c692:	9700      	str	r7, [sp, #0]
 801c694:	f8d8 62a4 	ldr.w	r6, [r8, #676]	; 0x2a4
 801c698:	4a1e      	ldr	r2, [pc, #120]	; (801c714 <mbedtls_ssl_derive_keys+0x288>)
 801c69a:	9806      	ldr	r0, [sp, #24]
 801c69c:	4653      	mov	r3, sl
 801c69e:	2130      	movs	r1, #48	; 0x30
 801c6a0:	47b0      	blx	r6
    if( ret != 0 )
 801c6a2:	4606      	mov	r6, r0
 801c6a4:	2800      	cmp	r0, #0
 801c6a6:	d039      	beq.n	801c71c <mbedtls_ssl_derive_keys+0x290>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c6a8:	4b13      	ldr	r3, [pc, #76]	; (801c6f8 <mbedtls_ssl_derive_keys+0x26c>)
 801c6aa:	9300      	str	r3, [sp, #0]
 801c6ac:	9001      	str	r0, [sp, #4]
 801c6ae:	f240 2396 	movw	r3, #662	; 0x296
 801c6b2:	e787      	b.n	801c5c4 <mbedtls_ssl_derive_keys+0x138>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 801c6b4:	4b18      	ldr	r3, [pc, #96]	; (801c718 <mbedtls_ssl_derive_keys+0x28c>)
 801c6b6:	9300      	str	r3, [sp, #0]
 801c6b8:	4a04      	ldr	r2, [pc, #16]	; (801c6cc <mbedtls_ssl_derive_keys+0x240>)
 801c6ba:	f44f 731f 	mov.w	r3, #636	; 0x27c
 801c6be:	2103      	movs	r1, #3
 801c6c0:	4620      	mov	r0, r4
 801c6c2:	f7f3 ffb5 	bl	8010630 <mbedtls_debug_print_msg>
 801c6c6:	e7b3      	b.n	801c630 <mbedtls_ssl_derive_keys+0x1a4>
 801c6c8:	08031a0d 	.word	0x08031a0d
 801c6cc:	080318ba 	.word	0x080318ba
 801c6d0:	08031a1c 	.word	0x08031a1c
 801c6d4:	ffff8f00 	.word	0xffff8f00
 801c6d8:	08031a39 	.word	0x08031a39
 801c6dc:	0801c2a9 	.word	0x0801c2a9
 801c6e0:	0801c3a1 	.word	0x0801c3a1
 801c6e4:	0801c2c9 	.word	0x0801c2c9
 801c6e8:	08031a5a 	.word	0x08031a5a
 801c6ec:	08031a6b 	.word	0x08031a6b
 801c6f0:	08031a88 	.word	0x08031a88
 801c6f4:	08031a71 	.word	0x08031a71
 801c6f8:	08031a95 	.word	0x08031a95
 801c6fc:	0801c289 	.word	0x0801c289
 801c700:	0801c0ed 	.word	0x0801c0ed
 801c704:	0801c015 	.word	0x0801c015
 801c708:	080313ea 	.word	0x080313ea
 801c70c:	ffff9400 	.word	0xffff9400
 801c710:	08031a7a 	.word	0x08031a7a
 801c714:	08031ab8 	.word	0x08031ab8
 801c718:	08031a99 	.word	0x08031a99
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 801c71c:	9b07      	ldr	r3, [sp, #28]
 801c71e:	6898      	ldr	r0, [r3, #8]
 801c720:	f7fd fce8 	bl	801a0f4 <mbedtls_ssl_get_ciphersuite_name>
 801c724:	4ba4      	ldr	r3, [pc, #656]	; (801c9b8 <mbedtls_ssl_derive_keys+0x52c>)
 801c726:	9001      	str	r0, [sp, #4]
 801c728:	9300      	str	r3, [sp, #0]
 801c72a:	4aa4      	ldr	r2, [pc, #656]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c72c:	f240 239b 	movw	r3, #667	; 0x29b
 801c730:	2103      	movs	r1, #3
 801c732:	4620      	mov	r0, r4
 801c734:	f7f3 ff7c 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 801c738:	2330      	movs	r3, #48	; 0x30
 801c73a:	9302      	str	r3, [sp, #8]
 801c73c:	9b06      	ldr	r3, [sp, #24]
 801c73e:	9301      	str	r3, [sp, #4]
 801c740:	4b9f      	ldr	r3, [pc, #636]	; (801c9c0 <mbedtls_ssl_derive_keys+0x534>)
 801c742:	9300      	str	r3, [sp, #0]
 801c744:	4a9d      	ldr	r2, [pc, #628]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c746:	f44f 7327 	mov.w	r3, #668	; 0x29c
 801c74a:	2103      	movs	r1, #3
 801c74c:	4620      	mov	r0, r4
 801c74e:	f7f3 ffcd 	bl	80106ec <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 801c752:	4b9c      	ldr	r3, [pc, #624]	; (801c9c4 <mbedtls_ssl_derive_keys+0x538>)
 801c754:	9300      	str	r3, [sp, #0]
 801c756:	4a99      	ldr	r2, [pc, #612]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c758:	f240 239d 	movw	r3, #669	; 0x29d
 801c75c:	2104      	movs	r1, #4
 801c75e:	4620      	mov	r0, r4
 801c760:	e9cd a701 	strd	sl, r7, [sp, #4]
 801c764:	f7f3 ffc2 	bl	80106ec <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 801c768:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c76c:	9302      	str	r3, [sp, #8]
 801c76e:	ab18      	add	r3, sp, #96	; 0x60
 801c770:	9301      	str	r3, [sp, #4]
 801c772:	4b95      	ldr	r3, [pc, #596]	; (801c9c8 <mbedtls_ssl_derive_keys+0x53c>)
 801c774:	9300      	str	r3, [sp, #0]
 801c776:	4a91      	ldr	r2, [pc, #580]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c778:	f240 239e 	movw	r3, #670	; 0x29e
 801c77c:	2104      	movs	r1, #4
 801c77e:	4620      	mov	r0, r4
 801c780:	f7f3 ffb4 	bl	80106ec <mbedtls_debug_print_buf>
    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 801c784:	4639      	mov	r1, r7
 801c786:	4650      	mov	r0, sl
 801c788:	f7ff fc1c 	bl	801bfc4 <mbedtls_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 801c78c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c790:	08db      	lsrs	r3, r3, #3
 801c792:	606b      	str	r3, [r5, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 801c794:	f899 3001 	ldrb.w	r3, [r9, #1]
 801c798:	2b06      	cmp	r3, #6
 801c79a:	d001      	beq.n	801c7a0 <mbedtls_ssl_derive_keys+0x314>
 801c79c:	2b08      	cmp	r3, #8
 801c79e:	d10e      	bne.n	801c7be <mbedtls_ssl_derive_keys+0x332>
        transform->maclen = 0;
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	616b      	str	r3, [r5, #20]
        transform->fixed_ivlen = 4;
 801c7a4:	210c      	movs	r1, #12
 801c7a6:	2304      	movs	r3, #4
 801c7a8:	e9c5 1303 	strd	r1, r3, [r5, #12]
                            + ( transform->ciphersuite_info->flags &
 801c7ac:	682b      	ldr	r3, [r5, #0]
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 801c7ae:	7f1b      	ldrb	r3, [r3, #28]
 801c7b0:	f013 0f02 	tst.w	r3, #2
                            + ( transform->ciphersuite_info->flags &
 801c7b4:	bf14      	ite	ne
 801c7b6:	2310      	movne	r3, #16
 801c7b8:	2318      	moveq	r3, #24
                transform->minlen += transform->ivlen;
 801c7ba:	60ab      	str	r3, [r5, #8]
 801c7bc:	e028      	b.n	801c810 <mbedtls_ssl_derive_keys+0x384>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 801c7be:	2201      	movs	r2, #1
 801c7c0:	4659      	mov	r1, fp
 801c7c2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801c7c6:	f7f7 fe8f 	bl	80144e8 <mbedtls_md_setup>
 801c7ca:	4606      	mov	r6, r0
 801c7cc:	b938      	cbnz	r0, 801c7de <mbedtls_ssl_derive_keys+0x352>
 801c7ce:	2201      	movs	r2, #1
 801c7d0:	4659      	mov	r1, fp
 801c7d2:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801c7d6:	f7f7 fe87 	bl	80144e8 <mbedtls_md_setup>
 801c7da:	4606      	mov	r6, r0
 801c7dc:	b128      	cbz	r0, 801c7ea <mbedtls_ssl_derive_keys+0x35e>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801c7de:	4b7b      	ldr	r3, [pc, #492]	; (801c9cc <mbedtls_ssl_derive_keys+0x540>)
 801c7e0:	9300      	str	r3, [sp, #0]
 801c7e2:	9601      	str	r6, [sp, #4]
 801c7e4:	f240 23bb 	movw	r3, #699	; 0x2bb
 801c7e8:	e6ec      	b.n	801c5c4 <mbedtls_ssl_derive_keys+0x138>
        transform->maclen = mbedtls_md_get_size( md_info );
 801c7ea:	4658      	mov	r0, fp
 801c7ec:	f7f7 ff96 	bl	801471c <mbedtls_md_get_size>
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c7f0:	9b07      	ldr	r3, [sp, #28]
        transform->maclen = mbedtls_md_get_size( md_info );
 801c7f2:	6168      	str	r0, [r5, #20]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
        transform->ivlen = cipher_info->iv_size;
 801c7f6:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c7fa:	60ea      	str	r2, [r5, #12]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c7fc:	2b01      	cmp	r3, #1
            transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;
 801c7fe:	bf04      	itt	eq
 801c800:	230a      	moveq	r3, #10
 801c802:	616b      	streq	r3, [r5, #20]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 801c804:	f899 3001 	ldrb.w	r3, [r9, #1]
 801c808:	6969      	ldr	r1, [r5, #20]
 801c80a:	2b07      	cmp	r3, #7
 801c80c:	d13f      	bne.n	801c88e <mbedtls_ssl_derive_keys+0x402>
            transform->minlen = transform->maclen;
 801c80e:	60a9      	str	r1, [r5, #8]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 801c810:	696b      	ldr	r3, [r5, #20]
 801c812:	9304      	str	r3, [sp, #16]
 801c814:	68eb      	ldr	r3, [r5, #12]
 801c816:	9303      	str	r3, [sp, #12]
 801c818:	68ab      	ldr	r3, [r5, #8]
 801c81a:	9302      	str	r3, [sp, #8]
 801c81c:	686b      	ldr	r3, [r5, #4]
 801c81e:	9301      	str	r3, [sp, #4]
 801c820:	4b6b      	ldr	r3, [pc, #428]	; (801c9d0 <mbedtls_ssl_derive_keys+0x544>)
 801c822:	9300      	str	r3, [sp, #0]
 801c824:	4a65      	ldr	r2, [pc, #404]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c826:	f240 23ff 	movw	r3, #767	; 0x2ff
 801c82a:	2103      	movs	r1, #3
 801c82c:	4620      	mov	r0, r4
 801c82e:	f7f3 feff 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801c832:	6823      	ldr	r3, [r4, #0]
 801c834:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801c838:	07db      	lsls	r3, r3, #31
 801c83a:	d43a      	bmi.n	801c8b2 <mbedtls_ssl_derive_keys+0x426>
        key1 = keyblk + transform->maclen * 2;
 801c83c:	696b      	ldr	r3, [r5, #20]
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c83e:	686e      	ldr	r6, [r5, #4]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 801c840:	f8d5 8010 	ldr.w	r8, [r5, #16]
        key1 = keyblk + transform->maclen * 2;
 801c844:	ea4f 0a43 	mov.w	sl, r3, lsl #1
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c848:	aa18      	add	r2, sp, #96	; 0x60
 801c84a:	eb0a 0706 	add.w	r7, sl, r6
 801c84e:	4417      	add	r7, r2
        mac_dec = keyblk + transform->maclen;
 801c850:	eb02 0b03 	add.w	fp, r2, r3
                            transform->fixed_ivlen : transform->ivlen;
 801c854:	f1b8 0f00 	cmp.w	r8, #0
 801c858:	d101      	bne.n	801c85e <mbedtls_ssl_derive_keys+0x3d2>
 801c85a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801c85e:	9306      	str	r3, [sp, #24]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 801c860:	4642      	mov	r2, r8
 801c862:	19b9      	adds	r1, r7, r6
 801c864:	f105 0018 	add.w	r0, r5, #24
 801c868:	f005 fd3d 	bl	80222e6 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 801c86c:	eb06 0108 	add.w	r1, r6, r8
 801c870:	4642      	mov	r2, r8
 801c872:	4439      	add	r1, r7
 801c874:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801c878:	f005 fd35 	bl	80222e6 <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801c87c:	6962      	ldr	r2, [r4, #20]
 801c87e:	9b06      	ldr	r3, [sp, #24]
 801c880:	2a00      	cmp	r2, #0
 801c882:	dc1b      	bgt.n	801c8bc <mbedtls_ssl_derive_keys+0x430>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c884:	4b53      	ldr	r3, [pc, #332]	; (801c9d4 <mbedtls_ssl_derive_keys+0x548>)
 801c886:	9300      	str	r3, [sp, #0]
 801c888:	f240 3349 	movw	r3, #841	; 0x349
 801c88c:	e6ac      	b.n	801c5e8 <mbedtls_ssl_derive_keys+0x15c>
                                  + cipher_info->block_size
 801c88e:	f8d9 3014 	ldr.w	r3, [r9, #20]
                                  - transform->maclen % cipher_info->block_size;
 801c892:	fbb1 f1f3 	udiv	r1, r1, r3
 801c896:	fb03 3301 	mla	r3, r3, r1, r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801c89a:	6961      	ldr	r1, [r4, #20]
                transform->minlen = transform->maclen
 801c89c:	60ab      	str	r3, [r5, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801c89e:	3902      	subs	r1, #2
 801c8a0:	2901      	cmp	r1, #1
 801c8a2:	d801      	bhi.n	801c8a8 <mbedtls_ssl_derive_keys+0x41c>
                transform->minlen += transform->ivlen;
 801c8a4:	4413      	add	r3, r2
 801c8a6:	e788      	b.n	801c7ba <mbedtls_ssl_derive_keys+0x32e>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c8a8:	4b4a      	ldr	r3, [pc, #296]	; (801c9d4 <mbedtls_ssl_derive_keys+0x548>)
 801c8aa:	9300      	str	r3, [sp, #0]
 801c8ac:	f240 23f7 	movw	r3, #759	; 0x2f7
 801c8b0:	e69a      	b.n	801c5e8 <mbedtls_ssl_derive_keys+0x15c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c8b2:	4b48      	ldr	r3, [pc, #288]	; (801c9d4 <mbedtls_ssl_derive_keys+0x548>)
 801c8b4:	9300      	str	r3, [sp, #0]
 801c8b6:	f240 332d 	movw	r3, #813	; 0x32d
 801c8ba:	e695      	b.n	801c5e8 <mbedtls_ssl_derive_keys+0x15c>
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, transform->maclen );
 801c8bc:	461a      	mov	r2, r3
 801c8be:	a918      	add	r1, sp, #96	; 0x60
 801c8c0:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801c8c4:	f7f7 fe6a 	bl	801459c <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801c8c8:	f105 0850 	add.w	r8, r5, #80	; 0x50
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, transform->maclen );
 801c8cc:	696a      	ldr	r2, [r5, #20]
 801c8ce:	4659      	mov	r1, fp
 801c8d0:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801c8d4:	f7f7 fe62 	bl	801459c <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801c8d8:	4649      	mov	r1, r9
 801c8da:	4640      	mov	r0, r8
 801c8dc:	f7f3 fb78 	bl	800ffd0 <mbedtls_cipher_setup>
 801c8e0:	4606      	mov	r6, r0
 801c8e2:	b128      	cbz	r0, 801c8f0 <mbedtls_ssl_derive_keys+0x464>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801c8e4:	4b3c      	ldr	r3, [pc, #240]	; (801c9d8 <mbedtls_ssl_derive_keys+0x54c>)
 801c8e6:	9300      	str	r3, [sp, #0]
 801c8e8:	9001      	str	r0, [sp, #4]
 801c8ea:	f240 336d 	movw	r3, #877	; 0x36d
 801c8ee:	e669      	b.n	801c5c4 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 801c8f0:	3590      	adds	r5, #144	; 0x90
 801c8f2:	4649      	mov	r1, r9
 801c8f4:	4628      	mov	r0, r5
 801c8f6:	f7f3 fb6b 	bl	800ffd0 <mbedtls_cipher_setup>
 801c8fa:	4606      	mov	r6, r0
 801c8fc:	b128      	cbz	r0, 801c90a <mbedtls_ssl_derive_keys+0x47e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801c8fe:	4b36      	ldr	r3, [pc, #216]	; (801c9d8 <mbedtls_ssl_derive_keys+0x54c>)
 801c900:	9300      	str	r3, [sp, #0]
 801c902:	9001      	str	r0, [sp, #4]
 801c904:	f44f 735d 	mov.w	r3, #884	; 0x374
 801c908:	e65c      	b.n	801c5c4 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 801c90a:	a918      	add	r1, sp, #96	; 0x60
 801c90c:	2301      	movs	r3, #1
 801c90e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801c912:	4451      	add	r1, sl
 801c914:	4640      	mov	r0, r8
 801c916:	f7f3 f9a9 	bl	800fc6c <mbedtls_cipher_setkey>
 801c91a:	4606      	mov	r6, r0
 801c91c:	b128      	cbz	r0, 801c92a <mbedtls_ssl_derive_keys+0x49e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c91e:	4b2f      	ldr	r3, [pc, #188]	; (801c9dc <mbedtls_ssl_derive_keys+0x550>)
 801c920:	9300      	str	r3, [sp, #0]
 801c922:	9001      	str	r0, [sp, #4]
 801c924:	f44f 735f 	mov.w	r3, #892	; 0x37c
 801c928:	e64c      	b.n	801c5c4 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 801c92a:	4603      	mov	r3, r0
 801c92c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801c930:	4639      	mov	r1, r7
 801c932:	4628      	mov	r0, r5
 801c934:	f7f3 f99a 	bl	800fc6c <mbedtls_cipher_setkey>
 801c938:	4606      	mov	r6, r0
 801c93a:	b128      	cbz	r0, 801c948 <mbedtls_ssl_derive_keys+0x4bc>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c93c:	4b27      	ldr	r3, [pc, #156]	; (801c9dc <mbedtls_ssl_derive_keys+0x550>)
 801c93e:	9300      	str	r3, [sp, #0]
 801c940:	9001      	str	r0, [sp, #4]
 801c942:	f44f 7361 	mov.w	r3, #900	; 0x384
 801c946:	e63d      	b.n	801c5c4 <mbedtls_ssl_derive_keys+0x138>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 801c948:	f899 3001 	ldrb.w	r3, [r9, #1]
 801c94c:	2b02      	cmp	r3, #2
 801c94e:	d123      	bne.n	801c998 <mbedtls_ssl_derive_keys+0x50c>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 801c950:	2104      	movs	r1, #4
 801c952:	4640      	mov	r0, r8
 801c954:	f7f3 fafe 	bl	800ff54 <mbedtls_cipher_set_padding_mode>
 801c958:	4607      	mov	r7, r0
 801c95a:	b158      	cbz	r0, 801c974 <mbedtls_ssl_derive_keys+0x4e8>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801c95c:	4b20      	ldr	r3, [pc, #128]	; (801c9e0 <mbedtls_ssl_derive_keys+0x554>)
 801c95e:	9001      	str	r0, [sp, #4]
 801c960:	9300      	str	r3, [sp, #0]
 801c962:	4a16      	ldr	r2, [pc, #88]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c964:	f240 338e 	movw	r3, #910	; 0x38e
 801c968:	2101      	movs	r1, #1
 801c96a:	4620      	mov	r0, r4
 801c96c:	f7f3 fe90 	bl	8010690 <mbedtls_debug_print_ret>
            return( ret );
 801c970:	463e      	mov	r6, r7
 801c972:	e5af      	b.n	801c4d4 <mbedtls_ssl_derive_keys+0x48>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 801c974:	4628      	mov	r0, r5
 801c976:	2104      	movs	r1, #4
 801c978:	f7f3 faec 	bl	800ff54 <mbedtls_cipher_set_padding_mode>
 801c97c:	4605      	mov	r5, r0
 801c97e:	b158      	cbz	r0, 801c998 <mbedtls_ssl_derive_keys+0x50c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801c980:	4b17      	ldr	r3, [pc, #92]	; (801c9e0 <mbedtls_ssl_derive_keys+0x554>)
 801c982:	9001      	str	r0, [sp, #4]
 801c984:	9300      	str	r3, [sp, #0]
 801c986:	4a0d      	ldr	r2, [pc, #52]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c988:	f240 3395 	movw	r3, #917	; 0x395
 801c98c:	2101      	movs	r1, #1
 801c98e:	4620      	mov	r0, r4
 801c990:	f7f3 fe7e 	bl	8010690 <mbedtls_debug_print_ret>
            return( ret );
 801c994:	462e      	mov	r6, r5
 801c996:	e59d      	b.n	801c4d4 <mbedtls_ssl_derive_keys+0x48>
    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 801c998:	a818      	add	r0, sp, #96	; 0x60
 801c99a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c99e:	f7ff fb11 	bl	801bfc4 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 801c9a2:	4b10      	ldr	r3, [pc, #64]	; (801c9e4 <mbedtls_ssl_derive_keys+0x558>)
 801c9a4:	9300      	str	r3, [sp, #0]
 801c9a6:	4a05      	ldr	r2, [pc, #20]	; (801c9bc <mbedtls_ssl_derive_keys+0x530>)
 801c9a8:	f240 33bd 	movw	r3, #957	; 0x3bd
 801c9ac:	2102      	movs	r1, #2
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	f7f3 fe3e 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801c9b4:	e58e      	b.n	801c4d4 <mbedtls_ssl_derive_keys+0x48>
 801c9b6:	bf00      	nop
 801c9b8:	08031ac6 	.word	0x08031ac6
 801c9bc:	080318ba 	.word	0x080318ba
 801c9c0:	08031a7a 	.word	0x08031a7a
 801c9c4:	08030ec3 	.word	0x08030ec3
 801c9c8:	08031ad7 	.word	0x08031ad7
 801c9cc:	08031516 	.word	0x08031516
 801c9d0:	08031ae1 	.word	0x08031ae1
 801c9d4:	080313ea 	.word	0x080313ea
 801c9d8:	08031b0f 	.word	0x08031b0f
 801c9dc:	08031b24 	.word	0x08031b24
 801c9e0:	08031b3a 	.word	0x08031b3a
 801c9e4:	08031b5a 	.word	0x08031b5a

0801c9e8 <mbedtls_ssl_fetch_input>:
{
 801c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9ec:	b085      	sub	sp, #20
 801c9ee:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801c9f0:	4b43      	ldr	r3, [pc, #268]	; (801cb00 <mbedtls_ssl_fetch_input+0x118>)
 801c9f2:	9300      	str	r3, [sp, #0]
{
 801c9f4:	460e      	mov	r6, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801c9f6:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 801c9fa:	4a42      	ldr	r2, [pc, #264]	; (801cb04 <mbedtls_ssl_fetch_input+0x11c>)
 801c9fc:	2102      	movs	r1, #2
 801c9fe:	f7f3 fe17 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 801ca02:	69e3      	ldr	r3, [r4, #28]
 801ca04:	b97b      	cbnz	r3, 801ca26 <mbedtls_ssl_fetch_input+0x3e>
 801ca06:	6a23      	ldr	r3, [r4, #32]
 801ca08:	b96b      	cbnz	r3, 801ca26 <mbedtls_ssl_fetch_input+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801ca0a:	4b3f      	ldr	r3, [pc, #252]	; (801cb08 <mbedtls_ssl_fetch_input+0x120>)
 801ca0c:	9300      	str	r3, [sp, #0]
 801ca0e:	f640 03a5 	movw	r3, #2213	; 0x8a5
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801ca12:	4a3c      	ldr	r2, [pc, #240]	; (801cb04 <mbedtls_ssl_fetch_input+0x11c>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801ca14:	4d3d      	ldr	r5, [pc, #244]	; (801cb0c <mbedtls_ssl_fetch_input+0x124>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801ca16:	2101      	movs	r1, #1
 801ca18:	4620      	mov	r0, r4
 801ca1a:	f7f3 fe09 	bl	8010630 <mbedtls_debug_print_msg>
}
 801ca1e:	4628      	mov	r0, r5
 801ca20:	b005      	add	sp, #20
 801ca22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 801ca26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801ca28:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801ca2a:	1a9b      	subs	r3, r3, r2
 801ca2c:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801ca30:	3315      	adds	r3, #21
 801ca32:	42b3      	cmp	r3, r6
 801ca34:	d204      	bcs.n	801ca40 <mbedtls_ssl_fetch_input+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801ca36:	4b36      	ldr	r3, [pc, #216]	; (801cb10 <mbedtls_ssl_fetch_input+0x128>)
 801ca38:	9300      	str	r3, [sp, #0]
 801ca3a:	f640 03ab 	movw	r3, #2219	; 0x8ab
 801ca3e:	e7e8      	b.n	801ca12 <mbedtls_ssl_fetch_input+0x2a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801ca40:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801ca42:	4f34      	ldr	r7, [pc, #208]	; (801cb14 <mbedtls_ssl_fetch_input+0x12c>)
 801ca44:	9301      	str	r3, [sp, #4]
 801ca46:	9602      	str	r6, [sp, #8]
 801ca48:	9700      	str	r7, [sp, #0]
 801ca4a:	f640 133e 	movw	r3, #2366	; 0x93e
 801ca4e:	4a2d      	ldr	r2, [pc, #180]	; (801cb04 <mbedtls_ssl_fetch_input+0x11c>)
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801ca50:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 801cb24 <mbedtls_ssl_fetch_input+0x13c>
 801ca54:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801cb04 <mbedtls_ssl_fetch_input+0x11c>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801ca58:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 801cb28 <mbedtls_ssl_fetch_input+0x140>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801ca5c:	2102      	movs	r1, #2
 801ca5e:	4620      	mov	r0, r4
 801ca60:	f7f3 fde6 	bl	8010630 <mbedtls_debug_print_msg>
        while( ssl->in_left < nb_want )
 801ca64:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 801ca66:	42b5      	cmp	r5, r6
 801ca68:	d30a      	bcc.n	801ca80 <mbedtls_ssl_fetch_input+0x98>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 801ca6a:	4b2b      	ldr	r3, [pc, #172]	; (801cb18 <mbedtls_ssl_fetch_input+0x130>)
 801ca6c:	9300      	str	r3, [sp, #0]
 801ca6e:	4a25      	ldr	r2, [pc, #148]	; (801cb04 <mbedtls_ssl_fetch_input+0x11c>)
 801ca70:	f640 1363 	movw	r3, #2403	; 0x963
 801ca74:	2102      	movs	r1, #2
 801ca76:	4620      	mov	r0, r4
 801ca78:	f7f3 fdda 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801ca7c:	2500      	movs	r5, #0
 801ca7e:	e7ce      	b.n	801ca1e <mbedtls_ssl_fetch_input+0x36>
    if( ssl->f_get_timer == NULL )
 801ca80:	6d63      	ldr	r3, [r4, #84]	; 0x54
            len = nb_want - ssl->in_left;
 801ca82:	1b75      	subs	r5, r6, r5
    if( ssl->f_get_timer == NULL )
 801ca84:	b343      	cbz	r3, 801cad8 <mbedtls_ssl_fetch_input+0xf0>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 801ca86:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801ca88:	4798      	blx	r3
 801ca8a:	2802      	cmp	r0, #2
 801ca8c:	d124      	bne.n	801cad8 <mbedtls_ssl_fetch_input+0xf0>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801ca8e:	f8cd 9000 	str.w	r9, [sp]
 801ca92:	2360      	movs	r3, #96	; 0x60
 801ca94:	4642      	mov	r2, r8
 801ca96:	2103      	movs	r1, #3
 801ca98:	4620      	mov	r0, r4
 801ca9a:	f7f3 fdc9 	bl	8010630 <mbedtls_debug_print_msg>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801ca9e:	4655      	mov	r5, sl
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801caa0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801caa2:	9602      	str	r6, [sp, #8]
 801caa4:	e9cd 7300 	strd	r7, r3, [sp]
 801caa8:	4642      	mov	r2, r8
 801caaa:	f640 1356 	movw	r3, #2390	; 0x956
 801caae:	2102      	movs	r1, #2
 801cab0:	4620      	mov	r0, r4
 801cab2:	f7f3 fdbd 	bl	8010630 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 801cab6:	4b19      	ldr	r3, [pc, #100]	; (801cb1c <mbedtls_ssl_fetch_input+0x134>)
 801cab8:	9300      	str	r3, [sp, #0]
 801caba:	9501      	str	r5, [sp, #4]
 801cabc:	f640 1357 	movw	r3, #2391	; 0x957
 801cac0:	4642      	mov	r2, r8
 801cac2:	2102      	movs	r1, #2
 801cac4:	4620      	mov	r0, r4
 801cac6:	f7f3 fde3 	bl	8010690 <mbedtls_debug_print_ret>
            if( ret == 0 )
 801caca:	2d00      	cmp	r5, #0
 801cacc:	d016      	beq.n	801cafc <mbedtls_ssl_fetch_input+0x114>
            if( ret < 0 )
 801cace:	dba6      	blt.n	801ca1e <mbedtls_ssl_fetch_input+0x36>
            ssl->in_left += ret;
 801cad0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801cad2:	441d      	add	r5, r3
 801cad4:	67e5      	str	r5, [r4, #124]	; 0x7c
 801cad6:	e7c5      	b.n	801ca64 <mbedtls_ssl_fetch_input+0x7c>
 801cad8:	e9d4 b008 	ldrd	fp, r0, [r4, #32]
 801cadc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801cade:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801cae0:	4419      	add	r1, r3
                if( ssl->f_recv_timeout != NULL )
 801cae2:	f1bb 0f00 	cmp.w	fp, #0
 801cae6:	d005      	beq.n	801caf4 <mbedtls_ssl_fetch_input+0x10c>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 801cae8:	6823      	ldr	r3, [r4, #0]
 801caea:	462a      	mov	r2, r5
 801caec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801caee:	47d8      	blx	fp
                    ret = ssl->f_recv( ssl->p_bio,
 801caf0:	4605      	mov	r5, r0
 801caf2:	e7d5      	b.n	801caa0 <mbedtls_ssl_fetch_input+0xb8>
 801caf4:	69e3      	ldr	r3, [r4, #28]
 801caf6:	462a      	mov	r2, r5
 801caf8:	4798      	blx	r3
 801cafa:	e7f9      	b.n	801caf0 <mbedtls_ssl_fetch_input+0x108>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 801cafc:	4d08      	ldr	r5, [pc, #32]	; (801cb20 <mbedtls_ssl_fetch_input+0x138>)
 801cafe:	e78e      	b.n	801ca1e <mbedtls_ssl_fetch_input+0x36>
 801cb00:	08031b69 	.word	0x08031b69
 801cb04:	080318ba 	.word	0x080318ba
 801cb08:	08031b78 	.word	0x08031b78
 801cb0c:	ffff8f00 	.word	0xffff8f00
 801cb10:	08031bb4 	.word	0x08031bb4
 801cb14:	08031bd3 	.word	0x08031bd3
 801cb18:	08031c10 	.word	0x08031c10
 801cb1c:	08031bfa 	.word	0x08031bfa
 801cb20:	ffff8d80 	.word	0xffff8d80
 801cb24:	08031bec 	.word	0x08031bec
 801cb28:	ffff9800 	.word	0xffff9800

0801cb2c <mbedtls_ssl_flush_output>:
{
 801cb2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801cb30:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801cb32:	4b3b      	ldr	r3, [pc, #236]	; (801cc20 <mbedtls_ssl_flush_output+0xf4>)
 801cb34:	9300      	str	r3, [sp, #0]
 801cb36:	4a3b      	ldr	r2, [pc, #236]	; (801cc24 <mbedtls_ssl_flush_output+0xf8>)
 801cb38:	f44f 6317 	mov.w	r3, #2416	; 0x970
 801cb3c:	2102      	movs	r1, #2
 801cb3e:	f7f3 fd77 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 801cb42:	69a3      	ldr	r3, [r4, #24]
 801cb44:	b96b      	cbnz	r3, 801cb62 <mbedtls_ssl_flush_output+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cb46:	4b38      	ldr	r3, [pc, #224]	; (801cc28 <mbedtls_ssl_flush_output+0xfc>)
 801cb48:	9300      	str	r3, [sp, #0]
 801cb4a:	4a36      	ldr	r2, [pc, #216]	; (801cc24 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801cb4c:	4d37      	ldr	r5, [pc, #220]	; (801cc2c <mbedtls_ssl_flush_output+0x100>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cb4e:	f640 1375 	movw	r3, #2421	; 0x975
 801cb52:	2101      	movs	r1, #1
 801cb54:	4620      	mov	r0, r4
 801cb56:	f7f3 fd6b 	bl	8010630 <mbedtls_debug_print_msg>
}
 801cb5a:	4628      	mov	r0, r5
 801cb5c:	b004      	add	sp, #16
 801cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->out_left == 0 )
 801cb62:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 801cb66:	b1ed      	cbz	r5, 801cba4 <mbedtls_ssl_flush_output+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801cb68:	4f31      	ldr	r7, [pc, #196]	; (801cc30 <mbedtls_ssl_flush_output+0x104>)
 801cb6a:	4e2e      	ldr	r6, [pc, #184]	; (801cc24 <mbedtls_ssl_flush_output+0xf8>)
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cb6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cc40 <mbedtls_ssl_flush_output+0x114>
    while( ssl->out_left > 0 )
 801cb70:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801cb74:	bb03      	cbnz	r3, 801cbb8 <mbedtls_ssl_flush_output+0x8c>
 801cb76:	2207      	movs	r2, #7
        if( ++ssl->out_ctr[i - 1] != 0 )
 801cb78:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801cb7c:	5c8b      	ldrb	r3, [r1, r2]
 801cb7e:	3301      	adds	r3, #1
 801cb80:	b2db      	uxtb	r3, r3
 801cb82:	548b      	strb	r3, [r1, r2]
 801cb84:	3a01      	subs	r2, #1
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d13f      	bne.n	801cc0a <mbedtls_ssl_flush_output+0xde>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801cb8a:	1c53      	adds	r3, r2, #1
 801cb8c:	d1f4      	bne.n	801cb78 <mbedtls_ssl_flush_output+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801cb8e:	4b29      	ldr	r3, [pc, #164]	; (801cc34 <mbedtls_ssl_flush_output+0x108>)
 801cb90:	9300      	str	r3, [sp, #0]
 801cb92:	4a24      	ldr	r2, [pc, #144]	; (801cc24 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801cb94:	4d28      	ldr	r5, [pc, #160]	; (801cc38 <mbedtls_ssl_flush_output+0x10c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801cb96:	f640 1398 	movw	r3, #2456	; 0x998
 801cb9a:	2101      	movs	r1, #1
 801cb9c:	4620      	mov	r0, r4
 801cb9e:	f7f3 fd47 	bl	8010630 <mbedtls_debug_print_msg>
 801cba2:	e7da      	b.n	801cb5a <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801cba4:	4b25      	ldr	r3, [pc, #148]	; (801cc3c <mbedtls_ssl_flush_output+0x110>)
 801cba6:	9300      	str	r3, [sp, #0]
 801cba8:	4a1e      	ldr	r2, [pc, #120]	; (801cc24 <mbedtls_ssl_flush_output+0xf8>)
 801cbaa:	f640 137c 	movw	r3, #2428	; 0x97c
 801cbae:	2102      	movs	r1, #2
 801cbb0:	4620      	mov	r0, r4
 801cbb2:	f7f3 fd3d 	bl	8010630 <mbedtls_debug_print_msg>
        return( 0 );
 801cbb6:	e7d0      	b.n	801cb5a <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801cbb8:	9302      	str	r3, [sp, #8]
 801cbba:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cbbe:	3305      	adds	r3, #5
 801cbc0:	e9cd 7300 	strd	r7, r3, [sp]
 801cbc4:	4632      	mov	r2, r6
 801cbc6:	f640 1383 	movw	r3, #2435	; 0x983
 801cbca:	2102      	movs	r1, #2
 801cbcc:	4620      	mov	r0, r4
 801cbce:	f7f3 fd2f 	bl	8010630 <mbedtls_debug_print_msg>
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cbd2:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 801cbd6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cbda:	69a3      	ldr	r3, [r4, #24]
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cbdc:	3105      	adds	r1, #5
              ssl->out_msglen - ssl->out_left;
 801cbde:	1a89      	subs	r1, r1, r2
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cbe0:	4401      	add	r1, r0
 801cbe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cbe4:	4798      	blx	r3
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cbe6:	f640 1389 	movw	r3, #2441	; 0x989
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cbea:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cbec:	e9cd 8000 	strd	r8, r0, [sp]
 801cbf0:	4632      	mov	r2, r6
 801cbf2:	2102      	movs	r1, #2
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	f7f3 fd4b 	bl	8010690 <mbedtls_debug_print_ret>
        if( ret <= 0 )
 801cbfa:	2d00      	cmp	r5, #0
 801cbfc:	ddad      	ble.n	801cb5a <mbedtls_ssl_flush_output+0x2e>
        ssl->out_left -= ret;
 801cbfe:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801cc02:	1b5d      	subs	r5, r3, r5
 801cc04:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 801cc08:	e7b2      	b.n	801cb70 <mbedtls_ssl_flush_output+0x44>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801cc0a:	4b0c      	ldr	r3, [pc, #48]	; (801cc3c <mbedtls_ssl_flush_output+0x110>)
 801cc0c:	9300      	str	r3, [sp, #0]
 801cc0e:	4a05      	ldr	r2, [pc, #20]	; (801cc24 <mbedtls_ssl_flush_output+0xf8>)
 801cc10:	f640 139c 	movw	r3, #2460	; 0x99c
 801cc14:	2102      	movs	r1, #2
 801cc16:	4620      	mov	r0, r4
 801cc18:	f7f3 fd0a 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801cc1c:	2500      	movs	r5, #0
 801cc1e:	e79c      	b.n	801cb5a <mbedtls_ssl_flush_output+0x2e>
 801cc20:	08031c1f 	.word	0x08031c1f
 801cc24:	080318ba 	.word	0x080318ba
 801cc28:	08031b78 	.word	0x08031b78
 801cc2c:	ffff8f00 	.word	0xffff8f00
 801cc30:	08031c3f 	.word	0x08031c3f
 801cc34:	08031c6c 	.word	0x08031c6c
 801cc38:	ffff9480 	.word	0xffff9480
 801cc3c:	08031c2f 	.word	0x08031c2f
 801cc40:	08031c60 	.word	0x08031c60

0801cc44 <mbedtls_ssl_write_record>:
{
 801cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc48:	b08f      	sub	sp, #60	; 0x3c
 801cc4a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cc4c:	4bb9      	ldr	r3, [pc, #740]	; (801cf34 <mbedtls_ssl_write_record+0x2f0>)
    size_t len = ssl->out_msglen;
 801cc4e:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cc52:	4ab9      	ldr	r2, [pc, #740]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801cc54:	9300      	str	r3, [sp, #0]
 801cc56:	2102      	movs	r1, #2
 801cc58:	f640 238d 	movw	r3, #2701	; 0xa8d
 801cc5c:	f7f3 fce8 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801cc60:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801cc64:	2b16      	cmp	r3, #22
 801cc66:	d126      	bne.n	801ccb6 <mbedtls_ssl_write_record+0x72>
        out_msg_type = ssl->out_msg[0];
 801cc68:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cc6c:	780a      	ldrb	r2, [r1, #0]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 801cc6e:	b17a      	cbz	r2, 801cc90 <mbedtls_ssl_write_record+0x4c>
 801cc70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cc72:	b96b      	cbnz	r3, 801cc90 <mbedtls_ssl_write_record+0x4c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cc74:	4bb1      	ldr	r3, [pc, #708]	; (801cf3c <mbedtls_ssl_write_record+0x2f8>)
 801cc76:	9300      	str	r3, [sp, #0]
 801cc78:	4aaf      	ldr	r2, [pc, #700]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801cc7a:	4db1      	ldr	r5, [pc, #708]	; (801cf40 <mbedtls_ssl_write_record+0x2fc>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cc7c:	f640 239f 	movw	r3, #2719	; 0xa9f
 801cc80:	2101      	movs	r1, #1
 801cc82:	4620      	mov	r0, r4
 801cc84:	f7f3 fcd4 	bl	8010630 <mbedtls_debug_print_msg>
}
 801cc88:	4628      	mov	r0, r5
 801cc8a:	b00f      	add	sp, #60	; 0x3c
 801cc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 801cc90:	1f2b      	subs	r3, r5, #4
 801cc92:	0c18      	lsrs	r0, r3, #16
 801cc94:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 801cc96:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cc9a:	0a18      	lsrs	r0, r3, #8
 801cc9c:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 801cc9e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cca2:	70cb      	strb	r3, [r1, #3]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 801cca4:	b13a      	cbz	r2, 801ccb6 <mbedtls_ssl_write_record+0x72>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 801cca6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cca8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801ccac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801ccb0:	462a      	mov	r2, r5
 801ccb2:	4620      	mov	r0, r4
 801ccb4:	4798      	blx	r3
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 801ccb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801ccba:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 801ccbe:	701a      	strb	r2, [r3, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 801ccc0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 801ccc4:	6962      	ldr	r2, [r4, #20]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 801ccc6:	6921      	ldr	r1, [r4, #16]
 801ccc8:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
 801ccca:	709a      	strb	r2, [r3, #2]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 801cccc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801ccd0:	0a2a      	lsrs	r2, r5, #8
 801ccd2:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 801ccd4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801ccd8:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 801ccda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	f000 81e0 	beq.w	801d0a2 <mbedtls_ssl_write_record+0x45e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 801cce2:	4b98      	ldr	r3, [pc, #608]	; (801cf44 <mbedtls_ssl_write_record+0x300>)
 801cce4:	9300      	str	r3, [sp, #0]
 801cce6:	4a94      	ldr	r2, [pc, #592]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801cce8:	f240 43ea 	movw	r3, #1258	; 0x4ea
 801ccec:	2102      	movs	r1, #2
 801ccee:	4620      	mov	r0, r4
 801ccf0:	f7f3 fc9e 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 801ccf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ccf6:	b10b      	cbz	r3, 801ccfc <mbedtls_ssl_write_record+0xb8>
 801ccf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ccfa:	b953      	cbnz	r3, 801cd12 <mbedtls_ssl_write_record+0xce>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ccfc:	4b8f      	ldr	r3, [pc, #572]	; (801cf3c <mbedtls_ssl_write_record+0x2f8>)
 801ccfe:	9300      	str	r3, [sp, #0]
 801cd00:	f240 43ee 	movw	r3, #1262	; 0x4ee
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cd04:	4a8c      	ldr	r2, [pc, #560]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801cd06:	4d8e      	ldr	r5, [pc, #568]	; (801cf40 <mbedtls_ssl_write_record+0x2fc>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cd08:	2101      	movs	r1, #1
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	f7f3 fc90 	bl	8010630 <mbedtls_debug_print_msg>
 801cd10:	e0fd      	b.n	801cf0e <mbedtls_ssl_write_record+0x2ca>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801cd12:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cd14:	b105      	cbz	r5, 801cd18 <mbedtls_ssl_write_record+0xd4>
    return ctx->cipher_info->mode;
 801cd16:	786d      	ldrb	r5, [r5, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 801cd18:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cd1c:	9302      	str	r3, [sp, #8]
 801cd1e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801cd22:	9301      	str	r3, [sp, #4]
 801cd24:	4b88      	ldr	r3, [pc, #544]	; (801cf48 <mbedtls_ssl_write_record+0x304>)
 801cd26:	9300      	str	r3, [sp, #0]
 801cd28:	4a83      	ldr	r2, [pc, #524]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801cd2a:	f240 43f5 	movw	r3, #1269	; 0x4f5
 801cd2e:	2104      	movs	r1, #4
 801cd30:	4620      	mov	r0, r4
 801cd32:	f7f3 fcdb 	bl	80106ec <mbedtls_debug_print_buf>
    if( mode == MBEDTLS_MODE_STREAM ||
 801cd36:	2d07      	cmp	r5, #7
 801cd38:	d002      	beq.n	801cd40 <mbedtls_ssl_write_record+0xfc>
 801cd3a:	2d02      	cmp	r5, #2
 801cd3c:	f040 808e 	bne.w	801ce5c <mbedtls_ssl_write_record+0x218>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801cd40:	6963      	ldr	r3, [r4, #20]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	f340 8085 	ble.w	801ce52 <mbedtls_ssl_write_record+0x20e>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 801cd48:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cd4a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801cd4e:	2208      	movs	r2, #8
 801cd50:	3038      	adds	r0, #56	; 0x38
 801cd52:	f7f7 fc83 	bl	801465c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 801cd56:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cd58:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801cd5c:	2203      	movs	r2, #3
 801cd5e:	3038      	adds	r0, #56	; 0x38
 801cd60:	f7f7 fc7c 	bl	801465c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 801cd64:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cd66:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801cd6a:	2202      	movs	r2, #2
 801cd6c:	3038      	adds	r0, #56	; 0x38
 801cd6e:	f7f7 fc75 	bl	801465c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 801cd72:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cd74:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cd78:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cd7c:	3038      	adds	r0, #56	; 0x38
 801cd7e:	f7f7 fc6d 	bl	801465c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,
 801cd82:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cd86:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cd8a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cd8c:	4419      	add	r1, r3
 801cd8e:	3038      	adds	r0, #56	; 0x38
 801cd90:	f7f7 fc74 	bl	801467c <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 801cd94:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cd96:	3038      	adds	r0, #56	; 0x38
 801cd98:	f7f7 fc9c 	bl	80146d4 <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 801cd9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cd9e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cda2:	695b      	ldr	r3, [r3, #20]
 801cda4:	9302      	str	r3, [sp, #8]
 801cda6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801cdaa:	4413      	add	r3, r2
 801cdac:	9301      	str	r3, [sp, #4]
 801cdae:	4b67      	ldr	r3, [pc, #412]	; (801cf4c <mbedtls_ssl_write_record+0x308>)
 801cdb0:	9300      	str	r3, [sp, #0]
 801cdb2:	4a61      	ldr	r2, [pc, #388]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801cdb4:	f240 5322 	movw	r3, #1314	; 0x522
 801cdb8:	2104      	movs	r1, #4
 801cdba:	4620      	mov	r0, r4
 801cdbc:	f7f3 fc96 	bl	80106ec <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->maclen;
 801cdc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cdc2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cdc6:	6952      	ldr	r2, [r2, #20]
 801cdc8:	4413      	add	r3, r2
 801cdca:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        auth_done++;
 801cdce:	2701      	movs	r7, #1
    if( mode == MBEDTLS_MODE_GCM ||
 801cdd0:	2d06      	cmp	r5, #6
 801cdd2:	d002      	beq.n	801cdda <mbedtls_ssl_write_record+0x196>
 801cdd4:	2d08      	cmp	r5, #8
 801cdd6:	f040 80dd 	bne.w	801cf94 <mbedtls_ssl_write_record+0x350>
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cdda:	6c23      	ldr	r3, [r4, #64]	; 0x40
        memcpy( add_data, ssl->out_ctr, 8 );
 801cddc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cde0:	681b      	ldr	r3, [r3, #0]
        memcpy( add_data, ssl->out_ctr, 8 );
 801cde2:	6810      	ldr	r0, [r2, #0]
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cde4:	7f1b      	ldrb	r3, [r3, #28]
        memcpy( add_data, ssl->out_ctr, 8 );
 801cde6:	6851      	ldr	r1, [r2, #4]
 801cde8:	ad0a      	add	r5, sp, #40	; 0x28
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cdea:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
 801cdee:	462b      	mov	r3, r5
 801cdf0:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 801cdf2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801cdf6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801cdfa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801cdfe:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801ce02:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        ver[0] = (unsigned char) major;
 801ce06:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        add_data[12] = ssl->out_msglen & 0xFF;
 801ce0a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801ce0e:	ea4f 2213 	mov.w	r2, r3, lsr #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801ce12:	f04f 0b0d 	mov.w	fp, #13
 801ce16:	4b4e      	ldr	r3, [pc, #312]	; (801cf50 <mbedtls_ssl_write_record+0x30c>)
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801ce18:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801ce1c:	9300      	str	r3, [sp, #0]
 801ce1e:	4a46      	ldr	r2, [pc, #280]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801ce20:	f240 535b 	movw	r3, #1371	; 0x55b
 801ce24:	f04f 0104 	mov.w	r1, #4
 801ce28:	e9cd 5b01 	strd	r5, fp, [sp, #4]
 801ce2c:	4620      	mov	r0, r4
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801ce2e:	bf0c      	ite	eq
 801ce30:	f04f 0810 	moveq.w	r8, #16
 801ce34:	f04f 0808 	movne.w	r8, #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801ce38:	f7f3 fc58 	bl	80106ec <mbedtls_debug_print_buf>
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 801ce3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce3e:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 801ce42:	1a52      	subs	r2, r2, r1
 801ce44:	2a08      	cmp	r2, #8
 801ce46:	d00b      	beq.n	801ce60 <mbedtls_ssl_write_record+0x21c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce48:	4b3c      	ldr	r3, [pc, #240]	; (801cf3c <mbedtls_ssl_write_record+0x2f8>)
 801ce4a:	9300      	str	r3, [sp, #0]
 801ce4c:	f240 5363 	movw	r3, #1379	; 0x563
 801ce50:	e758      	b.n	801cd04 <mbedtls_ssl_write_record+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce52:	4b3a      	ldr	r3, [pc, #232]	; (801cf3c <mbedtls_ssl_write_record+0x2f8>)
 801ce54:	9300      	str	r3, [sp, #0]
 801ce56:	f240 531c 	movw	r3, #1308	; 0x51c
 801ce5a:	e753      	b.n	801cd04 <mbedtls_ssl_write_record+0xc0>
    int auth_done = 0;
 801ce5c:	2700      	movs	r7, #0
 801ce5e:	e7b7      	b.n	801cdd0 <mbedtls_ssl_write_record+0x18c>
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 801ce60:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801ce64:	3318      	adds	r3, #24
 801ce66:	6802      	ldr	r2, [r0, #0]
 801ce68:	505a      	str	r2, [r3, r1]
 801ce6a:	185e      	adds	r6, r3, r1
 801ce6c:	6842      	ldr	r2, [r0, #4]
 801ce6e:	6072      	str	r2, [r6, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 801ce70:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801ce74:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 801ce78:	680b      	ldr	r3, [r1, #0]
 801ce7a:	6013      	str	r3, [r2, #0]
 801ce7c:	684b      	ldr	r3, [r1, #4]
 801ce7e:	6053      	str	r3, [r2, #4]
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 801ce80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801ce82:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801ce86:	1a9b      	subs	r3, r3, r2
 801ce88:	9302      	str	r3, [sp, #8]
 801ce8a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801ce8e:	9301      	str	r3, [sp, #4]
 801ce90:	4b30      	ldr	r3, [pc, #192]	; (801cf54 <mbedtls_ssl_write_record+0x310>)
 801ce92:	9300      	str	r3, [sp, #0]
 801ce94:	4a28      	ldr	r2, [pc, #160]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801ce96:	f240 536c 	movw	r3, #1388	; 0x56c
 801ce9a:	2104      	movs	r1, #4
 801ce9c:	4620      	mov	r0, r4
 801ce9e:	f7f3 fc25 	bl	80106ec <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cea2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        enc_msglen = ssl->out_msglen;
 801cea4:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cea8:	68d3      	ldr	r3, [r2, #12]
 801ceaa:	6912      	ldr	r2, [r2, #16]
        enc_msg = ssl->out_msg;
 801ceac:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
 801ceb0:	4433      	add	r3, r6
 801ceb2:	1a9b      	subs	r3, r3, r2
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
        ssl->out_msglen += ssl->transform_out->ivlen -
 801ceba:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801cebe:	4b26      	ldr	r3, [pc, #152]	; (801cf58 <mbedtls_ssl_write_record+0x314>)
 801cec0:	9300      	str	r3, [sp, #0]
 801cec2:	4a1d      	ldr	r2, [pc, #116]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801cec4:	f44f 63af 	mov.w	r3, #1400	; 0x578
 801cec8:	2103      	movs	r1, #3
 801ceca:	4620      	mov	r0, r4
 801cecc:	f7f3 fbb0 	bl	8010630 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 801ced0:	eb09 0a06 	add.w	sl, r9, r6
 801ced4:	ab09      	add	r3, sp, #36	; 0x24
 801ced6:	e9cd 9303 	strd	r9, r3, [sp, #12]
 801ceda:	e9cd a805 	strd	sl, r8, [sp, #20]
 801cede:	e9cd 9601 	strd	r9, r6, [sp, #4]
 801cee2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cee4:	f8cd b000 	str.w	fp, [sp]
 801cee8:	462b      	mov	r3, r5
 801ceea:	68c2      	ldr	r2, [r0, #12]
 801ceec:	f100 0118 	add.w	r1, r0, #24
 801cef0:	3050      	adds	r0, #80	; 0x50
 801cef2:	f7f3 f8ad 	bl	8010050 <mbedtls_cipher_auth_encrypt>
 801cef6:	4605      	mov	r5, r0
 801cef8:	b1a0      	cbz	r0, 801cf24 <mbedtls_ssl_write_record+0x2e0>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 801cefa:	4b18      	ldr	r3, [pc, #96]	; (801cf5c <mbedtls_ssl_write_record+0x318>)
 801cefc:	9300      	str	r3, [sp, #0]
 801cefe:	9001      	str	r0, [sp, #4]
 801cf00:	f240 5385 	movw	r3, #1413	; 0x585
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801cf04:	4a0c      	ldr	r2, [pc, #48]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801cf06:	2101      	movs	r1, #1
 801cf08:	4620      	mov	r0, r4
 801cf0a:	f7f3 fbc1 	bl	8010690 <mbedtls_debug_print_ret>
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 801cf0e:	4b14      	ldr	r3, [pc, #80]	; (801cf60 <mbedtls_ssl_write_record+0x31c>)
 801cf10:	9300      	str	r3, [sp, #0]
 801cf12:	9501      	str	r5, [sp, #4]
 801cf14:	f640 3308 	movw	r3, #2824	; 0xb08
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801cf18:	4a07      	ldr	r2, [pc, #28]	; (801cf38 <mbedtls_ssl_write_record+0x2f4>)
 801cf1a:	2101      	movs	r1, #1
 801cf1c:	4620      	mov	r0, r4
 801cf1e:	f7f3 fbb7 	bl	8010690 <mbedtls_debug_print_ret>
        return( ret );
 801cf22:	e6b1      	b.n	801cc88 <mbedtls_ssl_write_record+0x44>
        if( olen != enc_msglen )
 801cf24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf26:	429e      	cmp	r6, r3
 801cf28:	d01c      	beq.n	801cf64 <mbedtls_ssl_write_record+0x320>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cf2a:	4b04      	ldr	r3, [pc, #16]	; (801cf3c <mbedtls_ssl_write_record+0x2f8>)
 801cf2c:	9300      	str	r3, [sp, #0]
 801cf2e:	f240 538b 	movw	r3, #1419	; 0x58b
 801cf32:	e6e7      	b.n	801cd04 <mbedtls_ssl_write_record+0xc0>
 801cf34:	08031c90 	.word	0x08031c90
 801cf38:	080318ba 	.word	0x080318ba
 801cf3c:	080313ea 	.word	0x080313ea
 801cf40:	ffff9400 	.word	0xffff9400
 801cf44:	08031ca0 	.word	0x08031ca0
 801cf48:	08031caf 	.word	0x08031caf
 801cf4c:	08031cce 	.word	0x08031cce
 801cf50:	08031cdb 	.word	0x08031cdb
 801cf54:	08031cf9 	.word	0x08031cf9
 801cf58:	08031d01 	.word	0x08031d01
 801cf5c:	08031d3c 	.word	0x08031d3c
 801cf60:	08031ddd 	.word	0x08031ddd
        ssl->out_msglen += taglen;
 801cf64:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801cf68:	4a70      	ldr	r2, [pc, #448]	; (801d12c <mbedtls_ssl_write_record+0x4e8>)
        ssl->out_msglen += taglen;
 801cf6a:	4443      	add	r3, r8
 801cf6c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801cf70:	4b6f      	ldr	r3, [pc, #444]	; (801d130 <mbedtls_ssl_write_record+0x4ec>)
 801cf72:	9300      	str	r3, [sp, #0]
 801cf74:	e9cd a801 	strd	sl, r8, [sp, #4]
 801cf78:	f240 5392 	movw	r3, #1426	; 0x592
 801cf7c:	2104      	movs	r1, #4
 801cf7e:	4620      	mov	r0, r4
        auth_done++;
 801cf80:	3701      	adds	r7, #1
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801cf82:	f7f3 fbb3 	bl	80106ec <mbedtls_debug_print_buf>
    if( auth_done != 1 )
 801cf86:	2f01      	cmp	r7, #1
 801cf88:	d079      	beq.n	801d07e <mbedtls_ssl_write_record+0x43a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cf8a:	4b6a      	ldr	r3, [pc, #424]	; (801d134 <mbedtls_ssl_write_record+0x4f0>)
 801cf8c:	9300      	str	r3, [sp, #0]
 801cf8e:	f240 6314 	movw	r3, #1556	; 0x614
 801cf92:	e6b7      	b.n	801cd04 <mbedtls_ssl_write_record+0xc0>
    if( mode == MBEDTLS_MODE_CBC )
 801cf94:	2d02      	cmp	r5, #2
 801cf96:	d16d      	bne.n	801d074 <mbedtls_ssl_write_record+0x430>
        size_t enc_msglen, padlen, olen = 0, i;
 801cf98:	2300      	movs	r3, #0
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801cf9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        size_t enc_msglen, padlen, olen = 0, i;
 801cf9c:	930a      	str	r3, [sp, #40]	; 0x28
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801cf9e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 801cfa2:	68d2      	ldr	r2, [r2, #12]
 801cfa4:	1c48      	adds	r0, r1, #1
 801cfa6:	fbb0 f6f2 	udiv	r6, r0, r2
 801cfaa:	fb02 0616 	mls	r6, r2, r6, r0
 801cfae:	1b96      	subs	r6, r2, r6
        if( padlen == ssl->transform_out->ivlen )
 801cfb0:	42b2      	cmp	r2, r6
 801cfb2:	f000 80b5 	beq.w	801d120 <mbedtls_ssl_write_record+0x4dc>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801cfb6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801cfba:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 801cfbe:	441a      	add	r2, r3
        for( i = 0; i <= padlen; i++ )
 801cfc0:	3301      	adds	r3, #1
 801cfc2:	429e      	cmp	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801cfc4:	5456      	strb	r6, [r2, r1]
        for( i = 0; i <= padlen; i++ )
 801cfc6:	d2f6      	bcs.n	801cfb6 <mbedtls_ssl_write_record+0x372>
        ssl->out_msglen += padlen + 1;
 801cfc8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cfcc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cfce:	3301      	adds	r3, #1
 801cfd0:	eb03 0806 	add.w	r8, r3, r6
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801cfd4:	6963      	ldr	r3, [r4, #20]
        ssl->out_msglen += padlen + 1;
 801cfd6:	f8c4 80a8 	str.w	r8, [r4, #168]	; 0xa8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801cfda:	2b01      	cmp	r3, #1
 801cfdc:	68ca      	ldr	r2, [r1, #12]
 801cfde:	dc27      	bgt.n	801d030 <mbedtls_ssl_write_record+0x3ec>
        enc_msg = ssl->out_msg;
 801cfe0:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801cfe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cfe6:	4a51      	ldr	r2, [pc, #324]	; (801d12c <mbedtls_ssl_write_record+0x4e8>)
 801cfe8:	3601      	adds	r6, #1
 801cfea:	9603      	str	r6, [sp, #12]
 801cfec:	68db      	ldr	r3, [r3, #12]
 801cfee:	9302      	str	r3, [sp, #8]
 801cff0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cff4:	9301      	str	r3, [sp, #4]
 801cff6:	4b50      	ldr	r3, [pc, #320]	; (801d138 <mbedtls_ssl_write_record+0x4f4>)
 801cff8:	9300      	str	r3, [sp, #0]
 801cffa:	2103      	movs	r1, #3
 801cffc:	f240 53c9 	movw	r3, #1481	; 0x5c9
 801d000:	4620      	mov	r0, r4
 801d002:	f7f3 fb15 	bl	8010630 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 801d006:	ab0a      	add	r3, sp, #40	; 0x28
 801d008:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801d00c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d00e:	f8cd 8000 	str.w	r8, [sp]
 801d012:	462b      	mov	r3, r5
 801d014:	68c2      	ldr	r2, [r0, #12]
 801d016:	f100 0118 	add.w	r1, r0, #24
 801d01a:	3050      	adds	r0, #80	; 0x50
 801d01c:	f7f2 fff6 	bl	801000c <mbedtls_cipher_crypt>
 801d020:	4605      	mov	r5, r0
 801d022:	b1f8      	cbz	r0, 801d064 <mbedtls_ssl_write_record+0x420>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d024:	4b45      	ldr	r3, [pc, #276]	; (801d13c <mbedtls_ssl_write_record+0x4f8>)
 801d026:	9300      	str	r3, [sp, #0]
 801d028:	9001      	str	r0, [sp, #4]
 801d02a:	f240 53d1 	movw	r3, #1489	; 0x5d1
 801d02e:	e769      	b.n	801cf04 <mbedtls_ssl_write_record+0x2c0>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 801d030:	6823      	ldr	r3, [r4, #0]
 801d032:	3118      	adds	r1, #24
 801d034:	699d      	ldr	r5, [r3, #24]
 801d036:	69d8      	ldr	r0, [r3, #28]
 801d038:	47a8      	blx	r5
            if( ret != 0 )
 801d03a:	4605      	mov	r5, r0
 801d03c:	2800      	cmp	r0, #0
 801d03e:	f47f af66 	bne.w	801cf0e <mbedtls_ssl_write_record+0x2ca>
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 801d042:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d044:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 801d048:	68ca      	ldr	r2, [r1, #12]
 801d04a:	3118      	adds	r1, #24
 801d04c:	f005 f94b 	bl	80222e6 <memcpy>
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d050:	6c23      	ldr	r3, [r4, #64]	; 0x40
            enc_msglen = ssl->out_msglen;
 801d052:	f8d4 80a8 	ldr.w	r8, [r4, #168]	; 0xa8
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d056:	68db      	ldr	r3, [r3, #12]
            enc_msg = ssl->out_msg;
 801d058:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d05c:	4443      	add	r3, r8
 801d05e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801d062:	e7bf      	b.n	801cfe4 <mbedtls_ssl_write_record+0x3a0>
        if( enc_msglen != olen )
 801d064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d066:	4598      	cmp	r8, r3
 801d068:	d08d      	beq.n	801cf86 <mbedtls_ssl_write_record+0x342>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d06a:	4b32      	ldr	r3, [pc, #200]	; (801d134 <mbedtls_ssl_write_record+0x4f0>)
 801d06c:	9300      	str	r3, [sp, #0]
 801d06e:	f240 53d7 	movw	r3, #1495	; 0x5d7
 801d072:	e647      	b.n	801cd04 <mbedtls_ssl_write_record+0xc0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d074:	4b2f      	ldr	r3, [pc, #188]	; (801d134 <mbedtls_ssl_write_record+0x4f0>)
 801d076:	9300      	str	r3, [sp, #0]
 801d078:	f240 630d 	movw	r3, #1549	; 0x60d
 801d07c:	e642      	b.n	801cd04 <mbedtls_ssl_write_record+0xc0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 801d07e:	4b30      	ldr	r3, [pc, #192]	; (801d140 <mbedtls_ssl_write_record+0x4fc>)
 801d080:	9300      	str	r3, [sp, #0]
 801d082:	4a2a      	ldr	r2, [pc, #168]	; (801d12c <mbedtls_ssl_write_record+0x4e8>)
 801d084:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801d088:	2102      	movs	r1, #2
 801d08a:	4620      	mov	r0, r4
 801d08c:	f7f3 fad0 	bl	8010630 <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 801d090:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 801d094:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801d098:	0a19      	lsrs	r1, r3, #8
 801d09a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 801d09c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801d0a0:	7053      	strb	r3, [r2, #1]
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 801d0a2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d0a6:	3305      	adds	r3, #5
 801d0a8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 801d0ac:	e9d4 2325 	ldrd	r2, r3, [r4, #148]	; 0x94
 801d0b0:	881b      	ldrh	r3, [r3, #0]
 801d0b2:	ba5b      	rev16	r3, r3
 801d0b4:	b29b      	uxth	r3, r3
 801d0b6:	9304      	str	r3, [sp, #16]
 801d0b8:	7893      	ldrb	r3, [r2, #2]
 801d0ba:	9303      	str	r3, [sp, #12]
 801d0bc:	7853      	ldrb	r3, [r2, #1]
 801d0be:	9302      	str	r3, [sp, #8]
 801d0c0:	7813      	ldrb	r3, [r2, #0]
 801d0c2:	9301      	str	r3, [sp, #4]
 801d0c4:	4b1f      	ldr	r3, [pc, #124]	; (801d144 <mbedtls_ssl_write_record+0x500>)
 801d0c6:	9300      	str	r3, [sp, #0]
 801d0c8:	4a18      	ldr	r2, [pc, #96]	; (801d12c <mbedtls_ssl_write_record+0x4e8>)
 801d0ca:	f640 3316 	movw	r3, #2838	; 0xb16
 801d0ce:	2103      	movs	r1, #3
 801d0d0:	4620      	mov	r0, r4
 801d0d2:	f7f3 faad 	bl	8010630 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 801d0d6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d0da:	4a14      	ldr	r2, [pc, #80]	; (801d12c <mbedtls_ssl_write_record+0x4e8>)
 801d0dc:	3305      	adds	r3, #5
 801d0de:	9302      	str	r3, [sp, #8]
 801d0e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801d0e4:	9301      	str	r3, [sp, #4]
 801d0e6:	4b18      	ldr	r3, [pc, #96]	; (801d148 <mbedtls_ssl_write_record+0x504>)
 801d0e8:	9300      	str	r3, [sp, #0]
 801d0ea:	2104      	movs	r1, #4
 801d0ec:	f640 3319 	movw	r3, #2841	; 0xb19
 801d0f0:	4620      	mov	r0, r4
 801d0f2:	f7f3 fafb 	bl	80106ec <mbedtls_debug_print_buf>
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801d0f6:	4620      	mov	r0, r4
 801d0f8:	f7ff fd18 	bl	801cb2c <mbedtls_ssl_flush_output>
 801d0fc:	4605      	mov	r5, r0
 801d0fe:	b128      	cbz	r0, 801d10c <mbedtls_ssl_write_record+0x4c8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801d100:	4b12      	ldr	r3, [pc, #72]	; (801d14c <mbedtls_ssl_write_record+0x508>)
 801d102:	9300      	str	r3, [sp, #0]
 801d104:	9001      	str	r0, [sp, #4]
 801d106:	f640 331e 	movw	r3, #2846	; 0xb1e
 801d10a:	e705      	b.n	801cf18 <mbedtls_ssl_write_record+0x2d4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 801d10c:	4b10      	ldr	r3, [pc, #64]	; (801d150 <mbedtls_ssl_write_record+0x50c>)
 801d10e:	9300      	str	r3, [sp, #0]
 801d110:	4a06      	ldr	r2, [pc, #24]	; (801d12c <mbedtls_ssl_write_record+0x4e8>)
 801d112:	f640 3322 	movw	r3, #2850	; 0xb22
 801d116:	2102      	movs	r1, #2
 801d118:	4620      	mov	r0, r4
 801d11a:	f7f3 fa89 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801d11e:	e5b3      	b.n	801cc88 <mbedtls_ssl_write_record+0x44>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801d120:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
            padlen = 0;
 801d124:	461e      	mov	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801d126:	5453      	strb	r3, [r2, r1]
 801d128:	e74e      	b.n	801cfc8 <mbedtls_ssl_write_record+0x384>
 801d12a:	bf00      	nop
 801d12c:	080318ba 	.word	0x080318ba
 801d130:	08031d58 	.word	0x08031d58
 801d134:	080313ea 	.word	0x080313ea
 801d138:	08031d6b 	.word	0x08031d6b
 801d13c:	08031db9 	.word	0x08031db9
 801d140:	08031dce 	.word	0x08031dce
 801d144:	08031ded 	.word	0x08031ded
 801d148:	08031e29 	.word	0x08031e29
 801d14c:	08031e47 	.word	0x08031e47
 801d150:	08031e60 	.word	0x08031e60

0801d154 <mbedtls_ssl_prepare_handshake_record>:
{
 801d154:	b530      	push	{r4, r5, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d156:	6f81      	ldr	r1, [r0, #120]	; 0x78
 801d158:	2903      	cmp	r1, #3
{
 801d15a:	b085      	sub	sp, #20
 801d15c:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d15e:	d80b      	bhi.n	801d178 <mbedtls_ssl_prepare_handshake_record+0x24>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 801d160:	4b1a      	ldr	r3, [pc, #104]	; (801d1cc <mbedtls_ssl_prepare_handshake_record+0x78>)
 801d162:	9101      	str	r1, [sp, #4]
 801d164:	9300      	str	r3, [sp, #0]
 801d166:	4a1a      	ldr	r2, [pc, #104]	; (801d1d0 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d168:	f640 4306 	movw	r3, #3078	; 0xc06
 801d16c:	2101      	movs	r1, #1
 801d16e:	f7f3 fa5f 	bl	8010630 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d172:	4818      	ldr	r0, [pc, #96]	; (801d1d4 <mbedtls_ssl_prepare_handshake_record+0x80>)
}
 801d174:	b005      	add	sp, #20
 801d176:	bd30      	pop	{r4, r5, pc}
                    ( ssl->in_msg[1] << 16 ) |
 801d178:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    ( ssl->in_msg[2] << 8  ) |
 801d17a:	7893      	ldrb	r3, [r2, #2]
                    ( ssl->in_msg[1] << 16 ) |
 801d17c:	7855      	ldrb	r5, [r2, #1]
                    ( ssl->in_msg[2] << 8  ) |
 801d17e:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 801d180:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                      ssl->in_msg[3] );
 801d184:	78d5      	ldrb	r5, [r2, #3]
                    ( ssl->in_msg[2] << 8  ) |
 801d186:	432b      	orrs	r3, r5
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 801d188:	3304      	adds	r3, #4
 801d18a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 801d18e:	9303      	str	r3, [sp, #12]
 801d190:	7813      	ldrb	r3, [r2, #0]
 801d192:	4a0f      	ldr	r2, [pc, #60]	; (801d1d0 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d194:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801d198:	4b0f      	ldr	r3, [pc, #60]	; (801d1d8 <mbedtls_ssl_prepare_handshake_record+0x84>)
 801d19a:	9300      	str	r3, [sp, #0]
 801d19c:	2103      	movs	r1, #3
 801d19e:	f640 4311 	movw	r3, #3089	; 0xc11
 801d1a2:	f7f3 fa45 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 801d1a6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d1a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	d20a      	bcs.n	801d1c6 <mbedtls_ssl_prepare_handshake_record+0x72>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 801d1b0:	4b0a      	ldr	r3, [pc, #40]	; (801d1dc <mbedtls_ssl_prepare_handshake_record+0x88>)
 801d1b2:	9300      	str	r3, [sp, #0]
 801d1b4:	4620      	mov	r0, r4
 801d1b6:	f640 434f 	movw	r3, #3151	; 0xc4f
 801d1ba:	4a05      	ldr	r2, [pc, #20]	; (801d1d0 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d1bc:	2101      	movs	r1, #1
 801d1be:	f7f3 fa37 	bl	8010630 <mbedtls_debug_print_msg>
 801d1c2:	4807      	ldr	r0, [pc, #28]	; (801d1e0 <mbedtls_ssl_prepare_handshake_record+0x8c>)
 801d1c4:	e7d6      	b.n	801d174 <mbedtls_ssl_prepare_handshake_record+0x20>
    return( 0 );
 801d1c6:	2000      	movs	r0, #0
 801d1c8:	e7d4      	b.n	801d174 <mbedtls_ssl_prepare_handshake_record+0x20>
 801d1ca:	bf00      	nop
 801d1cc:	08031e70 	.word	0x08031e70
 801d1d0:	080318ba 	.word	0x080318ba
 801d1d4:	ffff8e00 	.word	0xffff8e00
 801d1d8:	08031e90 	.word	0x08031e90
 801d1dc:	08031ec6 	.word	0x08031ec6
 801d1e0:	ffff8f80 	.word	0xffff8f80

0801d1e4 <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d1e4:	6842      	ldr	r2, [r0, #4]
 801d1e6:	2a10      	cmp	r2, #16
{
 801d1e8:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d1ea:	d00a      	beq.n	801d202 <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake != NULL )
 801d1ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d1ee:	b142      	cbz	r2, 801d202 <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d1f0:	f8d2 4298 	ldr.w	r4, [r2, #664]	; 0x298
 801d1f4:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801d1f6:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 801d1fa:	4623      	mov	r3, r4
}
 801d1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d200:	4718      	bx	r3
}
 801d202:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d206:	4770      	bx	lr

0801d208 <mbedtls_ssl_handle_message_type>:
{
 801d208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d20a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801d20c:	2b16      	cmp	r3, #22
{
 801d20e:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d210:	d004      	beq.n	801d21c <mbedtls_ssl_handle_message_type+0x14>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801d212:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d214:	2b15      	cmp	r3, #21
 801d216:	d007      	beq.n	801d228 <mbedtls_ssl_handle_message_type+0x20>
            return( 0 );
 801d218:	2000      	movs	r0, #0
 801d21a:	e003      	b.n	801d224 <mbedtls_ssl_handle_message_type+0x1c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 801d21c:	f7ff ff9a 	bl	801d154 <mbedtls_ssl_prepare_handshake_record>
 801d220:	2800      	cmp	r0, #0
 801d222:	d0f6      	beq.n	801d212 <mbedtls_ssl_handle_message_type+0xa>
}
 801d224:	b004      	add	sp, #16
 801d226:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 801d228:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d22a:	785a      	ldrb	r2, [r3, #1]
 801d22c:	9202      	str	r2, [sp, #8]
 801d22e:	781b      	ldrb	r3, [r3, #0]
 801d230:	9301      	str	r3, [sp, #4]
 801d232:	4b1b      	ldr	r3, [pc, #108]	; (801d2a0 <mbedtls_ssl_handle_message_type+0x98>)
 801d234:	9300      	str	r3, [sp, #0]
 801d236:	4a1b      	ldr	r2, [pc, #108]	; (801d2a4 <mbedtls_ssl_handle_message_type+0x9c>)
 801d238:	f640 73d5 	movw	r3, #4053	; 0xfd5
 801d23c:	2102      	movs	r1, #2
 801d23e:	4620      	mov	r0, r4
 801d240:	f7f3 f9f6 	bl	8010630 <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 801d244:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d246:	781a      	ldrb	r2, [r3, #0]
 801d248:	2a02      	cmp	r2, #2
 801d24a:	d10c      	bne.n	801d266 <mbedtls_ssl_handle_message_type+0x5e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 801d24c:	785b      	ldrb	r3, [r3, #1]
 801d24e:	9301      	str	r3, [sp, #4]
 801d250:	4b15      	ldr	r3, [pc, #84]	; (801d2a8 <mbedtls_ssl_handle_message_type+0xa0>)
 801d252:	9300      	str	r3, [sp, #0]
 801d254:	4620      	mov	r0, r4
 801d256:	f640 73dd 	movw	r3, #4061	; 0xfdd
 801d25a:	4a12      	ldr	r2, [pc, #72]	; (801d2a4 <mbedtls_ssl_handle_message_type+0x9c>)
 801d25c:	2101      	movs	r1, #1
 801d25e:	f7f3 f9e7 	bl	8010630 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 801d262:	4812      	ldr	r0, [pc, #72]	; (801d2ac <mbedtls_ssl_handle_message_type+0xa4>)
 801d264:	e7de      	b.n	801d224 <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d266:	2a01      	cmp	r2, #1
 801d268:	d118      	bne.n	801d29c <mbedtls_ssl_handle_message_type+0x94>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 801d26a:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d26c:	b953      	cbnz	r3, 801d284 <mbedtls_ssl_handle_message_type+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 801d26e:	4b10      	ldr	r3, [pc, #64]	; (801d2b0 <mbedtls_ssl_handle_message_type+0xa8>)
 801d270:	9300      	str	r3, [sp, #0]
 801d272:	4620      	mov	r0, r4
 801d274:	f640 73e4 	movw	r3, #4068	; 0xfe4
 801d278:	4a0a      	ldr	r2, [pc, #40]	; (801d2a4 <mbedtls_ssl_handle_message_type+0x9c>)
 801d27a:	2102      	movs	r1, #2
 801d27c:	f7f3 f9d8 	bl	8010630 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 801d280:	480c      	ldr	r0, [pc, #48]	; (801d2b4 <mbedtls_ssl_handle_message_type+0xac>)
 801d282:	e7cf      	b.n	801d224 <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d284:	2b64      	cmp	r3, #100	; 0x64
 801d286:	d109      	bne.n	801d29c <mbedtls_ssl_handle_message_type+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 801d288:	4b0b      	ldr	r3, [pc, #44]	; (801d2b8 <mbedtls_ssl_handle_message_type+0xb0>)
 801d28a:	9300      	str	r3, [sp, #0]
 801d28c:	4a05      	ldr	r2, [pc, #20]	; (801d2a4 <mbedtls_ssl_handle_message_type+0x9c>)
 801d28e:	f640 73ec 	movw	r3, #4076	; 0xfec
 801d292:	2102      	movs	r1, #2
 801d294:	4620      	mov	r0, r4
 801d296:	f7f3 f9cb 	bl	8010630 <mbedtls_debug_print_msg>
 801d29a:	e7bd      	b.n	801d218 <mbedtls_ssl_handle_message_type+0x10>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 801d29c:	4807      	ldr	r0, [pc, #28]	; (801d2bc <mbedtls_ssl_handle_message_type+0xb4>)
 801d29e:	e7c1      	b.n	801d224 <mbedtls_ssl_handle_message_type+0x1c>
 801d2a0:	08031ef0 	.word	0x08031ef0
 801d2a4:	080318ba 	.word	0x080318ba
 801d2a8:	08031f14 	.word	0x08031f14
 801d2ac:	ffff8880 	.word	0xffff8880
 801d2b0:	08031f36 	.word	0x08031f36
 801d2b4:	ffff8780 	.word	0xffff8780
 801d2b8:	08031f50 	.word	0x08031f50
 801d2bc:	ffff9980 	.word	0xffff9980

0801d2c0 <mbedtls_ssl_send_alert_message>:
{
 801d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2c2:	460f      	mov	r7, r1
 801d2c4:	b085      	sub	sp, #20
 801d2c6:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
 801d2c8:	4604      	mov	r4, r0
 801d2ca:	2800      	cmp	r0, #0
 801d2cc:	d03b      	beq.n	801d346 <mbedtls_ssl_send_alert_message+0x86>
 801d2ce:	6803      	ldr	r3, [r0, #0]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d038      	beq.n	801d346 <mbedtls_ssl_send_alert_message+0x86>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 801d2d4:	4b1d      	ldr	r3, [pc, #116]	; (801d34c <mbedtls_ssl_send_alert_message+0x8c>)
 801d2d6:	9300      	str	r3, [sp, #0]
 801d2d8:	4a1d      	ldr	r2, [pc, #116]	; (801d350 <mbedtls_ssl_send_alert_message+0x90>)
 801d2da:	f241 031c 	movw	r3, #4124	; 0x101c
 801d2de:	2102      	movs	r1, #2
 801d2e0:	f7f3 f9a6 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 801d2e4:	4b1b      	ldr	r3, [pc, #108]	; (801d354 <mbedtls_ssl_send_alert_message+0x94>)
 801d2e6:	9300      	str	r3, [sp, #0]
 801d2e8:	e9cd 7501 	strd	r7, r5, [sp, #4]
 801d2ec:	f241 031d 	movw	r3, #4125	; 0x101d
 801d2f0:	4a17      	ldr	r2, [pc, #92]	; (801d350 <mbedtls_ssl_send_alert_message+0x90>)
 801d2f2:	2103      	movs	r1, #3
 801d2f4:	4620      	mov	r0, r4
 801d2f6:	f7f3 f99b 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->out_msglen = 2;
 801d2fa:	2602      	movs	r6, #2
 801d2fc:	2315      	movs	r3, #21
 801d2fe:	e9c4 3629 	strd	r3, r6, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 801d302:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801d306:	701f      	strb	r7, [r3, #0]
    ssl->out_msg[1] = message;
 801d308:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d30c:	4620      	mov	r0, r4
    ssl->out_msg[1] = message;
 801d30e:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d310:	f7ff fc98 	bl	801cc44 <mbedtls_ssl_write_record>
 801d314:	4605      	mov	r5, r0
 801d316:	b160      	cbz	r0, 801d332 <mbedtls_ssl_send_alert_message+0x72>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801d318:	4b0f      	ldr	r3, [pc, #60]	; (801d358 <mbedtls_ssl_send_alert_message+0x98>)
 801d31a:	9001      	str	r0, [sp, #4]
 801d31c:	9300      	str	r3, [sp, #0]
 801d31e:	4a0c      	ldr	r2, [pc, #48]	; (801d350 <mbedtls_ssl_send_alert_message+0x90>)
 801d320:	f241 0326 	movw	r3, #4134	; 0x1026
 801d324:	2101      	movs	r1, #1
 801d326:	4620      	mov	r0, r4
 801d328:	f7f3 f9b2 	bl	8010690 <mbedtls_debug_print_ret>
}
 801d32c:	4628      	mov	r0, r5
 801d32e:	b005      	add	sp, #20
 801d330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 801d332:	4b0a      	ldr	r3, [pc, #40]	; (801d35c <mbedtls_ssl_send_alert_message+0x9c>)
 801d334:	9300      	str	r3, [sp, #0]
 801d336:	4a06      	ldr	r2, [pc, #24]	; (801d350 <mbedtls_ssl_send_alert_message+0x90>)
 801d338:	f241 0329 	movw	r3, #4137	; 0x1029
 801d33c:	4631      	mov	r1, r6
 801d33e:	4620      	mov	r0, r4
 801d340:	f7f3 f976 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801d344:	e7f2      	b.n	801d32c <mbedtls_ssl_send_alert_message+0x6c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801d346:	4d06      	ldr	r5, [pc, #24]	; (801d360 <mbedtls_ssl_send_alert_message+0xa0>)
 801d348:	e7f0      	b.n	801d32c <mbedtls_ssl_send_alert_message+0x6c>
 801d34a:	bf00      	nop
 801d34c:	08031f63 	.word	0x08031f63
 801d350:	080318ba 	.word	0x080318ba
 801d354:	08031f79 	.word	0x08031f79
 801d358:	08030d52 	.word	0x08030d52
 801d35c:	08031f98 	.word	0x08031f98
 801d360:	ffff8f00 	.word	0xffff8f00

0801d364 <mbedtls_ssl_read_record_layer>:
{
 801d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ssl->in_hslen != 0 )
 801d368:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801d36c:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
 801d36e:	b097      	sub	sp, #92	; 0x5c
 801d370:	4604      	mov	r4, r0
    if( ssl->in_hslen != 0 )
 801d372:	2900      	cmp	r1, #0
 801d374:	d03e      	beq.n	801d3f4 <mbedtls_ssl_read_record_layer+0x90>
        if( ssl->in_offt != NULL )
 801d376:	b163      	cbz	r3, 801d392 <mbedtls_ssl_read_record_layer+0x2e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d378:	4b95      	ldr	r3, [pc, #596]	; (801d5d0 <mbedtls_ssl_read_record_layer+0x26c>)
 801d37a:	9300      	str	r3, [sp, #0]
 801d37c:	4a95      	ldr	r2, [pc, #596]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d37e:	4d96      	ldr	r5, [pc, #600]	; (801d5d8 <mbedtls_ssl_read_record_layer+0x274>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d380:	f640 63d8 	movw	r3, #3800	; 0xed8
 801d384:	2101      	movs	r1, #1
 801d386:	f7f3 f953 	bl	8010630 <mbedtls_debug_print_msg>
}
 801d38a:	4628      	mov	r0, r5
 801d38c:	b017      	add	sp, #92	; 0x5c
 801d38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ssl->in_hslen < ssl->in_msglen )
 801d392:	6f82      	ldr	r2, [r0, #120]	; 0x78
 801d394:	4291      	cmp	r1, r2
 801d396:	d22b      	bcs.n	801d3f0 <mbedtls_ssl_read_record_layer+0x8c>
            ssl->in_msglen -= ssl->in_hslen;
 801d398:	1a52      	subs	r2, r2, r1
 801d39a:	6782      	str	r2, [r0, #120]	; 0x78
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 801d39c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d39e:	4401      	add	r1, r0
 801d3a0:	f004 ffac 	bl	80222fc <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 801d3a4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d3a6:	9302      	str	r3, [sp, #8]
 801d3a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d3aa:	9301      	str	r3, [sp, #4]
 801d3ac:	4b8b      	ldr	r3, [pc, #556]	; (801d5dc <mbedtls_ssl_read_record_layer+0x278>)
 801d3ae:	9300      	str	r3, [sp, #0]
 801d3b0:	4a88      	ldr	r2, [pc, #544]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d3b2:	f640 63f8 	movw	r3, #3832	; 0xef8
 801d3b6:	2104      	movs	r1, #4
 801d3b8:	4620      	mov	r0, r4
 801d3ba:	f7f3 f997 	bl	80106ec <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 801d3be:	2300      	movs	r3, #0
 801d3c0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msglen > 0 )
 801d3c4:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801d3c8:	f1b8 0f00 	cmp.w	r8, #0
 801d3cc:	d113      	bne.n	801d3f6 <mbedtls_ssl_read_record_layer+0x92>
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 801d3ce:	2105      	movs	r1, #5
 801d3d0:	4620      	mov	r0, r4
 801d3d2:	f7ff fb09 	bl	801c9e8 <mbedtls_ssl_fetch_input>
 801d3d6:	4605      	mov	r5, r0
 801d3d8:	b188      	cbz	r0, 801d3fe <mbedtls_ssl_read_record_layer+0x9a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d3da:	4b81      	ldr	r3, [pc, #516]	; (801d5e0 <mbedtls_ssl_read_record_layer+0x27c>)
 801d3dc:	9300      	str	r3, [sp, #0]
 801d3de:	9001      	str	r0, [sp, #4]
 801d3e0:	f640 7323 	movw	r3, #3875	; 0xf23
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d3e4:	4a7b      	ldr	r2, [pc, #492]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d3e6:	2101      	movs	r1, #1
 801d3e8:	4620      	mov	r0, r4
 801d3ea:	f7f3 f951 	bl	8010690 <mbedtls_debug_print_ret>
        return( ret );
 801d3ee:	e7cc      	b.n	801d38a <mbedtls_ssl_read_record_layer+0x26>
            ssl->in_msglen = 0;
 801d3f0:	6783      	str	r3, [r0, #120]	; 0x78
 801d3f2:	e7e4      	b.n	801d3be <mbedtls_ssl_read_record_layer+0x5a>
    else if( ssl->in_offt != NULL )
 801d3f4:	b10b      	cbz	r3, 801d3fa <mbedtls_ssl_read_record_layer+0x96>
        return( 0 );
 801d3f6:	2500      	movs	r5, #0
 801d3f8:	e7c7      	b.n	801d38a <mbedtls_ssl_read_record_layer+0x26>
        ssl->in_msglen = 0;
 801d3fa:	6783      	str	r3, [r0, #120]	; 0x78
 801d3fc:	e7e2      	b.n	801d3c4 <mbedtls_ssl_read_record_layer+0x60>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 801d3fe:	2305      	movs	r3, #5
 801d400:	9302      	str	r3, [sp, #8]
 801d402:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d404:	9301      	str	r3, [sp, #4]
 801d406:	4b77      	ldr	r3, [pc, #476]	; (801d5e4 <mbedtls_ssl_read_record_layer+0x280>)
 801d408:	9300      	str	r3, [sp, #0]
 801d40a:	4a72      	ldr	r2, [pc, #456]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d40c:	f640 5396 	movw	r3, #3478	; 0xd96
 801d410:	2104      	movs	r1, #4
 801d412:	4620      	mov	r0, r4
 801d414:	f7f3 f96a 	bl	80106ec <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d418:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d41a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d41c:	7811      	ldrb	r1, [r2, #0]
 801d41e:	6761      	str	r1, [r4, #116]	; 0x74
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d420:	881b      	ldrh	r3, [r3, #0]
 801d422:	ba5b      	rev16	r3, r3
 801d424:	b29b      	uxth	r3, r3
 801d426:	67a3      	str	r3, [r4, #120]	; 0x78
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 801d428:	7895      	ldrb	r5, [r2, #2]
        *major = ver[0];
 801d42a:	7856      	ldrb	r6, [r2, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d42c:	4a69      	ldr	r2, [pc, #420]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
        *minor = ver[1];
 801d42e:	e9cd 5303 	strd	r5, r3, [sp, #12]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d432:	4b6d      	ldr	r3, [pc, #436]	; (801d5e8 <mbedtls_ssl_read_record_layer+0x284>)
 801d434:	9300      	str	r3, [sp, #0]
 801d436:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801d43a:	f640 539f 	movw	r3, #3487	; 0xd9f
 801d43e:	2103      	movs	r1, #3
 801d440:	4620      	mov	r0, r4
 801d442:	f7f3 f8f5 	bl	8010630 <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 801d446:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d448:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 801d44a:	2b03      	cmp	r3, #3
 801d44c:	d90f      	bls.n	801d46e <mbedtls_ssl_read_record_layer+0x10a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 801d44e:	4b67      	ldr	r3, [pc, #412]	; (801d5ec <mbedtls_ssl_read_record_layer+0x288>)
 801d450:	9300      	str	r3, [sp, #0]
 801d452:	4a60      	ldr	r2, [pc, #384]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d454:	2101      	movs	r1, #1
 801d456:	4620      	mov	r0, r4
 801d458:	f640 53a7 	movw	r3, #3495	; 0xda7
 801d45c:	f7f3 f8e8 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801d460:	220a      	movs	r2, #10
 801d462:	2102      	movs	r1, #2
 801d464:	4620      	mov	r0, r4
 801d466:	f7ff ff2b 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d46a:	4d61      	ldr	r5, [pc, #388]	; (801d5f0 <mbedtls_ssl_read_record_layer+0x28c>)
 801d46c:	e78d      	b.n	801d38a <mbedtls_ssl_read_record_layer+0x26>
    if( major_ver != ssl->major_ver )
 801d46e:	6923      	ldr	r3, [r4, #16]
 801d470:	429e      	cmp	r6, r3
 801d472:	d009      	beq.n	801d488 <mbedtls_ssl_read_record_layer+0x124>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 801d474:	4b5f      	ldr	r3, [pc, #380]	; (801d5f4 <mbedtls_ssl_read_record_layer+0x290>)
 801d476:	9300      	str	r3, [sp, #0]
 801d478:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d47c:	4a55      	ldr	r2, [pc, #340]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d47e:	2101      	movs	r1, #1
 801d480:	4620      	mov	r0, r4
 801d482:	f7f3 f8d5 	bl	8010630 <mbedtls_debug_print_msg>
 801d486:	e7f0      	b.n	801d46a <mbedtls_ssl_read_record_layer+0x106>
    if( minor_ver > ssl->conf->max_minor_ver )
 801d488:	6823      	ldr	r3, [r4, #0]
 801d48a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801d48e:	42ab      	cmp	r3, r5
 801d490:	d204      	bcs.n	801d49c <mbedtls_ssl_read_record_layer+0x138>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 801d492:	4b59      	ldr	r3, [pc, #356]	; (801d5f8 <mbedtls_ssl_read_record_layer+0x294>)
 801d494:	9300      	str	r3, [sp, #0]
 801d496:	f640 53b6 	movw	r3, #3510	; 0xdb6
 801d49a:	e7ef      	b.n	801d47c <mbedtls_ssl_read_record_layer+0x118>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d49c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d49e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d4a0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d4a2:	1a9b      	subs	r3, r3, r2
 801d4a4:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801d4a8:	3315      	adds	r3, #21
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d4aa:	4299      	cmp	r1, r3
 801d4ac:	d904      	bls.n	801d4b8 <mbedtls_ssl_read_record_layer+0x154>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d4ae:	4b53      	ldr	r3, [pc, #332]	; (801d5fc <mbedtls_ssl_read_record_layer+0x298>)
 801d4b0:	9300      	str	r3, [sp, #0]
 801d4b2:	f640 53be 	movw	r3, #3518	; 0xdbe
 801d4b6:	e7e1      	b.n	801d47c <mbedtls_ssl_read_record_layer+0x118>
    if( ssl->transform_in == NULL )
 801d4b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d4ba:	b94b      	cbnz	r3, 801d4d0 <mbedtls_ssl_read_record_layer+0x16c>
        if( ssl->in_msglen < 1 ||
 801d4bc:	1e4a      	subs	r2, r1, #1
 801d4be:	f241 3387 	movw	r3, #4999	; 0x1387
 801d4c2:	429a      	cmp	r2, r3
 801d4c4:	d919      	bls.n	801d4fa <mbedtls_ssl_read_record_layer+0x196>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d4c6:	4b4d      	ldr	r3, [pc, #308]	; (801d5fc <mbedtls_ssl_read_record_layer+0x298>)
 801d4c8:	9300      	str	r3, [sp, #0]
 801d4ca:	f640 53c8 	movw	r3, #3528	; 0xdc8
 801d4ce:	e7d5      	b.n	801d47c <mbedtls_ssl_read_record_layer+0x118>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 801d4d0:	689b      	ldr	r3, [r3, #8]
 801d4d2:	4299      	cmp	r1, r3
 801d4d4:	d204      	bcs.n	801d4e0 <mbedtls_ssl_read_record_layer+0x17c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d4d6:	4b49      	ldr	r3, [pc, #292]	; (801d5fc <mbedtls_ssl_read_record_layer+0x298>)
 801d4d8:	9300      	str	r3, [sp, #0]
 801d4da:	f44f 635d 	mov.w	r3, #3536	; 0xdd0
 801d4de:	e7cd      	b.n	801d47c <mbedtls_ssl_read_record_layer+0x118>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d4e0:	6962      	ldr	r2, [r4, #20]
 801d4e2:	2a00      	cmp	r2, #0
 801d4e4:	dd09      	ble.n	801d4fa <mbedtls_ssl_read_record_layer+0x196>
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 801d4e6:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 801d4ea:	3308      	adds	r3, #8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d4ec:	4299      	cmp	r1, r3
 801d4ee:	d904      	bls.n	801d4fa <mbedtls_ssl_read_record_layer+0x196>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d4f0:	4b42      	ldr	r3, [pc, #264]	; (801d5fc <mbedtls_ssl_read_record_layer+0x298>)
 801d4f2:	9300      	str	r3, [sp, #0]
 801d4f4:	f640 53e5 	movw	r3, #3557	; 0xde5
 801d4f8:	e7c0      	b.n	801d47c <mbedtls_ssl_read_record_layer+0x118>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 801d4fa:	3105      	adds	r1, #5
 801d4fc:	4620      	mov	r0, r4
 801d4fe:	f7ff fa73 	bl	801c9e8 <mbedtls_ssl_fetch_input>
 801d502:	4605      	mov	r5, r0
 801d504:	b128      	cbz	r0, 801d512 <mbedtls_ssl_read_record_layer+0x1ae>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d506:	4b36      	ldr	r3, [pc, #216]	; (801d5e0 <mbedtls_ssl_read_record_layer+0x27c>)
 801d508:	9300      	str	r3, [sp, #0]
 801d50a:	9001      	str	r0, [sp, #4]
 801d50c:	f640 734d 	movw	r3, #3917	; 0xf4d
 801d510:	e768      	b.n	801d3e4 <mbedtls_ssl_read_record_layer+0x80>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d512:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        ssl->in_left = 0;
 801d514:	67e0      	str	r0, [r4, #124]	; 0x7c
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d516:	3305      	adds	r3, #5
 801d518:	9302      	str	r3, [sp, #8]
 801d51a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d51c:	9301      	str	r3, [sp, #4]
 801d51e:	4b38      	ldr	r3, [pc, #224]	; (801d600 <mbedtls_ssl_read_record_layer+0x29c>)
 801d520:	9300      	str	r3, [sp, #0]
 801d522:	4a2c      	ldr	r2, [pc, #176]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d524:	f640 6342 	movw	r3, #3650	; 0xe42
 801d528:	2104      	movs	r1, #4
 801d52a:	4620      	mov	r0, r4
 801d52c:	f7f3 f8de 	bl	80106ec <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 801d530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d532:	2b00      	cmp	r3, #0
 801d534:	f43f af5f 	beq.w	801d3f6 <mbedtls_ssl_read_record_layer+0x92>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 801d538:	4b32      	ldr	r3, [pc, #200]	; (801d604 <mbedtls_ssl_read_record_layer+0x2a0>)
 801d53a:	9300      	str	r3, [sp, #0]
 801d53c:	4a25      	ldr	r2, [pc, #148]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d53e:	f44f 63c5 	mov.w	r3, #1576	; 0x628
 801d542:	2102      	movs	r1, #2
 801d544:	4620      	mov	r0, r4
 801d546:	f7f3 f873 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 801d54a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d54c:	b10b      	cbz	r3, 801d552 <mbedtls_ssl_read_record_layer+0x1ee>
 801d54e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d550:	b950      	cbnz	r0, 801d568 <mbedtls_ssl_read_record_layer+0x204>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d552:	4b1f      	ldr	r3, [pc, #124]	; (801d5d0 <mbedtls_ssl_read_record_layer+0x26c>)
 801d554:	9300      	str	r3, [sp, #0]
 801d556:	f240 632c 	movw	r3, #1580	; 0x62c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d55a:	4a1e      	ldr	r2, [pc, #120]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d55c:	4d1e      	ldr	r5, [pc, #120]	; (801d5d8 <mbedtls_ssl_read_record_layer+0x274>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d55e:	2101      	movs	r1, #1
 801d560:	4620      	mov	r0, r4
 801d562:	f7f3 f865 	bl	8010630 <mbedtls_debug_print_msg>
 801d566:	e1a4      	b.n	801d8b2 <mbedtls_ssl_read_record_layer+0x54e>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801d568:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 801d56c:	b103      	cbz	r3, 801d570 <mbedtls_ssl_read_record_layer+0x20c>
    return ctx->cipher_info->mode;
 801d56e:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 801d570:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d572:	6882      	ldr	r2, [r0, #8]
 801d574:	4297      	cmp	r7, r2
 801d576:	d20b      	bcs.n	801d590 <mbedtls_ssl_read_record_layer+0x22c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 801d578:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801d57c:	4b22      	ldr	r3, [pc, #136]	; (801d608 <mbedtls_ssl_read_record_layer+0x2a4>)
 801d57e:	9300      	str	r3, [sp, #0]
 801d580:	f240 6335 	movw	r3, #1589	; 0x635
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801d584:	4a13      	ldr	r2, [pc, #76]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d586:	2101      	movs	r1, #1
 801d588:	4620      	mov	r0, r4
 801d58a:	f7f3 f851 	bl	8010630 <mbedtls_debug_print_msg>
 801d58e:	e0ab      	b.n	801d6e8 <mbedtls_ssl_read_record_layer+0x384>
    if( mode == MBEDTLS_MODE_GCM ||
 801d590:	2b06      	cmp	r3, #6
 801d592:	d002      	beq.n	801d59a <mbedtls_ssl_read_record_layer+0x236>
 801d594:	2b08      	cmp	r3, #8
 801d596:	f040 8145 	bne.w	801d824 <mbedtls_ssl_read_record_layer+0x4c0>
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d59a:	6803      	ldr	r3, [r0, #0]
 801d59c:	7f1b      	ldrb	r3, [r3, #28]
 801d59e:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 801d5a2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d5a6:	bf0c      	ite	eq
 801d5a8:	2510      	moveq	r5, #16
 801d5aa:	2508      	movne	r5, #8
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 801d5ac:	1a9b      	subs	r3, r3, r2
        if( ssl->in_msglen < explicit_iv_len + taglen )
 801d5ae:	195a      	adds	r2, r3, r5
 801d5b0:	4297      	cmp	r7, r2
 801d5b2:	d22d      	bcs.n	801d610 <mbedtls_ssl_read_record_layer+0x2ac>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 801d5b4:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801d5b8:	4b14      	ldr	r3, [pc, #80]	; (801d60c <mbedtls_ssl_read_record_layer+0x2a8>)
 801d5ba:	9300      	str	r3, [sp, #0]
 801d5bc:	9701      	str	r7, [sp, #4]
 801d5be:	f240 6365 	movw	r3, #1637	; 0x665
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801d5c2:	4a04      	ldr	r2, [pc, #16]	; (801d5d4 <mbedtls_ssl_read_record_layer+0x270>)
 801d5c4:	2101      	movs	r1, #1
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	f7f3 f832 	bl	8010630 <mbedtls_debug_print_msg>
 801d5cc:	e08c      	b.n	801d6e8 <mbedtls_ssl_read_record_layer+0x384>
 801d5ce:	bf00      	nop
 801d5d0:	080313ea 	.word	0x080313ea
 801d5d4:	080318ba 	.word	0x080318ba
 801d5d8:	ffff9400 	.word	0xffff9400
 801d5dc:	08031fae 	.word	0x08031fae
 801d5e0:	08031fca 	.word	0x08031fca
 801d5e4:	08031fe2 	.word	0x08031fe2
 801d5e8:	08031ff6 	.word	0x08031ff6
 801d5ec:	08032031 	.word	0x08032031
 801d5f0:	ffff8e00 	.word	0xffff8e00
 801d5f4:	08032045 	.word	0x08032045
 801d5f8:	0803205c 	.word	0x0803205c
 801d5fc:	08032073 	.word	0x08032073
 801d600:	08032086 	.word	0x08032086
 801d604:	080320a0 	.word	0x080320a0
 801d608:	080320af 	.word	0x080320af
 801d60c:	080320cc 	.word	0x080320cc
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 801d610:	1aff      	subs	r7, r7, r3
 801d612:	1b7f      	subs	r7, r7, r5
        memcpy( add_data, ssl->in_ctr, 8 );
 801d614:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        ssl->in_msglen = dec_msglen;
 801d616:	67a7      	str	r7, [r4, #120]	; 0x78
        memcpy( add_data, ssl->in_ctr, 8 );
 801d618:	6810      	ldr	r0, [r2, #0]
 801d61a:	6851      	ldr	r1, [r2, #4]
        dec_msg = ssl->in_msg;
 801d61c:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
        memcpy( add_data, ssl->in_ctr, 8 );
 801d620:	ae0a      	add	r6, sp, #40	; 0x28
 801d622:	4633      	mov	r3, r6
 801d624:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 801d626:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d628:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801d62c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801d630:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 801d634:	0a3b      	lsrs	r3, r7, #8
 801d636:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d63a:	f04f 0a0d 	mov.w	sl, #13
 801d63e:	4bae      	ldr	r3, [pc, #696]	; (801d8f8 <mbedtls_ssl_read_record_layer+0x594>)
        ver[0] = (unsigned char) major;
 801d640:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d644:	9300      	str	r3, [sp, #0]
 801d646:	4aad      	ldr	r2, [pc, #692]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
        add_data[12] = ssl->in_msglen & 0xFF;
 801d648:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d64c:	f240 6376 	movw	r3, #1654	; 0x676
 801d650:	2104      	movs	r1, #4
 801d652:	4620      	mov	r0, r4
 801d654:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801d658:	f7f3 f848 	bl	80106ec <mbedtls_debug_print_buf>
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 801d65c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d65e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 801d660:	6918      	ldr	r0, [r3, #16]
 801d662:	68da      	ldr	r2, [r3, #12]
 801d664:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 801d668:	1a12      	subs	r2, r2, r0
 801d66a:	4460      	add	r0, ip
 801d66c:	f004 fe3b 	bl	80222e6 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 801d670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d672:	68da      	ldr	r2, [r3, #12]
 801d674:	9202      	str	r2, [sp, #8]
 801d676:	3328      	adds	r3, #40	; 0x28
 801d678:	9301      	str	r3, [sp, #4]
 801d67a:	4ba1      	ldr	r3, [pc, #644]	; (801d900 <mbedtls_ssl_read_record_layer+0x59c>)
 801d67c:	9300      	str	r3, [sp, #0]
 801d67e:	4a9f      	ldr	r2, [pc, #636]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d680:	f240 637d 	movw	r3, #1661	; 0x67d
 801d684:	2104      	movs	r1, #4
 801d686:	4620      	mov	r0, r4
 801d688:	f7f3 f830 	bl	80106ec <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 801d68c:	eb09 0b07 	add.w	fp, r9, r7
 801d690:	4b9c      	ldr	r3, [pc, #624]	; (801d904 <mbedtls_ssl_read_record_layer+0x5a0>)
 801d692:	9300      	str	r3, [sp, #0]
 801d694:	e9cd b501 	strd	fp, r5, [sp, #4]
 801d698:	f240 637e 	movw	r3, #1662	; 0x67e
 801d69c:	4a97      	ldr	r2, [pc, #604]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d69e:	2104      	movs	r1, #4
 801d6a0:	4620      	mov	r0, r4
 801d6a2:	f7f3 f823 	bl	80106ec <mbedtls_debug_print_buf>
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 801d6a6:	ab09      	add	r3, sp, #36	; 0x24
 801d6a8:	e9cd b505 	strd	fp, r5, [sp, #20]
 801d6ac:	e9cd 9303 	strd	r9, r3, [sp, #12]
 801d6b0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801d6b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d6b6:	f8cd a000 	str.w	sl, [sp]
 801d6ba:	68c2      	ldr	r2, [r0, #12]
 801d6bc:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d6c0:	4633      	mov	r3, r6
 801d6c2:	3090      	adds	r0, #144	; 0x90
 801d6c4:	f7f2 fce8 	bl	8010098 <mbedtls_cipher_auth_decrypt>
 801d6c8:	4605      	mov	r5, r0
 801d6ca:	b178      	cbz	r0, 801d6ec <mbedtls_ssl_read_record_layer+0x388>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 801d6cc:	4b8e      	ldr	r3, [pc, #568]	; (801d908 <mbedtls_ssl_read_record_layer+0x5a4>)
 801d6ce:	9001      	str	r0, [sp, #4]
 801d6d0:	9300      	str	r3, [sp, #0]
 801d6d2:	4a8a      	ldr	r2, [pc, #552]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d6d4:	f240 638b 	movw	r3, #1675	; 0x68b
 801d6d8:	2101      	movs	r1, #1
 801d6da:	4620      	mov	r0, r4
 801d6dc:	f7f2 ffd8 	bl	8010690 <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 801d6e0:	f515 4fc6 	cmn.w	r5, #25344	; 0x6300
 801d6e4:	f040 80e5 	bne.w	801d8b2 <mbedtls_ssl_read_record_layer+0x54e>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d6e8:	4d88      	ldr	r5, [pc, #544]	; (801d90c <mbedtls_ssl_read_record_layer+0x5a8>)
 801d6ea:	e0e2      	b.n	801d8b2 <mbedtls_ssl_read_record_layer+0x54e>
        if( olen != dec_msglen )
 801d6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6ee:	429f      	cmp	r7, r3
 801d6f0:	d004      	beq.n	801d6fc <mbedtls_ssl_read_record_layer+0x398>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d6f2:	4b87      	ldr	r3, [pc, #540]	; (801d910 <mbedtls_ssl_read_record_layer+0x5ac>)
 801d6f4:	9300      	str	r3, [sp, #0]
 801d6f6:	f240 6396 	movw	r3, #1686	; 0x696
 801d6fa:	e72e      	b.n	801d55a <mbedtls_ssl_read_record_layer+0x1f6>
    size_t padlen = 0, correct = 1;
 801d6fc:	2601      	movs	r6, #1
 801d6fe:	4681      	mov	r9, r0
        auth_done++;
 801d700:	4635      	mov	r5, r6
    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 801d702:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d704:	9302      	str	r3, [sp, #8]
 801d706:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d708:	9301      	str	r3, [sp, #4]
 801d70a:	4b82      	ldr	r3, [pc, #520]	; (801d914 <mbedtls_ssl_read_record_layer+0x5b0>)
 801d70c:	9300      	str	r3, [sp, #0]
 801d70e:	4a7b      	ldr	r2, [pc, #492]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d710:	f44f 63ef 	mov.w	r3, #1912	; 0x778
 801d714:	2104      	movs	r1, #4
 801d716:	4620      	mov	r0, r4
 801d718:	f7f2 ffe8 	bl	80106ec <mbedtls_debug_print_buf>
    if( auth_done == 0 )
 801d71c:	2d00      	cmp	r5, #0
 801d71e:	f040 8191 	bne.w	801da44 <mbedtls_ssl_read_record_layer+0x6e0>
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d722:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d724:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d726:	6952      	ldr	r2, [r2, #20]
 801d728:	1a9b      	subs	r3, r3, r2
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d72a:	6e62      	ldr	r2, [r4, #100]	; 0x64
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d72c:	67a3      	str	r3, [r4, #120]	; 0x78
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d72e:	0a1b      	lsrs	r3, r3, #8
 801d730:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 801d732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d734:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d736:	705a      	strb	r2, [r3, #1]
        memcpy( tmp, ssl->in_msg + ssl->in_msglen, ssl->transform_in->maclen );
 801d738:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d73a:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
 801d73e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d740:	f8db 2014 	ldr.w	r2, [fp, #20]
 801d744:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 801d748:	4439      	add	r1, r7
 801d74a:	4650      	mov	r0, sl
 801d74c:	f004 fdcb 	bl	80222e6 <memcpy>
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801d750:	6963      	ldr	r3, [r4, #20]
 801d752:	2b00      	cmp	r3, #0
 801d754:	f340 816e 	ble.w	801da34 <mbedtls_ssl_read_record_layer+0x6d0>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d758:	2208      	movs	r2, #8
 801d75a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d75c:	f10b 0044 	add.w	r0, fp, #68	; 0x44
 801d760:	f7f6 ff7c 	bl	801465c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 801d764:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d766:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801d768:	2203      	movs	r2, #3
 801d76a:	3044      	adds	r0, #68	; 0x44
 801d76c:	f7f6 ff76 	bl	801465c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 801d770:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d772:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801d774:	2202      	movs	r2, #2
 801d776:	3044      	adds	r0, #68	; 0x44
 801d778:	f7f6 ff70 	bl	801465c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 801d77c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d77e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d780:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d782:	3044      	adds	r0, #68	; 0x44
 801d784:	f7f6 ff6a 	bl	801465c <mbedtls_md_hmac_update>
 801d788:	3715      	adds	r7, #21
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
 801d78a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d78c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d78e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d790:	44b9      	add	r9, r7
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 801d792:	09bf      	lsrs	r7, r7, #6
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d794:	ebc7 1799 	rsb	r7, r7, r9, lsr #6
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
 801d798:	4419      	add	r1, r3
            extra_run &= correct * 0xFF;
 801d79a:	ea4f 2906 	mov.w	r9, r6, lsl #8
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
 801d79e:	3044      	adds	r0, #68	; 0x44
            extra_run &= correct * 0xFF;
 801d7a0:	eba9 0906 	sub.w	r9, r9, r6
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
 801d7a4:	f7f6 ff6a 	bl	801467c <mbedtls_md_hmac_finish>
            extra_run &= correct * 0xFF;
 801d7a8:	ea09 0707 	and.w	r7, r9, r7
            for( j = 0; j < extra_run + 1; j++ )
 801d7ac:	3701      	adds	r7, #1
 801d7ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d7b0:	42bd      	cmp	r5, r7
 801d7b2:	f100 0044 	add.w	r0, r0, #68	; 0x44
 801d7b6:	f0c0 812f 	bcc.w	801da18 <mbedtls_ssl_read_record_layer+0x6b4>
            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 801d7ba:	f7f6 ff8b 	bl	80146d4 <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", tmp, ssl->transform_in->maclen );
 801d7be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d7c0:	4a4e      	ldr	r2, [pc, #312]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d7c2:	695b      	ldr	r3, [r3, #20]
 801d7c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d7c8:	4b53      	ldr	r3, [pc, #332]	; (801d918 <mbedtls_ssl_read_record_layer+0x5b4>)
 801d7ca:	9300      	str	r3, [sp, #0]
 801d7cc:	2104      	movs	r1, #4
 801d7ce:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801d7d2:	4620      	mov	r0, r4
 801d7d4:	f7f2 ff8a 	bl	80106ec <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac", ssl->in_msg + ssl->in_msglen,
 801d7d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d7da:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d7dc:	695b      	ldr	r3, [r3, #20]
 801d7de:	9302      	str	r3, [sp, #8]
 801d7e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d7e2:	4413      	add	r3, r2
 801d7e4:	9301      	str	r3, [sp, #4]
 801d7e6:	4b4d      	ldr	r3, [pc, #308]	; (801d91c <mbedtls_ssl_read_record_layer+0x5b8>)
 801d7e8:	9300      	str	r3, [sp, #0]
 801d7ea:	4a44      	ldr	r2, [pc, #272]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d7ec:	f240 73c2 	movw	r3, #1986	; 0x7c2
 801d7f0:	2104      	movs	r1, #4
 801d7f2:	4620      	mov	r0, r4
 801d7f4:	f7f2 ff7a 	bl	80106ec <mbedtls_debug_print_buf>
        if( mbedtls_ssl_safer_memcmp( tmp, ssl->in_msg + ssl->in_msglen,
 801d7f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d7fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801d7fc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 801d7fe:	6958      	ldr	r0, [r3, #20]
        diff |= A[i] ^ B[i];
 801d800:	440a      	add	r2, r1
    unsigned char diff = 0;
 801d802:	2300      	movs	r3, #0
    for( i = 0; i < n; i++ )
 801d804:	4540      	cmp	r0, r8
 801d806:	f040 810c 	bne.w	801da22 <mbedtls_ssl_read_record_layer+0x6be>
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	f000 8117 	beq.w	801da3e <mbedtls_ssl_read_record_layer+0x6da>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
 801d810:	4b43      	ldr	r3, [pc, #268]	; (801d920 <mbedtls_ssl_read_record_layer+0x5bc>)
 801d812:	9300      	str	r3, [sp, #0]
 801d814:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801d818:	4a38      	ldr	r2, [pc, #224]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d81a:	2101      	movs	r1, #1
 801d81c:	4620      	mov	r0, r4
 801d81e:	f7f2 ff07 	bl	8010630 <mbedtls_debug_print_msg>
 801d822:	e761      	b.n	801d6e8 <mbedtls_ssl_read_record_layer+0x384>
    if( mode == MBEDTLS_MODE_CBC )
 801d824:	2b02      	cmp	r3, #2
 801d826:	f040 80f2 	bne.w	801da0e <mbedtls_ssl_read_record_layer+0x6aa>
        size_t olen = 0;
 801d82a:	2300      	movs	r3, #0
 801d82c:	930a      	str	r3, [sp, #40]	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d82e:	6961      	ldr	r1, [r4, #20]
 801d830:	68c2      	ldr	r2, [r0, #12]
 801d832:	6945      	ldr	r5, [r0, #20]
 801d834:	2902      	cmp	r1, #2
 801d836:	bfac      	ite	ge
 801d838:	4616      	movge	r6, r2
 801d83a:	461e      	movlt	r6, r3
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801d83c:	18b3      	adds	r3, r6, r2
 801d83e:	429f      	cmp	r7, r3
 801d840:	d303      	bcc.n	801d84a <mbedtls_ssl_read_record_layer+0x4e6>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 801d842:	1c6b      	adds	r3, r5, #1
 801d844:	4433      	add	r3, r6
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801d846:	429f      	cmp	r7, r3
 801d848:	d207      	bcs.n	801d85a <mbedtls_ssl_read_record_layer+0x4f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801d84a:	4b36      	ldr	r3, [pc, #216]	; (801d924 <mbedtls_ssl_read_record_layer+0x5c0>)
 801d84c:	9300      	str	r3, [sp, #0]
 801d84e:	e9cd 2502 	strd	r2, r5, [sp, #8]
 801d852:	9701      	str	r7, [sp, #4]
 801d854:	f44f 63d7 	mov.w	r3, #1720	; 0x6b8
 801d858:	e6b3      	b.n	801d5c2 <mbedtls_ssl_read_record_layer+0x25e>
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 801d85a:	fbb7 f6f2 	udiv	r6, r7, r2
 801d85e:	fb02 7a16 	mls	sl, r2, r6, r7
 801d862:	f1ba 0f00 	cmp.w	sl, #0
 801d866:	d006      	beq.n	801d876 <mbedtls_ssl_read_record_layer+0x512>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801d868:	4b2f      	ldr	r3, [pc, #188]	; (801d928 <mbedtls_ssl_read_record_layer+0x5c4>)
 801d86a:	9300      	str	r3, [sp, #0]
 801d86c:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801d870:	f240 63f1 	movw	r3, #1777	; 0x6f1
 801d874:	e686      	b.n	801d584 <mbedtls_ssl_read_record_layer+0x220>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d876:	2901      	cmp	r1, #1
        dec_msg = ssl->in_msg;
 801d878:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d87a:	f100 0128 	add.w	r1, r0, #40	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d87e:	dd05      	ble.n	801d88c <mbedtls_ssl_read_record_layer+0x528>
            dec_msglen -= ssl->transform_in->ivlen;
 801d880:	1abf      	subs	r7, r7, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;
 801d882:	67a7      	str	r7, [r4, #120]	; 0x78
 801d884:	468c      	mov	ip, r1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801d886:	4655      	mov	r5, sl
 801d888:	4295      	cmp	r5, r2
 801d88a:	d126      	bne.n	801d8da <mbedtls_ssl_read_record_layer+0x576>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 801d88c:	ad0a      	add	r5, sp, #40	; 0x28
 801d88e:	e9cd 3501 	strd	r3, r5, [sp, #4]
 801d892:	9700      	str	r7, [sp, #0]
 801d894:	3090      	adds	r0, #144	; 0x90
 801d896:	f7f2 fbb9 	bl	801000c <mbedtls_cipher_crypt>
 801d89a:	4605      	mov	r5, r0
 801d89c:	b318      	cbz	r0, 801d8e6 <mbedtls_ssl_read_record_layer+0x582>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d89e:	4b23      	ldr	r3, [pc, #140]	; (801d92c <mbedtls_ssl_read_record_layer+0x5c8>)
 801d8a0:	9001      	str	r0, [sp, #4]
 801d8a2:	9300      	str	r3, [sp, #0]
 801d8a4:	4a15      	ldr	r2, [pc, #84]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d8a6:	f240 7309 	movw	r3, #1801	; 0x709
 801d8aa:	2101      	movs	r1, #1
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	f7f2 feef 	bl	8010690 <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 801d8b2:	4b1f      	ldr	r3, [pc, #124]	; (801d930 <mbedtls_ssl_read_record_layer+0x5cc>)
 801d8b4:	9300      	str	r3, [sp, #0]
 801d8b6:	9501      	str	r5, [sp, #4]
 801d8b8:	f640 6358 	movw	r3, #3672	; 0xe58
 801d8bc:	4a0f      	ldr	r2, [pc, #60]	; (801d8fc <mbedtls_ssl_read_record_layer+0x598>)
 801d8be:	2101      	movs	r1, #1
 801d8c0:	4620      	mov	r0, r4
 801d8c2:	f7f2 fee5 	bl	8010690 <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
 801d8c6:	f515 4fe3 	cmn.w	r5, #29056	; 0x7180
 801d8ca:	f47f ad5e 	bne.w	801d38a <mbedtls_ssl_read_record_layer+0x26>
                mbedtls_ssl_send_alert_message( ssl,
 801d8ce:	2214      	movs	r2, #20
 801d8d0:	2102      	movs	r1, #2
 801d8d2:	4620      	mov	r0, r4
 801d8d4:	f7ff fcf4 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801d8d8:	e557      	b.n	801d38a <mbedtls_ssl_read_record_layer+0x26>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 801d8da:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 801d8dc:	5d76      	ldrb	r6, [r6, r5]
 801d8de:	f80c 6b01 	strb.w	r6, [ip], #1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801d8e2:	3501      	adds	r5, #1
 801d8e4:	e7d0      	b.n	801d888 <mbedtls_ssl_read_record_layer+0x524>
        if( dec_msglen != olen )
 801d8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8e8:	429f      	cmp	r7, r3
 801d8ea:	d023      	beq.n	801d934 <mbedtls_ssl_read_record_layer+0x5d0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d8ec:	4b08      	ldr	r3, [pc, #32]	; (801d910 <mbedtls_ssl_read_record_layer+0x5ac>)
 801d8ee:	9300      	str	r3, [sp, #0]
 801d8f0:	f240 730f 	movw	r3, #1807	; 0x70f
 801d8f4:	e631      	b.n	801d55a <mbedtls_ssl_read_record_layer+0x1f6>
 801d8f6:	bf00      	nop
 801d8f8:	08031cdb 	.word	0x08031cdb
 801d8fc:	080318ba 	.word	0x080318ba
 801d900:	08031cf9 	.word	0x08031cf9
 801d904:	080320fd 	.word	0x080320fd
 801d908:	08032106 	.word	0x08032106
 801d90c:	ffff8e80 	.word	0xffff8e80
 801d910:	080313ea 	.word	0x080313ea
 801d914:	080321c1 	.word	0x080321c1
 801d918:	080321dd 	.word	0x080321dd
 801d91c:	08031cce 	.word	0x08031cce
 801d920:	080321ea 	.word	0x080321ea
 801d924:	08032122 	.word	0x08032122
 801d928:	08032160 	.word	0x08032160
 801d92c:	08031db9 	.word	0x08031db9
 801d930:	08032243 	.word	0x08032243
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801d934:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d936:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801d938:	441a      	add	r2, r3
 801d93a:	f812 9c01 	ldrb.w	r9, [r2, #-1]
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801d93e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d940:	6952      	ldr	r2, [r2, #20]
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801d942:	f109 0701 	add.w	r7, r9, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801d946:	18b9      	adds	r1, r7, r2
 801d948:	428b      	cmp	r3, r1
 801d94a:	d259      	bcs.n	801da00 <mbedtls_ssl_read_record_layer+0x69c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
 801d94c:	9301      	str	r3, [sp, #4]
 801d94e:	4b61      	ldr	r3, [pc, #388]	; (801dad4 <mbedtls_ssl_read_record_layer+0x770>)
 801d950:	9300      	str	r3, [sp, #0]
 801d952:	e9cd 2702 	strd	r2, r7, [sp, #8]
 801d956:	f240 7326 	movw	r3, #1830	; 0x726
 801d95a:	4a5f      	ldr	r2, [pc, #380]	; (801dad8 <mbedtls_ssl_read_record_layer+0x774>)
 801d95c:	2101      	movs	r1, #1
 801d95e:	4620      	mov	r0, r4
 801d960:	f7f2 fe66 	bl	8010630 <mbedtls_debug_print_msg>
            correct = 0;
 801d964:	462f      	mov	r7, r5
            padlen = 0;
 801d966:	462e      	mov	r6, r5
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801d968:	6963      	ldr	r3, [r4, #20]
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	dd4a      	ble.n	801da04 <mbedtls_ssl_read_record_layer+0x6a0>
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801d96e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d970:	1e53      	subs	r3, r2, #1
 801d972:	1bd8      	subs	r0, r3, r7
            correct &= ( ssl->in_msglen >= padlen + 1 );
 801d974:	1c7b      	adds	r3, r7, #1
 801d976:	429a      	cmp	r2, r3
 801d978:	bf34      	ite	cc
 801d97a:	2200      	movcc	r2, #0
 801d97c:	f006 0201 	andcs.w	r2, r6, #1
                                       ssl->transform_in->maclen );
 801d980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801d982:	695e      	ldr	r6, [r3, #20]
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d984:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801d986:	f506 569c 	add.w	r6, r6, #4992	; 0x1380
 801d98a:	3608      	adds	r6, #8
 801d98c:	42b0      	cmp	r0, r6
 801d98e:	bf2c      	ite	cs
 801d990:	2600      	movcs	r6, #0
 801d992:	f002 0601 	andcc.w	r6, r2, #1
            size_t pad_count = 0, real_count = 1;
 801d996:	2101      	movs	r1, #1
            for( i = 1; i <= 256; i++ )
 801d998:	460a      	mov	r2, r1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d99a:	fb06 3300 	mla	r3, r6, r0, r3
 801d99e:	f107 3eff 	add.w	lr, r7, #4294967295
            for( i = 1; i <= 256; i++ )
 801d9a2:	f240 1c01 	movw	ip, #257	; 0x101
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d9a6:	5c98      	ldrb	r0, [r3, r2]
 801d9a8:	eba0 090e 	sub.w	r9, r0, lr
                real_count &= ( i <= padlen );
 801d9ac:	4297      	cmp	r7, r2
 801d9ae:	bf34      	ite	cc
 801d9b0:	2100      	movcc	r1, #0
 801d9b2:	f001 0101 	andcs.w	r1, r1, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d9b6:	f1d9 0000 	rsbs	r0, r9, #0
            for( i = 1; i <= 256; i++ )
 801d9ba:	f102 0201 	add.w	r2, r2, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d9be:	eb40 0009 	adc.w	r0, r0, r9
            for( i = 1; i <= 256; i++ )
 801d9c2:	4562      	cmp	r2, ip
                pad_count += real_count *
 801d9c4:	fb01 aa00 	mla	sl, r1, r0, sl
            for( i = 1; i <= 256; i++ )
 801d9c8:	d1ed      	bne.n	801d9a6 <mbedtls_ssl_read_record_layer+0x642>
            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 801d9ca:	4557      	cmp	r7, sl
 801d9cc:	bf14      	ite	ne
 801d9ce:	2600      	movne	r6, #0
 801d9d0:	f006 0601 	andeq.w	r6, r6, #1
            if( padlen > 0 && correct == 0 )
 801d9d4:	b14f      	cbz	r7, 801d9ea <mbedtls_ssl_read_record_layer+0x686>
 801d9d6:	b946      	cbnz	r6, 801d9ea <mbedtls_ssl_read_record_layer+0x686>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
 801d9d8:	4b40      	ldr	r3, [pc, #256]	; (801dadc <mbedtls_ssl_read_record_layer+0x778>)
 801d9da:	9300      	str	r3, [sp, #0]
 801d9dc:	4a3e      	ldr	r2, [pc, #248]	; (801dad8 <mbedtls_ssl_read_record_layer+0x774>)
 801d9de:	f240 7361 	movw	r3, #1889	; 0x761
 801d9e2:	2101      	movs	r1, #1
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	f7f2 fe23 	bl	8010630 <mbedtls_debug_print_msg>
            padlen &= correct * 0x1FF;
 801d9ea:	ea4f 2946 	mov.w	r9, r6, lsl #9
        ssl->in_msglen -= padlen;
 801d9ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            padlen &= correct * 0x1FF;
 801d9f0:	eba9 0906 	sub.w	r9, r9, r6
 801d9f4:	ea09 0907 	and.w	r9, r9, r7
        ssl->in_msglen -= padlen;
 801d9f8:	eba3 0309 	sub.w	r3, r3, r9
 801d9fc:	67a3      	str	r3, [r4, #120]	; 0x78
 801d9fe:	e680      	b.n	801d702 <mbedtls_ssl_read_record_layer+0x39e>
    size_t padlen = 0, correct = 1;
 801da00:	2601      	movs	r6, #1
 801da02:	e7b1      	b.n	801d968 <mbedtls_ssl_read_record_layer+0x604>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801da04:	4b36      	ldr	r3, [pc, #216]	; (801dae0 <mbedtls_ssl_read_record_layer+0x77c>)
 801da06:	9300      	str	r3, [sp, #0]
 801da08:	f240 7369 	movw	r3, #1897	; 0x769
 801da0c:	e5a5      	b.n	801d55a <mbedtls_ssl_read_record_layer+0x1f6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801da0e:	4b34      	ldr	r3, [pc, #208]	; (801dae0 <mbedtls_ssl_read_record_layer+0x77c>)
 801da10:	9300      	str	r3, [sp, #0]
 801da12:	f240 7373 	movw	r3, #1907	; 0x773
 801da16:	e5a0      	b.n	801d55a <mbedtls_ssl_read_record_layer+0x1f6>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 801da18:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801da1a:	f7f6 fe71 	bl	8014700 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 801da1e:	3501      	adds	r5, #1
 801da20:	e6c5      	b.n	801d7ae <mbedtls_ssl_read_record_layer+0x44a>
        diff |= A[i] ^ B[i];
 801da22:	f812 1008 	ldrb.w	r1, [r2, r8]
 801da26:	f81a 5008 	ldrb.w	r5, [sl, r8]
 801da2a:	4069      	eors	r1, r5
 801da2c:	430b      	orrs	r3, r1
    for( i = 0; i < n; i++ )
 801da2e:	f108 0801 	add.w	r8, r8, #1
 801da32:	e6e7      	b.n	801d804 <mbedtls_ssl_read_record_layer+0x4a0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801da34:	4b2a      	ldr	r3, [pc, #168]	; (801dae0 <mbedtls_ssl_read_record_layer+0x77c>)
 801da36:	9300      	str	r3, [sp, #0]
 801da38:	f240 73bc 	movw	r3, #1980	; 0x7bc
 801da3c:	e58d      	b.n	801d55a <mbedtls_ssl_read_record_layer+0x1f6>
        if( correct == 0 )
 801da3e:	2e00      	cmp	r6, #0
 801da40:	f43f ae52 	beq.w	801d6e8 <mbedtls_ssl_read_record_layer+0x384>
    if( ssl->in_msglen == 0 )
 801da44:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801da46:	b95b      	cbnz	r3, 801da60 <mbedtls_ssl_read_record_layer+0x6fc>
        ssl->nb_zero++;
 801da48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801da4c:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
 801da4e:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
 801da50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if( ssl->nb_zero > 3 )
 801da54:	dd07      	ble.n	801da66 <mbedtls_ssl_read_record_layer+0x702>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801da56:	4b23      	ldr	r3, [pc, #140]	; (801dae4 <mbedtls_ssl_read_record_layer+0x780>)
 801da58:	9300      	str	r3, [sp, #0]
 801da5a:	f44f 63fd 	mov.w	r3, #2024	; 0x7e8
 801da5e:	e6db      	b.n	801d818 <mbedtls_ssl_read_record_layer+0x4b4>
        ssl->nb_zero = 0;
 801da60:	2300      	movs	r3, #0
 801da62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    unsigned char diff = 0;
 801da66:	2208      	movs	r2, #8
            if( ++ssl->in_ctr[i - 1] != 0 )
 801da68:	3a01      	subs	r2, #1
 801da6a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801da6c:	5c8b      	ldrb	r3, [r1, r2]
 801da6e:	3301      	adds	r3, #1
 801da70:	b2db      	uxtb	r3, r3
 801da72:	548b      	strb	r3, [r1, r2]
 801da74:	b963      	cbnz	r3, 801da90 <mbedtls_ssl_read_record_layer+0x72c>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801da76:	2a00      	cmp	r2, #0
 801da78:	d1f6      	bne.n	801da68 <mbedtls_ssl_read_record_layer+0x704>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801da7a:	4b1b      	ldr	r3, [pc, #108]	; (801dae8 <mbedtls_ssl_read_record_layer+0x784>)
 801da7c:	9300      	str	r3, [sp, #0]
 801da7e:	4a16      	ldr	r2, [pc, #88]	; (801dad8 <mbedtls_ssl_read_record_layer+0x774>)
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801da80:	4d1a      	ldr	r5, [pc, #104]	; (801daec <mbedtls_ssl_read_record_layer+0x788>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801da82:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801da86:	2101      	movs	r1, #1
 801da88:	4620      	mov	r0, r4
 801da8a:	f7f2 fdd1 	bl	8010630 <mbedtls_debug_print_msg>
 801da8e:	e710      	b.n	801d8b2 <mbedtls_ssl_read_record_layer+0x54e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 801da90:	4b17      	ldr	r3, [pc, #92]	; (801daf0 <mbedtls_ssl_read_record_layer+0x78c>)
 801da92:	9300      	str	r3, [sp, #0]
 801da94:	4a10      	ldr	r2, [pc, #64]	; (801dad8 <mbedtls_ssl_read_record_layer+0x774>)
 801da96:	f640 0303 	movw	r3, #2051	; 0x803
 801da9a:	2102      	movs	r1, #2
 801da9c:	4620      	mov	r0, r4
 801da9e:	f7f2 fdc7 	bl	8010630 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 801daa2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801daa4:	9302      	str	r3, [sp, #8]
 801daa6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801daa8:	9301      	str	r3, [sp, #4]
 801daaa:	4b12      	ldr	r3, [pc, #72]	; (801daf4 <mbedtls_ssl_read_record_layer+0x790>)
 801daac:	9300      	str	r3, [sp, #0]
 801daae:	4a0a      	ldr	r2, [pc, #40]	; (801dad8 <mbedtls_ssl_read_record_layer+0x774>)
 801dab0:	f640 635d 	movw	r3, #3677	; 0xe5d
 801dab4:	2104      	movs	r1, #4
 801dab6:	4620      	mov	r0, r4
 801dab8:	f7f2 fe18 	bl	80106ec <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801dabc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801dabe:	f241 3388 	movw	r3, #5000	; 0x1388
 801dac2:	429a      	cmp	r2, r3
 801dac4:	f67f ac97 	bls.w	801d3f6 <mbedtls_ssl_read_record_layer+0x92>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801dac8:	4b0b      	ldr	r3, [pc, #44]	; (801daf8 <mbedtls_ssl_read_record_layer+0x794>)
 801daca:	9300      	str	r3, [sp, #0]
 801dacc:	f640 6361 	movw	r3, #3681	; 0xe61
 801dad0:	e4d4      	b.n	801d47c <mbedtls_ssl_read_record_layer+0x118>
 801dad2:	bf00      	nop
 801dad4:	0803217f 	.word	0x0803217f
 801dad8:	080318ba 	.word	0x080318ba
 801dadc:	080321a7 	.word	0x080321a7
 801dae0:	080313ea 	.word	0x080313ea
 801dae4:	08032205 	.word	0x08032205
 801dae8:	08032253 	.word	0x08032253
 801daec:	ffff9480 	.word	0xffff9480
 801daf0:	08032277 	.word	0x08032277
 801daf4:	08032286 	.word	0x08032286
 801daf8:	08032073 	.word	0x08032073

0801dafc <mbedtls_ssl_read_record>:
{
 801dafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801dafe:	4b25      	ldr	r3, [pc, #148]	; (801db94 <mbedtls_ssl_read_record+0x98>)
 801db00:	9300      	str	r3, [sp, #0]
{
 801db02:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801db04:	f640 6389 	movw	r3, #3721	; 0xe89
 801db08:	4a23      	ldr	r2, [pc, #140]	; (801db98 <mbedtls_ssl_read_record+0x9c>)
 801db0a:	2102      	movs	r1, #2
 801db0c:	f7f2 fd90 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 801db10:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 801db14:	bb83      	cbnz	r3, 801db78 <mbedtls_ssl_read_record+0x7c>
            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 801db16:	4620      	mov	r0, r4
 801db18:	f7ff fc24 	bl	801d364 <mbedtls_ssl_read_record_layer>
 801db1c:	4605      	mov	r5, r0
 801db1e:	b160      	cbz	r0, 801db3a <mbedtls_ssl_read_record+0x3e>
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801db20:	4b1e      	ldr	r3, [pc, #120]	; (801db9c <mbedtls_ssl_read_record+0xa0>)
 801db22:	9300      	str	r3, [sp, #0]
 801db24:	9001      	str	r0, [sp, #4]
 801db26:	f640 6391 	movw	r3, #3729	; 0xe91
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801db2a:	4a1b      	ldr	r2, [pc, #108]	; (801db98 <mbedtls_ssl_read_record+0x9c>)
 801db2c:	2101      	movs	r1, #1
 801db2e:	4620      	mov	r0, r4
 801db30:	f7f2 fdae 	bl	8010690 <mbedtls_debug_print_ret>
}
 801db34:	4628      	mov	r0, r5
 801db36:	b003      	add	sp, #12
 801db38:	bd30      	pop	{r4, r5, pc}
            ret = mbedtls_ssl_handle_message_type( ssl );
 801db3a:	4620      	mov	r0, r4
 801db3c:	f7ff fb64 	bl	801d208 <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801db40:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
 801db44:	4605      	mov	r5, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801db46:	d0e6      	beq.n	801db16 <mbedtls_ssl_read_record+0x1a>
        if( 0 != ret )
 801db48:	b128      	cbz	r0, 801db56 <mbedtls_ssl_read_record+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801db4a:	4b14      	ldr	r3, [pc, #80]	; (801db9c <mbedtls_ssl_read_record+0xa0>)
 801db4c:	9300      	str	r3, [sp, #0]
 801db4e:	9001      	str	r0, [sp, #4]
 801db50:	f640 639b 	movw	r3, #3739	; 0xe9b
 801db54:	e7e9      	b.n	801db2a <mbedtls_ssl_read_record+0x2e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801db56:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801db58:	2b16      	cmp	r3, #22
 801db5a:	d102      	bne.n	801db62 <mbedtls_ssl_read_record+0x66>
            mbedtls_ssl_update_handshake_status( ssl );
 801db5c:	4620      	mov	r0, r4
 801db5e:	f7ff fb41 	bl	801d1e4 <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 801db62:	4b0f      	ldr	r3, [pc, #60]	; (801dba0 <mbedtls_ssl_read_record+0xa4>)
 801db64:	9300      	str	r3, [sp, #0]
 801db66:	4a0c      	ldr	r2, [pc, #48]	; (801db98 <mbedtls_ssl_read_record+0x9c>)
 801db68:	f640 63aa 	movw	r3, #3754	; 0xeaa
 801db6c:	2102      	movs	r1, #2
 801db6e:	4620      	mov	r0, r4
 801db70:	f7f2 fd5e 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801db74:	2500      	movs	r5, #0
 801db76:	e7dd      	b.n	801db34 <mbedtls_ssl_read_record+0x38>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 801db78:	4b0a      	ldr	r3, [pc, #40]	; (801dba4 <mbedtls_ssl_read_record+0xa8>)
 801db7a:	9300      	str	r3, [sp, #0]
 801db7c:	4a06      	ldr	r2, [pc, #24]	; (801db98 <mbedtls_ssl_read_record+0x9c>)
 801db7e:	f640 63a6 	movw	r3, #3750	; 0xea6
 801db82:	2102      	movs	r1, #2
 801db84:	4620      	mov	r0, r4
 801db86:	f7f2 fd53 	bl	8010630 <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 801db8a:	2300      	movs	r3, #0
 801db8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801db90:	e7e7      	b.n	801db62 <mbedtls_ssl_read_record+0x66>
 801db92:	bf00      	nop
 801db94:	080322a2 	.word	0x080322a2
 801db98:	080318ba 	.word	0x080318ba
 801db9c:	080322b1 	.word	0x080322b1
 801dba0:	080322f0 	.word	0x080322f0
 801dba4:	080322cf 	.word	0x080322cf

0801dba8 <mbedtls_ssl_write_certificate>:
{
 801dba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801dbaa:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dbac:	4a5b      	ldr	r2, [pc, #364]	; (801dd1c <mbedtls_ssl_write_certificate+0x174>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801dbae:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dbb0:	4b5b      	ldr	r3, [pc, #364]	; (801dd20 <mbedtls_ssl_write_certificate+0x178>)
{
 801dbb2:	b085      	sub	sp, #20
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dbb4:	2102      	movs	r1, #2
 801dbb6:	9300      	str	r3, [sp, #0]
 801dbb8:	f241 036b 	movw	r3, #4203	; 0x106b
{
 801dbbc:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dbbe:	f7f2 fd37 	bl	8010630 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801dbc2:	7aab      	ldrb	r3, [r5, #10]
 801dbc4:	2b0b      	cmp	r3, #11
 801dbc6:	d815      	bhi.n	801dbf4 <mbedtls_ssl_write_certificate+0x4c>
 801dbc8:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801dbcc:	40dd      	lsrs	r5, r3
 801dbce:	43ed      	mvns	r5, r5
 801dbd0:	f015 0501 	ands.w	r5, r5, #1
 801dbd4:	d10e      	bne.n	801dbf4 <mbedtls_ssl_write_certificate+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dbd6:	4b53      	ldr	r3, [pc, #332]	; (801dd24 <mbedtls_ssl_write_certificate+0x17c>)
 801dbd8:	9300      	str	r3, [sp, #0]
 801dbda:	f241 0372 	movw	r3, #4210	; 0x1072
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dbde:	4a4f      	ldr	r2, [pc, #316]	; (801dd1c <mbedtls_ssl_write_certificate+0x174>)
 801dbe0:	2102      	movs	r1, #2
 801dbe2:	4620      	mov	r0, r4
 801dbe4:	f7f2 fd24 	bl	8010630 <mbedtls_debug_print_msg>
            ssl->state++;
 801dbe8:	6863      	ldr	r3, [r4, #4]
 801dbea:	3301      	adds	r3, #1
 801dbec:	6063      	str	r3, [r4, #4]
}
 801dbee:	4628      	mov	r0, r5
 801dbf0:	b005      	add	sp, #20
 801dbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801dbf4:	6822      	ldr	r2, [r4, #0]
 801dbf6:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801dbfa:	07db      	lsls	r3, r3, #31
 801dbfc:	d407      	bmi.n	801dc0e <mbedtls_ssl_write_certificate+0x66>
        if( ssl->client_auth == 0 )
 801dbfe:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 801dc02:	b925      	cbnz	r5, 801dc0e <mbedtls_ssl_write_certificate+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dc04:	4b47      	ldr	r3, [pc, #284]	; (801dd24 <mbedtls_ssl_write_certificate+0x17c>)
 801dc06:	9300      	str	r3, [sp, #0]
 801dc08:	f241 037c 	movw	r3, #4220	; 0x107c
 801dc0c:	e7e7      	b.n	801dbde <mbedtls_ssl_write_certificate+0x36>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801dc0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dc10:	b113      	cbz	r3, 801dc18 <mbedtls_ssl_write_certificate+0x70>
 801dc12:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801dc16:	b90b      	cbnz	r3, 801dc1c <mbedtls_ssl_write_certificate+0x74>
        key_cert = ssl->conf->key_cert;
 801dc18:	6c13      	ldr	r3, [r2, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801dc1a:	b103      	cbz	r3, 801dc1e <mbedtls_ssl_write_certificate+0x76>
 801dc1c:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 801dc1e:	9301      	str	r3, [sp, #4]
 801dc20:	4b41      	ldr	r3, [pc, #260]	; (801dd28 <mbedtls_ssl_write_certificate+0x180>)
 801dc22:	9300      	str	r3, [sp, #0]
 801dc24:	4a3d      	ldr	r2, [pc, #244]	; (801dd1c <mbedtls_ssl_write_certificate+0x174>)
 801dc26:	f241 039f 	movw	r3, #4255	; 0x109f
 801dc2a:	2103      	movs	r1, #3
 801dc2c:	4620      	mov	r0, r4
 801dc2e:	f7f2 fe4f 	bl	80108d0 <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801dc32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dc34:	b113      	cbz	r3, 801dc3c <mbedtls_ssl_write_certificate+0x94>
 801dc36:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801dc3a:	b91b      	cbnz	r3, 801dc44 <mbedtls_ssl_write_certificate+0x9c>
        key_cert = ssl->conf->key_cert;
 801dc3c:	6823      	ldr	r3, [r4, #0]
 801dc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d05e      	beq.n	801dd02 <mbedtls_ssl_write_certificate+0x15a>
 801dc44:	681d      	ldr	r5, [r3, #0]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801dc46:	f241 3785 	movw	r7, #4997	; 0x1385
 801dc4a:	2307      	movs	r3, #7
    while( crt != NULL )
 801dc4c:	bb45      	cbnz	r5, 801dca0 <mbedtls_ssl_write_certificate+0xf8>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 801dc4e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dc52:	1fda      	subs	r2, r3, #7
 801dc54:	0c10      	lsrs	r0, r2, #16
 801dc56:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 801dc58:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dc5c:	0a10      	lsrs	r0, r2, #8
 801dc5e:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 801dc60:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dc64:	718a      	strb	r2, [r1, #6]
    ssl->out_msglen  = i;
 801dc66:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801dc6a:	2316      	movs	r3, #22
 801dc6c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 801dc70:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801dc74:	220b      	movs	r2, #11
 801dc76:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801dc78:	6863      	ldr	r3, [r4, #4]
 801dc7a:	3301      	adds	r3, #1
 801dc7c:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801dc7e:	4620      	mov	r0, r4
 801dc80:	f7fe ffe0 	bl	801cc44 <mbedtls_ssl_write_record>
 801dc84:	4605      	mov	r5, r0
 801dc86:	2800      	cmp	r0, #0
 801dc88:	d03d      	beq.n	801dd06 <mbedtls_ssl_write_certificate+0x15e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801dc8a:	4b28      	ldr	r3, [pc, #160]	; (801dd2c <mbedtls_ssl_write_certificate+0x184>)
 801dc8c:	9001      	str	r0, [sp, #4]
 801dc8e:	9300      	str	r3, [sp, #0]
 801dc90:	4a22      	ldr	r2, [pc, #136]	; (801dd1c <mbedtls_ssl_write_certificate+0x174>)
 801dc92:	f241 03cf 	movw	r3, #4303	; 0x10cf
 801dc96:	2101      	movs	r1, #1
 801dc98:	4620      	mov	r0, r4
 801dc9a:	f7f2 fcf9 	bl	8010690 <mbedtls_debug_print_ret>
        return( ret );
 801dc9e:	e7a6      	b.n	801dbee <mbedtls_ssl_write_certificate+0x46>
        n = crt->raw.len;
 801dca0:	686a      	ldr	r2, [r5, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801dca2:	1af9      	subs	r1, r7, r3
 801dca4:	1cd8      	adds	r0, r3, #3
 801dca6:	4291      	cmp	r1, r2
 801dca8:	eb02 0600 	add.w	r6, r2, r0
 801dcac:	d20e      	bcs.n	801dccc <mbedtls_ssl_write_certificate+0x124>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801dcae:	f241 3388 	movw	r3, #5000	; 0x1388
 801dcb2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801dcb6:	4b1e      	ldr	r3, [pc, #120]	; (801dd30 <mbedtls_ssl_write_certificate+0x188>)
 801dcb8:	9300      	str	r3, [sp, #0]
 801dcba:	4a18      	ldr	r2, [pc, #96]	; (801dd1c <mbedtls_ssl_write_certificate+0x174>)
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801dcbc:	4d1d      	ldr	r5, [pc, #116]	; (801dd34 <mbedtls_ssl_write_certificate+0x18c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801dcbe:	f241 03b3 	movw	r3, #4275	; 0x10b3
 801dcc2:	2101      	movs	r1, #1
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	f7f2 fcb3 	bl	8010630 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801dcca:	e790      	b.n	801dbee <mbedtls_ssl_write_certificate+0x46>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 801dccc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dcd0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dcd4:	f801 c003 	strb.w	ip, [r1, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 801dcd8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dcdc:	4419      	add	r1, r3
 801dcde:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801dce2:	f881 c001 	strb.w	ip, [r1, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 801dce6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dcea:	440b      	add	r3, r1
 801dcec:	709a      	strb	r2, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 801dcee:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801dcf2:	68a9      	ldr	r1, [r5, #8]
 801dcf4:	4418      	add	r0, r3
 801dcf6:	f004 faf6 	bl	80222e6 <memcpy>
        i += n; crt = crt->next;
 801dcfa:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 801dcfe:	4633      	mov	r3, r6
 801dd00:	e7a4      	b.n	801dc4c <mbedtls_ssl_write_certificate+0xa4>
 801dd02:	2307      	movs	r3, #7
 801dd04:	e7a3      	b.n	801dc4e <mbedtls_ssl_write_certificate+0xa6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 801dd06:	4b0c      	ldr	r3, [pc, #48]	; (801dd38 <mbedtls_ssl_write_certificate+0x190>)
 801dd08:	9300      	str	r3, [sp, #0]
 801dd0a:	4a04      	ldr	r2, [pc, #16]	; (801dd1c <mbedtls_ssl_write_certificate+0x174>)
 801dd0c:	f241 03d3 	movw	r3, #4307	; 0x10d3
 801dd10:	2102      	movs	r1, #2
 801dd12:	4620      	mov	r0, r4
 801dd14:	f7f2 fc8c 	bl	8010630 <mbedtls_debug_print_msg>
    return( ret );
 801dd18:	e769      	b.n	801dbee <mbedtls_ssl_write_certificate+0x46>
 801dd1a:	bf00      	nop
 801dd1c:	080318ba 	.word	0x080318ba
 801dd20:	080322ff 	.word	0x080322ff
 801dd24:	08032314 	.word	0x08032314
 801dd28:	0803232e 	.word	0x0803232e
 801dd2c:	08030d52 	.word	0x08030d52
 801dd30:	0803233e 	.word	0x0803233e
 801dd34:	ffff8b00 	.word	0xffff8b00
 801dd38:	0803235d 	.word	0x0803235d

0801dd3c <mbedtls_ssl_write_change_cipher_spec>:
{
 801dd3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801dd3e:	4b17      	ldr	r3, [pc, #92]	; (801dd9c <mbedtls_ssl_write_change_cipher_spec+0x60>)
 801dd40:	9300      	str	r3, [sp, #0]
{
 801dd42:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801dd44:	f241 235c 	movw	r3, #4700	; 0x125c
 801dd48:	4a15      	ldr	r2, [pc, #84]	; (801dda0 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801dd4a:	2102      	movs	r1, #2
 801dd4c:	f7f2 fc70 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->out_msglen  = 1;
 801dd50:	2601      	movs	r6, #1
 801dd52:	2314      	movs	r3, #20
 801dd54:	e9c4 3629 	strd	r3, r6, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = 1;
 801dd58:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801dd5c:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801dd5e:	6863      	ldr	r3, [r4, #4]
 801dd60:	4433      	add	r3, r6
 801dd62:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801dd64:	4620      	mov	r0, r4
 801dd66:	f7fe ff6d 	bl	801cc44 <mbedtls_ssl_write_record>
 801dd6a:	4605      	mov	r5, r0
 801dd6c:	b160      	cbz	r0, 801dd88 <mbedtls_ssl_write_change_cipher_spec+0x4c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801dd6e:	4b0d      	ldr	r3, [pc, #52]	; (801dda4 <mbedtls_ssl_write_change_cipher_spec+0x68>)
 801dd70:	9001      	str	r0, [sp, #4]
 801dd72:	9300      	str	r3, [sp, #0]
 801dd74:	4a0a      	ldr	r2, [pc, #40]	; (801dda0 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801dd76:	f241 2366 	movw	r3, #4710	; 0x1266
 801dd7a:	4631      	mov	r1, r6
 801dd7c:	4620      	mov	r0, r4
 801dd7e:	f7f2 fc87 	bl	8010690 <mbedtls_debug_print_ret>
}
 801dd82:	4628      	mov	r0, r5
 801dd84:	b002      	add	sp, #8
 801dd86:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 801dd88:	4b07      	ldr	r3, [pc, #28]	; (801dda8 <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 801dd8a:	9300      	str	r3, [sp, #0]
 801dd8c:	4a04      	ldr	r2, [pc, #16]	; (801dda0 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801dd8e:	f241 236a 	movw	r3, #4714	; 0x126a
 801dd92:	2102      	movs	r1, #2
 801dd94:	4620      	mov	r0, r4
 801dd96:	f7f2 fc4b 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801dd9a:	e7f2      	b.n	801dd82 <mbedtls_ssl_write_change_cipher_spec+0x46>
 801dd9c:	08032372 	.word	0x08032372
 801dda0:	080318ba 	.word	0x080318ba
 801dda4:	08030d52 	.word	0x08030d52
 801dda8:	0803238e 	.word	0x0803238e

0801ddac <mbedtls_ssl_parse_change_cipher_spec>:
{
 801ddac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801ddae:	4b36      	ldr	r3, [pc, #216]	; (801de88 <mbedtls_ssl_parse_change_cipher_spec+0xdc>)
 801ddb0:	9300      	str	r3, [sp, #0]
{
 801ddb2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801ddb4:	f241 2373 	movw	r3, #4723	; 0x1273
 801ddb8:	4a34      	ldr	r2, [pc, #208]	; (801de8c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801ddba:	2102      	movs	r1, #2
 801ddbc:	f7f2 fc38 	bl	8010630 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ddc0:	4620      	mov	r0, r4
 801ddc2:	f7ff fe9b 	bl	801dafc <mbedtls_ssl_read_record>
 801ddc6:	4605      	mov	r5, r0
 801ddc8:	b160      	cbz	r0, 801dde4 <mbedtls_ssl_parse_change_cipher_spec+0x38>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ddca:	4b31      	ldr	r3, [pc, #196]	; (801de90 <mbedtls_ssl_parse_change_cipher_spec+0xe4>)
 801ddcc:	9001      	str	r0, [sp, #4]
 801ddce:	9300      	str	r3, [sp, #0]
 801ddd0:	4a2e      	ldr	r2, [pc, #184]	; (801de8c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801ddd2:	f241 2377 	movw	r3, #4727	; 0x1277
 801ddd6:	2101      	movs	r1, #1
 801ddd8:	4620      	mov	r0, r4
 801ddda:	f7f2 fc59 	bl	8010690 <mbedtls_debug_print_ret>
}
 801ddde:	4628      	mov	r0, r5
 801dde0:	b003      	add	sp, #12
 801dde2:	bd30      	pop	{r4, r5, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 801dde4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801dde6:	2b14      	cmp	r3, #20
 801dde8:	d00f      	beq.n	801de0a <mbedtls_ssl_parse_change_cipher_spec+0x5e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801ddea:	4b2a      	ldr	r3, [pc, #168]	; (801de94 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801ddec:	9300      	str	r3, [sp, #0]
 801ddee:	4a27      	ldr	r2, [pc, #156]	; (801de8c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801ddf0:	4d29      	ldr	r5, [pc, #164]	; (801de98 <mbedtls_ssl_parse_change_cipher_spec+0xec>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801ddf2:	f241 237d 	movw	r3, #4733	; 0x127d
 801ddf6:	2101      	movs	r1, #1
 801ddf8:	4620      	mov	r0, r4
 801ddfa:	f7f2 fc19 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ddfe:	220a      	movs	r2, #10
 801de00:	2102      	movs	r1, #2
 801de02:	4620      	mov	r0, r4
 801de04:	f7ff fa5c 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801de08:	e7e9      	b.n	801ddde <mbedtls_ssl_parse_change_cipher_spec+0x32>
    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 801de0a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801de0c:	2b01      	cmp	r3, #1
 801de0e:	d103      	bne.n	801de18 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
 801de10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801de12:	781b      	ldrb	r3, [r3, #0]
 801de14:	2b01      	cmp	r3, #1
 801de16:	d00f      	beq.n	801de38 <mbedtls_ssl_parse_change_cipher_spec+0x8c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801de18:	4b1e      	ldr	r3, [pc, #120]	; (801de94 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801de1a:	9300      	str	r3, [sp, #0]
 801de1c:	4a1b      	ldr	r2, [pc, #108]	; (801de8c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 801de1e:	4d1f      	ldr	r5, [pc, #124]	; (801de9c <mbedtls_ssl_parse_change_cipher_spec+0xf0>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801de20:	f241 2385 	movw	r3, #4741	; 0x1285
 801de24:	2101      	movs	r1, #1
 801de26:	4620      	mov	r0, r4
 801de28:	f7f2 fc02 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801de2c:	2232      	movs	r2, #50	; 0x32
 801de2e:	2102      	movs	r1, #2
 801de30:	4620      	mov	r0, r4
 801de32:	f7ff fa45 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 801de36:	e7d2      	b.n	801ddde <mbedtls_ssl_parse_change_cipher_spec+0x32>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 801de38:	4b19      	ldr	r3, [pc, #100]	; (801dea0 <mbedtls_ssl_parse_change_cipher_spec+0xf4>)
 801de3a:	4a14      	ldr	r2, [pc, #80]	; (801de8c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801de3c:	9300      	str	r3, [sp, #0]
 801de3e:	2103      	movs	r1, #3
 801de40:	4620      	mov	r0, r4
 801de42:	f241 238f 	movw	r3, #4751	; 0x128f
 801de46:	f7f2 fbf3 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 801de4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801de4c:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->session_in = ssl->session_negotiate;
 801de4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de50:	62a3      	str	r3, [r4, #40]	; 0x28
    memset( ssl->in_ctr, 0, 8 );
 801de52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801de54:	601d      	str	r5, [r3, #0]
 801de56:	605d      	str	r5, [r3, #4]
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801de58:	6963      	ldr	r3, [r4, #20]
 801de5a:	2b01      	cmp	r3, #1
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 801de5c:	bfc8      	it	gt
 801de5e:	6ca1      	ldrgt	r1, [r4, #72]	; 0x48
 801de60:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801de62:	bfc2      	ittt	gt
 801de64:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
 801de68:	1a52      	subgt	r2, r2, r1
 801de6a:	189b      	addgt	r3, r3, r2
        ssl->in_msg = ssl->in_iv;
 801de6c:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->state++;
 801de6e:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801de70:	4a06      	ldr	r2, [pc, #24]	; (801de8c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
    ssl->state++;
 801de72:	3301      	adds	r3, #1
 801de74:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801de76:	4b0b      	ldr	r3, [pc, #44]	; (801dea4 <mbedtls_ssl_parse_change_cipher_spec+0xf8>)
 801de78:	9300      	str	r3, [sp, #0]
 801de7a:	2102      	movs	r1, #2
 801de7c:	f241 23c1 	movw	r3, #4801	; 0x12c1
 801de80:	4620      	mov	r0, r4
 801de82:	f7f2 fbd5 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801de86:	e7aa      	b.n	801ddde <mbedtls_ssl_parse_change_cipher_spec+0x32>
 801de88:	080323aa 	.word	0x080323aa
 801de8c:	080318ba 	.word	0x080318ba
 801de90:	08030dab 	.word	0x08030dab
 801de94:	080323c6 	.word	0x080323c6
 801de98:	ffff8900 	.word	0xffff8900
 801de9c:	ffff8200 	.word	0xffff8200
 801dea0:	080323e5 	.word	0x080323e5
 801dea4:	08032416 	.word	0x08032416

0801dea8 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801dea8:	7a4a      	ldrb	r2, [r1, #9]
 801deaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801deac:	2a07      	cmp	r2, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 801deae:	bf0c      	ite	eq
 801deb0:	4a02      	ldreq	r2, [pc, #8]	; (801debc <mbedtls_ssl_optimize_checksum+0x14>)
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 801deb2:	4a03      	ldrne	r2, [pc, #12]	; (801dec0 <mbedtls_ssl_optimize_checksum+0x18>)
 801deb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
}
 801deb8:	4770      	bx	lr
 801deba:	bf00      	nop
 801debc:	0801c427 	.word	0x0801c427
 801dec0:	0801c41d 	.word	0x0801c41d

0801dec4 <mbedtls_ssl_write_finished>:
{
 801dec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801dec6:	4b3b      	ldr	r3, [pc, #236]	; (801dfb4 <mbedtls_ssl_write_finished+0xf0>)
 801dec8:	4a3b      	ldr	r2, [pc, #236]	; (801dfb8 <mbedtls_ssl_write_finished+0xf4>)
 801deca:	9300      	str	r3, [sp, #0]
{
 801decc:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801dece:	2102      	movs	r1, #2
 801ded0:	f241 4371 	movw	r3, #5233	; 0x1471
 801ded4:	f7f2 fbac 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801ded8:	6963      	ldr	r3, [r4, #20]
 801deda:	2b01      	cmp	r3, #1
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 801dedc:	bfc8      	it	gt
 801dede:	6ca1      	ldrgt	r1, [r4, #72]	; 0x48
 801dee0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801dee4:	bfc2      	ittt	gt
 801dee6:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
 801deea:	1a52      	subgt	r2, r2, r1
 801deec:	189b      	addgt	r3, r3, r2
        ssl->out_msg = ssl->out_iv;
 801deee:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 801def2:	6823      	ldr	r3, [r4, #0]
 801def4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801def8:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801defc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801defe:	f002 0201 	and.w	r2, r2, #1
 801df02:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801df06:	3104      	adds	r1, #4
 801df08:	4620      	mov	r0, r4
 801df0a:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801df0c:	6963      	ldr	r3, [r4, #20]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801df0e:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801df12:	2b00      	cmp	r3, #0
 801df14:	bf0c      	ite	eq
 801df16:	2524      	moveq	r5, #36	; 0x24
 801df18:	250c      	movne	r5, #12
    ssl->verify_data_len = hash_len;
 801df1a:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801df1e:	462a      	mov	r2, r5
 801df20:	1d31      	adds	r1, r6, #4
 801df22:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 801df26:	f004 f9de 	bl	80222e6 <memcpy>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801df2a:	2316      	movs	r3, #22
 801df2c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msglen  = 4 + hash_len;
 801df30:	3504      	adds	r5, #4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801df32:	2314      	movs	r3, #20
    ssl->out_msglen  = 4 + hash_len;
 801df34:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801df38:	7033      	strb	r3, [r6, #0]
    if( ssl->handshake->resume != 0 )
 801df3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801df3c:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801df40:	b353      	cbz	r3, 801df98 <mbedtls_ssl_write_finished+0xd4>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801df42:	6823      	ldr	r3, [r4, #0]
 801df44:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801df48:	07db      	lsls	r3, r3, #31
 801df4a:	d401      	bmi.n	801df50 <mbedtls_ssl_write_finished+0x8c>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801df4c:	230f      	movs	r3, #15
        ssl->state++;
 801df4e:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 801df50:	4b1a      	ldr	r3, [pc, #104]	; (801dfbc <mbedtls_ssl_write_finished+0xf8>)
 801df52:	9300      	str	r3, [sp, #0]
 801df54:	4a18      	ldr	r2, [pc, #96]	; (801dfb8 <mbedtls_ssl_write_finished+0xf4>)
 801df56:	f241 43a7 	movw	r3, #5287	; 0x14a7
 801df5a:	2103      	movs	r1, #3
 801df5c:	4620      	mov	r0, r4
 801df5e:	f7f2 fb67 	bl	8010630 <mbedtls_debug_print_msg>
    memset( ssl->out_ctr, 0, 8 );
 801df62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801df66:	2200      	movs	r2, #0
 801df68:	601a      	str	r2, [r3, #0]
 801df6a:	605a      	str	r2, [r3, #4]
    ssl->transform_out = ssl->transform_negotiate;
 801df6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801df6e:	6423      	str	r3, [r4, #64]	; 0x40
    ssl->session_out = ssl->session_negotiate;
 801df70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801df72:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801df74:	4620      	mov	r0, r4
 801df76:	f7fe fe65 	bl	801cc44 <mbedtls_ssl_write_record>
 801df7a:	4605      	mov	r5, r0
 801df7c:	b178      	cbz	r0, 801df9e <mbedtls_ssl_write_finished+0xda>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801df7e:	4b10      	ldr	r3, [pc, #64]	; (801dfc0 <mbedtls_ssl_write_finished+0xfc>)
 801df80:	9001      	str	r0, [sp, #4]
 801df82:	9300      	str	r3, [sp, #0]
 801df84:	4a0c      	ldr	r2, [pc, #48]	; (801dfb8 <mbedtls_ssl_write_finished+0xf4>)
 801df86:	f241 43da 	movw	r3, #5338	; 0x14da
 801df8a:	2101      	movs	r1, #1
 801df8c:	4620      	mov	r0, r4
 801df8e:	f7f2 fb7f 	bl	8010690 <mbedtls_debug_print_ret>
}
 801df92:	4628      	mov	r0, r5
 801df94:	b002      	add	sp, #8
 801df96:	bd70      	pop	{r4, r5, r6, pc}
        ssl->state++;
 801df98:	6863      	ldr	r3, [r4, #4]
 801df9a:	3301      	adds	r3, #1
 801df9c:	e7d7      	b.n	801df4e <mbedtls_ssl_write_finished+0x8a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 801df9e:	4b09      	ldr	r3, [pc, #36]	; (801dfc4 <mbedtls_ssl_write_finished+0x100>)
 801dfa0:	9300      	str	r3, [sp, #0]
 801dfa2:	4a05      	ldr	r2, [pc, #20]	; (801dfb8 <mbedtls_ssl_write_finished+0xf4>)
 801dfa4:	f241 43de 	movw	r3, #5342	; 0x14de
 801dfa8:	2102      	movs	r1, #2
 801dfaa:	4620      	mov	r0, r4
 801dfac:	f7f2 fb40 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801dfb0:	e7ef      	b.n	801df92 <mbedtls_ssl_write_finished+0xce>
 801dfb2:	bf00      	nop
 801dfb4:	08032432 	.word	0x08032432
 801dfb8:	080318ba 	.word	0x080318ba
 801dfbc:	08032444 	.word	0x08032444
 801dfc0:	08030d52 	.word	0x08030d52
 801dfc4:	08032476 	.word	0x08032476

0801dfc8 <mbedtls_ssl_parse_finished>:
{
 801dfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfca:	b087      	sub	sp, #28
 801dfcc:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 801dfce:	4b44      	ldr	r3, [pc, #272]	; (801e0e0 <mbedtls_ssl_parse_finished+0x118>)
 801dfd0:	9300      	str	r3, [sp, #0]
 801dfd2:	4a44      	ldr	r2, [pc, #272]	; (801e0e4 <mbedtls_ssl_parse_finished+0x11c>)
 801dfd4:	f241 43ef 	movw	r3, #5359	; 0x14ef
 801dfd8:	2102      	movs	r1, #2
 801dfda:	f7f2 fb29 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 801dfde:	6823      	ldr	r3, [r4, #0]
 801dfe0:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801dfe4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dfe6:	f3c2 0200 	ubfx	r2, r2, #0, #1
 801dfea:	ad03      	add	r5, sp, #12
 801dfec:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801dff0:	f082 0201 	eor.w	r2, r2, #1
 801dff4:	4629      	mov	r1, r5
 801dff6:	4620      	mov	r0, r4
 801dff8:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801dffa:	4620      	mov	r0, r4
 801dffc:	f7ff fd7e 	bl	801dafc <mbedtls_ssl_read_record>
 801e000:	4606      	mov	r6, r0
 801e002:	b160      	cbz	r0, 801e01e <mbedtls_ssl_parse_finished+0x56>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801e004:	4b38      	ldr	r3, [pc, #224]	; (801e0e8 <mbedtls_ssl_parse_finished+0x120>)
 801e006:	9001      	str	r0, [sp, #4]
 801e008:	9300      	str	r3, [sp, #0]
 801e00a:	4a36      	ldr	r2, [pc, #216]	; (801e0e4 <mbedtls_ssl_parse_finished+0x11c>)
 801e00c:	f241 43f5 	movw	r3, #5365	; 0x14f5
 801e010:	2101      	movs	r1, #1
 801e012:	4620      	mov	r0, r4
 801e014:	f7f2 fb3c 	bl	8010690 <mbedtls_debug_print_ret>
}
 801e018:	4630      	mov	r0, r6
 801e01a:	b007      	add	sp, #28
 801e01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801e01e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e020:	2b16      	cmp	r3, #22
 801e022:	d00f      	beq.n	801e044 <mbedtls_ssl_parse_finished+0x7c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e024:	4b31      	ldr	r3, [pc, #196]	; (801e0ec <mbedtls_ssl_parse_finished+0x124>)
 801e026:	9300      	str	r3, [sp, #0]
 801e028:	4a2e      	ldr	r2, [pc, #184]	; (801e0e4 <mbedtls_ssl_parse_finished+0x11c>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e02a:	4e31      	ldr	r6, [pc, #196]	; (801e0f0 <mbedtls_ssl_parse_finished+0x128>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e02c:	f241 43fb 	movw	r3, #5371	; 0x14fb
 801e030:	2101      	movs	r1, #1
 801e032:	4620      	mov	r0, r4
 801e034:	f7f2 fafc 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801e038:	220a      	movs	r2, #10
 801e03a:	2102      	movs	r1, #2
 801e03c:	4620      	mov	r0, r4
 801e03e:	f7ff f93f 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e042:	e7e9      	b.n	801e018 <mbedtls_ssl_parse_finished+0x50>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 801e044:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801e046:	7813      	ldrb	r3, [r2, #0]
 801e048:	2b14      	cmp	r3, #20
 801e04a:	d103      	bne.n	801e054 <mbedtls_ssl_parse_finished+0x8c>
 801e04c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801e050:	2b10      	cmp	r3, #16
 801e052:	d00f      	beq.n	801e074 <mbedtls_ssl_parse_finished+0xac>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e054:	4b25      	ldr	r3, [pc, #148]	; (801e0ec <mbedtls_ssl_parse_finished+0x124>)
 801e056:	9300      	str	r3, [sp, #0]
 801e058:	f241 530c 	movw	r3, #5388	; 0x150c
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e05c:	4a21      	ldr	r2, [pc, #132]	; (801e0e4 <mbedtls_ssl_parse_finished+0x11c>)
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801e05e:	4e25      	ldr	r6, [pc, #148]	; (801e0f4 <mbedtls_ssl_parse_finished+0x12c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e060:	2101      	movs	r1, #1
 801e062:	4620      	mov	r0, r4
 801e064:	f7f2 fae4 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801e068:	2232      	movs	r2, #50	; 0x32
 801e06a:	2102      	movs	r1, #2
 801e06c:	4620      	mov	r0, r4
 801e06e:	f7ff f927 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801e072:	e7d1      	b.n	801e018 <mbedtls_ssl_parse_finished+0x50>
 801e074:	3203      	adds	r2, #3
    unsigned char diff = 0;
 801e076:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
 801e078:	4603      	mov	r3, r0
        diff |= A[i] ^ B[i];
 801e07a:	5cef      	ldrb	r7, [r5, r3]
 801e07c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    for( i = 0; i < n; i++ )
 801e080:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 801e082:	4078      	eors	r0, r7
    for( i = 0; i < n; i++ )
 801e084:	2b0c      	cmp	r3, #12
        diff |= A[i] ^ B[i];
 801e086:	ea41 0100 	orr.w	r1, r1, r0
    for( i = 0; i < n; i++ )
 801e08a:	d1f6      	bne.n	801e07a <mbedtls_ssl_parse_finished+0xb2>
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 801e08c:	b121      	cbz	r1, 801e098 <mbedtls_ssl_parse_finished+0xd0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e08e:	4b17      	ldr	r3, [pc, #92]	; (801e0ec <mbedtls_ssl_parse_finished+0x124>)
 801e090:	9300      	str	r3, [sp, #0]
 801e092:	f241 5315 	movw	r3, #5397	; 0x1515
 801e096:	e7e1      	b.n	801e05c <mbedtls_ssl_parse_finished+0x94>
    ssl->verify_data_len = hash_len;
 801e098:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801e09c:	462b      	mov	r3, r5
 801e09e:	cb03      	ldmia	r3!, {r0, r1}
 801e0a0:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 801e0a4:	6818      	ldr	r0, [r3, #0]
    if( ssl->handshake->resume != 0 )
 801e0a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801e0a8:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 801e0ac:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    if( ssl->handshake->resume != 0 )
 801e0b0:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801e0b4:	b183      	cbz	r3, 801e0d8 <mbedtls_ssl_parse_finished+0x110>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e0b6:	6823      	ldr	r3, [r4, #0]
 801e0b8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e0bc:	07db      	lsls	r3, r3, #31
 801e0be:	d401      	bmi.n	801e0c4 <mbedtls_ssl_parse_finished+0xfc>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 801e0c0:	230a      	movs	r3, #10
        ssl->state++;
 801e0c2:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 801e0c4:	4b0c      	ldr	r3, [pc, #48]	; (801e0f8 <mbedtls_ssl_parse_finished+0x130>)
 801e0c6:	9300      	str	r3, [sp, #0]
 801e0c8:	4a06      	ldr	r2, [pc, #24]	; (801e0e4 <mbedtls_ssl_parse_finished+0x11c>)
 801e0ca:	f241 5333 	movw	r3, #5427	; 0x1533
 801e0ce:	2102      	movs	r1, #2
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f7f2 faad 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801e0d6:	e79f      	b.n	801e018 <mbedtls_ssl_parse_finished+0x50>
        ssl->state++;
 801e0d8:	6863      	ldr	r3, [r4, #4]
 801e0da:	3301      	adds	r3, #1
 801e0dc:	e7f1      	b.n	801e0c2 <mbedtls_ssl_parse_finished+0xfa>
 801e0de:	bf00      	nop
 801e0e0:	08032488 	.word	0x08032488
 801e0e4:	080318ba 	.word	0x080318ba
 801e0e8:	08030dab 	.word	0x08030dab
 801e0ec:	0803249a 	.word	0x0803249a
 801e0f0:	ffff8900 	.word	0xffff8900
 801e0f4:	ffff8180 	.word	0xffff8180
 801e0f8:	080324af 	.word	0x080324af

0801e0fc <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 801e0fc:	2280      	movs	r2, #128	; 0x80
 801e0fe:	2100      	movs	r1, #0
 801e100:	f004 b915 	b.w	802232e <memset>

0801e104 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 801e104:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 801e108:	f361 0383 	bfi	r3, r1, #2, #2
 801e10c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
}
 801e110:	4770      	bx	lr

0801e112 <mbedtls_ssl_conf_rng>:
    conf->p_rng      = p_rng;
 801e112:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801e116:	4770      	bx	lr

0801e118 <mbedtls_ssl_conf_dbg>:
    conf->p_dbg      = p_dbg;
 801e118:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 801e11c:	4770      	bx	lr

0801e11e <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
 801e11e:	e9c0 2306 	strd	r2, r3, [r0, #24]
    ssl->f_recv_timeout = f_recv_timeout;
 801e122:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
 801e124:	6241      	str	r1, [r0, #36]	; 0x24
    ssl->f_recv_timeout = f_recv_timeout;
 801e126:	6203      	str	r3, [r0, #32]
}
 801e128:	4770      	bx	lr

0801e12a <mbedtls_ssl_conf_read_timeout>:
    conf->read_timeout   = timeout;
 801e12a:	6581      	str	r1, [r0, #88]	; 0x58
}
 801e12c:	4770      	bx	lr

0801e12e <mbedtls_ssl_conf_own_cert>:
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 801e12e:	3040      	adds	r0, #64	; 0x40
 801e130:	f7fd bf50 	b.w	801bfd4 <ssl_append_key_cert>

0801e134 <mbedtls_ssl_conf_ca_chain>:
    conf->ca_crl     = ca_crl;
 801e134:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 801e138:	4770      	bx	lr
	...

0801e13c <mbedtls_ssl_set_hostname>:
{
 801e13c:	b570      	push	{r4, r5, r6, lr}
 801e13e:	4606      	mov	r6, r0
    if( hostname == NULL )
 801e140:	460d      	mov	r5, r1
 801e142:	b1b1      	cbz	r1, 801e172 <mbedtls_ssl_set_hostname+0x36>
    hostname_len = strlen( hostname );
 801e144:	4608      	mov	r0, r1
 801e146:	f7e2 f84d 	bl	80001e4 <strlen>
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e14a:	28ff      	cmp	r0, #255	; 0xff
    hostname_len = strlen( hostname );
 801e14c:	4604      	mov	r4, r0
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e14e:	d810      	bhi.n	801e172 <mbedtls_ssl_set_hostname+0x36>
    ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 801e150:	4b0a      	ldr	r3, [pc, #40]	; (801e17c <mbedtls_ssl_set_hostname+0x40>)
 801e152:	1c41      	adds	r1, r0, #1
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	2001      	movs	r0, #1
 801e158:	4798      	blx	r3
 801e15a:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
    if( ssl->hostname == NULL )
 801e15e:	b150      	cbz	r0, 801e176 <mbedtls_ssl_set_hostname+0x3a>
    memcpy( ssl->hostname, hostname, hostname_len );
 801e160:	4622      	mov	r2, r4
 801e162:	4629      	mov	r1, r5
 801e164:	f004 f8bf 	bl	80222e6 <memcpy>
    ssl->hostname[hostname_len] = '\0';
 801e168:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 801e16c:	2000      	movs	r0, #0
 801e16e:	5518      	strb	r0, [r3, r4]
}
 801e170:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e172:	4803      	ldr	r0, [pc, #12]	; (801e180 <mbedtls_ssl_set_hostname+0x44>)
 801e174:	e7fc      	b.n	801e170 <mbedtls_ssl_set_hostname+0x34>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e176:	4803      	ldr	r0, [pc, #12]	; (801e184 <mbedtls_ssl_set_hostname+0x48>)
 801e178:	e7fa      	b.n	801e170 <mbedtls_ssl_set_hostname+0x34>
 801e17a:	bf00      	nop
 801e17c:	200005a0 	.word	0x200005a0
 801e180:	ffff8f00 	.word	0xffff8f00
 801e184:	ffff8100 	.word	0xffff8100

0801e188 <mbedtls_ssl_get_verify_result>:
    if( ssl->session != NULL )
 801e188:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e18a:	b10b      	cbz	r3, 801e190 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session_negotiate->verify_result );
 801e18c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801e18e:	4770      	bx	lr
    if( ssl->session_negotiate != NULL )
 801e190:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e192:	2b00      	cmp	r3, #0
 801e194:	d1fa      	bne.n	801e18c <mbedtls_ssl_get_verify_result+0x4>
    return( 0xFFFFFFFF );
 801e196:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e19a:	4770      	bx	lr

0801e19c <mbedtls_ssl_get_record_expansion>:
    const mbedtls_ssl_transform *transform = ssl->transform_out;
 801e19c:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 801e19e:	b507      	push	{r0, r1, r2, lr}
    if( transform == NULL )
 801e1a0:	b1db      	cbz	r3, 801e1da <mbedtls_ssl_get_record_expansion+0x3e>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801e1a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e1a4:	b169      	cbz	r1, 801e1c2 <mbedtls_ssl_get_record_expansion+0x26>
    switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )
 801e1a6:	784a      	ldrb	r2, [r1, #1]
 801e1a8:	2a02      	cmp	r2, #2
 801e1aa:	d006      	beq.n	801e1ba <mbedtls_ssl_get_record_expansion+0x1e>
 801e1ac:	d309      	bcc.n	801e1c2 <mbedtls_ssl_get_record_expansion+0x26>
 801e1ae:	3a06      	subs	r2, #6
 801e1b0:	2a02      	cmp	r2, #2
 801e1b2:	d806      	bhi.n	801e1c2 <mbedtls_ssl_get_record_expansion+0x26>
            transform_expansion = transform->minlen;
 801e1b4:	6898      	ldr	r0, [r3, #8]
    return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );
 801e1b6:	3005      	adds	r0, #5
 801e1b8:	e00c      	b.n	801e1d4 <mbedtls_ssl_get_record_expansion+0x38>
            transform_expansion = transform->maclen
 801e1ba:	6958      	ldr	r0, [r3, #20]
 801e1bc:	694b      	ldr	r3, [r1, #20]
 801e1be:	4418      	add	r0, r3
            break;
 801e1c0:	e7f9      	b.n	801e1b6 <mbedtls_ssl_get_record_expansion+0x1a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801e1c2:	4b07      	ldr	r3, [pc, #28]	; (801e1e0 <mbedtls_ssl_get_record_expansion+0x44>)
 801e1c4:	9300      	str	r3, [sp, #0]
 801e1c6:	4a07      	ldr	r2, [pc, #28]	; (801e1e4 <mbedtls_ssl_get_record_expansion+0x48>)
 801e1c8:	f641 1346 	movw	r3, #6470	; 0x1946
 801e1cc:	2101      	movs	r1, #1
 801e1ce:	f7f2 fa2f 	bl	8010630 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801e1d2:	4805      	ldr	r0, [pc, #20]	; (801e1e8 <mbedtls_ssl_get_record_expansion+0x4c>)
}
 801e1d4:	b003      	add	sp, #12
 801e1d6:	f85d fb04 	ldr.w	pc, [sp], #4
        return( (int) mbedtls_ssl_hdr_len( ssl ) );
 801e1da:	2005      	movs	r0, #5
 801e1dc:	e7fa      	b.n	801e1d4 <mbedtls_ssl_get_record_expansion+0x38>
 801e1de:	bf00      	nop
 801e1e0:	080313ea 	.word	0x080313ea
 801e1e4:	080318ba 	.word	0x080318ba
 801e1e8:	ffff9400 	.word	0xffff9400

0801e1ec <mbedtls_ssl_get_max_frag_len>:
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e1ec:	6803      	ldr	r3, [r0, #0]
 801e1ee:	4a09      	ldr	r2, [pc, #36]	; (801e214 <mbedtls_ssl_get_max_frag_len+0x28>)
 801e1f0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    if( ssl->session_out != NULL &&
 801e1f4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e1f6:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801e1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if( ssl->session_out != NULL &&
 801e1fe:	b131      	cbz	r1, 801e20e <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 801e200:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 801e204:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801e208:	4293      	cmp	r3, r2
 801e20a:	bf28      	it	cs
 801e20c:	4613      	movcs	r3, r2
}
 801e20e:	4618      	mov	r0, r3
 801e210:	4770      	bx	lr
 801e212:	bf00      	nop
 801e214:	0802cf6c 	.word	0x0802cf6c

0801e218 <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
 801e218:	b138      	cbz	r0, 801e22a <mbedtls_ssl_handshake_step+0x12>
 801e21a:	6803      	ldr	r3, [r0, #0]
 801e21c:	b12b      	cbz	r3, 801e22a <mbedtls_ssl_handshake_step+0x12>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e21e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e222:	07db      	lsls	r3, r3, #31
 801e224:	d403      	bmi.n	801e22e <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 801e226:	f7fc bc4f 	b.w	801aac8 <mbedtls_ssl_handshake_client_step>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e22a:	4802      	ldr	r0, [pc, #8]	; (801e234 <mbedtls_ssl_handshake_step+0x1c>)
 801e22c:	4770      	bx	lr
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 801e22e:	4802      	ldr	r0, [pc, #8]	; (801e238 <mbedtls_ssl_handshake_step+0x20>)
}
 801e230:	4770      	bx	lr
 801e232:	bf00      	nop
 801e234:	ffff8f00 	.word	0xffff8f00
 801e238:	ffff8f80 	.word	0xffff8f80

0801e23c <mbedtls_ssl_handshake>:
{
 801e23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e23e:	4605      	mov	r5, r0
 801e240:	b300      	cbz	r0, 801e284 <mbedtls_ssl_handshake+0x48>
 801e242:	6803      	ldr	r3, [r0, #0]
 801e244:	b1f3      	cbz	r3, 801e284 <mbedtls_ssl_handshake+0x48>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 801e246:	4b10      	ldr	r3, [pc, #64]	; (801e288 <mbedtls_ssl_handshake+0x4c>)
 801e248:	9300      	str	r3, [sp, #0]
 801e24a:	4a10      	ldr	r2, [pc, #64]	; (801e28c <mbedtls_ssl_handshake+0x50>)
 801e24c:	f641 139d 	movw	r3, #6557	; 0x199d
 801e250:	2102      	movs	r1, #2
 801e252:	f7f2 f9ed 	bl	8010630 <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e256:	686b      	ldr	r3, [r5, #4]
 801e258:	2b10      	cmp	r3, #16
 801e25a:	d101      	bne.n	801e260 <mbedtls_ssl_handshake+0x24>
 801e25c:	2400      	movs	r4, #0
 801e25e:	e005      	b.n	801e26c <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 801e260:	4628      	mov	r0, r5
 801e262:	f7ff ffd9 	bl	801e218 <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 801e266:	4604      	mov	r4, r0
 801e268:	2800      	cmp	r0, #0
 801e26a:	d0f4      	beq.n	801e256 <mbedtls_ssl_handshake+0x1a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 801e26c:	4b08      	ldr	r3, [pc, #32]	; (801e290 <mbedtls_ssl_handshake+0x54>)
 801e26e:	9300      	str	r3, [sp, #0]
 801e270:	4a06      	ldr	r2, [pc, #24]	; (801e28c <mbedtls_ssl_handshake+0x50>)
 801e272:	f641 13a7 	movw	r3, #6567	; 0x19a7
 801e276:	2102      	movs	r1, #2
 801e278:	4628      	mov	r0, r5
 801e27a:	f7f2 f9d9 	bl	8010630 <mbedtls_debug_print_msg>
}
 801e27e:	4620      	mov	r0, r4
 801e280:	b003      	add	sp, #12
 801e282:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e284:	4c03      	ldr	r4, [pc, #12]	; (801e294 <mbedtls_ssl_handshake+0x58>)
 801e286:	e7fa      	b.n	801e27e <mbedtls_ssl_handshake+0x42>
 801e288:	080324c1 	.word	0x080324c1
 801e28c:	080318ba 	.word	0x080318ba
 801e290:	080324ce 	.word	0x080324ce
 801e294:	ffff8f00 	.word	0xffff8f00

0801e298 <mbedtls_ssl_close_notify>:
{
 801e298:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e29a:	4604      	mov	r4, r0
 801e29c:	2800      	cmp	r0, #0
 801e29e:	d033      	beq.n	801e308 <mbedtls_ssl_close_notify+0x70>
 801e2a0:	6803      	ldr	r3, [r0, #0]
 801e2a2:	b38b      	cbz	r3, 801e308 <mbedtls_ssl_close_notify+0x70>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 801e2a4:	4b19      	ldr	r3, [pc, #100]	; (801e30c <mbedtls_ssl_close_notify+0x74>)
 801e2a6:	9300      	str	r3, [sp, #0]
 801e2a8:	4a19      	ldr	r2, [pc, #100]	; (801e310 <mbedtls_ssl_close_notify+0x78>)
 801e2aa:	f641 4312 	movw	r3, #7186	; 0x1c12
 801e2ae:	2102      	movs	r1, #2
 801e2b0:	f7f2 f9be 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 801e2b4:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 801e2b8:	b12a      	cbz	r2, 801e2c6 <mbedtls_ssl_close_notify+0x2e>
        return( mbedtls_ssl_flush_output( ssl ) );
 801e2ba:	4620      	mov	r0, r4
}
 801e2bc:	b003      	add	sp, #12
 801e2be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( mbedtls_ssl_flush_output( ssl ) );
 801e2c2:	f7fe bc33 	b.w	801cb2c <mbedtls_ssl_flush_output>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801e2c6:	6863      	ldr	r3, [r4, #4]
 801e2c8:	2b10      	cmp	r3, #16
 801e2ca:	d112      	bne.n	801e2f2 <mbedtls_ssl_close_notify+0x5a>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801e2cc:	2101      	movs	r1, #1
 801e2ce:	4620      	mov	r0, r4
 801e2d0:	f7fe fff6 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801e2d4:	4605      	mov	r5, r0
 801e2d6:	b160      	cbz	r0, 801e2f2 <mbedtls_ssl_close_notify+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 801e2d8:	4b0e      	ldr	r3, [pc, #56]	; (801e314 <mbedtls_ssl_close_notify+0x7c>)
 801e2da:	9001      	str	r0, [sp, #4]
 801e2dc:	9300      	str	r3, [sp, #0]
 801e2de:	4a0c      	ldr	r2, [pc, #48]	; (801e310 <mbedtls_ssl_close_notify+0x78>)
 801e2e0:	f641 431d 	movw	r3, #7197	; 0x1c1d
 801e2e4:	2101      	movs	r1, #1
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	f7f2 f9d2 	bl	8010690 <mbedtls_debug_print_ret>
}
 801e2ec:	4628      	mov	r0, r5
 801e2ee:	b003      	add	sp, #12
 801e2f0:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 801e2f2:	4b09      	ldr	r3, [pc, #36]	; (801e318 <mbedtls_ssl_close_notify+0x80>)
 801e2f4:	9300      	str	r3, [sp, #0]
 801e2f6:	4a06      	ldr	r2, [pc, #24]	; (801e310 <mbedtls_ssl_close_notify+0x78>)
 801e2f8:	f641 4322 	movw	r3, #7202	; 0x1c22
 801e2fc:	2102      	movs	r1, #2
 801e2fe:	4620      	mov	r0, r4
 801e300:	f7f2 f996 	bl	8010630 <mbedtls_debug_print_msg>
    return( 0 );
 801e304:	2500      	movs	r5, #0
 801e306:	e7f1      	b.n	801e2ec <mbedtls_ssl_close_notify+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e308:	4d04      	ldr	r5, [pc, #16]	; (801e31c <mbedtls_ssl_close_notify+0x84>)
 801e30a:	e7ef      	b.n	801e2ec <mbedtls_ssl_close_notify+0x54>
 801e30c:	080324db 	.word	0x080324db
 801e310:	080318ba 	.word	0x080318ba
 801e314:	080324f1 	.word	0x080324f1
 801e318:	08032510 	.word	0x08032510
 801e31c:	ffff8f00 	.word	0xffff8f00

0801e320 <mbedtls_ssl_transform_free>:
{
 801e320:	b510      	push	{r4, lr}
    if( transform == NULL )
 801e322:	4604      	mov	r4, r0
 801e324:	b1a0      	cbz	r0, 801e350 <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 801e326:	3050      	adds	r0, #80	; 0x50
 801e328:	f7f1 fc8e 	bl	800fc48 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 801e32c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 801e330:	f7f1 fc8a 	bl	800fc48 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 801e334:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801e338:	f7f6 f8b2 	bl	80144a0 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 801e33c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801e340:	f7f6 f8ae 	bl	80144a0 <mbedtls_md_free>
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e344:	4620      	mov	r0, r4
 801e346:	21d0      	movs	r1, #208	; 0xd0
}
 801e348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e34c:	f7fd be3a 	b.w	801bfc4 <mbedtls_zeroize>
}
 801e350:	bd10      	pop	{r4, pc}
	...

0801e354 <mbedtls_ssl_handshake_free>:
{
 801e354:	b570      	push	{r4, r5, r6, lr}
    if( handshake == NULL )
 801e356:	4604      	mov	r4, r0
 801e358:	b1f0      	cbz	r0, 801e398 <mbedtls_ssl_handshake_free+0x44>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 801e35a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801e35e:	f7fa f8fe 	bl	801855e <mbedtls_sha256_free>
    mbedtls_free( (void *) handshake->curves );
 801e362:	4d0e      	ldr	r5, [pc, #56]	; (801e39c <mbedtls_ssl_handshake_free+0x48>)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 801e364:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801e368:	f7fa fda3 	bl	8018eb2 <mbedtls_sha512_free>
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
 801e36c:	1d20      	adds	r0, r4, #4
 801e36e:	f7f2 fba6 	bl	8010abe <mbedtls_ecdh_free>
    mbedtls_free( (void *) handshake->curves );
 801e372:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 801e376:	682b      	ldr	r3, [r5, #0]
 801e378:	4798      	blx	r3
    if( handshake->sni_key_cert != NULL )
 801e37a:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 801e37e:	b120      	cbz	r0, 801e38a <mbedtls_ssl_handshake_free+0x36>
            next = cur->next;
 801e380:	6886      	ldr	r6, [r0, #8]
            mbedtls_free( cur );
 801e382:	682b      	ldr	r3, [r5, #0]
 801e384:	4798      	blx	r3
        while( cur != NULL )
 801e386:	4630      	mov	r0, r6
 801e388:	e7f9      	b.n	801e37e <mbedtls_ssl_handshake_free+0x2a>
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e38a:	4620      	mov	r0, r4
 801e38c:	f44f 7152 	mov.w	r1, #840	; 0x348
}
 801e390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e394:	f7fd be16 	b.w	801bfc4 <mbedtls_zeroize>
}
 801e398:	bd70      	pop	{r4, r5, r6, pc}
 801e39a:	bf00      	nop
 801e39c:	200005a4 	.word	0x200005a4

0801e3a0 <mbedtls_ssl_session_free>:
{
 801e3a0:	b538      	push	{r3, r4, r5, lr}
    if( session == NULL )
 801e3a2:	4604      	mov	r4, r0
 801e3a4:	b180      	cbz	r0, 801e3c8 <mbedtls_ssl_session_free+0x28>
    if( session->peer_cert != NULL )
 801e3a6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e3a8:	4d08      	ldr	r5, [pc, #32]	; (801e3cc <mbedtls_ssl_session_free+0x2c>)
 801e3aa:	b120      	cbz	r0, 801e3b6 <mbedtls_ssl_session_free+0x16>
        mbedtls_x509_crt_free( session->peer_cert );
 801e3ac:	f002 fe88 	bl	80210c0 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 801e3b0:	682b      	ldr	r3, [r5, #0]
 801e3b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801e3b4:	4798      	blx	r3
    mbedtls_free( session->ticket );
 801e3b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801e3b8:	682b      	ldr	r3, [r5, #0]
 801e3ba:	4798      	blx	r3
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e3bc:	4620      	mov	r0, r4
 801e3be:	2180      	movs	r1, #128	; 0x80
}
 801e3c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e3c4:	f7fd bdfe 	b.w	801bfc4 <mbedtls_zeroize>
}
 801e3c8:	bd38      	pop	{r3, r4, r5, pc}
 801e3ca:	bf00      	nop
 801e3cc:	200005a4 	.word	0x200005a4

0801e3d0 <mbedtls_ssl_handshake_wrapup>:
{
 801e3d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int resume = ssl->handshake->resume;
 801e3d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e3d4:	4a31      	ldr	r2, [pc, #196]	; (801e49c <mbedtls_ssl_handshake_wrapup+0xcc>)
    int resume = ssl->handshake->resume;
 801e3d6:	f8d3 6330 	ldr.w	r6, [r3, #816]	; 0x330
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e3da:	4b31      	ldr	r3, [pc, #196]	; (801e4a0 <mbedtls_ssl_handshake_wrapup+0xd0>)
 801e3dc:	9300      	str	r3, [sp, #0]
{
 801e3de:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e3e0:	f241 4333 	movw	r3, #5171	; 0x1433
 801e3e4:	2103      	movs	r1, #3
 801e3e6:	f7f2 f923 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e3ea:	68a3      	ldr	r3, [r4, #8]
    if( ssl->session )
 801e3ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e3ee:	4d2d      	ldr	r5, [pc, #180]	; (801e4a4 <mbedtls_ssl_handshake_wrapup+0xd4>)
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e3f0:	2b01      	cmp	r3, #1
        ssl->renego_records_seen = 0;
 801e3f2:	bf02      	ittt	eq
 801e3f4:	2202      	moveq	r2, #2
 801e3f6:	2300      	moveq	r3, #0
 801e3f8:	e9c4 2302 	strdeq	r2, r3, [r4, #8]
    if( ssl->session )
 801e3fc:	b120      	cbz	r0, 801e408 <mbedtls_ssl_handshake_wrapup+0x38>
        mbedtls_ssl_session_free( ssl->session );
 801e3fe:	f7ff ffcf 	bl	801e3a0 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801e402:	682b      	ldr	r3, [r5, #0]
 801e404:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e406:	4798      	blx	r3
    if( ssl->conf->f_set_cache != NULL &&
 801e408:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 801e40a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e40c:	6321      	str	r1, [r4, #48]	; 0x30
    ssl->session_negotiate = NULL;
 801e40e:	2300      	movs	r3, #0
 801e410:	6363      	str	r3, [r4, #52]	; 0x34
    if( ssl->conf->f_set_cache != NULL &&
 801e412:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801e414:	b173      	cbz	r3, 801e434 <mbedtls_ssl_handshake_wrapup+0x64>
 801e416:	6908      	ldr	r0, [r1, #16]
 801e418:	b160      	cbz	r0, 801e434 <mbedtls_ssl_handshake_wrapup+0x64>
        ssl->session->id_len != 0 &&
 801e41a:	b95e      	cbnz	r6, 801e434 <mbedtls_ssl_handshake_wrapup+0x64>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 801e41c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801e41e:	4798      	blx	r3
 801e420:	b140      	cbz	r0, 801e434 <mbedtls_ssl_handshake_wrapup+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 801e422:	4b21      	ldr	r3, [pc, #132]	; (801e4a8 <mbedtls_ssl_handshake_wrapup+0xd8>)
 801e424:	9300      	str	r3, [sp, #0]
 801e426:	4a1d      	ldr	r2, [pc, #116]	; (801e49c <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e428:	f241 4356 	movw	r3, #5206	; 0x1456
 801e42c:	2101      	movs	r1, #1
 801e42e:	4620      	mov	r0, r4
 801e430:	f7f2 f8fe 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 801e434:	4b1d      	ldr	r3, [pc, #116]	; (801e4ac <mbedtls_ssl_handshake_wrapup+0xdc>)
 801e436:	4a19      	ldr	r2, [pc, #100]	; (801e49c <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e438:	9300      	str	r3, [sp, #0]
 801e43a:	2103      	movs	r1, #3
 801e43c:	f241 4318 	movw	r3, #5144	; 0x1418
 801e440:	4620      	mov	r0, r4
 801e442:	f7f2 f8f5 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl->handshake );
 801e446:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e448:	f7ff ff84 	bl	801e354 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 801e44c:	682b      	ldr	r3, [r5, #0]
 801e44e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e450:	4798      	blx	r3
    if( ssl->transform )
 801e452:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ssl->handshake = NULL;
 801e454:	2300      	movs	r3, #0
 801e456:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ssl->transform )
 801e458:	b120      	cbz	r0, 801e464 <mbedtls_ssl_handshake_wrapup+0x94>
        mbedtls_ssl_transform_free( ssl->transform );
 801e45a:	f7ff ff61 	bl	801e320 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801e45e:	682b      	ldr	r3, [r5, #0]
 801e460:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801e462:	4798      	blx	r3
    ssl->transform = ssl->transform_negotiate;
 801e464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e466:	6463      	str	r3, [r4, #68]	; 0x44
    ssl->transform_negotiate = NULL;
 801e468:	2300      	movs	r3, #0
 801e46a:	64a3      	str	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 801e46c:	4b10      	ldr	r3, [pc, #64]	; (801e4b0 <mbedtls_ssl_handshake_wrapup+0xe0>)
 801e46e:	9300      	str	r3, [sp, #0]
 801e470:	4620      	mov	r0, r4
 801e472:	f241 432c 	movw	r3, #5164	; 0x142c
 801e476:	4a09      	ldr	r2, [pc, #36]	; (801e49c <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e478:	2103      	movs	r1, #3
 801e47a:	f7f2 f8d9 	bl	8010630 <mbedtls_debug_print_msg>
    ssl->state++;
 801e47e:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e480:	4a06      	ldr	r2, [pc, #24]	; (801e49c <mbedtls_ssl_handshake_wrapup+0xcc>)
    ssl->state++;
 801e482:	3301      	adds	r3, #1
 801e484:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e486:	4b0b      	ldr	r3, [pc, #44]	; (801e4b4 <mbedtls_ssl_handshake_wrapup+0xe4>)
 801e488:	9300      	str	r3, [sp, #0]
 801e48a:	2103      	movs	r1, #3
 801e48c:	f241 436a 	movw	r3, #5226	; 0x146a
 801e490:	4620      	mov	r0, r4
 801e492:	f7f2 f8cd 	bl	8010630 <mbedtls_debug_print_msg>
}
 801e496:	b002      	add	sp, #8
 801e498:	bd70      	pop	{r4, r5, r6, pc}
 801e49a:	bf00      	nop
 801e49c:	080318ba 	.word	0x080318ba
 801e4a0:	08032526 	.word	0x08032526
 801e4a4:	200005a4 	.word	0x200005a4
 801e4a8:	0803253a 	.word	0x0803253a
 801e4ac:	08032556 	.word	0x08032556
 801e4b0:	08032576 	.word	0x08032576
 801e4b4:	08032596 	.word	0x08032596

0801e4b8 <ssl_handshake_init>:
{
 801e4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e4ba:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 801e4bc:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e4be:	b108      	cbz	r0, 801e4c4 <ssl_handshake_init+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801e4c0:	f7ff ff2e 	bl	801e320 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 801e4c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e4c6:	b108      	cbz	r0, 801e4cc <ssl_handshake_init+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801e4c8:	f7ff ff6a 	bl	801e3a0 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 801e4cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e4ce:	b108      	cbz	r0, 801e4d4 <ssl_handshake_init+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801e4d0:	f7ff ff40 	bl	801e354 <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 801e4d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e4d6:	b92b      	cbnz	r3, 801e4e4 <ssl_handshake_init+0x2c>
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 801e4d8:	4b3a      	ldr	r3, [pc, #232]	; (801e5c4 <ssl_handshake_init+0x10c>)
 801e4da:	21d0      	movs	r1, #208	; 0xd0
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	2001      	movs	r0, #1
 801e4e0:	4798      	blx	r3
 801e4e2:	64a0      	str	r0, [r4, #72]	; 0x48
    if( ssl->session_negotiate == NULL )
 801e4e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e4e6:	b92b      	cbnz	r3, 801e4f4 <ssl_handshake_init+0x3c>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 801e4e8:	4b36      	ldr	r3, [pc, #216]	; (801e5c4 <ssl_handshake_init+0x10c>)
 801e4ea:	2180      	movs	r1, #128	; 0x80
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	2001      	movs	r0, #1
 801e4f0:	4798      	blx	r3
 801e4f2:	6360      	str	r0, [r4, #52]	; 0x34
    if( ssl->handshake == NULL )
 801e4f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e4f6:	b933      	cbnz	r3, 801e506 <ssl_handshake_init+0x4e>
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 801e4f8:	4b32      	ldr	r3, [pc, #200]	; (801e5c4 <ssl_handshake_init+0x10c>)
 801e4fa:	f44f 7152 	mov.w	r1, #840	; 0x348
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	2001      	movs	r0, #1
 801e502:	4798      	blx	r3
 801e504:	63a0      	str	r0, [r4, #56]	; 0x38
    if( ssl->handshake == NULL ||
 801e506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e508:	b11b      	cbz	r3, 801e512 <ssl_handshake_init+0x5a>
 801e50a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e50c:	b10b      	cbz	r3, 801e512 <ssl_handshake_init+0x5a>
        ssl->session_negotiate == NULL )
 801e50e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->transform_negotiate == NULL ||
 801e510:	b9c8      	cbnz	r0, 801e546 <ssl_handshake_init+0x8e>
        mbedtls_free( ssl->handshake );
 801e512:	4d2d      	ldr	r5, [pc, #180]	; (801e5c8 <ssl_handshake_init+0x110>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 801e514:	4b2d      	ldr	r3, [pc, #180]	; (801e5cc <ssl_handshake_init+0x114>)
 801e516:	4a2e      	ldr	r2, [pc, #184]	; (801e5d0 <ssl_handshake_init+0x118>)
 801e518:	9300      	str	r3, [sp, #0]
 801e51a:	2101      	movs	r1, #1
 801e51c:	f241 539a 	movw	r3, #5530	; 0x159a
 801e520:	4620      	mov	r0, r4
 801e522:	f7f2 f885 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 801e526:	682b      	ldr	r3, [r5, #0]
 801e528:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e52a:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801e52c:	682b      	ldr	r3, [r5, #0]
 801e52e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801e530:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801e532:	682b      	ldr	r3, [r5, #0]
 801e534:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e536:	4798      	blx	r3
        ssl->handshake = NULL;
 801e538:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e53a:	4826      	ldr	r0, [pc, #152]	; (801e5d4 <ssl_handshake_init+0x11c>)
        ssl->handshake = NULL;
 801e53c:	63a3      	str	r3, [r4, #56]	; 0x38
        ssl->transform_negotiate = NULL;
 801e53e:	64a3      	str	r3, [r4, #72]	; 0x48
        ssl->session_negotiate = NULL;
 801e540:	6363      	str	r3, [r4, #52]	; 0x34
}
 801e542:	b003      	add	sp, #12
 801e544:	bd30      	pop	{r4, r5, pc}
    mbedtls_ssl_session_init( ssl->session_negotiate );
 801e546:	f7ff fdd9 	bl	801e0fc <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 801e54a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 801e54c:	22d0      	movs	r2, #208	; 0xd0
 801e54e:	2100      	movs	r1, #0
 801e550:	4628      	mov	r0, r5
 801e552:	f003 feec 	bl	802232e <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 801e556:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801e55a:	f7f1 fb71 	bl	800fc40 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 801e55e:	f105 0090 	add.w	r0, r5, #144	; 0x90
 801e562:	f7f1 fb6d 	bl	800fc40 <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 801e566:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801e56a:	f7f5 ff93 	bl	8014494 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 801e56e:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801e572:	f7f5 ff8f 	bl	8014494 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 801e576:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 801e578:	f44f 7252 	mov.w	r2, #840	; 0x348
 801e57c:	2100      	movs	r1, #0
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 801e57e:	f504 75a8 	add.w	r5, r4, #336	; 0x150
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 801e582:	4620      	mov	r0, r4
 801e584:	f003 fed3 	bl	802232e <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 801e588:	4628      	mov	r0, r5
 801e58a:	f7f9 ffe4 	bl	8018556 <mbedtls_sha256_init>
    mbedtls_sha256_starts( &handshake->fin_sha256, 0 );
 801e58e:	2100      	movs	r1, #0
 801e590:	4628      	mov	r0, r5
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 801e592:	f504 75e0 	add.w	r5, r4, #448	; 0x1c0
    mbedtls_sha256_starts( &handshake->fin_sha256, 0 );
 801e596:	f7f9 fff1 	bl	801857c <mbedtls_sha256_starts>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 801e59a:	4628      	mov	r0, r5
 801e59c:	f7fa fc85 	bl	8018eaa <mbedtls_sha512_init>
    mbedtls_sha512_starts( &handshake->fin_sha512, 1 );
 801e5a0:	4628      	mov	r0, r5
 801e5a2:	2101      	movs	r1, #1
 801e5a4:	f7fa fc94 	bl	8018ed0 <mbedtls_sha512_starts>
    set->rsa   = md_alg;
 801e5a8:	2500      	movs	r5, #0
    handshake->update_checksum = ssl_update_checksum_start;
 801e5aa:	4b0b      	ldr	r3, [pc, #44]	; (801e5d8 <ssl_handshake_init+0x120>)
 801e5ac:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e5b0:	1d20      	adds	r0, r4, #4
    set->rsa   = md_alg;
 801e5b2:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
 801e5b4:	7065      	strb	r5, [r4, #1]
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e5b6:	f7f2 fa7d 	bl	8010ab4 <mbedtls_ecdh_init>
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 801e5ba:	2303      	movs	r3, #3
 801e5bc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    return( 0 );
 801e5c0:	4628      	mov	r0, r5
 801e5c2:	e7be      	b.n	801e542 <ssl_handshake_init+0x8a>
 801e5c4:	200005a0 	.word	0x200005a0
 801e5c8:	200005a4 	.word	0x200005a4
 801e5cc:	080325aa 	.word	0x080325aa
 801e5d0:	080318ba 	.word	0x080318ba
 801e5d4:	ffff8100 	.word	0xffff8100
 801e5d8:	0801c431 	.word	0x0801c431

0801e5dc <mbedtls_ssl_setup>:
{
 801e5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e5de:	4d22      	ldr	r5, [pc, #136]	; (801e668 <mbedtls_ssl_setup+0x8c>)
    ssl->conf = conf;
 801e5e0:	6001      	str	r1, [r0, #0]
{
 801e5e2:	4604      	mov	r4, r0
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e5e4:	682b      	ldr	r3, [r5, #0]
 801e5e6:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e5ea:	2001      	movs	r0, #1
 801e5ec:	4798      	blx	r3
 801e5ee:	65a0      	str	r0, [r4, #88]	; 0x58
 801e5f0:	b328      	cbz	r0, 801e63e <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 801e5f2:	682b      	ldr	r3, [r5, #0]
 801e5f4:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e5f8:	2001      	movs	r0, #1
 801e5fa:	4798      	blx	r3
 801e5fc:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e600:	b1e8      	cbz	r0, 801e63e <mbedtls_ssl_setup+0x62>
        ssl->out_hdr = ssl->out_buf +  8;
 801e602:	f100 0308 	add.w	r3, r0, #8
 801e606:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_len = ssl->out_buf + 11;
 801e60a:	f100 030b 	add.w	r3, r0, #11
 801e60e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        ssl->in_ctr = ssl->in_buf;
 801e612:	6da3      	ldr	r3, [r4, #88]	; 0x58
        ssl->out_ctr = ssl->out_buf;
 801e614:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
        ssl->in_hdr = ssl->in_buf +  8;
 801e618:	f103 0208 	add.w	r2, r3, #8
        ssl->out_iv  = ssl->out_buf + 13;
 801e61c:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;
 801e61e:	e9c4 0027 	strd	r0, r0, [r4, #156]	; 0x9c
        ssl->in_ctr = ssl->in_buf;
 801e622:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_hdr = ssl->in_buf +  8;
 801e624:	6622      	str	r2, [r4, #96]	; 0x60
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e626:	4620      	mov	r0, r4
        ssl->in_len = ssl->in_buf + 11;
 801e628:	f103 020b 	add.w	r2, r3, #11
        ssl->in_iv  = ssl->in_buf + 13;
 801e62c:	330d      	adds	r3, #13
        ssl->in_len = ssl->in_buf + 11;
 801e62e:	6662      	str	r2, [r4, #100]	; 0x64
        ssl->in_msg = ssl->in_buf + 13;
 801e630:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 801e634:	b003      	add	sp, #12
 801e636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e63a:	f7ff bf3d 	b.w	801e4b8 <ssl_handshake_init>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 801e63e:	f241 43d5 	movw	r3, #5333	; 0x14d5
 801e642:	9301      	str	r3, [sp, #4]
 801e644:	4b09      	ldr	r3, [pc, #36]	; (801e66c <mbedtls_ssl_setup+0x90>)
 801e646:	9300      	str	r3, [sp, #0]
 801e648:	4a09      	ldr	r2, [pc, #36]	; (801e670 <mbedtls_ssl_setup+0x94>)
 801e64a:	2101      	movs	r1, #1
 801e64c:	4620      	mov	r0, r4
 801e64e:	f241 53f3 	movw	r3, #5619	; 0x15f3
 801e652:	f7f1 ffed 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 801e656:	4b07      	ldr	r3, [pc, #28]	; (801e674 <mbedtls_ssl_setup+0x98>)
 801e658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	4798      	blx	r3
}
 801e65e:	4806      	ldr	r0, [pc, #24]	; (801e678 <mbedtls_ssl_setup+0x9c>)
        ssl->in_buf = NULL;
 801e660:	2300      	movs	r3, #0
 801e662:	65a3      	str	r3, [r4, #88]	; 0x58
}
 801e664:	b003      	add	sp, #12
 801e666:	bd30      	pop	{r4, r5, pc}
 801e668:	200005a0 	.word	0x200005a0
 801e66c:	080325cd 	.word	0x080325cd
 801e670:	080318ba 	.word	0x080318ba
 801e674:	200005a4 	.word	0x200005a4
 801e678:	ffff8100 	.word	0xffff8100

0801e67c <ssl_start_renegotiation>:
{
 801e67c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e67e:	4b16      	ldr	r3, [pc, #88]	; (801e6d8 <ssl_start_renegotiation+0x5c>)
 801e680:	9300      	str	r3, [sp, #0]
{
 801e682:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e684:	f641 13d4 	movw	r3, #6612	; 0x19d4
 801e688:	4a14      	ldr	r2, [pc, #80]	; (801e6dc <ssl_start_renegotiation+0x60>)
 801e68a:	2102      	movs	r1, #2
 801e68c:	f7f1 ffd0 	bl	8010630 <mbedtls_debug_print_msg>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e690:	4628      	mov	r0, r5
 801e692:	f7ff ff11 	bl	801e4b8 <ssl_handshake_init>
 801e696:	4604      	mov	r4, r0
 801e698:	b988      	cbnz	r0, 801e6be <ssl_start_renegotiation+0x42>
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e69a:	2601      	movs	r6, #1
    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
 801e69c:	6068      	str	r0, [r5, #4]
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e69e:	60ae      	str	r6, [r5, #8]
    if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e6a0:	4628      	mov	r0, r5
 801e6a2:	f7ff fdcb 	bl	801e23c <mbedtls_ssl_handshake>
 801e6a6:	4604      	mov	r4, r0
 801e6a8:	b160      	cbz	r0, 801e6c4 <ssl_start_renegotiation+0x48>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e6aa:	4b0d      	ldr	r3, [pc, #52]	; (801e6e0 <ssl_start_renegotiation+0x64>)
 801e6ac:	9001      	str	r0, [sp, #4]
 801e6ae:	9300      	str	r3, [sp, #0]
 801e6b0:	4a0a      	ldr	r2, [pc, #40]	; (801e6dc <ssl_start_renegotiation+0x60>)
 801e6b2:	f641 13eb 	movw	r3, #6635	; 0x19eb
 801e6b6:	4631      	mov	r1, r6
 801e6b8:	4628      	mov	r0, r5
 801e6ba:	f7f1 ffe9 	bl	8010690 <mbedtls_debug_print_ret>
}
 801e6be:	4620      	mov	r0, r4
 801e6c0:	b002      	add	sp, #8
 801e6c2:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= renegotiate" ) );
 801e6c4:	4b07      	ldr	r3, [pc, #28]	; (801e6e4 <ssl_start_renegotiation+0x68>)
 801e6c6:	9300      	str	r3, [sp, #0]
 801e6c8:	4a04      	ldr	r2, [pc, #16]	; (801e6dc <ssl_start_renegotiation+0x60>)
 801e6ca:	f641 13ef 	movw	r3, #6639	; 0x19ef
 801e6ce:	2102      	movs	r1, #2
 801e6d0:	4628      	mov	r0, r5
 801e6d2:	f7f1 ffad 	bl	8010630 <mbedtls_debug_print_msg>
 801e6d6:	e7f2      	b.n	801e6be <ssl_start_renegotiation+0x42>
 801e6d8:	080325e4 	.word	0x080325e4
 801e6dc:	080318ba 	.word	0x080318ba
 801e6e0:	080325f3 	.word	0x080325f3
 801e6e4:	08032609 	.word	0x08032609

0801e6e8 <mbedtls_ssl_renegotiate>:
{
 801e6e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e6ea:	4605      	mov	r5, r0
 801e6ec:	b318      	cbz	r0, 801e736 <mbedtls_ssl_renegotiate+0x4e>
 801e6ee:	6803      	ldr	r3, [r0, #0]
 801e6f0:	b30b      	cbz	r3, 801e736 <mbedtls_ssl_renegotiate+0x4e>
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e6f2:	6886      	ldr	r6, [r0, #8]
 801e6f4:	2e01      	cmp	r6, #1
 801e6f6:	d013      	beq.n	801e720 <mbedtls_ssl_renegotiate+0x38>
        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e6f8:	6843      	ldr	r3, [r0, #4]
 801e6fa:	2b10      	cmp	r3, #16
 801e6fc:	d11b      	bne.n	801e736 <mbedtls_ssl_renegotiate+0x4e>
        if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )
 801e6fe:	f7ff ffbd 	bl	801e67c <ssl_start_renegotiation>
 801e702:	4604      	mov	r4, r0
 801e704:	b148      	cbz	r0, 801e71a <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801e706:	4b0d      	ldr	r3, [pc, #52]	; (801e73c <mbedtls_ssl_renegotiate+0x54>)
 801e708:	9300      	str	r3, [sp, #0]
 801e70a:	9001      	str	r0, [sp, #4]
 801e70c:	f641 231c 	movw	r3, #6684	; 0x1a1c
 801e710:	4a0b      	ldr	r2, [pc, #44]	; (801e740 <mbedtls_ssl_renegotiate+0x58>)
 801e712:	2101      	movs	r1, #1
 801e714:	4628      	mov	r0, r5
 801e716:	f7f1 ffbb 	bl	8010690 <mbedtls_debug_print_ret>
}
 801e71a:	4620      	mov	r0, r4
 801e71c:	b002      	add	sp, #8
 801e71e:	bd70      	pop	{r4, r5, r6, pc}
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e720:	f7ff fd8c 	bl	801e23c <mbedtls_ssl_handshake>
 801e724:	4604      	mov	r4, r0
 801e726:	2800      	cmp	r0, #0
 801e728:	d0f7      	beq.n	801e71a <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e72a:	4b06      	ldr	r3, [pc, #24]	; (801e744 <mbedtls_ssl_renegotiate+0x5c>)
 801e72c:	9300      	str	r3, [sp, #0]
 801e72e:	9001      	str	r0, [sp, #4]
 801e730:	f641 2324 	movw	r3, #6692	; 0x1a24
 801e734:	e7ec      	b.n	801e710 <mbedtls_ssl_renegotiate+0x28>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e736:	4c04      	ldr	r4, [pc, #16]	; (801e748 <mbedtls_ssl_renegotiate+0x60>)
 801e738:	e7ef      	b.n	801e71a <mbedtls_ssl_renegotiate+0x32>
 801e73a:	bf00      	nop
 801e73c:	08032618 	.word	0x08032618
 801e740:	080318ba 	.word	0x080318ba
 801e744:	080325f3 	.word	0x080325f3
 801e748:	ffff8f00 	.word	0xffff8f00

0801e74c <ssl_check_ctr_renegotiate>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e74c:	6843      	ldr	r3, [r0, #4]
 801e74e:	2b10      	cmp	r3, #16
{
 801e750:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e752:	4604      	mov	r4, r0
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e754:	d127      	bne.n	801e7a6 <ssl_check_ctr_renegotiate+0x5a>
 801e756:	6883      	ldr	r3, [r0, #8]
 801e758:	2b03      	cmp	r3, #3
 801e75a:	d024      	beq.n	801e7a6 <ssl_check_ctr_renegotiate+0x5a>
        ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )
 801e75c:	6805      	ldr	r5, [r0, #0]
 801e75e:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||
 801e762:	075b      	lsls	r3, r3, #29
 801e764:	d51f      	bpl.n	801e7a6 <ssl_check_ctr_renegotiate+0x5a>
                        ssl->conf->renego_period + ep_len, 8 - ep_len );
 801e766:	3560      	adds	r5, #96	; 0x60
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e768:	2208      	movs	r2, #8
 801e76a:	4629      	mov	r1, r5
 801e76c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e76e:	f003 fdab 	bl	80222c8 <memcmp>
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e772:	2208      	movs	r2, #8
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e774:	4606      	mov	r6, r0
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e776:	4629      	mov	r1, r5
 801e778:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801e77c:	f003 fda4 	bl	80222c8 <memcmp>
    if( in_ctr_cmp <= 0 && out_ctr_cmp <= 0 )
 801e780:	2e00      	cmp	r6, #0
 801e782:	dc01      	bgt.n	801e788 <ssl_check_ctr_renegotiate+0x3c>
 801e784:	2800      	cmp	r0, #0
 801e786:	dd0e      	ble.n	801e7a6 <ssl_check_ctr_renegotiate+0x5a>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "record counter limit reached: renegotiate" ) );
 801e788:	4b08      	ldr	r3, [pc, #32]	; (801e7ac <ssl_check_ctr_renegotiate+0x60>)
 801e78a:	9300      	str	r3, [sp, #0]
 801e78c:	4620      	mov	r0, r4
 801e78e:	f641 2347 	movw	r3, #6727	; 0x1a47
 801e792:	4a07      	ldr	r2, [pc, #28]	; (801e7b0 <ssl_check_ctr_renegotiate+0x64>)
 801e794:	2101      	movs	r1, #1
 801e796:	f7f1 ff4b 	bl	8010630 <mbedtls_debug_print_msg>
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e79a:	4620      	mov	r0, r4
}
 801e79c:	b002      	add	sp, #8
 801e79e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e7a2:	f7ff bfa1 	b.w	801e6e8 <mbedtls_ssl_renegotiate>
}
 801e7a6:	2000      	movs	r0, #0
 801e7a8:	b002      	add	sp, #8
 801e7aa:	bd70      	pop	{r4, r5, r6, pc}
 801e7ac:	08032630 	.word	0x08032630
 801e7b0:	080318ba 	.word	0x080318ba

0801e7b4 <mbedtls_ssl_write>:
{
 801e7b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e7b6:	4b36      	ldr	r3, [pc, #216]	; (801e890 <mbedtls_ssl_write+0xdc>)
 801e7b8:	9300      	str	r3, [sp, #0]
{
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	460f      	mov	r7, r1
 801e7be:	4616      	mov	r6, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e7c0:	f641 33e7 	movw	r3, #7143	; 0x1be7
 801e7c4:	4a33      	ldr	r2, [pc, #204]	; (801e894 <mbedtls_ssl_write+0xe0>)
 801e7c6:	2102      	movs	r1, #2
 801e7c8:	f7f1 ff32 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 801e7cc:	2c00      	cmp	r4, #0
 801e7ce:	d05c      	beq.n	801e88a <mbedtls_ssl_write+0xd6>
 801e7d0:	6823      	ldr	r3, [r4, #0]
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d059      	beq.n	801e88a <mbedtls_ssl_write+0xd6>
    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
 801e7d6:	4620      	mov	r0, r4
 801e7d8:	f7ff ffb8 	bl	801e74c <ssl_check_ctr_renegotiate>
 801e7dc:	4605      	mov	r5, r0
 801e7de:	b160      	cbz	r0, 801e7fa <mbedtls_ssl_write+0x46>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801e7e0:	4b2d      	ldr	r3, [pc, #180]	; (801e898 <mbedtls_ssl_write+0xe4>)
 801e7e2:	9300      	str	r3, [sp, #0]
 801e7e4:	9001      	str	r0, [sp, #4]
 801e7e6:	f641 33ef 	movw	r3, #7151	; 0x1bef
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e7ea:	4a2a      	ldr	r2, [pc, #168]	; (801e894 <mbedtls_ssl_write+0xe0>)
 801e7ec:	2101      	movs	r1, #1
 801e7ee:	4620      	mov	r0, r4
 801e7f0:	f7f1 ff4e 	bl	8010690 <mbedtls_debug_print_ret>
}
 801e7f4:	4628      	mov	r0, r5
 801e7f6:	b003      	add	sp, #12
 801e7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e7fa:	6863      	ldr	r3, [r4, #4]
 801e7fc:	2b10      	cmp	r3, #16
 801e7fe:	d00a      	beq.n	801e816 <mbedtls_ssl_write+0x62>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e800:	4620      	mov	r0, r4
 801e802:	f7ff fd1b 	bl	801e23c <mbedtls_ssl_handshake>
 801e806:	4605      	mov	r5, r0
 801e808:	b128      	cbz	r0, 801e816 <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e80a:	4b24      	ldr	r3, [pc, #144]	; (801e89c <mbedtls_ssl_write+0xe8>)
 801e80c:	9300      	str	r3, [sp, #0]
 801e80e:	9001      	str	r0, [sp, #4]
 801e810:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 801e814:	e7e9      	b.n	801e7ea <mbedtls_ssl_write+0x36>
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 801e816:	4620      	mov	r0, r4
 801e818:	f7ff fce8 	bl	801e1ec <mbedtls_ssl_get_max_frag_len>
    if( ssl->out_left != 0 )
 801e81c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801e820:	4286      	cmp	r6, r0
 801e822:	bf28      	it	cs
 801e824:	4606      	movcs	r6, r0
 801e826:	b1c3      	cbz	r3, 801e85a <mbedtls_ssl_write+0xa6>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801e828:	4620      	mov	r0, r4
 801e82a:	f7fe f97f 	bl	801cb2c <mbedtls_ssl_flush_output>
 801e82e:	4605      	mov	r5, r0
 801e830:	b348      	cbz	r0, 801e886 <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801e832:	4b1b      	ldr	r3, [pc, #108]	; (801e8a0 <mbedtls_ssl_write+0xec>)
 801e834:	9300      	str	r3, [sp, #0]
 801e836:	9001      	str	r0, [sp, #4]
 801e838:	f641 33a6 	movw	r3, #7078	; 0x1ba6
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e83c:	4a15      	ldr	r2, [pc, #84]	; (801e894 <mbedtls_ssl_write+0xe0>)
 801e83e:	2101      	movs	r1, #1
 801e840:	4620      	mov	r0, r4
 801e842:	f7f1 ff25 	bl	8010690 <mbedtls_debug_print_ret>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 801e846:	4b17      	ldr	r3, [pc, #92]	; (801e8a4 <mbedtls_ssl_write+0xf0>)
 801e848:	9300      	str	r3, [sp, #0]
 801e84a:	4a12      	ldr	r2, [pc, #72]	; (801e894 <mbedtls_ssl_write+0xe0>)
 801e84c:	f641 4303 	movw	r3, #7171	; 0x1c03
 801e850:	2102      	movs	r1, #2
 801e852:	4620      	mov	r0, r4
 801e854:	f7f1 feec 	bl	8010630 <mbedtls_debug_print_msg>
    return( ret );
 801e858:	e7cc      	b.n	801e7f4 <mbedtls_ssl_write+0x40>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 801e85a:	2317      	movs	r3, #23
 801e85c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        memcpy( ssl->out_msg, buf, len );
 801e860:	4632      	mov	r2, r6
 801e862:	4639      	mov	r1, r7
        ssl->out_msglen  = len;
 801e864:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
        memcpy( ssl->out_msg, buf, len );
 801e868:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 801e86c:	f003 fd3b 	bl	80222e6 <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801e870:	4620      	mov	r0, r4
 801e872:	f7fe f9e7 	bl	801cc44 <mbedtls_ssl_write_record>
 801e876:	4605      	mov	r5, r0
 801e878:	b128      	cbz	r0, 801e886 <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e87a:	4b0b      	ldr	r3, [pc, #44]	; (801e8a8 <mbedtls_ssl_write+0xf4>)
 801e87c:	9300      	str	r3, [sp, #0]
 801e87e:	9001      	str	r0, [sp, #4]
 801e880:	f641 33b2 	movw	r3, #7090	; 0x1bb2
 801e884:	e7da      	b.n	801e83c <mbedtls_ssl_write+0x88>
    return( (int) len );
 801e886:	4635      	mov	r5, r6
 801e888:	e7dd      	b.n	801e846 <mbedtls_ssl_write+0x92>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e88a:	4d08      	ldr	r5, [pc, #32]	; (801e8ac <mbedtls_ssl_write+0xf8>)
 801e88c:	e7b2      	b.n	801e7f4 <mbedtls_ssl_write+0x40>
 801e88e:	bf00      	nop
 801e890:	0803265a 	.word	0x0803265a
 801e894:	080318ba 	.word	0x080318ba
 801e898:	08032663 	.word	0x08032663
 801e89c:	080325f3 	.word	0x080325f3
 801e8a0:	08031e47 	.word	0x08031e47
 801e8a4:	0803267d 	.word	0x0803267d
 801e8a8:	08030d52 	.word	0x08030d52
 801e8ac:	ffff8f00 	.word	0xffff8f00

0801e8b0 <mbedtls_ssl_read>:
{
 801e8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e8b2:	460f      	mov	r7, r1
 801e8b4:	4616      	mov	r6, r2
    if( ssl == NULL || ssl->conf == NULL )
 801e8b6:	4604      	mov	r4, r0
 801e8b8:	2800      	cmp	r0, #0
 801e8ba:	f000 810d 	beq.w	801ead8 <mbedtls_ssl_read+0x228>
 801e8be:	6803      	ldr	r3, [r0, #0]
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	f000 8109 	beq.w	801ead8 <mbedtls_ssl_read+0x228>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 801e8c6:	4b85      	ldr	r3, [pc, #532]	; (801eadc <mbedtls_ssl_read+0x22c>)
 801e8c8:	9300      	str	r3, [sp, #0]
 801e8ca:	4a85      	ldr	r2, [pc, #532]	; (801eae0 <mbedtls_ssl_read+0x230>)
 801e8cc:	f641 2357 	movw	r3, #6743	; 0x1a57
 801e8d0:	2102      	movs	r1, #2
 801e8d2:	f7f1 fead 	bl	8010630 <mbedtls_debug_print_msg>
    ret = ssl_check_ctr_renegotiate( ssl );
 801e8d6:	4620      	mov	r0, r4
 801e8d8:	f7ff ff38 	bl	801e74c <ssl_check_ctr_renegotiate>
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e8dc:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
    ret = ssl_check_ctr_renegotiate( ssl );
 801e8e0:	4605      	mov	r5, r0
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e8e2:	d00d      	beq.n	801e900 <mbedtls_ssl_read+0x50>
 801e8e4:	b160      	cbz	r0, 801e900 <mbedtls_ssl_read+0x50>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801e8e6:	4b7f      	ldr	r3, [pc, #508]	; (801eae4 <mbedtls_ssl_read+0x234>)
 801e8e8:	9300      	str	r3, [sp, #0]
 801e8ea:	9001      	str	r0, [sp, #4]
 801e8ec:	f641 2379 	movw	r3, #6777	; 0x1a79
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e8f0:	4a7b      	ldr	r2, [pc, #492]	; (801eae0 <mbedtls_ssl_read+0x230>)
 801e8f2:	2101      	movs	r1, #1
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f7f1 fecb 	bl	8010690 <mbedtls_debug_print_ret>
}
 801e8fa:	4628      	mov	r0, r5
 801e8fc:	b003      	add	sp, #12
 801e8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e900:	6863      	ldr	r3, [r4, #4]
 801e902:	2b10      	cmp	r3, #16
 801e904:	d00d      	beq.n	801e922 <mbedtls_ssl_read+0x72>
        ret = mbedtls_ssl_handshake( ssl );
 801e906:	4620      	mov	r0, r4
 801e908:	f7ff fc98 	bl	801e23c <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e90c:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
        ret = mbedtls_ssl_handshake( ssl );
 801e910:	4605      	mov	r5, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e912:	d006      	beq.n	801e922 <mbedtls_ssl_read+0x72>
 801e914:	b128      	cbz	r0, 801e922 <mbedtls_ssl_read+0x72>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e916:	4b74      	ldr	r3, [pc, #464]	; (801eae8 <mbedtls_ssl_read+0x238>)
 801e918:	9300      	str	r3, [sp, #0]
 801e91a:	9001      	str	r0, [sp, #4]
 801e91c:	f641 2384 	movw	r3, #6788	; 0x1a84
 801e920:	e7e6      	b.n	801e8f0 <mbedtls_ssl_read+0x40>
    if( ssl->in_offt == NULL )
 801e922:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e924:	2b00      	cmp	r3, #0
 801e926:	f040 80b9 	bne.w	801ea9c <mbedtls_ssl_read+0x1ec>
        if( ssl->f_get_timer != NULL &&
 801e92a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e92c:	b143      	cbz	r3, 801e940 <mbedtls_ssl_read+0x90>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 801e92e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801e930:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 801e932:	3001      	adds	r0, #1
 801e934:	d104      	bne.n	801e940 <mbedtls_ssl_read+0x90>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 801e936:	6823      	ldr	r3, [r4, #0]
 801e938:	4620      	mov	r0, r4
 801e93a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801e93c:	f7fd fd8a 	bl	801c454 <ssl_set_timer>
        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801e940:	4620      	mov	r0, r4
 801e942:	f7ff f8db 	bl	801dafc <mbedtls_ssl_read_record>
 801e946:	4605      	mov	r5, r0
 801e948:	b150      	cbz	r0, 801e960 <mbedtls_ssl_read+0xb0>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801e94a:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801e94e:	d101      	bne.n	801e954 <mbedtls_ssl_read+0xa4>
                return( 0 );
 801e950:	2500      	movs	r5, #0
 801e952:	e7d2      	b.n	801e8fa <mbedtls_ssl_read+0x4a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801e954:	4b65      	ldr	r3, [pc, #404]	; (801eaec <mbedtls_ssl_read+0x23c>)
 801e956:	9300      	str	r3, [sp, #0]
 801e958:	9001      	str	r0, [sp, #4]
 801e95a:	f641 23ba 	movw	r3, #6842	; 0x1aba
 801e95e:	e7c7      	b.n	801e8f0 <mbedtls_ssl_read+0x40>
        if( ssl->in_msglen  == 0 &&
 801e960:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801e962:	b983      	cbnz	r3, 801e986 <mbedtls_ssl_read+0xd6>
 801e964:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e966:	2b17      	cmp	r3, #23
 801e968:	d10d      	bne.n	801e986 <mbedtls_ssl_read+0xd6>
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801e96a:	4620      	mov	r0, r4
 801e96c:	f7ff f8c6 	bl	801dafc <mbedtls_ssl_read_record>
 801e970:	4605      	mov	r5, r0
 801e972:	b140      	cbz	r0, 801e986 <mbedtls_ssl_read+0xd6>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801e974:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801e978:	d0ea      	beq.n	801e950 <mbedtls_ssl_read+0xa0>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801e97a:	4b5c      	ldr	r3, [pc, #368]	; (801eaec <mbedtls_ssl_read+0x23c>)
 801e97c:	9300      	str	r3, [sp, #0]
 801e97e:	9001      	str	r0, [sp, #4]
 801e980:	f641 23c9 	movw	r3, #6857	; 0x1ac9
 801e984:	e7b4      	b.n	801e8f0 <mbedtls_ssl_read+0x40>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801e986:	6f62      	ldr	r2, [r4, #116]	; 0x74
 801e988:	2a16      	cmp	r2, #22
 801e98a:	d15a      	bne.n	801ea42 <mbedtls_ssl_read+0x192>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 801e98c:	4b58      	ldr	r3, [pc, #352]	; (801eaf0 <mbedtls_ssl_read+0x240>)
 801e98e:	9300      	str	r3, [sp, #0]
 801e990:	4a53      	ldr	r2, [pc, #332]	; (801eae0 <mbedtls_ssl_read+0x230>)
 801e992:	f641 23d1 	movw	r3, #6865	; 0x1ad1
 801e996:	2101      	movs	r1, #1
 801e998:	4620      	mov	r0, r4
 801e99a:	f7f1 fe49 	bl	8010630 <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801e99e:	6822      	ldr	r2, [r4, #0]
 801e9a0:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801e9a4:	07d9      	lsls	r1, r3, #31
 801e9a6:	d411      	bmi.n	801e9cc <mbedtls_ssl_read+0x11c>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801e9a8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801e9aa:	7809      	ldrb	r1, [r1, #0]
 801e9ac:	b919      	cbnz	r1, 801e9b6 <mbedtls_ssl_read+0x106>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801e9ae:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 801e9b2:	2904      	cmp	r1, #4
 801e9b4:	d00a      	beq.n	801e9cc <mbedtls_ssl_read+0x11c>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 801e9b6:	4b4f      	ldr	r3, [pc, #316]	; (801eaf4 <mbedtls_ssl_read+0x244>)
 801e9b8:	9300      	str	r3, [sp, #0]
 801e9ba:	f641 23de 	movw	r3, #6878	; 0x1ade
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801e9be:	4a48      	ldr	r2, [pc, #288]	; (801eae0 <mbedtls_ssl_read+0x230>)
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e9c0:	4d4d      	ldr	r5, [pc, #308]	; (801eaf8 <mbedtls_ssl_read+0x248>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801e9c2:	2101      	movs	r1, #1
 801e9c4:	4620      	mov	r0, r4
 801e9c6:	f7f1 fe33 	bl	8010630 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e9ca:	e796      	b.n	801e8fa <mbedtls_ssl_read+0x4a>
            if( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||
 801e9cc:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 801e9d0:	0752      	lsls	r2, r2, #29
 801e9d2:	d505      	bpl.n	801e9e0 <mbedtls_ssl_read+0x130>
 801e9d4:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801e9d8:	bb22      	cbnz	r2, 801ea24 <mbedtls_ssl_read+0x174>
                ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801e9da:	f013 0f30 	tst.w	r3, #48	; 0x30
 801e9de:	d121      	bne.n	801ea24 <mbedtls_ssl_read+0x174>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 801e9e0:	4b46      	ldr	r3, [pc, #280]	; (801eafc <mbedtls_ssl_read+0x24c>)
 801e9e2:	9300      	str	r3, [sp, #0]
 801e9e4:	4a3e      	ldr	r2, [pc, #248]	; (801eae0 <mbedtls_ssl_read+0x230>)
 801e9e6:	f641 3303 	movw	r3, #6915	; 0x1b03
 801e9ea:	2103      	movs	r1, #3
 801e9ec:	4620      	mov	r0, r4
 801e9ee:	f7f1 fe1f 	bl	8010630 <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801e9f2:	6963      	ldr	r3, [r4, #20]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	dd0a      	ble.n	801ea0e <mbedtls_ssl_read+0x15e>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801e9f8:	2264      	movs	r2, #100	; 0x64
 801e9fa:	2101      	movs	r1, #1
 801e9fc:	4620      	mov	r0, r4
 801e9fe:	f7fe fc5f 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801ea02:	4605      	mov	r5, r0
 801ea04:	2800      	cmp	r0, #0
 801ea06:	f47f af78 	bne.w	801e8fa <mbedtls_ssl_read+0x4a>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 801ea0a:	4d3d      	ldr	r5, [pc, #244]	; (801eb00 <mbedtls_ssl_read+0x250>)
 801ea0c:	e775      	b.n	801e8fa <mbedtls_ssl_read+0x4a>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ea0e:	4b3d      	ldr	r3, [pc, #244]	; (801eb04 <mbedtls_ssl_read+0x254>)
 801ea10:	9300      	str	r3, [sp, #0]
 801ea12:	4a33      	ldr	r2, [pc, #204]	; (801eae0 <mbedtls_ssl_read+0x230>)
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ea14:	4d3c      	ldr	r5, [pc, #240]	; (801eb08 <mbedtls_ssl_read+0x258>)
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ea16:	f641 331f 	movw	r3, #6943	; 0x1b1f
 801ea1a:	2101      	movs	r1, #1
 801ea1c:	4620      	mov	r0, r4
 801ea1e:	f7f1 fe07 	bl	8010630 <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ea22:	e76a      	b.n	801e8fa <mbedtls_ssl_read+0x4a>
                ret = ssl_start_renegotiation( ssl );
 801ea24:	4620      	mov	r0, r4
 801ea26:	f7ff fe29 	bl	801e67c <ssl_start_renegotiation>
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ea2a:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
                ret = ssl_start_renegotiation( ssl );
 801ea2e:	4605      	mov	r5, r0
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ea30:	d0eb      	beq.n	801ea0a <mbedtls_ssl_read+0x15a>
 801ea32:	2800      	cmp	r0, #0
 801ea34:	d0e9      	beq.n	801ea0a <mbedtls_ssl_read+0x15a>
                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801ea36:	4b35      	ldr	r3, [pc, #212]	; (801eb0c <mbedtls_ssl_read+0x25c>)
 801ea38:	9300      	str	r3, [sp, #0]
 801ea3a:	9001      	str	r0, [sp, #4]
 801ea3c:	f641 3335 	movw	r3, #6965	; 0x1b35
 801ea40:	e756      	b.n	801e8f0 <mbedtls_ssl_read+0x40>
        else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
 801ea42:	68a3      	ldr	r3, [r4, #8]
 801ea44:	2b03      	cmp	r3, #3
 801ea46:	d10d      	bne.n	801ea64 <mbedtls_ssl_read+0x1b4>
            if( ssl->conf->renego_max_records >= 0 )
 801ea48:	6823      	ldr	r3, [r4, #0]
 801ea4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ea4c:	2900      	cmp	r1, #0
 801ea4e:	db09      	blt.n	801ea64 <mbedtls_ssl_read+0x1b4>
                if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )
 801ea50:	68e3      	ldr	r3, [r4, #12]
 801ea52:	3301      	adds	r3, #1
 801ea54:	4299      	cmp	r1, r3
 801ea56:	60e3      	str	r3, [r4, #12]
 801ea58:	da04      	bge.n	801ea64 <mbedtls_ssl_read+0x1b4>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801ea5a:	4b2d      	ldr	r3, [pc, #180]	; (801eb10 <mbedtls_ssl_read+0x260>)
 801ea5c:	9300      	str	r3, [sp, #0]
 801ea5e:	f641 3343 	movw	r3, #6979	; 0x1b43
 801ea62:	e7ac      	b.n	801e9be <mbedtls_ssl_read+0x10e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801ea64:	2a15      	cmp	r2, #21
 801ea66:	d109      	bne.n	801ea7c <mbedtls_ssl_read+0x1cc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 801ea68:	4b2a      	ldr	r3, [pc, #168]	; (801eb14 <mbedtls_ssl_read+0x264>)
 801ea6a:	9300      	str	r3, [sp, #0]
 801ea6c:	4a1c      	ldr	r2, [pc, #112]	; (801eae0 <mbedtls_ssl_read+0x230>)
 801ea6e:	f641 334d 	movw	r3, #6989	; 0x1b4d
 801ea72:	2102      	movs	r1, #2
 801ea74:	4620      	mov	r0, r4
 801ea76:	f7f1 fddb 	bl	8010630 <mbedtls_debug_print_msg>
 801ea7a:	e7c6      	b.n	801ea0a <mbedtls_ssl_read+0x15a>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 801ea7c:	2a17      	cmp	r2, #23
 801ea7e:	d004      	beq.n	801ea8a <mbedtls_ssl_read+0x1da>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801ea80:	4b25      	ldr	r3, [pc, #148]	; (801eb18 <mbedtls_ssl_read+0x268>)
 801ea82:	9300      	str	r3, [sp, #0]
 801ea84:	f641 3353 	movw	r3, #6995	; 0x1b53
 801ea88:	e799      	b.n	801e9be <mbedtls_ssl_read+0x10e>
        ssl->in_offt = ssl->in_msg;
 801ea8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ea8c:	6723      	str	r3, [r4, #112]	; 0x70
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801ea8e:	6863      	ldr	r3, [r4, #4]
 801ea90:	2b10      	cmp	r3, #16
 801ea92:	d103      	bne.n	801ea9c <mbedtls_ssl_read+0x1ec>
            ssl_set_timer( ssl, 0 );
 801ea94:	2100      	movs	r1, #0
 801ea96:	4620      	mov	r0, r4
 801ea98:	f7fd fcdc 	bl	801c454 <ssl_set_timer>
    n = ( len < ssl->in_msglen )
 801ea9c:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    memcpy( buf, ssl->in_offt, n );
 801ea9e:	6f21      	ldr	r1, [r4, #112]	; 0x70
    n = ( len < ssl->in_msglen )
 801eaa0:	42b5      	cmp	r5, r6
 801eaa2:	bf28      	it	cs
 801eaa4:	4635      	movcs	r5, r6
    memcpy( buf, ssl->in_offt, n );
 801eaa6:	462a      	mov	r2, r5
 801eaa8:	4638      	mov	r0, r7
 801eaaa:	f003 fc1c 	bl	80222e6 <memcpy>
    ssl->in_msglen -= n;
 801eaae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801eab0:	1b5b      	subs	r3, r3, r5
 801eab2:	67a3      	str	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen == 0 )
 801eab4:	b963      	cbnz	r3, 801ead0 <mbedtls_ssl_read+0x220>
        ssl->in_offt = NULL;
 801eab6:	6723      	str	r3, [r4, #112]	; 0x70
        ssl->keep_current_message = 0;
 801eab8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 801eabc:	4b17      	ldr	r3, [pc, #92]	; (801eb1c <mbedtls_ssl_read+0x26c>)
 801eabe:	9300      	str	r3, [sp, #0]
 801eac0:	4a07      	ldr	r2, [pc, #28]	; (801eae0 <mbedtls_ssl_read+0x230>)
 801eac2:	f641 3382 	movw	r3, #7042	; 0x1b82
 801eac6:	2102      	movs	r1, #2
 801eac8:	4620      	mov	r0, r4
 801eaca:	f7f1 fdb1 	bl	8010630 <mbedtls_debug_print_msg>
    return( (int) n );
 801eace:	e714      	b.n	801e8fa <mbedtls_ssl_read+0x4a>
        ssl->in_offt += n;
 801ead0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ead2:	442b      	add	r3, r5
 801ead4:	6723      	str	r3, [r4, #112]	; 0x70
 801ead6:	e7f1      	b.n	801eabc <mbedtls_ssl_read+0x20c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801ead8:	4d11      	ldr	r5, [pc, #68]	; (801eb20 <mbedtls_ssl_read+0x270>)
 801eada:	e70e      	b.n	801e8fa <mbedtls_ssl_read+0x4a>
 801eadc:	08032686 	.word	0x08032686
 801eae0:	080318ba 	.word	0x080318ba
 801eae4:	08032663 	.word	0x08032663
 801eae8:	080325f3 	.word	0x080325f3
 801eaec:	08030dab 	.word	0x08030dab
 801eaf0:	0803268e 	.word	0x0803268e
 801eaf4:	080326a9 	.word	0x080326a9
 801eaf8:	ffff8900 	.word	0xffff8900
 801eafc:	080326cf 	.word	0x080326cf
 801eb00:	ffff9700 	.word	0xffff9700
 801eb04:	080313ea 	.word	0x080313ea
 801eb08:	ffff9400 	.word	0xffff9400
 801eb0c:	08032618 	.word	0x08032618
 801eb10:	080326f5 	.word	0x080326f5
 801eb14:	08032728 	.word	0x08032728
 801eb18:	0803274d 	.word	0x0803274d
 801eb1c:	0803276a 	.word	0x0803276a
 801eb20:	ffff8f00 	.word	0xffff8f00

0801eb24 <mbedtls_ssl_free>:
{
 801eb24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL )
 801eb26:	4604      	mov	r4, r0
 801eb28:	2800      	cmp	r0, #0
 801eb2a:	d060      	beq.n	801ebee <mbedtls_ssl_free+0xca>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 801eb2c:	4b31      	ldr	r3, [pc, #196]	; (801ebf4 <mbedtls_ssl_free+0xd0>)
 801eb2e:	9300      	str	r3, [sp, #0]
 801eb30:	4a31      	ldr	r2, [pc, #196]	; (801ebf8 <mbedtls_ssl_free+0xd4>)
 801eb32:	f641 43b0 	movw	r3, #7344	; 0x1cb0
 801eb36:	2102      	movs	r1, #2
 801eb38:	f7f1 fd7a 	bl	8010630 <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 801eb3c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801eb40:	b140      	cbz	r0, 801eb54 <mbedtls_ssl_free+0x30>
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 801eb42:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801eb46:	f7fd fa3d 	bl	801bfc4 <mbedtls_zeroize>
        mbedtls_free( ssl->out_buf );
 801eb4a:	4b2c      	ldr	r3, [pc, #176]	; (801ebfc <mbedtls_ssl_free+0xd8>)
 801eb4c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	4798      	blx	r3
    if( ssl->in_buf != NULL )
 801eb54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb56:	b138      	cbz	r0, 801eb68 <mbedtls_ssl_free+0x44>
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 801eb58:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801eb5c:	f7fd fa32 	bl	801bfc4 <mbedtls_zeroize>
        mbedtls_free( ssl->in_buf );
 801eb60:	4b26      	ldr	r3, [pc, #152]	; (801ebfc <mbedtls_ssl_free+0xd8>)
 801eb62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	4798      	blx	r3
    if( ssl->transform )
 801eb68:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801eb6a:	b128      	cbz	r0, 801eb78 <mbedtls_ssl_free+0x54>
        mbedtls_ssl_transform_free( ssl->transform );
 801eb6c:	f7ff fbd8 	bl	801e320 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801eb70:	4b22      	ldr	r3, [pc, #136]	; (801ebfc <mbedtls_ssl_free+0xd8>)
 801eb72:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	4798      	blx	r3
    if( ssl->handshake )
 801eb78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801eb7a:	b188      	cbz	r0, 801eba0 <mbedtls_ssl_free+0x7c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801eb7c:	f7ff fbea 	bl	801e354 <mbedtls_ssl_handshake_free>
        mbedtls_free( ssl->handshake );
 801eb80:	4d1e      	ldr	r5, [pc, #120]	; (801ebfc <mbedtls_ssl_free+0xd8>)
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801eb82:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801eb84:	f7ff fbcc 	bl	801e320 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801eb88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801eb8a:	f7ff fc09 	bl	801e3a0 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 801eb8e:	682b      	ldr	r3, [r5, #0]
 801eb90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801eb92:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801eb94:	682b      	ldr	r3, [r5, #0]
 801eb96:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801eb98:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801eb9a:	682b      	ldr	r3, [r5, #0]
 801eb9c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801eb9e:	4798      	blx	r3
    if( ssl->session )
 801eba0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801eba2:	b128      	cbz	r0, 801ebb0 <mbedtls_ssl_free+0x8c>
        mbedtls_ssl_session_free( ssl->session );
 801eba4:	f7ff fbfc 	bl	801e3a0 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801eba8:	4b14      	ldr	r3, [pc, #80]	; (801ebfc <mbedtls_ssl_free+0xd8>)
 801ebaa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	4798      	blx	r3
    if( ssl->hostname != NULL )
 801ebb0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 801ebb4:	b15d      	cbz	r5, 801ebce <mbedtls_ssl_free+0xaa>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 801ebb6:	4628      	mov	r0, r5
 801ebb8:	f7e1 fb14 	bl	80001e4 <strlen>
 801ebbc:	4601      	mov	r1, r0
 801ebbe:	4628      	mov	r0, r5
 801ebc0:	f7fd fa00 	bl	801bfc4 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 801ebc4:	4b0d      	ldr	r3, [pc, #52]	; (801ebfc <mbedtls_ssl_free+0xd8>)
 801ebc6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 801ebce:	4b0c      	ldr	r3, [pc, #48]	; (801ec00 <mbedtls_ssl_free+0xdc>)
 801ebd0:	9300      	str	r3, [sp, #0]
 801ebd2:	4620      	mov	r0, r4
 801ebd4:	f641 43f1 	movw	r3, #7409	; 0x1cf1
 801ebd8:	4a07      	ldr	r2, [pc, #28]	; (801ebf8 <mbedtls_ssl_free+0xd4>)
 801ebda:	2102      	movs	r1, #2
 801ebdc:	f7f1 fd28 	bl	8010630 <mbedtls_debug_print_msg>
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801ebe0:	21dc      	movs	r1, #220	; 0xdc
 801ebe2:	4620      	mov	r0, r4
}
 801ebe4:	b003      	add	sp, #12
 801ebe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801ebea:	f7fd b9eb 	b.w	801bfc4 <mbedtls_zeroize>
}
 801ebee:	b003      	add	sp, #12
 801ebf0:	bd30      	pop	{r4, r5, pc}
 801ebf2:	bf00      	nop
 801ebf4:	08032772 	.word	0x08032772
 801ebf8:	080318ba 	.word	0x080318ba
 801ebfc:	200005a4 	.word	0x200005a4
 801ec00:	0803277a 	.word	0x0803277a

0801ec04 <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 801ec04:	2270      	movs	r2, #112	; 0x70
 801ec06:	2100      	movs	r1, #0
 801ec08:	f003 bb91 	b.w	802232e <memset>

0801ec0c <mbedtls_ssl_config_defaults>:
{
 801ec0c:	b510      	push	{r4, lr}
 801ec0e:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 801ec10:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
 801ec14:	f361 0000 	bfi	r0, r1, #0, #1
    conf->transport = transport;
 801ec18:	f362 0041 	bfi	r0, r2, #1, #1
 801ec1c:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 801ec20:	b959      	cbnz	r1, 801ec3a <mbedtls_ssl_config_defaults+0x2e>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 801ec22:	b2c2      	uxtb	r2, r0
 801ec24:	2102      	movs	r1, #2
 801ec26:	f361 0283 	bfi	r2, r1, #2, #2
 801ec2a:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 801ec2e:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 801ec32:	f042 0210 	orr.w	r2, r2, #16
 801ec36:	f884 206d 	strb.w	r2, [r4, #109]	; 0x6d
    conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801ec3a:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 801ec3e:	f042 0202 	orr.w	r2, r2, #2
 801ec42:	f884 206d 	strb.w	r2, [r4, #109]	; 0x6d
    conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;
 801ec46:	2210      	movs	r2, #16
 801ec48:	65e2      	str	r2, [r4, #92]	; 0x5c
    memset( conf->renego_period,     0x00, 2 );
 801ec4a:	2200      	movs	r2, #0
 801ec4c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    switch( preset )
 801ec50:	2b02      	cmp	r3, #2
    memset( conf->renego_period + 2, 0xFF, 6 );
 801ec52:	f04f 32ff 	mov.w	r2, #4294967295
 801ec56:	f8c4 2062 	str.w	r2, [r4, #98]	; 0x62
 801ec5a:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    switch( preset )
 801ec5e:	d110      	bne.n	801ec82 <mbedtls_ssl_config_defaults+0x76>
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801ec60:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 801ec64:	66a3      	str	r3, [r4, #104]	; 0x68
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 801ec66:	4b0f      	ldr	r3, [pc, #60]	; (801eca4 <mbedtls_ssl_config_defaults+0x98>)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 801ec68:	4a0f      	ldr	r2, [pc, #60]	; (801eca8 <mbedtls_ssl_config_defaults+0x9c>)
 801ec6a:	63e2      	str	r2, [r4, #60]	; 0x3c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801ec6c:	e9c4 3302 	strd	r3, r3, [r4, #8]
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801ec70:	f103 020c 	add.w	r2, r3, #12
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801ec74:	e9c4 3300 	strd	r3, r3, [r4]
            conf->curve_list = ssl_preset_suiteb_curves;
 801ec78:	3318      	adds	r3, #24
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801ec7a:	64e2      	str	r2, [r4, #76]	; 0x4c
            conf->curve_list = ssl_preset_suiteb_curves;
 801ec7c:	6523      	str	r3, [r4, #80]	; 0x50
}
 801ec7e:	2000      	movs	r0, #0
 801ec80:	bd10      	pop	{r4, pc}
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801ec82:	4b0a      	ldr	r3, [pc, #40]	; (801ecac <mbedtls_ssl_config_defaults+0xa0>)
 801ec84:	66a3      	str	r3, [r4, #104]	; 0x68
                                   mbedtls_ssl_list_ciphersuites();
 801ec86:	f7fb fa11 	bl	801a0ac <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 801ec8a:	4b09      	ldr	r3, [pc, #36]	; (801ecb0 <mbedtls_ssl_config_defaults+0xa4>)
 801ec8c:	63e3      	str	r3, [r4, #60]	; 0x3c
            conf->sig_hashes = ssl_preset_default_hashes;
 801ec8e:	4b09      	ldr	r3, [pc, #36]	; (801ecb4 <mbedtls_ssl_config_defaults+0xa8>)
 801ec90:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801ec92:	e9c4 0002 	strd	r0, r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801ec96:	e9c4 0000 	strd	r0, r0, [r4]
            conf->curve_list = mbedtls_ecp_grp_id_list();
 801ec9a:	f7f2 ff15 	bl	8011ac8 <mbedtls_ecp_grp_id_list>
 801ec9e:	6520      	str	r0, [r4, #80]	; 0x50
 801eca0:	e7ed      	b.n	801ec7e <mbedtls_ssl_config_defaults+0x72>
 801eca2:	bf00      	nop
 801eca4:	200005a8 	.word	0x200005a8
 801eca8:	0802d05c 	.word	0x0802d05c
 801ecac:	01030303 	.word	0x01030303
 801ecb0:	0802d04c 	.word	0x0802d04c
 801ecb4:	200005c4 	.word	0x200005c4

0801ecb8 <mbedtls_ssl_config_free>:
{
 801ecb8:	b570      	push	{r4, r5, r6, lr}
 801ecba:	4604      	mov	r4, r0
        mbedtls_free( cur );
 801ecbc:	4d06      	ldr	r5, [pc, #24]	; (801ecd8 <mbedtls_ssl_config_free+0x20>)
    ssl_key_cert_free( conf->key_cert );
 801ecbe:	6c00      	ldr	r0, [r0, #64]	; 0x40
    while( cur != NULL )
 801ecc0:	b928      	cbnz	r0, 801ecce <mbedtls_ssl_config_free+0x16>
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801ecc2:	4620      	mov	r0, r4
 801ecc4:	2170      	movs	r1, #112	; 0x70
}
 801ecc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801ecca:	f7fd b97b 	b.w	801bfc4 <mbedtls_zeroize>
        next = cur->next;
 801ecce:	6886      	ldr	r6, [r0, #8]
        mbedtls_free( cur );
 801ecd0:	682b      	ldr	r3, [r5, #0]
 801ecd2:	4798      	blx	r3
        cur = next;
 801ecd4:	4630      	mov	r0, r6
 801ecd6:	e7f3      	b.n	801ecc0 <mbedtls_ssl_config_free+0x8>
 801ecd8:	200005a4 	.word	0x200005a4

0801ecdc <mbedtls_ssl_sig_from_pk>:
{
 801ecdc:	b510      	push	{r4, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801ecde:	2101      	movs	r1, #1
{
 801ece0:	4604      	mov	r4, r0
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801ece2:	f7f6 fcf3 	bl	80156cc <mbedtls_pk_can_do>
 801ece6:	b940      	cbnz	r0, 801ecfa <mbedtls_ssl_sig_from_pk+0x1e>
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
 801ece8:	2104      	movs	r1, #4
 801ecea:	4620      	mov	r0, r4
 801ecec:	f7f6 fcee 	bl	80156cc <mbedtls_pk_can_do>
 801ecf0:	2800      	cmp	r0, #0
    return( MBEDTLS_SSL_SIG_ANON );
 801ecf2:	bf14      	ite	ne
 801ecf4:	2003      	movne	r0, #3
 801ecf6:	2000      	moveq	r0, #0
}
 801ecf8:	bd10      	pop	{r4, pc}
        return( MBEDTLS_SSL_SIG_RSA );
 801ecfa:	2001      	movs	r0, #1
 801ecfc:	e7fc      	b.n	801ecf8 <mbedtls_ssl_sig_from_pk+0x1c>

0801ecfe <mbedtls_ssl_pk_alg_from_sig>:
    switch( sig )
 801ecfe:	2801      	cmp	r0, #1
 801ed00:	d003      	beq.n	801ed0a <mbedtls_ssl_pk_alg_from_sig+0xc>
 801ed02:	2803      	cmp	r0, #3
            return( MBEDTLS_PK_NONE );
 801ed04:	bf0c      	ite	eq
 801ed06:	2004      	moveq	r0, #4
 801ed08:	2000      	movne	r0, #0
}
 801ed0a:	4770      	bx	lr

0801ed0c <mbedtls_ssl_md_alg_from_hash>:
{
 801ed0c:	3801      	subs	r0, #1
 801ed0e:	b2c0      	uxtb	r0, r0
 801ed10:	2805      	cmp	r0, #5
 801ed12:	bf9d      	ittte	ls
 801ed14:	4b02      	ldrls	r3, [pc, #8]	; (801ed20 <mbedtls_ssl_md_alg_from_hash+0x14>)
 801ed16:	18c0      	addls	r0, r0, r3
 801ed18:	f890 0024 	ldrbls.w	r0, [r0, #36]	; 0x24
 801ed1c:	2000      	movhi	r0, #0
}
 801ed1e:	4770      	bx	lr
 801ed20:	0802cf6c 	.word	0x0802cf6c

0801ed24 <mbedtls_ssl_hash_from_md_alg>:
{
 801ed24:	3803      	subs	r0, #3
 801ed26:	2805      	cmp	r0, #5
 801ed28:	bf9d      	ittte	ls
 801ed2a:	4b03      	ldrls	r3, [pc, #12]	; (801ed38 <mbedtls_ssl_hash_from_md_alg+0x14>)
 801ed2c:	18c0      	addls	r0, r0, r3
 801ed2e:	f890 002a 	ldrbls.w	r0, [r0, #42]	; 0x2a
    switch( md )
 801ed32:	2000      	movhi	r0, #0
}
 801ed34:	4770      	bx	lr
 801ed36:	bf00      	nop
 801ed38:	0802cf6c 	.word	0x0802cf6c

0801ed3c <mbedtls_ssl_check_curve>:
    if( ssl->conf->curve_list == NULL )
 801ed3c:	6803      	ldr	r3, [r0, #0]
 801ed3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ed40:	b11b      	cbz	r3, 801ed4a <mbedtls_ssl_check_curve+0xe>
 801ed42:	3b01      	subs	r3, #1
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 801ed44:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801ed48:	b912      	cbnz	r2, 801ed50 <mbedtls_ssl_check_curve+0x14>
        return( -1 );
 801ed4a:	f04f 30ff 	mov.w	r0, #4294967295
 801ed4e:	4770      	bx	lr
        if( *gid == grp_id )
 801ed50:	428a      	cmp	r2, r1
 801ed52:	d1f7      	bne.n	801ed44 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
 801ed54:	2000      	movs	r0, #0
}
 801ed56:	4770      	bx	lr

0801ed58 <mbedtls_ssl_check_sig_hash>:
    if( ssl->conf->sig_hashes == NULL )
 801ed58:	6803      	ldr	r3, [r0, #0]
 801ed5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ed5c:	b11b      	cbz	r3, 801ed66 <mbedtls_ssl_check_sig_hash+0xe>
 801ed5e:	3b04      	subs	r3, #4
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 801ed60:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801ed64:	b912      	cbnz	r2, 801ed6c <mbedtls_ssl_check_sig_hash+0x14>
        return( -1 );
 801ed66:	f04f 30ff 	mov.w	r0, #4294967295
 801ed6a:	4770      	bx	lr
        if( *cur == (int) md )
 801ed6c:	4291      	cmp	r1, r2
 801ed6e:	d1f7      	bne.n	801ed60 <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
 801ed70:	2000      	movs	r0, #0
}
 801ed72:	4770      	bx	lr

0801ed74 <mbedtls_ssl_check_cert_usage>:
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ed74:	2a01      	cmp	r2, #1
{
 801ed76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed78:	4607      	mov	r7, r0
 801ed7a:	4616      	mov	r6, r2
 801ed7c:	461d      	mov	r5, r3
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ed7e:	d12c      	bne.n	801edda <mbedtls_ssl_check_cert_usage+0x66>
        switch( ciphersuite->key_exchange )
 801ed80:	7a8a      	ldrb	r2, [r1, #10]
 801ed82:	2a0a      	cmp	r2, #10
 801ed84:	d82b      	bhi.n	801edde <mbedtls_ssl_check_cert_usage+0x6a>
 801ed86:	fa06 f202 	lsl.w	r2, r6, r2
 801ed8a:	f012 0f82 	tst.w	r2, #130	; 0x82
 801ed8e:	d128      	bne.n	801ede2 <mbedtls_ssl_check_cert_usage+0x6e>
 801ed90:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 801ed94:	d127      	bne.n	801ede6 <mbedtls_ssl_check_cert_usage+0x72>
    int usage = 0;
 801ed96:	f012 0f1c 	tst.w	r2, #28
 801ed9a:	bf14      	ite	ne
 801ed9c:	2180      	movne	r1, #128	; 0x80
 801ed9e:	2100      	moveq	r1, #0
    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 801eda0:	4638      	mov	r0, r7
 801eda2:	f001 fd9f 	bl	80208e4 <mbedtls_x509_crt_check_key_usage>
 801eda6:	4604      	mov	r4, r0
 801eda8:	b128      	cbz	r0, 801edb6 <mbedtls_ssl_check_cert_usage+0x42>
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 801edaa:	682b      	ldr	r3, [r5, #0]
 801edac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801edb0:	602b      	str	r3, [r5, #0]
        ret = -1;
 801edb2:	f04f 34ff 	mov.w	r4, #4294967295
    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
 801edb6:	490d      	ldr	r1, [pc, #52]	; (801edec <mbedtls_ssl_check_cert_usage+0x78>)
 801edb8:	4b0d      	ldr	r3, [pc, #52]	; (801edf0 <mbedtls_ssl_check_cert_usage+0x7c>)
 801edba:	2208      	movs	r2, #8
 801edbc:	2e01      	cmp	r6, #1
 801edbe:	bf18      	it	ne
 801edc0:	4619      	movne	r1, r3
 801edc2:	4638      	mov	r0, r7
 801edc4:	f001 fdda 	bl	802097c <mbedtls_x509_crt_check_extended_key_usage>
 801edc8:	b128      	cbz	r0, 801edd6 <mbedtls_ssl_check_cert_usage+0x62>
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
 801edca:	682b      	ldr	r3, [r5, #0]
 801edcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801edd0:	602b      	str	r3, [r5, #0]
        ret = -1;
 801edd2:	f04f 34ff 	mov.w	r4, #4294967295
}
 801edd6:	4620      	mov	r0, r4
 801edd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 801edda:	2180      	movs	r1, #128	; 0x80
 801eddc:	e7e0      	b.n	801eda0 <mbedtls_ssl_check_cert_usage+0x2c>
    int usage = 0;
 801edde:	2100      	movs	r1, #0
 801ede0:	e7de      	b.n	801eda0 <mbedtls_ssl_check_cert_usage+0x2c>
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 801ede2:	2120      	movs	r1, #32
 801ede4:	e7dc      	b.n	801eda0 <mbedtls_ssl_check_cert_usage+0x2c>
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 801ede6:	2108      	movs	r1, #8
 801ede8:	e7da      	b.n	801eda0 <mbedtls_ssl_check_cert_usage+0x2c>
 801edea:	bf00      	nop
 801edec:	0803003e 	.word	0x0803003e
 801edf0:	08030076 	.word	0x08030076

0801edf4 <mbedtls_ssl_parse_certificate>:
{
 801edf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801edf8:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801edfa:	4a8d      	ldr	r2, [pc, #564]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801edfc:	681f      	ldr	r7, [r3, #0]
    int authmode = ssl->conf->authmode;
 801edfe:	6803      	ldr	r3, [r0, #0]
{
 801ee00:	b085      	sub	sp, #20
    int authmode = ssl->conf->authmode;
 801ee02:	f893 606c 	ldrb.w	r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ee06:	4b8b      	ldr	r3, [pc, #556]	; (801f034 <mbedtls_ssl_parse_certificate+0x240>)
 801ee08:	9300      	str	r3, [sp, #0]
 801ee0a:	2102      	movs	r1, #2
 801ee0c:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
{
 801ee10:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ee12:	f7f1 fc0d 	bl	8010630 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801ee16:	7abb      	ldrb	r3, [r7, #10]
 801ee18:	2b0b      	cmp	r3, #11
    int authmode = ssl->conf->authmode;
 801ee1a:	f3c6 0681 	ubfx	r6, r6, #2, #2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801ee1e:	d816      	bhi.n	801ee4e <mbedtls_ssl_parse_certificate+0x5a>
 801ee20:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801ee24:	40dd      	lsrs	r5, r3
 801ee26:	43ed      	mvns	r5, r5
 801ee28:	f015 0501 	ands.w	r5, r5, #1
 801ee2c:	d10f      	bne.n	801ee4e <mbedtls_ssl_parse_certificate+0x5a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 801ee2e:	4b82      	ldr	r3, [pc, #520]	; (801f038 <mbedtls_ssl_parse_certificate+0x244>)
 801ee30:	9300      	str	r3, [sp, #0]
 801ee32:	4a7f      	ldr	r2, [pc, #508]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
 801ee34:	f241 03e7 	movw	r3, #4327	; 0x10e7
 801ee38:	2102      	movs	r1, #2
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	f7f1 fbf8 	bl	8010630 <mbedtls_debug_print_msg>
        ssl->state++;
 801ee40:	6863      	ldr	r3, [r4, #4]
 801ee42:	3301      	adds	r3, #1
 801ee44:	6063      	str	r3, [r4, #4]
}
 801ee46:	4628      	mov	r0, r5
 801ee48:	b005      	add	sp, #20
 801ee4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ee4e:	4620      	mov	r0, r4
 801ee50:	f7fe fe54 	bl	801dafc <mbedtls_ssl_read_record>
 801ee54:	4605      	mov	r5, r0
 801ee56:	b150      	cbz	r0, 801ee6e <mbedtls_ssl_parse_certificate+0x7a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ee58:	4b78      	ldr	r3, [pc, #480]	; (801f03c <mbedtls_ssl_parse_certificate+0x248>)
 801ee5a:	9300      	str	r3, [sp, #0]
 801ee5c:	9001      	str	r0, [sp, #4]
 801ee5e:	f241 1308 	movw	r3, #4360	; 0x1108
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801ee62:	4a73      	ldr	r2, [pc, #460]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
 801ee64:	2101      	movs	r1, #1
 801ee66:	4620      	mov	r0, r4
 801ee68:	f7f1 fc12 	bl	8010690 <mbedtls_debug_print_ret>
            return( ret );
 801ee6c:	e7eb      	b.n	801ee46 <mbedtls_ssl_parse_certificate+0x52>
    ssl->state++;
 801ee6e:	6863      	ldr	r3, [r4, #4]
 801ee70:	3301      	adds	r3, #1
 801ee72:	6063      	str	r3, [r4, #4]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801ee74:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801ee76:	2b16      	cmp	r3, #22
 801ee78:	d00f      	beq.n	801ee9a <mbedtls_ssl_parse_certificate+0xa6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ee7a:	4b71      	ldr	r3, [pc, #452]	; (801f040 <mbedtls_ssl_parse_certificate+0x24c>)
 801ee7c:	9300      	str	r3, [sp, #0]
 801ee7e:	4a6c      	ldr	r2, [pc, #432]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801ee80:	4d70      	ldr	r5, [pc, #448]	; (801f044 <mbedtls_ssl_parse_certificate+0x250>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ee82:	f241 1345 	movw	r3, #4421	; 0x1145
 801ee86:	2101      	movs	r1, #1
 801ee88:	4620      	mov	r0, r4
 801ee8a:	f7f1 fbd1 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ee8e:	220a      	movs	r2, #10
 801ee90:	2102      	movs	r1, #2
 801ee92:	4620      	mov	r0, r4
 801ee94:	f7fe fa14 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801ee98:	e7d5      	b.n	801ee46 <mbedtls_ssl_parse_certificate+0x52>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801ee9a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801ee9c:	7813      	ldrb	r3, [r2, #0]
 801ee9e:	2b0b      	cmp	r3, #11
 801eea0:	d103      	bne.n	801eeaa <mbedtls_ssl_parse_certificate+0xb6>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 801eea2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801eea6:	2909      	cmp	r1, #9
 801eea8:	d80f      	bhi.n	801eeca <mbedtls_ssl_parse_certificate+0xd6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801eeaa:	4b65      	ldr	r3, [pc, #404]	; (801f040 <mbedtls_ssl_parse_certificate+0x24c>)
 801eeac:	9300      	str	r3, [sp, #0]
 801eeae:	f241 134e 	movw	r3, #4430	; 0x114e
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801eeb2:	4a5f      	ldr	r2, [pc, #380]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
 801eeb4:	2101      	movs	r1, #1
 801eeb6:	4620      	mov	r0, r4
 801eeb8:	f7f1 fbba 	bl	8010630 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801eebc:	2232      	movs	r2, #50	; 0x32
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801eebe:	2102      	movs	r1, #2
 801eec0:	4620      	mov	r0, r4
 801eec2:	f7fe f9fd 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 801eec6:	4d60      	ldr	r5, [pc, #384]	; (801f048 <mbedtls_ssl_parse_certificate+0x254>)
 801eec8:	e7bd      	b.n	801ee46 <mbedtls_ssl_parse_certificate+0x52>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801eeca:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    if( ssl->in_msg[i] != 0 ||
 801eece:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801eed0:	ba5b      	rev16	r3, r3
 801eed2:	b29b      	uxth	r3, r3
    if( ssl->in_msg[i] != 0 ||
 801eed4:	b912      	cbnz	r2, 801eedc <mbedtls_ssl_parse_certificate+0xe8>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801eed6:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 801eed8:	4299      	cmp	r1, r3
 801eeda:	d004      	beq.n	801eee6 <mbedtls_ssl_parse_certificate+0xf2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801eedc:	4b58      	ldr	r3, [pc, #352]	; (801f040 <mbedtls_ssl_parse_certificate+0x24c>)
 801eede:	9300      	str	r3, [sp, #0]
 801eee0:	f241 135e 	movw	r3, #4446	; 0x115e
 801eee4:	e7e5      	b.n	801eeb2 <mbedtls_ssl_parse_certificate+0xbe>
    if( ssl->session_negotiate->peer_cert != NULL )
 801eee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eee8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801eeea:	b130      	cbz	r0, 801eefa <mbedtls_ssl_parse_certificate+0x106>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 801eeec:	f002 f8e8 	bl	80210c0 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 801eef0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801eef2:	4b56      	ldr	r3, [pc, #344]	; (801f04c <mbedtls_ssl_parse_certificate+0x258>)
 801eef4:	6e50      	ldr	r0, [r2, #100]	; 0x64
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	4798      	blx	r3
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 801eefa:	4b55      	ldr	r3, [pc, #340]	; (801f050 <mbedtls_ssl_parse_certificate+0x25c>)
 801eefc:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	f44f 719a 	mov.w	r1, #308	; 0x134
 801ef04:	2001      	movs	r0, #1
 801ef06:	4798      	blx	r3
 801ef08:	6668      	str	r0, [r5, #100]	; 0x64
 801ef0a:	b990      	cbnz	r0, 801ef32 <mbedtls_ssl_parse_certificate+0x13e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 801ef0c:	f44f 739a 	mov.w	r3, #308	; 0x134
 801ef10:	9301      	str	r3, [sp, #4]
 801ef12:	4b50      	ldr	r3, [pc, #320]	; (801f054 <mbedtls_ssl_parse_certificate+0x260>)
 801ef14:	9300      	str	r3, [sp, #0]
 801ef16:	4a46      	ldr	r2, [pc, #280]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801ef18:	4d4f      	ldr	r5, [pc, #316]	; (801f058 <mbedtls_ssl_parse_certificate+0x264>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 801ef1a:	f241 136f 	movw	r3, #4463	; 0x116f
 801ef1e:	2101      	movs	r1, #1
 801ef20:	4620      	mov	r0, r4
 801ef22:	f7f1 fb85 	bl	8010630 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ef26:	2250      	movs	r2, #80	; 0x50
 801ef28:	2102      	movs	r1, #2
 801ef2a:	4620      	mov	r0, r4
 801ef2c:	f7fe f9c8 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801ef30:	e789      	b.n	801ee46 <mbedtls_ssl_parse_certificate+0x52>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801ef32:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch( ret )
 801ef34:	f8df 9134 	ldr.w	r9, [pc, #308]	; 801f06c <mbedtls_ssl_parse_certificate+0x278>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801ef38:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801ef3a:	f002 f8bb 	bl	80210b4 <mbedtls_x509_crt_init>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ef3e:	2500      	movs	r5, #0
    i += 3;
 801ef40:	f04f 0807 	mov.w	r8, #7
    while( i < ssl->in_hslen )
 801ef44:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801ef48:	4543      	cmp	r3, r8
 801ef4a:	d822      	bhi.n	801ef92 <mbedtls_ssl_parse_certificate+0x19e>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 801ef4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ef4e:	4a38      	ldr	r2, [pc, #224]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
 801ef50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ef52:	9301      	str	r3, [sp, #4]
 801ef54:	4b41      	ldr	r3, [pc, #260]	; (801f05c <mbedtls_ssl_parse_certificate+0x268>)
 801ef56:	9300      	str	r3, [sp, #0]
 801ef58:	2103      	movs	r1, #3
 801ef5a:	f241 13ac 	movw	r3, #4524	; 0x11ac
 801ef5e:	4620      	mov	r0, r4
 801ef60:	f7f1 fcb6 	bl	80108d0 <mbedtls_debug_print_crt>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801ef64:	f8d4 8000 	ldr.w	r8, [r4]
 801ef68:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
 801ef6c:	07db      	lsls	r3, r3, #31
 801ef6e:	d47f      	bmi.n	801f070 <mbedtls_ssl_parse_certificate+0x27c>
 801ef70:	68a1      	ldr	r1, [r4, #8]
 801ef72:	2901      	cmp	r1, #1
 801ef74:	d17c      	bne.n	801f070 <mbedtls_ssl_parse_certificate+0x27c>
        if( ssl->session->peer_cert == NULL )
 801ef76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ef78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d146      	bne.n	801f00c <mbedtls_ssl_parse_certificate+0x218>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "new server cert during renegotiation" ) );
 801ef7e:	4b38      	ldr	r3, [pc, #224]	; (801f060 <mbedtls_ssl_parse_certificate+0x26c>)
 801ef80:	4a2b      	ldr	r2, [pc, #172]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
 801ef82:	9300      	str	r3, [sp, #0]
 801ef84:	f241 13b8 	movw	r3, #4536	; 0x11b8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801ef88:	4620      	mov	r0, r4
 801ef8a:	f7f1 fb51 	bl	8010630 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ef8e:	2231      	movs	r2, #49	; 0x31
 801ef90:	e795      	b.n	801eebe <mbedtls_ssl_parse_certificate+0xca>
        if( ssl->in_msg[i] != 0 )
 801ef92:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801ef94:	f811 2008 	ldrb.w	r2, [r1, r8]
 801ef98:	b122      	cbz	r2, 801efa4 <mbedtls_ssl_parse_certificate+0x1b0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ef9a:	4b29      	ldr	r3, [pc, #164]	; (801f040 <mbedtls_ssl_parse_certificate+0x24c>)
 801ef9c:	9300      	str	r3, [sp, #0]
 801ef9e:	f241 137d 	movw	r3, #4477	; 0x117d
 801efa2:	e786      	b.n	801eeb2 <mbedtls_ssl_parse_certificate+0xbe>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801efa4:	eb01 0008 	add.w	r0, r1, r8
 801efa8:	7845      	ldrb	r5, [r0, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 801efaa:	7882      	ldrb	r2, [r0, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801efac:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 801efb0:	2a7f      	cmp	r2, #127	; 0x7f
        i += 3;
 801efb2:	f108 0003 	add.w	r0, r8, #3
        if( n < 128 || i + n > ssl->in_hslen )
 801efb6:	d903      	bls.n	801efc0 <mbedtls_ssl_parse_certificate+0x1cc>
 801efb8:	eb02 0800 	add.w	r8, r2, r0
 801efbc:	4598      	cmp	r8, r3
 801efbe:	d904      	bls.n	801efca <mbedtls_ssl_parse_certificate+0x1d6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801efc0:	4b1f      	ldr	r3, [pc, #124]	; (801f040 <mbedtls_ssl_parse_certificate+0x24c>)
 801efc2:	9300      	str	r3, [sp, #0]
 801efc4:	f241 1389 	movw	r3, #4489	; 0x1189
 801efc8:	e773      	b.n	801eeb2 <mbedtls_ssl_parse_certificate+0xbe>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801efca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801efcc:	4401      	add	r1, r0
 801efce:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801efd0:	f002 f8e0 	bl	8021194 <mbedtls_x509_crt_parse_der>
        switch( ret )
 801efd4:	4548      	cmp	r0, r9
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801efd6:	4605      	mov	r5, r0
        switch( ret )
 801efd8:	d0b4      	beq.n	801ef44 <mbedtls_ssl_parse_certificate+0x150>
 801efda:	dc04      	bgt.n	801efe6 <mbedtls_ssl_parse_certificate+0x1f2>
 801efdc:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 801efe0:	d007      	beq.n	801eff2 <mbedtls_ssl_parse_certificate+0x1fe>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801efe2:	222a      	movs	r2, #42	; 0x2a
 801efe4:	e006      	b.n	801eff4 <mbedtls_ssl_parse_certificate+0x200>
        switch( ret )
 801efe6:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 801efea:	d00d      	beq.n	801f008 <mbedtls_ssl_parse_certificate+0x214>
 801efec:	2800      	cmp	r0, #0
 801efee:	d0a9      	beq.n	801ef44 <mbedtls_ssl_parse_certificate+0x150>
 801eff0:	e7f7      	b.n	801efe2 <mbedtls_ssl_parse_certificate+0x1ee>
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 801eff2:	2250      	movs	r2, #80	; 0x50
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 801eff4:	2102      	movs	r1, #2
 801eff6:	4620      	mov	r0, r4
 801eff8:	f7fe f962 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801effc:	4b19      	ldr	r3, [pc, #100]	; (801f064 <mbedtls_ssl_parse_certificate+0x270>)
 801effe:	9300      	str	r3, [sp, #0]
 801f000:	9501      	str	r5, [sp, #4]
 801f002:	f241 13a5 	movw	r3, #4517	; 0x11a5
 801f006:	e72c      	b.n	801ee62 <mbedtls_ssl_parse_certificate+0x6e>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f008:	222b      	movs	r2, #43	; 0x2b
 801f00a:	e7f3      	b.n	801eff4 <mbedtls_ssl_parse_certificate+0x200>
            ssl->session_negotiate->peer_cert->raw.len ||
 801f00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if( ssl->session->peer_cert->raw.len !=
 801f00e:	685a      	ldr	r2, [r3, #4]
            ssl->session_negotiate->peer_cert->raw.len ||
 801f010:	6e49      	ldr	r1, [r1, #100]	; 0x64
        if( ssl->session->peer_cert->raw.len !=
 801f012:	6848      	ldr	r0, [r1, #4]
 801f014:	4282      	cmp	r2, r0
 801f016:	d104      	bne.n	801f022 <mbedtls_ssl_parse_certificate+0x22e>
            memcmp( ssl->session->peer_cert->raw.p,
 801f018:	6889      	ldr	r1, [r1, #8]
 801f01a:	6898      	ldr	r0, [r3, #8]
 801f01c:	f003 f954 	bl	80222c8 <memcmp>
            ssl->session_negotiate->peer_cert->raw.len ||
 801f020:	b330      	cbz	r0, 801f070 <mbedtls_ssl_parse_certificate+0x27c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801f022:	4b11      	ldr	r3, [pc, #68]	; (801f068 <mbedtls_ssl_parse_certificate+0x274>)
 801f024:	9300      	str	r3, [sp, #0]
 801f026:	4a02      	ldr	r2, [pc, #8]	; (801f030 <mbedtls_ssl_parse_certificate+0x23c>)
 801f028:	f241 13c4 	movw	r3, #4548	; 0x11c4
 801f02c:	2101      	movs	r1, #1
 801f02e:	e7ab      	b.n	801ef88 <mbedtls_ssl_parse_certificate+0x194>
 801f030:	080318ba 	.word	0x080318ba
 801f034:	08032782 	.word	0x08032782
 801f038:	08032797 	.word	0x08032797
 801f03c:	08030dab 	.word	0x08030dab
 801f040:	080327b1 	.word	0x080327b1
 801f044:	ffff8900 	.word	0xffff8900
 801f048:	ffff8600 	.word	0xffff8600
 801f04c:	200005a4 	.word	0x200005a4
 801f050:	200005a0 	.word	0x200005a0
 801f054:	080325cd 	.word	0x080325cd
 801f058:	ffff8100 	.word	0xffff8100
 801f05c:	080327e5 	.word	0x080327e5
 801f060:	080327f6 	.word	0x080327f6
 801f064:	080327c9 	.word	0x080327c9
 801f068:	0803281b 	.word	0x0803281b
 801f06c:	ffffd9d2 	.word	0xffffd9d2
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 801f070:	2e00      	cmp	r6, #0
 801f072:	f000 80aa 	beq.w	801f1ca <mbedtls_ssl_parse_certificate+0x3d6>
        if( ssl->handshake->sni_ca_chain != NULL )
 801f076:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f078:	f8d3 9148 	ldr.w	r9, [r3, #328]	; 0x148
 801f07c:	f1b9 0f00 	cmp.w	r9, #0
 801f080:	d07e      	beq.n	801f180 <mbedtls_ssl_parse_certificate+0x38c>
            ca_crl   = ssl->handshake->sni_ca_crl;
 801f082:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
        ret = mbedtls_x509_crt_verify_with_profile(
 801f086:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801f08a:	9303      	str	r3, [sp, #12]
                                ssl->session_negotiate->peer_cert,
 801f08c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ret = mbedtls_x509_crt_verify_with_profile(
 801f08e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 801f092:	9302      	str	r3, [sp, #8]
 801f094:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801f098:	9301      	str	r3, [sp, #4]
 801f09a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801f09e:	9300      	str	r3, [sp, #0]
 801f0a0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 801f0a4:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f0a6:	4649      	mov	r1, r9
 801f0a8:	f001 ff28 	bl	8020efc <mbedtls_x509_crt_verify_with_profile>
        if( ret != 0 )
 801f0ac:	4605      	mov	r5, r0
 801f0ae:	b148      	cbz	r0, 801f0c4 <mbedtls_ssl_parse_certificate+0x2d0>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 801f0b0:	4b56      	ldr	r3, [pc, #344]	; (801f20c <mbedtls_ssl_parse_certificate+0x418>)
 801f0b2:	9001      	str	r0, [sp, #4]
 801f0b4:	9300      	str	r3, [sp, #0]
 801f0b6:	4a56      	ldr	r2, [pc, #344]	; (801f210 <mbedtls_ssl_parse_certificate+0x41c>)
 801f0b8:	f241 13eb 	movw	r3, #4587	; 0x11eb
 801f0bc:	2101      	movs	r1, #1
 801f0be:	4620      	mov	r0, r4
 801f0c0:	f7f1 fae6 	bl	8010690 <mbedtls_debug_print_ret>
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
 801f0c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f0c6:	f8d3 8064 	ldr.w	r8, [r3, #100]	; 0x64
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801f0ca:	2102      	movs	r1, #2
 801f0cc:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
 801f0d0:	f7f6 fafc 	bl	80156cc <mbedtls_pk_can_do>
 801f0d4:	b1c0      	cbz	r0, 801f108 <mbedtls_ssl_parse_certificate+0x314>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
 801f0d6:	f8d8 30c0 	ldr.w	r3, [r8, #192]	; 0xc0
 801f0da:	4620      	mov	r0, r4
 801f0dc:	7819      	ldrb	r1, [r3, #0]
 801f0de:	f7ff fe2d 	bl	801ed3c <mbedtls_ssl_check_curve>
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801f0e2:	b188      	cbz	r0, 801f108 <mbedtls_ssl_parse_certificate+0x314>
 801f0e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801f0e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
 801f0e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f0ec:	6693      	str	r3, [r2, #104]	; 0x68
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
 801f0ee:	4b49      	ldr	r3, [pc, #292]	; (801f214 <mbedtls_ssl_parse_certificate+0x420>)
 801f0f0:	9300      	str	r3, [sp, #0]
 801f0f2:	4a47      	ldr	r2, [pc, #284]	; (801f210 <mbedtls_ssl_parse_certificate+0x41c>)
 801f0f4:	f241 13fc 	movw	r3, #4604	; 0x11fc
 801f0f8:	2101      	movs	r1, #1
 801f0fa:	4620      	mov	r0, r4
 801f0fc:	f7f1 fa98 	bl	8010630 <mbedtls_debug_print_msg>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801f100:	4b45      	ldr	r3, [pc, #276]	; (801f218 <mbedtls_ssl_parse_certificate+0x424>)
 801f102:	2d00      	cmp	r5, #0
 801f104:	bf08      	it	eq
 801f106:	461d      	moveq	r5, r3
                                 ! ssl->conf->endpoint,
 801f108:	6823      	ldr	r3, [r4, #0]
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 801f10a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f10c:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801f110:	43d2      	mvns	r2, r2
 801f112:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801f116:	f002 0201 	and.w	r2, r2, #1
 801f11a:	4639      	mov	r1, r7
 801f11c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f11e:	f7ff fe29 	bl	801ed74 <mbedtls_ssl_check_cert_usage>
 801f122:	bb80      	cbnz	r0, 801f186 <mbedtls_ssl_parse_certificate+0x392>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801f124:	2e01      	cmp	r6, #1
 801f126:	d105      	bne.n	801f134 <mbedtls_ssl_parse_certificate+0x340>
 801f128:	f515 5f1c 	cmn.w	r5, #9984	; 0x2700
 801f12c:	d03f      	beq.n	801f1ae <mbedtls_ssl_parse_certificate+0x3ba>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 801f12e:	f515 4ff4 	cmn.w	r5, #31232	; 0x7a00
 801f132:	d03c      	beq.n	801f1ae <mbedtls_ssl_parse_certificate+0x3ba>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f134:	f1b9 0f00 	cmp.w	r9, #0
 801f138:	d137      	bne.n	801f1aa <mbedtls_ssl_parse_certificate+0x3b6>
 801f13a:	2e02      	cmp	r6, #2
 801f13c:	d135      	bne.n	801f1aa <mbedtls_ssl_parse_certificate+0x3b6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f13e:	4b37      	ldr	r3, [pc, #220]	; (801f21c <mbedtls_ssl_parse_certificate+0x428>)
 801f140:	9300      	str	r3, [sp, #0]
 801f142:	4a33      	ldr	r2, [pc, #204]	; (801f210 <mbedtls_ssl_parse_certificate+0x41c>)
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 801f144:	4d36      	ldr	r5, [pc, #216]	; (801f220 <mbedtls_ssl_parse_certificate+0x42c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f146:	f241 231c 	movw	r3, #4636	; 0x121c
 801f14a:	2101      	movs	r1, #1
 801f14c:	4620      	mov	r0, r4
 801f14e:	f7f1 fa6f 	bl	8010630 <mbedtls_debug_print_msg>
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 801f152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f156:	05df      	lsls	r7, r3, #23
 801f158:	d441      	bmi.n	801f1de <mbedtls_ssl_parse_certificate+0x3ea>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 801f15a:	075e      	lsls	r6, r3, #29
 801f15c:	d441      	bmi.n	801f1e2 <mbedtls_ssl_parse_certificate+0x3ee>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 801f15e:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 801f162:	d140      	bne.n	801f1e6 <mbedtls_ssl_parse_certificate+0x3f2>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 801f164:	07d8      	lsls	r0, r3, #31
 801f166:	d440      	bmi.n	801f1ea <mbedtls_ssl_parse_certificate+0x3f6>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 801f168:	0799      	lsls	r1, r3, #30
 801f16a:	d440      	bmi.n	801f1ee <mbedtls_ssl_parse_certificate+0x3fa>
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
 801f16c:	f013 0f08 	tst.w	r3, #8
 801f170:	bf0c      	ite	eq
 801f172:	222e      	moveq	r2, #46	; 0x2e
 801f174:	2230      	movne	r2, #48	; 0x30
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f176:	2102      	movs	r1, #2
 801f178:	4620      	mov	r0, r4
 801f17a:	f7fe f8a1 	bl	801d2c0 <mbedtls_ssl_send_alert_message>
 801f17e:	e017      	b.n	801f1b0 <mbedtls_ssl_parse_certificate+0x3bc>
            ca_crl   = ssl->conf->ca_crl;
 801f180:	e9d8 9211 	ldrd	r9, r2, [r8, #68]	; 0x44
 801f184:	e77f      	b.n	801f086 <mbedtls_ssl_parse_certificate+0x292>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
 801f186:	4b27      	ldr	r3, [pc, #156]	; (801f224 <mbedtls_ssl_parse_certificate+0x430>)
 801f188:	9300      	str	r3, [sp, #0]
 801f18a:	4a21      	ldr	r2, [pc, #132]	; (801f210 <mbedtls_ssl_parse_certificate+0x41c>)
 801f18c:	f241 2308 	movw	r3, #4616	; 0x1208
 801f190:	2101      	movs	r1, #1
 801f192:	4620      	mov	r0, r4
 801f194:	f7f1 fa4c 	bl	8010630 <mbedtls_debug_print_msg>
            if( ret == 0 )
 801f198:	2d00      	cmp	r5, #0
 801f19a:	d1c3      	bne.n	801f124 <mbedtls_ssl_parse_certificate+0x330>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801f19c:	2e01      	cmp	r6, #1
 801f19e:	d006      	beq.n	801f1ae <mbedtls_ssl_parse_certificate+0x3ba>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f1a0:	f1b9 0f00 	cmp.w	r9, #0
 801f1a4:	d02f      	beq.n	801f206 <mbedtls_ssl_parse_certificate+0x412>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801f1a6:	4d1c      	ldr	r5, [pc, #112]	; (801f218 <mbedtls_ssl_parse_certificate+0x424>)
 801f1a8:	e7d3      	b.n	801f152 <mbedtls_ssl_parse_certificate+0x35e>
        if( ret != 0 )
 801f1aa:	2d00      	cmp	r5, #0
 801f1ac:	d1d1      	bne.n	801f152 <mbedtls_ssl_parse_certificate+0x35e>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f1ae:	2500      	movs	r5, #0
        if( ssl->session_negotiate->verify_result != 0 )
 801f1b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f1b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f1b4:	b1eb      	cbz	r3, 801f1f2 <mbedtls_ssl_parse_certificate+0x3fe>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 801f1b6:	9301      	str	r3, [sp, #4]
 801f1b8:	4b1b      	ldr	r3, [pc, #108]	; (801f228 <mbedtls_ssl_parse_certificate+0x434>)
 801f1ba:	9300      	str	r3, [sp, #0]
 801f1bc:	4a14      	ldr	r2, [pc, #80]	; (801f210 <mbedtls_ssl_parse_certificate+0x41c>)
 801f1be:	f241 2343 	movw	r3, #4675	; 0x1243
 801f1c2:	2103      	movs	r1, #3
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	f7f1 fa33 	bl	8010630 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 801f1ca:	4b18      	ldr	r3, [pc, #96]	; (801f22c <mbedtls_ssl_parse_certificate+0x438>)
 801f1cc:	9300      	str	r3, [sp, #0]
 801f1ce:	4a10      	ldr	r2, [pc, #64]	; (801f210 <mbedtls_ssl_parse_certificate+0x41c>)
 801f1d0:	f241 234c 	movw	r3, #4684	; 0x124c
 801f1d4:	2102      	movs	r1, #2
 801f1d6:	4620      	mov	r0, r4
 801f1d8:	f7f1 fa2a 	bl	8010630 <mbedtls_debug_print_msg>
    return( ret );
 801f1dc:	e633      	b.n	801ee46 <mbedtls_ssl_parse_certificate+0x52>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 801f1de:	2231      	movs	r2, #49	; 0x31
 801f1e0:	e7c9      	b.n	801f176 <mbedtls_ssl_parse_certificate+0x382>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801f1e2:	222a      	movs	r2, #42	; 0x2a
 801f1e4:	e7c7      	b.n	801f176 <mbedtls_ssl_parse_certificate+0x382>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f1e6:	222b      	movs	r2, #43	; 0x2b
 801f1e8:	e7c5      	b.n	801f176 <mbedtls_ssl_parse_certificate+0x382>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 801f1ea:	222d      	movs	r2, #45	; 0x2d
 801f1ec:	e7c3      	b.n	801f176 <mbedtls_ssl_parse_certificate+0x382>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 801f1ee:	222c      	movs	r2, #44	; 0x2c
 801f1f0:	e7c1      	b.n	801f176 <mbedtls_ssl_parse_certificate+0x382>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 801f1f2:	4b0f      	ldr	r3, [pc, #60]	; (801f230 <mbedtls_ssl_parse_certificate+0x43c>)
 801f1f4:	9300      	str	r3, [sp, #0]
 801f1f6:	4a06      	ldr	r2, [pc, #24]	; (801f210 <mbedtls_ssl_parse_certificate+0x41c>)
 801f1f8:	f241 2347 	movw	r3, #4679	; 0x1247
 801f1fc:	2103      	movs	r1, #3
 801f1fe:	4620      	mov	r0, r4
 801f200:	f7f1 fa16 	bl	8010630 <mbedtls_debug_print_msg>
 801f204:	e7e1      	b.n	801f1ca <mbedtls_ssl_parse_certificate+0x3d6>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f206:	2e02      	cmp	r6, #2
 801f208:	d1cd      	bne.n	801f1a6 <mbedtls_ssl_parse_certificate+0x3b2>
 801f20a:	e798      	b.n	801f13e <mbedtls_ssl_parse_certificate+0x34a>
 801f20c:	08032844 	.word	0x08032844
 801f210:	080318ba 	.word	0x080318ba
 801f214:	08032855 	.word	0x08032855
 801f218:	ffff8600 	.word	0xffff8600
 801f21c:	08032897 	.word	0x08032897
 801f220:	ffff8980 	.word	0xffff8980
 801f224:	08032874 	.word	0x08032874
 801f228:	080328a7 	.word	0x080328a7
 801f22c:	080328f0 	.word	0x080328f0
 801f230:	080328cb 	.word	0x080328cb

0801f234 <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 801f234:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 801f236:	7059      	strb	r1, [r3, #1]
}
 801f238:	4770      	bx	lr

0801f23a <mbedtls_ssl_read_version>:
        *major = ver[0];
 801f23a:	781a      	ldrb	r2, [r3, #0]
 801f23c:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 801f23e:	785b      	ldrb	r3, [r3, #1]
 801f240:	600b      	str	r3, [r1, #0]
    }
}
 801f242:	4770      	bx	lr

0801f244 <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 801f244:	2300      	movs	r3, #0
{
 801f246:	b570      	push	{r4, r5, r6, lr}
    *res = 0;
 801f248:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 801f24a:	260a      	movs	r6, #10
        if( ( **p < '0') || ( **p > '9' ) )
 801f24c:	6805      	ldr	r5, [r0, #0]
 801f24e:	782b      	ldrb	r3, [r5, #0]
 801f250:	3b30      	subs	r3, #48	; 0x30
 801f252:	2b09      	cmp	r3, #9
 801f254:	d80d      	bhi.n	801f272 <x509_parse_int+0x2e>
        *res *= 10;
 801f256:	6813      	ldr	r3, [r2, #0]
 801f258:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 801f25c:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 801f25e:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 801f260:	6003      	str	r3, [r0, #0]
 801f262:	782b      	ldrb	r3, [r5, #0]
 801f264:	3b30      	subs	r3, #48	; 0x30
 801f266:	4423      	add	r3, r4
    for( ; n > 0; --n )
 801f268:	3901      	subs	r1, #1
        *res += ( *(*p)++ - '0' );
 801f26a:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 801f26c:	d1ee      	bne.n	801f24c <x509_parse_int+0x8>
    }

    return( 0 );
 801f26e:	4608      	mov	r0, r1
}
 801f270:	bd70      	pop	{r4, r5, r6, pc}
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801f272:	4801      	ldr	r0, [pc, #4]	; (801f278 <x509_parse_int+0x34>)
 801f274:	e7fc      	b.n	801f270 <x509_parse_int+0x2c>
 801f276:	bf00      	nop
 801f278:	ffffdc00 	.word	0xffffdc00

0801f27c <x509_check_time>:
/*
 * Return 0 if before <= after, 1 otherwise
 */
static int x509_check_time( const mbedtls_x509_time *before, const mbedtls_x509_time *after )
{
    if( before->year  > after->year )
 801f27c:	6802      	ldr	r2, [r0, #0]
 801f27e:	680b      	ldr	r3, [r1, #0]
 801f280:	429a      	cmp	r2, r3
{
 801f282:	b530      	push	{r4, r5, lr}
    if( before->year  > after->year )
 801f284:	dc29      	bgt.n	801f2da <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f286:	d12a      	bne.n	801f2de <x509_check_time+0x62>
        before->mon   > after->mon )
 801f288:	6842      	ldr	r2, [r0, #4]
 801f28a:	684b      	ldr	r3, [r1, #4]
    if( before->year == after->year &&
 801f28c:	429a      	cmp	r2, r3
 801f28e:	dc24      	bgt.n	801f2da <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f290:	d125      	bne.n	801f2de <x509_check_time+0x62>
        before->mon  == after->mon  &&
 801f292:	6882      	ldr	r2, [r0, #8]
 801f294:	688b      	ldr	r3, [r1, #8]
 801f296:	429a      	cmp	r2, r3
 801f298:	dc1f      	bgt.n	801f2da <x509_check_time+0x5e>
        before->day   > after->day )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f29a:	d103      	bne.n	801f2a4 <x509_check_time+0x28>
        before->day  == after->day  &&
 801f29c:	68c5      	ldr	r5, [r0, #12]
 801f29e:	68cc      	ldr	r4, [r1, #12]
 801f2a0:	42a5      	cmp	r5, r4
 801f2a2:	dc1a      	bgt.n	801f2da <x509_check_time+0x5e>
        before->hour  > after->hour )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f2a4:	429a      	cmp	r2, r3
 801f2a6:	d107      	bne.n	801f2b8 <x509_check_time+0x3c>
        before->day  == after->day  &&
 801f2a8:	68c5      	ldr	r5, [r0, #12]
 801f2aa:	68cc      	ldr	r4, [r1, #12]
 801f2ac:	42a5      	cmp	r5, r4
 801f2ae:	d103      	bne.n	801f2b8 <x509_check_time+0x3c>
        before->hour == after->hour &&
 801f2b0:	6905      	ldr	r5, [r0, #16]
 801f2b2:	690c      	ldr	r4, [r1, #16]
 801f2b4:	42a5      	cmp	r5, r4
 801f2b6:	dc10      	bgt.n	801f2da <x509_check_time+0x5e>
        before->min   > after->min  )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f2b8:	429a      	cmp	r2, r3
 801f2ba:	d110      	bne.n	801f2de <x509_check_time+0x62>
        before->day  == after->day  &&
 801f2bc:	68c2      	ldr	r2, [r0, #12]
 801f2be:	68cb      	ldr	r3, [r1, #12]
 801f2c0:	429a      	cmp	r2, r3
 801f2c2:	d10c      	bne.n	801f2de <x509_check_time+0x62>
        before->hour == after->hour &&
 801f2c4:	6902      	ldr	r2, [r0, #16]
 801f2c6:	690b      	ldr	r3, [r1, #16]
 801f2c8:	429a      	cmp	r2, r3
 801f2ca:	d108      	bne.n	801f2de <x509_check_time+0x62>
        before->min  == after->min  &&
 801f2cc:	6940      	ldr	r0, [r0, #20]
 801f2ce:	694b      	ldr	r3, [r1, #20]
 801f2d0:	4298      	cmp	r0, r3
 801f2d2:	bfd4      	ite	le
 801f2d4:	2000      	movle	r0, #0
 801f2d6:	2001      	movgt	r0, #1
        before->sec   > after->sec  )
        return( 1 );

    return( 0 );
}
 801f2d8:	bd30      	pop	{r4, r5, pc}
        return( 1 );
 801f2da:	2001      	movs	r0, #1
 801f2dc:	e7fc      	b.n	801f2d8 <x509_check_time+0x5c>
    return( 0 );
 801f2de:	2000      	movs	r0, #0
 801f2e0:	e7fa      	b.n	801f2d8 <x509_check_time+0x5c>

0801f2e2 <x509_get_current_time>:
{
 801f2e2:	b513      	push	{r0, r1, r4, lr}
 801f2e4:	4604      	mov	r4, r0
    tt = mbedtls_time( NULL );
 801f2e6:	2000      	movs	r0, #0
 801f2e8:	f7e3 ff90 	bl	800320c <time>
 801f2ec:	ab02      	add	r3, sp, #8
 801f2ee:	e963 0102 	strd	r0, r1, [r3, #-8]!
    lt = gmtime( &tt );
 801f2f2:	4618      	mov	r0, r3
 801f2f4:	f002 feb2 	bl	802205c <gmtime>
    if( lt == NULL )
 801f2f8:	b188      	cbz	r0, 801f31e <x509_get_current_time+0x3c>
        now->year = lt->tm_year + 1900;
 801f2fa:	6943      	ldr	r3, [r0, #20]
 801f2fc:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f300:	6023      	str	r3, [r4, #0]
        now->mon  = lt->tm_mon  + 1;
 801f302:	6903      	ldr	r3, [r0, #16]
 801f304:	3301      	adds	r3, #1
 801f306:	6063      	str	r3, [r4, #4]
        now->day  = lt->tm_mday;
 801f308:	68c3      	ldr	r3, [r0, #12]
 801f30a:	60a3      	str	r3, [r4, #8]
        now->hour = lt->tm_hour;
 801f30c:	6883      	ldr	r3, [r0, #8]
 801f30e:	60e3      	str	r3, [r4, #12]
        now->min  = lt->tm_min;
 801f310:	6843      	ldr	r3, [r0, #4]
 801f312:	6123      	str	r3, [r4, #16]
        now->sec  = lt->tm_sec;
 801f314:	6803      	ldr	r3, [r0, #0]
 801f316:	6163      	str	r3, [r4, #20]
    int ret = 0;
 801f318:	2000      	movs	r0, #0
}
 801f31a:	b002      	add	sp, #8
 801f31c:	bd10      	pop	{r4, pc}
        ret = -1;
 801f31e:	f04f 30ff 	mov.w	r0, #4294967295
    return( ret );
 801f322:	e7fa      	b.n	801f31a <x509_get_current_time+0x38>

0801f324 <mbedtls_x509_get_serial>:
{
 801f324:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 801f326:	6803      	ldr	r3, [r0, #0]
{
 801f328:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f32a:	1aca      	subs	r2, r1, r3
 801f32c:	2a00      	cmp	r2, #0
{
 801f32e:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f330:	dd17      	ble.n	801f362 <mbedtls_x509_get_serial+0x3e>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 801f332:	781a      	ldrb	r2, [r3, #0]
 801f334:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801f338:	2a02      	cmp	r2, #2
 801f33a:	d114      	bne.n	801f366 <mbedtls_x509_get_serial+0x42>
    serial->tag = *(*p)++;
 801f33c:	1c5a      	adds	r2, r3, #1
 801f33e:	6002      	str	r2, [r0, #0]
 801f340:	462a      	mov	r2, r5
 801f342:	781b      	ldrb	r3, [r3, #0]
 801f344:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 801f348:	f7ee fc50 	bl	800dbec <mbedtls_asn1_get_len>
 801f34c:	b110      	cbz	r0, 801f354 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 801f34e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
 801f352:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 801f354:	6823      	ldr	r3, [r4, #0]
 801f356:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 801f358:	6823      	ldr	r3, [r4, #0]
 801f35a:	686a      	ldr	r2, [r5, #4]
 801f35c:	4413      	add	r3, r2
 801f35e:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f360:	e7f7      	b.n	801f352 <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f362:	4802      	ldr	r0, [pc, #8]	; (801f36c <mbedtls_x509_get_serial+0x48>)
 801f364:	e7f5      	b.n	801f352 <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f366:	4802      	ldr	r0, [pc, #8]	; (801f370 <mbedtls_x509_get_serial+0x4c>)
 801f368:	e7f3      	b.n	801f352 <mbedtls_x509_get_serial+0x2e>
 801f36a:	bf00      	nop
 801f36c:	ffffdd20 	.word	0xffffdd20
 801f370:	ffffdd1e 	.word	0xffffdd1e

0801f374 <mbedtls_x509_get_alg_null>:
{
 801f374:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
 801f376:	f7ee fdaf 	bl	800ded8 <mbedtls_asn1_get_alg_null>
 801f37a:	b108      	cbz	r0, 801f380 <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f37c:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f380:	bd08      	pop	{r3, pc}

0801f382 <mbedtls_x509_get_alg>:
{
 801f382:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 801f384:	f7ee fd58 	bl	800de38 <mbedtls_asn1_get_alg>
 801f388:	b108      	cbz	r0, 801f38e <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f38a:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f38e:	bd08      	pop	{r3, pc}

0801f390 <mbedtls_x509_get_rsassa_pss_params>:
{
 801f390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f394:	461d      	mov	r5, r3
    *md_alg = MBEDTLS_MD_SHA1;
 801f396:	2304      	movs	r3, #4
 801f398:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
 801f39a:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
 801f39c:	2314      	movs	r3, #20
 801f39e:	602b      	str	r3, [r5, #0]
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f3a0:	6803      	ldr	r3, [r0, #0]
 801f3a2:	2b30      	cmp	r3, #48	; 0x30
{
 801f3a4:	b08f      	sub	sp, #60	; 0x3c
 801f3a6:	4688      	mov	r8, r1
 801f3a8:	4616      	mov	r6, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f3aa:	d14e      	bne.n	801f44a <mbedtls_x509_get_rsassa_pss_params+0xba>
    p = (unsigned char *) params->p;
 801f3ac:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
 801f3ae:	6844      	ldr	r4, [r0, #4]
    p = (unsigned char *) params->p;
 801f3b0:	9301      	str	r3, [sp, #4]
    end = p + params->len;
 801f3b2:	441c      	add	r4, r3
    if( p == end )
 801f3b4:	42a3      	cmp	r3, r4
 801f3b6:	f000 809b 	beq.w	801f4f0 <mbedtls_x509_get_rsassa_pss_params+0x160>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f3ba:	23a0      	movs	r3, #160	; 0xa0
 801f3bc:	aa02      	add	r2, sp, #8
 801f3be:	4621      	mov	r1, r4
 801f3c0:	a801      	add	r0, sp, #4
 801f3c2:	f7ee fc5a 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f3c6:	b9b8      	cbnz	r0, 801f3f8 <mbedtls_x509_get_rsassa_pss_params+0x68>
        end2 = p + len;
 801f3c8:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f3cc:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
 801f3ce:	aa05      	add	r2, sp, #20
 801f3d0:	4639      	mov	r1, r7
 801f3d2:	a801      	add	r0, sp, #4
 801f3d4:	f7ff ffce 	bl	801f374 <mbedtls_x509_get_alg_null>
 801f3d8:	2800      	cmp	r0, #0
 801f3da:	f040 80a9 	bne.w	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
 801f3de:	4641      	mov	r1, r8
 801f3e0:	a805      	add	r0, sp, #20
 801f3e2:	f7f5 ff27 	bl	8015234 <mbedtls_oid_get_md_alg>
 801f3e6:	b110      	cbz	r0, 801f3ee <mbedtls_x509_get_rsassa_pss_params+0x5e>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f3e8:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
 801f3ec:	e0a0      	b.n	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        if( p != end2 )
 801f3ee:	9b01      	ldr	r3, [sp, #4]
 801f3f0:	42bb      	cmp	r3, r7
 801f3f2:	d004      	beq.n	801f3fe <mbedtls_x509_get_rsassa_pss_params+0x6e>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f3f4:	4859      	ldr	r0, [pc, #356]	; (801f55c <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
 801f3f6:	e09b      	b.n	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f3f8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f3fc:	d1f4      	bne.n	801f3e8 <mbedtls_x509_get_rsassa_pss_params+0x58>
    if( p == end )
 801f3fe:	9b01      	ldr	r3, [sp, #4]
 801f400:	42a3      	cmp	r3, r4
 801f402:	d075      	beq.n	801f4f0 <mbedtls_x509_get_rsassa_pss_params+0x160>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f404:	23a1      	movs	r3, #161	; 0xa1
 801f406:	aa02      	add	r2, sp, #8
 801f408:	4621      	mov	r1, r4
 801f40a:	a801      	add	r0, sp, #4
 801f40c:	f7ee fc35 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f410:	2800      	cmp	r0, #0
 801f412:	f040 8090 	bne.w	801f536 <mbedtls_x509_get_rsassa_pss_params+0x1a6>
        end2 = p + len;
 801f416:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f41a:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
 801f41c:	aa05      	add	r2, sp, #20
 801f41e:	ab08      	add	r3, sp, #32
 801f420:	4639      	mov	r1, r7
 801f422:	a801      	add	r0, sp, #4
 801f424:	f7ff ffad 	bl	801f382 <mbedtls_x509_get_alg>
 801f428:	2800      	cmp	r0, #0
 801f42a:	f040 8081 	bne.w	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
 801f42e:	9a06      	ldr	r2, [sp, #24]
 801f430:	2a09      	cmp	r2, #9
 801f432:	f040 8091 	bne.w	801f558 <mbedtls_x509_get_rsassa_pss_params+0x1c8>
 801f436:	9907      	ldr	r1, [sp, #28]
 801f438:	4849      	ldr	r0, [pc, #292]	; (801f560 <mbedtls_x509_get_rsassa_pss_params+0x1d0>)
 801f43a:	f002 ff45 	bl	80222c8 <memcmp>
 801f43e:	2800      	cmp	r0, #0
 801f440:	f040 808a 	bne.w	801f558 <mbedtls_x509_get_rsassa_pss_params+0x1c8>
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f444:	9b08      	ldr	r3, [sp, #32]
 801f446:	2b30      	cmp	r3, #48	; 0x30
 801f448:	d001      	beq.n	801f44e <mbedtls_x509_get_rsassa_pss_params+0xbe>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f44a:	4846      	ldr	r0, [pc, #280]	; (801f564 <mbedtls_x509_get_rsassa_pss_params+0x1d4>)
 801f44c:	e070      	b.n	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
    p = (unsigned char *) alg->p;
 801f44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
 801f450:	9a09      	ldr	r2, [sp, #36]	; 0x24
    p = (unsigned char *) alg->p;
 801f452:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
 801f454:	eb03 0802 	add.w	r8, r3, r2
    if( p >= end )
 801f458:	4543      	cmp	r3, r8
 801f45a:	d268      	bcs.n	801f52e <mbedtls_x509_get_rsassa_pss_params+0x19e>
    md_oid.tag = *p;
 801f45c:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 801f460:	781b      	ldrb	r3, [r3, #0]
 801f462:	f849 3d0c 	str.w	r3, [r9, #-12]!
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f466:	aa0c      	add	r2, sp, #48	; 0x30
 801f468:	2306      	movs	r3, #6
 801f46a:	4641      	mov	r1, r8
 801f46c:	a803      	add	r0, sp, #12
 801f46e:	f7ee fc04 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f472:	2800      	cmp	r0, #0
 801f474:	d03e      	beq.n	801f4f4 <mbedtls_x509_get_rsassa_pss_params+0x164>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f476:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
 801f47a:	2800      	cmp	r0, #0
 801f47c:	d158      	bne.n	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        if( p != end2 )
 801f47e:	9b01      	ldr	r3, [sp, #4]
 801f480:	42bb      	cmp	r3, r7
 801f482:	d1b7      	bne.n	801f3f4 <mbedtls_x509_get_rsassa_pss_params+0x64>
    if( p == end )
 801f484:	9b01      	ldr	r3, [sp, #4]
 801f486:	42a3      	cmp	r3, r4
 801f488:	d032      	beq.n	801f4f0 <mbedtls_x509_get_rsassa_pss_params+0x160>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f48a:	23a2      	movs	r3, #162	; 0xa2
 801f48c:	aa02      	add	r2, sp, #8
 801f48e:	4621      	mov	r1, r4
 801f490:	a801      	add	r0, sp, #4
 801f492:	f7ee fbf2 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f496:	2800      	cmp	r0, #0
 801f498:	d152      	bne.n	801f540 <mbedtls_x509_get_rsassa_pss_params+0x1b0>
        end2 = p + len;
 801f49a:	e9dd 6301 	ldrd	r6, r3, [sp, #4]
 801f49e:	441e      	add	r6, r3
        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
 801f4a0:	462a      	mov	r2, r5
 801f4a2:	4631      	mov	r1, r6
 801f4a4:	a801      	add	r0, sp, #4
 801f4a6:	f7ee fc14 	bl	800dcd2 <mbedtls_asn1_get_int>
 801f4aa:	2800      	cmp	r0, #0
 801f4ac:	d19c      	bne.n	801f3e8 <mbedtls_x509_get_rsassa_pss_params+0x58>
        if( p != end2 )
 801f4ae:	9b01      	ldr	r3, [sp, #4]
 801f4b0:	42b3      	cmp	r3, r6
 801f4b2:	d19f      	bne.n	801f3f4 <mbedtls_x509_get_rsassa_pss_params+0x64>
    if( p == end )
 801f4b4:	9b01      	ldr	r3, [sp, #4]
 801f4b6:	42a3      	cmp	r3, r4
 801f4b8:	d01a      	beq.n	801f4f0 <mbedtls_x509_get_rsassa_pss_params+0x160>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f4ba:	23a3      	movs	r3, #163	; 0xa3
 801f4bc:	aa02      	add	r2, sp, #8
 801f4be:	4621      	mov	r1, r4
 801f4c0:	a801      	add	r0, sp, #4
 801f4c2:	f7ee fbda 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f4c6:	2800      	cmp	r0, #0
 801f4c8:	d141      	bne.n	801f54e <mbedtls_x509_get_rsassa_pss_params+0x1be>
        end2 = p + len;
 801f4ca:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 801f4ce:	441d      	add	r5, r3
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
 801f4d0:	aa0b      	add	r2, sp, #44	; 0x2c
 801f4d2:	4629      	mov	r1, r5
 801f4d4:	a801      	add	r0, sp, #4
 801f4d6:	f7ee fbfc 	bl	800dcd2 <mbedtls_asn1_get_int>
 801f4da:	2800      	cmp	r0, #0
 801f4dc:	d184      	bne.n	801f3e8 <mbedtls_x509_get_rsassa_pss_params+0x58>
        if( p != end2 )
 801f4de:	9b01      	ldr	r3, [sp, #4]
 801f4e0:	42ab      	cmp	r3, r5
 801f4e2:	d187      	bne.n	801f3f4 <mbedtls_x509_get_rsassa_pss_params+0x64>
        if( trailer_field != 1 )
 801f4e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4e6:	2b01      	cmp	r3, #1
 801f4e8:	d12f      	bne.n	801f54a <mbedtls_x509_get_rsassa_pss_params+0x1ba>
    if( p != end )
 801f4ea:	9b01      	ldr	r3, [sp, #4]
 801f4ec:	42a3      	cmp	r3, r4
 801f4ee:	d181      	bne.n	801f3f4 <mbedtls_x509_get_rsassa_pss_params+0x64>
    return( 0 );
 801f4f0:	2000      	movs	r0, #0
 801f4f2:	e01d      	b.n	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
    md_oid.p = p;
 801f4f4:	9b03      	ldr	r3, [sp, #12]
    p += md_oid.len;
 801f4f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    md_oid.p = p;
 801f4f8:	930d      	str	r3, [sp, #52]	; 0x34
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f4fa:	4631      	mov	r1, r6
    p += md_oid.len;
 801f4fc:	4413      	add	r3, r2
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f4fe:	4648      	mov	r0, r9
    p += md_oid.len;
 801f500:	9303      	str	r3, [sp, #12]
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f502:	f7f5 fe97 	bl	8015234 <mbedtls_oid_get_md_alg>
 801f506:	2800      	cmp	r0, #0
 801f508:	d1b5      	bne.n	801f476 <mbedtls_x509_get_rsassa_pss_params+0xe6>
    if( p == end )
 801f50a:	9b03      	ldr	r3, [sp, #12]
 801f50c:	4598      	cmp	r8, r3
 801f50e:	d0b6      	beq.n	801f47e <mbedtls_x509_get_rsassa_pss_params+0xee>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
 801f510:	2305      	movs	r3, #5
 801f512:	aa04      	add	r2, sp, #16
 801f514:	4641      	mov	r1, r8
 801f516:	a803      	add	r0, sp, #12
 801f518:	f7ee fbaf 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f51c:	2800      	cmp	r0, #0
 801f51e:	d1aa      	bne.n	801f476 <mbedtls_x509_get_rsassa_pss_params+0xe6>
 801f520:	9b04      	ldr	r3, [sp, #16]
 801f522:	2b00      	cmp	r3, #0
 801f524:	d1a7      	bne.n	801f476 <mbedtls_x509_get_rsassa_pss_params+0xe6>
    if( p != end )
 801f526:	9b03      	ldr	r3, [sp, #12]
 801f528:	4598      	cmp	r8, r3
 801f52a:	d0a8      	beq.n	801f47e <mbedtls_x509_get_rsassa_pss_params+0xee>
 801f52c:	e762      	b.n	801f3f4 <mbedtls_x509_get_rsassa_pss_params+0x64>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f52e:	480e      	ldr	r0, [pc, #56]	; (801f568 <mbedtls_x509_get_rsassa_pss_params+0x1d8>)
}
 801f530:	b00f      	add	sp, #60	; 0x3c
 801f532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f536:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f53a:	f47f af55 	bne.w	801f3e8 <mbedtls_x509_get_rsassa_pss_params+0x58>
 801f53e:	e7a1      	b.n	801f484 <mbedtls_x509_get_rsassa_pss_params+0xf4>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f540:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f544:	f47f af50 	bne.w	801f3e8 <mbedtls_x509_get_rsassa_pss_params+0x58>
 801f548:	e7b4      	b.n	801f4b4 <mbedtls_x509_get_rsassa_pss_params+0x124>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f54a:	4808      	ldr	r0, [pc, #32]	; (801f56c <mbedtls_x509_get_rsassa_pss_params+0x1dc>)
 801f54c:	e7f0      	b.n	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f54e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f552:	f47f af49 	bne.w	801f3e8 <mbedtls_x509_get_rsassa_pss_params+0x58>
 801f556:	e7c8      	b.n	801f4ea <mbedtls_x509_get_rsassa_pss_params+0x15a>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
 801f558:	4805      	ldr	r0, [pc, #20]	; (801f570 <mbedtls_x509_get_rsassa_pss_params+0x1e0>)
 801f55a:	e7e9      	b.n	801f530 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
 801f55c:	ffffdc9a 	.word	0xffffdc9a
 801f560:	08032925 	.word	0x08032925
 801f564:	ffffdc9e 	.word	0xffffdc9e
 801f568:	ffffdca0 	.word	0xffffdca0
 801f56c:	ffffdd00 	.word	0xffffdd00
 801f570:	ffffdf52 	.word	0xffffdf52

0801f574 <mbedtls_x509_get_name>:
{
 801f574:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f578:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 801f670 <mbedtls_x509_get_name+0xfc>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f57c:	4f38      	ldr	r7, [pc, #224]	; (801f660 <mbedtls_x509_get_name+0xec>)
{
 801f57e:	4604      	mov	r4, r0
 801f580:	4688      	mov	r8, r1
 801f582:	4692      	mov	sl, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 801f584:	2331      	movs	r3, #49	; 0x31
 801f586:	466a      	mov	r2, sp
 801f588:	4641      	mov	r1, r8
 801f58a:	4620      	mov	r0, r4
 801f58c:	f7ee fb75 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f590:	b120      	cbz	r0, 801f59c <mbedtls_x509_get_name+0x28>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f592:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 801f596:	b002      	add	sp, #8
 801f598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        end_set  = *p + set_len;
 801f59c:	6826      	ldr	r6, [r4, #0]
 801f59e:	9b00      	ldr	r3, [sp, #0]
 801f5a0:	4655      	mov	r5, sl
 801f5a2:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801f5a4:	2330      	movs	r3, #48	; 0x30
 801f5a6:	aa01      	add	r2, sp, #4
 801f5a8:	4631      	mov	r1, r6
 801f5aa:	4620      	mov	r0, r4
 801f5ac:	f7ee fb65 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f5b0:	b188      	cbz	r0, 801f5d6 <mbedtls_x509_get_name+0x62>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f5b2:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 801f5b6:	2800      	cmp	r0, #0
 801f5b8:	d1ed      	bne.n	801f596 <mbedtls_x509_get_name+0x22>
            if( *p == end_set )
 801f5ba:	6823      	ldr	r3, [r4, #0]
 801f5bc:	42b3      	cmp	r3, r6
 801f5be:	d041      	beq.n	801f644 <mbedtls_x509_get_name+0xd0>
            cur->next_merged = 1;
 801f5c0:	2001      	movs	r0, #1
 801f5c2:	7728      	strb	r0, [r5, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f5c4:	683b      	ldr	r3, [r7, #0]
 801f5c6:	2120      	movs	r1, #32
 801f5c8:	4798      	blx	r3
 801f5ca:	61a8      	str	r0, [r5, #24]
            if( cur->next == NULL )
 801f5cc:	4605      	mov	r5, r0
 801f5ce:	2800      	cmp	r0, #0
 801f5d0:	d1e8      	bne.n	801f5a4 <mbedtls_x509_get_name+0x30>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801f5d2:	4824      	ldr	r0, [pc, #144]	; (801f664 <mbedtls_x509_get_name+0xf0>)
 801f5d4:	e7df      	b.n	801f596 <mbedtls_x509_get_name+0x22>
    if( ( end - *p ) < 1 )
 801f5d6:	6823      	ldr	r3, [r4, #0]
 801f5d8:	1af2      	subs	r2, r6, r3
 801f5da:	2a00      	cmp	r2, #0
 801f5dc:	dc01      	bgt.n	801f5e2 <mbedtls_x509_get_name+0x6e>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f5de:	4822      	ldr	r0, [pc, #136]	; (801f668 <mbedtls_x509_get_name+0xf4>)
 801f5e0:	e7d9      	b.n	801f596 <mbedtls_x509_get_name+0x22>
    oid->tag = **p;
 801f5e2:	462a      	mov	r2, r5
 801f5e4:	781b      	ldrb	r3, [r3, #0]
 801f5e6:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f5ea:	4631      	mov	r1, r6
 801f5ec:	2306      	movs	r3, #6
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	f7ee fb43 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f5f4:	2800      	cmp	r0, #0
 801f5f6:	d1dc      	bne.n	801f5b2 <mbedtls_x509_get_name+0x3e>
    oid->p = *p;
 801f5f8:	6823      	ldr	r3, [r4, #0]
 801f5fa:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 801f5fc:	6820      	ldr	r0, [r4, #0]
 801f5fe:	6869      	ldr	r1, [r5, #4]
 801f600:	1843      	adds	r3, r0, r1
    if( ( end - *p ) < 1 )
 801f602:	1af2      	subs	r2, r6, r3
 801f604:	2a00      	cmp	r2, #0
    *p += oid->len;
 801f606:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
 801f608:	dde9      	ble.n	801f5de <mbedtls_x509_get_name+0x6a>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 801f60a:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f60c:	2a1e      	cmp	r2, #30
 801f60e:	d817      	bhi.n	801f640 <mbedtls_x509_get_name+0xcc>
 801f610:	fa29 f202 	lsr.w	r2, r9, r2
 801f614:	07d2      	lsls	r2, r2, #31
 801f616:	d513      	bpl.n	801f640 <mbedtls_x509_get_name+0xcc>
    val->tag = *(*p)++;
 801f618:	3301      	adds	r3, #1
 801f61a:	6023      	str	r3, [r4, #0]
 801f61c:	5c43      	ldrb	r3, [r0, r1]
 801f61e:	60eb      	str	r3, [r5, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 801f620:	f105 0210 	add.w	r2, r5, #16
 801f624:	4631      	mov	r1, r6
 801f626:	4620      	mov	r0, r4
 801f628:	f7ee fae0 	bl	800dbec <mbedtls_asn1_get_len>
 801f62c:	2800      	cmp	r0, #0
 801f62e:	d1c0      	bne.n	801f5b2 <mbedtls_x509_get_name+0x3e>
    val->p = *p;
 801f630:	6823      	ldr	r3, [r4, #0]
 801f632:	616b      	str	r3, [r5, #20]
    *p += val->len;
 801f634:	6823      	ldr	r3, [r4, #0]
 801f636:	692a      	ldr	r2, [r5, #16]
 801f638:	4413      	add	r3, r2
 801f63a:	6023      	str	r3, [r4, #0]
    cur->next = NULL;
 801f63c:	61a8      	str	r0, [r5, #24]
 801f63e:	e7bc      	b.n	801f5ba <mbedtls_x509_get_name+0x46>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f640:	480a      	ldr	r0, [pc, #40]	; (801f66c <mbedtls_x509_get_name+0xf8>)
 801f642:	e7a8      	b.n	801f596 <mbedtls_x509_get_name+0x22>
        if( *p == end )
 801f644:	4546      	cmp	r6, r8
 801f646:	d008      	beq.n	801f65a <mbedtls_x509_get_name+0xe6>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f648:	683b      	ldr	r3, [r7, #0]
 801f64a:	2120      	movs	r1, #32
 801f64c:	2001      	movs	r0, #1
 801f64e:	4798      	blx	r3
 801f650:	4682      	mov	sl, r0
 801f652:	61a8      	str	r0, [r5, #24]
        if( cur->next == NULL )
 801f654:	2800      	cmp	r0, #0
 801f656:	d195      	bne.n	801f584 <mbedtls_x509_get_name+0x10>
 801f658:	e7bb      	b.n	801f5d2 <mbedtls_x509_get_name+0x5e>
            return( 0 );
 801f65a:	2000      	movs	r0, #0
 801f65c:	e79b      	b.n	801f596 <mbedtls_x509_get_name+0x22>
 801f65e:	bf00      	nop
 801f660:	200005a0 	.word	0x200005a0
 801f664:	ffffd780 	.word	0xffffd780
 801f668:	ffffdc20 	.word	0xffffdc20
 801f66c:	ffffdc1e 	.word	0xffffdc1e
 801f670:	50581008 	.word	0x50581008

0801f674 <mbedtls_x509_get_time>:
    if( ( end - *p ) < 1 )
 801f674:	6803      	ldr	r3, [r0, #0]
{
 801f676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f678:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 801f67a:	1aca      	subs	r2, r1, r3
 801f67c:	2a00      	cmp	r2, #0
{
 801f67e:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 801f680:	f340 8094 	ble.w	801f7ac <mbedtls_x509_get_time+0x138>
    tag = **p;
 801f684:	781a      	ldrb	r2, [r3, #0]
    if( tag == MBEDTLS_ASN1_UTC_TIME )
 801f686:	2a17      	cmp	r2, #23
 801f688:	d00e      	beq.n	801f6a8 <mbedtls_x509_get_time+0x34>
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 801f68a:	2a18      	cmp	r2, #24
 801f68c:	f040 8090 	bne.w	801f7b0 <mbedtls_x509_get_time+0x13c>
        year_len = 4;
 801f690:	2704      	movs	r7, #4
    (*p)++;
 801f692:	3301      	adds	r3, #1
 801f694:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801f696:	aa01      	add	r2, sp, #4
 801f698:	4628      	mov	r0, r5
 801f69a:	f7ee faa7 	bl	800dbec <mbedtls_asn1_get_len>
    if( ret != 0 )
 801f69e:	b128      	cbz	r0, 801f6ac <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801f6a0:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
}
 801f6a4:	b003      	add	sp, #12
 801f6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 801f6a8:	2702      	movs	r7, #2
 801f6aa:	e7f2      	b.n	801f692 <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 801f6ac:	9e01      	ldr	r6, [sp, #4]
    if ( len < yearlen + 8 )
 801f6ae:	f107 0308 	add.w	r3, r7, #8
 801f6b2:	429e      	cmp	r6, r3
 801f6b4:	d36f      	bcc.n	801f796 <mbedtls_x509_get_time+0x122>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 801f6b6:	4622      	mov	r2, r4
 801f6b8:	4639      	mov	r1, r7
 801f6ba:	4628      	mov	r0, r5
 801f6bc:	f7ff fdc2 	bl	801f244 <x509_parse_int>
 801f6c0:	2800      	cmp	r0, #0
 801f6c2:	d1ef      	bne.n	801f6a4 <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 801f6c4:	2f02      	cmp	r7, #2
 801f6c6:	d108      	bne.n	801f6da <mbedtls_x509_get_time+0x66>
        if ( tm->year < 50 )
 801f6c8:	6823      	ldr	r3, [r4, #0]
 801f6ca:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 801f6cc:	bfdc      	itt	le
 801f6ce:	3364      	addle	r3, #100	; 0x64
 801f6d0:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 801f6d2:	6823      	ldr	r3, [r4, #0]
 801f6d4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f6d8:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 801f6da:	1d22      	adds	r2, r4, #4
 801f6dc:	2102      	movs	r1, #2
 801f6de:	4628      	mov	r0, r5
 801f6e0:	f7ff fdb0 	bl	801f244 <x509_parse_int>
 801f6e4:	2800      	cmp	r0, #0
 801f6e6:	d1dd      	bne.n	801f6a4 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 801f6e8:	f104 0208 	add.w	r2, r4, #8
 801f6ec:	2102      	movs	r1, #2
 801f6ee:	4628      	mov	r0, r5
 801f6f0:	f7ff fda8 	bl	801f244 <x509_parse_int>
 801f6f4:	2800      	cmp	r0, #0
 801f6f6:	d1d5      	bne.n	801f6a4 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 801f6f8:	f104 020c 	add.w	r2, r4, #12
 801f6fc:	2102      	movs	r1, #2
 801f6fe:	4628      	mov	r0, r5
 801f700:	f7ff fda0 	bl	801f244 <x509_parse_int>
 801f704:	2800      	cmp	r0, #0
 801f706:	d1cd      	bne.n	801f6a4 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 801f708:	f104 0210 	add.w	r2, r4, #16
 801f70c:	2102      	movs	r1, #2
 801f70e:	4628      	mov	r0, r5
 801f710:	f7ff fd98 	bl	801f244 <x509_parse_int>
 801f714:	2800      	cmp	r0, #0
 801f716:	d1c5      	bne.n	801f6a4 <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 801f718:	1bf6      	subs	r6, r6, r7
 801f71a:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 801f71e:	2b01      	cmp	r3, #1
 801f720:	d939      	bls.n	801f796 <mbedtls_x509_get_time+0x122>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 801f722:	f104 0214 	add.w	r2, r4, #20
 801f726:	2102      	movs	r1, #2
 801f728:	4628      	mov	r0, r5
 801f72a:	f7ff fd8b 	bl	801f244 <x509_parse_int>
 801f72e:	2800      	cmp	r0, #0
 801f730:	d1b8      	bne.n	801f6a4 <mbedtls_x509_get_time+0x30>
        len -= 2;
 801f732:	3e0a      	subs	r6, #10
    if ( 1 == len && 'Z' == **p )
 801f734:	2e01      	cmp	r6, #1
 801f736:	d12c      	bne.n	801f792 <mbedtls_x509_get_time+0x11e>
 801f738:	682b      	ldr	r3, [r5, #0]
 801f73a:	781a      	ldrb	r2, [r3, #0]
 801f73c:	2a5a      	cmp	r2, #90	; 0x5a
 801f73e:	d12a      	bne.n	801f796 <mbedtls_x509_get_time+0x122>
        (*p)++;
 801f740:	3301      	adds	r3, #1
 801f742:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 801f744:	6822      	ldr	r2, [r4, #0]
 801f746:	f242 730f 	movw	r3, #9999	; 0x270f
 801f74a:	429a      	cmp	r2, r3
 801f74c:	d823      	bhi.n	801f796 <mbedtls_x509_get_time+0x122>
    CHECK_RANGE( 0, 23,   t->hour );
 801f74e:	68e3      	ldr	r3, [r4, #12]
 801f750:	2b17      	cmp	r3, #23
 801f752:	d820      	bhi.n	801f796 <mbedtls_x509_get_time+0x122>
    CHECK_RANGE( 0, 59,   t->min  );
 801f754:	6923      	ldr	r3, [r4, #16]
 801f756:	2b3b      	cmp	r3, #59	; 0x3b
 801f758:	d81d      	bhi.n	801f796 <mbedtls_x509_get_time+0x122>
    CHECK_RANGE( 0, 59,   t->sec  );
 801f75a:	6963      	ldr	r3, [r4, #20]
 801f75c:	2b3b      	cmp	r3, #59	; 0x3b
 801f75e:	d81a      	bhi.n	801f796 <mbedtls_x509_get_time+0x122>
 801f760:	6861      	ldr	r1, [r4, #4]
 801f762:	290c      	cmp	r1, #12
 801f764:	d817      	bhi.n	801f796 <mbedtls_x509_get_time+0x122>
 801f766:	2301      	movs	r3, #1
 801f768:	408b      	lsls	r3, r1
 801f76a:	f241 51aa 	movw	r1, #5546	; 0x15aa
 801f76e:	420b      	tst	r3, r1
 801f770:	d113      	bne.n	801f79a <mbedtls_x509_get_time+0x126>
 801f772:	f413 6f25 	tst.w	r3, #2640	; 0xa50
 801f776:	d115      	bne.n	801f7a4 <mbedtls_x509_get_time+0x130>
 801f778:	075b      	lsls	r3, r3, #29
 801f77a:	d50c      	bpl.n	801f796 <mbedtls_x509_get_time+0x122>
            CHECK_RANGE( 1, 28 + (t->year % 4 == 0), t->day );
 801f77c:	68a3      	ldr	r3, [r4, #8]
 801f77e:	2b00      	cmp	r3, #0
 801f780:	dd09      	ble.n	801f796 <mbedtls_x509_get_time+0x122>
 801f782:	f012 0f03 	tst.w	r2, #3
 801f786:	bf0c      	ite	eq
 801f788:	221d      	moveq	r2, #29
 801f78a:	221c      	movne	r2, #28
 801f78c:	4293      	cmp	r3, r2
 801f78e:	dd89      	ble.n	801f6a4 <mbedtls_x509_get_time+0x30>
 801f790:	e001      	b.n	801f796 <mbedtls_x509_get_time+0x122>
    if ( 0 != len )
 801f792:	2e00      	cmp	r6, #0
 801f794:	d0d6      	beq.n	801f744 <mbedtls_x509_get_time+0xd0>
            CHECK_RANGE( 1, 28 + (t->year % 4 == 0), t->day );
 801f796:	4807      	ldr	r0, [pc, #28]	; (801f7b4 <mbedtls_x509_get_time+0x140>)
 801f798:	e784      	b.n	801f6a4 <mbedtls_x509_get_time+0x30>
            CHECK_RANGE( 1, 31, t->day );
 801f79a:	68a3      	ldr	r3, [r4, #8]
 801f79c:	3b01      	subs	r3, #1
 801f79e:	2b1e      	cmp	r3, #30
            CHECK_RANGE( 1, 30, t->day );
 801f7a0:	d980      	bls.n	801f6a4 <mbedtls_x509_get_time+0x30>
 801f7a2:	e7f8      	b.n	801f796 <mbedtls_x509_get_time+0x122>
 801f7a4:	68a3      	ldr	r3, [r4, #8]
 801f7a6:	3b01      	subs	r3, #1
 801f7a8:	2b1d      	cmp	r3, #29
 801f7aa:	e7f9      	b.n	801f7a0 <mbedtls_x509_get_time+0x12c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f7ac:	4802      	ldr	r0, [pc, #8]	; (801f7b8 <mbedtls_x509_get_time+0x144>)
 801f7ae:	e779      	b.n	801f6a4 <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f7b0:	4802      	ldr	r0, [pc, #8]	; (801f7bc <mbedtls_x509_get_time+0x148>)
 801f7b2:	e777      	b.n	801f6a4 <mbedtls_x509_get_time+0x30>
 801f7b4:	ffffdc00 	.word	0xffffdc00
 801f7b8:	ffffdba0 	.word	0xffffdba0
 801f7bc:	ffffdb9e 	.word	0xffffdb9e

0801f7c0 <mbedtls_x509_get_sig>:
    if( ( end - *p ) < 1 )
 801f7c0:	6803      	ldr	r3, [r0, #0]
{
 801f7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f7c4:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f7c6:	1aca      	subs	r2, r1, r3
 801f7c8:	2a00      	cmp	r2, #0
{
 801f7ca:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f7cc:	dd11      	ble.n	801f7f2 <mbedtls_x509_get_sig+0x32>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801f7ce:	aa01      	add	r2, sp, #4
    tag_type = **p;
 801f7d0:	781e      	ldrb	r6, [r3, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801f7d2:	f7ee fad8 	bl	800dd86 <mbedtls_asn1_get_bitstring_null>
 801f7d6:	b118      	cbz	r0, 801f7e0 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 801f7d8:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
}
 801f7dc:	b002      	add	sp, #8
 801f7de:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 801f7e0:	6823      	ldr	r3, [r4, #0]
 801f7e2:	60ab      	str	r3, [r5, #8]
    sig->len = len;
 801f7e4:	9a01      	ldr	r2, [sp, #4]
    *p += len;
 801f7e6:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 801f7e8:	602e      	str	r6, [r5, #0]
    *p += len;
 801f7ea:	4413      	add	r3, r2
    sig->len = len;
 801f7ec:	606a      	str	r2, [r5, #4]
    *p += len;
 801f7ee:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f7f0:	e7f4      	b.n	801f7dc <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 801f7f2:	4801      	ldr	r0, [pc, #4]	; (801f7f8 <mbedtls_x509_get_sig+0x38>)
 801f7f4:	e7f2      	b.n	801f7dc <mbedtls_x509_get_sig+0x1c>
 801f7f6:	bf00      	nop
 801f7f8:	ffffdb20 	.word	0xffffdb20

0801f7fc <mbedtls_x509_get_sig_alg>:
{
 801f7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f800:	9f06      	ldr	r7, [sp, #24]
 801f802:	461d      	mov	r5, r3
    if( *sig_opts != NULL )
 801f804:	683b      	ldr	r3, [r7, #0]
{
 801f806:	460e      	mov	r6, r1
 801f808:	4690      	mov	r8, r2
    if( *sig_opts != NULL )
 801f80a:	bb6b      	cbnz	r3, 801f868 <mbedtls_x509_get_sig_alg+0x6c>
    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 801f80c:	462a      	mov	r2, r5
 801f80e:	4641      	mov	r1, r8
 801f810:	f7f5 fccc 	bl	80151ac <mbedtls_oid_get_sig_alg>
 801f814:	4604      	mov	r4, r0
 801f816:	b120      	cbz	r0, 801f822 <mbedtls_x509_get_sig_alg+0x26>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 801f818:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
}
 801f81c:	4620      	mov	r0, r4
 801f81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801f822:	782b      	ldrb	r3, [r5, #0]
 801f824:	2b06      	cmp	r3, #6
 801f826:	d115      	bne.n	801f854 <mbedtls_x509_get_sig_alg+0x58>
        pss_opts = mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
 801f828:	4b12      	ldr	r3, [pc, #72]	; (801f874 <mbedtls_x509_get_sig_alg+0x78>)
 801f82a:	2108      	movs	r1, #8
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	2001      	movs	r0, #1
 801f830:	4798      	blx	r3
        if( pss_opts == NULL )
 801f832:	4605      	mov	r5, r0
 801f834:	b1d0      	cbz	r0, 801f86c <mbedtls_x509_get_sig_alg+0x70>
        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
 801f836:	1d03      	adds	r3, r0, #4
 801f838:	4602      	mov	r2, r0
 801f83a:	4641      	mov	r1, r8
 801f83c:	4630      	mov	r0, r6
 801f83e:	f7ff fda7 	bl	801f390 <mbedtls_x509_get_rsassa_pss_params>
        if( ret != 0 )
 801f842:	4604      	mov	r4, r0
 801f844:	b120      	cbz	r0, 801f850 <mbedtls_x509_get_sig_alg+0x54>
            mbedtls_free( pss_opts );
 801f846:	4b0c      	ldr	r3, [pc, #48]	; (801f878 <mbedtls_x509_get_sig_alg+0x7c>)
 801f848:	4628      	mov	r0, r5
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	4798      	blx	r3
            return( ret );
 801f84e:	e7e5      	b.n	801f81c <mbedtls_x509_get_sig_alg+0x20>
        *sig_opts = (void *) pss_opts;
 801f850:	603d      	str	r5, [r7, #0]
 801f852:	e7e3      	b.n	801f81c <mbedtls_x509_get_sig_alg+0x20>
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801f854:	6833      	ldr	r3, [r6, #0]
 801f856:	2b05      	cmp	r3, #5
 801f858:	d000      	beq.n	801f85c <mbedtls_x509_get_sig_alg+0x60>
 801f85a:	b94b      	cbnz	r3, 801f870 <mbedtls_x509_get_sig_alg+0x74>
 801f85c:	6872      	ldr	r2, [r6, #4]
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f85e:	4b07      	ldr	r3, [pc, #28]	; (801f87c <mbedtls_x509_get_sig_alg+0x80>)
 801f860:	2a00      	cmp	r2, #0
 801f862:	bf18      	it	ne
 801f864:	461c      	movne	r4, r3
 801f866:	e7d9      	b.n	801f81c <mbedtls_x509_get_sig_alg+0x20>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801f868:	4c05      	ldr	r4, [pc, #20]	; (801f880 <mbedtls_x509_get_sig_alg+0x84>)
 801f86a:	e7d7      	b.n	801f81c <mbedtls_x509_get_sig_alg+0x20>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801f86c:	4c05      	ldr	r4, [pc, #20]	; (801f884 <mbedtls_x509_get_sig_alg+0x88>)
 801f86e:	e7d5      	b.n	801f81c <mbedtls_x509_get_sig_alg+0x20>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f870:	4c02      	ldr	r4, [pc, #8]	; (801f87c <mbedtls_x509_get_sig_alg+0x80>)
 801f872:	e7d3      	b.n	801f81c <mbedtls_x509_get_sig_alg+0x20>
 801f874:	200005a0 	.word	0x200005a0
 801f878:	200005a4 	.word	0x200005a4
 801f87c:	ffffdd00 	.word	0xffffdd00
 801f880:	ffffd800 	.word	0xffffd800
 801f884:	ffffd780 	.word	0xffffd780

0801f888 <mbedtls_x509_get_ext>:
{
 801f888:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f88a:	4616      	mov	r6, r2
    if( *p == end )
 801f88c:	6802      	ldr	r2, [r0, #0]
 801f88e:	428a      	cmp	r2, r1
{
 801f890:	4604      	mov	r4, r0
    if( *p == end )
 801f892:	d01d      	beq.n	801f8d0 <mbedtls_x509_get_ext+0x48>
    ext->tag = **p;
 801f894:	7815      	ldrb	r5, [r2, #0]
 801f896:	4632      	mov	r2, r6
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801f898:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 801f89c:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801f8a0:	f7ee f9eb 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f8a4:	b968      	cbnz	r0, 801f8c2 <mbedtls_x509_get_ext+0x3a>
    ext->p = *p;
 801f8a6:	6823      	ldr	r3, [r4, #0]
 801f8a8:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 801f8aa:	6825      	ldr	r5, [r4, #0]
 801f8ac:	6873      	ldr	r3, [r6, #4]
 801f8ae:	441d      	add	r5, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801f8b0:	aa01      	add	r2, sp, #4
 801f8b2:	2330      	movs	r3, #48	; 0x30
 801f8b4:	4629      	mov	r1, r5
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	f7ee f9df 	bl	800dc7a <mbedtls_asn1_get_tag>
 801f8bc:	b118      	cbz	r0, 801f8c6 <mbedtls_x509_get_ext+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801f8be:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
}
 801f8c2:	b002      	add	sp, #8
 801f8c4:	bd70      	pop	{r4, r5, r6, pc}
    if( end != *p + len )
 801f8c6:	6823      	ldr	r3, [r4, #0]
 801f8c8:	9a01      	ldr	r2, [sp, #4]
 801f8ca:	4413      	add	r3, r2
 801f8cc:	429d      	cmp	r5, r3
 801f8ce:	d101      	bne.n	801f8d4 <mbedtls_x509_get_ext+0x4c>
    return( 0 );
 801f8d0:	2000      	movs	r0, #0
 801f8d2:	e7f6      	b.n	801f8c2 <mbedtls_x509_get_ext+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801f8d4:	4800      	ldr	r0, [pc, #0]	; (801f8d8 <mbedtls_x509_get_ext+0x50>)
 801f8d6:	e7f4      	b.n	801f8c2 <mbedtls_x509_get_ext+0x3a>
 801f8d8:	ffffda9a 	.word	0xffffda9a

0801f8dc <mbedtls_x509_dn_gets>:
{
 801f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e0:	b0c3      	sub	sp, #268	; 0x10c
    const char *short_name = NULL;
 801f8e2:	f04f 0a00 	mov.w	sl, #0
    memset( s, 0, sizeof( s ) );
 801f8e6:	f10d 0808 	add.w	r8, sp, #8
{
 801f8ea:	460f      	mov	r7, r1
 801f8ec:	4691      	mov	r9, r2
    memset( s, 0, sizeof( s ) );
 801f8ee:	4651      	mov	r1, sl
 801f8f0:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 801f8f4:	4606      	mov	r6, r0
    memset( s, 0, sizeof( s ) );
 801f8f6:	4640      	mov	r0, r8
    const char *short_name = NULL;
 801f8f8:	f8cd a004 	str.w	sl, [sp, #4]
    memset( s, 0, sizeof( s ) );
 801f8fc:	f002 fd17 	bl	802232e <memset>
    unsigned char c, merge = 0;
 801f900:	4652      	mov	r2, sl
        ret = mbedtls_snprintf( p, n, "%s", s );
 801f902:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 801f9e0 <mbedtls_x509_dn_gets+0x104>
    name = dn;
 801f906:	464d      	mov	r5, r9
    n = size;
 801f908:	463c      	mov	r4, r7
                 s[i] = '?';
 801f90a:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
    while( name != NULL )
 801f90e:	b90d      	cbnz	r5, 801f914 <mbedtls_x509_dn_gets+0x38>
    return( (int) ( size - n ) );
 801f910:	1b38      	subs	r0, r7, r4
 801f912:	e012      	b.n	801f93a <mbedtls_x509_dn_gets+0x5e>
        if( !name->oid.p )
 801f914:	68ab      	ldr	r3, [r5, #8]
 801f916:	b90b      	cbnz	r3, 801f91c <mbedtls_x509_dn_gets+0x40>
        name = name->next;
 801f918:	69ad      	ldr	r5, [r5, #24]
 801f91a:	e7f8      	b.n	801f90e <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 801f91c:	454d      	cmp	r5, r9
 801f91e:	d013      	beq.n	801f948 <mbedtls_x509_dn_gets+0x6c>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 801f920:	492a      	ldr	r1, [pc, #168]	; (801f9cc <mbedtls_x509_dn_gets+0xf0>)
 801f922:	4b2b      	ldr	r3, [pc, #172]	; (801f9d0 <mbedtls_x509_dn_gets+0xf4>)
 801f924:	4630      	mov	r0, r6
 801f926:	2a00      	cmp	r2, #0
 801f928:	bf14      	ite	ne
 801f92a:	460a      	movne	r2, r1
 801f92c:	461a      	moveq	r2, r3
 801f92e:	4621      	mov	r1, r4
 801f930:	f003 feb8 	bl	80236a4 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 801f934:	2800      	cmp	r0, #0
 801f936:	da03      	bge.n	801f940 <mbedtls_x509_dn_gets+0x64>
 801f938:	4826      	ldr	r0, [pc, #152]	; (801f9d4 <mbedtls_x509_dn_gets+0xf8>)
}
 801f93a:	b043      	add	sp, #268	; 0x10c
 801f93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 801f940:	42a0      	cmp	r0, r4
 801f942:	d2f9      	bcs.n	801f938 <mbedtls_x509_dn_gets+0x5c>
 801f944:	1a24      	subs	r4, r4, r0
 801f946:	4406      	add	r6, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 801f948:	a901      	add	r1, sp, #4
 801f94a:	4628      	mov	r0, r5
 801f94c:	f7f5 fbd4 	bl	80150f8 <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 801f950:	bb00      	cbnz	r0, 801f994 <mbedtls_x509_dn_gets+0xb8>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801f952:	9b01      	ldr	r3, [sp, #4]
 801f954:	4a20      	ldr	r2, [pc, #128]	; (801f9d8 <mbedtls_x509_dn_gets+0xfc>)
 801f956:	4621      	mov	r1, r4
 801f958:	4630      	mov	r0, r6
 801f95a:	f003 fea3 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f95e:	2800      	cmp	r0, #0
 801f960:	dbea      	blt.n	801f938 <mbedtls_x509_dn_gets+0x5c>
 801f962:	42a0      	cmp	r0, r4
 801f964:	d2e8      	bcs.n	801f938 <mbedtls_x509_dn_gets+0x5c>
 801f966:	1a24      	subs	r4, r4, r0
 801f968:	4406      	add	r6, r0
        for( i = 0; i < name->val.len; i++ )
 801f96a:	2300      	movs	r3, #0
 801f96c:	692a      	ldr	r2, [r5, #16]
 801f96e:	429a      	cmp	r2, r3
 801f970:	d817      	bhi.n	801f9a2 <mbedtls_x509_dn_gets+0xc6>
        s[i] = '\0';
 801f972:	2200      	movs	r2, #0
 801f974:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 801f978:	4621      	mov	r1, r4
 801f97a:	4643      	mov	r3, r8
 801f97c:	4652      	mov	r2, sl
 801f97e:	4630      	mov	r0, r6
 801f980:	f003 fe90 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f984:	2800      	cmp	r0, #0
 801f986:	dbd7      	blt.n	801f938 <mbedtls_x509_dn_gets+0x5c>
 801f988:	42a0      	cmp	r0, r4
 801f98a:	d2d5      	bcs.n	801f938 <mbedtls_x509_dn_gets+0x5c>
 801f98c:	1a24      	subs	r4, r4, r0
 801f98e:	4406      	add	r6, r0
        merge = name->next_merged;
 801f990:	7f2a      	ldrb	r2, [r5, #28]
 801f992:	e7c1      	b.n	801f918 <mbedtls_x509_dn_gets+0x3c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801f994:	4a11      	ldr	r2, [pc, #68]	; (801f9dc <mbedtls_x509_dn_gets+0x100>)
 801f996:	4621      	mov	r1, r4
 801f998:	4630      	mov	r0, r6
 801f99a:	f003 fe83 	bl	80236a4 <sniprintf>
 801f99e:	2003      	movs	r0, #3
 801f9a0:	e7df      	b.n	801f962 <mbedtls_x509_dn_gets+0x86>
            if( i >= sizeof( s ) - 1 )
 801f9a2:	2bff      	cmp	r3, #255	; 0xff
 801f9a4:	d0e5      	beq.n	801f972 <mbedtls_x509_dn_gets+0x96>
            c = name->val.p[i];
 801f9a6:	696a      	ldr	r2, [r5, #20]
 801f9a8:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 801f9aa:	2a1f      	cmp	r2, #31
 801f9ac:	d906      	bls.n	801f9bc <mbedtls_x509_dn_gets+0xe0>
 801f9ae:	2a7f      	cmp	r2, #127	; 0x7f
 801f9b0:	d004      	beq.n	801f9bc <mbedtls_x509_dn_gets+0xe0>
 801f9b2:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 801f9b6:	b2c9      	uxtb	r1, r1
 801f9b8:	291e      	cmp	r1, #30
 801f9ba:	d803      	bhi.n	801f9c4 <mbedtls_x509_dn_gets+0xe8>
                 s[i] = '?';
 801f9bc:	f808 b003 	strb.w	fp, [r8, r3]
        for( i = 0; i < name->val.len; i++ )
 801f9c0:	3301      	adds	r3, #1
 801f9c2:	e7d3      	b.n	801f96c <mbedtls_x509_dn_gets+0x90>
            else s[i] = c;
 801f9c4:	f808 2003 	strb.w	r2, [r8, r3]
 801f9c8:	e7fa      	b.n	801f9c0 <mbedtls_x509_dn_gets+0xe4>
 801f9ca:	bf00      	nop
 801f9cc:	0803292f 	.word	0x0803292f
 801f9d0:	08032933 	.word	0x08032933
 801f9d4:	ffffd680 	.word	0xffffd680
 801f9d8:	08032936 	.word	0x08032936
 801f9dc:	0803293a 	.word	0x0803293a
 801f9e0:	08030fee 	.word	0x08030fee

0801f9e4 <mbedtls_x509_serial_gets>:
{
 801f9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    nr = ( serial->len <= 32 )
 801f9e8:	6856      	ldr	r6, [r2, #4]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801f9ea:	f8df a07c 	ldr.w	sl, [pc, #124]	; 801fa68 <mbedtls_x509_serial_gets+0x84>
 801f9ee:	f8df b07c 	ldr.w	fp, [pc, #124]	; 801fa6c <mbedtls_x509_serial_gets+0x88>
        ? serial->len  : 28;
 801f9f2:	2e21      	cmp	r6, #33	; 0x21
{
 801f9f4:	4680      	mov	r8, r0
 801f9f6:	460f      	mov	r7, r1
 801f9f8:	4691      	mov	r9, r2
        ? serial->len  : 28;
 801f9fa:	bf28      	it	cs
 801f9fc:	261c      	movcs	r6, #28
    n = size;
 801f9fe:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
 801fa00:	2500      	movs	r5, #0
 801fa02:	42b5      	cmp	r5, r6
 801fa04:	d10d      	bne.n	801fa22 <mbedtls_x509_serial_gets+0x3e>
    if( nr != serial->len )
 801fa06:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fa0a:	42ab      	cmp	r3, r5
 801fa0c:	d007      	beq.n	801fa1e <mbedtls_x509_serial_gets+0x3a>
        ret = mbedtls_snprintf( p, n, "...." );
 801fa0e:	4a13      	ldr	r2, [pc, #76]	; (801fa5c <mbedtls_x509_serial_gets+0x78>)
 801fa10:	4621      	mov	r1, r4
 801fa12:	4640      	mov	r0, r8
 801fa14:	f003 fe46 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fa18:	2c04      	cmp	r4, #4
 801fa1a:	d917      	bls.n	801fa4c <mbedtls_x509_serial_gets+0x68>
 801fa1c:	3c04      	subs	r4, #4
    return( (int) ( size - n ) );
 801fa1e:	1b38      	subs	r0, r7, r4
 801fa20:	e015      	b.n	801fa4e <mbedtls_x509_serial_gets+0x6a>
 801fa22:	f8d9 3008 	ldr.w	r3, [r9, #8]
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 801fa26:	b91d      	cbnz	r5, 801fa30 <mbedtls_x509_serial_gets+0x4c>
 801fa28:	2e01      	cmp	r6, #1
 801fa2a:	d001      	beq.n	801fa30 <mbedtls_x509_serial_gets+0x4c>
 801fa2c:	781a      	ldrb	r2, [r3, #0]
 801fa2e:	b19a      	cbz	r2, 801fa58 <mbedtls_x509_serial_gets+0x74>
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fa30:	490b      	ldr	r1, [pc, #44]	; (801fa60 <mbedtls_x509_serial_gets+0x7c>)
 801fa32:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801fa34:	1e72      	subs	r2, r6, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fa36:	42aa      	cmp	r2, r5
 801fa38:	bf88      	it	hi
 801fa3a:	4651      	movhi	r1, sl
 801fa3c:	9100      	str	r1, [sp, #0]
 801fa3e:	465a      	mov	r2, fp
 801fa40:	4621      	mov	r1, r4
 801fa42:	4640      	mov	r0, r8
 801fa44:	f003 fe2e 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fa48:	42a0      	cmp	r0, r4
 801fa4a:	d303      	bcc.n	801fa54 <mbedtls_x509_serial_gets+0x70>
 801fa4c:	4805      	ldr	r0, [pc, #20]	; (801fa64 <mbedtls_x509_serial_gets+0x80>)
}
 801fa4e:	b003      	add	sp, #12
 801fa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fa54:	1a24      	subs	r4, r4, r0
 801fa56:	4480      	add	r8, r0
    for( i = 0; i < nr; i++ )
 801fa58:	3501      	adds	r5, #1
 801fa5a:	e7d2      	b.n	801fa02 <mbedtls_x509_serial_gets+0x1e>
 801fa5c:	0802d830 	.word	0x0802d830
 801fa60:	0802fdc9 	.word	0x0802fdc9
 801fa64:	ffffd680 	.word	0xffffd680
 801fa68:	0802f76d 	.word	0x0802f76d
 801fa6c:	0803293e 	.word	0x0803293e

0801fa70 <mbedtls_x509_sig_alg_gets>:
{
 801fa70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fa74:	460c      	mov	r4, r1
    const char *desc = NULL;
 801fa76:	a904      	add	r1, sp, #16
{
 801fa78:	4698      	mov	r8, r3
    const char *desc = NULL;
 801fa7a:	2300      	movs	r3, #0
{
 801fa7c:	4607      	mov	r7, r0
    const char *desc = NULL;
 801fa7e:	f841 3d04 	str.w	r3, [r1, #-4]!
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fa82:	4610      	mov	r0, r2
{
 801fa84:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fa88:	f7f5 fb84 	bl	8015194 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 801fa8c:	b3a0      	cbz	r0, 801faf8 <mbedtls_x509_sig_alg_gets+0x88>
        ret = mbedtls_snprintf( p, n, "???"  );
 801fa8e:	4a23      	ldr	r2, [pc, #140]	; (801fb1c <mbedtls_x509_sig_alg_gets+0xac>)
 801fa90:	4621      	mov	r1, r4
 801fa92:	4638      	mov	r0, r7
 801fa94:	f003 fe06 	bl	80236a4 <sniprintf>
 801fa98:	2603      	movs	r6, #3
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fa9a:	42a6      	cmp	r6, r4
 801fa9c:	d234      	bcs.n	801fb08 <mbedtls_x509_sig_alg_gets+0x98>
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801fa9e:	f1b8 0f06 	cmp.w	r8, #6
    MBEDTLS_X509_SAFE_SNPRINTF;
 801faa2:	eba4 0506 	sub.w	r5, r4, r6
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801faa6:	d125      	bne.n	801faf4 <mbedtls_x509_sig_alg_gets+0x84>
        md_info = mbedtls_md_info_from_type( md_alg );
 801faa8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801faac:	f7f4 fce6 	bl	801447c <mbedtls_md_info_from_type>
 801fab0:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
 801fab2:	f899 0000 	ldrb.w	r0, [r9]
 801fab6:	f7f4 fce1 	bl	801447c <mbedtls_md_info_from_type>
 801faba:	4682      	mov	sl, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fabc:	f1b8 0f00 	cmp.w	r8, #0
 801fac0:	d026      	beq.n	801fb10 <mbedtls_x509_sig_alg_gets+0xa0>
 801fac2:	4640      	mov	r0, r8
 801fac4:	f7f4 fe2d 	bl	8014722 <mbedtls_md_get_name>
 801fac8:	4680      	mov	r8, r0
 801faca:	f1ba 0f00 	cmp.w	sl, #0
 801face:	d022      	beq.n	801fb16 <mbedtls_x509_sig_alg_gets+0xa6>
 801fad0:	4650      	mov	r0, sl
 801fad2:	f7f4 fe26 	bl	8014722 <mbedtls_md_get_name>
 801fad6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fada:	4a11      	ldr	r2, [pc, #68]	; (801fb20 <mbedtls_x509_sig_alg_gets+0xb0>)
 801fadc:	e9cd 0300 	strd	r0, r3, [sp]
 801fae0:	4629      	mov	r1, r5
 801fae2:	4643      	mov	r3, r8
 801fae4:	19b8      	adds	r0, r7, r6
 801fae6:	f003 fddd 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801faea:	2800      	cmp	r0, #0
 801faec:	db0c      	blt.n	801fb08 <mbedtls_x509_sig_alg_gets+0x98>
 801faee:	42a8      	cmp	r0, r5
 801faf0:	d20a      	bcs.n	801fb08 <mbedtls_x509_sig_alg_gets+0x98>
 801faf2:	1a2d      	subs	r5, r5, r0
    return( (int)( size - n ) );
 801faf4:	1b60      	subs	r0, r4, r5
 801faf6:	e008      	b.n	801fb0a <mbedtls_x509_sig_alg_gets+0x9a>
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801faf8:	9b03      	ldr	r3, [sp, #12]
 801fafa:	4a0a      	ldr	r2, [pc, #40]	; (801fb24 <mbedtls_x509_sig_alg_gets+0xb4>)
 801fafc:	4621      	mov	r1, r4
 801fafe:	4638      	mov	r0, r7
 801fb00:	f003 fdd0 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fb04:	1e06      	subs	r6, r0, #0
 801fb06:	dac8      	bge.n	801fa9a <mbedtls_x509_sig_alg_gets+0x2a>
 801fb08:	4807      	ldr	r0, [pc, #28]	; (801fb28 <mbedtls_x509_sig_alg_gets+0xb8>)
}
 801fb0a:	b004      	add	sp, #16
 801fb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fb10:	f8df 8008 	ldr.w	r8, [pc, #8]	; 801fb1c <mbedtls_x509_sig_alg_gets+0xac>
 801fb14:	e7d9      	b.n	801faca <mbedtls_x509_sig_alg_gets+0x5a>
 801fb16:	4801      	ldr	r0, [pc, #4]	; (801fb1c <mbedtls_x509_sig_alg_gets+0xac>)
 801fb18:	e7dd      	b.n	801fad6 <mbedtls_x509_sig_alg_gets+0x66>
 801fb1a:	bf00      	nop
 801fb1c:	08032945 	.word	0x08032945
 801fb20:	08032949 	.word	0x08032949
 801fb24:	08030fee 	.word	0x08030fee
 801fb28:	ffffd680 	.word	0xffffd680

0801fb2c <mbedtls_x509_key_size_helper>:
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fb2c:	4613      	mov	r3, r2
{
 801fb2e:	b510      	push	{r4, lr}
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fb30:	4a05      	ldr	r2, [pc, #20]	; (801fb48 <mbedtls_x509_key_size_helper+0x1c>)
{
 801fb32:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fb34:	f003 fdb6 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fb38:	1e03      	subs	r3, r0, #0
 801fb3a:	4804      	ldr	r0, [pc, #16]	; (801fb4c <mbedtls_x509_key_size_helper+0x20>)
 801fb3c:	db02      	blt.n	801fb44 <mbedtls_x509_key_size_helper+0x18>
    return( 0 );
 801fb3e:	42a3      	cmp	r3, r4
 801fb40:	bf38      	it	cc
 801fb42:	2000      	movcc	r0, #0
}
 801fb44:	bd10      	pop	{r4, pc}
 801fb46:	bf00      	nop
 801fb48:	08032960 	.word	0x08032960
 801fb4c:	ffffd680 	.word	0xffffd680

0801fb50 <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
 801fb50:	b510      	push	{r4, lr}
 801fb52:	b086      	sub	sp, #24
 801fb54:	4604      	mov	r4, r0
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fb56:	4668      	mov	r0, sp
 801fb58:	f7ff fbc3 	bl	801f2e2 <x509_get_current_time>
 801fb5c:	b928      	cbnz	r0, 801fb6a <mbedtls_x509_time_is_past+0x1a>
        return( 1 );

    return( x509_check_time( &now, to ) );
 801fb5e:	4621      	mov	r1, r4
 801fb60:	4668      	mov	r0, sp
 801fb62:	f7ff fb8b 	bl	801f27c <x509_check_time>
}
 801fb66:	b006      	add	sp, #24
 801fb68:	bd10      	pop	{r4, pc}
        return( 1 );
 801fb6a:	2001      	movs	r0, #1
 801fb6c:	e7fb      	b.n	801fb66 <mbedtls_x509_time_is_past+0x16>

0801fb6e <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
 801fb6e:	b510      	push	{r4, lr}
 801fb70:	b086      	sub	sp, #24
 801fb72:	4604      	mov	r4, r0
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fb74:	4668      	mov	r0, sp
 801fb76:	f7ff fbb4 	bl	801f2e2 <x509_get_current_time>
 801fb7a:	b928      	cbnz	r0, 801fb88 <mbedtls_x509_time_is_future+0x1a>
        return( 1 );

    return( x509_check_time( from, &now ) );
 801fb7c:	4669      	mov	r1, sp
 801fb7e:	4620      	mov	r0, r4
 801fb80:	f7ff fb7c 	bl	801f27c <x509_check_time>
}
 801fb84:	b006      	add	sp, #24
 801fb86:	bd10      	pop	{r4, pc}
        return( 1 );
 801fb88:	2001      	movs	r0, #1
 801fb8a:	e7fb      	b.n	801fb84 <mbedtls_x509_time_is_future+0x16>

0801fb8c <mbedtls_x509_crl_init>:
/*
 * Initialize a CRL chain
 */
void mbedtls_x509_crl_init( mbedtls_x509_crl *crl )
{
    memset( crl, 0, sizeof(mbedtls_x509_crl) );
 801fb8c:	22f4      	movs	r2, #244	; 0xf4
 801fb8e:	2100      	movs	r1, #0
 801fb90:	f002 bbcd 	b.w	802232e <memset>

0801fb94 <mbedtls_x509_crl_free>:

/*
 * Unallocate all CRL data
 */
void mbedtls_x509_crl_free( mbedtls_x509_crl *crl )
{
 801fb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_crl_entry *entry_cur;
    mbedtls_x509_crl_entry *entry_prv;

    if( crl == NULL )
 801fb98:	4605      	mov	r5, r0
 801fb9a:	b350      	cbz	r0, 801fbf2 <mbedtls_x509_crl_free+0x5e>
        return;

    do
    {
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( crl_cur->sig_opts );
 801fb9c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801fc3c <mbedtls_x509_crl_free+0xa8>
 801fba0:	4604      	mov	r4, r0
 801fba2:	4646      	mov	r6, r8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fba4:	2700      	movs	r7, #0
        mbedtls_free( crl_cur->sig_opts );
 801fba6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801fbaa:	f8d8 3000 	ldr.w	r3, [r8]
 801fbae:	4798      	blx	r3
#endif

        name_cur = crl_cur->issuer.next;
 801fbb0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        while( name_cur != NULL )
 801fbb2:	bb00      	cbnz	r0, 801fbf6 <mbedtls_x509_crl_free+0x62>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        entry_cur = crl_cur->entry.next;
 801fbb4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
        while( entry_cur != NULL )
 801fbb8:	bb58      	cbnz	r0, 801fc12 <mbedtls_x509_crl_free+0x7e>
            entry_cur = entry_cur->next;
            mbedtls_zeroize( entry_prv, sizeof( mbedtls_x509_crl_entry ) );
            mbedtls_free( entry_prv );
        }

        if( crl_cur->raw.p != NULL )
 801fbba:	68a3      	ldr	r3, [r4, #8]
 801fbbc:	b133      	cbz	r3, 801fbcc <mbedtls_x509_crl_free+0x38>
 801fbbe:	6862      	ldr	r2, [r4, #4]
 801fbc0:	441a      	add	r2, r3
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fbc2:	4293      	cmp	r3, r2
 801fbc4:	d133      	bne.n	801fc2e <mbedtls_x509_crl_free+0x9a>
        {
            mbedtls_zeroize( crl_cur->raw.p, crl_cur->raw.len );
            mbedtls_free( crl_cur->raw.p );
 801fbc6:	6833      	ldr	r3, [r6, #0]
 801fbc8:	68a0      	ldr	r0, [r4, #8]
 801fbca:	4798      	blx	r3
        }

        crl_cur = crl_cur->next;
 801fbcc:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
    }
    while( crl_cur != NULL );
 801fbd0:	2c00      	cmp	r4, #0
 801fbd2:	d1e8      	bne.n	801fba6 <mbedtls_x509_crl_free+0x12>
 801fbd4:	4628      	mov	r0, r5

    crl_cur = crl;
    do
    {
        crl_prv = crl_cur;
        crl_cur = crl_cur->next;
 801fbd6:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
 801fbda:	f100 02f4 	add.w	r2, r0, #244	; 0xf4
 801fbde:	4603      	mov	r3, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fbe0:	4293      	cmp	r3, r2
 801fbe2:	d127      	bne.n	801fc34 <mbedtls_x509_crl_free+0xa0>

        mbedtls_zeroize( crl_prv, sizeof( mbedtls_x509_crl ) );
        if( crl_prv != crl )
 801fbe4:	4285      	cmp	r5, r0
 801fbe6:	d001      	beq.n	801fbec <mbedtls_x509_crl_free+0x58>
            mbedtls_free( crl_prv );
 801fbe8:	6833      	ldr	r3, [r6, #0]
 801fbea:	4798      	blx	r3
    }
    while( crl_cur != NULL );
 801fbec:	4638      	mov	r0, r7
 801fbee:	2f00      	cmp	r7, #0
 801fbf0:	d1f1      	bne.n	801fbd6 <mbedtls_x509_crl_free+0x42>
}
 801fbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            name_cur = name_cur->next;
 801fbf6:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801fbfa:	f100 0220 	add.w	r2, r0, #32
 801fbfe:	4603      	mov	r3, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fc00:	4293      	cmp	r3, r2
 801fc02:	d103      	bne.n	801fc0c <mbedtls_x509_crl_free+0x78>
            mbedtls_free( name_prv );
 801fc04:	6833      	ldr	r3, [r6, #0]
 801fc06:	4798      	blx	r3
            name_cur = name_cur->next;
 801fc08:	4648      	mov	r0, r9
 801fc0a:	e7d2      	b.n	801fbb2 <mbedtls_x509_crl_free+0x1e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fc0c:	701f      	strb	r7, [r3, #0]
 801fc0e:	3301      	adds	r3, #1
 801fc10:	e7f6      	b.n	801fc00 <mbedtls_x509_crl_free+0x6c>
            entry_cur = entry_cur->next;
 801fc12:	f8d0 903c 	ldr.w	r9, [r0, #60]	; 0x3c
 801fc16:	f100 0240 	add.w	r2, r0, #64	; 0x40
 801fc1a:	4603      	mov	r3, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fc1c:	4293      	cmp	r3, r2
 801fc1e:	d103      	bne.n	801fc28 <mbedtls_x509_crl_free+0x94>
            mbedtls_free( entry_prv );
 801fc20:	6833      	ldr	r3, [r6, #0]
 801fc22:	4798      	blx	r3
            entry_cur = entry_cur->next;
 801fc24:	4648      	mov	r0, r9
 801fc26:	e7c7      	b.n	801fbb8 <mbedtls_x509_crl_free+0x24>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fc28:	701f      	strb	r7, [r3, #0]
 801fc2a:	3301      	adds	r3, #1
 801fc2c:	e7f6      	b.n	801fc1c <mbedtls_x509_crl_free+0x88>
 801fc2e:	701f      	strb	r7, [r3, #0]
 801fc30:	3301      	adds	r3, #1
 801fc32:	e7c6      	b.n	801fbc2 <mbedtls_x509_crl_free+0x2e>
 801fc34:	701c      	strb	r4, [r3, #0]
 801fc36:	3301      	adds	r3, #1
 801fc38:	e7d2      	b.n	801fbe0 <mbedtls_x509_crl_free+0x4c>
 801fc3a:	bf00      	nop
 801fc3c:	200005a4 	.word	0x200005a4

0801fc40 <mbedtls_x509_crl_parse_der>:
{
 801fc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc44:	460c      	mov	r4, r1
 801fc46:	b090      	sub	sp, #64	; 0x40
 801fc48:	4616      	mov	r6, r2
    if( crl == NULL || buf == NULL )
 801fc4a:	4605      	mov	r5, r0
 801fc4c:	2800      	cmp	r0, #0
 801fc4e:	f000 81c1 	beq.w	801ffd4 <mbedtls_x509_crl_parse_der+0x394>
 801fc52:	2900      	cmp	r1, #0
 801fc54:	f000 81be 	beq.w	801ffd4 <mbedtls_x509_crl_parse_der+0x394>
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 801fc58:	2300      	movs	r3, #0
 801fc5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 801fc5e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 801fc62:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 801fc66:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 801fc6a:	930f      	str	r3, [sp, #60]	; 0x3c
    while( crl->version != 0 && crl->next != NULL )
 801fc6c:	69ab      	ldr	r3, [r5, #24]
 801fc6e:	b1ab      	cbz	r3, 801fc9c <mbedtls_x509_crl_parse_der+0x5c>
 801fc70:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 801fc74:	b963      	cbnz	r3, 801fc90 <mbedtls_x509_crl_parse_der+0x50>
        crl->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl ) );
 801fc76:	4bae      	ldr	r3, [pc, #696]	; (801ff30 <mbedtls_x509_crl_parse_der+0x2f0>)
 801fc78:	21f4      	movs	r1, #244	; 0xf4
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	2001      	movs	r0, #1
 801fc7e:	4798      	blx	r3
 801fc80:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
        if( crl->next == NULL )
 801fc84:	b930      	cbnz	r0, 801fc94 <mbedtls_x509_crl_parse_der+0x54>
            mbedtls_x509_crl_free( crl );
 801fc86:	4628      	mov	r0, r5
 801fc88:	f7ff ff84 	bl	801fb94 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801fc8c:	4ca9      	ldr	r4, [pc, #676]	; (801ff34 <mbedtls_x509_crl_parse_der+0x2f4>)
 801fc8e:	e020      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
 801fc90:	461d      	mov	r5, r3
 801fc92:	e7eb      	b.n	801fc6c <mbedtls_x509_crl_parse_der+0x2c>
        mbedtls_x509_crl_init( crl->next );
 801fc94:	f7ff ff7a 	bl	801fb8c <mbedtls_x509_crl_init>
        crl = crl->next;
 801fc98:	f8d5 50f0 	ldr.w	r5, [r5, #240]	; 0xf0
    if( ( p = mbedtls_calloc( 1, buflen ) ) == NULL )
 801fc9c:	4fa4      	ldr	r7, [pc, #656]	; (801ff30 <mbedtls_x509_crl_parse_der+0x2f0>)
 801fc9e:	4631      	mov	r1, r6
 801fca0:	683b      	ldr	r3, [r7, #0]
 801fca2:	2001      	movs	r0, #1
 801fca4:	4798      	blx	r3
 801fca6:	9003      	str	r0, [sp, #12]
 801fca8:	2800      	cmp	r0, #0
 801fcaa:	d0ef      	beq.n	801fc8c <mbedtls_x509_crl_parse_der+0x4c>
    memcpy( p, buf, buflen );
 801fcac:	4621      	mov	r1, r4
 801fcae:	4632      	mov	r2, r6
 801fcb0:	f002 fb19 	bl	80222e6 <memcpy>
    crl->raw.p = p;
 801fcb4:	9c03      	ldr	r4, [sp, #12]
    crl->raw.len = buflen;
 801fcb6:	e9c5 6401 	strd	r6, r4, [r5, #4]
    end = p + buflen;
 801fcba:	4434      	add	r4, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fcbc:	2330      	movs	r3, #48	; 0x30
 801fcbe:	aa02      	add	r2, sp, #8
 801fcc0:	4621      	mov	r1, r4
 801fcc2:	a803      	add	r0, sp, #12
 801fcc4:	f7ed ffd9 	bl	800dc7a <mbedtls_asn1_get_tag>
 801fcc8:	b138      	cbz	r0, 801fcda <mbedtls_x509_crl_parse_der+0x9a>
        mbedtls_x509_crl_free( crl );
 801fcca:	4628      	mov	r0, r5
 801fccc:	f7ff ff62 	bl	801fb94 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801fcd0:	4c99      	ldr	r4, [pc, #612]	; (801ff38 <mbedtls_x509_crl_parse_der+0x2f8>)
}
 801fcd2:	4620      	mov	r0, r4
 801fcd4:	b010      	add	sp, #64	; 0x40
 801fcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( len != (size_t) ( end - p ) )
 801fcda:	9b03      	ldr	r3, [sp, #12]
 801fcdc:	9a02      	ldr	r2, [sp, #8]
 801fcde:	1ae1      	subs	r1, r4, r3
 801fce0:	4291      	cmp	r1, r2
 801fce2:	d004      	beq.n	801fcee <mbedtls_x509_crl_parse_der+0xae>
        mbedtls_x509_crl_free( crl );
 801fce4:	4628      	mov	r0, r5
 801fce6:	f7ff ff55 	bl	801fb94 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801fcea:	4c94      	ldr	r4, [pc, #592]	; (801ff3c <mbedtls_x509_crl_parse_der+0x2fc>)
 801fcec:	e7f1      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
    crl->tbs.p = p;
 801fcee:	616b      	str	r3, [r5, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fcf0:	4621      	mov	r1, r4
 801fcf2:	2330      	movs	r3, #48	; 0x30
 801fcf4:	aa02      	add	r2, sp, #8
 801fcf6:	a803      	add	r0, sp, #12
 801fcf8:	f7ed ffbf 	bl	800dc7a <mbedtls_asn1_get_tag>
 801fcfc:	4604      	mov	r4, r0
 801fcfe:	b128      	cbz	r0, 801fd0c <mbedtls_x509_crl_parse_der+0xcc>
        mbedtls_x509_crl_free( crl );
 801fd00:	4628      	mov	r0, r5
 801fd02:	f7ff ff47 	bl	801fb94 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801fd06:	f5a4 5406 	sub.w	r4, r4, #8576	; 0x2180
 801fd0a:	e7e2      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
    end = p + len;
 801fd0c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801fd10:	eb02 0803 	add.w	r8, r2, r3
    crl->tbs.len = end - crl->tbs.p;
 801fd14:	696b      	ldr	r3, [r5, #20]
 801fd16:	eba8 0303 	sub.w	r3, r8, r3
 801fd1a:	612b      	str	r3, [r5, #16]
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 801fd1c:	f105 0218 	add.w	r2, r5, #24
 801fd20:	4641      	mov	r1, r8
 801fd22:	a803      	add	r0, sp, #12
 801fd24:	f7ed ffd5 	bl	800dcd2 <mbedtls_asn1_get_int>
 801fd28:	b118      	cbz	r0, 801fd32 <mbedtls_x509_crl_parse_der+0xf2>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fd2a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fd2e:	d112      	bne.n	801fd56 <mbedtls_x509_crl_parse_der+0x116>
            *ver = 0;
 801fd30:	61ac      	str	r4, [r5, #24]
        ( ret = mbedtls_x509_get_alg( &p, end, &crl->sig_oid, &sig_params1 ) ) != 0 )
 801fd32:	f105 061c 	add.w	r6, r5, #28
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801fd36:	ab07      	add	r3, sp, #28
 801fd38:	4632      	mov	r2, r6
 801fd3a:	4641      	mov	r1, r8
 801fd3c:	a803      	add	r0, sp, #12
 801fd3e:	f7ff fb20 	bl	801f382 <mbedtls_x509_get_alg>
 801fd42:	4604      	mov	r4, r0
 801fd44:	b950      	cbnz	r0, 801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    if( crl->version < 0 || crl->version > 1 )
 801fd46:	69ab      	ldr	r3, [r5, #24]
 801fd48:	2b01      	cmp	r3, #1
 801fd4a:	d90b      	bls.n	801fd64 <mbedtls_x509_crl_parse_der+0x124>
        mbedtls_x509_crl_free( crl );
 801fd4c:	4628      	mov	r0, r5
 801fd4e:	f7ff ff21 	bl	801fb94 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 801fd52:	4c7b      	ldr	r4, [pc, #492]	; (801ff40 <mbedtls_x509_crl_parse_der+0x300>)
 801fd54:	e7bd      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801fd56:	f5b0 5408 	subs.w	r4, r0, #8704	; 0x2200
 801fd5a:	d0ea      	beq.n	801fd32 <mbedtls_x509_crl_parse_der+0xf2>
        mbedtls_x509_crl_free( crl );
 801fd5c:	4628      	mov	r0, r5
 801fd5e:	f7ff ff19 	bl	801fb94 <mbedtls_x509_crl_free>
        return( ret );
 801fd62:	e7b6      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
    crl->version++;
 801fd64:	3301      	adds	r3, #1
 801fd66:	61ab      	str	r3, [r5, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crl->sig_oid, &sig_params1,
 801fd68:	f105 03ec 	add.w	r3, r5, #236	; 0xec
 801fd6c:	9300      	str	r3, [sp, #0]
 801fd6e:	f105 02e8 	add.w	r2, r5, #232	; 0xe8
 801fd72:	f105 03e9 	add.w	r3, r5, #233	; 0xe9
 801fd76:	a907      	add	r1, sp, #28
 801fd78:	4630      	mov	r0, r6
 801fd7a:	f7ff fd3f 	bl	801f7fc <mbedtls_x509_get_sig_alg>
 801fd7e:	b120      	cbz	r0, 801fd8a <mbedtls_x509_crl_parse_der+0x14a>
        mbedtls_x509_crl_free( crl );
 801fd80:	4628      	mov	r0, r5
 801fd82:	f7ff ff07 	bl	801fb94 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG );
 801fd86:	4c6f      	ldr	r4, [pc, #444]	; (801ff44 <mbedtls_x509_crl_parse_der+0x304>)
 801fd88:	e7a3      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
    crl->issuer_raw.p = p;
 801fd8a:	9b03      	ldr	r3, [sp, #12]
 801fd8c:	632b      	str	r3, [r5, #48]	; 0x30
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fd8e:	aa02      	add	r2, sp, #8
 801fd90:	2330      	movs	r3, #48	; 0x30
 801fd92:	4641      	mov	r1, r8
 801fd94:	a803      	add	r0, sp, #12
 801fd96:	f7ed ff70 	bl	800dc7a <mbedtls_asn1_get_tag>
 801fd9a:	4604      	mov	r4, r0
 801fd9c:	2800      	cmp	r0, #0
 801fd9e:	d1af      	bne.n	801fd00 <mbedtls_x509_crl_parse_der+0xc0>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crl->issuer ) ) != 0 )
 801fda0:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 801fda4:	f105 0234 	add.w	r2, r5, #52	; 0x34
 801fda8:	4419      	add	r1, r3
 801fdaa:	a803      	add	r0, sp, #12
 801fdac:	f7ff fbe2 	bl	801f574 <mbedtls_x509_get_name>
 801fdb0:	4604      	mov	r4, r0
 801fdb2:	2800      	cmp	r0, #0
 801fdb4:	d1d2      	bne.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    crl->issuer_raw.len = p - crl->issuer_raw.p;
 801fdb6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801fdb8:	9b03      	ldr	r3, [sp, #12]
 801fdba:	1a9b      	subs	r3, r3, r2
 801fdbc:	62eb      	str	r3, [r5, #44]	; 0x2c
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->this_update ) ) != 0 )
 801fdbe:	f105 0254 	add.w	r2, r5, #84	; 0x54
 801fdc2:	4641      	mov	r1, r8
 801fdc4:	a803      	add	r0, sp, #12
 801fdc6:	f7ff fc55 	bl	801f674 <mbedtls_x509_get_time>
 801fdca:	4604      	mov	r4, r0
 801fdcc:	2800      	cmp	r0, #0
 801fdce:	d1c5      	bne.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->next_update ) ) != 0 )
 801fdd0:	f105 026c 	add.w	r2, r5, #108	; 0x6c
 801fdd4:	4641      	mov	r1, r8
 801fdd6:	a803      	add	r0, sp, #12
 801fdd8:	f7ff fc4c 	bl	801f674 <mbedtls_x509_get_time>
 801fddc:	4604      	mov	r4, r0
 801fdde:	b128      	cbz	r0, 801fdec <mbedtls_x509_crl_parse_der+0x1ac>
        if( ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
 801fde0:	4b59      	ldr	r3, [pc, #356]	; (801ff48 <mbedtls_x509_crl_parse_der+0x308>)
 801fde2:	4298      	cmp	r0, r3
 801fde4:	d002      	beq.n	801fdec <mbedtls_x509_crl_parse_der+0x1ac>
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) &&
 801fde6:	3302      	adds	r3, #2
 801fde8:	4298      	cmp	r0, r3
 801fdea:	d1b7      	bne.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    if( *p == end )
 801fdec:	9b03      	ldr	r3, [sp, #12]
 801fdee:	4598      	cmp	r8, r3
 801fdf0:	d13d      	bne.n	801fe6e <mbedtls_x509_crl_parse_der+0x22e>
    if( crl->version == 2 )
 801fdf2:	69ab      	ldr	r3, [r5, #24]
 801fdf4:	2b02      	cmp	r3, #2
 801fdf6:	d10e      	bne.n	801fe16 <mbedtls_x509_crl_parse_der+0x1d6>
    size_t len = 0;
 801fdf8:	2300      	movs	r3, #0
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801fdfa:	f105 02c4 	add.w	r2, r5, #196	; 0xc4
 801fdfe:	4641      	mov	r1, r8
 801fe00:	a803      	add	r0, sp, #12
    size_t len = 0;
 801fe02:	9306      	str	r3, [sp, #24]
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801fe04:	f7ff fd40 	bl	801f888 <mbedtls_x509_get_ext>
 801fe08:	4604      	mov	r4, r0
 801fe0a:	2800      	cmp	r0, #0
 801fe0c:	f000 80cd 	beq.w	801ffaa <mbedtls_x509_crl_parse_der+0x36a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fe10:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fe14:	d1a2      	bne.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    if( p != end )
 801fe16:	9b03      	ldr	r3, [sp, #12]
 801fe18:	4543      	cmp	r3, r8
 801fe1a:	f47f af63 	bne.w	801fce4 <mbedtls_x509_crl_parse_der+0xa4>
    end = crl->raw.p + crl->raw.len;
 801fe1e:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 801fe22:	441e      	add	r6, r3
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 801fe24:	aa0d      	add	r2, sp, #52	; 0x34
 801fe26:	ab0a      	add	r3, sp, #40	; 0x28
 801fe28:	4631      	mov	r1, r6
 801fe2a:	a803      	add	r0, sp, #12
 801fe2c:	f7ff faa9 	bl	801f382 <mbedtls_x509_get_alg>
 801fe30:	4604      	mov	r4, r0
 801fe32:	2800      	cmp	r0, #0
 801fe34:	d192      	bne.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    if( crl->sig_oid.len != sig_oid2.len ||
 801fe36:	6a2a      	ldr	r2, [r5, #32]
 801fe38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe3a:	429a      	cmp	r2, r3
 801fe3c:	d112      	bne.n	801fe64 <mbedtls_x509_crl_parse_der+0x224>
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 801fe3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fe40:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801fe42:	f002 fa41 	bl	80222c8 <memcmp>
    if( crl->sig_oid.len != sig_oid2.len ||
 801fe46:	b968      	cbnz	r0, 801fe64 <mbedtls_x509_crl_parse_der+0x224>
        sig_params1.len != sig_params2.len ||
 801fe48:	9a08      	ldr	r2, [sp, #32]
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 801fe4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe4c:	429a      	cmp	r2, r3
 801fe4e:	d109      	bne.n	801fe64 <mbedtls_x509_crl_parse_der+0x224>
        sig_params1.len != sig_params2.len ||
 801fe50:	2a00      	cmp	r2, #0
 801fe52:	f000 80b0 	beq.w	801ffb6 <mbedtls_x509_crl_parse_der+0x376>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 801fe56:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fe58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fe5a:	f002 fa35 	bl	80222c8 <memcmp>
        ( sig_params1.len != 0 &&
 801fe5e:	2800      	cmp	r0, #0
 801fe60:	f000 80a9 	beq.w	801ffb6 <mbedtls_x509_crl_parse_der+0x376>
        mbedtls_x509_crl_free( crl );
 801fe64:	4628      	mov	r0, r5
 801fe66:	f7ff fe95 	bl	801fb94 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 801fe6a:	4c38      	ldr	r4, [pc, #224]	; (801ff4c <mbedtls_x509_crl_parse_der+0x30c>)
 801fe6c:	e731      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &entry_len,
 801fe6e:	2330      	movs	r3, #48	; 0x30
 801fe70:	aa04      	add	r2, sp, #16
 801fe72:	4641      	mov	r1, r8
 801fe74:	a803      	add	r0, sp, #12
 801fe76:	f7ed ff00 	bl	800dc7a <mbedtls_asn1_get_tag>
 801fe7a:	4604      	mov	r4, r0
 801fe7c:	b120      	cbz	r0, 801fe88 <mbedtls_x509_crl_parse_der+0x248>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fe7e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fe82:	f47f af6b 	bne.w	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
 801fe86:	e7b4      	b.n	801fdf2 <mbedtls_x509_crl_parse_der+0x1b2>
    end = *p + entry_len;
 801fe88:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    if( ( ret = x509_get_entries( &p, end, &crl->entry ) ) != 0 )
 801fe8c:	f105 0984 	add.w	r9, r5, #132	; 0x84
    end = *p + entry_len;
 801fe90:	eb02 0a03 	add.w	sl, r2, r3
    while( *p < end )
 801fe94:	9b03      	ldr	r3, [sp, #12]
 801fe96:	459a      	cmp	sl, r3
 801fe98:	d9ab      	bls.n	801fdf2 <mbedtls_x509_crl_parse_der+0x1b2>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len2,
 801fe9a:	2330      	movs	r3, #48	; 0x30
 801fe9c:	aa05      	add	r2, sp, #20
 801fe9e:	4651      	mov	r1, sl
 801fea0:	a803      	add	r0, sp, #12
 801fea2:	f7ed feea 	bl	800dc7a <mbedtls_asn1_get_tag>
 801fea6:	4604      	mov	r4, r0
 801fea8:	2800      	cmp	r0, #0
 801feaa:	f47f af57 	bne.w	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
        cur_entry->raw.tag = **p;
 801feae:	9e03      	ldr	r6, [sp, #12]
 801feb0:	7833      	ldrb	r3, [r6, #0]
 801feb2:	f8c9 3000 	str.w	r3, [r9]
        cur_entry->raw.len = len2;
 801feb6:	9b05      	ldr	r3, [sp, #20]
        cur_entry->raw.p = *p;
 801feb8:	f8c9 6008 	str.w	r6, [r9, #8]
        end2 = *p + len2;
 801febc:	441e      	add	r6, r3
        cur_entry->raw.len = len2;
 801febe:	f8c9 3004 	str.w	r3, [r9, #4]
        if( ( ret = mbedtls_x509_get_serial( p, end2, &cur_entry->serial ) ) != 0 )
 801fec2:	f109 020c 	add.w	r2, r9, #12
 801fec6:	4631      	mov	r1, r6
 801fec8:	a803      	add	r0, sp, #12
 801feca:	f7ff fa2b 	bl	801f324 <mbedtls_x509_get_serial>
 801fece:	4604      	mov	r4, r0
 801fed0:	2800      	cmp	r0, #0
 801fed2:	f47f af43 	bne.w	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
        if( ( ret = mbedtls_x509_get_time( p, end2,
 801fed6:	f109 0218 	add.w	r2, r9, #24
 801feda:	4631      	mov	r1, r6
 801fedc:	a803      	add	r0, sp, #12
 801fede:	f7ff fbc9 	bl	801f674 <mbedtls_x509_get_time>
 801fee2:	4604      	mov	r4, r0
 801fee4:	2800      	cmp	r0, #0
 801fee6:	f47f af39 	bne.w	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    if( end <= *p )
 801feea:	9b03      	ldr	r3, [sp, #12]
    size_t len = 0;
 801feec:	9006      	str	r0, [sp, #24]
    if( end <= *p )
 801feee:	429e      	cmp	r6, r3
 801fef0:	d911      	bls.n	801ff16 <mbedtls_x509_crl_parse_der+0x2d6>
    ext->tag = **p;
 801fef2:	781a      	ldrb	r2, [r3, #0]
 801fef4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
    ext->p = *p;
 801fef8:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801fefc:	f109 0234 	add.w	r2, r9, #52	; 0x34
 801ff00:	2330      	movs	r3, #48	; 0x30
 801ff02:	4631      	mov	r1, r6
 801ff04:	a803      	add	r0, sp, #12
 801ff06:	f7ed feb8 	bl	800dc7a <mbedtls_asn1_get_tag>
 801ff0a:	b308      	cbz	r0, 801ff50 <mbedtls_x509_crl_parse_der+0x310>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ff0c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801ff10:	d12f      	bne.n	801ff72 <mbedtls_x509_crl_parse_der+0x332>
            ext->p = NULL;
 801ff12:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
        if( *p < end )
 801ff16:	9b03      	ldr	r3, [sp, #12]
 801ff18:	459a      	cmp	sl, r3
 801ff1a:	d9bb      	bls.n	801fe94 <mbedtls_x509_crl_parse_der+0x254>
            cur_entry->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl_entry ) );
 801ff1c:	683b      	ldr	r3, [r7, #0]
 801ff1e:	2140      	movs	r1, #64	; 0x40
 801ff20:	2001      	movs	r0, #1
 801ff22:	4798      	blx	r3
 801ff24:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if( cur_entry->next == NULL )
 801ff28:	b368      	cbz	r0, 801ff86 <mbedtls_x509_crl_parse_der+0x346>
 801ff2a:	4681      	mov	r9, r0
 801ff2c:	e7b2      	b.n	801fe94 <mbedtls_x509_crl_parse_der+0x254>
 801ff2e:	bf00      	nop
 801ff30:	200005a0 	.word	0x200005a0
 801ff34:	ffffd780 	.word	0xffffd780
 801ff38:	ffffde80 	.word	0xffffde80
 801ff3c:	ffffde1a 	.word	0xffffde1a
 801ff40:	ffffda80 	.word	0xffffda80
 801ff44:	ffffda00 	.word	0xffffda00
 801ff48:	ffffdb9e 	.word	0xffffdb9e
 801ff4c:	ffffd980 	.word	0xffffd980
    end = *p + ext->len;
 801ff50:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 801ff54:	9e03      	ldr	r6, [sp, #12]
 801ff56:	441e      	add	r6, r3
    while( *p < end )
 801ff58:	9b03      	ldr	r3, [sp, #12]
 801ff5a:	429e      	cmp	r6, r3
 801ff5c:	d802      	bhi.n	801ff64 <mbedtls_x509_crl_parse_der+0x324>
    if( *p != end )
 801ff5e:	d0da      	beq.n	801ff16 <mbedtls_x509_crl_parse_der+0x2d6>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801ff60:	4c1d      	ldr	r4, [pc, #116]	; (801ffd8 <mbedtls_x509_crl_parse_der+0x398>)
 801ff62:	e6fb      	b.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801ff64:	2330      	movs	r3, #48	; 0x30
 801ff66:	aa06      	add	r2, sp, #24
 801ff68:	4631      	mov	r1, r6
 801ff6a:	a803      	add	r0, sp, #12
 801ff6c:	f7ed fe85 	bl	800dc7a <mbedtls_asn1_get_tag>
 801ff70:	b120      	cbz	r0, 801ff7c <mbedtls_x509_crl_parse_der+0x33c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801ff72:	f5a0 5414 	sub.w	r4, r0, #9472	; 0x2500
        if( ( ret = x509_get_crl_entry_ext( p, end2,
 801ff76:	2c00      	cmp	r4, #0
 801ff78:	d0cd      	beq.n	801ff16 <mbedtls_x509_crl_parse_der+0x2d6>
 801ff7a:	e6ef      	b.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
        *p += len;
 801ff7c:	9b03      	ldr	r3, [sp, #12]
 801ff7e:	9a06      	ldr	r2, [sp, #24]
 801ff80:	4413      	add	r3, r2
 801ff82:	9303      	str	r3, [sp, #12]
 801ff84:	e7e8      	b.n	801ff58 <mbedtls_x509_crl_parse_der+0x318>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801ff86:	4c15      	ldr	r4, [pc, #84]	; (801ffdc <mbedtls_x509_crl_parse_der+0x39c>)
 801ff88:	e6e8      	b.n	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801ff8a:	2330      	movs	r3, #48	; 0x30
 801ff8c:	aa06      	add	r2, sp, #24
 801ff8e:	4641      	mov	r1, r8
 801ff90:	a803      	add	r0, sp, #12
 801ff92:	f7ed fe72 	bl	800dc7a <mbedtls_asn1_get_tag>
 801ff96:	b120      	cbz	r0, 801ffa2 <mbedtls_x509_crl_parse_der+0x362>
        if( ret != 0 )
 801ff98:	f5b0 5414 	subs.w	r4, r0, #9472	; 0x2500
 801ff9c:	f47f aede 	bne.w	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
 801ffa0:	e739      	b.n	801fe16 <mbedtls_x509_crl_parse_der+0x1d6>
        *p += len;
 801ffa2:	9b03      	ldr	r3, [sp, #12]
 801ffa4:	9a06      	ldr	r2, [sp, #24]
 801ffa6:	4413      	add	r3, r2
 801ffa8:	9303      	str	r3, [sp, #12]
    while( *p < end )
 801ffaa:	9b03      	ldr	r3, [sp, #12]
 801ffac:	4598      	cmp	r8, r3
 801ffae:	d8ec      	bhi.n	801ff8a <mbedtls_x509_crl_parse_der+0x34a>
    if( *p != end )
 801ffb0:	f43f af31 	beq.w	801fe16 <mbedtls_x509_crl_parse_der+0x1d6>
 801ffb4:	e7d4      	b.n	801ff60 <mbedtls_x509_crl_parse_der+0x320>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crl->sig ) ) != 0 )
 801ffb6:	f105 02dc 	add.w	r2, r5, #220	; 0xdc
 801ffba:	4631      	mov	r1, r6
 801ffbc:	a803      	add	r0, sp, #12
 801ffbe:	f7ff fbff 	bl	801f7c0 <mbedtls_x509_get_sig>
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	2800      	cmp	r0, #0
 801ffc6:	f47f aec9 	bne.w	801fd5c <mbedtls_x509_crl_parse_der+0x11c>
    if( p != end )
 801ffca:	9b03      	ldr	r3, [sp, #12]
 801ffcc:	42b3      	cmp	r3, r6
 801ffce:	f43f ae80 	beq.w	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
 801ffd2:	e687      	b.n	801fce4 <mbedtls_x509_crl_parse_der+0xa4>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801ffd4:	4c02      	ldr	r4, [pc, #8]	; (801ffe0 <mbedtls_x509_crl_parse_der+0x3a0>)
 801ffd6:	e67c      	b.n	801fcd2 <mbedtls_x509_crl_parse_der+0x92>
 801ffd8:	ffffda9a 	.word	0xffffda9a
 801ffdc:	ffffd780 	.word	0xffffd780
 801ffe0:	ffffd800 	.word	0xffffd800

0801ffe4 <mbedtls_x509_crl_parse>:
{
 801ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffe8:	460d      	mov	r5, r1
 801ffea:	b089      	sub	sp, #36	; 0x24
 801ffec:	4616      	mov	r6, r2
    if( chain == NULL || buf == NULL )
 801ffee:	4607      	mov	r7, r0
 801fff0:	2800      	cmp	r0, #0
 801fff2:	d03f      	beq.n	8020074 <mbedtls_x509_crl_parse+0x90>
 801fff4:	2900      	cmp	r1, #0
 801fff6:	d03d      	beq.n	8020074 <mbedtls_x509_crl_parse+0x90>
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 801fff8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802008c <mbedtls_x509_crl_parse+0xa8>
            ret = mbedtls_pem_read_buffer( &pem,
 801fffc:	f8df a090 	ldr.w	sl, [pc, #144]	; 8020090 <mbedtls_x509_crl_parse+0xac>
 8020000:	f8df b090 	ldr.w	fp, [pc, #144]	; 8020094 <mbedtls_x509_crl_parse+0xb0>
    int is_pem = 0;
 8020004:	f04f 0800 	mov.w	r8, #0
        mbedtls_pem_init( &pem );
 8020008:	a805      	add	r0, sp, #20
 802000a:	f7f5 f9b6 	bl	801537a <mbedtls_pem_init>
        if( buflen == 0 || buf[buflen - 1] != '\0' )
 802000e:	b306      	cbz	r6, 8020052 <mbedtls_x509_crl_parse+0x6e>
 8020010:	19ab      	adds	r3, r5, r6
 8020012:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020016:	b9e3      	cbnz	r3, 8020052 <mbedtls_x509_crl_parse+0x6e>
            ret = mbedtls_pem_read_buffer( &pem,
 8020018:	aa04      	add	r2, sp, #16
 802001a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802001e:	9300      	str	r3, [sp, #0]
 8020020:	4652      	mov	r2, sl
 8020022:	462b      	mov	r3, r5
 8020024:	4659      	mov	r1, fp
 8020026:	a805      	add	r0, sp, #20
 8020028:	f7f5 f9ac 	bl	8015384 <mbedtls_pem_read_buffer>
        if( ret == 0 )
 802002c:	4604      	mov	r4, r0
 802002e:	b988      	cbnz	r0, 8020054 <mbedtls_x509_crl_parse+0x70>
            buflen -= use_len;
 8020030:	9b04      	ldr	r3, [sp, #16]
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 8020032:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8020036:	4638      	mov	r0, r7
            buflen -= use_len;
 8020038:	1af6      	subs	r6, r6, r3
            buf += use_len;
 802003a:	441d      	add	r5, r3
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 802003c:	f7ff fe00 	bl	801fc40 <mbedtls_x509_crl_parse_der>
 8020040:	4604      	mov	r4, r0
 8020042:	b1a0      	cbz	r0, 802006e <mbedtls_x509_crl_parse+0x8a>
            mbedtls_pem_free( &pem );
 8020044:	a805      	add	r0, sp, #20
 8020046:	f7f5 faf5 	bl	8015634 <mbedtls_pem_free>
}
 802004a:	4620      	mov	r0, r4
 802004c:	b009      	add	sp, #36	; 0x24
 802004e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 8020052:	464c      	mov	r4, r9
        else if( is_pem )
 8020054:	f1b8 0f00 	cmp.w	r8, #0
 8020058:	d1f4      	bne.n	8020044 <mbedtls_x509_crl_parse+0x60>
        mbedtls_pem_free( &pem );
 802005a:	a805      	add	r0, sp, #20
 802005c:	f7f5 faea 	bl	8015634 <mbedtls_pem_free>
    while( is_pem && buflen > 1 );
 8020060:	f1b8 0f00 	cmp.w	r8, #0
 8020064:	d008      	beq.n	8020078 <mbedtls_x509_crl_parse+0x94>
 8020066:	2e01      	cmp	r6, #1
 8020068:	d8ce      	bhi.n	8020008 <mbedtls_x509_crl_parse+0x24>
        return( 0 );
 802006a:	2400      	movs	r4, #0
 802006c:	e7ed      	b.n	802004a <mbedtls_x509_crl_parse+0x66>
            is_pem = 1;
 802006e:	f04f 0801 	mov.w	r8, #1
 8020072:	e7f2      	b.n	802005a <mbedtls_x509_crl_parse+0x76>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020074:	4c04      	ldr	r4, [pc, #16]	; (8020088 <mbedtls_x509_crl_parse+0xa4>)
 8020076:	e7e8      	b.n	802004a <mbedtls_x509_crl_parse+0x66>
        return( mbedtls_x509_crl_parse_der( chain, buf, buflen ) );
 8020078:	4632      	mov	r2, r6
 802007a:	4629      	mov	r1, r5
 802007c:	4638      	mov	r0, r7
 802007e:	f7ff fddf 	bl	801fc40 <mbedtls_x509_crl_parse_der>
 8020082:	4604      	mov	r4, r0
 8020084:	e7e1      	b.n	802004a <mbedtls_x509_crl_parse+0x66>
 8020086:	bf00      	nop
 8020088:	ffffd800 	.word	0xffffd800
 802008c:	ffffef80 	.word	0xffffef80
 8020090:	08032a67 	.word	0x08032a67
 8020094:	08032a7e 	.word	0x08032a7e

08020098 <mbedtls_zeroize>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8020098:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 802009a:	2300      	movs	r3, #0
 802009c:	4288      	cmp	r0, r1
 802009e:	d100      	bne.n	80200a2 <mbedtls_zeroize+0xa>
}
 80200a0:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80200a2:	7003      	strb	r3, [r0, #0]
 80200a4:	3001      	adds	r0, #1
 80200a6:	e7f9      	b.n	802009c <mbedtls_zeroize+0x4>

080200a8 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80200a8:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 80200aa:	2400      	movs	r4, #0
 80200ac:	4294      	cmp	r4, r2
 80200ae:	d101      	bne.n	80200b4 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 80200b0:	2000      	movs	r0, #0
}
 80200b2:	bd70      	pop	{r4, r5, r6, pc}
        diff = n1[i] ^ n2[i];
 80200b4:	5d03      	ldrb	r3, [r0, r4]
 80200b6:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 80200b8:	42ab      	cmp	r3, r5
        diff = n1[i] ^ n2[i];
 80200ba:	ea83 0605 	eor.w	r6, r3, r5
        if( diff == 0 )
 80200be:	d006      	beq.n	80200ce <x509_memcasecmp+0x26>
        if( diff == 32 &&
 80200c0:	2e20      	cmp	r6, #32
 80200c2:	d106      	bne.n	80200d2 <x509_memcasecmp+0x2a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80200c4:	f023 0320 	bic.w	r3, r3, #32
 80200c8:	3b41      	subs	r3, #65	; 0x41
 80200ca:	2b19      	cmp	r3, #25
 80200cc:	d801      	bhi.n	80200d2 <x509_memcasecmp+0x2a>
    for( i = 0; i < len; i++ )
 80200ce:	3401      	adds	r4, #1
 80200d0:	e7ec      	b.n	80200ac <x509_memcasecmp+0x4>
        return( -1 );
 80200d2:	f04f 30ff 	mov.w	r0, #4294967295
 80200d6:	e7ec      	b.n	80200b2 <x509_memcasecmp+0xa>

080200d8 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80200d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200dc:	4605      	mov	r5, r0
 80200de:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80200e0:	b92d      	cbnz	r5, 80200ee <x509_name_cmp+0x16>
 80200e2:	1c20      	adds	r0, r4, #0
 80200e4:	bf18      	it	ne
 80200e6:	2001      	movne	r0, #1
 80200e8:	4240      	negs	r0, r0
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 80200ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( a == NULL || b == NULL )
 80200ee:	2c00      	cmp	r4, #0
 80200f0:	d036      	beq.n	8020160 <x509_name_cmp+0x88>
        if( a->oid.tag != b->oid.tag ||
 80200f2:	682a      	ldr	r2, [r5, #0]
 80200f4:	6823      	ldr	r3, [r4, #0]
 80200f6:	429a      	cmp	r2, r3
 80200f8:	d132      	bne.n	8020160 <x509_name_cmp+0x88>
            a->oid.len != b->oid.len ||
 80200fa:	686a      	ldr	r2, [r5, #4]
        if( a->oid.tag != b->oid.tag ||
 80200fc:	6863      	ldr	r3, [r4, #4]
 80200fe:	429a      	cmp	r2, r3
 8020100:	d12e      	bne.n	8020160 <x509_name_cmp+0x88>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8020102:	68a1      	ldr	r1, [r4, #8]
 8020104:	68a8      	ldr	r0, [r5, #8]
 8020106:	f002 f8df 	bl	80222c8 <memcmp>
            a->oid.len != b->oid.len ||
 802010a:	bb48      	cbnz	r0, 8020160 <x509_name_cmp+0x88>
    if( a->tag == b->tag &&
 802010c:	68ef      	ldr	r7, [r5, #12]
 802010e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8020112:	4547      	cmp	r7, r8
 8020114:	d110      	bne.n	8020138 <x509_name_cmp+0x60>
        a->len == b->len &&
 8020116:	692e      	ldr	r6, [r5, #16]
    if( a->tag == b->tag &&
 8020118:	6923      	ldr	r3, [r4, #16]
 802011a:	429e      	cmp	r6, r3
 802011c:	d12a      	bne.n	8020174 <x509_name_cmp+0x9c>
        memcmp( a->p, b->p, b->len ) == 0 )
 802011e:	4632      	mov	r2, r6
 8020120:	6961      	ldr	r1, [r4, #20]
 8020122:	6968      	ldr	r0, [r5, #20]
 8020124:	f002 f8d0 	bl	80222c8 <memcmp>
        a->len == b->len &&
 8020128:	b9f8      	cbnz	r0, 802016a <x509_name_cmp+0x92>
        if( a->next_merged != b->next_merged )
 802012a:	7f2a      	ldrb	r2, [r5, #28]
 802012c:	7f23      	ldrb	r3, [r4, #28]
 802012e:	429a      	cmp	r2, r3
 8020130:	d116      	bne.n	8020160 <x509_name_cmp+0x88>
        a = a->next;
 8020132:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8020134:	69a4      	ldr	r4, [r4, #24]
 8020136:	e7d3      	b.n	80200e0 <x509_name_cmp+0x8>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8020138:	2f0c      	cmp	r7, #12
 802013a:	d001      	beq.n	8020140 <x509_name_cmp+0x68>
 802013c:	2f13      	cmp	r7, #19
 802013e:	d10f      	bne.n	8020160 <x509_name_cmp+0x88>
 8020140:	f1b8 0f0c 	cmp.w	r8, #12
 8020144:	d002      	beq.n	802014c <x509_name_cmp+0x74>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8020146:	f1b8 0f13 	cmp.w	r8, #19
 802014a:	d109      	bne.n	8020160 <x509_name_cmp+0x88>
        a->len == b->len &&
 802014c:	692a      	ldr	r2, [r5, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 802014e:	6923      	ldr	r3, [r4, #16]
 8020150:	429a      	cmp	r2, r3
 8020152:	d105      	bne.n	8020160 <x509_name_cmp+0x88>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 8020154:	6961      	ldr	r1, [r4, #20]
 8020156:	6968      	ldr	r0, [r5, #20]
 8020158:	f7ff ffa6 	bl	80200a8 <x509_memcasecmp>
        a->len == b->len &&
 802015c:	2800      	cmp	r0, #0
 802015e:	d0e4      	beq.n	802012a <x509_name_cmp+0x52>
            return( -1 );
 8020160:	f04f 30ff 	mov.w	r0, #4294967295
 8020164:	e7c1      	b.n	80200ea <x509_name_cmp+0x12>
        a->len == b->len &&
 8020166:	4632      	mov	r2, r6
 8020168:	e7f4      	b.n	8020154 <x509_name_cmp+0x7c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 802016a:	2f0c      	cmp	r7, #12
 802016c:	d0fb      	beq.n	8020166 <x509_name_cmp+0x8e>
 802016e:	2f13      	cmp	r7, #19
 8020170:	d0e9      	beq.n	8020146 <x509_name_cmp+0x6e>
 8020172:	e7f5      	b.n	8020160 <x509_name_cmp+0x88>
 8020174:	2f0c      	cmp	r7, #12
 8020176:	d1fa      	bne.n	802016e <x509_name_cmp+0x96>
 8020178:	e7f2      	b.n	8020160 <x509_name_cmp+0x88>

0802017a <x509_check_wildcard>:
{
 802017a:	b570      	push	{r4, r5, r6, lr}
 802017c:	460e      	mov	r6, r1
 802017e:	4604      	mov	r4, r0
    size_t cn_idx = 0, cn_len = strlen( cn );
 8020180:	f7e0 f830 	bl	80001e4 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8020184:	6875      	ldr	r5, [r6, #4]
 8020186:	2d02      	cmp	r5, #2
 8020188:	d922      	bls.n	80201d0 <x509_check_wildcard+0x56>
 802018a:	68b6      	ldr	r6, [r6, #8]
 802018c:	7833      	ldrb	r3, [r6, #0]
 802018e:	2b2a      	cmp	r3, #42	; 0x2a
 8020190:	d11e      	bne.n	80201d0 <x509_check_wildcard+0x56>
 8020192:	7873      	ldrb	r3, [r6, #1]
 8020194:	2b2e      	cmp	r3, #46	; 0x2e
 8020196:	d11b      	bne.n	80201d0 <x509_check_wildcard+0x56>
 8020198:	4623      	mov	r3, r4
    for( i = 0; i < cn_len; ++i )
 802019a:	2200      	movs	r2, #0
 802019c:	4282      	cmp	r2, r0
 802019e:	d102      	bne.n	80201a6 <x509_check_wildcard+0x2c>
        return( -1 );
 80201a0:	f04f 30ff 	mov.w	r0, #4294967295
 80201a4:	e013      	b.n	80201ce <x509_check_wildcard+0x54>
        if( cn[i] == '.' )
 80201a6:	4619      	mov	r1, r3
 80201a8:	3301      	adds	r3, #1
 80201aa:	780c      	ldrb	r4, [r1, #0]
 80201ac:	2c2e      	cmp	r4, #46	; 0x2e
 80201ae:	d001      	beq.n	80201b4 <x509_check_wildcard+0x3a>
    for( i = 0; i < cn_len; ++i )
 80201b0:	3201      	adds	r2, #1
 80201b2:	e7f3      	b.n	802019c <x509_check_wildcard+0x22>
    if( cn_idx == 0 )
 80201b4:	2a00      	cmp	r2, #0
 80201b6:	d0f3      	beq.n	80201a0 <x509_check_wildcard+0x26>
    if( cn_len - cn_idx == name->len - 1 &&
 80201b8:	1a82      	subs	r2, r0, r2
 80201ba:	3d01      	subs	r5, #1
 80201bc:	42aa      	cmp	r2, r5
 80201be:	d1ef      	bne.n	80201a0 <x509_check_wildcard+0x26>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80201c0:	1c70      	adds	r0, r6, #1
 80201c2:	f7ff ff71 	bl	80200a8 <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 80201c6:	3000      	adds	r0, #0
 80201c8:	bf18      	it	ne
 80201ca:	2001      	movne	r0, #1
 80201cc:	4240      	negs	r0, r0
}
 80201ce:	bd70      	pop	{r4, r5, r6, pc}
        return( 0 );
 80201d0:	2000      	movs	r0, #0
 80201d2:	e7fc      	b.n	80201ce <x509_check_wildcard+0x54>

080201d4 <x509_get_uid>:
{
 80201d4:	b570      	push	{r4, r5, r6, lr}
 80201d6:	4615      	mov	r5, r2
    if( *p == end )
 80201d8:	6802      	ldr	r2, [r0, #0]
 80201da:	428a      	cmp	r2, r1
{
 80201dc:	4604      	mov	r4, r0
    if( *p == end )
 80201de:	d00b      	beq.n	80201f8 <x509_get_uid+0x24>
    uid->tag = **p;
 80201e0:	7816      	ldrb	r6, [r2, #0]
 80201e2:	462a      	mov	r2, r5
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80201e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    uid->tag = **p;
 80201e8:	f842 6b04 	str.w	r6, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80201ec:	f7ed fd45 	bl	800dc7a <mbedtls_asn1_get_tag>
 80201f0:	b120      	cbz	r0, 80201fc <x509_get_uid+0x28>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80201f2:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80201f6:	d100      	bne.n	80201fa <x509_get_uid+0x26>
            return( 0 );
 80201f8:	2000      	movs	r0, #0
}
 80201fa:	bd70      	pop	{r4, r5, r6, pc}
    uid->p = *p;
 80201fc:	6823      	ldr	r3, [r4, #0]
 80201fe:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 8020200:	6823      	ldr	r3, [r4, #0]
 8020202:	686a      	ldr	r2, [r5, #4]
 8020204:	4413      	add	r3, r2
 8020206:	6023      	str	r3, [r4, #0]
 8020208:	e7f7      	b.n	80201fa <x509_get_uid+0x26>

0802020a <x509_profile_check_key>:
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 802020a:	2901      	cmp	r1, #1
{
 802020c:	b510      	push	{r4, lr}
 802020e:	4604      	mov	r4, r0
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8020210:	d001      	beq.n	8020216 <x509_profile_check_key+0xc>
 8020212:	2906      	cmp	r1, #6
 8020214:	d109      	bne.n	802022a <x509_profile_check_key+0x20>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8020216:	4610      	mov	r0, r2
 8020218:	f7f5 fad0 	bl	80157bc <mbedtls_pk_get_bitlen>
 802021c:	68e3      	ldr	r3, [r4, #12]
 802021e:	4298      	cmp	r0, r3
 8020220:	f04f 30ff 	mov.w	r0, #4294967295
 8020224:	bf28      	it	cs
 8020226:	2000      	movcs	r0, #0
}
 8020228:	bd10      	pop	{r4, pc}
    if( pk_alg == MBEDTLS_PK_ECDSA ||
 802022a:	3902      	subs	r1, #2
 802022c:	2902      	cmp	r1, #2
 802022e:	d80b      	bhi.n	8020248 <x509_profile_check_key+0x3e>
        mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
 8020230:	6853      	ldr	r3, [r2, #4]
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
 8020232:	781b      	ldrb	r3, [r3, #0]
 8020234:	1e5a      	subs	r2, r3, #1
 8020236:	2301      	movs	r3, #1
 8020238:	4093      	lsls	r3, r2
 802023a:	6882      	ldr	r2, [r0, #8]
 802023c:	4213      	tst	r3, r2
 802023e:	bf0c      	ite	eq
 8020240:	f04f 30ff 	moveq.w	r0, #4294967295
 8020244:	2000      	movne	r0, #0
 8020246:	e7ef      	b.n	8020228 <x509_profile_check_key+0x1e>
    return( -1 );
 8020248:	f04f 30ff 	mov.w	r0, #4294967295
 802024c:	e7ec      	b.n	8020228 <x509_profile_check_key+0x1e>
	...

08020250 <mbedtls_x509_crt_info>:
{
 8020250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020254:	4605      	mov	r5, r0
 8020256:	b08d      	sub	sp, #52	; 0x34
 8020258:	460f      	mov	r7, r1
 802025a:	4690      	mov	r8, r2
    if( NULL == crt )
 802025c:	461e      	mov	r6, r3
 802025e:	b93b      	cbnz	r3, 8020270 <mbedtls_x509_crt_info+0x20>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8020260:	4a96      	ldr	r2, [pc, #600]	; (80204bc <mbedtls_x509_crt_info+0x26c>)
 8020262:	f003 fa1f 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020266:	2f1f      	cmp	r7, #31
 8020268:	f200 82c5 	bhi.w	80207f6 <mbedtls_x509_crt_info+0x5a6>
 802026c:	4894      	ldr	r0, [pc, #592]	; (80204c0 <mbedtls_x509_crt_info+0x270>)
 802026e:	e2b4      	b.n	80207da <mbedtls_x509_crt_info+0x58a>
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 8020270:	699b      	ldr	r3, [r3, #24]
 8020272:	9300      	str	r3, [sp, #0]
 8020274:	4613      	mov	r3, r2
 8020276:	4a93      	ldr	r2, [pc, #588]	; (80204c4 <mbedtls_x509_crt_info+0x274>)
 8020278:	f003 fa14 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802027c:	2800      	cmp	r0, #0
 802027e:	dbf5      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 8020280:	42b8      	cmp	r0, r7
 8020282:	d2f3      	bcs.n	802026c <mbedtls_x509_crt_info+0x1c>
 8020284:	1a3c      	subs	r4, r7, r0
 8020286:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 8020288:	4643      	mov	r3, r8
 802028a:	4a8f      	ldr	r2, [pc, #572]	; (80204c8 <mbedtls_x509_crt_info+0x278>)
 802028c:	4621      	mov	r1, r4
 802028e:	4628      	mov	r0, r5
 8020290:	f003 fa08 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020294:	2800      	cmp	r0, #0
 8020296:	dbe9      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 8020298:	4284      	cmp	r4, r0
 802029a:	d9e7      	bls.n	802026c <mbedtls_x509_crt_info+0x1c>
 802029c:	1a24      	subs	r4, r4, r0
 802029e:	4405      	add	r5, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 80202a0:	f106 021c 	add.w	r2, r6, #28
 80202a4:	4621      	mov	r1, r4
 80202a6:	4628      	mov	r0, r5
 80202a8:	f7ff fb9c 	bl	801f9e4 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80202ac:	2800      	cmp	r0, #0
 80202ae:	dbdd      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202b0:	4284      	cmp	r4, r0
 80202b2:	d9db      	bls.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202b4:	1a24      	subs	r4, r4, r0
 80202b6:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 80202b8:	4643      	mov	r3, r8
 80202ba:	4a84      	ldr	r2, [pc, #528]	; (80204cc <mbedtls_x509_crt_info+0x27c>)
 80202bc:	4621      	mov	r1, r4
 80202be:	4628      	mov	r0, r5
 80202c0:	f003 f9f0 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80202c4:	2800      	cmp	r0, #0
 80202c6:	dbd1      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202c8:	4284      	cmp	r4, r0
 80202ca:	d9cf      	bls.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202cc:	1a24      	subs	r4, r4, r0
 80202ce:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 80202d0:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 80202d4:	4621      	mov	r1, r4
 80202d6:	4628      	mov	r0, r5
 80202d8:	f7ff fb00 	bl	801f8dc <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80202dc:	2800      	cmp	r0, #0
 80202de:	dbc5      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202e0:	4284      	cmp	r4, r0
 80202e2:	d9c3      	bls.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202e4:	1a24      	subs	r4, r4, r0
 80202e6:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 80202e8:	4643      	mov	r3, r8
 80202ea:	4a79      	ldr	r2, [pc, #484]	; (80204d0 <mbedtls_x509_crt_info+0x280>)
 80202ec:	4621      	mov	r1, r4
 80202ee:	4628      	mov	r0, r5
 80202f0:	f003 f9d8 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80202f4:	2800      	cmp	r0, #0
 80202f6:	dbb9      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202f8:	4284      	cmp	r4, r0
 80202fa:	d9b7      	bls.n	802026c <mbedtls_x509_crt_info+0x1c>
 80202fc:	1a24      	subs	r4, r4, r0
 80202fe:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8020300:	f106 026c 	add.w	r2, r6, #108	; 0x6c
 8020304:	4621      	mov	r1, r4
 8020306:	4628      	mov	r0, r5
 8020308:	f7ff fae8 	bl	801f8dc <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802030c:	2800      	cmp	r0, #0
 802030e:	dbad      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 8020310:	4284      	cmp	r4, r0
 8020312:	d9ab      	bls.n	802026c <mbedtls_x509_crt_info+0x1c>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 8020314:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
 8020318:	9305      	str	r3, [sp, #20]
 802031a:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 802031e:	9304      	str	r3, [sp, #16]
 8020320:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8020324:	9303      	str	r3, [sp, #12]
 8020326:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 802032a:	9302      	str	r3, [sp, #8]
 802032c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8020330:	9301      	str	r3, [sp, #4]
 8020332:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8020336:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020338:	1a24      	subs	r4, r4, r0
 802033a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 802033c:	4643      	mov	r3, r8
 802033e:	4a65      	ldr	r2, [pc, #404]	; (80204d4 <mbedtls_x509_crt_info+0x284>)
 8020340:	4621      	mov	r1, r4
 8020342:	4628      	mov	r0, r5
 8020344:	f003 f9ae 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020348:	2800      	cmp	r0, #0
 802034a:	db8f      	blt.n	802026c <mbedtls_x509_crt_info+0x1c>
 802034c:	4284      	cmp	r4, r0
 802034e:	d98d      	bls.n	802026c <mbedtls_x509_crt_info+0x1c>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 8020350:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
 8020354:	9305      	str	r3, [sp, #20]
 8020356:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 802035a:	9304      	str	r3, [sp, #16]
 802035c:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 8020360:	9303      	str	r3, [sp, #12]
 8020362:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8020366:	9302      	str	r3, [sp, #8]
 8020368:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 802036c:	9301      	str	r3, [sp, #4]
 802036e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8020372:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020374:	1a24      	subs	r4, r4, r0
 8020376:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 8020378:	4643      	mov	r3, r8
 802037a:	4a57      	ldr	r2, [pc, #348]	; (80204d8 <mbedtls_x509_crt_info+0x288>)
 802037c:	4621      	mov	r1, r4
 802037e:	4628      	mov	r0, r5
 8020380:	f003 f990 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020384:	2800      	cmp	r0, #0
 8020386:	f6ff af71 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 802038a:	4284      	cmp	r4, r0
 802038c:	f67f af6e 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020390:	1a24      	subs	r4, r4, r0
 8020392:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8020394:	4643      	mov	r3, r8
 8020396:	4a51      	ldr	r2, [pc, #324]	; (80204dc <mbedtls_x509_crt_info+0x28c>)
 8020398:	4621      	mov	r1, r4
 802039a:	4628      	mov	r0, r5
 802039c:	f003 f982 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203a0:	2800      	cmp	r0, #0
 80203a2:	f6ff af63 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 80203a6:	4284      	cmp	r4, r0
 80203a8:	f67f af60 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 80203ac:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
 80203b0:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
 80203b4:	9201      	str	r2, [sp, #4]
 80203b6:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
 80203ba:	9200      	str	r2, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203bc:	1a24      	subs	r4, r4, r0
 80203be:	4405      	add	r5, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 80203c0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80203c4:	4621      	mov	r1, r4
 80203c6:	4628      	mov	r0, r5
 80203c8:	f7ff fb52 	bl	801fa70 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203cc:	f1b0 0900 	subs.w	r9, r0, #0
 80203d0:	f6ff af4c 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 80203d4:	454c      	cmp	r4, r9
 80203d6:	f67f af49 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 80203da:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
 80203de:	4658      	mov	r0, fp
 80203e0:	f7f5 fa62 	bl	80158a8 <mbedtls_pk_get_name>
 80203e4:	f10d 0a1c 	add.w	sl, sp, #28
 80203e8:	4602      	mov	r2, r0
 80203ea:	2112      	movs	r1, #18
 80203ec:	4650      	mov	r0, sl
 80203ee:	f7ff fb9d 	bl	801fb2c <mbedtls_x509_key_size_helper>
 80203f2:	2800      	cmp	r0, #0
 80203f4:	f040 81f1 	bne.w	80207da <mbedtls_x509_crt_info+0x58a>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80203f8:	4658      	mov	r0, fp
 80203fa:	f7f5 f9df 	bl	80157bc <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203fe:	eba4 0409 	sub.w	r4, r4, r9
 8020402:	444d      	add	r5, r9
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 8020404:	e9cd a000 	strd	sl, r0, [sp]
 8020408:	4643      	mov	r3, r8
 802040a:	4a35      	ldr	r2, [pc, #212]	; (80204e0 <mbedtls_x509_crt_info+0x290>)
 802040c:	4621      	mov	r1, r4
 802040e:	4628      	mov	r0, r5
 8020410:	f003 f948 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020414:	2800      	cmp	r0, #0
 8020416:	f6ff af29 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 802041a:	4284      	cmp	r4, r0
 802041c:	f67f af26 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8020420:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8020424:	05db      	lsls	r3, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020426:	eba4 0400 	sub.w	r4, r4, r0
 802042a:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 802042c:	d525      	bpl.n	802047a <mbedtls_x509_crt_info+0x22a>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 802042e:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 8020432:	4a2c      	ldr	r2, [pc, #176]	; (80204e4 <mbedtls_x509_crt_info+0x294>)
 8020434:	4b2c      	ldr	r3, [pc, #176]	; (80204e8 <mbedtls_x509_crt_info+0x298>)
 8020436:	2900      	cmp	r1, #0
 8020438:	bf08      	it	eq
 802043a:	4613      	moveq	r3, r2
 802043c:	9300      	str	r3, [sp, #0]
 802043e:	4a2b      	ldr	r2, [pc, #172]	; (80204ec <mbedtls_x509_crt_info+0x29c>)
 8020440:	4643      	mov	r3, r8
 8020442:	4621      	mov	r1, r4
 8020444:	4628      	mov	r0, r5
 8020446:	f003 f92d 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802044a:	2800      	cmp	r0, #0
 802044c:	f6ff af0e 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020450:	4284      	cmp	r4, r0
 8020452:	f67f af0b 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
        if( crt->max_pathlen > 0 )
 8020456:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 802045a:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 802045c:	eba4 0400 	sub.w	r4, r4, r0
 8020460:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 8020462:	dd0a      	ble.n	802047a <mbedtls_x509_crt_info+0x22a>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8020464:	3b01      	subs	r3, #1
 8020466:	4a22      	ldr	r2, [pc, #136]	; (80204f0 <mbedtls_x509_crt_info+0x2a0>)
 8020468:	4621      	mov	r1, r4
 802046a:	4628      	mov	r0, r5
 802046c:	f003 f91a 	bl	80236a4 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8020470:	4284      	cmp	r4, r0
 8020472:	f67f aefb 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020476:	1a24      	subs	r4, r4, r0
 8020478:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 802047a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 802047e:	0698      	lsls	r0, r3, #26
 8020480:	d550      	bpl.n	8020524 <mbedtls_x509_crt_info+0x2d4>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 8020482:	4643      	mov	r3, r8
 8020484:	4a1b      	ldr	r2, [pc, #108]	; (80204f4 <mbedtls_x509_crt_info+0x2a4>)
 8020486:	4621      	mov	r1, r4
 8020488:	4628      	mov	r0, r5
 802048a:	f003 f90b 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802048e:	2800      	cmp	r0, #0
 8020490:	f6ff aeec 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020494:	42a0      	cmp	r0, r4
 8020496:	f4bf aee9 	bcs.w	802026c <mbedtls_x509_crt_info+0x1c>
 802049a:	1a24      	subs	r4, r4, r0
 802049c:	4405      	add	r5, r0
    size_t sep_len = 0;
 802049e:	2100      	movs	r1, #0
    const char *sep = "";
 80204a0:	4815      	ldr	r0, [pc, #84]	; (80204f8 <mbedtls_x509_crt_info+0x2a8>)
        sep = ", ";
 80204a2:	f8df c058 	ldr.w	ip, [pc, #88]	; 80204fc <mbedtls_x509_crt_info+0x2ac>
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 80204a6:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
 80204aa:	468e      	mov	lr, r1
        if( cur->buf.len + sep_len >= n )
 80204ac:	6853      	ldr	r3, [r2, #4]
 80204ae:	440b      	add	r3, r1
 80204b0:	42a3      	cmp	r3, r4
 80204b2:	d325      	bcc.n	8020500 <mbedtls_x509_crt_info+0x2b0>
            *p = '\0';
 80204b4:	f885 e000 	strb.w	lr, [r5]
 80204b8:	e6d8      	b.n	802026c <mbedtls_x509_crt_info+0x1c>
 80204ba:	bf00      	nop
 80204bc:	08032aa2 	.word	0x08032aa2
 80204c0:	ffffd680 	.word	0xffffd680
 80204c4:	08032ac2 	.word	0x08032ac2
 80204c8:	08032adc 	.word	0x08032adc
 80204cc:	08032af3 	.word	0x08032af3
 80204d0:	08032b0b 	.word	0x08032b0b
 80204d4:	08032b23 	.word	0x08032b23
 80204d8:	08032b58 	.word	0x08032b58
 80204dc:	08032b8d 	.word	0x08032b8d
 80204e0:	08032ba5 	.word	0x08032ba5
 80204e4:	08032a9c 	.word	0x08032a9c
 80204e8:	08032a97 	.word	0x08032a97
 80204ec:	08032bb7 	.word	0x08032bb7
 80204f0:	08032bd4 	.word	0x08032bd4
 80204f4:	08032be5 	.word	0x08032be5
 80204f8:	0802fdc9 	.word	0x0802fdc9
 80204fc:	08032933 	.word	0x08032933
        n -= cur->buf.len + sep_len;
 8020500:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
 8020502:	2300      	movs	r3, #0
 8020504:	428b      	cmp	r3, r1
 8020506:	f040 816b 	bne.w	80207e0 <mbedtls_x509_crt_info+0x590>
 802050a:	441d      	add	r5, r3
 802050c:	4628      	mov	r0, r5
        for( i = 0; i < cur->buf.len; i++ )
 802050e:	6853      	ldr	r3, [r2, #4]
 8020510:	1a29      	subs	r1, r5, r0
 8020512:	428b      	cmp	r3, r1
 8020514:	f200 816a 	bhi.w	80207ec <mbedtls_x509_crt_info+0x59c>
        cur = cur->next;
 8020518:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
 802051a:	2102      	movs	r1, #2
        sep = ", ";
 802051c:	4660      	mov	r0, ip
    while( cur != NULL )
 802051e:	2a00      	cmp	r2, #0
 8020520:	d1c4      	bne.n	80204ac <mbedtls_x509_crt_info+0x25c>
    *p = '\0';
 8020522:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8020524:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8020528:	03d9      	lsls	r1, r3, #15
 802052a:	f140 8081 	bpl.w	8020630 <mbedtls_x509_crt_info+0x3e0>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 802052e:	4643      	mov	r3, r8
 8020530:	4ab2      	ldr	r2, [pc, #712]	; (80207fc <mbedtls_x509_crt_info+0x5ac>)
 8020532:	4621      	mov	r1, r4
 8020534:	4628      	mov	r0, r5
 8020536:	f003 f8b5 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802053a:	2800      	cmp	r0, #0
 802053c:	f6ff ae96 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020540:	42a0      	cmp	r0, r4
 8020542:	f4bf ae93 	bcs.w	802026c <mbedtls_x509_crt_info+0x1c>
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8020546:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 802054a:	4bad      	ldr	r3, [pc, #692]	; (8020800 <mbedtls_x509_crt_info+0x5b0>)
 802054c:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020550:	eba4 0400 	sub.w	r4, r4, r0
 8020554:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8020556:	d00a      	beq.n	802056e <mbedtls_x509_crt_info+0x31e>
 8020558:	4aaa      	ldr	r2, [pc, #680]	; (8020804 <mbedtls_x509_crt_info+0x5b4>)
 802055a:	4621      	mov	r1, r4
 802055c:	4628      	mov	r0, r5
 802055e:	f003 f8a1 	bl	80236a4 <sniprintf>
 8020562:	2c0a      	cmp	r4, #10
 8020564:	f67f ae82 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020568:	4ba7      	ldr	r3, [pc, #668]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 802056a:	3c0a      	subs	r4, #10
 802056c:	350a      	adds	r5, #10
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 802056e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8020572:	d00a      	beq.n	802058a <mbedtls_x509_crt_info+0x33a>
 8020574:	4aa5      	ldr	r2, [pc, #660]	; (802080c <mbedtls_x509_crt_info+0x5bc>)
 8020576:	4621      	mov	r1, r4
 8020578:	4628      	mov	r0, r5
 802057a:	f003 f893 	bl	80236a4 <sniprintf>
 802057e:	4284      	cmp	r4, r0
 8020580:	f67f ae74 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020584:	4ba0      	ldr	r3, [pc, #640]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 8020586:	1a24      	subs	r4, r4, r0
 8020588:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 802058a:	f019 0f20 	tst.w	r9, #32
 802058e:	d00a      	beq.n	80205a6 <mbedtls_x509_crt_info+0x356>
 8020590:	4a9f      	ldr	r2, [pc, #636]	; (8020810 <mbedtls_x509_crt_info+0x5c0>)
 8020592:	4621      	mov	r1, r4
 8020594:	4628      	mov	r0, r5
 8020596:	f003 f885 	bl	80236a4 <sniprintf>
 802059a:	4284      	cmp	r4, r0
 802059c:	f67f ae66 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80205a0:	4b99      	ldr	r3, [pc, #612]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 80205a2:	1a24      	subs	r4, r4, r0
 80205a4:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 80205a6:	f019 0f10 	tst.w	r9, #16
 80205aa:	d00a      	beq.n	80205c2 <mbedtls_x509_crt_info+0x372>
 80205ac:	4a99      	ldr	r2, [pc, #612]	; (8020814 <mbedtls_x509_crt_info+0x5c4>)
 80205ae:	4621      	mov	r1, r4
 80205b0:	4628      	mov	r0, r5
 80205b2:	f003 f877 	bl	80236a4 <sniprintf>
 80205b6:	4284      	cmp	r4, r0
 80205b8:	f67f ae58 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80205bc:	4b92      	ldr	r3, [pc, #584]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 80205be:	1a24      	subs	r4, r4, r0
 80205c0:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 80205c2:	f019 0f08 	tst.w	r9, #8
 80205c6:	d00a      	beq.n	80205de <mbedtls_x509_crt_info+0x38e>
 80205c8:	4a93      	ldr	r2, [pc, #588]	; (8020818 <mbedtls_x509_crt_info+0x5c8>)
 80205ca:	4621      	mov	r1, r4
 80205cc:	4628      	mov	r0, r5
 80205ce:	f003 f869 	bl	80236a4 <sniprintf>
 80205d2:	4284      	cmp	r4, r0
 80205d4:	f67f ae4a 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80205d8:	4b8b      	ldr	r3, [pc, #556]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 80205da:	1a24      	subs	r4, r4, r0
 80205dc:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 80205de:	f019 0f04 	tst.w	r9, #4
 80205e2:	d00a      	beq.n	80205fa <mbedtls_x509_crt_info+0x3aa>
 80205e4:	4a8d      	ldr	r2, [pc, #564]	; (802081c <mbedtls_x509_crt_info+0x5cc>)
 80205e6:	4621      	mov	r1, r4
 80205e8:	4628      	mov	r0, r5
 80205ea:	f003 f85b 	bl	80236a4 <sniprintf>
 80205ee:	4284      	cmp	r4, r0
 80205f0:	f67f ae3c 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80205f4:	4b84      	ldr	r3, [pc, #528]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 80205f6:	1a24      	subs	r4, r4, r0
 80205f8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 80205fa:	f019 0f02 	tst.w	r9, #2
 80205fe:	d00a      	beq.n	8020616 <mbedtls_x509_crt_info+0x3c6>
 8020600:	4a87      	ldr	r2, [pc, #540]	; (8020820 <mbedtls_x509_crt_info+0x5d0>)
 8020602:	4621      	mov	r1, r4
 8020604:	4628      	mov	r0, r5
 8020606:	f003 f84d 	bl	80236a4 <sniprintf>
 802060a:	4284      	cmp	r4, r0
 802060c:	f67f ae2e 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020610:	4b7d      	ldr	r3, [pc, #500]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 8020612:	1a24      	subs	r4, r4, r0
 8020614:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8020616:	f019 0f01 	tst.w	r9, #1
 802061a:	d009      	beq.n	8020630 <mbedtls_x509_crt_info+0x3e0>
 802061c:	4a81      	ldr	r2, [pc, #516]	; (8020824 <mbedtls_x509_crt_info+0x5d4>)
 802061e:	4621      	mov	r1, r4
 8020620:	4628      	mov	r0, r5
 8020622:	f003 f83f 	bl	80236a4 <sniprintf>
 8020626:	4284      	cmp	r4, r0
 8020628:	f67f ae20 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 802062c:	1a24      	subs	r4, r4, r0
 802062e:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 8020630:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8020634:	075a      	lsls	r2, r3, #29
 8020636:	f140 808f 	bpl.w	8020758 <mbedtls_x509_crt_info+0x508>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 802063a:	4643      	mov	r3, r8
 802063c:	4a7a      	ldr	r2, [pc, #488]	; (8020828 <mbedtls_x509_crt_info+0x5d8>)
 802063e:	4621      	mov	r1, r4
 8020640:	4628      	mov	r0, r5
 8020642:	f003 f82f 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020646:	2800      	cmp	r0, #0
 8020648:	f6ff ae10 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 802064c:	42a0      	cmp	r0, r4
 802064e:	f4bf ae0d 	bcs.w	802026c <mbedtls_x509_crt_info+0x1c>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8020652:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8020656:	4b6a      	ldr	r3, [pc, #424]	; (8020800 <mbedtls_x509_crt_info+0x5b0>)
 8020658:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 802065c:	eba4 0400 	sub.w	r4, r4, r0
 8020660:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8020662:	d00a      	beq.n	802067a <mbedtls_x509_crt_info+0x42a>
 8020664:	4a71      	ldr	r2, [pc, #452]	; (802082c <mbedtls_x509_crt_info+0x5dc>)
 8020666:	4621      	mov	r1, r4
 8020668:	4628      	mov	r0, r5
 802066a:	f003 f81b 	bl	80236a4 <sniprintf>
 802066e:	2c11      	cmp	r4, #17
 8020670:	f67f adfc 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020674:	4b64      	ldr	r3, [pc, #400]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 8020676:	3c11      	subs	r4, #17
 8020678:	3511      	adds	r5, #17
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 802067a:	f019 0f40 	tst.w	r9, #64	; 0x40
 802067e:	d00a      	beq.n	8020696 <mbedtls_x509_crt_info+0x446>
 8020680:	4a6b      	ldr	r2, [pc, #428]	; (8020830 <mbedtls_x509_crt_info+0x5e0>)
 8020682:	4621      	mov	r1, r4
 8020684:	4628      	mov	r0, r5
 8020686:	f003 f80d 	bl	80236a4 <sniprintf>
 802068a:	4284      	cmp	r4, r0
 802068c:	f67f adee 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020690:	4b5d      	ldr	r3, [pc, #372]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 8020692:	1a24      	subs	r4, r4, r0
 8020694:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8020696:	f019 0f20 	tst.w	r9, #32
 802069a:	d00a      	beq.n	80206b2 <mbedtls_x509_crt_info+0x462>
 802069c:	4a65      	ldr	r2, [pc, #404]	; (8020834 <mbedtls_x509_crt_info+0x5e4>)
 802069e:	4621      	mov	r1, r4
 80206a0:	4628      	mov	r0, r5
 80206a2:	f002 ffff 	bl	80236a4 <sniprintf>
 80206a6:	4284      	cmp	r4, r0
 80206a8:	f67f ade0 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80206ac:	4b56      	ldr	r3, [pc, #344]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 80206ae:	1a24      	subs	r4, r4, r0
 80206b0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 80206b2:	f019 0f10 	tst.w	r9, #16
 80206b6:	d00a      	beq.n	80206ce <mbedtls_x509_crt_info+0x47e>
 80206b8:	4a5f      	ldr	r2, [pc, #380]	; (8020838 <mbedtls_x509_crt_info+0x5e8>)
 80206ba:	4621      	mov	r1, r4
 80206bc:	4628      	mov	r0, r5
 80206be:	f002 fff1 	bl	80236a4 <sniprintf>
 80206c2:	4284      	cmp	r4, r0
 80206c4:	f67f add2 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80206c8:	4b4f      	ldr	r3, [pc, #316]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 80206ca:	1a24      	subs	r4, r4, r0
 80206cc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 80206ce:	f019 0f08 	tst.w	r9, #8
 80206d2:	d00a      	beq.n	80206ea <mbedtls_x509_crt_info+0x49a>
 80206d4:	4a59      	ldr	r2, [pc, #356]	; (802083c <mbedtls_x509_crt_info+0x5ec>)
 80206d6:	4621      	mov	r1, r4
 80206d8:	4628      	mov	r0, r5
 80206da:	f002 ffe3 	bl	80236a4 <sniprintf>
 80206de:	4284      	cmp	r4, r0
 80206e0:	f67f adc4 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80206e4:	4b48      	ldr	r3, [pc, #288]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 80206e6:	1a24      	subs	r4, r4, r0
 80206e8:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 80206ea:	f019 0f04 	tst.w	r9, #4
 80206ee:	d00a      	beq.n	8020706 <mbedtls_x509_crt_info+0x4b6>
 80206f0:	4a53      	ldr	r2, [pc, #332]	; (8020840 <mbedtls_x509_crt_info+0x5f0>)
 80206f2:	4621      	mov	r1, r4
 80206f4:	4628      	mov	r0, r5
 80206f6:	f002 ffd5 	bl	80236a4 <sniprintf>
 80206fa:	4284      	cmp	r4, r0
 80206fc:	f67f adb6 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020700:	4b41      	ldr	r3, [pc, #260]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 8020702:	1a24      	subs	r4, r4, r0
 8020704:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8020706:	f019 0f02 	tst.w	r9, #2
 802070a:	d00a      	beq.n	8020722 <mbedtls_x509_crt_info+0x4d2>
 802070c:	4a4d      	ldr	r2, [pc, #308]	; (8020844 <mbedtls_x509_crt_info+0x5f4>)
 802070e:	4621      	mov	r1, r4
 8020710:	4628      	mov	r0, r5
 8020712:	f002 ffc7 	bl	80236a4 <sniprintf>
 8020716:	4284      	cmp	r4, r0
 8020718:	f67f ada8 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 802071c:	4b3a      	ldr	r3, [pc, #232]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 802071e:	1a24      	subs	r4, r4, r0
 8020720:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8020722:	f019 0f01 	tst.w	r9, #1
 8020726:	d00a      	beq.n	802073e <mbedtls_x509_crt_info+0x4ee>
 8020728:	4a47      	ldr	r2, [pc, #284]	; (8020848 <mbedtls_x509_crt_info+0x5f8>)
 802072a:	4621      	mov	r1, r4
 802072c:	4628      	mov	r0, r5
 802072e:	f002 ffb9 	bl	80236a4 <sniprintf>
 8020732:	4284      	cmp	r4, r0
 8020734:	f67f ad9a 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020738:	4b33      	ldr	r3, [pc, #204]	; (8020808 <mbedtls_x509_crt_info+0x5b8>)
 802073a:	1a24      	subs	r4, r4, r0
 802073c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 802073e:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8020742:	d009      	beq.n	8020758 <mbedtls_x509_crt_info+0x508>
 8020744:	4a41      	ldr	r2, [pc, #260]	; (802084c <mbedtls_x509_crt_info+0x5fc>)
 8020746:	4621      	mov	r1, r4
 8020748:	4628      	mov	r0, r5
 802074a:	f002 ffab 	bl	80236a4 <sniprintf>
 802074e:	4284      	cmp	r4, r0
 8020750:	f67f ad8c 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020754:	1a24      	subs	r4, r4, r0
 8020756:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8020758:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 802075c:	051b      	lsls	r3, r3, #20
 802075e:	d532      	bpl.n	80207c6 <mbedtls_x509_crt_info+0x576>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8020760:	4643      	mov	r3, r8
 8020762:	4a3b      	ldr	r2, [pc, #236]	; (8020850 <mbedtls_x509_crt_info+0x600>)
 8020764:	4621      	mov	r1, r4
 8020766:	4628      	mov	r0, r5
 8020768:	f002 ff9c 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802076c:	2800      	cmp	r0, #0
 802076e:	f6ff ad7d 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 8020772:	42a0      	cmp	r0, r4
 8020774:	f4bf ad7a 	bcs.w	802026c <mbedtls_x509_crt_info+0x1c>
    const char *sep = "";
 8020778:	f8df b084 	ldr.w	fp, [pc, #132]	; 8020800 <mbedtls_x509_crt_info+0x5b0>
            desc = "???";
 802077c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8020858 <mbedtls_x509_crt_info+0x608>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8020780:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 802085c <mbedtls_x509_crt_info+0x60c>
        sep = ", ";
 8020784:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8020808 <mbedtls_x509_crt_info+0x5b8>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020788:	1a24      	subs	r4, r4, r0
 802078a:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 802078c:	f506 7684 	add.w	r6, r6, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8020790:	a906      	add	r1, sp, #24
 8020792:	4630      	mov	r0, r6
 8020794:	f7f4 fce4 	bl	8015160 <mbedtls_oid_get_extended_key_usage>
 8020798:	b108      	cbz	r0, 802079e <mbedtls_x509_crt_info+0x54e>
            desc = "???";
 802079a:	f8cd 9018 	str.w	r9, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 802079e:	9b06      	ldr	r3, [sp, #24]
 80207a0:	9300      	str	r3, [sp, #0]
 80207a2:	4652      	mov	r2, sl
 80207a4:	465b      	mov	r3, fp
 80207a6:	4621      	mov	r1, r4
 80207a8:	4628      	mov	r0, r5
 80207aa:	f002 ff7b 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80207ae:	2800      	cmp	r0, #0
 80207b0:	f6ff ad5c 	blt.w	802026c <mbedtls_x509_crt_info+0x1c>
 80207b4:	42a0      	cmp	r0, r4
 80207b6:	f4bf ad59 	bcs.w	802026c <mbedtls_x509_crt_info+0x1c>
        cur = cur->next;
 80207ba:	68f6      	ldr	r6, [r6, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
 80207bc:	1a24      	subs	r4, r4, r0
 80207be:	4405      	add	r5, r0
        sep = ", ";
 80207c0:	46c3      	mov	fp, r8
    while( cur != NULL )
 80207c2:	2e00      	cmp	r6, #0
 80207c4:	d1e4      	bne.n	8020790 <mbedtls_x509_crt_info+0x540>
    ret = mbedtls_snprintf( p, n, "\n" );
 80207c6:	4a23      	ldr	r2, [pc, #140]	; (8020854 <mbedtls_x509_crt_info+0x604>)
 80207c8:	4621      	mov	r1, r4
 80207ca:	4628      	mov	r0, r5
 80207cc:	f002 ff6a 	bl	80236a4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80207d0:	2c01      	cmp	r4, #1
 80207d2:	f67f ad4b 	bls.w	802026c <mbedtls_x509_crt_info+0x1c>
 80207d6:	1e60      	subs	r0, r4, #1
    return( (int) ( size - n ) );
 80207d8:	1a38      	subs	r0, r7, r0
}
 80207da:	b00d      	add	sp, #52	; 0x34
 80207dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *p++ = sep[i];
 80207e0:	f810 9003 	ldrb.w	r9, [r0, r3]
 80207e4:	f805 9003 	strb.w	r9, [r5, r3]
        for( i = 0; i < sep_len; i++ )
 80207e8:	3301      	adds	r3, #1
 80207ea:	e68b      	b.n	8020504 <mbedtls_x509_crt_info+0x2b4>
            *p++ = cur->buf.p[i];
 80207ec:	6893      	ldr	r3, [r2, #8]
 80207ee:	5c5b      	ldrb	r3, [r3, r1]
 80207f0:	f805 3b01 	strb.w	r3, [r5], #1
 80207f4:	e68b      	b.n	802050e <mbedtls_x509_crt_info+0x2be>
 80207f6:	201f      	movs	r0, #31
 80207f8:	e7ef      	b.n	80207da <mbedtls_x509_crt_info+0x58a>
 80207fa:	bf00      	nop
 80207fc:	08032bfd 	.word	0x08032bfd
 8020800:	0802fdc9 	.word	0x0802fdc9
 8020804:	08032c15 	.word	0x08032c15
 8020808:	08032933 	.word	0x08032933
 802080c:	08032c22 	.word	0x08032c22
 8020810:	08032c2f 	.word	0x08032c2f
 8020814:	08032c37 	.word	0x08032c37
 8020818:	08032c48 	.word	0x08032c48
 802081c:	08032c53 	.word	0x08032c53
 8020820:	08032c5c 	.word	0x08032c5c
 8020824:	08032c67 	.word	0x08032c67
 8020828:	08032c7b 	.word	0x08032c7b
 802082c:	08032c93 	.word	0x08032c93
 8020830:	08032ca7 	.word	0x08032ca7
 8020834:	08032cb9 	.word	0x08032cb9
 8020838:	08032ccc 	.word	0x08032ccc
 802083c:	08032ce0 	.word	0x08032ce0
 8020840:	08032cf0 	.word	0x08032cf0
 8020844:	08032d00 	.word	0x08032d00
 8020848:	08032d0b 	.word	0x08032d0b
 802084c:	08032d1b 	.word	0x08032d1b
 8020850:	08032d2b 	.word	0x08032d2b
 8020854:	08030031 	.word	0x08030031
 8020858:	08032945 	.word	0x08032945
 802085c:	0802faba 	.word	0x0802faba

08020860 <mbedtls_x509_crt_verify_info>:
{
 8020860:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8020864:	4e1b      	ldr	r6, [pc, #108]	; (80208d4 <mbedtls_x509_crt_verify_info+0x74>)
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8020866:	f8df a078 	ldr.w	sl, [pc, #120]	; 80208e0 <mbedtls_x509_crt_verify_info+0x80>
{
 802086a:	4607      	mov	r7, r0
 802086c:	460d      	mov	r5, r1
 802086e:	4691      	mov	r9, r2
 8020870:	4698      	mov	r8, r3
    size_t n = size;
 8020872:	460c      	mov	r4, r1
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8020874:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8020878:	b97b      	cbnz	r3, 802089a <mbedtls_x509_crt_verify_info+0x3a>
    if( flags != 0 )
 802087a:	f1b8 0f00 	cmp.w	r8, #0
 802087e:	d00a      	beq.n	8020896 <mbedtls_x509_crt_verify_info+0x36>
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
 8020880:	464b      	mov	r3, r9
 8020882:	4a15      	ldr	r2, [pc, #84]	; (80208d8 <mbedtls_x509_crt_verify_info+0x78>)
 8020884:	4621      	mov	r1, r4
 8020886:	4638      	mov	r0, r7
 8020888:	f002 ff0c 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802088c:	2800      	cmp	r0, #0
 802088e:	db12      	blt.n	80208b6 <mbedtls_x509_crt_verify_info+0x56>
 8020890:	42a0      	cmp	r0, r4
 8020892:	d210      	bcs.n	80208b6 <mbedtls_x509_crt_verify_info+0x56>
 8020894:	1a24      	subs	r4, r4, r0
    return( (int) ( size - n ) );
 8020896:	1b28      	subs	r0, r5, r4
 8020898:	e00e      	b.n	80208b8 <mbedtls_x509_crt_verify_info+0x58>
        if( ( flags & cur->code ) == 0 )
 802089a:	f856 2c08 	ldr.w	r2, [r6, #-8]
 802089e:	ea18 0f02 	tst.w	r8, r2
 80208a2:	d014      	beq.n	80208ce <mbedtls_x509_crt_verify_info+0x6e>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 80208a4:	9300      	str	r3, [sp, #0]
 80208a6:	4652      	mov	r2, sl
 80208a8:	464b      	mov	r3, r9
 80208aa:	4621      	mov	r1, r4
 80208ac:	4638      	mov	r0, r7
 80208ae:	f002 fef9 	bl	80236a4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80208b2:	2800      	cmp	r0, #0
 80208b4:	da03      	bge.n	80208be <mbedtls_x509_crt_verify_info+0x5e>
 80208b6:	4809      	ldr	r0, [pc, #36]	; (80208dc <mbedtls_x509_crt_verify_info+0x7c>)
}
 80208b8:	b002      	add	sp, #8
 80208ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 80208be:	42a0      	cmp	r0, r4
 80208c0:	d2f9      	bcs.n	80208b6 <mbedtls_x509_crt_verify_info+0x56>
        flags ^= cur->code;
 80208c2:	f856 3c08 	ldr.w	r3, [r6, #-8]
        MBEDTLS_X509_SAFE_SNPRINTF;
 80208c6:	1a24      	subs	r4, r4, r0
 80208c8:	4407      	add	r7, r0
        flags ^= cur->code;
 80208ca:	ea88 0803 	eor.w	r8, r8, r3
 80208ce:	3608      	adds	r6, #8
 80208d0:	e7d0      	b.n	8020874 <mbedtls_x509_crt_verify_info+0x14>
 80208d2:	bf00      	nop
 80208d4:	0802cfa4 	.word	0x0802cfa4
 80208d8:	08032d49 	.word	0x08032d49
 80208dc:	ffffd680 	.word	0xffffd680
 80208e0:	08032d43 	.word	0x08032d43

080208e4 <mbedtls_x509_crt_check_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80208e4:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 80208e8:	f013 0304 	ands.w	r3, r3, #4
 80208ec:	d012      	beq.n	8020914 <mbedtls_x509_crt_check_key_usage+0x30>
    usage_must = usage & ~may_mask;
 80208ee:	f421 4200 	bic.w	r2, r1, #32768	; 0x8000
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80208f2:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    usage_must = usage & ~may_mask;
 80208f6:	f022 0201 	bic.w	r2, r2, #1
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80208fa:	ea32 0300 	bics.w	r3, r2, r0
 80208fe:	d10b      	bne.n	8020918 <mbedtls_x509_crt_check_key_usage+0x34>
    usage_may = usage & may_mask;
 8020900:	f248 0301 	movw	r3, #32769	; 0x8001
 8020904:	ea01 0203 	and.w	r2, r1, r3
    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8020908:	4301      	orrs	r1, r0
 802090a:	4019      	ands	r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802090c:	4b03      	ldr	r3, [pc, #12]	; (802091c <mbedtls_x509_crt_check_key_usage+0x38>)
 802090e:	428a      	cmp	r2, r1
 8020910:	bf08      	it	eq
 8020912:	2300      	moveq	r3, #0
}
 8020914:	4618      	mov	r0, r3
 8020916:	4770      	bx	lr
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020918:	4b00      	ldr	r3, [pc, #0]	; (802091c <mbedtls_x509_crt_check_key_usage+0x38>)
 802091a:	e7fb      	b.n	8020914 <mbedtls_x509_crt_check_key_usage+0x30>
 802091c:	ffffd800 	.word	0xffffd800

08020920 <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8020920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020924:	4606      	mov	r6, r0
 8020926:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8020928:	304c      	adds	r0, #76	; 0x4c
 802092a:	316c      	adds	r1, #108	; 0x6c
{
 802092c:	4617      	mov	r7, r2
 802092e:	4698      	mov	r8, r3
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8020930:	f7ff fbd2 	bl	80200d8 <x509_name_cmp>
 8020934:	4604      	mov	r4, r0
 8020936:	b9e8      	cbnz	r0, 8020974 <x509_crt_check_parent+0x54>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8020938:	b177      	cbz	r7, 8020958 <x509_crt_check_parent+0x38>
 802093a:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 802093c:	f1b8 0f00 	cmp.w	r8, #0
 8020940:	d008      	beq.n	8020954 <x509_crt_check_parent+0x34>
        child->raw.len == parent->raw.len &&
 8020942:	6872      	ldr	r2, [r6, #4]
    if( top && bottom &&
 8020944:	686b      	ldr	r3, [r5, #4]
 8020946:	429a      	cmp	r2, r3
 8020948:	d104      	bne.n	8020954 <x509_crt_check_parent+0x34>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 802094a:	68a9      	ldr	r1, [r5, #8]
 802094c:	68b0      	ldr	r0, [r6, #8]
 802094e:	f001 fcbb 	bl	80222c8 <memcmp>
        child->raw.len == parent->raw.len &&
 8020952:	b160      	cbz	r0, 802096e <x509_crt_check_parent+0x4e>
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 8020954:	2f02      	cmp	r7, #2
 8020956:	dd0a      	ble.n	802096e <x509_crt_check_parent+0x4e>
 8020958:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 802095c:	b153      	cbz	r3, 8020974 <x509_crt_check_parent+0x54>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 802095e:	2104      	movs	r1, #4
 8020960:	4628      	mov	r0, r5
 8020962:	f7ff ffbf 	bl	80208e4 <mbedtls_x509_crt_check_key_usage>
    if( need_ca_bit &&
 8020966:	3000      	adds	r0, #0
 8020968:	bf18      	it	ne
 802096a:	2001      	movne	r0, #1
 802096c:	4244      	negs	r4, r0
        return( -1 );
    }
#endif

    return( 0 );
}
 802096e:	4620      	mov	r0, r4
 8020970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( -1 );
 8020974:	f04f 34ff 	mov.w	r4, #4294967295
 8020978:	e7f9      	b.n	802096e <x509_crt_check_parent+0x4e>
	...

0802097c <mbedtls_x509_crt_check_extended_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 802097c:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
 8020980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020984:	4604      	mov	r4, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020986:	f413 6000 	ands.w	r0, r3, #2048	; 0x800
{
 802098a:	460f      	mov	r7, r1
 802098c:	4616      	mov	r6, r2
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 802098e:	d018      	beq.n	80209c2 <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 8020990:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80209cc <mbedtls_x509_crt_check_extended_key_usage+0x50>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 8020994:	f504 7484 	add.w	r4, r4, #264	; 0x108
        if( cur_oid->len == usage_len &&
 8020998:	6865      	ldr	r5, [r4, #4]
 802099a:	42b5      	cmp	r5, r6
 802099c:	d105      	bne.n	80209aa <mbedtls_x509_crt_check_extended_key_usage+0x2e>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
 802099e:	4632      	mov	r2, r6
 80209a0:	4639      	mov	r1, r7
 80209a2:	68a0      	ldr	r0, [r4, #8]
 80209a4:	f001 fc90 	bl	80222c8 <memcmp>
        if( cur_oid->len == usage_len &&
 80209a8:	b158      	cbz	r0, 80209c2 <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 80209aa:	2d04      	cmp	r5, #4
 80209ac:	d105      	bne.n	80209ba <mbedtls_x509_crt_check_extended_key_usage+0x3e>
 80209ae:	462a      	mov	r2, r5
 80209b0:	68a1      	ldr	r1, [r4, #8]
 80209b2:	4640      	mov	r0, r8
 80209b4:	f001 fc88 	bl	80222c8 <memcmp>
 80209b8:	b118      	cbz	r0, 80209c2 <mbedtls_x509_crt_check_extended_key_usage+0x46>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 80209ba:	68e4      	ldr	r4, [r4, #12]
 80209bc:	2c00      	cmp	r4, #0
 80209be:	d1eb      	bne.n	8020998 <mbedtls_x509_crt_check_extended_key_usage+0x1c>
    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80209c0:	4801      	ldr	r0, [pc, #4]	; (80209c8 <mbedtls_x509_crt_check_extended_key_usage+0x4c>)
}
 80209c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209c6:	bf00      	nop
 80209c8:	ffffd800 	.word	0xffffd800
 80209cc:	0802d044 	.word	0x0802d044

080209d0 <mbedtls_x509_crt_is_revoked>:
{
 80209d0:	b538      	push	{r3, r4, r5, lr}
 80209d2:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 80209d4:	f101 0484 	add.w	r4, r1, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
 80209d8:	b1ac      	cbz	r4, 8020a06 <mbedtls_x509_crt_is_revoked+0x36>
 80209da:	6920      	ldr	r0, [r4, #16]
 80209dc:	b900      	cbnz	r0, 80209e0 <mbedtls_x509_crt_is_revoked+0x10>
}
 80209de:	bd38      	pop	{r3, r4, r5, pc}
        if( crt->serial.len == cur->serial.len &&
 80209e0:	6a2a      	ldr	r2, [r5, #32]
 80209e2:	4282      	cmp	r2, r0
 80209e4:	d001      	beq.n	80209ea <mbedtls_x509_crt_is_revoked+0x1a>
        cur = cur->next;
 80209e6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80209e8:	e7f6      	b.n	80209d8 <mbedtls_x509_crt_is_revoked+0x8>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80209ea:	6961      	ldr	r1, [r4, #20]
 80209ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80209ee:	f001 fc6b 	bl	80222c8 <memcmp>
        if( crt->serial.len == cur->serial.len &&
 80209f2:	2800      	cmp	r0, #0
 80209f4:	d1f7      	bne.n	80209e6 <mbedtls_x509_crt_is_revoked+0x16>
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 80209f6:	f104 0018 	add.w	r0, r4, #24
 80209fa:	f7ff f8a9 	bl	801fb50 <mbedtls_x509_time_is_past>
 80209fe:	2800      	cmp	r0, #0
 8020a00:	d0f1      	beq.n	80209e6 <mbedtls_x509_crt_is_revoked+0x16>
                return( 1 );
 8020a02:	2001      	movs	r0, #1
 8020a04:	e7eb      	b.n	80209de <mbedtls_x509_crt_is_revoked+0xe>
    return( 0 );
 8020a06:	4620      	mov	r0, r4
 8020a08:	e7e9      	b.n	80209de <mbedtls_x509_crt_is_revoked+0xe>

08020a0a <x509_crt_verifycrl.part.7>:
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
 8020a0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a0e:	b099      	sub	sp, #100	; 0x64
 8020a10:	460e      	mov	r6, r1
 8020a12:	9005      	str	r0, [sp, #20]
 8020a14:	4614      	mov	r4, r2
 8020a16:	461f      	mov	r7, r3
    int flags = 0;
 8020a18:	2500      	movs	r5, #0
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020a1a:	f04f 0a01 	mov.w	sl, #1
    while( crl_list != NULL )
 8020a1e:	b1a4      	cbz	r4, 8020a4a <x509_crt_verifycrl.part.7+0x40>
        if( crl_list->version == 0 ||
 8020a20:	69a3      	ldr	r3, [r4, #24]
 8020a22:	b143      	cbz	r3, 8020a36 <x509_crt_verifycrl.part.7+0x2c>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8020a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if( crl_list->version == 0 ||
 8020a26:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8020a28:	429a      	cmp	r2, r3
 8020a2a:	d104      	bne.n	8020a36 <x509_crt_verifycrl.part.7+0x2c>
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 8020a2c:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8020a2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020a30:	f001 fc4a 	bl	80222c8 <memcmp>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8020a34:	b110      	cbz	r0, 8020a3c <x509_crt_verifycrl.part.7+0x32>
        crl_list = crl_list->next;
 8020a36:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8020a3a:	e7f0      	b.n	8020a1e <x509_crt_verifycrl.part.7+0x14>
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8020a3c:	2102      	movs	r1, #2
 8020a3e:	4630      	mov	r0, r6
 8020a40:	f7ff ff50 	bl	80208e4 <mbedtls_x509_crt_check_key_usage>
 8020a44:	b128      	cbz	r0, 8020a52 <x509_crt_verifycrl.part.7+0x48>
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 8020a46:	f045 0510 	orr.w	r5, r5, #16
}
 8020a4a:	4628      	mov	r0, r5
 8020a4c:	b019      	add	sp, #100	; 0x64
 8020a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8020a52:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020a56:	683a      	ldr	r2, [r7, #0]
 8020a58:	1e43      	subs	r3, r0, #1
 8020a5a:	fa0a f303 	lsl.w	r3, sl, r3
 8020a5e:	4213      	tst	r3, r2
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8020a60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8020a64:	f04f 0201 	mov.w	r2, #1
 8020a68:	f103 33ff 	add.w	r3, r3, #4294967295
 8020a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8020a70:	687a      	ldr	r2, [r7, #4]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8020a72:	bf08      	it	eq
 8020a74:	f445 3500 	orreq.w	r5, r5, #131072	; 0x20000
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8020a78:	4213      	tst	r3, r2
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 8020a7a:	bf08      	it	eq
 8020a7c:	f445 2580 	orreq.w	r5, r5, #262144	; 0x40000
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8020a80:	f7f3 fcfc 	bl	801447c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8020a84:	4683      	mov	fp, r0
 8020a86:	2800      	cmp	r0, #0
 8020a88:	d0dd      	beq.n	8020a46 <x509_crt_verifycrl.part.7+0x3c>
        mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash );
 8020a8a:	f10d 0920 	add.w	r9, sp, #32
 8020a8e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020a92:	464b      	mov	r3, r9
        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8020a94:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
        mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash );
 8020a98:	f7f3 fd72 	bl	8014580 <mbedtls_md>
        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8020a9c:	4642      	mov	r2, r8
 8020a9e:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8020aa2:	4638      	mov	r0, r7
 8020aa4:	f7ff fbb1 	bl	802020a <x509_profile_check_key>
 8020aa8:	b108      	cbz	r0, 8020aae <x509_crt_verifycrl.part.7+0xa4>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020aaa:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020aae:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8020ab2:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8020ab6:	9304      	str	r3, [sp, #16]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020ab8:	4658      	mov	r0, fp
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020aba:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8020abe:	9107      	str	r1, [sp, #28]
 8020ac0:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020ac2:	f7f3 fe2b 	bl	801471c <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020ac6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8020aca:	9203      	str	r2, [sp, #12]
 8020acc:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8020ad0:	9b06      	ldr	r3, [sp, #24]
 8020ad2:	f8cd 9000 	str.w	r9, [sp]
 8020ad6:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8020ada:	9907      	ldr	r1, [sp, #28]
 8020adc:	9804      	ldr	r0, [sp, #16]
 8020ade:	4642      	mov	r2, r8
 8020ae0:	f7f4 fe74 	bl	80157cc <mbedtls_pk_verify_ext>
 8020ae4:	2800      	cmp	r0, #0
 8020ae6:	d1ae      	bne.n	8020a46 <x509_crt_verifycrl.part.7+0x3c>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 8020ae8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8020aec:	f7ff f830 	bl	801fb50 <mbedtls_x509_time_is_past>
 8020af0:	b108      	cbz	r0, 8020af6 <x509_crt_verifycrl.part.7+0xec>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 8020af2:	f045 0520 	orr.w	r5, r5, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 8020af6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8020afa:	f7ff f838 	bl	801fb6e <mbedtls_x509_time_is_future>
 8020afe:	b108      	cbz	r0, 8020b04 <x509_crt_verifycrl.part.7+0xfa>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 8020b00:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 8020b04:	4621      	mov	r1, r4
 8020b06:	9805      	ldr	r0, [sp, #20]
 8020b08:	f7ff ff62 	bl	80209d0 <mbedtls_x509_crt_is_revoked>
 8020b0c:	2800      	cmp	r0, #0
 8020b0e:	d092      	beq.n	8020a36 <x509_crt_verifycrl.part.7+0x2c>
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 8020b10:	f045 0502 	orr.w	r5, r5, #2
 8020b14:	e799      	b.n	8020a4a <x509_crt_verifycrl.part.7+0x40>

08020b16 <x509_crt_verify_top>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8020b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b1a:	b09d      	sub	sp, #116	; 0x74
 8020b1c:	4604      	mov	r4, r0
 8020b1e:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020b20:	30a4      	adds	r0, #164	; 0xa4
    uint32_t ca_flags = 0;
 8020b22:	2300      	movs	r3, #0
{
 8020b24:	460f      	mov	r7, r1
 8020b26:	9206      	str	r2, [sp, #24]
 8020b28:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
    uint32_t ca_flags = 0;
 8020b2c:	930b      	str	r3, [sp, #44]	; 0x2c
{
 8020b2e:	e9dd 5a28 	ldrd	r5, sl, [sp, #160]	; 0xa0
    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020b32:	f7ff f80d 	bl	801fb50 <mbedtls_x509_time_is_past>
 8020b36:	b118      	cbz	r0, 8020b40 <x509_crt_verify_top+0x2a>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020b38:	682b      	ldr	r3, [r5, #0]
 8020b3a:	f043 0301 	orr.w	r3, r3, #1
 8020b3e:	602b      	str	r3, [r5, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020b40:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8020b44:	f7ff f813 	bl	801fb6e <mbedtls_x509_time_is_future>
 8020b48:	b118      	cbz	r0, 8020b52 <x509_crt_verify_top+0x3c>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020b4a:	682b      	ldr	r3, [r5, #0]
 8020b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020b50:	602b      	str	r3, [r5, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020b52:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020b56:	2301      	movs	r3, #1
 8020b58:	1e42      	subs	r2, r0, #1
 8020b5a:	4093      	lsls	r3, r2
 8020b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8020b60:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020b62:	bf02      	ittt	eq
 8020b64:	682b      	ldreq	r3, [r5, #0]
 8020b66:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020b6a:	602b      	streq	r3, [r5, #0]
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8020b6c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8020b70:	1e5a      	subs	r2, r3, #1
 8020b72:	2301      	movs	r3, #1
 8020b74:	4093      	lsls	r3, r2
 8020b76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8020b7a:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020b7c:	bf02      	ittt	eq
 8020b7e:	682b      	ldreq	r3, [r5, #0]
 8020b80:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020b84:	602b      	streq	r3, [r5, #0]

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020b86:	682b      	ldr	r3, [r5, #0]
 8020b88:	f043 0308 	orr.w	r3, r3, #8
 8020b8c:	602b      	str	r3, [r5, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020b8e:	f7f3 fc75 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020b92:	9005      	str	r0, [sp, #20]
 8020b94:	b160      	cbz	r0, 8020bb0 <x509_crt_verify_top+0x9a>
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020b96:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8020b9a:	465b      	mov	r3, fp
 8020b9c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020ba0:	f7f3 fcee 	bl	8014580 <mbedtls_md>
 8020ba4:	2600      	movs	r6, #0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020ba6:	f8cd b01c 	str.w	fp, [sp, #28]
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020baa:	b937      	cbnz	r7, 8020bba <x509_crt_verify_top+0xa4>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 8020bac:	2e00      	cmp	r6, #0
 8020bae:	d153      	bne.n	8020c58 <x509_crt_verify_top+0x142>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 8020bb0:	f1ba 0f00 	cmp.w	sl, #0
 8020bb4:	f040 8099 	bne.w	8020cea <x509_crt_verify_top+0x1d4>
 8020bb8:	e087      	b.n	8020cca <x509_crt_verify_top+0x1b4>
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 8020bba:	fab8 f388 	clz	r3, r8
 8020bbe:	095b      	lsrs	r3, r3, #5
 8020bc0:	2201      	movs	r2, #1
 8020bc2:	4639      	mov	r1, r7
 8020bc4:	4620      	mov	r0, r4
 8020bc6:	f7ff feab 	bl	8020920 <x509_crt_check_parent>
 8020bca:	2800      	cmp	r0, #0
 8020bcc:	d13a      	bne.n	8020c44 <x509_crt_verify_top+0x12e>
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020bce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020bd2:	429a      	cmp	r2, r3
        check_path_cnt = path_cnt + 1;
 8020bd4:	f108 0b01 	add.w	fp, r8, #1
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020bd8:	d107      	bne.n	8020bea <x509_crt_verify_top+0xd4>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020bda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020bdc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8020bde:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020be0:	f001 fb72 	bl	80222c8 <memcmp>
            check_path_cnt--;
 8020be4:	2800      	cmp	r0, #0
 8020be6:	bf08      	it	eq
 8020be8:	46c3      	moveq	fp, r8
        if( trust_ca->max_pathlen > 0 &&
 8020bea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	dd04      	ble.n	8020bfc <x509_crt_verify_top+0xe6>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 8020bf2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020bf4:	ebab 0b02 	sub.w	fp, fp, r2
        if( trust_ca->max_pathlen > 0 &&
 8020bf8:	455b      	cmp	r3, fp
 8020bfa:	db23      	blt.n	8020c44 <x509_crt_verify_top+0x12e>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020bfc:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8020c00:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020c04:	9805      	ldr	r0, [sp, #20]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020c06:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 8020c0a:	9109      	str	r1, [sp, #36]	; 0x24
 8020c0c:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020c0e:	f7f3 fd85 	bl	801471c <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020c12:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8020c16:	9203      	str	r2, [sp, #12]
 8020c18:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8020c1c:	9b07      	ldr	r3, [sp, #28]
 8020c1e:	9300      	str	r3, [sp, #0]
 8020c20:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8020c24:	9b08      	ldr	r3, [sp, #32]
 8020c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020c28:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8020c2c:	4658      	mov	r0, fp
 8020c2e:	f7f4 fdcd 	bl	80157cc <mbedtls_pk_verify_ext>
 8020c32:	b938      	cbnz	r0, 8020c44 <x509_crt_verify_top+0x12e>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020c34:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8020c38:	f7fe ff8a 	bl	801fb50 <mbedtls_x509_time_is_past>
 8020c3c:	b128      	cbz	r0, 8020c4a <x509_crt_verify_top+0x134>
 8020c3e:	2e00      	cmp	r6, #0
 8020c40:	bf08      	it	eq
 8020c42:	463e      	moveq	r6, r7
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020c44:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 8020c48:	e7af      	b.n	8020baa <x509_crt_verify_top+0x94>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020c4a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8020c4e:	f7fe ff8e 	bl	801fb6e <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020c52:	2800      	cmp	r0, #0
 8020c54:	d1f3      	bne.n	8020c3e <x509_crt_verify_top+0x128>
 8020c56:	463e      	mov	r6, r7
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020c58:	682b      	ldr	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8020c5a:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020c5e:	f023 0308 	bic.w	r3, r3, #8
 8020c62:	602b      	str	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8020c64:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020c68:	4648      	mov	r0, r9
 8020c6a:	f7ff face 	bl	802020a <x509_profile_check_key>
 8020c6e:	b118      	cbz	r0, 8020c78 <x509_crt_verify_top+0x162>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020c70:	682b      	ldr	r3, [r5, #0]
 8020c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020c76:	602b      	str	r3, [r5, #0]
    if( trust_ca != NULL &&
 8020c78:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020c7a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8020c7c:	429a      	cmp	r2, r3
 8020c7e:	d106      	bne.n	8020c8e <x509_crt_verify_top+0x178>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020c80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020c82:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8020c84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020c86:	f001 fb1f 	bl	80222c8 <memcmp>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8020c8a:	2800      	cmp	r0, #0
 8020c8c:	d090      	beq.n	8020bb0 <x509_crt_verify_top+0x9a>
 8020c8e:	464b      	mov	r3, r9
 8020c90:	9a06      	ldr	r2, [sp, #24]
 8020c92:	4631      	mov	r1, r6
 8020c94:	4620      	mov	r0, r4
 8020c96:	f7ff feb8 	bl	8020a0a <x509_crt_verifycrl.part.7>
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8020c9a:	682b      	ldr	r3, [r5, #0]
 8020c9c:	4318      	orrs	r0, r3
 8020c9e:	6028      	str	r0, [r5, #0]
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8020ca0:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 8020ca4:	f7fe ff54 	bl	801fb50 <mbedtls_x509_time_is_past>
 8020ca8:	b118      	cbz	r0, 8020cb2 <x509_crt_verify_top+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cac:	f043 0301 	orr.w	r3, r3, #1
 8020cb0:	930b      	str	r3, [sp, #44]	; 0x2c
        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020cb2:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 8020cb6:	f7fe ff5a 	bl	801fb6e <mbedtls_x509_time_is_future>
 8020cba:	b118      	cbz	r0, 8020cc4 <x509_crt_verify_top+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020cc2:	930b      	str	r3, [sp, #44]	; 0x2c
        if( NULL != f_vrfy )
 8020cc4:	f1ba 0f00 	cmp.w	sl, #0
 8020cc8:	d107      	bne.n	8020cda <x509_crt_verify_top+0x1c4>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8020cca:	682b      	ldr	r3, [r5, #0]
 8020ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020cce:	4313      	orrs	r3, r2
 8020cd0:	602b      	str	r3, [r5, #0]

    return( 0 );
 8020cd2:	2000      	movs	r0, #0
}
 8020cd4:	b01d      	add	sp, #116	; 0x74
 8020cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 8020cda:	ab0b      	add	r3, sp, #44	; 0x2c
 8020cdc:	f108 0201 	add.w	r2, r8, #1
 8020ce0:	4631      	mov	r1, r6
 8020ce2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8020ce4:	47d0      	blx	sl
 8020ce6:	2800      	cmp	r0, #0
 8020ce8:	d1f4      	bne.n	8020cd4 <x509_crt_verify_top+0x1be>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8020cea:	462b      	mov	r3, r5
 8020cec:	4642      	mov	r2, r8
 8020cee:	4621      	mov	r1, r4
 8020cf0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8020cf2:	47d0      	blx	sl
 8020cf4:	2800      	cmp	r0, #0
 8020cf6:	d0e8      	beq.n	8020cca <x509_crt_verify_top+0x1b4>
 8020cf8:	e7ec      	b.n	8020cd4 <x509_crt_verify_top+0x1be>
	...

08020cfc <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8020cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d00:	b09d      	sub	sp, #116	; 0x74
 8020d02:	e9dd 8726 	ldrd	r8, r7, [sp, #152]	; 0x98
 8020d06:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 8020d08:	2300      	movs	r3, #0
{
 8020d0a:	4605      	mov	r5, r0
 8020d0c:	460e      	mov	r6, r1
 8020d0e:	9206      	str	r2, [sp, #24]
 8020d10:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    uint32_t parent_flags = 0;
 8020d12:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 8020d14:	b15f      	cbz	r7, 8020d2e <x509_crt_verify_child+0x32>
 8020d16:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8020d1a:	304c      	adds	r0, #76	; 0x4c
 8020d1c:	f7ff f9dc 	bl	80200d8 <x509_name_cmp>
 8020d20:	b910      	cbnz	r0, 8020d28 <x509_crt_verify_child+0x2c>
        self_cnt++;
 8020d22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d24:	3301      	adds	r3, #1
 8020d26:	9328      	str	r3, [sp, #160]	; 0xa0

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 8020d28:	2f08      	cmp	r7, #8
 8020d2a:	f000 80b4 	beq.w	8020e96 <x509_crt_verify_child+0x19a>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020d2e:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8020d32:	f7fe ff0d 	bl	801fb50 <mbedtls_x509_time_is_past>
 8020d36:	b118      	cbz	r0, 8020d40 <x509_crt_verify_child+0x44>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020d38:	6823      	ldr	r3, [r4, #0]
 8020d3a:	f043 0301 	orr.w	r3, r3, #1
 8020d3e:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020d40:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8020d44:	f7fe ff13 	bl	801fb6e <mbedtls_x509_time_is_future>
 8020d48:	b118      	cbz	r0, 8020d52 <x509_crt_verify_child+0x56>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020d4a:	6823      	ldr	r3, [r4, #0]
 8020d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020d50:	6023      	str	r3, [r4, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020d52:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020d56:	2301      	movs	r3, #1
 8020d58:	1e42      	subs	r2, r0, #1
 8020d5a:	4093      	lsls	r3, r2
 8020d5c:	f8d8 2000 	ldr.w	r2, [r8]
 8020d60:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020d62:	bf02      	ittt	eq
 8020d64:	6823      	ldreq	r3, [r4, #0]
 8020d66:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020d6a:	6023      	streq	r3, [r4, #0]
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8020d6c:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8020d70:	1e5a      	subs	r2, r3, #1
 8020d72:	2301      	movs	r3, #1
 8020d74:	4093      	lsls	r3, r2
 8020d76:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020d7a:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020d7c:	bf02      	ittt	eq
 8020d7e:	6823      	ldreq	r3, [r4, #0]
 8020d80:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020d84:	6023      	streq	r3, [r4, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020d86:	f7f3 fb79 	bl	801447c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020d8a:	4683      	mov	fp, r0
 8020d8c:	b920      	cbnz	r0, 8020d98 <x509_crt_verify_child+0x9c>

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020d8e:	6823      	ldr	r3, [r4, #0]
 8020d90:	f043 0308 	orr.w	r3, r3, #8
 8020d94:	6023      	str	r3, [r4, #0]
 8020d96:	e02e      	b.n	8020df6 <x509_crt_verify_child+0xfa>
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020d98:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8020d9c:	ab0c      	add	r3, sp, #48	; 0x30
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8020d9e:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020da2:	f7f3 fbed 	bl	8014580 <mbedtls_md>
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8020da6:	464a      	mov	r2, r9
 8020da8:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 8020dac:	4640      	mov	r0, r8
 8020dae:	f7ff fa2c 	bl	802020a <x509_profile_check_key>
 8020db2:	b118      	cbz	r0, 8020dbc <x509_crt_verify_child+0xc0>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020db4:	6823      	ldr	r3, [r4, #0]
 8020db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020dba:	6023      	str	r3, [r4, #0]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020dbc:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8020dc0:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 8020dc4:	9307      	str	r3, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020dc6:	4658      	mov	r0, fp
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020dc8:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 8020dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8020dce:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020dd0:	f7f3 fca4 	bl	801471c <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020dd4:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 8020dd8:	9203      	str	r2, [sp, #12]
 8020dda:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8020dde:	9b08      	ldr	r3, [sp, #32]
 8020de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020de2:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8020de6:	aa0c      	add	r2, sp, #48	; 0x30
 8020de8:	9200      	str	r2, [sp, #0]
 8020dea:	9807      	ldr	r0, [sp, #28]
 8020dec:	464a      	mov	r2, r9
 8020dee:	f7f4 fced 	bl	80157cc <mbedtls_pk_verify_ext>
 8020df2:	2800      	cmp	r0, #0
 8020df4:	d1cb      	bne.n	8020d8e <x509_crt_verify_child+0x92>
    if( ca == NULL )
 8020df6:	b1ae      	cbz	r6, 8020e24 <x509_crt_verify_child+0x128>
 8020df8:	4643      	mov	r3, r8
 8020dfa:	4652      	mov	r2, sl
 8020dfc:	4631      	mov	r1, r6
 8020dfe:	4628      	mov	r0, r5
 8020e00:	f7ff fe03 	bl	8020a0a <x509_crt_verifycrl.part.7>
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020e04:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8020e06:	f8dd 9018 	ldr.w	r9, [sp, #24]
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020e0a:	4303      	orrs	r3, r0
 8020e0c:	6023      	str	r3, [r4, #0]
    for( grandparent = trust_ca;
 8020e0e:	f1b9 0f00 	cmp.w	r9, #0
 8020e12:	d109      	bne.n	8020e28 <x509_crt_verify_child+0x12c>
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020e14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
        for( grandparent = parent->next;
 8020e16:	f8d6 9130 	ldr.w	r9, [r6, #304]	; 0x130
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020e1a:	f107 0b02 	add.w	fp, r7, #2
 8020e1e:	ebab 0b03 	sub.w	fp, fp, r3
        for( grandparent = parent->next;
 8020e22:	e01f      	b.n	8020e64 <x509_crt_verify_child+0x168>
        return( flags );
 8020e24:	4630      	mov	r0, r6
 8020e26:	e7ed      	b.n	8020e04 <x509_crt_verify_child+0x108>
        if( x509_crt_check_parent( parent, grandparent,
 8020e28:	fab7 f387 	clz	r3, r7
 8020e2c:	095b      	lsrs	r3, r3, #5
 8020e2e:	2200      	movs	r2, #0
 8020e30:	4649      	mov	r1, r9
 8020e32:	4630      	mov	r0, r6
 8020e34:	f7ff fd74 	bl	8020920 <x509_crt_check_parent>
 8020e38:	b378      	cbz	r0, 8020e9a <x509_crt_verify_child+0x19e>
         grandparent = grandparent->next )
 8020e3a:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8020e3e:	e7e6      	b.n	8020e0e <x509_crt_verify_child+0x112>
            if( grandparent->max_pathlen > 0 &&
 8020e40:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	dd01      	ble.n	8020e4c <x509_crt_verify_child+0x150>
 8020e48:	455b      	cmp	r3, fp
 8020e4a:	db09      	blt.n	8020e60 <x509_crt_verify_child+0x164>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 8020e4c:	fab7 f387 	clz	r3, r7
 8020e50:	095b      	lsrs	r3, r3, #5
 8020e52:	2200      	movs	r2, #0
 8020e54:	4649      	mov	r1, r9
 8020e56:	4630      	mov	r0, r6
 8020e58:	f7ff fd62 	bl	8020920 <x509_crt_check_parent>
 8020e5c:	2800      	cmp	r0, #0
 8020e5e:	d02d      	beq.n	8020ebc <x509_crt_verify_child+0x1c0>
             grandparent = grandparent->next )
 8020e60:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
        for( grandparent = parent->next;
 8020e64:	f1b9 0f00 	cmp.w	r9, #0
 8020e68:	d1ea      	bne.n	8020e40 <x509_crt_verify_child+0x144>
            if( ret != 0 )
                return( ret );
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 8020e6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020e6c:	9304      	str	r3, [sp, #16]
 8020e6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e70:	9303      	str	r3, [sp, #12]
 8020e72:	ab0b      	add	r3, sp, #44	; 0x2c
 8020e74:	9302      	str	r3, [sp, #8]
 8020e76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e78:	9301      	str	r3, [sp, #4]
 8020e7a:	1c7b      	adds	r3, r7, #1
 8020e7c:	9300      	str	r3, [sp, #0]
 8020e7e:	4652      	mov	r2, sl
 8020e80:	4643      	mov	r3, r8
 8020e82:	9906      	ldr	r1, [sp, #24]
 8020e84:	e016      	b.n	8020eb4 <x509_crt_verify_child+0x1b8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8020e86:	4629      	mov	r1, r5
 8020e88:	4623      	mov	r3, r4
 8020e8a:	463a      	mov	r2, r7
 8020e8c:	e9dd 502a 	ldrd	r5, r0, [sp, #168]	; 0xa8
 8020e90:	47a8      	blx	r5
 8020e92:	b340      	cbz	r0, 8020ee6 <x509_crt_verify_child+0x1ea>
 8020e94:	e02c      	b.n	8020ef0 <x509_crt_verify_child+0x1f4>
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8020e96:	4818      	ldr	r0, [pc, #96]	; (8020ef8 <x509_crt_verify_child+0x1fc>)
 8020e98:	e02a      	b.n	8020ef0 <x509_crt_verify_child+0x1f4>
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 8020e9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020e9c:	9304      	str	r3, [sp, #16]
 8020e9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ea0:	9303      	str	r3, [sp, #12]
 8020ea2:	ab0b      	add	r3, sp, #44	; 0x2c
 8020ea4:	9302      	str	r3, [sp, #8]
 8020ea6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ea8:	9301      	str	r3, [sp, #4]
 8020eaa:	1c7b      	adds	r3, r7, #1
 8020eac:	9300      	str	r3, [sp, #0]
 8020eae:	4652      	mov	r2, sl
 8020eb0:	4643      	mov	r3, r8
 8020eb2:	4649      	mov	r1, r9
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 8020eb4:	4630      	mov	r0, r6
 8020eb6:	f7ff fe2e 	bl	8020b16 <x509_crt_verify_top>
 8020eba:	e010      	b.n	8020ede <x509_crt_verify_child+0x1e2>
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 8020ebc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020ebe:	9305      	str	r3, [sp, #20]
 8020ec0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ec2:	9304      	str	r3, [sp, #16]
 8020ec4:	ab0b      	add	r3, sp, #44	; 0x2c
 8020ec6:	9303      	str	r3, [sp, #12]
 8020ec8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020eca:	9302      	str	r3, [sp, #8]
 8020ecc:	1c7b      	adds	r3, r7, #1
 8020ece:	e9cd 8300 	strd	r8, r3, [sp]
 8020ed2:	9a06      	ldr	r2, [sp, #24]
 8020ed4:	4653      	mov	r3, sl
 8020ed6:	4649      	mov	r1, r9
 8020ed8:	4630      	mov	r0, r6
 8020eda:	f7ff ff0f 	bl	8020cfc <x509_crt_verify_child>
            if( ret != 0 )
 8020ede:	b938      	cbnz	r0, 8020ef0 <x509_crt_verify_child+0x1f4>
    if( NULL != f_vrfy )
 8020ee0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d1cf      	bne.n	8020e86 <x509_crt_verify_child+0x18a>
            return( ret );

    *flags |= parent_flags;
 8020ee6:	6823      	ldr	r3, [r4, #0]
 8020ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020eea:	4313      	orrs	r3, r2
 8020eec:	6023      	str	r3, [r4, #0]

    return( 0 );
 8020eee:	2000      	movs	r0, #0
}
 8020ef0:	b01d      	add	sp, #116	; 0x74
 8020ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ef6:	bf00      	nop
 8020ef8:	ffffd000 	.word	0xffffd000

08020efc <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8020efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f00:	b089      	sub	sp, #36	; 0x24
 8020f02:	e9dd 8412 	ldrd	r8, r4, [sp, #72]	; 0x48
 8020f06:	4692      	mov	sl, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8020f08:	2200      	movs	r2, #0
{
 8020f0a:	4605      	mov	r5, r0
 8020f0c:	9106      	str	r1, [sp, #24]
    *flags = 0;
 8020f0e:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 8020f10:	461f      	mov	r7, r3
 8020f12:	2b00      	cmp	r3, #0
 8020f14:	f000 8093 	beq.w	802103e <mbedtls_x509_crt_verify_with_profile+0x142>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 8020f18:	f1b8 0f00 	cmp.w	r8, #0
 8020f1c:	d050      	beq.n	8020fc0 <mbedtls_x509_crt_verify_with_profile+0xc4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8020f1e:	4640      	mov	r0, r8
 8020f20:	f7df f960 	bl	80001e4 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8020f24:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
 8020f28:	069b      	lsls	r3, r3, #26
        cn_len = strlen( cn );
 8020f2a:	4681      	mov	r9, r0
        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8020f2c:	d427      	bmi.n	8020f7e <mbedtls_x509_crt_verify_with_profile+0x82>
        name = &crt->subject;
 8020f2e:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 8020f32:	6872      	ldr	r2, [r6, #4]
 8020f34:	2a03      	cmp	r2, #3
 8020f36:	d11e      	bne.n	8020f76 <mbedtls_x509_crt_verify_with_profile+0x7a>
 8020f38:	68b1      	ldr	r1, [r6, #8]
 8020f3a:	4859      	ldr	r0, [pc, #356]	; (80210a0 <mbedtls_x509_crt_verify_with_profile+0x1a4>)
 8020f3c:	f001 f9c4 	bl	80222c8 <memcmp>
 8020f40:	b9c8      	cbnz	r0, 8020f76 <mbedtls_x509_crt_verify_with_profile+0x7a>
                {
                    if( name->val.len == cn_len &&
 8020f42:	f8d6 b010 	ldr.w	fp, [r6, #16]
 8020f46:	45cb      	cmp	fp, r9
 8020f48:	d106      	bne.n	8020f58 <mbedtls_x509_crt_verify_with_profile+0x5c>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8020f4a:	464a      	mov	r2, r9
 8020f4c:	4641      	mov	r1, r8
 8020f4e:	6970      	ldr	r0, [r6, #20]
 8020f50:	f7ff f8aa 	bl	80200a8 <x509_memcasecmp>
                    if( name->val.len == cn_len &&
 8020f54:	2800      	cmp	r0, #0
 8020f56:	d033      	beq.n	8020fc0 <mbedtls_x509_crt_verify_with_profile+0xc4>
                        break;

                    if( name->val.len > 2 &&
 8020f58:	f1bb 0f02 	cmp.w	fp, #2
 8020f5c:	d90b      	bls.n	8020f76 <mbedtls_x509_crt_verify_with_profile+0x7a>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8020f5e:	2202      	movs	r2, #2
 8020f60:	4950      	ldr	r1, [pc, #320]	; (80210a4 <mbedtls_x509_crt_verify_with_profile+0x1a8>)
 8020f62:	6970      	ldr	r0, [r6, #20]
 8020f64:	f001 f9b0 	bl	80222c8 <memcmp>
                    if( name->val.len > 2 &&
 8020f68:	b928      	cbnz	r0, 8020f76 <mbedtls_x509_crt_verify_with_profile+0x7a>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 8020f6a:	f106 010c 	add.w	r1, r6, #12
 8020f6e:	4640      	mov	r0, r8
 8020f70:	f7ff f903 	bl	802017a <x509_check_wildcard>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8020f74:	b320      	cbz	r0, 8020fc0 <mbedtls_x509_crt_verify_with_profile+0xc4>
                        break;
                }

                name = name->next;
 8020f76:	69b6      	ldr	r6, [r6, #24]
            while( name != NULL )
 8020f78:	2e00      	cmp	r6, #0
 8020f7a:	d1da      	bne.n	8020f32 <mbedtls_x509_crt_verify_with_profile+0x36>
 8020f7c:	e01e      	b.n	8020fbc <mbedtls_x509_crt_verify_with_profile+0xc0>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8020f7e:	f8df b124 	ldr.w	fp, [pc, #292]	; 80210a4 <mbedtls_x509_crt_verify_with_profile+0x1a8>
            cur = &crt->subject_alt_names;
 8020f82:	f105 06e8 	add.w	r6, r5, #232	; 0xe8
                if( cur->buf.len == cn_len &&
 8020f86:	6873      	ldr	r3, [r6, #4]
 8020f88:	454b      	cmp	r3, r9
 8020f8a:	d107      	bne.n	8020f9c <mbedtls_x509_crt_verify_with_profile+0xa0>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8020f8c:	464a      	mov	r2, r9
 8020f8e:	68b1      	ldr	r1, [r6, #8]
 8020f90:	9307      	str	r3, [sp, #28]
 8020f92:	4640      	mov	r0, r8
 8020f94:	f7ff f888 	bl	80200a8 <x509_memcasecmp>
                if( cur->buf.len == cn_len &&
 8020f98:	9b07      	ldr	r3, [sp, #28]
 8020f9a:	b188      	cbz	r0, 8020fc0 <mbedtls_x509_crt_verify_with_profile+0xc4>
                if( cur->buf.len > 2 &&
 8020f9c:	2b02      	cmp	r3, #2
 8020f9e:	d90a      	bls.n	8020fb6 <mbedtls_x509_crt_verify_with_profile+0xba>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8020fa0:	2202      	movs	r2, #2
 8020fa2:	4659      	mov	r1, fp
 8020fa4:	68b0      	ldr	r0, [r6, #8]
 8020fa6:	f001 f98f 	bl	80222c8 <memcmp>
                if( cur->buf.len > 2 &&
 8020faa:	b920      	cbnz	r0, 8020fb6 <mbedtls_x509_crt_verify_with_profile+0xba>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 8020fac:	4631      	mov	r1, r6
 8020fae:	4640      	mov	r0, r8
 8020fb0:	f7ff f8e3 	bl	802017a <x509_check_wildcard>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8020fb4:	b120      	cbz	r0, 8020fc0 <mbedtls_x509_crt_verify_with_profile+0xc4>
                cur = cur->next;
 8020fb6:	68f6      	ldr	r6, [r6, #12]
            while( cur != NULL )
 8020fb8:	2e00      	cmp	r6, #0
 8020fba:	d1e4      	bne.n	8020f86 <mbedtls_x509_crt_verify_with_profile+0x8a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8020fbc:	2304      	movs	r3, #4
 8020fbe:	6023      	str	r3, [r4, #0]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8020fc0:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 8020fc4:	4630      	mov	r0, r6
 8020fc6:	f7f4 fc79 	bl	80158bc <mbedtls_pk_get_type>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8020fca:	2301      	movs	r3, #1
 8020fcc:	1e42      	subs	r2, r0, #1
 8020fce:	4093      	lsls	r3, r2
 8020fd0:	687a      	ldr	r2, [r7, #4]
 8020fd2:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020fd4:	bf04      	itt	eq
 8020fd6:	6823      	ldreq	r3, [r4, #0]
 8020fd8:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8020fdc:	4601      	mov	r1, r0
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020fde:	bf08      	it	eq
 8020fe0:	6023      	streq	r3, [r4, #0]

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 8020fe2:	4632      	mov	r2, r6
 8020fe4:	4638      	mov	r0, r7
 8020fe6:	f7ff f910 	bl	802020a <x509_profile_check_key>
 8020fea:	b118      	cbz	r0, 8020ff4 <mbedtls_x509_crt_verify_with_profile+0xf8>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020fec:	6823      	ldr	r3, [r4, #0]
 8020fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020ff2:	6023      	str	r3, [r4, #0]
{
 8020ff4:	9e06      	ldr	r6, [sp, #24]

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8020ff6:	b916      	cbnz	r6, 8020ffe <mbedtls_x509_crt_verify_with_profile+0x102>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8020ff8:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 8020ffc:	e012      	b.n	8021024 <mbedtls_x509_crt_verify_with_profile+0x128>
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8020ffe:	2301      	movs	r3, #1
 8021000:	2200      	movs	r2, #0
 8021002:	4631      	mov	r1, r6
 8021004:	4628      	mov	r0, r5
 8021006:	f7ff fc8b 	bl	8020920 <x509_crt_check_parent>
 802100a:	b310      	cbz	r0, 8021052 <mbedtls_x509_crt_verify_with_profile+0x156>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 802100c:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8021010:	e7f1      	b.n	8020ff6 <mbedtls_x509_crt_verify_with_profile+0xfa>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8021012:	2301      	movs	r3, #1
 8021014:	2200      	movs	r2, #0
 8021016:	4631      	mov	r1, r6
 8021018:	4628      	mov	r0, r5
 802101a:	f7ff fc81 	bl	8020920 <x509_crt_check_parent>
 802101e:	b330      	cbz	r0, 802106e <mbedtls_x509_crt_verify_with_profile+0x172>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8021020:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8021024:	2e00      	cmp	r6, #0
 8021026:	d1f4      	bne.n	8021012 <mbedtls_x509_crt_verify_with_profile+0x116>
            if( ret != 0 )
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 8021028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802102a:	9304      	str	r3, [sp, #16]
 802102c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802102e:	9906      	ldr	r1, [sp, #24]
 8021030:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8021034:	e9cd 6600 	strd	r6, r6, [sp]
 8021038:	463b      	mov	r3, r7
 802103a:	4652      	mov	r2, sl
 802103c:	e013      	b.n	8021066 <mbedtls_x509_crt_verify_with_profile+0x16a>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 802103e:	481a      	ldr	r0, [pc, #104]	; (80210a8 <mbedtls_x509_crt_verify_with_profile+0x1ac>)
 8021040:	e028      	b.n	8021094 <mbedtls_x509_crt_verify_with_profile+0x198>
exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8021042:	481a      	ldr	r0, [pc, #104]	; (80210ac <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8021044:	e026      	b.n	8021094 <mbedtls_x509_crt_verify_with_profile+0x198>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 8021046:	6822      	ldr	r2, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 8021048:	4b19      	ldr	r3, [pc, #100]	; (80210b0 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 802104a:	2a00      	cmp	r2, #0
 802104c:	bf18      	it	ne
 802104e:	4618      	movne	r0, r3
 8021050:	e023      	b.n	802109a <mbedtls_x509_crt_verify_with_profile+0x19e>
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 8021052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021054:	9304      	str	r3, [sp, #16]
 8021056:	e9cd 0000 	strd	r0, r0, [sp]
 802105a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802105c:	4652      	mov	r2, sl
 802105e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8021062:	4631      	mov	r1, r6
 8021064:	463b      	mov	r3, r7
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 8021066:	4628      	mov	r0, r5
 8021068:	f7ff fd55 	bl	8020b16 <x509_crt_verify_top>
exit:
 802106c:	e00d      	b.n	802108a <mbedtls_x509_crt_verify_with_profile+0x18e>
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 802106e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021070:	9305      	str	r3, [sp, #20]
 8021072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021074:	9700      	str	r7, [sp, #0]
 8021076:	e9cd 4303 	strd	r4, r3, [sp, #12]
 802107a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 802107e:	4653      	mov	r3, sl
 8021080:	9a06      	ldr	r2, [sp, #24]
 8021082:	4631      	mov	r1, r6
 8021084:	4628      	mov	r0, r5
 8021086:	f7ff fe39 	bl	8020cfc <x509_crt_verify_child>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 802108a:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 802108e:	d0d8      	beq.n	8021042 <mbedtls_x509_crt_verify_with_profile+0x146>
    if( ret != 0 )
 8021090:	2800      	cmp	r0, #0
 8021092:	d0d8      	beq.n	8021046 <mbedtls_x509_crt_verify_with_profile+0x14a>
        *flags = (uint32_t) -1;
 8021094:	f04f 33ff 	mov.w	r3, #4294967295
 8021098:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 802109a:	b009      	add	sp, #36	; 0x24
 802109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210a0:	08030225 	.word	0x08030225
 80210a4:	08032d74 	.word	0x08032d74
 80210a8:	ffffd800 	.word	0xffffd800
 80210ac:	ffffd000 	.word	0xffffd000
 80210b0:	ffffd900 	.word	0xffffd900

080210b4 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80210b4:	f44f 729a 	mov.w	r2, #308	; 0x134
 80210b8:	2100      	movs	r1, #0
 80210ba:	f001 b938 	b.w	802232e <memset>
	...

080210c0 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80210c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80210c4:	4606      	mov	r6, r0
 80210c6:	2800      	cmp	r0, #0
 80210c8:	d034      	beq.n	8021134 <mbedtls_x509_crt_free+0x74>
    do
    {
        mbedtls_pk_free( &cert_cur->pk );

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
 80210ca:	4f31      	ldr	r7, [pc, #196]	; (8021190 <mbedtls_x509_crt_free+0xd0>)
 80210cc:	4604      	mov	r4, r0
 80210ce:	463d      	mov	r5, r7
        mbedtls_pk_free( &cert_cur->pk );
 80210d0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80210d4:	f7f4 fac7 	bl	8015666 <mbedtls_pk_free>
        mbedtls_free( cert_cur->sig_opts );
 80210d8:	683b      	ldr	r3, [r7, #0]
 80210da:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80210de:	4798      	blx	r3
#endif

        name_cur = cert_cur->issuer.next;
 80210e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80210e2:	bb4a      	cbnz	r2, 8021138 <mbedtls_x509_crt_free+0x78>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80210e4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80210e8:	2a00      	cmp	r2, #0
 80210ea:	d130      	bne.n	802114e <mbedtls_x509_crt_free+0x8e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80210ec:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80210f0:	2a00      	cmp	r2, #0
 80210f2:	d137      	bne.n	8021164 <mbedtls_x509_crt_free+0xa4>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 80210f4:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 80210f8:	2a00      	cmp	r2, #0
 80210fa:	d13e      	bne.n	802117a <mbedtls_x509_crt_free+0xba>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 80210fc:	68a0      	ldr	r0, [r4, #8]
 80210fe:	b128      	cbz	r0, 802110c <mbedtls_x509_crt_free+0x4c>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8021100:	6861      	ldr	r1, [r4, #4]
 8021102:	f7fe ffc9 	bl	8020098 <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 8021106:	682b      	ldr	r3, [r5, #0]
 8021108:	68a0      	ldr	r0, [r4, #8]
 802110a:	4798      	blx	r3
        }

        cert_cur = cert_cur->next;
 802110c:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8021110:	2c00      	cmp	r4, #0
 8021112:	d1dd      	bne.n	80210d0 <mbedtls_x509_crt_free+0x10>
 8021114:	4632      	mov	r2, r6
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8021116:	f44f 719a 	mov.w	r1, #308	; 0x134
 802111a:	4610      	mov	r0, r2
        cert_cur = cert_cur->next;
 802111c:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130
        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8021120:	f7fe ffba 	bl	8020098 <mbedtls_zeroize>
        if( cert_prv != crt )
 8021124:	4296      	cmp	r6, r2
 8021126:	d002      	beq.n	802112e <mbedtls_x509_crt_free+0x6e>
            mbedtls_free( cert_prv );
 8021128:	682b      	ldr	r3, [r5, #0]
 802112a:	4610      	mov	r0, r2
 802112c:	4798      	blx	r3
    }
    while( cert_cur != NULL );
 802112e:	4622      	mov	r2, r4
 8021130:	2c00      	cmp	r4, #0
 8021132:	d1f0      	bne.n	8021116 <mbedtls_x509_crt_free+0x56>
}
 8021134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021138:	4610      	mov	r0, r2
 802113a:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 802113c:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021140:	f7fe ffaa 	bl	8020098 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 8021144:	682b      	ldr	r3, [r5, #0]
 8021146:	4610      	mov	r0, r2
 8021148:	4798      	blx	r3
            name_cur = name_cur->next;
 802114a:	4642      	mov	r2, r8
 802114c:	e7c9      	b.n	80210e2 <mbedtls_x509_crt_free+0x22>
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802114e:	4610      	mov	r0, r2
 8021150:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 8021152:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021156:	f7fe ff9f 	bl	8020098 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 802115a:	682b      	ldr	r3, [r5, #0]
 802115c:	4610      	mov	r0, r2
 802115e:	4798      	blx	r3
            name_cur = name_cur->next;
 8021160:	4642      	mov	r2, r8
 8021162:	e7c1      	b.n	80210e8 <mbedtls_x509_crt_free+0x28>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021164:	4610      	mov	r0, r2
 8021166:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 8021168:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 802116c:	f7fe ff94 	bl	8020098 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 8021170:	682b      	ldr	r3, [r5, #0]
 8021172:	4610      	mov	r0, r2
 8021174:	4798      	blx	r3
            seq_cur = seq_cur->next;
 8021176:	4642      	mov	r2, r8
 8021178:	e7ba      	b.n	80210f0 <mbedtls_x509_crt_free+0x30>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 802117a:	4610      	mov	r0, r2
 802117c:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 802117e:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021182:	f7fe ff89 	bl	8020098 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 8021186:	682b      	ldr	r3, [r5, #0]
 8021188:	4610      	mov	r0, r2
 802118a:	4798      	blx	r3
            seq_cur = seq_cur->next;
 802118c:	4642      	mov	r2, r8
 802118e:	e7b3      	b.n	80210f8 <mbedtls_x509_crt_free+0x38>
 8021190:	200005a4 	.word	0x200005a4

08021194 <mbedtls_x509_crt_parse_der>:
{
 8021194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021198:	b09b      	sub	sp, #108	; 0x6c
 802119a:	460d      	mov	r5, r1
 802119c:	4617      	mov	r7, r2
    if( crt == NULL || buf == NULL )
 802119e:	9003      	str	r0, [sp, #12]
 80211a0:	2800      	cmp	r0, #0
 80211a2:	f000 8300 	beq.w	80217a6 <mbedtls_x509_crt_parse_der+0x612>
 80211a6:	2900      	cmp	r1, #0
 80211a8:	f000 82fd 	beq.w	80217a6 <mbedtls_x509_crt_parse_der+0x612>
 80211ac:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 80211ae:	f04f 0900 	mov.w	r9, #0
    while( crt->version != 0 && crt->next != NULL )
 80211b2:	69a3      	ldr	r3, [r4, #24]
 80211b4:	b1ab      	cbz	r3, 80211e2 <mbedtls_x509_crt_parse_der+0x4e>
 80211b6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80211ba:	46a1      	mov	r9, r4
 80211bc:	b953      	cbnz	r3, 80211d4 <mbedtls_x509_crt_parse_der+0x40>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80211be:	4bad      	ldr	r3, [pc, #692]	; (8021474 <mbedtls_x509_crt_parse_der+0x2e0>)
 80211c0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	2001      	movs	r0, #1
 80211c8:	4798      	blx	r3
 80211ca:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 80211ce:	b918      	cbnz	r0, 80211d8 <mbedtls_x509_crt_parse_der+0x44>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80211d0:	4da9      	ldr	r5, [pc, #676]	; (8021478 <mbedtls_x509_crt_parse_der+0x2e4>)
 80211d2:	e2d7      	b.n	8021784 <mbedtls_x509_crt_parse_der+0x5f0>
    while( crt->version != 0 && crt->next != NULL )
 80211d4:	461c      	mov	r4, r3
 80211d6:	e7ec      	b.n	80211b2 <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 80211d8:	f7ff ff6c 	bl	80210b4 <mbedtls_x509_crt_init>
        crt = crt->next;
 80211dc:	46a1      	mov	r9, r4
 80211de:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80211e2:	2300      	movs	r3, #0
 80211e4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80211e8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80211ec:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80211f0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80211f4:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 80211f6:	2c00      	cmp	r4, #0
 80211f8:	f000 82c8 	beq.w	802178c <mbedtls_x509_crt_parse_der+0x5f8>
    len = buflen;
 80211fc:	ae1a      	add	r6, sp, #104	; 0x68
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80211fe:	2330      	movs	r3, #48	; 0x30
    len = buflen;
 8021200:	f846 7d54 	str.w	r7, [r6, #-84]!
    end = p + len;
 8021204:	442f      	add	r7, r5
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021206:	4632      	mov	r2, r6
 8021208:	4639      	mov	r1, r7
 802120a:	a806      	add	r0, sp, #24
    p = (unsigned char*) buf;
 802120c:	9506      	str	r5, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802120e:	f7ec fd34 	bl	800dc7a <mbedtls_asn1_get_tag>
 8021212:	b160      	cbz	r0, 802122e <mbedtls_x509_crt_parse_der+0x9a>
        mbedtls_x509_crt_free( crt );
 8021214:	4620      	mov	r0, r4
 8021216:	f7ff ff53 	bl	80210c0 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 802121a:	4d98      	ldr	r5, [pc, #608]	; (802147c <mbedtls_x509_crt_parse_der+0x2e8>)
        if( prev )
 802121c:	f1b9 0f00 	cmp.w	r9, #0
 8021220:	f040 82bd 	bne.w	802179e <mbedtls_x509_crt_parse_der+0x60a>
        if( crt != chain )
 8021224:	9b03      	ldr	r3, [sp, #12]
 8021226:	42a3      	cmp	r3, r4
 8021228:	f040 82b4 	bne.w	8021794 <mbedtls_x509_crt_parse_der+0x600>
 802122c:	e2aa      	b.n	8021784 <mbedtls_x509_crt_parse_der+0x5f0>
    if( len > (size_t) ( end - p ) )
 802122e:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8021232:	1a7f      	subs	r7, r7, r1
 8021234:	429f      	cmp	r7, r3
 8021236:	d204      	bcs.n	8021242 <mbedtls_x509_crt_parse_der+0xae>
        mbedtls_x509_crt_free( crt );
 8021238:	4620      	mov	r0, r4
 802123a:	f7ff ff41 	bl	80210c0 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 802123e:	4d90      	ldr	r5, [pc, #576]	; (8021480 <mbedtls_x509_crt_parse_der+0x2ec>)
 8021240:	e7ec      	b.n	802121c <mbedtls_x509_crt_parse_der+0x88>
    crt_end = p + len;
 8021242:	4419      	add	r1, r3
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 8021244:	4b8b      	ldr	r3, [pc, #556]	; (8021474 <mbedtls_x509_crt_parse_der+0x2e0>)
    crt->raw.len = crt_end - buf;
 8021246:	1b49      	subs	r1, r1, r5
 8021248:	6061      	str	r1, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	2001      	movs	r0, #1
 802124e:	4798      	blx	r3
 8021250:	9006      	str	r0, [sp, #24]
 8021252:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8021254:	b908      	cbnz	r0, 802125a <mbedtls_x509_crt_parse_der+0xc6>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8021256:	4d88      	ldr	r5, [pc, #544]	; (8021478 <mbedtls_x509_crt_parse_der+0x2e4>)
 8021258:	e7e0      	b.n	802121c <mbedtls_x509_crt_parse_der+0x88>
    memcpy( p, buf, crt->raw.len );
 802125a:	6862      	ldr	r2, [r4, #4]
 802125c:	4629      	mov	r1, r5
 802125e:	f001 f842 	bl	80222e6 <memcpy>
    p += crt->raw.len - len;
 8021262:	6862      	ldr	r2, [r4, #4]
 8021264:	9b05      	ldr	r3, [sp, #20]
 8021266:	9f06      	ldr	r7, [sp, #24]
 8021268:	1ad3      	subs	r3, r2, r3
 802126a:	443b      	add	r3, r7
    end = crt_end = p + len;
 802126c:	4417      	add	r7, r2
    p += crt->raw.len - len;
 802126e:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 8021270:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021272:	4632      	mov	r2, r6
 8021274:	2330      	movs	r3, #48	; 0x30
 8021276:	4639      	mov	r1, r7
 8021278:	a806      	add	r0, sp, #24
 802127a:	f7ec fcfe 	bl	800dc7a <mbedtls_asn1_get_tag>
 802127e:	4680      	mov	r8, r0
 8021280:	b140      	cbz	r0, 8021294 <mbedtls_x509_crt_parse_der+0x100>
        mbedtls_x509_crt_free( crt );
 8021282:	4620      	mov	r0, r4
 8021284:	f7ff ff1c 	bl	80210c0 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8021288:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 802128c:	2d00      	cmp	r5, #0
 802128e:	f000 8279 	beq.w	8021784 <mbedtls_x509_crt_parse_der+0x5f0>
 8021292:	e7c3      	b.n	802121c <mbedtls_x509_crt_parse_der+0x88>
    end = p + len;
 8021294:	e9dd 3605 	ldrd	r3, r6, [sp, #20]
 8021298:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 802129a:	6963      	ldr	r3, [r4, #20]
 802129c:	1af3      	subs	r3, r6, r3
 802129e:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80212a0:	aa17      	add	r2, sp, #92	; 0x5c
 80212a2:	23a0      	movs	r3, #160	; 0xa0
 80212a4:	4631      	mov	r1, r6
 80212a6:	a806      	add	r0, sp, #24
 80212a8:	f7ec fce7 	bl	800dc7a <mbedtls_asn1_get_tag>
 80212ac:	4605      	mov	r5, r0
 80212ae:	b1f0      	cbz	r0, 80212ee <mbedtls_x509_crt_parse_der+0x15a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80212b0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80212b4:	d129      	bne.n	802130a <mbedtls_x509_crt_parse_der+0x176>
            *ver = 0;
 80212b6:	f8c4 8018 	str.w	r8, [r4, #24]
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80212ba:	f104 021c 	add.w	r2, r4, #28
 80212be:	4631      	mov	r1, r6
 80212c0:	a806      	add	r0, sp, #24
 80212c2:	f7fe f82f 	bl	801f324 <mbedtls_x509_get_serial>
 80212c6:	4605      	mov	r5, r0
 80212c8:	b9f8      	cbnz	r0, 802130a <mbedtls_x509_crt_parse_der+0x176>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80212ca:	f104 0828 	add.w	r8, r4, #40	; 0x28
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80212ce:	ab0b      	add	r3, sp, #44	; 0x2c
 80212d0:	4642      	mov	r2, r8
 80212d2:	4631      	mov	r1, r6
 80212d4:	a806      	add	r0, sp, #24
 80212d6:	f7fe f854 	bl	801f382 <mbedtls_x509_get_alg>
 80212da:	4605      	mov	r5, r0
 80212dc:	b9a8      	cbnz	r0, 802130a <mbedtls_x509_crt_parse_der+0x176>
    if( crt->version < 0 || crt->version > 2 )
 80212de:	69a3      	ldr	r3, [r4, #24]
 80212e0:	2b02      	cmp	r3, #2
 80212e2:	d91b      	bls.n	802131c <mbedtls_x509_crt_parse_der+0x188>
        mbedtls_x509_crt_free( crt );
 80212e4:	4620      	mov	r0, r4
 80212e6:	f7ff feeb 	bl	80210c0 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80212ea:	4d66      	ldr	r5, [pc, #408]	; (8021484 <mbedtls_x509_crt_parse_der+0x2f0>)
 80212ec:	e796      	b.n	802121c <mbedtls_x509_crt_parse_der+0x88>
    end = *p + len;
 80212ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80212f0:	9b06      	ldr	r3, [sp, #24]
 80212f2:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80212f6:	4641      	mov	r1, r8
 80212f8:	f104 0218 	add.w	r2, r4, #24
 80212fc:	a806      	add	r0, sp, #24
 80212fe:	f7ec fce8 	bl	800dcd2 <mbedtls_asn1_get_int>
 8021302:	b130      	cbz	r0, 8021312 <mbedtls_x509_crt_parse_der+0x17e>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8021304:	f5b0 5508 	subs.w	r5, r0, #8704	; 0x2200
 8021308:	d0d7      	beq.n	80212ba <mbedtls_x509_crt_parse_der+0x126>
        mbedtls_x509_crt_free( crt );
 802130a:	4620      	mov	r0, r4
 802130c:	f7ff fed8 	bl	80210c0 <mbedtls_x509_crt_free>
 8021310:	e784      	b.n	802121c <mbedtls_x509_crt_parse_der+0x88>
    if( *p != end )
 8021312:	9b06      	ldr	r3, [sp, #24]
 8021314:	4598      	cmp	r8, r3
 8021316:	d0d0      	beq.n	80212ba <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 8021318:	4d5b      	ldr	r5, [pc, #364]	; (8021488 <mbedtls_x509_crt_parse_der+0x2f4>)
 802131a:	e7f6      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    crt->version++;
 802131c:	3301      	adds	r3, #1
 802131e:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 8021320:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8021324:	9300      	str	r3, [sp, #0]
 8021326:	f504 7294 	add.w	r2, r4, #296	; 0x128
 802132a:	f204 1329 	addw	r3, r4, #297	; 0x129
 802132e:	a90b      	add	r1, sp, #44	; 0x2c
 8021330:	4640      	mov	r0, r8
 8021332:	f7fe fa63 	bl	801f7fc <mbedtls_x509_get_sig_alg>
 8021336:	4605      	mov	r5, r0
 8021338:	2800      	cmp	r0, #0
 802133a:	d1e6      	bne.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    crt->issuer_raw.p = p;
 802133c:	9b06      	ldr	r3, [sp, #24]
 802133e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021340:	aa05      	add	r2, sp, #20
 8021342:	2330      	movs	r3, #48	; 0x30
 8021344:	4631      	mov	r1, r6
 8021346:	a806      	add	r0, sp, #24
 8021348:	f7ec fc97 	bl	800dc7a <mbedtls_asn1_get_tag>
 802134c:	4605      	mov	r5, r0
 802134e:	b128      	cbz	r0, 802135c <mbedtls_x509_crt_parse_der+0x1c8>
        mbedtls_x509_crt_free( crt );
 8021350:	4620      	mov	r0, r4
 8021352:	f7ff feb5 	bl	80210c0 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8021356:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
 802135a:	e797      	b.n	802128c <mbedtls_x509_crt_parse_der+0xf8>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 802135c:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8021360:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8021364:	4419      	add	r1, r3
 8021366:	a806      	add	r0, sp, #24
 8021368:	f7fe f904 	bl	801f574 <mbedtls_x509_get_name>
 802136c:	4605      	mov	r5, r0
 802136e:	2800      	cmp	r0, #0
 8021370:	d1cb      	bne.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8021372:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8021374:	9b06      	ldr	r3, [sp, #24]
 8021376:	1a9b      	subs	r3, r3, r2
 8021378:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802137a:	aa17      	add	r2, sp, #92	; 0x5c
 802137c:	2330      	movs	r3, #48	; 0x30
 802137e:	4631      	mov	r1, r6
 8021380:	a806      	add	r0, sp, #24
 8021382:	f7ec fc7a 	bl	800dc7a <mbedtls_asn1_get_tag>
 8021386:	2800      	cmp	r0, #0
 8021388:	d057      	beq.n	802143a <mbedtls_x509_crt_parse_der+0x2a6>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 802138a:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
 802138e:	d1bc      	bne.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    crt->subject_raw.p = p;
 8021390:	f10d 0868 	add.w	r8, sp, #104	; 0x68
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021394:	aa05      	add	r2, sp, #20
    crt->subject_raw.p = p;
 8021396:	f858 3d50 	ldr.w	r3, [r8, #-80]!
 802139a:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802139c:	4631      	mov	r1, r6
 802139e:	2330      	movs	r3, #48	; 0x30
 80213a0:	4640      	mov	r0, r8
 80213a2:	f7ec fc6a 	bl	800dc7a <mbedtls_asn1_get_tag>
 80213a6:	4605      	mov	r5, r0
 80213a8:	2800      	cmp	r0, #0
 80213aa:	d1d1      	bne.n	8021350 <mbedtls_x509_crt_parse_der+0x1bc>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80213ac:	9b05      	ldr	r3, [sp, #20]
 80213ae:	b14b      	cbz	r3, 80213c4 <mbedtls_x509_crt_parse_der+0x230>
 80213b0:	9906      	ldr	r1, [sp, #24]
 80213b2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80213b6:	4419      	add	r1, r3
 80213b8:	4640      	mov	r0, r8
 80213ba:	f7fe f8db 	bl	801f574 <mbedtls_x509_get_name>
 80213be:	4605      	mov	r5, r0
 80213c0:	2800      	cmp	r0, #0
 80213c2:	d1a2      	bne.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    crt->subject_raw.len = p - crt->subject_raw.p;
 80213c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80213c6:	9b06      	ldr	r3, [sp, #24]
 80213c8:	1a9b      	subs	r3, r3, r2
 80213ca:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80213cc:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80213d0:	4631      	mov	r1, r6
 80213d2:	4640      	mov	r0, r8
 80213d4:	f7f4 fda2 	bl	8015f1c <mbedtls_pk_parse_subpubkey>
 80213d8:	4605      	mov	r5, r0
 80213da:	2800      	cmp	r0, #0
 80213dc:	d195      	bne.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( crt->version == 2 || crt->version == 3 )
 80213de:	69a3      	ldr	r3, [r4, #24]
 80213e0:	3b02      	subs	r3, #2
 80213e2:	2b01      	cmp	r3, #1
 80213e4:	d809      	bhi.n	80213fa <mbedtls_x509_crt_parse_der+0x266>
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 80213e6:	2301      	movs	r3, #1
 80213e8:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 80213ec:	4631      	mov	r1, r6
 80213ee:	4640      	mov	r0, r8
 80213f0:	f7fe fef0 	bl	80201d4 <x509_get_uid>
        if( ret != 0 )
 80213f4:	4605      	mov	r5, r0
 80213f6:	2800      	cmp	r0, #0
 80213f8:	d187      	bne.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( crt->version == 2 || crt->version == 3 )
 80213fa:	69a3      	ldr	r3, [r4, #24]
 80213fc:	3b02      	subs	r3, #2
 80213fe:	2b01      	cmp	r3, #1
 8021400:	d80a      	bhi.n	8021418 <mbedtls_x509_crt_parse_der+0x284>
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 8021402:	2302      	movs	r3, #2
 8021404:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8021408:	4631      	mov	r1, r6
 802140a:	4640      	mov	r0, r8
 802140c:	f7fe fee2 	bl	80201d4 <x509_get_uid>
        if( ret != 0 )
 8021410:	4605      	mov	r5, r0
 8021412:	2800      	cmp	r0, #0
 8021414:	f47f af79 	bne.w	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( crt->version == 3 )
 8021418:	69a3      	ldr	r3, [r4, #24]
 802141a:	2b03      	cmp	r3, #3
 802141c:	d13c      	bne.n	8021498 <mbedtls_x509_crt_parse_der+0x304>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 802141e:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 8021422:	4631      	mov	r1, r6
 8021424:	4640      	mov	r0, r8
 8021426:	f7fe fa2f 	bl	801f888 <mbedtls_x509_get_ext>
 802142a:	4605      	mov	r5, r0
 802142c:	bb80      	cbnz	r0, 8021490 <mbedtls_x509_crt_parse_der+0x2fc>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 802142e:	4680      	mov	r8, r0
    while( *p < end )
 8021430:	9b06      	ldr	r3, [sp, #24]
 8021432:	429e      	cmp	r6, r3
 8021434:	d85a      	bhi.n	80214ec <mbedtls_x509_crt_parse_der+0x358>
    if( *p != end )
 8021436:	d02f      	beq.n	8021498 <mbedtls_x509_crt_parse_der+0x304>
 8021438:	e15f      	b.n	80216fa <mbedtls_x509_crt_parse_der+0x566>
    end = *p + len;
 802143a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802143c:	9b06      	ldr	r3, [sp, #24]
 802143e:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8021442:	4641      	mov	r1, r8
 8021444:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8021448:	a806      	add	r0, sp, #24
 802144a:	f7fe f913 	bl	801f674 <mbedtls_x509_get_time>
 802144e:	4605      	mov	r5, r0
 8021450:	2800      	cmp	r0, #0
 8021452:	f47f af5a 	bne.w	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8021456:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 802145a:	4641      	mov	r1, r8
 802145c:	a806      	add	r0, sp, #24
 802145e:	f7fe f909 	bl	801f674 <mbedtls_x509_get_time>
 8021462:	4605      	mov	r5, r0
 8021464:	2800      	cmp	r0, #0
 8021466:	f47f af50 	bne.w	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( *p != end )
 802146a:	9b06      	ldr	r3, [sp, #24]
 802146c:	4598      	cmp	r8, r3
 802146e:	d08f      	beq.n	8021390 <mbedtls_x509_crt_parse_der+0x1fc>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 8021470:	4d06      	ldr	r5, [pc, #24]	; (802148c <mbedtls_x509_crt_parse_der+0x2f8>)
 8021472:	e74a      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
 8021474:	200005a0 	.word	0x200005a0
 8021478:	ffffd780 	.word	0xffffd780
 802147c:	ffffde80 	.word	0xffffde80
 8021480:	ffffde1a 	.word	0xffffde1a
 8021484:	ffffda80 	.word	0xffffda80
 8021488:	ffffdd9a 	.word	0xffffdd9a
 802148c:	ffffdb9a 	.word	0xffffdb9a
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8021490:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021494:	f47f af39 	bne.w	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( p != end )
 8021498:	9b06      	ldr	r3, [sp, #24]
 802149a:	429e      	cmp	r6, r3
 802149c:	f47f aecc 	bne.w	8021238 <mbedtls_x509_crt_parse_der+0xa4>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80214a0:	ab0e      	add	r3, sp, #56	; 0x38
 80214a2:	aa11      	add	r2, sp, #68	; 0x44
 80214a4:	4639      	mov	r1, r7
 80214a6:	a806      	add	r0, sp, #24
 80214a8:	f7fd ff6b 	bl	801f382 <mbedtls_x509_get_alg>
 80214ac:	4605      	mov	r5, r0
 80214ae:	2800      	cmp	r0, #0
 80214b0:	f47f af2b 	bne.w	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( crt->sig_oid.len != sig_oid2.len ||
 80214b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80214b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80214b8:	429a      	cmp	r2, r3
 80214ba:	d112      	bne.n	80214e2 <mbedtls_x509_crt_parse_der+0x34e>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80214bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80214be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80214c0:	f000 ff02 	bl	80222c8 <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 80214c4:	b968      	cbnz	r0, 80214e2 <mbedtls_x509_crt_parse_der+0x34e>
        sig_params1.len != sig_params2.len ||
 80214c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80214c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80214ca:	429a      	cmp	r2, r3
 80214cc:	d109      	bne.n	80214e2 <mbedtls_x509_crt_parse_der+0x34e>
        sig_params1.len != sig_params2.len ||
 80214ce:	2a00      	cmp	r2, #0
 80214d0:	f000 814a 	beq.w	8021768 <mbedtls_x509_crt_parse_der+0x5d4>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80214d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80214d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80214d8:	f000 fef6 	bl	80222c8 <memcmp>
        ( sig_params1.len != 0 &&
 80214dc:	2800      	cmp	r0, #0
 80214de:	f000 8143 	beq.w	8021768 <mbedtls_x509_crt_parse_der+0x5d4>
        mbedtls_x509_crt_free( crt );
 80214e2:	4620      	mov	r0, r4
 80214e4:	f7ff fdec 	bl	80210c0 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 80214e8:	4db0      	ldr	r5, [pc, #704]	; (80217ac <mbedtls_x509_crt_parse_der+0x618>)
 80214ea:	e697      	b.n	802121c <mbedtls_x509_crt_parse_der+0x88>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80214ec:	2330      	movs	r3, #48	; 0x30
 80214ee:	aa07      	add	r2, sp, #28
 80214f0:	4631      	mov	r1, r6
 80214f2:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80214f4:	e9cd 8814 	strd	r8, r8, [sp, #80]	; 0x50
 80214f8:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int ext_type = 0;
 80214fc:	e9cd 8808 	strd	r8, r8, [sp, #32]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021500:	f7ec fbbb 	bl	800dc7a <mbedtls_asn1_get_tag>
 8021504:	b120      	cbz	r0, 8021510 <mbedtls_x509_crt_parse_der+0x37c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8021506:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
        if( ret != 0 )
 802150a:	2d00      	cmp	r5, #0
 802150c:	d0c4      	beq.n	8021498 <mbedtls_x509_crt_parse_der+0x304>
 802150e:	e6fc      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
        end_ext_data = *p + len;
 8021510:	e9dd 3506 	ldrd	r3, r5, [sp, #24]
 8021514:	441d      	add	r5, r3
        extn_oid.tag = **p;
 8021516:	781b      	ldrb	r3, [r3, #0]
 8021518:	9314      	str	r3, [sp, #80]	; 0x50
        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 802151a:	aa15      	add	r2, sp, #84	; 0x54
 802151c:	2306      	movs	r3, #6
 802151e:	4631      	mov	r1, r6
 8021520:	a806      	add	r0, sp, #24
 8021522:	f7ec fbaa 	bl	800dc7a <mbedtls_asn1_get_tag>
 8021526:	2800      	cmp	r0, #0
 8021528:	d1ed      	bne.n	8021506 <mbedtls_x509_crt_parse_der+0x372>
        extn_oid.p = *p;
 802152a:	9b06      	ldr	r3, [sp, #24]
        *p += extn_oid.len;
 802152c:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.p = *p;
 802152e:	9316      	str	r3, [sp, #88]	; 0x58
        *p += extn_oid.len;
 8021530:	4413      	add	r3, r2
 8021532:	9306      	str	r3, [sp, #24]
        if( ( end - *p ) < 1 )
 8021534:	1af3      	subs	r3, r6, r3
 8021536:	2b00      	cmp	r3, #0
 8021538:	f340 814a 	ble.w	80217d0 <mbedtls_x509_crt_parse_der+0x63c>
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 802153c:	aa08      	add	r2, sp, #32
 802153e:	4629      	mov	r1, r5
 8021540:	a806      	add	r0, sp, #24
 8021542:	f7ec fbae 	bl	800dca2 <mbedtls_asn1_get_bool>
 8021546:	b110      	cbz	r0, 802154e <mbedtls_x509_crt_parse_der+0x3ba>
 8021548:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802154c:	d1db      	bne.n	8021506 <mbedtls_x509_crt_parse_der+0x372>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 802154e:	2304      	movs	r3, #4
 8021550:	aa07      	add	r2, sp, #28
 8021552:	4629      	mov	r1, r5
 8021554:	a806      	add	r0, sp, #24
 8021556:	f7ec fb90 	bl	800dc7a <mbedtls_asn1_get_tag>
 802155a:	2800      	cmp	r0, #0
 802155c:	d1d3      	bne.n	8021506 <mbedtls_x509_crt_parse_der+0x372>
        end_ext_octet = *p + len;
 802155e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8021562:	4413      	add	r3, r2
        if( end_ext_octet != end_ext_data )
 8021564:	429d      	cmp	r5, r3
 8021566:	f040 80c8 	bne.w	80216fa <mbedtls_x509_crt_parse_der+0x566>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 802156a:	a909      	add	r1, sp, #36	; 0x24
 802156c:	a814      	add	r0, sp, #80	; 0x50
 802156e:	f7f3 fddd 	bl	801512c <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 8021572:	b130      	cbz	r0, 8021582 <mbedtls_x509_crt_parse_der+0x3ee>
            if( is_critical )
 8021574:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 8021576:	9506      	str	r5, [sp, #24]
            if( is_critical )
 8021578:	2b00      	cmp	r3, #0
 802157a:	f43f af59 	beq.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802157e:	4d8c      	ldr	r5, [pc, #560]	; (80217b0 <mbedtls_x509_crt_parse_der+0x61c>)
 8021580:	e6c3      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
        if( ( crt->ext_types & ext_type ) != 0 )
 8021582:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 8021586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021588:	ea11 0302 	ands.w	r3, r1, r2
 802158c:	f040 8122 	bne.w	80217d4 <mbedtls_x509_crt_parse_der+0x640>
        crt->ext_types |= ext_type;
 8021590:	4311      	orrs	r1, r2
        switch( ext_type )
 8021592:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 8021596:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 802159a:	d020      	beq.n	80215de <mbedtls_x509_crt_parse_der+0x44a>
 802159c:	dc06      	bgt.n	80215ac <mbedtls_x509_crt_parse_der+0x418>
 802159e:	2a04      	cmp	r2, #4
 80215a0:	d060      	beq.n	8021664 <mbedtls_x509_crt_parse_der+0x4d0>
 80215a2:	2a20      	cmp	r2, #32
 80215a4:	f000 8093 	beq.w	80216ce <mbedtls_x509_crt_parse_der+0x53a>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 80215a8:	4d82      	ldr	r5, [pc, #520]	; (80217b4 <mbedtls_x509_crt_parse_der+0x620>)
 80215aa:	e6ae      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
        switch( ext_type )
 80215ac:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80215b0:	d07e      	beq.n	80216b0 <mbedtls_x509_crt_parse_der+0x51c>
 80215b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80215b6:	d1f7      	bne.n	80215a8 <mbedtls_x509_crt_parse_der+0x414>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80215b8:	aa17      	add	r2, sp, #92	; 0x5c
 80215ba:	4629      	mov	r1, r5
 80215bc:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80215be:	9317      	str	r3, [sp, #92]	; 0x5c
 80215c0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80215c4:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80215c6:	f7ec fbbb 	bl	800dd40 <mbedtls_asn1_get_bitstring>
 80215ca:	2800      	cmp	r0, #0
 80215cc:	d154      	bne.n	8021678 <mbedtls_x509_crt_parse_der+0x4e4>
    if( bs.len != 1 )
 80215ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80215d0:	2b01      	cmp	r3, #1
 80215d2:	d158      	bne.n	8021686 <mbedtls_x509_crt_parse_der+0x4f2>
    *ns_cert_type = *bs.p;
 80215d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80215d6:	781b      	ldrb	r3, [r3, #0]
 80215d8:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80215dc:	e728      	b.n	8021430 <mbedtls_x509_crt_parse_der+0x29c>
    *ca_istrue = 0; /* DEFAULT FALSE */
 80215de:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 80215e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80215e6:	aa17      	add	r2, sp, #92	; 0x5c
 80215e8:	2330      	movs	r3, #48	; 0x30
 80215ea:	4629      	mov	r1, r5
 80215ec:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80215ee:	f104 0afc 	add.w	sl, r4, #252	; 0xfc
 80215f2:	f504 7b80 	add.w	fp, r4, #256	; 0x100
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80215f6:	f7ec fb40 	bl	800dc7a <mbedtls_asn1_get_tag>
 80215fa:	b128      	cbz	r0, 8021608 <mbedtls_x509_crt_parse_der+0x474>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80215fc:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8021600:	2d00      	cmp	r5, #0
 8021602:	f43f af15 	beq.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
 8021606:	e680      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( *p == end )
 8021608:	9b06      	ldr	r3, [sp, #24]
 802160a:	429d      	cmp	r5, r3
 802160c:	f43f af10 	beq.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8021610:	4652      	mov	r2, sl
 8021612:	4629      	mov	r1, r5
 8021614:	a806      	add	r0, sp, #24
 8021616:	f7ec fb44 	bl	800dca2 <mbedtls_asn1_get_bool>
 802161a:	b178      	cbz	r0, 802163c <mbedtls_x509_crt_parse_der+0x4a8>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802161c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021620:	d1ec      	bne.n	80215fc <mbedtls_x509_crt_parse_der+0x468>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8021622:	4652      	mov	r2, sl
 8021624:	4629      	mov	r1, r5
 8021626:	a806      	add	r0, sp, #24
 8021628:	f7ec fb53 	bl	800dcd2 <mbedtls_asn1_get_int>
        if( ret != 0 )
 802162c:	2800      	cmp	r0, #0
 802162e:	d1e5      	bne.n	80215fc <mbedtls_x509_crt_parse_der+0x468>
        if( *ca_istrue != 0 )
 8021630:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8021634:	b113      	cbz	r3, 802163c <mbedtls_x509_crt_parse_der+0x4a8>
            *ca_istrue = 1;
 8021636:	2301      	movs	r3, #1
 8021638:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 802163c:	9b06      	ldr	r3, [sp, #24]
 802163e:	429d      	cmp	r5, r3
 8021640:	f43f aef6 	beq.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8021644:	465a      	mov	r2, fp
 8021646:	4629      	mov	r1, r5
 8021648:	a806      	add	r0, sp, #24
 802164a:	f7ec fb42 	bl	800dcd2 <mbedtls_asn1_get_int>
 802164e:	2800      	cmp	r0, #0
 8021650:	d1d4      	bne.n	80215fc <mbedtls_x509_crt_parse_der+0x468>
    if( *p != end )
 8021652:	9b06      	ldr	r3, [sp, #24]
 8021654:	429d      	cmp	r5, r3
 8021656:	d150      	bne.n	80216fa <mbedtls_x509_crt_parse_der+0x566>
    (*max_pathlen)++;
 8021658:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 802165c:	3301      	adds	r3, #1
 802165e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8021662:	e6e5      	b.n	8021430 <mbedtls_x509_crt_parse_der+0x29c>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8021664:	aa17      	add	r2, sp, #92	; 0x5c
 8021666:	4629      	mov	r1, r5
 8021668:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 802166a:	9317      	str	r3, [sp, #92]	; 0x5c
 802166c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8021670:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8021672:	f7ec fb65 	bl	800dd40 <mbedtls_asn1_get_bitstring>
 8021676:	b120      	cbz	r0, 8021682 <mbedtls_x509_crt_parse_der+0x4ee>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8021678:	f5b0 5514 	subs.w	r5, r0, #9472	; 0x2500
 802167c:	f43f aed8 	beq.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
 8021680:	e643      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( bs.len < 1 )
 8021682:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021684:	b909      	cbnz	r1, 802168a <mbedtls_x509_crt_parse_der+0x4f6>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8021686:	4d4c      	ldr	r5, [pc, #304]	; (80217b8 <mbedtls_x509_crt_parse_der+0x624>)
 8021688:	e63f      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802168a:	9d19      	ldr	r5, [sp, #100]	; 0x64
    *key_usage = 0;
 802168c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8021690:	5c2b      	ldrb	r3, [r5, r0]
 8021692:	00c2      	lsls	r2, r0, #3
 8021694:	fa03 f202 	lsl.w	r2, r3, r2
 8021698:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 802169c:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802169e:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80216a0:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80216a2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80216a6:	f43f aec3 	beq.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
 80216aa:	2804      	cmp	r0, #4
 80216ac:	d1f0      	bne.n	8021690 <mbedtls_x509_crt_parse_der+0x4fc>
 80216ae:	e6bf      	b.n	8021430 <mbedtls_x509_crt_parse_der+0x29c>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80216b0:	2306      	movs	r3, #6
 80216b2:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80216b6:	4629      	mov	r1, r5
 80216b8:	a806      	add	r0, sp, #24
 80216ba:	f7ec fb79 	bl	800ddb0 <mbedtls_asn1_get_sequence_of>
 80216be:	2800      	cmp	r0, #0
 80216c0:	d1da      	bne.n	8021678 <mbedtls_x509_crt_parse_der+0x4e4>
    if( ext_key_usage->buf.p == NULL )
 80216c2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	f47f aeb2 	bne.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
 80216cc:	e7db      	b.n	8021686 <mbedtls_x509_crt_parse_der+0x4f2>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80216ce:	2330      	movs	r3, #48	; 0x30
 80216d0:	aa0a      	add	r2, sp, #40	; 0x28
 80216d2:	4629      	mov	r1, r5
 80216d4:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80216d6:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80216da:	f7ec face 	bl	800dc7a <mbedtls_asn1_get_tag>
 80216de:	2800      	cmp	r0, #0
 80216e0:	d18c      	bne.n	80215fc <mbedtls_x509_crt_parse_der+0x468>
    if( *p + len != end )
 80216e2:	9b06      	ldr	r3, [sp, #24]
 80216e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80216e6:	4413      	add	r3, r2
 80216e8:	429d      	cmp	r5, r3
 80216ea:	d106      	bne.n	80216fa <mbedtls_x509_crt_parse_der+0x566>
    while( *p < end )
 80216ec:	9b06      	ldr	r3, [sp, #24]
 80216ee:	429d      	cmp	r5, r3
 80216f0:	d805      	bhi.n	80216fe <mbedtls_x509_crt_parse_der+0x56a>
    cur->next = NULL;
 80216f2:	f8ca 800c 	str.w	r8, [sl, #12]
    if( *p != end )
 80216f6:	f43f ae9b 	beq.w	8021430 <mbedtls_x509_crt_parse_der+0x29c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80216fa:	4d30      	ldr	r5, [pc, #192]	; (80217bc <mbedtls_x509_crt_parse_der+0x628>)
 80216fc:	e605      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
        if( ( end - *p ) < 1 )
 80216fe:	1aea      	subs	r2, r5, r3
 8021700:	2a00      	cmp	r2, #0
 8021702:	dd65      	ble.n	80217d0 <mbedtls_x509_crt_parse_der+0x63c>
        tag = **p;
 8021704:	f813 bb01 	ldrb.w	fp, [r3], #1
        (*p)++;
 8021708:	9306      	str	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 802170a:	aa17      	add	r2, sp, #92	; 0x5c
 802170c:	4629      	mov	r1, r5
 802170e:	a806      	add	r0, sp, #24
 8021710:	f7ec fa6c 	bl	800dbec <mbedtls_asn1_get_len>
 8021714:	2800      	cmp	r0, #0
 8021716:	f47f af71 	bne.w	80215fc <mbedtls_x509_crt_parse_der+0x468>
        if( ( tag & MBEDTLS_ASN1_CONTEXT_SPECIFIC ) != MBEDTLS_ASN1_CONTEXT_SPECIFIC )
 802171a:	f01b 0f80 	tst.w	fp, #128	; 0x80
 802171e:	f43f af2e 	beq.w	802157e <mbedtls_x509_crt_parse_der+0x3ea>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8021722:	f1bb 0f82 	cmp.w	fp, #130	; 0x82
 8021726:	d004      	beq.n	8021732 <mbedtls_x509_crt_parse_der+0x59e>
            *p += tag_len;
 8021728:	9b06      	ldr	r3, [sp, #24]
 802172a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        *p += buf->len;
 802172c:	4413      	add	r3, r2
 802172e:	9306      	str	r3, [sp, #24]
 8021730:	e7dc      	b.n	80216ec <mbedtls_x509_crt_parse_der+0x558>
        if( cur->buf.p != NULL )
 8021732:	f8da 3008 	ldr.w	r3, [sl, #8]
 8021736:	b16b      	cbz	r3, 8021754 <mbedtls_x509_crt_parse_der+0x5c0>
            if( cur->next != NULL )
 8021738:	f8da 300c 	ldr.w	r3, [sl, #12]
 802173c:	2b00      	cmp	r3, #0
 802173e:	d149      	bne.n	80217d4 <mbedtls_x509_crt_parse_der+0x640>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8021740:	4b1f      	ldr	r3, [pc, #124]	; (80217c0 <mbedtls_x509_crt_parse_der+0x62c>)
 8021742:	2110      	movs	r1, #16
 8021744:	681b      	ldr	r3, [r3, #0]
 8021746:	2001      	movs	r0, #1
 8021748:	4798      	blx	r3
 802174a:	f8ca 000c 	str.w	r0, [sl, #12]
            if( cur->next == NULL )
 802174e:	2800      	cmp	r0, #0
 8021750:	d03c      	beq.n	80217cc <mbedtls_x509_crt_parse_der+0x638>
 8021752:	4682      	mov	sl, r0
        buf->tag = tag;
 8021754:	2382      	movs	r3, #130	; 0x82
 8021756:	f8ca 3000 	str.w	r3, [sl]
        buf->len = tag_len;
 802175a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 802175c:	9b06      	ldr	r3, [sp, #24]
 802175e:	f8ca 3008 	str.w	r3, [sl, #8]
        buf->len = tag_len;
 8021762:	f8ca 2004 	str.w	r2, [sl, #4]
 8021766:	e7e1      	b.n	802172c <mbedtls_x509_crt_parse_der+0x598>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 8021768:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 802176c:	4639      	mov	r1, r7
 802176e:	a806      	add	r0, sp, #24
 8021770:	f7fe f826 	bl	801f7c0 <mbedtls_x509_get_sig>
 8021774:	4605      	mov	r5, r0
 8021776:	2800      	cmp	r0, #0
 8021778:	f47f adc7 	bne.w	802130a <mbedtls_x509_crt_parse_der+0x176>
    if( p != end )
 802177c:	9b06      	ldr	r3, [sp, #24]
 802177e:	429f      	cmp	r7, r3
 8021780:	f47f ad5a 	bne.w	8021238 <mbedtls_x509_crt_parse_der+0xa4>
}
 8021784:	4628      	mov	r0, r5
 8021786:	b01b      	add	sp, #108	; 0x6c
 8021788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802178c:	4d0d      	ldr	r5, [pc, #52]	; (80217c4 <mbedtls_x509_crt_parse_der+0x630>)
        if( prev )
 802178e:	f1b9 0f00 	cmp.w	r9, #0
 8021792:	d104      	bne.n	802179e <mbedtls_x509_crt_parse_der+0x60a>
            mbedtls_free( crt );
 8021794:	4b0c      	ldr	r3, [pc, #48]	; (80217c8 <mbedtls_x509_crt_parse_der+0x634>)
 8021796:	4620      	mov	r0, r4
 8021798:	681b      	ldr	r3, [r3, #0]
 802179a:	4798      	blx	r3
 802179c:	e7f2      	b.n	8021784 <mbedtls_x509_crt_parse_der+0x5f0>
            prev->next = NULL;
 802179e:	2300      	movs	r3, #0
 80217a0:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130
 80217a4:	e53e      	b.n	8021224 <mbedtls_x509_crt_parse_der+0x90>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80217a6:	4d07      	ldr	r5, [pc, #28]	; (80217c4 <mbedtls_x509_crt_parse_der+0x630>)
 80217a8:	e7ec      	b.n	8021784 <mbedtls_x509_crt_parse_der+0x5f0>
 80217aa:	bf00      	nop
 80217ac:	ffffd980 	.word	0xffffd980
 80217b0:	ffffda9e 	.word	0xffffda9e
 80217b4:	ffffdf80 	.word	0xffffdf80
 80217b8:	ffffda9c 	.word	0xffffda9c
 80217bc:	ffffda9a 	.word	0xffffda9a
 80217c0:	200005a0 	.word	0x200005a0
 80217c4:	ffffd800 	.word	0xffffd800
 80217c8:	200005a4 	.word	0x200005a4
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80217cc:	4d02      	ldr	r5, [pc, #8]	; (80217d8 <mbedtls_x509_crt_parse_der+0x644>)
 80217ce:	e59c      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80217d0:	4d02      	ldr	r5, [pc, #8]	; (80217dc <mbedtls_x509_crt_parse_der+0x648>)
 80217d2:	e59a      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 80217d4:	4d02      	ldr	r5, [pc, #8]	; (80217e0 <mbedtls_x509_crt_parse_der+0x64c>)
 80217d6:	e598      	b.n	802130a <mbedtls_x509_crt_parse_der+0x176>
 80217d8:	ffffda96 	.word	0xffffda96
 80217dc:	ffffdaa0 	.word	0xffffdaa0
 80217e0:	ffffdb00 	.word	0xffffdb00

080217e4 <mbedtls_x509_crt_parse>:
{
 80217e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217e8:	460e      	mov	r6, r1
 80217ea:	b089      	sub	sp, #36	; 0x24
 80217ec:	4617      	mov	r7, r2
    if( chain == NULL || buf == NULL )
 80217ee:	4680      	mov	r8, r0
 80217f0:	2800      	cmp	r0, #0
 80217f2:	d05c      	beq.n	80218ae <mbedtls_x509_crt_parse+0xca>
 80217f4:	2900      	cmp	r1, #0
 80217f6:	d05a      	beq.n	80218ae <mbedtls_x509_crt_parse+0xca>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80217f8:	b14a      	cbz	r2, 802180e <mbedtls_x509_crt_parse+0x2a>
 80217fa:	188b      	adds	r3, r1, r2
 80217fc:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8021800:	b92d      	cbnz	r5, 802180e <mbedtls_x509_crt_parse+0x2a>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 8021802:	492d      	ldr	r1, [pc, #180]	; (80218b8 <mbedtls_x509_crt_parse+0xd4>)
 8021804:	4630      	mov	r0, r6
 8021806:	f002 f84c 	bl	80238a2 <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 802180a:	2800      	cmp	r0, #0
 802180c:	d14a      	bne.n	80218a4 <mbedtls_x509_crt_parse+0xc0>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 802180e:	463a      	mov	r2, r7
 8021810:	4631      	mov	r1, r6
 8021812:	4640      	mov	r0, r8
 8021814:	f7ff fcbe 	bl	8021194 <mbedtls_x509_crt_parse_der>
 8021818:	4604      	mov	r4, r0
}
 802181a:	4620      	mov	r0, r4
 802181c:	b009      	add	sp, #36	; 0x24
 802181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mbedtls_pem_init( &pem );
 8021822:	a805      	add	r0, sp, #20
 8021824:	f7f3 fda9 	bl	801537a <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 8021828:	ab04      	add	r3, sp, #16
 802182a:	9302      	str	r3, [sp, #8]
 802182c:	2300      	movs	r3, #0
 802182e:	e9cd 3300 	strd	r3, r3, [sp]
 8021832:	4a22      	ldr	r2, [pc, #136]	; (80218bc <mbedtls_x509_crt_parse+0xd8>)
 8021834:	4633      	mov	r3, r6
 8021836:	4659      	mov	r1, fp
 8021838:	a805      	add	r0, sp, #20
 802183a:	f7f3 fda3 	bl	8015384 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 802183e:	4682      	mov	sl, r0
 8021840:	b988      	cbnz	r0, 8021866 <mbedtls_x509_crt_parse+0x82>
                buflen -= use_len;
 8021842:	9b04      	ldr	r3, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8021844:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8021848:	4640      	mov	r0, r8
                buflen -= use_len;
 802184a:	1aff      	subs	r7, r7, r3
                buf += use_len;
 802184c:	441e      	add	r6, r3
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 802184e:	f7ff fca1 	bl	8021194 <mbedtls_x509_crt_parse_der>
 8021852:	4682      	mov	sl, r0
            mbedtls_pem_free( &pem );
 8021854:	a805      	add	r0, sp, #20
 8021856:	f7f3 feed 	bl	8015634 <mbedtls_pem_free>
            if( ret != 0 )
 802185a:	f1ba 0f00 	cmp.w	sl, #0
 802185e:	d11c      	bne.n	802189a <mbedtls_x509_crt_parse+0xb6>
            success = 1;
 8021860:	f04f 0901 	mov.w	r9, #1
 8021864:	e00f      	b.n	8021886 <mbedtls_x509_crt_parse+0xa2>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8021866:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 802186a:	d019      	beq.n	80218a0 <mbedtls_x509_crt_parse+0xbc>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 802186c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8021870:	d00b      	beq.n	802188a <mbedtls_x509_crt_parse+0xa6>
                mbedtls_pem_free( &pem );
 8021872:	a805      	add	r0, sp, #20
 8021874:	f7f3 fede 	bl	8015634 <mbedtls_pem_free>
                buflen -= use_len;
 8021878:	9a04      	ldr	r2, [sp, #16]
 802187a:	1abf      	subs	r7, r7, r2
                buf += use_len;
 802187c:	4416      	add	r6, r2
                if( first_error == 0 )
 802187e:	2c00      	cmp	r4, #0
 8021880:	bf08      	it	eq
 8021882:	4654      	moveq	r4, sl
                total_failed++;
 8021884:	3501      	adds	r5, #1
        while( buflen > 1 )
 8021886:	2f01      	cmp	r7, #1
 8021888:	d8cb      	bhi.n	8021822 <mbedtls_x509_crt_parse+0x3e>
    if( success )
 802188a:	f1b9 0f00 	cmp.w	r9, #0
 802188e:	d110      	bne.n	80218b2 <mbedtls_x509_crt_parse+0xce>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 8021890:	4b0b      	ldr	r3, [pc, #44]	; (80218c0 <mbedtls_x509_crt_parse+0xdc>)
 8021892:	2c00      	cmp	r4, #0
 8021894:	bf08      	it	eq
 8021896:	461c      	moveq	r4, r3
 8021898:	e7bf      	b.n	802181a <mbedtls_x509_crt_parse+0x36>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 802189a:	f51a 5f22 	cmn.w	sl, #10368	; 0x2880
 802189e:	d1ee      	bne.n	802187e <mbedtls_x509_crt_parse+0x9a>
 80218a0:	4654      	mov	r4, sl
 80218a2:	e7ba      	b.n	802181a <mbedtls_x509_crt_parse+0x36>
    int success = 0, first_error = 0, total_failed = 0;
 80218a4:	462c      	mov	r4, r5
 80218a6:	46a9      	mov	r9, r5
            ret = mbedtls_pem_read_buffer( &pem,
 80218a8:	f8df b00c 	ldr.w	fp, [pc, #12]	; 80218b8 <mbedtls_x509_crt_parse+0xd4>
 80218ac:	e7eb      	b.n	8021886 <mbedtls_x509_crt_parse+0xa2>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80218ae:	4c05      	ldr	r4, [pc, #20]	; (80218c4 <mbedtls_x509_crt_parse+0xe0>)
 80218b0:	e7b3      	b.n	802181a <mbedtls_x509_crt_parse+0x36>
 80218b2:	462c      	mov	r4, r5
 80218b4:	e7b1      	b.n	802181a <mbedtls_x509_crt_parse+0x36>
 80218b6:	bf00      	nop
 80218b8:	0802d774 	.word	0x0802d774
 80218bc:	0802d812 	.word	0x0802d812
 80218c0:	ffffd880 	.word	0xffffd880
 80218c4:	ffffd800 	.word	0xffffd800

080218c8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80218c8:	b510      	push	{r4, lr}
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
 80218ca:	2200      	movs	r2, #0
    unsigned int h = 0;
 80218cc:	4613      	mov	r3, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80218ce:	5c81      	ldrb	r1, [r0, r2]
 80218d0:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
 80218d4:	2c09      	cmp	r4, #9
 80218d6:	d80a      	bhi.n	80218ee <parse_hex4+0x26>
 80218d8:	3b30      	subs	r3, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
 80218da:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
 80218dc:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
 80218de:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80218e2:	bf18      	it	ne
 80218e4:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
 80218e6:	2a04      	cmp	r2, #4
 80218e8:	d1f1      	bne.n	80218ce <parse_hex4+0x6>
        }
    }

    return h;
}
 80218ea:	4618      	mov	r0, r3
 80218ec:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80218ee:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
 80218f2:	2c05      	cmp	r4, #5
 80218f4:	d801      	bhi.n	80218fa <parse_hex4+0x32>
 80218f6:	3b37      	subs	r3, #55	; 0x37
 80218f8:	e7ef      	b.n	80218da <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80218fa:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
 80218fe:	2c05      	cmp	r4, #5
 8021900:	d801      	bhi.n	8021906 <parse_hex4+0x3e>
 8021902:	3b57      	subs	r3, #87	; 0x57
 8021904:	e7e9      	b.n	80218da <parse_hex4+0x12>
            return 0;
 8021906:	2300      	movs	r3, #0
 8021908:	e7ef      	b.n	80218ea <parse_hex4+0x22>
	...

0802190c <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 802190c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021910:	680a      	ldr	r2, [r1, #0]
 8021912:	688b      	ldr	r3, [r1, #8]
{
 8021914:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021916:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8021918:	18d0      	adds	r0, r2, r3
 802191a:	5cd3      	ldrb	r3, [r2, r3]
 802191c:	2b22      	cmp	r3, #34	; 0x22
{
 802191e:	468b      	mov	fp, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021920:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8021922:	d10a      	bne.n	802193a <parse_string+0x2e>
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8021924:	462f      	mov	r7, r5
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
 8021926:	2300      	movs	r3, #0
        while ((*input_end != '\"') && ((size_t)(input_end - input_buffer->content) < input_buffer->length))
 8021928:	783c      	ldrb	r4, [r7, #0]
 802192a:	2c22      	cmp	r4, #34	; 0x22
 802192c:	f000 80bb 	beq.w	8021aa6 <parse_string+0x19a>
 8021930:	f8db 1004 	ldr.w	r1, [fp, #4]
 8021934:	1abe      	subs	r6, r7, r2
 8021936:	428e      	cmp	r6, r1
 8021938:	d302      	bcc.n	8021940 <parse_string+0x34>
    if (output != NULL)
    {
        input_buffer->hooks.deallocate(output);
    }

    if (input_pointer != NULL)
 802193a:	bb85      	cbnz	r5, 802199e <parse_string+0x92>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
 802193c:	2000      	movs	r0, #0
 802193e:	e01c      	b.n	802197a <parse_string+0x6e>
            if (input_end[0] == '\\')
 8021940:	2c5c      	cmp	r4, #92	; 0x5c
 8021942:	d104      	bne.n	802194e <parse_string+0x42>
 8021944:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8021946:	1abc      	subs	r4, r7, r2
 8021948:	428c      	cmp	r4, r1
 802194a:	d2f6      	bcs.n	802193a <parse_string+0x2e>
                skipped_bytes++;
 802194c:	3301      	adds	r3, #1
            input_end++;
 802194e:	3701      	adds	r7, #1
 8021950:	e7ea      	b.n	8021928 <parse_string+0x1c>
        if (*input_pointer != '\\')
 8021952:	782b      	ldrb	r3, [r5, #0]
 8021954:	2b5c      	cmp	r3, #92	; 0x5c
 8021956:	d012      	beq.n	802197e <parse_string+0x72>
            *output_pointer++ = *input_pointer++;
 8021958:	7023      	strb	r3, [r4, #0]
 802195a:	3501      	adds	r5, #1
 802195c:	3401      	adds	r4, #1
    while (input_pointer < input_end)
 802195e:	42bd      	cmp	r5, r7
 8021960:	d3f7      	bcc.n	8021952 <parse_string+0x46>
    *output_pointer = '\0';
 8021962:	2300      	movs	r3, #0
 8021964:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
 8021966:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
 8021968:	e9c8 3903 	strd	r3, r9, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 802196c:	f8db 3000 	ldr.w	r3, [fp]
 8021970:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
 8021972:	3701      	adds	r7, #1
 8021974:	f8cb 7008 	str.w	r7, [fp, #8]
    return true;
 8021978:	2001      	movs	r0, #1
}
 802197a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
 802197e:	1b7a      	subs	r2, r7, r5
 8021980:	2a00      	cmp	r2, #0
 8021982:	dd08      	ble.n	8021996 <parse_string+0x8a>
            switch (input_pointer[1])
 8021984:	786b      	ldrb	r3, [r5, #1]
 8021986:	2b66      	cmp	r3, #102	; 0x66
 8021988:	d066      	beq.n	8021a58 <parse_string+0x14c>
 802198a:	d815      	bhi.n	80219b8 <parse_string+0xac>
 802198c:	2b2f      	cmp	r3, #47	; 0x2f
 802198e:	d011      	beq.n	80219b4 <parse_string+0xa8>
 8021990:	d80b      	bhi.n	80219aa <parse_string+0x9e>
 8021992:	2b22      	cmp	r3, #34	; 0x22
 8021994:	d00e      	beq.n	80219b4 <parse_string+0xa8>
        input_buffer->hooks.deallocate(output);
 8021996:	f8db 3014 	ldr.w	r3, [fp, #20]
 802199a:	4648      	mov	r0, r9
 802199c:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 802199e:	f8db 0000 	ldr.w	r0, [fp]
 80219a2:	1a28      	subs	r0, r5, r0
 80219a4:	f8cb 0008 	str.w	r0, [fp, #8]
 80219a8:	e7c8      	b.n	802193c <parse_string+0x30>
            switch (input_pointer[1])
 80219aa:	2b5c      	cmp	r3, #92	; 0x5c
 80219ac:	d002      	beq.n	80219b4 <parse_string+0xa8>
 80219ae:	2b62      	cmp	r3, #98	; 0x62
 80219b0:	d1f1      	bne.n	8021996 <parse_string+0x8a>
                    *output_pointer++ = '\b';
 80219b2:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
 80219b4:	7023      	strb	r3, [r4, #0]
 80219b6:	e051      	b.n	8021a5c <parse_string+0x150>
            switch (input_pointer[1])
 80219b8:	2b72      	cmp	r3, #114	; 0x72
 80219ba:	d053      	beq.n	8021a64 <parse_string+0x158>
 80219bc:	d803      	bhi.n	80219c6 <parse_string+0xba>
 80219be:	2b6e      	cmp	r3, #110	; 0x6e
 80219c0:	d1e9      	bne.n	8021996 <parse_string+0x8a>
                    *output_pointer++ = '\n';
 80219c2:	230a      	movs	r3, #10
 80219c4:	e7f6      	b.n	80219b4 <parse_string+0xa8>
            switch (input_pointer[1])
 80219c6:	2b74      	cmp	r3, #116	; 0x74
 80219c8:	d04f      	beq.n	8021a6a <parse_string+0x15e>
 80219ca:	2b75      	cmp	r3, #117	; 0x75
 80219cc:	d1e3      	bne.n	8021996 <parse_string+0x8a>
    if ((input_end - first_sequence) < 6)
 80219ce:	2a05      	cmp	r2, #5
 80219d0:	dde1      	ble.n	8021996 <parse_string+0x8a>
    first_code = parse_hex4(first_sequence + 2);
 80219d2:	1ca8      	adds	r0, r5, #2
 80219d4:	f7ff ff78 	bl	80218c8 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80219d8:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 80219dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
 80219e0:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80219e2:	d3d8      	bcc.n	8021996 <parse_string+0x8a>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80219e4:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 80219e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80219ec:	d240      	bcs.n	8021a70 <parse_string+0x164>
        const unsigned char *second_sequence = first_sequence + 6;
 80219ee:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
 80219f0:	1afb      	subs	r3, r7, r3
 80219f2:	2b05      	cmp	r3, #5
 80219f4:	ddcf      	ble.n	8021996 <parse_string+0x8a>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80219f6:	79ab      	ldrb	r3, [r5, #6]
 80219f8:	2b5c      	cmp	r3, #92	; 0x5c
 80219fa:	d1cc      	bne.n	8021996 <parse_string+0x8a>
 80219fc:	79eb      	ldrb	r3, [r5, #7]
 80219fe:	2b75      	cmp	r3, #117	; 0x75
 8021a00:	d1c9      	bne.n	8021996 <parse_string+0x8a>
        second_code = parse_hex4(second_sequence + 2);
 8021a02:	f105 0008 	add.w	r0, r5, #8
 8021a06:	f7ff ff5f 	bl	80218c8 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8021a0a:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8021a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021a12:	d2c0      	bcs.n	8021996 <parse_string+0x8a>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8021a14:	4b2b      	ldr	r3, [pc, #172]	; (8021ac4 <parse_string+0x1b8>)
 8021a16:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8021a1a:	ea03 2686 	and.w	r6, r3, r6, lsl #10
 8021a1e:	4330      	orrs	r0, r6
 8021a20:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
 8021a24:	230c      	movs	r3, #12
    else if (codepoint < 0x10000)
 8021a26:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8021a2a:	d330      	bcc.n	8021a8e <parse_string+0x182>
    else if (codepoint <= 0x10FFFF)
 8021a2c:	4a26      	ldr	r2, [pc, #152]	; (8021ac8 <parse_string+0x1bc>)
 8021a2e:	4296      	cmp	r6, r2
 8021a30:	d8b1      	bhi.n	8021996 <parse_string+0x8a>
        first_byte_mark = 0xF0; /* 11110000 */
 8021a32:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
 8021a36:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8021a38:	f100 3eff 	add.w	lr, r0, #4294967295
 8021a3c:	fa54 fe8e 	uxtab	lr, r4, lr
 8021a40:	45a6      	cmp	lr, r4
 8021a42:	b2f2      	uxtb	r2, r6
 8021a44:	d127      	bne.n	8021a96 <parse_string+0x18a>
    if (utf8_length > 1)
 8021a46:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8021a48:	bf14      	ite	ne
 8021a4a:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8021a4e:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
 8021a52:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
 8021a54:	4404      	add	r4, r0
 8021a56:	e003      	b.n	8021a60 <parse_string+0x154>
                    *output_pointer++ = '\f';
 8021a58:	f884 a000 	strb.w	sl, [r4]
 8021a5c:	3401      	adds	r4, #1
            unsigned char sequence_length = 2;
 8021a5e:	2302      	movs	r3, #2
            input_pointer += sequence_length;
 8021a60:	441d      	add	r5, r3
 8021a62:	e77c      	b.n	802195e <parse_string+0x52>
                    *output_pointer++ = '\r';
 8021a64:	f04f 030d 	mov.w	r3, #13
 8021a68:	e7a4      	b.n	80219b4 <parse_string+0xa8>
                    *output_pointer++ = '\t';
 8021a6a:	f04f 0309 	mov.w	r3, #9
 8021a6e:	e7a1      	b.n	80219b4 <parse_string+0xa8>
    if (codepoint < 0x80)
 8021a70:	287f      	cmp	r0, #127	; 0x7f
        sequence_length = 6; /* \uXXXX */
 8021a72:	f04f 0306 	mov.w	r3, #6
    if (codepoint < 0x80)
 8021a76:	d906      	bls.n	8021a86 <parse_string+0x17a>
    else if (codepoint < 0x800)
 8021a78:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8021a7c:	d2d3      	bcs.n	8021a26 <parse_string+0x11a>
        first_byte_mark = 0xC0; /* 11000000 */
 8021a7e:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
 8021a82:	2002      	movs	r0, #2
 8021a84:	e7d8      	b.n	8021a38 <parse_string+0x12c>
    unsigned char first_byte_mark = 0;
 8021a86:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
 8021a8a:	2001      	movs	r0, #1
 8021a8c:	e7d4      	b.n	8021a38 <parse_string+0x12c>
        first_byte_mark = 0xE0; /* 11100000 */
 8021a8e:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
 8021a92:	2003      	movs	r0, #3
 8021a94:	e7d0      	b.n	8021a38 <parse_string+0x12c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8021a96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8021a9e:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
 8021aa2:	09b6      	lsrs	r6, r6, #6
 8021aa4:	e7cc      	b.n	8021a40 <parse_string+0x134>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8021aa6:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8021aaa:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8021aac:	f8db 2010 	ldr.w	r2, [fp, #16]
 8021ab0:	4418      	add	r0, r3
 8021ab2:	4790      	blx	r2
        if (output == NULL)
 8021ab4:	4681      	mov	r9, r0
 8021ab6:	2800      	cmp	r0, #0
 8021ab8:	f43f af3f 	beq.w	802193a <parse_string+0x2e>
 8021abc:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
 8021abe:	f04f 0a0c 	mov.w	sl, #12
 8021ac2:	e74c      	b.n	802195e <parse_string+0x52>
 8021ac4:	000ffc00 	.word	0x000ffc00
 8021ac8:	0010ffff 	.word	0x0010ffff

08021acc <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8021acc:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
 8021ace:	b140      	cbz	r0, 8021ae2 <buffer_skip_whitespace+0x16>
 8021ad0:	6801      	ldr	r1, [r0, #0]
 8021ad2:	b171      	cbz	r1, 8021af2 <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8021ad4:	6842      	ldr	r2, [r0, #4]
 8021ad6:	6883      	ldr	r3, [r0, #8]
 8021ad8:	4293      	cmp	r3, r2
 8021ada:	d206      	bcs.n	8021aea <buffer_skip_whitespace+0x1e>
 8021adc:	5ccc      	ldrb	r4, [r1, r3]
 8021ade:	2c20      	cmp	r4, #32
 8021ae0:	d900      	bls.n	8021ae4 <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
 8021ae2:	bd10      	pop	{r4, pc}
       buffer->offset++;
 8021ae4:	3301      	adds	r3, #1
 8021ae6:	6083      	str	r3, [r0, #8]
 8021ae8:	e7f5      	b.n	8021ad6 <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
 8021aea:	d1fa      	bne.n	8021ae2 <buffer_skip_whitespace+0x16>
        buffer->offset--;
 8021aec:	3a01      	subs	r2, #1
 8021aee:	6082      	str	r2, [r0, #8]
 8021af0:	e7f7      	b.n	8021ae2 <buffer_skip_whitespace+0x16>
        return NULL;
 8021af2:	4608      	mov	r0, r1
 8021af4:	e7f5      	b.n	8021ae2 <buffer_skip_whitespace+0x16>

08021af6 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8021af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021afa:	460f      	mov	r7, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
 8021afc:	b918      	cbnz	r0, 8021b06 <get_object_item+0x10>
    {
        return NULL;
 8021afe:	2400      	movs	r4, #0
            current_element = current_element->next;
        }
    }

    return current_element;
}
 8021b00:	4620      	mov	r0, r4
 8021b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((object == NULL) || (name == NULL))
 8021b06:	2900      	cmp	r1, #0
 8021b08:	d0f9      	beq.n	8021afe <get_object_item+0x8>
    current_element = object->child;
 8021b0a:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
 8021b0c:	2a00      	cmp	r2, #0
 8021b0e:	d13e      	bne.n	8021b8e <get_object_item+0x98>
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8021b10:	2c00      	cmp	r4, #0
 8021b12:	d0f4      	beq.n	8021afe <get_object_item+0x8>
 8021b14:	6a26      	ldr	r6, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
 8021b16:	b3be      	cbz	r6, 8021b88 <get_object_item+0x92>
    if (string1 == string2)
 8021b18:	42be      	cmp	r6, r7
 8021b1a:	d0f1      	beq.n	8021b00 <get_object_item+0xa>
 8021b1c:	f107 3aff 	add.w	sl, r7, #4294967295
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8021b20:	f81a 8f01 	ldrb.w	r8, [sl, #1]!
 8021b24:	f000 fb82 	bl	802222c <__locale_ctype_ptr>
 8021b28:	4440      	add	r0, r8
 8021b2a:	46b1      	mov	r9, r6
 8021b2c:	7843      	ldrb	r3, [r0, #1]
 8021b2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8021b32:	f003 0303 	and.w	r3, r3, #3
 8021b36:	2b01      	cmp	r3, #1
 8021b38:	bf08      	it	eq
 8021b3a:	f108 0820 	addeq.w	r8, r8, #32
 8021b3e:	f000 fb75 	bl	802222c <__locale_ctype_ptr>
 8021b42:	4428      	add	r0, r5
 8021b44:	462b      	mov	r3, r5
 8021b46:	7842      	ldrb	r2, [r0, #1]
 8021b48:	f89a 5000 	ldrb.w	r5, [sl]
 8021b4c:	f002 0203 	and.w	r2, r2, #3
 8021b50:	2a01      	cmp	r2, #1
 8021b52:	bf08      	it	eq
 8021b54:	3320      	addeq	r3, #32
 8021b56:	4598      	cmp	r8, r3
 8021b58:	d022      	beq.n	8021ba0 <get_object_item+0xaa>
    return tolower(*string1) - tolower(*string2);
 8021b5a:	f000 fb67 	bl	802222c <__locale_ctype_ptr>
 8021b5e:	4428      	add	r0, r5
 8021b60:	f899 6000 	ldrb.w	r6, [r9]
 8021b64:	7843      	ldrb	r3, [r0, #1]
 8021b66:	f003 0303 	and.w	r3, r3, #3
 8021b6a:	2b01      	cmp	r3, #1
 8021b6c:	bf08      	it	eq
 8021b6e:	3520      	addeq	r5, #32
 8021b70:	f000 fb5c 	bl	802222c <__locale_ctype_ptr>
 8021b74:	4430      	add	r0, r6
 8021b76:	4633      	mov	r3, r6
 8021b78:	7842      	ldrb	r2, [r0, #1]
 8021b7a:	f002 0203 	and.w	r2, r2, #3
 8021b7e:	2a01      	cmp	r2, #1
 8021b80:	bf08      	it	eq
 8021b82:	3320      	addeq	r3, #32
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8021b84:	429d      	cmp	r5, r3
 8021b86:	d0bb      	beq.n	8021b00 <get_object_item+0xa>
            current_element = current_element->next;
 8021b88:	6824      	ldr	r4, [r4, #0]
 8021b8a:	e7c1      	b.n	8021b10 <get_object_item+0x1a>
            current_element = current_element->next;
 8021b8c:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8021b8e:	2c00      	cmp	r4, #0
 8021b90:	d0b5      	beq.n	8021afe <get_object_item+0x8>
 8021b92:	6a21      	ldr	r1, [r4, #32]
 8021b94:	4638      	mov	r0, r7
 8021b96:	f7de fb1b 	bl	80001d0 <strcmp>
 8021b9a:	2800      	cmp	r0, #0
 8021b9c:	d1f6      	bne.n	8021b8c <get_object_item+0x96>
 8021b9e:	e7af      	b.n	8021b00 <get_object_item+0xa>
        if (*string1 == '\0')
 8021ba0:	2d00      	cmp	r5, #0
 8021ba2:	d1bd      	bne.n	8021b20 <get_object_item+0x2a>
 8021ba4:	e7ac      	b.n	8021b00 <get_object_item+0xa>

08021ba6 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
 8021ba6:	b510      	push	{r4, lr}
 8021ba8:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8021baa:	2028      	movs	r0, #40	; 0x28
 8021bac:	4798      	blx	r3
    if (node)
 8021bae:	4604      	mov	r4, r0
 8021bb0:	b118      	cbz	r0, 8021bba <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
 8021bb2:	2228      	movs	r2, #40	; 0x28
 8021bb4:	2100      	movs	r1, #0
 8021bb6:	f000 fbba 	bl	802232e <memset>
}
 8021bba:	4620      	mov	r0, r4
 8021bbc:	bd10      	pop	{r4, pc}
	...

08021bc0 <cJSON_Delete>:
{
 8021bc0:	b570      	push	{r4, r5, r6, lr}
 8021bc2:	4d0f      	ldr	r5, [pc, #60]	; (8021c00 <cJSON_Delete+0x40>)
 8021bc4:	4604      	mov	r4, r0
    while (item != NULL)
 8021bc6:	b904      	cbnz	r4, 8021bca <cJSON_Delete+0xa>
}
 8021bc8:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021bca:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
 8021bcc:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021bce:	05d9      	lsls	r1, r3, #23
 8021bd0:	d403      	bmi.n	8021bda <cJSON_Delete+0x1a>
 8021bd2:	68a0      	ldr	r0, [r4, #8]
 8021bd4:	b108      	cbz	r0, 8021bda <cJSON_Delete+0x1a>
            cJSON_Delete(item->child);
 8021bd6:	f7ff fff3 	bl	8021bc0 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8021bda:	68e3      	ldr	r3, [r4, #12]
 8021bdc:	05da      	lsls	r2, r3, #23
 8021bde:	d403      	bmi.n	8021be8 <cJSON_Delete+0x28>
 8021be0:	6920      	ldr	r0, [r4, #16]
 8021be2:	b108      	cbz	r0, 8021be8 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->valuestring);
 8021be4:	686b      	ldr	r3, [r5, #4]
 8021be6:	4798      	blx	r3
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8021be8:	68e3      	ldr	r3, [r4, #12]
 8021bea:	059b      	lsls	r3, r3, #22
 8021bec:	d403      	bmi.n	8021bf6 <cJSON_Delete+0x36>
 8021bee:	6a20      	ldr	r0, [r4, #32]
 8021bf0:	b108      	cbz	r0, 8021bf6 <cJSON_Delete+0x36>
            global_hooks.deallocate(item->string);
 8021bf2:	686b      	ldr	r3, [r5, #4]
 8021bf4:	4798      	blx	r3
        global_hooks.deallocate(item);
 8021bf6:	4620      	mov	r0, r4
 8021bf8:	686b      	ldr	r3, [r5, #4]
 8021bfa:	4798      	blx	r3
        item = next;
 8021bfc:	4634      	mov	r4, r6
 8021bfe:	e7e2      	b.n	8021bc6 <cJSON_Delete+0x6>
 8021c00:	200005d8 	.word	0x200005d8
 8021c04:	00000000 	.word	0x00000000

08021c08 <parse_value>:
{
 8021c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c0c:	4606      	mov	r6, r0
 8021c0e:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021c10:	460c      	mov	r4, r1
 8021c12:	b909      	cbnz	r1, 8021c18 <parse_value+0x10>
    return false;
 8021c14:	2000      	movs	r0, #0
 8021c16:	e023      	b.n	8021c60 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021c18:	680f      	ldr	r7, [r1, #0]
 8021c1a:	2f00      	cmp	r7, #0
 8021c1c:	d0fa      	beq.n	8021c14 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8021c1e:	688d      	ldr	r5, [r1, #8]
 8021c20:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8021c24:	f105 0904 	add.w	r9, r5, #4
 8021c28:	45c1      	cmp	r9, r8
 8021c2a:	d80b      	bhi.n	8021c44 <parse_value+0x3c>
 8021c2c:	2204      	movs	r2, #4
 8021c2e:	49b2      	ldr	r1, [pc, #712]	; (8021ef8 <parse_value+0x2f0>)
 8021c30:	1978      	adds	r0, r7, r5
 8021c32:	f001 fe0f 	bl	8023854 <strncmp>
 8021c36:	b928      	cbnz	r0, 8021c44 <parse_value+0x3c>
        item->type = cJSON_NULL;
 8021c38:	2304      	movs	r3, #4
 8021c3a:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
 8021c3c:	f8c4 9008 	str.w	r9, [r4, #8]
    return true;
 8021c40:	2001      	movs	r0, #1
 8021c42:	e00d      	b.n	8021c60 <parse_value+0x58>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8021c44:	f105 0a05 	add.w	sl, r5, #5
 8021c48:	45d0      	cmp	r8, sl
 8021c4a:	d30c      	bcc.n	8021c66 <parse_value+0x5e>
 8021c4c:	2205      	movs	r2, #5
 8021c4e:	49ab      	ldr	r1, [pc, #684]	; (8021efc <parse_value+0x2f4>)
 8021c50:	1978      	adds	r0, r7, r5
 8021c52:	f001 fdff 	bl	8023854 <strncmp>
 8021c56:	b930      	cbnz	r0, 8021c66 <parse_value+0x5e>
        item->type = cJSON_False;
 8021c58:	2001      	movs	r0, #1
 8021c5a:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
 8021c5c:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8021c60:	b012      	add	sp, #72	; 0x48
 8021c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8021c66:	45c1      	cmp	r9, r8
 8021c68:	d80c      	bhi.n	8021c84 <parse_value+0x7c>
 8021c6a:	2204      	movs	r2, #4
 8021c6c:	49a4      	ldr	r1, [pc, #656]	; (8021f00 <parse_value+0x2f8>)
 8021c6e:	1978      	adds	r0, r7, r5
 8021c70:	f001 fdf0 	bl	8023854 <strncmp>
 8021c74:	b930      	cbnz	r0, 8021c84 <parse_value+0x7c>
        item->type = cJSON_True;
 8021c76:	2302      	movs	r3, #2
        item->valueint = 1;
 8021c78:	2001      	movs	r0, #1
        item->type = cJSON_True;
 8021c7a:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
 8021c7c:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
 8021c7e:	f8c4 9008 	str.w	r9, [r4, #8]
        return true;
 8021c82:	e7ed      	b.n	8021c60 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8021c84:	4545      	cmp	r5, r8
 8021c86:	d2c5      	bcs.n	8021c14 <parse_value+0xc>
 8021c88:	5d7b      	ldrb	r3, [r7, r5]
 8021c8a:	2b22      	cmp	r3, #34	; 0x22
 8021c8c:	d104      	bne.n	8021c98 <parse_value+0x90>
        return parse_string(item, input_buffer);
 8021c8e:	4621      	mov	r1, r4
 8021c90:	4630      	mov	r0, r6
 8021c92:	f7ff fe3b 	bl	802190c <parse_string>
 8021c96:	e7e3      	b.n	8021c60 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8021c98:	2b2d      	cmp	r3, #45	; 0x2d
 8021c9a:	d003      	beq.n	8021ca4 <parse_value+0x9c>
 8021c9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021ca0:	2a09      	cmp	r2, #9
 8021ca2:	d85a      	bhi.n	8021d5a <parse_value+0x152>
    unsigned char *after_end = NULL;
 8021ca4:	2500      	movs	r5, #0
 8021ca6:	9501      	str	r5, [sp, #4]
    struct lconv *lconv = localeconv();
 8021ca8:	f000 fade 	bl	8022268 <localeconv>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021cac:	6821      	ldr	r1, [r4, #0]
 8021cae:	2900      	cmp	r1, #0
 8021cb0:	d0b0      	beq.n	8021c14 <parse_value+0xc>
    return (unsigned char) lconv->decimal_point[0];
 8021cb2:	6803      	ldr	r3, [r0, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021cb4:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
    return (unsigned char) lconv->decimal_point[0];
 8021cb8:	f893 c000 	ldrb.w	ip, [r3]
        switch (buffer_at_offset(input_buffer)[i])
 8021cbc:	4401      	add	r1, r0
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021cbe:	462b      	mov	r3, r5
 8021cc0:	ad02      	add	r5, sp, #8
 8021cc2:	18c2      	adds	r2, r0, r3
 8021cc4:	4297      	cmp	r7, r2
 8021cc6:	d90e      	bls.n	8021ce6 <parse_value+0xde>
        switch (buffer_at_offset(input_buffer)[i])
 8021cc8:	5cca      	ldrb	r2, [r1, r3]
 8021cca:	2a39      	cmp	r2, #57	; 0x39
 8021ccc:	d82e      	bhi.n	8021d2c <parse_value+0x124>
 8021cce:	2a30      	cmp	r2, #48	; 0x30
 8021cd0:	d205      	bcs.n	8021cde <parse_value+0xd6>
 8021cd2:	2a2d      	cmp	r2, #45	; 0x2d
 8021cd4:	d003      	beq.n	8021cde <parse_value+0xd6>
 8021cd6:	2a2e      	cmp	r2, #46	; 0x2e
 8021cd8:	d02c      	beq.n	8021d34 <parse_value+0x12c>
 8021cda:	2a2b      	cmp	r2, #43	; 0x2b
 8021cdc:	d103      	bne.n	8021ce6 <parse_value+0xde>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8021cde:	54ea      	strb	r2, [r5, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021ce0:	3301      	adds	r3, #1
 8021ce2:	2b3f      	cmp	r3, #63	; 0x3f
 8021ce4:	d1ed      	bne.n	8021cc2 <parse_value+0xba>
    number_c_string[i] = '\0';
 8021ce6:	aa12      	add	r2, sp, #72	; 0x48
 8021ce8:	4413      	add	r3, r2
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021cea:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
 8021cec:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021cee:	4628      	mov	r0, r5
    number_c_string[i] = '\0';
 8021cf0:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021cf4:	f002 fc00 	bl	80244f8 <strtod>
    if (number_c_string == after_end)
 8021cf8:	9f01      	ldr	r7, [sp, #4]
 8021cfa:	42af      	cmp	r7, r5
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021cfc:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
 8021d00:	d088      	beq.n	8021c14 <parse_value+0xc>
    item->valuedouble = number;
 8021d02:	ed86 0b06 	vstr	d0, [r6, #24]
    if (number >= INT_MAX)
 8021d06:	a37a      	add	r3, pc, #488	; (adr r3, 8021ef0 <parse_value+0x2e8>)
 8021d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d0c:	ee10 0a10 	vmov	r0, s0
 8021d10:	4649      	mov	r1, r9
 8021d12:	f7de ff07 	bl	8000b24 <__aeabi_dcmpge>
 8021d16:	b180      	cbz	r0, 8021d3a <parse_value+0x132>
        item->valueint = INT_MAX;
 8021d18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
 8021d1c:	6173      	str	r3, [r6, #20]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8021d1e:	1b7d      	subs	r5, r7, r5
 8021d20:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
 8021d22:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8021d24:	443d      	add	r5, r7
    item->type = cJSON_Number;
 8021d26:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8021d28:	60a5      	str	r5, [r4, #8]
 8021d2a:	e789      	b.n	8021c40 <parse_value+0x38>
        switch (buffer_at_offset(input_buffer)[i])
 8021d2c:	2a45      	cmp	r2, #69	; 0x45
 8021d2e:	d0d6      	beq.n	8021cde <parse_value+0xd6>
 8021d30:	2a65      	cmp	r2, #101	; 0x65
 8021d32:	e7d3      	b.n	8021cdc <parse_value+0xd4>
                number_c_string[i] = decimal_point;
 8021d34:	f805 c003 	strb.w	ip, [r5, r3]
 8021d38:	e7d2      	b.n	8021ce0 <parse_value+0xd8>
    else if (number <= INT_MIN)
 8021d3a:	2200      	movs	r2, #0
 8021d3c:	4b71      	ldr	r3, [pc, #452]	; (8021f04 <parse_value+0x2fc>)
 8021d3e:	4640      	mov	r0, r8
 8021d40:	4649      	mov	r1, r9
 8021d42:	f7de fee5 	bl	8000b10 <__aeabi_dcmple>
 8021d46:	b110      	cbz	r0, 8021d4e <parse_value+0x146>
        item->valueint = INT_MIN;
 8021d48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021d4c:	e7e6      	b.n	8021d1c <parse_value+0x114>
        item->valueint = (int)number;
 8021d4e:	4640      	mov	r0, r8
 8021d50:	4649      	mov	r1, r9
 8021d52:	f7de ff11 	bl	8000b78 <__aeabi_d2iz>
 8021d56:	6170      	str	r0, [r6, #20]
 8021d58:	e7e1      	b.n	8021d1e <parse_value+0x116>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8021d5a:	2b5b      	cmp	r3, #91	; 0x5b
 8021d5c:	d154      	bne.n	8021e08 <parse_value+0x200>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8021d5e:	68e3      	ldr	r3, [r4, #12]
 8021d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021d64:	f4bf af56 	bcs.w	8021c14 <parse_value+0xc>
    input_buffer->depth++;
 8021d68:	3301      	adds	r3, #1
 8021d6a:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
 8021d6c:	5d7b      	ldrb	r3, [r7, r5]
 8021d6e:	2b5b      	cmp	r3, #91	; 0x5b
 8021d70:	f47f af50 	bne.w	8021c14 <parse_value+0xc>
    input_buffer->offset++;
 8021d74:	3501      	adds	r5, #1
 8021d76:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8021d78:	4620      	mov	r0, r4
 8021d7a:	f7ff fea7 	bl	8021acc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8021d7e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021d82:	4293      	cmp	r3, r2
 8021d84:	d25d      	bcs.n	8021e42 <parse_value+0x23a>
 8021d86:	6822      	ldr	r2, [r4, #0]
 8021d88:	5cd2      	ldrb	r2, [r2, r3]
 8021d8a:	2a5d      	cmp	r2, #93	; 0x5d
 8021d8c:	d101      	bne.n	8021d92 <parse_value+0x18a>
    cJSON *head = NULL; /* head of the linked list */
 8021d8e:	2500      	movs	r5, #0
 8021d90:	e027      	b.n	8021de2 <parse_value+0x1da>
    input_buffer->offset--;
 8021d92:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
 8021d94:	f04f 0800 	mov.w	r8, #0
    input_buffer->offset--;
 8021d98:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
 8021d9a:	4645      	mov	r5, r8
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8021d9c:	6920      	ldr	r0, [r4, #16]
 8021d9e:	f7ff ff02 	bl	8021ba6 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8021da2:	4607      	mov	r7, r0
 8021da4:	b348      	cbz	r0, 8021dfa <parse_value+0x1f2>
        if (head == NULL)
 8021da6:	b335      	cbz	r5, 8021df6 <parse_value+0x1ee>
            current_item->next = new_item;
 8021da8:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
 8021dac:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
 8021db0:	68a3      	ldr	r3, [r4, #8]
 8021db2:	3301      	adds	r3, #1
 8021db4:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021db6:	4620      	mov	r0, r4
 8021db8:	f7ff fe88 	bl	8021acc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8021dbc:	4621      	mov	r1, r4
 8021dbe:	4638      	mov	r0, r7
 8021dc0:	f7ff ff22 	bl	8021c08 <parse_value>
 8021dc4:	b1e0      	cbz	r0, 8021e00 <parse_value+0x1f8>
        buffer_skip_whitespace(input_buffer);
 8021dc6:	4620      	mov	r0, r4
 8021dc8:	f7ff fe80 	bl	8021acc <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8021dcc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021dd0:	4293      	cmp	r3, r2
 8021dd2:	d215      	bcs.n	8021e00 <parse_value+0x1f8>
 8021dd4:	6822      	ldr	r2, [r4, #0]
 8021dd6:	5cd3      	ldrb	r3, [r2, r3]
 8021dd8:	2b2c      	cmp	r3, #44	; 0x2c
 8021dda:	46b8      	mov	r8, r7
 8021ddc:	d0de      	beq.n	8021d9c <parse_value+0x194>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8021dde:	2b5d      	cmp	r3, #93	; 0x5d
 8021de0:	d10e      	bne.n	8021e00 <parse_value+0x1f8>
    input_buffer->depth--;
 8021de2:	68e3      	ldr	r3, [r4, #12]
 8021de4:	3b01      	subs	r3, #1
 8021de6:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
 8021de8:	2320      	movs	r3, #32
    item->child = head;
 8021dea:	e9c6 5302 	strd	r5, r3, [r6, #8]
    input_buffer->offset++;
 8021dee:	68a3      	ldr	r3, [r4, #8]
 8021df0:	3301      	adds	r3, #1
 8021df2:	60a3      	str	r3, [r4, #8]
 8021df4:	e724      	b.n	8021c40 <parse_value+0x38>
        if (head == NULL)
 8021df6:	4605      	mov	r5, r0
 8021df8:	e7da      	b.n	8021db0 <parse_value+0x1a8>
    if (head != NULL)
 8021dfa:	2d00      	cmp	r5, #0
 8021dfc:	f43f af0a 	beq.w	8021c14 <parse_value+0xc>
        cJSON_Delete(head);
 8021e00:	4628      	mov	r0, r5
        cJSON_Delete(head);
 8021e02:	f7ff fedd 	bl	8021bc0 <cJSON_Delete>
 8021e06:	e705      	b.n	8021c14 <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8021e08:	2b7b      	cmp	r3, #123	; 0x7b
 8021e0a:	f47f af03 	bne.w	8021c14 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8021e0e:	68e3      	ldr	r3, [r4, #12]
 8021e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021e14:	f4bf aefe 	bcs.w	8021c14 <parse_value+0xc>
    input_buffer->depth++;
 8021e18:	3301      	adds	r3, #1
 8021e1a:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8021e1c:	5d7b      	ldrb	r3, [r7, r5]
 8021e1e:	2b7b      	cmp	r3, #123	; 0x7b
 8021e20:	f47f aef8 	bne.w	8021c14 <parse_value+0xc>
    input_buffer->offset++;
 8021e24:	3501      	adds	r5, #1
 8021e26:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8021e28:	4620      	mov	r0, r4
 8021e2a:	f7ff fe4f 	bl	8021acc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8021e2e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021e32:	4293      	cmp	r3, r2
 8021e34:	d205      	bcs.n	8021e42 <parse_value+0x23a>
 8021e36:	6822      	ldr	r2, [r4, #0]
 8021e38:	5cd2      	ldrb	r2, [r2, r3]
 8021e3a:	2a7d      	cmp	r2, #125	; 0x7d
 8021e3c:	d104      	bne.n	8021e48 <parse_value+0x240>
    cJSON *head = NULL; /* linked list head */
 8021e3e:	2700      	movs	r7, #0
 8021e40:	e046      	b.n	8021ed0 <parse_value+0x2c8>
        input_buffer->offset--;
 8021e42:	3b01      	subs	r3, #1
 8021e44:	60a3      	str	r3, [r4, #8]
 8021e46:	e6e5      	b.n	8021c14 <parse_value+0xc>
    cJSON *current_item = NULL;
 8021e48:	f04f 0800 	mov.w	r8, #0
    input_buffer->offset--;
 8021e4c:	3b01      	subs	r3, #1
 8021e4e:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
 8021e50:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
 8021e52:	46c1      	mov	r9, r8
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8021e54:	6920      	ldr	r0, [r4, #16]
 8021e56:	f7ff fea6 	bl	8021ba6 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8021e5a:	4605      	mov	r5, r0
 8021e5c:	2800      	cmp	r0, #0
 8021e5e:	d040      	beq.n	8021ee2 <parse_value+0x2da>
        if (head == NULL)
 8021e60:	2f00      	cmp	r7, #0
 8021e62:	d03c      	beq.n	8021ede <parse_value+0x2d6>
            current_item->next = new_item;
 8021e64:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
 8021e68:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
 8021e6c:	68a3      	ldr	r3, [r4, #8]
 8021e6e:	3301      	adds	r3, #1
 8021e70:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021e72:	4620      	mov	r0, r4
 8021e74:	f7ff fe2a 	bl	8021acc <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8021e78:	4621      	mov	r1, r4
 8021e7a:	4628      	mov	r0, r5
 8021e7c:	f7ff fd46 	bl	802190c <parse_string>
 8021e80:	b390      	cbz	r0, 8021ee8 <parse_value+0x2e0>
        buffer_skip_whitespace(input_buffer);
 8021e82:	4620      	mov	r0, r4
 8021e84:	f7ff fe22 	bl	8021acc <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 8021e88:	692b      	ldr	r3, [r5, #16]
 8021e8a:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8021e8c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021e90:	4293      	cmp	r3, r2
        current_item->valuestring = NULL;
 8021e92:	f8c5 9010 	str.w	r9, [r5, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8021e96:	d227      	bcs.n	8021ee8 <parse_value+0x2e0>
 8021e98:	6822      	ldr	r2, [r4, #0]
 8021e9a:	5cd2      	ldrb	r2, [r2, r3]
 8021e9c:	2a3a      	cmp	r2, #58	; 0x3a
 8021e9e:	d123      	bne.n	8021ee8 <parse_value+0x2e0>
        input_buffer->offset++;
 8021ea0:	3301      	adds	r3, #1
 8021ea2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021ea4:	4620      	mov	r0, r4
 8021ea6:	f7ff fe11 	bl	8021acc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8021eaa:	4621      	mov	r1, r4
 8021eac:	4628      	mov	r0, r5
 8021eae:	f7ff feab 	bl	8021c08 <parse_value>
 8021eb2:	b1c8      	cbz	r0, 8021ee8 <parse_value+0x2e0>
        buffer_skip_whitespace(input_buffer);
 8021eb4:	4620      	mov	r0, r4
 8021eb6:	f7ff fe09 	bl	8021acc <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8021eba:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021ebe:	4293      	cmp	r3, r2
 8021ec0:	d212      	bcs.n	8021ee8 <parse_value+0x2e0>
 8021ec2:	6822      	ldr	r2, [r4, #0]
 8021ec4:	5cd3      	ldrb	r3, [r2, r3]
 8021ec6:	2b2c      	cmp	r3, #44	; 0x2c
 8021ec8:	46a8      	mov	r8, r5
 8021eca:	d0c3      	beq.n	8021e54 <parse_value+0x24c>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8021ecc:	2b7d      	cmp	r3, #125	; 0x7d
 8021ece:	d10b      	bne.n	8021ee8 <parse_value+0x2e0>
    input_buffer->depth--;
 8021ed0:	68e3      	ldr	r3, [r4, #12]
 8021ed2:	3b01      	subs	r3, #1
 8021ed4:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
 8021ed6:	2340      	movs	r3, #64	; 0x40
    item->child = head;
 8021ed8:	e9c6 7302 	strd	r7, r3, [r6, #8]
 8021edc:	e787      	b.n	8021dee <parse_value+0x1e6>
        if (head == NULL)
 8021ede:	4607      	mov	r7, r0
 8021ee0:	e7c4      	b.n	8021e6c <parse_value+0x264>
    if (head != NULL)
 8021ee2:	2f00      	cmp	r7, #0
 8021ee4:	f43f ae96 	beq.w	8021c14 <parse_value+0xc>
        cJSON_Delete(head);
 8021ee8:	4638      	mov	r0, r7
 8021eea:	e78a      	b.n	8021e02 <parse_value+0x1fa>
 8021eec:	f3af 8000 	nop.w
 8021ef0:	ffc00000 	.word	0xffc00000
 8021ef4:	41dfffff 	.word	0x41dfffff
 8021ef8:	08033162 	.word	0x08033162
 8021efc:	08032a9c 	.word	0x08032a9c
 8021f00:	08032a97 	.word	0x08032a97
 8021f04:	c1e00000 	.word	0xc1e00000

08021f08 <cJSON_ParseWithOpts>:
{
 8021f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f0c:	b088      	sub	sp, #32
 8021f0e:	4605      	mov	r5, r0
 8021f10:	460e      	mov	r6, r1
 8021f12:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8021f14:	2100      	movs	r1, #0
 8021f16:	221c      	movs	r2, #28
 8021f18:	a801      	add	r0, sp, #4
    global_error.json = NULL;
 8021f1a:	4f25      	ldr	r7, [pc, #148]	; (8021fb0 <cJSON_ParseWithOpts+0xa8>)
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8021f1c:	f000 fa07 	bl	802232e <memset>
    global_error.json = NULL;
 8021f20:	2200      	movs	r2, #0
    global_error.position = 0;
 8021f22:	e9c7 2200 	strd	r2, r2, [r7]
    if (value == NULL)
 8021f26:	2d00      	cmp	r5, #0
 8021f28:	d036      	beq.n	8021f98 <cJSON_ParseWithOpts+0x90>
    buffer.length = strlen((const char*)value) + sizeof("");
 8021f2a:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
 8021f2c:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
 8021f2e:	f7de f959 	bl	80001e4 <strlen>
    buffer.hooks = global_hooks;
 8021f32:	4b20      	ldr	r3, [pc, #128]	; (8021fb4 <cJSON_ParseWithOpts+0xac>)
    buffer.length = strlen((const char*)value) + sizeof("");
 8021f34:	3001      	adds	r0, #1
 8021f36:	9002      	str	r0, [sp, #8]
    buffer.hooks = global_hooks;
 8021f38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021f3c:	ab08      	add	r3, sp, #32
 8021f3e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
 8021f42:	f7ff fe30 	bl	8021ba6 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
 8021f46:	4604      	mov	r4, r0
 8021f48:	b1e8      	cbz	r0, 8021f86 <cJSON_ParseWithOpts+0x7e>
    if (!parse_value(item, buffer_skip_whitespace(&buffer)))
 8021f4a:	a801      	add	r0, sp, #4
 8021f4c:	f7ff fdbe 	bl	8021acc <buffer_skip_whitespace>
 8021f50:	4601      	mov	r1, r0
 8021f52:	4620      	mov	r0, r4
 8021f54:	f7ff fe58 	bl	8021c08 <parse_value>
 8021f58:	b190      	cbz	r0, 8021f80 <cJSON_ParseWithOpts+0x78>
    if (require_null_terminated)
 8021f5a:	f1b8 0f00 	cmp.w	r8, #0
 8021f5e:	d104      	bne.n	8021f6a <cJSON_ParseWithOpts+0x62>
    if (return_parse_end)
 8021f60:	b9e6      	cbnz	r6, 8021f9c <cJSON_ParseWithOpts+0x94>
}
 8021f62:	4620      	mov	r0, r4
 8021f64:	b008      	add	sp, #32
 8021f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        buffer_skip_whitespace(&buffer);
 8021f6a:	a801      	add	r0, sp, #4
 8021f6c:	f7ff fdae 	bl	8021acc <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8021f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021f74:	4293      	cmp	r3, r2
 8021f76:	d203      	bcs.n	8021f80 <cJSON_ParseWithOpts+0x78>
 8021f78:	9a01      	ldr	r2, [sp, #4]
 8021f7a:	5cd3      	ldrb	r3, [r2, r3]
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d0ef      	beq.n	8021f60 <cJSON_ParseWithOpts+0x58>
        cJSON_Delete(item);
 8021f80:	4620      	mov	r0, r4
 8021f82:	f7ff fe1d 	bl	8021bc0 <cJSON_Delete>
        if (buffer.offset < buffer.length)
 8021f86:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8021f8a:	4298      	cmp	r0, r3
 8021f8c:	d301      	bcc.n	8021f92 <cJSON_ParseWithOpts+0x8a>
        else if (buffer.length > 0)
 8021f8e:	b153      	cbz	r3, 8021fa6 <cJSON_ParseWithOpts+0x9e>
            local_error.position = buffer.length - 1;
 8021f90:	1e58      	subs	r0, r3, #1
        if (return_parse_end != NULL)
 8021f92:	b156      	cbz	r6, 8021faa <cJSON_ParseWithOpts+0xa2>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8021f94:	4428      	add	r0, r5
 8021f96:	6030      	str	r0, [r6, #0]
    return NULL;
 8021f98:	2400      	movs	r4, #0
 8021f9a:	e7e2      	b.n	8021f62 <cJSON_ParseWithOpts+0x5a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8021f9c:	9b01      	ldr	r3, [sp, #4]
 8021f9e:	9a03      	ldr	r2, [sp, #12]
 8021fa0:	4413      	add	r3, r2
 8021fa2:	6033      	str	r3, [r6, #0]
 8021fa4:	e7dd      	b.n	8021f62 <cJSON_ParseWithOpts+0x5a>
        local_error.position = 0;
 8021fa6:	4618      	mov	r0, r3
 8021fa8:	e7f3      	b.n	8021f92 <cJSON_ParseWithOpts+0x8a>
            global_error = local_error;
 8021faa:	e9c7 5000 	strd	r5, r0, [r7]
 8021fae:	e7f3      	b.n	8021f98 <cJSON_ParseWithOpts+0x90>
 8021fb0:	2000112c 	.word	0x2000112c
 8021fb4:	200005d8 	.word	0x200005d8

08021fb8 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
 8021fb8:	2200      	movs	r2, #0
 8021fba:	4611      	mov	r1, r2
 8021fbc:	f7ff bfa4 	b.w	8021f08 <cJSON_ParseWithOpts>

08021fc0 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
    return get_object_item(object, string, true);
 8021fc0:	2201      	movs	r2, #1
 8021fc2:	f7ff bd98 	b.w	8021af6 <get_object_item>

08021fc6 <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
 8021fc6:	b118      	cbz	r0, 8021fd0 <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
 8021fc8:	7b00      	ldrb	r0, [r0, #12]
 8021fca:	1e83      	subs	r3, r0, #2
 8021fcc:	4258      	negs	r0, r3
 8021fce:	4158      	adcs	r0, r3
}
 8021fd0:	4770      	bx	lr

08021fd2 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
 8021fd2:	b120      	cbz	r0, 8021fde <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 8021fd4:	68c0      	ldr	r0, [r0, #12]
 8021fd6:	f010 0003 	ands.w	r0, r0, #3
 8021fda:	bf18      	it	ne
 8021fdc:	2001      	movne	r0, #1
}
 8021fde:	4770      	bx	lr

08021fe0 <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
 8021fe0:	b120      	cbz	r0, 8021fec <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
 8021fe2:	7b00      	ldrb	r0, [r0, #12]
 8021fe4:	f1a0 0308 	sub.w	r3, r0, #8
 8021fe8:	4258      	negs	r0, r3
 8021fea:	4158      	adcs	r0, r3
}
 8021fec:	4770      	bx	lr

08021fee <atoi>:
 8021fee:	220a      	movs	r2, #10
 8021ff0:	2100      	movs	r1, #0
 8021ff2:	f002 bb77 	b.w	80246e4 <strtol>
	...

08021ff8 <calloc>:
 8021ff8:	4b02      	ldr	r3, [pc, #8]	; (8022004 <calloc+0xc>)
 8021ffa:	460a      	mov	r2, r1
 8021ffc:	4601      	mov	r1, r0
 8021ffe:	6818      	ldr	r0, [r3, #0]
 8022000:	f000 bc32 	b.w	8022868 <_calloc_r>
 8022004:	200005e4 	.word	0x200005e4

08022008 <__errno>:
 8022008:	4b01      	ldr	r3, [pc, #4]	; (8022010 <__errno+0x8>)
 802200a:	6818      	ldr	r0, [r3, #0]
 802200c:	4770      	bx	lr
 802200e:	bf00      	nop
 8022010:	200005e4 	.word	0x200005e4

08022014 <fiprintf>:
 8022014:	b40e      	push	{r1, r2, r3}
 8022016:	b503      	push	{r0, r1, lr}
 8022018:	4601      	mov	r1, r0
 802201a:	ab03      	add	r3, sp, #12
 802201c:	4805      	ldr	r0, [pc, #20]	; (8022034 <fiprintf+0x20>)
 802201e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022022:	6800      	ldr	r0, [r0, #0]
 8022024:	9301      	str	r3, [sp, #4]
 8022026:	f000 fcff 	bl	8022a28 <_vfiprintf_r>
 802202a:	b002      	add	sp, #8
 802202c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022030:	b003      	add	sp, #12
 8022032:	4770      	bx	lr
 8022034:	200005e4 	.word	0x200005e4

08022038 <getchar>:
 8022038:	4b07      	ldr	r3, [pc, #28]	; (8022058 <getchar+0x20>)
 802203a:	b510      	push	{r4, lr}
 802203c:	681c      	ldr	r4, [r3, #0]
 802203e:	b124      	cbz	r4, 802204a <getchar+0x12>
 8022040:	69a3      	ldr	r3, [r4, #24]
 8022042:	b913      	cbnz	r3, 802204a <getchar+0x12>
 8022044:	4620      	mov	r0, r4
 8022046:	f003 fe15 	bl	8025c74 <__sinit>
 802204a:	6861      	ldr	r1, [r4, #4]
 802204c:	4620      	mov	r0, r4
 802204e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022052:	f004 b9db 	b.w	802640c <_getc_r>
 8022056:	bf00      	nop
 8022058:	200005e4 	.word	0x200005e4

0802205c <gmtime>:
 802205c:	b538      	push	{r3, r4, r5, lr}
 802205e:	4b07      	ldr	r3, [pc, #28]	; (802207c <gmtime+0x20>)
 8022060:	681c      	ldr	r4, [r3, #0]
 8022062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022064:	4605      	mov	r5, r0
 8022066:	b91b      	cbnz	r3, 8022070 <gmtime+0x14>
 8022068:	2024      	movs	r0, #36	; 0x24
 802206a:	f000 f90b 	bl	8022284 <malloc>
 802206e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8022070:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8022072:	4628      	mov	r0, r5
 8022074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022078:	f000 b802 	b.w	8022080 <gmtime_r>
 802207c:	200005e4 	.word	0x200005e4

08022080 <gmtime_r>:
 8022080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022084:	e9d0 8900 	ldrd	r8, r9, [r0]
 8022088:	460c      	mov	r4, r1
 802208a:	4a50      	ldr	r2, [pc, #320]	; (80221cc <gmtime_r+0x14c>)
 802208c:	2300      	movs	r3, #0
 802208e:	4640      	mov	r0, r8
 8022090:	4649      	mov	r1, r9
 8022092:	f7de fdb9 	bl	8000c08 <__aeabi_ldivmod>
 8022096:	4a4d      	ldr	r2, [pc, #308]	; (80221cc <gmtime_r+0x14c>)
 8022098:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 802209c:	2300      	movs	r3, #0
 802209e:	4640      	mov	r0, r8
 80220a0:	4649      	mov	r1, r9
 80220a2:	f7de fdb1 	bl	8000c08 <__aeabi_ldivmod>
 80220a6:	2a00      	cmp	r2, #0
 80220a8:	bfbc      	itt	lt
 80220aa:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80220ae:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80220b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80220b6:	fb92 f3f1 	sdiv	r3, r2, r1
 80220ba:	fb01 2213 	mls	r2, r1, r3, r2
 80220be:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80220c2:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 80220c6:	60a3      	str	r3, [r4, #8]
 80220c8:	bfb8      	it	lt
 80220ca:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 80220ce:	fb92 f3f1 	sdiv	r3, r2, r1
 80220d2:	fb01 2213 	mls	r2, r1, r3, r2
 80220d6:	6063      	str	r3, [r4, #4]
 80220d8:	6022      	str	r2, [r4, #0]
 80220da:	1ceb      	adds	r3, r5, #3
 80220dc:	2207      	movs	r2, #7
 80220de:	fb93 f2f2 	sdiv	r2, r3, r2
 80220e2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80220e6:	1a9b      	subs	r3, r3, r2
 80220e8:	bf48      	it	mi
 80220ea:	3307      	addmi	r3, #7
 80220ec:	2d00      	cmp	r5, #0
 80220ee:	61a3      	str	r3, [r4, #24]
 80220f0:	bfb8      	it	lt
 80220f2:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 80220f6:	4836      	ldr	r0, [pc, #216]	; (80221d0 <gmtime_r+0x150>)
 80220f8:	bfae      	itee	ge
 80220fa:	fb95 f0f0 	sdivge	r0, r5, r0
 80220fe:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022102:	fb93 f0f0 	sdivlt	r0, r3, r0
 8022106:	4b33      	ldr	r3, [pc, #204]	; (80221d4 <gmtime_r+0x154>)
 8022108:	fb03 5300 	mla	r3, r3, r0, r5
 802210c:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8022110:	fbb3 f1f1 	udiv	r1, r3, r1
 8022114:	4419      	add	r1, r3
 8022116:	f240 57b4 	movw	r7, #1460	; 0x5b4
 802211a:	fbb3 f2f7 	udiv	r2, r3, r7
 802211e:	1a89      	subs	r1, r1, r2
 8022120:	4a2d      	ldr	r2, [pc, #180]	; (80221d8 <gmtime_r+0x158>)
 8022122:	fbb3 f2f2 	udiv	r2, r3, r2
 8022126:	1a8a      	subs	r2, r1, r2
 8022128:	f648 6194 	movw	r1, #36500	; 0x8e94
 802212c:	fbb2 f1f1 	udiv	r1, r2, r1
 8022130:	440b      	add	r3, r1
 8022132:	f240 166d 	movw	r6, #365	; 0x16d
 8022136:	fbb2 f5f6 	udiv	r5, r2, r6
 802213a:	fbb2 f2f7 	udiv	r2, r2, r7
 802213e:	1a9a      	subs	r2, r3, r2
 8022140:	fb06 2315 	mls	r3, r6, r5, r2
 8022144:	2199      	movs	r1, #153	; 0x99
 8022146:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 802214a:	1c5e      	adds	r6, r3, #1
 802214c:	3202      	adds	r2, #2
 802214e:	fbb2 f2f1 	udiv	r2, r2, r1
 8022152:	2a0a      	cmp	r2, #10
 8022154:	fb01 f102 	mul.w	r1, r1, r2
 8022158:	f101 0102 	add.w	r1, r1, #2
 802215c:	f04f 0705 	mov.w	r7, #5
 8022160:	fbb1 f1f7 	udiv	r1, r1, r7
 8022164:	eba6 0101 	sub.w	r1, r6, r1
 8022168:	bf34      	ite	cc
 802216a:	2602      	movcc	r6, #2
 802216c:	f06f 0609 	mvncs.w	r6, #9
 8022170:	4416      	add	r6, r2
 8022172:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8022176:	fb02 5000 	mla	r0, r2, r0, r5
 802217a:	2e01      	cmp	r6, #1
 802217c:	bf98      	it	ls
 802217e:	3001      	addls	r0, #1
 8022180:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8022184:	d30c      	bcc.n	80221a0 <gmtime_r+0x120>
 8022186:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802218a:	61e3      	str	r3, [r4, #28]
 802218c:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8022190:	2300      	movs	r3, #0
 8022192:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8022196:	60e1      	str	r1, [r4, #12]
 8022198:	6223      	str	r3, [r4, #32]
 802219a:	4620      	mov	r0, r4
 802219c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80221a0:	07aa      	lsls	r2, r5, #30
 80221a2:	d105      	bne.n	80221b0 <gmtime_r+0x130>
 80221a4:	2764      	movs	r7, #100	; 0x64
 80221a6:	fbb5 f2f7 	udiv	r2, r5, r7
 80221aa:	fb07 5212 	mls	r2, r7, r2, r5
 80221ae:	b95a      	cbnz	r2, 80221c8 <gmtime_r+0x148>
 80221b0:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80221b4:	fbb5 f2f7 	udiv	r2, r5, r7
 80221b8:	fb07 5212 	mls	r2, r7, r2, r5
 80221bc:	fab2 f282 	clz	r2, r2
 80221c0:	0952      	lsrs	r2, r2, #5
 80221c2:	333b      	adds	r3, #59	; 0x3b
 80221c4:	4413      	add	r3, r2
 80221c6:	e7e0      	b.n	802218a <gmtime_r+0x10a>
 80221c8:	2201      	movs	r2, #1
 80221ca:	e7fa      	b.n	80221c2 <gmtime_r+0x142>
 80221cc:	00015180 	.word	0x00015180
 80221d0:	00023ab1 	.word	0x00023ab1
 80221d4:	fffdc54f 	.word	0xfffdc54f
 80221d8:	00023ab0 	.word	0x00023ab0

080221dc <__libc_init_array>:
 80221dc:	b570      	push	{r4, r5, r6, lr}
 80221de:	4e0d      	ldr	r6, [pc, #52]	; (8022214 <__libc_init_array+0x38>)
 80221e0:	4c0d      	ldr	r4, [pc, #52]	; (8022218 <__libc_init_array+0x3c>)
 80221e2:	1ba4      	subs	r4, r4, r6
 80221e4:	10a4      	asrs	r4, r4, #2
 80221e6:	2500      	movs	r5, #0
 80221e8:	42a5      	cmp	r5, r4
 80221ea:	d109      	bne.n	8022200 <__libc_init_array+0x24>
 80221ec:	4e0b      	ldr	r6, [pc, #44]	; (802221c <__libc_init_array+0x40>)
 80221ee:	4c0c      	ldr	r4, [pc, #48]	; (8022220 <__libc_init_array+0x44>)
 80221f0:	f005 fcb6 	bl	8027b60 <_init>
 80221f4:	1ba4      	subs	r4, r4, r6
 80221f6:	10a4      	asrs	r4, r4, #2
 80221f8:	2500      	movs	r5, #0
 80221fa:	42a5      	cmp	r5, r4
 80221fc:	d105      	bne.n	802220a <__libc_init_array+0x2e>
 80221fe:	bd70      	pop	{r4, r5, r6, pc}
 8022200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022204:	4798      	blx	r3
 8022206:	3501      	adds	r5, #1
 8022208:	e7ee      	b.n	80221e8 <__libc_init_array+0xc>
 802220a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802220e:	4798      	blx	r3
 8022210:	3501      	adds	r5, #1
 8022212:	e7f2      	b.n	80221fa <__libc_init_array+0x1e>
 8022214:	080335b8 	.word	0x080335b8
 8022218:	080335b8 	.word	0x080335b8
 802221c:	080335b8 	.word	0x080335b8
 8022220:	080335bc 	.word	0x080335bc

08022224 <__locale_ctype_ptr_l>:
 8022224:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8022228:	4770      	bx	lr
	...

0802222c <__locale_ctype_ptr>:
 802222c:	4b04      	ldr	r3, [pc, #16]	; (8022240 <__locale_ctype_ptr+0x14>)
 802222e:	4a05      	ldr	r2, [pc, #20]	; (8022244 <__locale_ctype_ptr+0x18>)
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	6a1b      	ldr	r3, [r3, #32]
 8022234:	2b00      	cmp	r3, #0
 8022236:	bf08      	it	eq
 8022238:	4613      	moveq	r3, r2
 802223a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 802223e:	4770      	bx	lr
 8022240:	200005e4 	.word	0x200005e4
 8022244:	20000648 	.word	0x20000648

08022248 <__localeconv_l>:
 8022248:	30f0      	adds	r0, #240	; 0xf0
 802224a:	4770      	bx	lr

0802224c <_localeconv_r>:
 802224c:	4b04      	ldr	r3, [pc, #16]	; (8022260 <_localeconv_r+0x14>)
 802224e:	681b      	ldr	r3, [r3, #0]
 8022250:	6a18      	ldr	r0, [r3, #32]
 8022252:	4b04      	ldr	r3, [pc, #16]	; (8022264 <_localeconv_r+0x18>)
 8022254:	2800      	cmp	r0, #0
 8022256:	bf08      	it	eq
 8022258:	4618      	moveq	r0, r3
 802225a:	30f0      	adds	r0, #240	; 0xf0
 802225c:	4770      	bx	lr
 802225e:	bf00      	nop
 8022260:	200005e4 	.word	0x200005e4
 8022264:	20000648 	.word	0x20000648

08022268 <localeconv>:
 8022268:	4b04      	ldr	r3, [pc, #16]	; (802227c <localeconv+0x14>)
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	6a18      	ldr	r0, [r3, #32]
 802226e:	4b04      	ldr	r3, [pc, #16]	; (8022280 <localeconv+0x18>)
 8022270:	2800      	cmp	r0, #0
 8022272:	bf08      	it	eq
 8022274:	4618      	moveq	r0, r3
 8022276:	30f0      	adds	r0, #240	; 0xf0
 8022278:	4770      	bx	lr
 802227a:	bf00      	nop
 802227c:	200005e4 	.word	0x200005e4
 8022280:	20000648 	.word	0x20000648

08022284 <malloc>:
 8022284:	4b02      	ldr	r3, [pc, #8]	; (8022290 <malloc+0xc>)
 8022286:	4601      	mov	r1, r0
 8022288:	6818      	ldr	r0, [r3, #0]
 802228a:	f000 bb49 	b.w	8022920 <_malloc_r>
 802228e:	bf00      	nop
 8022290:	200005e4 	.word	0x200005e4

08022294 <free>:
 8022294:	4b02      	ldr	r3, [pc, #8]	; (80222a0 <free+0xc>)
 8022296:	4601      	mov	r1, r0
 8022298:	6818      	ldr	r0, [r3, #0]
 802229a:	f000 baf3 	b.w	8022884 <_free_r>
 802229e:	bf00      	nop
 80222a0:	200005e4 	.word	0x200005e4

080222a4 <__ascii_mbtowc>:
 80222a4:	b082      	sub	sp, #8
 80222a6:	b901      	cbnz	r1, 80222aa <__ascii_mbtowc+0x6>
 80222a8:	a901      	add	r1, sp, #4
 80222aa:	b142      	cbz	r2, 80222be <__ascii_mbtowc+0x1a>
 80222ac:	b14b      	cbz	r3, 80222c2 <__ascii_mbtowc+0x1e>
 80222ae:	7813      	ldrb	r3, [r2, #0]
 80222b0:	600b      	str	r3, [r1, #0]
 80222b2:	7812      	ldrb	r2, [r2, #0]
 80222b4:	1c10      	adds	r0, r2, #0
 80222b6:	bf18      	it	ne
 80222b8:	2001      	movne	r0, #1
 80222ba:	b002      	add	sp, #8
 80222bc:	4770      	bx	lr
 80222be:	4610      	mov	r0, r2
 80222c0:	e7fb      	b.n	80222ba <__ascii_mbtowc+0x16>
 80222c2:	f06f 0001 	mvn.w	r0, #1
 80222c6:	e7f8      	b.n	80222ba <__ascii_mbtowc+0x16>

080222c8 <memcmp>:
 80222c8:	b530      	push	{r4, r5, lr}
 80222ca:	2400      	movs	r4, #0
 80222cc:	42a2      	cmp	r2, r4
 80222ce:	d101      	bne.n	80222d4 <memcmp+0xc>
 80222d0:	2000      	movs	r0, #0
 80222d2:	e007      	b.n	80222e4 <memcmp+0x1c>
 80222d4:	5d03      	ldrb	r3, [r0, r4]
 80222d6:	3401      	adds	r4, #1
 80222d8:	190d      	adds	r5, r1, r4
 80222da:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80222de:	42ab      	cmp	r3, r5
 80222e0:	d0f4      	beq.n	80222cc <memcmp+0x4>
 80222e2:	1b58      	subs	r0, r3, r5
 80222e4:	bd30      	pop	{r4, r5, pc}

080222e6 <memcpy>:
 80222e6:	b510      	push	{r4, lr}
 80222e8:	1e43      	subs	r3, r0, #1
 80222ea:	440a      	add	r2, r1
 80222ec:	4291      	cmp	r1, r2
 80222ee:	d100      	bne.n	80222f2 <memcpy+0xc>
 80222f0:	bd10      	pop	{r4, pc}
 80222f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80222f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80222fa:	e7f7      	b.n	80222ec <memcpy+0x6>

080222fc <memmove>:
 80222fc:	4288      	cmp	r0, r1
 80222fe:	b510      	push	{r4, lr}
 8022300:	eb01 0302 	add.w	r3, r1, r2
 8022304:	d807      	bhi.n	8022316 <memmove+0x1a>
 8022306:	1e42      	subs	r2, r0, #1
 8022308:	4299      	cmp	r1, r3
 802230a:	d00a      	beq.n	8022322 <memmove+0x26>
 802230c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022310:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022314:	e7f8      	b.n	8022308 <memmove+0xc>
 8022316:	4283      	cmp	r3, r0
 8022318:	d9f5      	bls.n	8022306 <memmove+0xa>
 802231a:	1881      	adds	r1, r0, r2
 802231c:	1ad2      	subs	r2, r2, r3
 802231e:	42d3      	cmn	r3, r2
 8022320:	d100      	bne.n	8022324 <memmove+0x28>
 8022322:	bd10      	pop	{r4, pc}
 8022324:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022328:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802232c:	e7f7      	b.n	802231e <memmove+0x22>

0802232e <memset>:
 802232e:	4402      	add	r2, r0
 8022330:	4603      	mov	r3, r0
 8022332:	4293      	cmp	r3, r2
 8022334:	d100      	bne.n	8022338 <memset+0xa>
 8022336:	4770      	bx	lr
 8022338:	f803 1b01 	strb.w	r1, [r3], #1
 802233c:	e7f9      	b.n	8022332 <memset+0x4>
	...

08022340 <validate_structure>:
 8022340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022342:	6801      	ldr	r1, [r0, #0]
 8022344:	293b      	cmp	r1, #59	; 0x3b
 8022346:	4604      	mov	r4, r0
 8022348:	d911      	bls.n	802236e <validate_structure+0x2e>
 802234a:	223c      	movs	r2, #60	; 0x3c
 802234c:	4668      	mov	r0, sp
 802234e:	f002 fd37 	bl	8024dc0 <div>
 8022352:	9a01      	ldr	r2, [sp, #4]
 8022354:	6863      	ldr	r3, [r4, #4]
 8022356:	9900      	ldr	r1, [sp, #0]
 8022358:	2a00      	cmp	r2, #0
 802235a:	440b      	add	r3, r1
 802235c:	6063      	str	r3, [r4, #4]
 802235e:	bfbb      	ittet	lt
 8022360:	323c      	addlt	r2, #60	; 0x3c
 8022362:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022366:	6022      	strge	r2, [r4, #0]
 8022368:	6022      	strlt	r2, [r4, #0]
 802236a:	bfb8      	it	lt
 802236c:	6063      	strlt	r3, [r4, #4]
 802236e:	6861      	ldr	r1, [r4, #4]
 8022370:	293b      	cmp	r1, #59	; 0x3b
 8022372:	d911      	bls.n	8022398 <validate_structure+0x58>
 8022374:	223c      	movs	r2, #60	; 0x3c
 8022376:	4668      	mov	r0, sp
 8022378:	f002 fd22 	bl	8024dc0 <div>
 802237c:	9a01      	ldr	r2, [sp, #4]
 802237e:	68a3      	ldr	r3, [r4, #8]
 8022380:	9900      	ldr	r1, [sp, #0]
 8022382:	2a00      	cmp	r2, #0
 8022384:	440b      	add	r3, r1
 8022386:	60a3      	str	r3, [r4, #8]
 8022388:	bfbb      	ittet	lt
 802238a:	323c      	addlt	r2, #60	; 0x3c
 802238c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022390:	6062      	strge	r2, [r4, #4]
 8022392:	6062      	strlt	r2, [r4, #4]
 8022394:	bfb8      	it	lt
 8022396:	60a3      	strlt	r3, [r4, #8]
 8022398:	68a1      	ldr	r1, [r4, #8]
 802239a:	2917      	cmp	r1, #23
 802239c:	d911      	bls.n	80223c2 <validate_structure+0x82>
 802239e:	2218      	movs	r2, #24
 80223a0:	4668      	mov	r0, sp
 80223a2:	f002 fd0d 	bl	8024dc0 <div>
 80223a6:	9a01      	ldr	r2, [sp, #4]
 80223a8:	68e3      	ldr	r3, [r4, #12]
 80223aa:	9900      	ldr	r1, [sp, #0]
 80223ac:	2a00      	cmp	r2, #0
 80223ae:	440b      	add	r3, r1
 80223b0:	60e3      	str	r3, [r4, #12]
 80223b2:	bfbb      	ittet	lt
 80223b4:	3218      	addlt	r2, #24
 80223b6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80223ba:	60a2      	strge	r2, [r4, #8]
 80223bc:	60a2      	strlt	r2, [r4, #8]
 80223be:	bfb8      	it	lt
 80223c0:	60e3      	strlt	r3, [r4, #12]
 80223c2:	6921      	ldr	r1, [r4, #16]
 80223c4:	290b      	cmp	r1, #11
 80223c6:	d911      	bls.n	80223ec <validate_structure+0xac>
 80223c8:	220c      	movs	r2, #12
 80223ca:	4668      	mov	r0, sp
 80223cc:	f002 fcf8 	bl	8024dc0 <div>
 80223d0:	9a01      	ldr	r2, [sp, #4]
 80223d2:	6963      	ldr	r3, [r4, #20]
 80223d4:	9900      	ldr	r1, [sp, #0]
 80223d6:	2a00      	cmp	r2, #0
 80223d8:	440b      	add	r3, r1
 80223da:	6163      	str	r3, [r4, #20]
 80223dc:	bfbb      	ittet	lt
 80223de:	320c      	addlt	r2, #12
 80223e0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80223e4:	6122      	strge	r2, [r4, #16]
 80223e6:	6122      	strlt	r2, [r4, #16]
 80223e8:	bfb8      	it	lt
 80223ea:	6163      	strlt	r3, [r4, #20]
 80223ec:	6963      	ldr	r3, [r4, #20]
 80223ee:	0799      	lsls	r1, r3, #30
 80223f0:	d120      	bne.n	8022434 <validate_structure+0xf4>
 80223f2:	2164      	movs	r1, #100	; 0x64
 80223f4:	fb93 f2f1 	sdiv	r2, r3, r1
 80223f8:	fb01 3212 	mls	r2, r1, r2, r3
 80223fc:	b9e2      	cbnz	r2, 8022438 <validate_structure+0xf8>
 80223fe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8022402:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022406:	fb93 f2f1 	sdiv	r2, r3, r1
 802240a:	fb01 3312 	mls	r3, r1, r2, r3
 802240e:	2b00      	cmp	r3, #0
 8022410:	bf14      	ite	ne
 8022412:	231c      	movne	r3, #28
 8022414:	231d      	moveq	r3, #29
 8022416:	68e2      	ldr	r2, [r4, #12]
 8022418:	2a00      	cmp	r2, #0
 802241a:	dc0f      	bgt.n	802243c <validate_structure+0xfc>
 802241c:	4f34      	ldr	r7, [pc, #208]	; (80224f0 <validate_structure+0x1b0>)
 802241e:	260b      	movs	r6, #11
 8022420:	2064      	movs	r0, #100	; 0x64
 8022422:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8022426:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802242a:	f1bc 0f00 	cmp.w	ip, #0
 802242e:	dd14      	ble.n	802245a <validate_structure+0x11a>
 8022430:	b003      	add	sp, #12
 8022432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022434:	231c      	movs	r3, #28
 8022436:	e7ee      	b.n	8022416 <validate_structure+0xd6>
 8022438:	231d      	movs	r3, #29
 802243a:	e7ec      	b.n	8022416 <validate_structure+0xd6>
 802243c:	4f2c      	ldr	r7, [pc, #176]	; (80224f0 <validate_structure+0x1b0>)
 802243e:	f04f 0c00 	mov.w	ip, #0
 8022442:	2564      	movs	r5, #100	; 0x64
 8022444:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8022448:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 802244c:	2a01      	cmp	r2, #1
 802244e:	d02f      	beq.n	80224b0 <validate_structure+0x170>
 8022450:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8022454:	4281      	cmp	r1, r0
 8022456:	dc2e      	bgt.n	80224b6 <validate_structure+0x176>
 8022458:	e7ea      	b.n	8022430 <validate_structure+0xf0>
 802245a:	6921      	ldr	r1, [r4, #16]
 802245c:	3901      	subs	r1, #1
 802245e:	6121      	str	r1, [r4, #16]
 8022460:	3101      	adds	r1, #1
 8022462:	d114      	bne.n	802248e <validate_structure+0x14e>
 8022464:	6963      	ldr	r3, [r4, #20]
 8022466:	1e59      	subs	r1, r3, #1
 8022468:	078a      	lsls	r2, r1, #30
 802246a:	e9c4 6104 	strd	r6, r1, [r4, #16]
 802246e:	d117      	bne.n	80224a0 <validate_structure+0x160>
 8022470:	fb91 f2f0 	sdiv	r2, r1, r0
 8022474:	fb00 1112 	mls	r1, r0, r2, r1
 8022478:	b9a1      	cbnz	r1, 80224a4 <validate_structure+0x164>
 802247a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802247e:	fb93 f2f5 	sdiv	r2, r3, r5
 8022482:	fb05 3312 	mls	r3, r5, r2, r3
 8022486:	2b00      	cmp	r3, #0
 8022488:	bf14      	ite	ne
 802248a:	231c      	movne	r3, #28
 802248c:	231d      	moveq	r3, #29
 802248e:	6922      	ldr	r2, [r4, #16]
 8022490:	2a01      	cmp	r2, #1
 8022492:	bf14      	ite	ne
 8022494:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8022498:	461a      	moveq	r2, r3
 802249a:	4462      	add	r2, ip
 802249c:	60e2      	str	r2, [r4, #12]
 802249e:	e7c2      	b.n	8022426 <validate_structure+0xe6>
 80224a0:	231c      	movs	r3, #28
 80224a2:	e7f4      	b.n	802248e <validate_structure+0x14e>
 80224a4:	231d      	movs	r3, #29
 80224a6:	e7f2      	b.n	802248e <validate_structure+0x14e>
 80224a8:	231c      	movs	r3, #28
 80224aa:	e7cd      	b.n	8022448 <validate_structure+0x108>
 80224ac:	231d      	movs	r3, #29
 80224ae:	e7cb      	b.n	8022448 <validate_structure+0x108>
 80224b0:	428b      	cmp	r3, r1
 80224b2:	dabd      	bge.n	8022430 <validate_structure+0xf0>
 80224b4:	4618      	mov	r0, r3
 80224b6:	3201      	adds	r2, #1
 80224b8:	1a09      	subs	r1, r1, r0
 80224ba:	2a0c      	cmp	r2, #12
 80224bc:	60e1      	str	r1, [r4, #12]
 80224be:	6122      	str	r2, [r4, #16]
 80224c0:	d1c2      	bne.n	8022448 <validate_structure+0x108>
 80224c2:	6963      	ldr	r3, [r4, #20]
 80224c4:	1c5a      	adds	r2, r3, #1
 80224c6:	0791      	lsls	r1, r2, #30
 80224c8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80224cc:	d1ec      	bne.n	80224a8 <validate_structure+0x168>
 80224ce:	fb92 f1f5 	sdiv	r1, r2, r5
 80224d2:	fb05 2211 	mls	r2, r5, r1, r2
 80224d6:	2a00      	cmp	r2, #0
 80224d8:	d1e8      	bne.n	80224ac <validate_structure+0x16c>
 80224da:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80224de:	fb93 f2f6 	sdiv	r2, r3, r6
 80224e2:	fb06 3312 	mls	r3, r6, r2, r3
 80224e6:	2b00      	cmp	r3, #0
 80224e8:	bf14      	ite	ne
 80224ea:	231c      	movne	r3, #28
 80224ec:	231d      	moveq	r3, #29
 80224ee:	e7ab      	b.n	8022448 <validate_structure+0x108>
 80224f0:	08033190 	.word	0x08033190

080224f4 <mktime>:
 80224f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224f8:	b089      	sub	sp, #36	; 0x24
 80224fa:	4606      	mov	r6, r0
 80224fc:	f003 fff6 	bl	80264ec <__gettzinfo>
 8022500:	4680      	mov	r8, r0
 8022502:	4630      	mov	r0, r6
 8022504:	f7ff ff1c 	bl	8022340 <validate_structure>
 8022508:	e9d6 3000 	ldrd	r3, r0, [r6]
 802250c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8022510:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022514:	68b0      	ldr	r0, [r6, #8]
 8022516:	4abe      	ldr	r2, [pc, #760]	; (8022810 <mktime+0x31c>)
 8022518:	6975      	ldr	r5, [r6, #20]
 802251a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802251e:	fb03 aa00 	mla	sl, r3, r0, sl
 8022522:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8022526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802252a:	3c01      	subs	r4, #1
 802252c:	2b01      	cmp	r3, #1
 802252e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8022532:	4414      	add	r4, r2
 8022534:	dd11      	ble.n	802255a <mktime+0x66>
 8022536:	07a9      	lsls	r1, r5, #30
 8022538:	d10f      	bne.n	802255a <mktime+0x66>
 802253a:	2264      	movs	r2, #100	; 0x64
 802253c:	fb95 f3f2 	sdiv	r3, r5, r2
 8022540:	fb02 5313 	mls	r3, r2, r3, r5
 8022544:	b943      	cbnz	r3, 8022558 <mktime+0x64>
 8022546:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 802254a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802254e:	fb91 f3f2 	sdiv	r3, r1, r2
 8022552:	fb02 1313 	mls	r3, r2, r3, r1
 8022556:	b903      	cbnz	r3, 802255a <mktime+0x66>
 8022558:	3401      	adds	r4, #1
 802255a:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 802255e:	3310      	adds	r3, #16
 8022560:	f644 6220 	movw	r2, #20000	; 0x4e20
 8022564:	4293      	cmp	r3, r2
 8022566:	61f4      	str	r4, [r6, #28]
 8022568:	f200 8179 	bhi.w	802285e <mktime+0x36a>
 802256c:	2d46      	cmp	r5, #70	; 0x46
 802256e:	f340 8084 	ble.w	802267a <mktime+0x186>
 8022572:	2346      	movs	r3, #70	; 0x46
 8022574:	f240 176d 	movw	r7, #365	; 0x16d
 8022578:	2164      	movs	r1, #100	; 0x64
 802257a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802257e:	079a      	lsls	r2, r3, #30
 8022580:	d175      	bne.n	802266e <mktime+0x17a>
 8022582:	fb93 f2f1 	sdiv	r2, r3, r1
 8022586:	fb01 3212 	mls	r2, r1, r2, r3
 802258a:	2a00      	cmp	r2, #0
 802258c:	d172      	bne.n	8022674 <mktime+0x180>
 802258e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022592:	fb9c f2f0 	sdiv	r2, ip, r0
 8022596:	fb00 c212 	mls	r2, r0, r2, ip
 802259a:	2a00      	cmp	r2, #0
 802259c:	bf14      	ite	ne
 802259e:	463a      	movne	r2, r7
 80225a0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80225a4:	3301      	adds	r3, #1
 80225a6:	429d      	cmp	r5, r3
 80225a8:	4414      	add	r4, r2
 80225aa:	d1e8      	bne.n	802257e <mktime+0x8a>
 80225ac:	4b99      	ldr	r3, [pc, #612]	; (8022814 <mktime+0x320>)
 80225ae:	4363      	muls	r3, r4
 80225b0:	eb1a 0103 	adds.w	r1, sl, r3
 80225b4:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 80225b8:	e9cd 1200 	strd	r1, r2, [sp]
 80225bc:	f002 f950 	bl	8024860 <__tz_lock>
 80225c0:	f002 f950 	bl	8024864 <_tzset_unlocked>
 80225c4:	4b94      	ldr	r3, [pc, #592]	; (8022818 <mktime+0x324>)
 80225c6:	f8d3 9000 	ldr.w	r9, [r3]
 80225ca:	f1b9 0f00 	cmp.w	r9, #0
 80225ce:	d045      	beq.n	802265c <mktime+0x168>
 80225d0:	f8d6 9020 	ldr.w	r9, [r6, #32]
 80225d4:	6970      	ldr	r0, [r6, #20]
 80225d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80225da:	464f      	mov	r7, r9
 80225dc:	2f01      	cmp	r7, #1
 80225de:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80225e2:	bfa8      	it	ge
 80225e4:	2701      	movge	r7, #1
 80225e6:	4283      	cmp	r3, r0
 80225e8:	f040 8089 	bne.w	80226fe <mktime+0x20a>
 80225ec:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80225f0:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80225f4:	460a      	mov	r2, r1
 80225f6:	17cb      	asrs	r3, r1, #31
 80225f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80225fc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8022600:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022604:	1a12      	subs	r2, r2, r0
 8022606:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 802260a:	4692      	mov	sl, r2
 802260c:	469b      	mov	fp, r3
 802260e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022612:	4552      	cmp	r2, sl
 8022614:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8022618:	e9cd ab02 	strd	sl, fp, [sp, #8]
 802261c:	da76      	bge.n	802270c <mktime+0x218>
 802261e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8022622:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8022626:	ebb2 0a0a 	subs.w	sl, r2, sl
 802262a:	eb63 0b0b 	sbc.w	fp, r3, fp
 802262e:	f8d8 3000 	ldr.w	r3, [r8]
 8022632:	2b00      	cmp	r3, #0
 8022634:	d079      	beq.n	802272a <mktime+0x236>
 8022636:	e9dd 2300 	ldrd	r2, r3, [sp]
 802263a:	4552      	cmp	r2, sl
 802263c:	eb73 030b 	sbcs.w	r3, r3, fp
 8022640:	db07      	blt.n	8022652 <mktime+0x15e>
 8022642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022646:	e9dd ab00 	ldrd	sl, fp, [sp]
 802264a:	4592      	cmp	sl, r2
 802264c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8022650:	db71      	blt.n	8022736 <mktime+0x242>
 8022652:	f1b9 0f00 	cmp.w	r9, #0
 8022656:	f04f 0900 	mov.w	r9, #0
 802265a:	da71      	bge.n	8022740 <mktime+0x24c>
 802265c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8022660:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8022664:	eb1a 0a03 	adds.w	sl, sl, r3
 8022668:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 802266c:	e0b4      	b.n	80227d8 <mktime+0x2e4>
 802266e:	f240 126d 	movw	r2, #365	; 0x16d
 8022672:	e797      	b.n	80225a4 <mktime+0xb0>
 8022674:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8022678:	e794      	b.n	80225a4 <mktime+0xb0>
 802267a:	d097      	beq.n	80225ac <mktime+0xb8>
 802267c:	2345      	movs	r3, #69	; 0x45
 802267e:	f240 176d 	movw	r7, #365	; 0x16d
 8022682:	2164      	movs	r1, #100	; 0x64
 8022684:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8022688:	e012      	b.n	80226b0 <mktime+0x1bc>
 802268a:	bb62      	cbnz	r2, 80226e6 <mktime+0x1f2>
 802268c:	fb93 f2f1 	sdiv	r2, r3, r1
 8022690:	fb01 3212 	mls	r2, r1, r2, r3
 8022694:	bb52      	cbnz	r2, 80226ec <mktime+0x1f8>
 8022696:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 802269a:	fb9c f2f0 	sdiv	r2, ip, r0
 802269e:	fb00 c212 	mls	r2, r0, r2, ip
 80226a2:	2a00      	cmp	r2, #0
 80226a4:	bf14      	ite	ne
 80226a6:	463a      	movne	r2, r7
 80226a8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80226ac:	1aa4      	subs	r4, r4, r2
 80226ae:	3b01      	subs	r3, #1
 80226b0:	429d      	cmp	r5, r3
 80226b2:	f003 0203 	and.w	r2, r3, #3
 80226b6:	dbe8      	blt.n	802268a <mktime+0x196>
 80226b8:	b9da      	cbnz	r2, 80226f2 <mktime+0x1fe>
 80226ba:	2264      	movs	r2, #100	; 0x64
 80226bc:	fb95 f3f2 	sdiv	r3, r5, r2
 80226c0:	fb02 5313 	mls	r3, r2, r3, r5
 80226c4:	b9c3      	cbnz	r3, 80226f8 <mktime+0x204>
 80226c6:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 80226ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80226ce:	fb91 f3f2 	sdiv	r3, r1, r2
 80226d2:	fb02 1313 	mls	r3, r2, r3, r1
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	f240 136d 	movw	r3, #365	; 0x16d
 80226dc:	bf08      	it	eq
 80226de:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80226e2:	1ae4      	subs	r4, r4, r3
 80226e4:	e762      	b.n	80225ac <mktime+0xb8>
 80226e6:	f240 126d 	movw	r2, #365	; 0x16d
 80226ea:	e7df      	b.n	80226ac <mktime+0x1b8>
 80226ec:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80226f0:	e7dc      	b.n	80226ac <mktime+0x1b8>
 80226f2:	f240 136d 	movw	r3, #365	; 0x16d
 80226f6:	e7f4      	b.n	80226e2 <mktime+0x1ee>
 80226f8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80226fc:	e7f1      	b.n	80226e2 <mktime+0x1ee>
 80226fe:	f002 f807 	bl	8024710 <__tzcalc_limits>
 8022702:	2800      	cmp	r0, #0
 8022704:	f47f af72 	bne.w	80225ec <mktime+0xf8>
 8022708:	46b9      	mov	r9, r7
 802270a:	e057      	b.n	80227bc <mktime+0x2c8>
 802270c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8022710:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022714:	ebb2 020a 	subs.w	r2, r2, sl
 8022718:	eb63 030b 	sbc.w	r3, r3, fp
 802271c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8022720:	4592      	cmp	sl, r2
 8022722:	eb7b 0303 	sbcs.w	r3, fp, r3
 8022726:	dbef      	blt.n	8022708 <mktime+0x214>
 8022728:	e779      	b.n	802261e <mktime+0x12a>
 802272a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802272e:	4552      	cmp	r2, sl
 8022730:	eb73 030b 	sbcs.w	r3, r3, fp
 8022734:	db85      	blt.n	8022642 <mktime+0x14e>
 8022736:	f1b9 0f00 	cmp.w	r9, #0
 802273a:	db43      	blt.n	80227c4 <mktime+0x2d0>
 802273c:	f04f 0901 	mov.w	r9, #1
 8022740:	ea87 0709 	eor.w	r7, r7, r9
 8022744:	2f01      	cmp	r7, #1
 8022746:	d139      	bne.n	80227bc <mktime+0x2c8>
 8022748:	1a40      	subs	r0, r0, r1
 802274a:	f1b9 0f00 	cmp.w	r9, #0
 802274e:	d100      	bne.n	8022752 <mktime+0x25e>
 8022750:	4240      	negs	r0, r0
 8022752:	6833      	ldr	r3, [r6, #0]
 8022754:	4403      	add	r3, r0
 8022756:	6033      	str	r3, [r6, #0]
 8022758:	e9dd 2300 	ldrd	r2, r3, [sp]
 802275c:	1812      	adds	r2, r2, r0
 802275e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8022762:	e9cd 2300 	strd	r2, r3, [sp]
 8022766:	4630      	mov	r0, r6
 8022768:	68f2      	ldr	r2, [r6, #12]
 802276a:	9202      	str	r2, [sp, #8]
 802276c:	f7ff fde8 	bl	8022340 <validate_structure>
 8022770:	68f3      	ldr	r3, [r6, #12]
 8022772:	9a02      	ldr	r2, [sp, #8]
 8022774:	1a9b      	subs	r3, r3, r2
 8022776:	d021      	beq.n	80227bc <mktime+0x2c8>
 8022778:	2b01      	cmp	r3, #1
 802277a:	dc40      	bgt.n	80227fe <mktime+0x30a>
 802277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022780:	bfa8      	it	ge
 8022782:	461f      	movge	r7, r3
 8022784:	69f3      	ldr	r3, [r6, #28]
 8022786:	443c      	add	r4, r7
 8022788:	18ff      	adds	r7, r7, r3
 802278a:	d547      	bpl.n	802281c <mktime+0x328>
 802278c:	1e6a      	subs	r2, r5, #1
 802278e:	0791      	lsls	r1, r2, #30
 8022790:	d138      	bne.n	8022804 <mktime+0x310>
 8022792:	2164      	movs	r1, #100	; 0x64
 8022794:	fb92 f3f1 	sdiv	r3, r2, r1
 8022798:	fb01 2313 	mls	r3, r1, r3, r2
 802279c:	bbab      	cbnz	r3, 802280a <mktime+0x316>
 802279e:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 80227a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80227a6:	fb95 f3f2 	sdiv	r3, r5, r2
 80227aa:	fb02 5513 	mls	r5, r2, r3, r5
 80227ae:	2d00      	cmp	r5, #0
 80227b0:	f240 136d 	movw	r3, #365	; 0x16d
 80227b4:	bf18      	it	ne
 80227b6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80227ba:	61f3      	str	r3, [r6, #28]
 80227bc:	f1b9 0f01 	cmp.w	r9, #1
 80227c0:	f47f af4c 	bne.w	802265c <mktime+0x168>
 80227c4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80227c8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80227cc:	eb1a 0a03 	adds.w	sl, sl, r3
 80227d0:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80227d4:	f04f 0901 	mov.w	r9, #1
 80227d8:	f002 f843 	bl	8024862 <__tz_unlock>
 80227dc:	3404      	adds	r4, #4
 80227de:	2307      	movs	r3, #7
 80227e0:	fb94 f3f3 	sdiv	r3, r4, r3
 80227e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80227e8:	1ae4      	subs	r4, r4, r3
 80227ea:	bf48      	it	mi
 80227ec:	3407      	addmi	r4, #7
 80227ee:	f8c6 9020 	str.w	r9, [r6, #32]
 80227f2:	61b4      	str	r4, [r6, #24]
 80227f4:	4650      	mov	r0, sl
 80227f6:	4659      	mov	r1, fp
 80227f8:	b009      	add	sp, #36	; 0x24
 80227fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227fe:	f04f 37ff 	mov.w	r7, #4294967295
 8022802:	e7bf      	b.n	8022784 <mktime+0x290>
 8022804:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8022808:	e7d7      	b.n	80227ba <mktime+0x2c6>
 802280a:	f240 136d 	movw	r3, #365	; 0x16d
 802280e:	e7d4      	b.n	80227ba <mktime+0x2c6>
 8022810:	080331c0 	.word	0x080331c0
 8022814:	00015180 	.word	0x00015180
 8022818:	20001168 	.word	0x20001168
 802281c:	07ab      	lsls	r3, r5, #30
 802281e:	d118      	bne.n	8022852 <mktime+0x35e>
 8022820:	2264      	movs	r2, #100	; 0x64
 8022822:	fb95 f3f2 	sdiv	r3, r5, r2
 8022826:	fb02 5313 	mls	r3, r2, r3, r5
 802282a:	b9ab      	cbnz	r3, 8022858 <mktime+0x364>
 802282c:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8022830:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8022834:	fb95 f3f2 	sdiv	r3, r5, r2
 8022838:	fb02 5513 	mls	r5, r2, r3, r5
 802283c:	2d00      	cmp	r5, #0
 802283e:	f240 136d 	movw	r3, #365	; 0x16d
 8022842:	bf08      	it	eq
 8022844:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8022848:	429f      	cmp	r7, r3
 802284a:	bfa8      	it	ge
 802284c:	1aff      	subge	r7, r7, r3
 802284e:	61f7      	str	r7, [r6, #28]
 8022850:	e7b4      	b.n	80227bc <mktime+0x2c8>
 8022852:	f240 136d 	movw	r3, #365	; 0x16d
 8022856:	e7f7      	b.n	8022848 <mktime+0x354>
 8022858:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 802285c:	e7f4      	b.n	8022848 <mktime+0x354>
 802285e:	f04f 3aff 	mov.w	sl, #4294967295
 8022862:	f04f 3bff 	mov.w	fp, #4294967295
 8022866:	e7c5      	b.n	80227f4 <mktime+0x300>

08022868 <_calloc_r>:
 8022868:	b538      	push	{r3, r4, r5, lr}
 802286a:	fb02 f401 	mul.w	r4, r2, r1
 802286e:	4621      	mov	r1, r4
 8022870:	f000 f856 	bl	8022920 <_malloc_r>
 8022874:	4605      	mov	r5, r0
 8022876:	b118      	cbz	r0, 8022880 <_calloc_r+0x18>
 8022878:	4622      	mov	r2, r4
 802287a:	2100      	movs	r1, #0
 802287c:	f7ff fd57 	bl	802232e <memset>
 8022880:	4628      	mov	r0, r5
 8022882:	bd38      	pop	{r3, r4, r5, pc}

08022884 <_free_r>:
 8022884:	b538      	push	{r3, r4, r5, lr}
 8022886:	4605      	mov	r5, r0
 8022888:	2900      	cmp	r1, #0
 802288a:	d045      	beq.n	8022918 <_free_r+0x94>
 802288c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022890:	1f0c      	subs	r4, r1, #4
 8022892:	2b00      	cmp	r3, #0
 8022894:	bfb8      	it	lt
 8022896:	18e4      	addlt	r4, r4, r3
 8022898:	f003 fea2 	bl	80265e0 <__malloc_lock>
 802289c:	4a1f      	ldr	r2, [pc, #124]	; (802291c <_free_r+0x98>)
 802289e:	6813      	ldr	r3, [r2, #0]
 80228a0:	4610      	mov	r0, r2
 80228a2:	b933      	cbnz	r3, 80228b2 <_free_r+0x2e>
 80228a4:	6063      	str	r3, [r4, #4]
 80228a6:	6014      	str	r4, [r2, #0]
 80228a8:	4628      	mov	r0, r5
 80228aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80228ae:	f003 be98 	b.w	80265e2 <__malloc_unlock>
 80228b2:	42a3      	cmp	r3, r4
 80228b4:	d90c      	bls.n	80228d0 <_free_r+0x4c>
 80228b6:	6821      	ldr	r1, [r4, #0]
 80228b8:	1862      	adds	r2, r4, r1
 80228ba:	4293      	cmp	r3, r2
 80228bc:	bf04      	itt	eq
 80228be:	681a      	ldreq	r2, [r3, #0]
 80228c0:	685b      	ldreq	r3, [r3, #4]
 80228c2:	6063      	str	r3, [r4, #4]
 80228c4:	bf04      	itt	eq
 80228c6:	1852      	addeq	r2, r2, r1
 80228c8:	6022      	streq	r2, [r4, #0]
 80228ca:	6004      	str	r4, [r0, #0]
 80228cc:	e7ec      	b.n	80228a8 <_free_r+0x24>
 80228ce:	4613      	mov	r3, r2
 80228d0:	685a      	ldr	r2, [r3, #4]
 80228d2:	b10a      	cbz	r2, 80228d8 <_free_r+0x54>
 80228d4:	42a2      	cmp	r2, r4
 80228d6:	d9fa      	bls.n	80228ce <_free_r+0x4a>
 80228d8:	6819      	ldr	r1, [r3, #0]
 80228da:	1858      	adds	r0, r3, r1
 80228dc:	42a0      	cmp	r0, r4
 80228de:	d10b      	bne.n	80228f8 <_free_r+0x74>
 80228e0:	6820      	ldr	r0, [r4, #0]
 80228e2:	4401      	add	r1, r0
 80228e4:	1858      	adds	r0, r3, r1
 80228e6:	4282      	cmp	r2, r0
 80228e8:	6019      	str	r1, [r3, #0]
 80228ea:	d1dd      	bne.n	80228a8 <_free_r+0x24>
 80228ec:	6810      	ldr	r0, [r2, #0]
 80228ee:	6852      	ldr	r2, [r2, #4]
 80228f0:	605a      	str	r2, [r3, #4]
 80228f2:	4401      	add	r1, r0
 80228f4:	6019      	str	r1, [r3, #0]
 80228f6:	e7d7      	b.n	80228a8 <_free_r+0x24>
 80228f8:	d902      	bls.n	8022900 <_free_r+0x7c>
 80228fa:	230c      	movs	r3, #12
 80228fc:	602b      	str	r3, [r5, #0]
 80228fe:	e7d3      	b.n	80228a8 <_free_r+0x24>
 8022900:	6820      	ldr	r0, [r4, #0]
 8022902:	1821      	adds	r1, r4, r0
 8022904:	428a      	cmp	r2, r1
 8022906:	bf04      	itt	eq
 8022908:	6811      	ldreq	r1, [r2, #0]
 802290a:	6852      	ldreq	r2, [r2, #4]
 802290c:	6062      	str	r2, [r4, #4]
 802290e:	bf04      	itt	eq
 8022910:	1809      	addeq	r1, r1, r0
 8022912:	6021      	streq	r1, [r4, #0]
 8022914:	605c      	str	r4, [r3, #4]
 8022916:	e7c7      	b.n	80228a8 <_free_r+0x24>
 8022918:	bd38      	pop	{r3, r4, r5, pc}
 802291a:	bf00      	nop
 802291c:	20001144 	.word	0x20001144

08022920 <_malloc_r>:
 8022920:	b570      	push	{r4, r5, r6, lr}
 8022922:	1ccd      	adds	r5, r1, #3
 8022924:	f025 0503 	bic.w	r5, r5, #3
 8022928:	3508      	adds	r5, #8
 802292a:	2d0c      	cmp	r5, #12
 802292c:	bf38      	it	cc
 802292e:	250c      	movcc	r5, #12
 8022930:	2d00      	cmp	r5, #0
 8022932:	4606      	mov	r6, r0
 8022934:	db01      	blt.n	802293a <_malloc_r+0x1a>
 8022936:	42a9      	cmp	r1, r5
 8022938:	d903      	bls.n	8022942 <_malloc_r+0x22>
 802293a:	230c      	movs	r3, #12
 802293c:	6033      	str	r3, [r6, #0]
 802293e:	2000      	movs	r0, #0
 8022940:	bd70      	pop	{r4, r5, r6, pc}
 8022942:	f003 fe4d 	bl	80265e0 <__malloc_lock>
 8022946:	4a21      	ldr	r2, [pc, #132]	; (80229cc <_malloc_r+0xac>)
 8022948:	6814      	ldr	r4, [r2, #0]
 802294a:	4621      	mov	r1, r4
 802294c:	b991      	cbnz	r1, 8022974 <_malloc_r+0x54>
 802294e:	4c20      	ldr	r4, [pc, #128]	; (80229d0 <_malloc_r+0xb0>)
 8022950:	6823      	ldr	r3, [r4, #0]
 8022952:	b91b      	cbnz	r3, 802295c <_malloc_r+0x3c>
 8022954:	4630      	mov	r0, r6
 8022956:	f000 fe95 	bl	8023684 <_sbrk_r>
 802295a:	6020      	str	r0, [r4, #0]
 802295c:	4629      	mov	r1, r5
 802295e:	4630      	mov	r0, r6
 8022960:	f000 fe90 	bl	8023684 <_sbrk_r>
 8022964:	1c43      	adds	r3, r0, #1
 8022966:	d124      	bne.n	80229b2 <_malloc_r+0x92>
 8022968:	230c      	movs	r3, #12
 802296a:	6033      	str	r3, [r6, #0]
 802296c:	4630      	mov	r0, r6
 802296e:	f003 fe38 	bl	80265e2 <__malloc_unlock>
 8022972:	e7e4      	b.n	802293e <_malloc_r+0x1e>
 8022974:	680b      	ldr	r3, [r1, #0]
 8022976:	1b5b      	subs	r3, r3, r5
 8022978:	d418      	bmi.n	80229ac <_malloc_r+0x8c>
 802297a:	2b0b      	cmp	r3, #11
 802297c:	d90f      	bls.n	802299e <_malloc_r+0x7e>
 802297e:	600b      	str	r3, [r1, #0]
 8022980:	50cd      	str	r5, [r1, r3]
 8022982:	18cc      	adds	r4, r1, r3
 8022984:	4630      	mov	r0, r6
 8022986:	f003 fe2c 	bl	80265e2 <__malloc_unlock>
 802298a:	f104 000b 	add.w	r0, r4, #11
 802298e:	1d23      	adds	r3, r4, #4
 8022990:	f020 0007 	bic.w	r0, r0, #7
 8022994:	1ac3      	subs	r3, r0, r3
 8022996:	d0d3      	beq.n	8022940 <_malloc_r+0x20>
 8022998:	425a      	negs	r2, r3
 802299a:	50e2      	str	r2, [r4, r3]
 802299c:	e7d0      	b.n	8022940 <_malloc_r+0x20>
 802299e:	428c      	cmp	r4, r1
 80229a0:	684b      	ldr	r3, [r1, #4]
 80229a2:	bf16      	itet	ne
 80229a4:	6063      	strne	r3, [r4, #4]
 80229a6:	6013      	streq	r3, [r2, #0]
 80229a8:	460c      	movne	r4, r1
 80229aa:	e7eb      	b.n	8022984 <_malloc_r+0x64>
 80229ac:	460c      	mov	r4, r1
 80229ae:	6849      	ldr	r1, [r1, #4]
 80229b0:	e7cc      	b.n	802294c <_malloc_r+0x2c>
 80229b2:	1cc4      	adds	r4, r0, #3
 80229b4:	f024 0403 	bic.w	r4, r4, #3
 80229b8:	42a0      	cmp	r0, r4
 80229ba:	d005      	beq.n	80229c8 <_malloc_r+0xa8>
 80229bc:	1a21      	subs	r1, r4, r0
 80229be:	4630      	mov	r0, r6
 80229c0:	f000 fe60 	bl	8023684 <_sbrk_r>
 80229c4:	3001      	adds	r0, #1
 80229c6:	d0cf      	beq.n	8022968 <_malloc_r+0x48>
 80229c8:	6025      	str	r5, [r4, #0]
 80229ca:	e7db      	b.n	8022984 <_malloc_r+0x64>
 80229cc:	20001144 	.word	0x20001144
 80229d0:	20001148 	.word	0x20001148

080229d4 <__sfputc_r>:
 80229d4:	6893      	ldr	r3, [r2, #8]
 80229d6:	3b01      	subs	r3, #1
 80229d8:	2b00      	cmp	r3, #0
 80229da:	b410      	push	{r4}
 80229dc:	6093      	str	r3, [r2, #8]
 80229de:	da08      	bge.n	80229f2 <__sfputc_r+0x1e>
 80229e0:	6994      	ldr	r4, [r2, #24]
 80229e2:	42a3      	cmp	r3, r4
 80229e4:	db01      	blt.n	80229ea <__sfputc_r+0x16>
 80229e6:	290a      	cmp	r1, #10
 80229e8:	d103      	bne.n	80229f2 <__sfputc_r+0x1e>
 80229ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80229ee:	f002 b8f7 	b.w	8024be0 <__swbuf_r>
 80229f2:	6813      	ldr	r3, [r2, #0]
 80229f4:	1c58      	adds	r0, r3, #1
 80229f6:	6010      	str	r0, [r2, #0]
 80229f8:	7019      	strb	r1, [r3, #0]
 80229fa:	4608      	mov	r0, r1
 80229fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022a00:	4770      	bx	lr

08022a02 <__sfputs_r>:
 8022a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a04:	4606      	mov	r6, r0
 8022a06:	460f      	mov	r7, r1
 8022a08:	4614      	mov	r4, r2
 8022a0a:	18d5      	adds	r5, r2, r3
 8022a0c:	42ac      	cmp	r4, r5
 8022a0e:	d101      	bne.n	8022a14 <__sfputs_r+0x12>
 8022a10:	2000      	movs	r0, #0
 8022a12:	e007      	b.n	8022a24 <__sfputs_r+0x22>
 8022a14:	463a      	mov	r2, r7
 8022a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a1a:	4630      	mov	r0, r6
 8022a1c:	f7ff ffda 	bl	80229d4 <__sfputc_r>
 8022a20:	1c43      	adds	r3, r0, #1
 8022a22:	d1f3      	bne.n	8022a0c <__sfputs_r+0xa>
 8022a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022a28 <_vfiprintf_r>:
 8022a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a2c:	460c      	mov	r4, r1
 8022a2e:	b09d      	sub	sp, #116	; 0x74
 8022a30:	4617      	mov	r7, r2
 8022a32:	461d      	mov	r5, r3
 8022a34:	4606      	mov	r6, r0
 8022a36:	b118      	cbz	r0, 8022a40 <_vfiprintf_r+0x18>
 8022a38:	6983      	ldr	r3, [r0, #24]
 8022a3a:	b90b      	cbnz	r3, 8022a40 <_vfiprintf_r+0x18>
 8022a3c:	f003 f91a 	bl	8025c74 <__sinit>
 8022a40:	4b7c      	ldr	r3, [pc, #496]	; (8022c34 <_vfiprintf_r+0x20c>)
 8022a42:	429c      	cmp	r4, r3
 8022a44:	d158      	bne.n	8022af8 <_vfiprintf_r+0xd0>
 8022a46:	6874      	ldr	r4, [r6, #4]
 8022a48:	89a3      	ldrh	r3, [r4, #12]
 8022a4a:	0718      	lsls	r0, r3, #28
 8022a4c:	d55e      	bpl.n	8022b0c <_vfiprintf_r+0xe4>
 8022a4e:	6923      	ldr	r3, [r4, #16]
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	d05b      	beq.n	8022b0c <_vfiprintf_r+0xe4>
 8022a54:	2300      	movs	r3, #0
 8022a56:	9309      	str	r3, [sp, #36]	; 0x24
 8022a58:	2320      	movs	r3, #32
 8022a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022a5e:	2330      	movs	r3, #48	; 0x30
 8022a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022a64:	9503      	str	r5, [sp, #12]
 8022a66:	f04f 0b01 	mov.w	fp, #1
 8022a6a:	46b8      	mov	r8, r7
 8022a6c:	4645      	mov	r5, r8
 8022a6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022a72:	b10b      	cbz	r3, 8022a78 <_vfiprintf_r+0x50>
 8022a74:	2b25      	cmp	r3, #37	; 0x25
 8022a76:	d154      	bne.n	8022b22 <_vfiprintf_r+0xfa>
 8022a78:	ebb8 0a07 	subs.w	sl, r8, r7
 8022a7c:	d00b      	beq.n	8022a96 <_vfiprintf_r+0x6e>
 8022a7e:	4653      	mov	r3, sl
 8022a80:	463a      	mov	r2, r7
 8022a82:	4621      	mov	r1, r4
 8022a84:	4630      	mov	r0, r6
 8022a86:	f7ff ffbc 	bl	8022a02 <__sfputs_r>
 8022a8a:	3001      	adds	r0, #1
 8022a8c:	f000 80c2 	beq.w	8022c14 <_vfiprintf_r+0x1ec>
 8022a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a92:	4453      	add	r3, sl
 8022a94:	9309      	str	r3, [sp, #36]	; 0x24
 8022a96:	f898 3000 	ldrb.w	r3, [r8]
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	f000 80ba 	beq.w	8022c14 <_vfiprintf_r+0x1ec>
 8022aa0:	2300      	movs	r3, #0
 8022aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8022aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022aaa:	9304      	str	r3, [sp, #16]
 8022aac:	9307      	str	r3, [sp, #28]
 8022aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8022ab4:	46a8      	mov	r8, r5
 8022ab6:	2205      	movs	r2, #5
 8022ab8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022abc:	485e      	ldr	r0, [pc, #376]	; (8022c38 <_vfiprintf_r+0x210>)
 8022abe:	f7dd fb9f 	bl	8000200 <memchr>
 8022ac2:	9b04      	ldr	r3, [sp, #16]
 8022ac4:	bb78      	cbnz	r0, 8022b26 <_vfiprintf_r+0xfe>
 8022ac6:	06d9      	lsls	r1, r3, #27
 8022ac8:	bf44      	itt	mi
 8022aca:	2220      	movmi	r2, #32
 8022acc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022ad0:	071a      	lsls	r2, r3, #28
 8022ad2:	bf44      	itt	mi
 8022ad4:	222b      	movmi	r2, #43	; 0x2b
 8022ad6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022ada:	782a      	ldrb	r2, [r5, #0]
 8022adc:	2a2a      	cmp	r2, #42	; 0x2a
 8022ade:	d02a      	beq.n	8022b36 <_vfiprintf_r+0x10e>
 8022ae0:	9a07      	ldr	r2, [sp, #28]
 8022ae2:	46a8      	mov	r8, r5
 8022ae4:	2000      	movs	r0, #0
 8022ae6:	250a      	movs	r5, #10
 8022ae8:	4641      	mov	r1, r8
 8022aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022aee:	3b30      	subs	r3, #48	; 0x30
 8022af0:	2b09      	cmp	r3, #9
 8022af2:	d969      	bls.n	8022bc8 <_vfiprintf_r+0x1a0>
 8022af4:	b360      	cbz	r0, 8022b50 <_vfiprintf_r+0x128>
 8022af6:	e024      	b.n	8022b42 <_vfiprintf_r+0x11a>
 8022af8:	4b50      	ldr	r3, [pc, #320]	; (8022c3c <_vfiprintf_r+0x214>)
 8022afa:	429c      	cmp	r4, r3
 8022afc:	d101      	bne.n	8022b02 <_vfiprintf_r+0xda>
 8022afe:	68b4      	ldr	r4, [r6, #8]
 8022b00:	e7a2      	b.n	8022a48 <_vfiprintf_r+0x20>
 8022b02:	4b4f      	ldr	r3, [pc, #316]	; (8022c40 <_vfiprintf_r+0x218>)
 8022b04:	429c      	cmp	r4, r3
 8022b06:	bf08      	it	eq
 8022b08:	68f4      	ldreq	r4, [r6, #12]
 8022b0a:	e79d      	b.n	8022a48 <_vfiprintf_r+0x20>
 8022b0c:	4621      	mov	r1, r4
 8022b0e:	4630      	mov	r0, r6
 8022b10:	f002 f8d8 	bl	8024cc4 <__swsetup_r>
 8022b14:	2800      	cmp	r0, #0
 8022b16:	d09d      	beq.n	8022a54 <_vfiprintf_r+0x2c>
 8022b18:	f04f 30ff 	mov.w	r0, #4294967295
 8022b1c:	b01d      	add	sp, #116	; 0x74
 8022b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b22:	46a8      	mov	r8, r5
 8022b24:	e7a2      	b.n	8022a6c <_vfiprintf_r+0x44>
 8022b26:	4a44      	ldr	r2, [pc, #272]	; (8022c38 <_vfiprintf_r+0x210>)
 8022b28:	1a80      	subs	r0, r0, r2
 8022b2a:	fa0b f000 	lsl.w	r0, fp, r0
 8022b2e:	4318      	orrs	r0, r3
 8022b30:	9004      	str	r0, [sp, #16]
 8022b32:	4645      	mov	r5, r8
 8022b34:	e7be      	b.n	8022ab4 <_vfiprintf_r+0x8c>
 8022b36:	9a03      	ldr	r2, [sp, #12]
 8022b38:	1d11      	adds	r1, r2, #4
 8022b3a:	6812      	ldr	r2, [r2, #0]
 8022b3c:	9103      	str	r1, [sp, #12]
 8022b3e:	2a00      	cmp	r2, #0
 8022b40:	db01      	blt.n	8022b46 <_vfiprintf_r+0x11e>
 8022b42:	9207      	str	r2, [sp, #28]
 8022b44:	e004      	b.n	8022b50 <_vfiprintf_r+0x128>
 8022b46:	4252      	negs	r2, r2
 8022b48:	f043 0302 	orr.w	r3, r3, #2
 8022b4c:	9207      	str	r2, [sp, #28]
 8022b4e:	9304      	str	r3, [sp, #16]
 8022b50:	f898 3000 	ldrb.w	r3, [r8]
 8022b54:	2b2e      	cmp	r3, #46	; 0x2e
 8022b56:	d10e      	bne.n	8022b76 <_vfiprintf_r+0x14e>
 8022b58:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8022b5e:	d138      	bne.n	8022bd2 <_vfiprintf_r+0x1aa>
 8022b60:	9b03      	ldr	r3, [sp, #12]
 8022b62:	1d1a      	adds	r2, r3, #4
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	9203      	str	r2, [sp, #12]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	bfb8      	it	lt
 8022b6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8022b70:	f108 0802 	add.w	r8, r8, #2
 8022b74:	9305      	str	r3, [sp, #20]
 8022b76:	4d33      	ldr	r5, [pc, #204]	; (8022c44 <_vfiprintf_r+0x21c>)
 8022b78:	f898 1000 	ldrb.w	r1, [r8]
 8022b7c:	2203      	movs	r2, #3
 8022b7e:	4628      	mov	r0, r5
 8022b80:	f7dd fb3e 	bl	8000200 <memchr>
 8022b84:	b140      	cbz	r0, 8022b98 <_vfiprintf_r+0x170>
 8022b86:	2340      	movs	r3, #64	; 0x40
 8022b88:	1b40      	subs	r0, r0, r5
 8022b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8022b8e:	9b04      	ldr	r3, [sp, #16]
 8022b90:	4303      	orrs	r3, r0
 8022b92:	f108 0801 	add.w	r8, r8, #1
 8022b96:	9304      	str	r3, [sp, #16]
 8022b98:	f898 1000 	ldrb.w	r1, [r8]
 8022b9c:	482a      	ldr	r0, [pc, #168]	; (8022c48 <_vfiprintf_r+0x220>)
 8022b9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022ba2:	2206      	movs	r2, #6
 8022ba4:	f108 0701 	add.w	r7, r8, #1
 8022ba8:	f7dd fb2a 	bl	8000200 <memchr>
 8022bac:	2800      	cmp	r0, #0
 8022bae:	d037      	beq.n	8022c20 <_vfiprintf_r+0x1f8>
 8022bb0:	4b26      	ldr	r3, [pc, #152]	; (8022c4c <_vfiprintf_r+0x224>)
 8022bb2:	bb1b      	cbnz	r3, 8022bfc <_vfiprintf_r+0x1d4>
 8022bb4:	9b03      	ldr	r3, [sp, #12]
 8022bb6:	3307      	adds	r3, #7
 8022bb8:	f023 0307 	bic.w	r3, r3, #7
 8022bbc:	3308      	adds	r3, #8
 8022bbe:	9303      	str	r3, [sp, #12]
 8022bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bc2:	444b      	add	r3, r9
 8022bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8022bc6:	e750      	b.n	8022a6a <_vfiprintf_r+0x42>
 8022bc8:	fb05 3202 	mla	r2, r5, r2, r3
 8022bcc:	2001      	movs	r0, #1
 8022bce:	4688      	mov	r8, r1
 8022bd0:	e78a      	b.n	8022ae8 <_vfiprintf_r+0xc0>
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	f108 0801 	add.w	r8, r8, #1
 8022bd8:	9305      	str	r3, [sp, #20]
 8022bda:	4619      	mov	r1, r3
 8022bdc:	250a      	movs	r5, #10
 8022bde:	4640      	mov	r0, r8
 8022be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022be4:	3a30      	subs	r2, #48	; 0x30
 8022be6:	2a09      	cmp	r2, #9
 8022be8:	d903      	bls.n	8022bf2 <_vfiprintf_r+0x1ca>
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	d0c3      	beq.n	8022b76 <_vfiprintf_r+0x14e>
 8022bee:	9105      	str	r1, [sp, #20]
 8022bf0:	e7c1      	b.n	8022b76 <_vfiprintf_r+0x14e>
 8022bf2:	fb05 2101 	mla	r1, r5, r1, r2
 8022bf6:	2301      	movs	r3, #1
 8022bf8:	4680      	mov	r8, r0
 8022bfa:	e7f0      	b.n	8022bde <_vfiprintf_r+0x1b6>
 8022bfc:	ab03      	add	r3, sp, #12
 8022bfe:	9300      	str	r3, [sp, #0]
 8022c00:	4622      	mov	r2, r4
 8022c02:	4b13      	ldr	r3, [pc, #76]	; (8022c50 <_vfiprintf_r+0x228>)
 8022c04:	a904      	add	r1, sp, #16
 8022c06:	4630      	mov	r0, r6
 8022c08:	f000 f8b8 	bl	8022d7c <_printf_float>
 8022c0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022c10:	4681      	mov	r9, r0
 8022c12:	d1d5      	bne.n	8022bc0 <_vfiprintf_r+0x198>
 8022c14:	89a3      	ldrh	r3, [r4, #12]
 8022c16:	065b      	lsls	r3, r3, #25
 8022c18:	f53f af7e 	bmi.w	8022b18 <_vfiprintf_r+0xf0>
 8022c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022c1e:	e77d      	b.n	8022b1c <_vfiprintf_r+0xf4>
 8022c20:	ab03      	add	r3, sp, #12
 8022c22:	9300      	str	r3, [sp, #0]
 8022c24:	4622      	mov	r2, r4
 8022c26:	4b0a      	ldr	r3, [pc, #40]	; (8022c50 <_vfiprintf_r+0x228>)
 8022c28:	a904      	add	r1, sp, #16
 8022c2a:	4630      	mov	r0, r6
 8022c2c:	f000 fb5c 	bl	80232e8 <_printf_i>
 8022c30:	e7ec      	b.n	8022c0c <_vfiprintf_r+0x1e4>
 8022c32:	bf00      	nop
 8022c34:	080333f4 	.word	0x080333f4
 8022c38:	080331f0 	.word	0x080331f0
 8022c3c:	08033414 	.word	0x08033414
 8022c40:	080333d4 	.word	0x080333d4
 8022c44:	080331f6 	.word	0x080331f6
 8022c48:	080331fa 	.word	0x080331fa
 8022c4c:	08022d7d 	.word	0x08022d7d
 8022c50:	08022a03 	.word	0x08022a03

08022c54 <__cvt>:
 8022c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022c58:	ec55 4b10 	vmov	r4, r5, d0
 8022c5c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022c5e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022c62:	2d00      	cmp	r5, #0
 8022c64:	460e      	mov	r6, r1
 8022c66:	4691      	mov	r9, r2
 8022c68:	4619      	mov	r1, r3
 8022c6a:	bfb8      	it	lt
 8022c6c:	4622      	movlt	r2, r4
 8022c6e:	462b      	mov	r3, r5
 8022c70:	f027 0720 	bic.w	r7, r7, #32
 8022c74:	bfbb      	ittet	lt
 8022c76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022c7a:	461d      	movlt	r5, r3
 8022c7c:	2300      	movge	r3, #0
 8022c7e:	232d      	movlt	r3, #45	; 0x2d
 8022c80:	bfb8      	it	lt
 8022c82:	4614      	movlt	r4, r2
 8022c84:	2f46      	cmp	r7, #70	; 0x46
 8022c86:	700b      	strb	r3, [r1, #0]
 8022c88:	d004      	beq.n	8022c94 <__cvt+0x40>
 8022c8a:	2f45      	cmp	r7, #69	; 0x45
 8022c8c:	d100      	bne.n	8022c90 <__cvt+0x3c>
 8022c8e:	3601      	adds	r6, #1
 8022c90:	2102      	movs	r1, #2
 8022c92:	e000      	b.n	8022c96 <__cvt+0x42>
 8022c94:	2103      	movs	r1, #3
 8022c96:	ab03      	add	r3, sp, #12
 8022c98:	9301      	str	r3, [sp, #4]
 8022c9a:	ab02      	add	r3, sp, #8
 8022c9c:	9300      	str	r3, [sp, #0]
 8022c9e:	4632      	mov	r2, r6
 8022ca0:	4653      	mov	r3, sl
 8022ca2:	ec45 4b10 	vmov	d0, r4, r5
 8022ca6:	f002 f92b 	bl	8024f00 <_dtoa_r>
 8022caa:	2f47      	cmp	r7, #71	; 0x47
 8022cac:	4680      	mov	r8, r0
 8022cae:	d102      	bne.n	8022cb6 <__cvt+0x62>
 8022cb0:	f019 0f01 	tst.w	r9, #1
 8022cb4:	d026      	beq.n	8022d04 <__cvt+0xb0>
 8022cb6:	2f46      	cmp	r7, #70	; 0x46
 8022cb8:	eb08 0906 	add.w	r9, r8, r6
 8022cbc:	d111      	bne.n	8022ce2 <__cvt+0x8e>
 8022cbe:	f898 3000 	ldrb.w	r3, [r8]
 8022cc2:	2b30      	cmp	r3, #48	; 0x30
 8022cc4:	d10a      	bne.n	8022cdc <__cvt+0x88>
 8022cc6:	2200      	movs	r2, #0
 8022cc8:	2300      	movs	r3, #0
 8022cca:	4620      	mov	r0, r4
 8022ccc:	4629      	mov	r1, r5
 8022cce:	f7dd ff0b 	bl	8000ae8 <__aeabi_dcmpeq>
 8022cd2:	b918      	cbnz	r0, 8022cdc <__cvt+0x88>
 8022cd4:	f1c6 0601 	rsb	r6, r6, #1
 8022cd8:	f8ca 6000 	str.w	r6, [sl]
 8022cdc:	f8da 3000 	ldr.w	r3, [sl]
 8022ce0:	4499      	add	r9, r3
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	2300      	movs	r3, #0
 8022ce6:	4620      	mov	r0, r4
 8022ce8:	4629      	mov	r1, r5
 8022cea:	f7dd fefd 	bl	8000ae8 <__aeabi_dcmpeq>
 8022cee:	b938      	cbnz	r0, 8022d00 <__cvt+0xac>
 8022cf0:	2230      	movs	r2, #48	; 0x30
 8022cf2:	9b03      	ldr	r3, [sp, #12]
 8022cf4:	454b      	cmp	r3, r9
 8022cf6:	d205      	bcs.n	8022d04 <__cvt+0xb0>
 8022cf8:	1c59      	adds	r1, r3, #1
 8022cfa:	9103      	str	r1, [sp, #12]
 8022cfc:	701a      	strb	r2, [r3, #0]
 8022cfe:	e7f8      	b.n	8022cf2 <__cvt+0x9e>
 8022d00:	f8cd 900c 	str.w	r9, [sp, #12]
 8022d04:	9b03      	ldr	r3, [sp, #12]
 8022d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d08:	eba3 0308 	sub.w	r3, r3, r8
 8022d0c:	4640      	mov	r0, r8
 8022d0e:	6013      	str	r3, [r2, #0]
 8022d10:	b004      	add	sp, #16
 8022d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08022d16 <__exponent>:
 8022d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d18:	2900      	cmp	r1, #0
 8022d1a:	4604      	mov	r4, r0
 8022d1c:	bfba      	itte	lt
 8022d1e:	4249      	neglt	r1, r1
 8022d20:	232d      	movlt	r3, #45	; 0x2d
 8022d22:	232b      	movge	r3, #43	; 0x2b
 8022d24:	2909      	cmp	r1, #9
 8022d26:	f804 2b02 	strb.w	r2, [r4], #2
 8022d2a:	7043      	strb	r3, [r0, #1]
 8022d2c:	dd20      	ble.n	8022d70 <__exponent+0x5a>
 8022d2e:	f10d 0307 	add.w	r3, sp, #7
 8022d32:	461f      	mov	r7, r3
 8022d34:	260a      	movs	r6, #10
 8022d36:	fb91 f5f6 	sdiv	r5, r1, r6
 8022d3a:	fb06 1115 	mls	r1, r6, r5, r1
 8022d3e:	3130      	adds	r1, #48	; 0x30
 8022d40:	2d09      	cmp	r5, #9
 8022d42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8022d46:	f103 32ff 	add.w	r2, r3, #4294967295
 8022d4a:	4629      	mov	r1, r5
 8022d4c:	dc09      	bgt.n	8022d62 <__exponent+0x4c>
 8022d4e:	3130      	adds	r1, #48	; 0x30
 8022d50:	3b02      	subs	r3, #2
 8022d52:	f802 1c01 	strb.w	r1, [r2, #-1]
 8022d56:	42bb      	cmp	r3, r7
 8022d58:	4622      	mov	r2, r4
 8022d5a:	d304      	bcc.n	8022d66 <__exponent+0x50>
 8022d5c:	1a10      	subs	r0, r2, r0
 8022d5e:	b003      	add	sp, #12
 8022d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d62:	4613      	mov	r3, r2
 8022d64:	e7e7      	b.n	8022d36 <__exponent+0x20>
 8022d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d6a:	f804 2b01 	strb.w	r2, [r4], #1
 8022d6e:	e7f2      	b.n	8022d56 <__exponent+0x40>
 8022d70:	2330      	movs	r3, #48	; 0x30
 8022d72:	4419      	add	r1, r3
 8022d74:	7083      	strb	r3, [r0, #2]
 8022d76:	1d02      	adds	r2, r0, #4
 8022d78:	70c1      	strb	r1, [r0, #3]
 8022d7a:	e7ef      	b.n	8022d5c <__exponent+0x46>

08022d7c <_printf_float>:
 8022d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d80:	b08d      	sub	sp, #52	; 0x34
 8022d82:	460c      	mov	r4, r1
 8022d84:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8022d88:	4616      	mov	r6, r2
 8022d8a:	461f      	mov	r7, r3
 8022d8c:	4605      	mov	r5, r0
 8022d8e:	f7ff fa5d 	bl	802224c <_localeconv_r>
 8022d92:	6803      	ldr	r3, [r0, #0]
 8022d94:	9304      	str	r3, [sp, #16]
 8022d96:	4618      	mov	r0, r3
 8022d98:	f7dd fa24 	bl	80001e4 <strlen>
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8022da0:	f8d8 3000 	ldr.w	r3, [r8]
 8022da4:	9005      	str	r0, [sp, #20]
 8022da6:	3307      	adds	r3, #7
 8022da8:	f023 0307 	bic.w	r3, r3, #7
 8022dac:	f103 0208 	add.w	r2, r3, #8
 8022db0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8022db4:	f8d4 b000 	ldr.w	fp, [r4]
 8022db8:	f8c8 2000 	str.w	r2, [r8]
 8022dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dc0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8022dc4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8022dc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022dcc:	9307      	str	r3, [sp, #28]
 8022dce:	f8cd 8018 	str.w	r8, [sp, #24]
 8022dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8022dd6:	4ba7      	ldr	r3, [pc, #668]	; (8023074 <_printf_float+0x2f8>)
 8022dd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022ddc:	f7dd feb6 	bl	8000b4c <__aeabi_dcmpun>
 8022de0:	bb70      	cbnz	r0, 8022e40 <_printf_float+0xc4>
 8022de2:	f04f 32ff 	mov.w	r2, #4294967295
 8022de6:	4ba3      	ldr	r3, [pc, #652]	; (8023074 <_printf_float+0x2f8>)
 8022de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022dec:	f7dd fe90 	bl	8000b10 <__aeabi_dcmple>
 8022df0:	bb30      	cbnz	r0, 8022e40 <_printf_float+0xc4>
 8022df2:	2200      	movs	r2, #0
 8022df4:	2300      	movs	r3, #0
 8022df6:	4640      	mov	r0, r8
 8022df8:	4649      	mov	r1, r9
 8022dfa:	f7dd fe7f 	bl	8000afc <__aeabi_dcmplt>
 8022dfe:	b110      	cbz	r0, 8022e06 <_printf_float+0x8a>
 8022e00:	232d      	movs	r3, #45	; 0x2d
 8022e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022e06:	4a9c      	ldr	r2, [pc, #624]	; (8023078 <_printf_float+0x2fc>)
 8022e08:	4b9c      	ldr	r3, [pc, #624]	; (802307c <_printf_float+0x300>)
 8022e0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8022e0e:	bf8c      	ite	hi
 8022e10:	4690      	movhi	r8, r2
 8022e12:	4698      	movls	r8, r3
 8022e14:	2303      	movs	r3, #3
 8022e16:	f02b 0204 	bic.w	r2, fp, #4
 8022e1a:	6123      	str	r3, [r4, #16]
 8022e1c:	6022      	str	r2, [r4, #0]
 8022e1e:	f04f 0900 	mov.w	r9, #0
 8022e22:	9700      	str	r7, [sp, #0]
 8022e24:	4633      	mov	r3, r6
 8022e26:	aa0b      	add	r2, sp, #44	; 0x2c
 8022e28:	4621      	mov	r1, r4
 8022e2a:	4628      	mov	r0, r5
 8022e2c:	f000 f9e6 	bl	80231fc <_printf_common>
 8022e30:	3001      	adds	r0, #1
 8022e32:	f040 808d 	bne.w	8022f50 <_printf_float+0x1d4>
 8022e36:	f04f 30ff 	mov.w	r0, #4294967295
 8022e3a:	b00d      	add	sp, #52	; 0x34
 8022e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e40:	4642      	mov	r2, r8
 8022e42:	464b      	mov	r3, r9
 8022e44:	4640      	mov	r0, r8
 8022e46:	4649      	mov	r1, r9
 8022e48:	f7dd fe80 	bl	8000b4c <__aeabi_dcmpun>
 8022e4c:	b110      	cbz	r0, 8022e54 <_printf_float+0xd8>
 8022e4e:	4a8c      	ldr	r2, [pc, #560]	; (8023080 <_printf_float+0x304>)
 8022e50:	4b8c      	ldr	r3, [pc, #560]	; (8023084 <_printf_float+0x308>)
 8022e52:	e7da      	b.n	8022e0a <_printf_float+0x8e>
 8022e54:	6861      	ldr	r1, [r4, #4]
 8022e56:	1c4b      	adds	r3, r1, #1
 8022e58:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8022e5c:	a80a      	add	r0, sp, #40	; 0x28
 8022e5e:	d13e      	bne.n	8022ede <_printf_float+0x162>
 8022e60:	2306      	movs	r3, #6
 8022e62:	6063      	str	r3, [r4, #4]
 8022e64:	2300      	movs	r3, #0
 8022e66:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8022e6a:	ab09      	add	r3, sp, #36	; 0x24
 8022e6c:	9300      	str	r3, [sp, #0]
 8022e6e:	ec49 8b10 	vmov	d0, r8, r9
 8022e72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8022e76:	6022      	str	r2, [r4, #0]
 8022e78:	f8cd a004 	str.w	sl, [sp, #4]
 8022e7c:	6861      	ldr	r1, [r4, #4]
 8022e7e:	4628      	mov	r0, r5
 8022e80:	f7ff fee8 	bl	8022c54 <__cvt>
 8022e84:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8022e88:	2b47      	cmp	r3, #71	; 0x47
 8022e8a:	4680      	mov	r8, r0
 8022e8c:	d109      	bne.n	8022ea2 <_printf_float+0x126>
 8022e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e90:	1cd8      	adds	r0, r3, #3
 8022e92:	db02      	blt.n	8022e9a <_printf_float+0x11e>
 8022e94:	6862      	ldr	r2, [r4, #4]
 8022e96:	4293      	cmp	r3, r2
 8022e98:	dd47      	ble.n	8022f2a <_printf_float+0x1ae>
 8022e9a:	f1aa 0a02 	sub.w	sl, sl, #2
 8022e9e:	fa5f fa8a 	uxtb.w	sl, sl
 8022ea2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8022ea6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022ea8:	d824      	bhi.n	8022ef4 <_printf_float+0x178>
 8022eaa:	3901      	subs	r1, #1
 8022eac:	4652      	mov	r2, sl
 8022eae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8022eb2:	9109      	str	r1, [sp, #36]	; 0x24
 8022eb4:	f7ff ff2f 	bl	8022d16 <__exponent>
 8022eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022eba:	1813      	adds	r3, r2, r0
 8022ebc:	2a01      	cmp	r2, #1
 8022ebe:	4681      	mov	r9, r0
 8022ec0:	6123      	str	r3, [r4, #16]
 8022ec2:	dc02      	bgt.n	8022eca <_printf_float+0x14e>
 8022ec4:	6822      	ldr	r2, [r4, #0]
 8022ec6:	07d1      	lsls	r1, r2, #31
 8022ec8:	d501      	bpl.n	8022ece <_printf_float+0x152>
 8022eca:	3301      	adds	r3, #1
 8022ecc:	6123      	str	r3, [r4, #16]
 8022ece:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	d0a5      	beq.n	8022e22 <_printf_float+0xa6>
 8022ed6:	232d      	movs	r3, #45	; 0x2d
 8022ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022edc:	e7a1      	b.n	8022e22 <_printf_float+0xa6>
 8022ede:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8022ee2:	f000 8177 	beq.w	80231d4 <_printf_float+0x458>
 8022ee6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8022eea:	d1bb      	bne.n	8022e64 <_printf_float+0xe8>
 8022eec:	2900      	cmp	r1, #0
 8022eee:	d1b9      	bne.n	8022e64 <_printf_float+0xe8>
 8022ef0:	2301      	movs	r3, #1
 8022ef2:	e7b6      	b.n	8022e62 <_printf_float+0xe6>
 8022ef4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8022ef8:	d119      	bne.n	8022f2e <_printf_float+0x1b2>
 8022efa:	2900      	cmp	r1, #0
 8022efc:	6863      	ldr	r3, [r4, #4]
 8022efe:	dd0c      	ble.n	8022f1a <_printf_float+0x19e>
 8022f00:	6121      	str	r1, [r4, #16]
 8022f02:	b913      	cbnz	r3, 8022f0a <_printf_float+0x18e>
 8022f04:	6822      	ldr	r2, [r4, #0]
 8022f06:	07d2      	lsls	r2, r2, #31
 8022f08:	d502      	bpl.n	8022f10 <_printf_float+0x194>
 8022f0a:	3301      	adds	r3, #1
 8022f0c:	440b      	add	r3, r1
 8022f0e:	6123      	str	r3, [r4, #16]
 8022f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f12:	65a3      	str	r3, [r4, #88]	; 0x58
 8022f14:	f04f 0900 	mov.w	r9, #0
 8022f18:	e7d9      	b.n	8022ece <_printf_float+0x152>
 8022f1a:	b913      	cbnz	r3, 8022f22 <_printf_float+0x1a6>
 8022f1c:	6822      	ldr	r2, [r4, #0]
 8022f1e:	07d0      	lsls	r0, r2, #31
 8022f20:	d501      	bpl.n	8022f26 <_printf_float+0x1aa>
 8022f22:	3302      	adds	r3, #2
 8022f24:	e7f3      	b.n	8022f0e <_printf_float+0x192>
 8022f26:	2301      	movs	r3, #1
 8022f28:	e7f1      	b.n	8022f0e <_printf_float+0x192>
 8022f2a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8022f2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8022f32:	4293      	cmp	r3, r2
 8022f34:	db05      	blt.n	8022f42 <_printf_float+0x1c6>
 8022f36:	6822      	ldr	r2, [r4, #0]
 8022f38:	6123      	str	r3, [r4, #16]
 8022f3a:	07d1      	lsls	r1, r2, #31
 8022f3c:	d5e8      	bpl.n	8022f10 <_printf_float+0x194>
 8022f3e:	3301      	adds	r3, #1
 8022f40:	e7e5      	b.n	8022f0e <_printf_float+0x192>
 8022f42:	2b00      	cmp	r3, #0
 8022f44:	bfd4      	ite	le
 8022f46:	f1c3 0302 	rsble	r3, r3, #2
 8022f4a:	2301      	movgt	r3, #1
 8022f4c:	4413      	add	r3, r2
 8022f4e:	e7de      	b.n	8022f0e <_printf_float+0x192>
 8022f50:	6823      	ldr	r3, [r4, #0]
 8022f52:	055a      	lsls	r2, r3, #21
 8022f54:	d407      	bmi.n	8022f66 <_printf_float+0x1ea>
 8022f56:	6923      	ldr	r3, [r4, #16]
 8022f58:	4642      	mov	r2, r8
 8022f5a:	4631      	mov	r1, r6
 8022f5c:	4628      	mov	r0, r5
 8022f5e:	47b8      	blx	r7
 8022f60:	3001      	adds	r0, #1
 8022f62:	d12b      	bne.n	8022fbc <_printf_float+0x240>
 8022f64:	e767      	b.n	8022e36 <_printf_float+0xba>
 8022f66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8022f6a:	f240 80dc 	bls.w	8023126 <_printf_float+0x3aa>
 8022f6e:	2200      	movs	r2, #0
 8022f70:	2300      	movs	r3, #0
 8022f72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8022f76:	f7dd fdb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8022f7a:	2800      	cmp	r0, #0
 8022f7c:	d033      	beq.n	8022fe6 <_printf_float+0x26a>
 8022f7e:	2301      	movs	r3, #1
 8022f80:	4a41      	ldr	r2, [pc, #260]	; (8023088 <_printf_float+0x30c>)
 8022f82:	4631      	mov	r1, r6
 8022f84:	4628      	mov	r0, r5
 8022f86:	47b8      	blx	r7
 8022f88:	3001      	adds	r0, #1
 8022f8a:	f43f af54 	beq.w	8022e36 <_printf_float+0xba>
 8022f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022f92:	429a      	cmp	r2, r3
 8022f94:	db02      	blt.n	8022f9c <_printf_float+0x220>
 8022f96:	6823      	ldr	r3, [r4, #0]
 8022f98:	07d8      	lsls	r0, r3, #31
 8022f9a:	d50f      	bpl.n	8022fbc <_printf_float+0x240>
 8022f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022fa0:	4631      	mov	r1, r6
 8022fa2:	4628      	mov	r0, r5
 8022fa4:	47b8      	blx	r7
 8022fa6:	3001      	adds	r0, #1
 8022fa8:	f43f af45 	beq.w	8022e36 <_printf_float+0xba>
 8022fac:	f04f 0800 	mov.w	r8, #0
 8022fb0:	f104 091a 	add.w	r9, r4, #26
 8022fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fb6:	3b01      	subs	r3, #1
 8022fb8:	4543      	cmp	r3, r8
 8022fba:	dc09      	bgt.n	8022fd0 <_printf_float+0x254>
 8022fbc:	6823      	ldr	r3, [r4, #0]
 8022fbe:	079b      	lsls	r3, r3, #30
 8022fc0:	f100 8103 	bmi.w	80231ca <_printf_float+0x44e>
 8022fc4:	68e0      	ldr	r0, [r4, #12]
 8022fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022fc8:	4298      	cmp	r0, r3
 8022fca:	bfb8      	it	lt
 8022fcc:	4618      	movlt	r0, r3
 8022fce:	e734      	b.n	8022e3a <_printf_float+0xbe>
 8022fd0:	2301      	movs	r3, #1
 8022fd2:	464a      	mov	r2, r9
 8022fd4:	4631      	mov	r1, r6
 8022fd6:	4628      	mov	r0, r5
 8022fd8:	47b8      	blx	r7
 8022fda:	3001      	adds	r0, #1
 8022fdc:	f43f af2b 	beq.w	8022e36 <_printf_float+0xba>
 8022fe0:	f108 0801 	add.w	r8, r8, #1
 8022fe4:	e7e6      	b.n	8022fb4 <_printf_float+0x238>
 8022fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fe8:	2b00      	cmp	r3, #0
 8022fea:	dc2b      	bgt.n	8023044 <_printf_float+0x2c8>
 8022fec:	2301      	movs	r3, #1
 8022fee:	4a26      	ldr	r2, [pc, #152]	; (8023088 <_printf_float+0x30c>)
 8022ff0:	4631      	mov	r1, r6
 8022ff2:	4628      	mov	r0, r5
 8022ff4:	47b8      	blx	r7
 8022ff6:	3001      	adds	r0, #1
 8022ff8:	f43f af1d 	beq.w	8022e36 <_printf_float+0xba>
 8022ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ffe:	b923      	cbnz	r3, 802300a <_printf_float+0x28e>
 8023000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023002:	b913      	cbnz	r3, 802300a <_printf_float+0x28e>
 8023004:	6823      	ldr	r3, [r4, #0]
 8023006:	07d9      	lsls	r1, r3, #31
 8023008:	d5d8      	bpl.n	8022fbc <_printf_float+0x240>
 802300a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802300e:	4631      	mov	r1, r6
 8023010:	4628      	mov	r0, r5
 8023012:	47b8      	blx	r7
 8023014:	3001      	adds	r0, #1
 8023016:	f43f af0e 	beq.w	8022e36 <_printf_float+0xba>
 802301a:	f04f 0900 	mov.w	r9, #0
 802301e:	f104 0a1a 	add.w	sl, r4, #26
 8023022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023024:	425b      	negs	r3, r3
 8023026:	454b      	cmp	r3, r9
 8023028:	dc01      	bgt.n	802302e <_printf_float+0x2b2>
 802302a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802302c:	e794      	b.n	8022f58 <_printf_float+0x1dc>
 802302e:	2301      	movs	r3, #1
 8023030:	4652      	mov	r2, sl
 8023032:	4631      	mov	r1, r6
 8023034:	4628      	mov	r0, r5
 8023036:	47b8      	blx	r7
 8023038:	3001      	adds	r0, #1
 802303a:	f43f aefc 	beq.w	8022e36 <_printf_float+0xba>
 802303e:	f109 0901 	add.w	r9, r9, #1
 8023042:	e7ee      	b.n	8023022 <_printf_float+0x2a6>
 8023044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023046:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023048:	429a      	cmp	r2, r3
 802304a:	bfa8      	it	ge
 802304c:	461a      	movge	r2, r3
 802304e:	2a00      	cmp	r2, #0
 8023050:	4691      	mov	r9, r2
 8023052:	dd07      	ble.n	8023064 <_printf_float+0x2e8>
 8023054:	4613      	mov	r3, r2
 8023056:	4631      	mov	r1, r6
 8023058:	4642      	mov	r2, r8
 802305a:	4628      	mov	r0, r5
 802305c:	47b8      	blx	r7
 802305e:	3001      	adds	r0, #1
 8023060:	f43f aee9 	beq.w	8022e36 <_printf_float+0xba>
 8023064:	f104 031a 	add.w	r3, r4, #26
 8023068:	f04f 0b00 	mov.w	fp, #0
 802306c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023070:	9306      	str	r3, [sp, #24]
 8023072:	e015      	b.n	80230a0 <_printf_float+0x324>
 8023074:	7fefffff 	.word	0x7fefffff
 8023078:	08033205 	.word	0x08033205
 802307c:	08033201 	.word	0x08033201
 8023080:	0803320d 	.word	0x0803320d
 8023084:	08033209 	.word	0x08033209
 8023088:	0803217d 	.word	0x0803217d
 802308c:	2301      	movs	r3, #1
 802308e:	9a06      	ldr	r2, [sp, #24]
 8023090:	4631      	mov	r1, r6
 8023092:	4628      	mov	r0, r5
 8023094:	47b8      	blx	r7
 8023096:	3001      	adds	r0, #1
 8023098:	f43f aecd 	beq.w	8022e36 <_printf_float+0xba>
 802309c:	f10b 0b01 	add.w	fp, fp, #1
 80230a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80230a4:	ebaa 0309 	sub.w	r3, sl, r9
 80230a8:	455b      	cmp	r3, fp
 80230aa:	dcef      	bgt.n	802308c <_printf_float+0x310>
 80230ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80230b0:	429a      	cmp	r2, r3
 80230b2:	44d0      	add	r8, sl
 80230b4:	db15      	blt.n	80230e2 <_printf_float+0x366>
 80230b6:	6823      	ldr	r3, [r4, #0]
 80230b8:	07da      	lsls	r2, r3, #31
 80230ba:	d412      	bmi.n	80230e2 <_printf_float+0x366>
 80230bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80230c0:	eba3 020a 	sub.w	r2, r3, sl
 80230c4:	eba3 0a01 	sub.w	sl, r3, r1
 80230c8:	4592      	cmp	sl, r2
 80230ca:	bfa8      	it	ge
 80230cc:	4692      	movge	sl, r2
 80230ce:	f1ba 0f00 	cmp.w	sl, #0
 80230d2:	dc0e      	bgt.n	80230f2 <_printf_float+0x376>
 80230d4:	f04f 0800 	mov.w	r8, #0
 80230d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80230dc:	f104 091a 	add.w	r9, r4, #26
 80230e0:	e019      	b.n	8023116 <_printf_float+0x39a>
 80230e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80230e6:	4631      	mov	r1, r6
 80230e8:	4628      	mov	r0, r5
 80230ea:	47b8      	blx	r7
 80230ec:	3001      	adds	r0, #1
 80230ee:	d1e5      	bne.n	80230bc <_printf_float+0x340>
 80230f0:	e6a1      	b.n	8022e36 <_printf_float+0xba>
 80230f2:	4653      	mov	r3, sl
 80230f4:	4642      	mov	r2, r8
 80230f6:	4631      	mov	r1, r6
 80230f8:	4628      	mov	r0, r5
 80230fa:	47b8      	blx	r7
 80230fc:	3001      	adds	r0, #1
 80230fe:	d1e9      	bne.n	80230d4 <_printf_float+0x358>
 8023100:	e699      	b.n	8022e36 <_printf_float+0xba>
 8023102:	2301      	movs	r3, #1
 8023104:	464a      	mov	r2, r9
 8023106:	4631      	mov	r1, r6
 8023108:	4628      	mov	r0, r5
 802310a:	47b8      	blx	r7
 802310c:	3001      	adds	r0, #1
 802310e:	f43f ae92 	beq.w	8022e36 <_printf_float+0xba>
 8023112:	f108 0801 	add.w	r8, r8, #1
 8023116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802311a:	1a9b      	subs	r3, r3, r2
 802311c:	eba3 030a 	sub.w	r3, r3, sl
 8023120:	4543      	cmp	r3, r8
 8023122:	dcee      	bgt.n	8023102 <_printf_float+0x386>
 8023124:	e74a      	b.n	8022fbc <_printf_float+0x240>
 8023126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023128:	2a01      	cmp	r2, #1
 802312a:	dc01      	bgt.n	8023130 <_printf_float+0x3b4>
 802312c:	07db      	lsls	r3, r3, #31
 802312e:	d53a      	bpl.n	80231a6 <_printf_float+0x42a>
 8023130:	2301      	movs	r3, #1
 8023132:	4642      	mov	r2, r8
 8023134:	4631      	mov	r1, r6
 8023136:	4628      	mov	r0, r5
 8023138:	47b8      	blx	r7
 802313a:	3001      	adds	r0, #1
 802313c:	f43f ae7b 	beq.w	8022e36 <_printf_float+0xba>
 8023140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023144:	4631      	mov	r1, r6
 8023146:	4628      	mov	r0, r5
 8023148:	47b8      	blx	r7
 802314a:	3001      	adds	r0, #1
 802314c:	f108 0801 	add.w	r8, r8, #1
 8023150:	f43f ae71 	beq.w	8022e36 <_printf_float+0xba>
 8023154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023156:	2200      	movs	r2, #0
 8023158:	f103 3aff 	add.w	sl, r3, #4294967295
 802315c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023160:	2300      	movs	r3, #0
 8023162:	f7dd fcc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8023166:	b9c8      	cbnz	r0, 802319c <_printf_float+0x420>
 8023168:	4653      	mov	r3, sl
 802316a:	4642      	mov	r2, r8
 802316c:	4631      	mov	r1, r6
 802316e:	4628      	mov	r0, r5
 8023170:	47b8      	blx	r7
 8023172:	3001      	adds	r0, #1
 8023174:	d10e      	bne.n	8023194 <_printf_float+0x418>
 8023176:	e65e      	b.n	8022e36 <_printf_float+0xba>
 8023178:	2301      	movs	r3, #1
 802317a:	4652      	mov	r2, sl
 802317c:	4631      	mov	r1, r6
 802317e:	4628      	mov	r0, r5
 8023180:	47b8      	blx	r7
 8023182:	3001      	adds	r0, #1
 8023184:	f43f ae57 	beq.w	8022e36 <_printf_float+0xba>
 8023188:	f108 0801 	add.w	r8, r8, #1
 802318c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802318e:	3b01      	subs	r3, #1
 8023190:	4543      	cmp	r3, r8
 8023192:	dcf1      	bgt.n	8023178 <_printf_float+0x3fc>
 8023194:	464b      	mov	r3, r9
 8023196:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802319a:	e6de      	b.n	8022f5a <_printf_float+0x1de>
 802319c:	f04f 0800 	mov.w	r8, #0
 80231a0:	f104 0a1a 	add.w	sl, r4, #26
 80231a4:	e7f2      	b.n	802318c <_printf_float+0x410>
 80231a6:	2301      	movs	r3, #1
 80231a8:	e7df      	b.n	802316a <_printf_float+0x3ee>
 80231aa:	2301      	movs	r3, #1
 80231ac:	464a      	mov	r2, r9
 80231ae:	4631      	mov	r1, r6
 80231b0:	4628      	mov	r0, r5
 80231b2:	47b8      	blx	r7
 80231b4:	3001      	adds	r0, #1
 80231b6:	f43f ae3e 	beq.w	8022e36 <_printf_float+0xba>
 80231ba:	f108 0801 	add.w	r8, r8, #1
 80231be:	68e3      	ldr	r3, [r4, #12]
 80231c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80231c2:	1a9b      	subs	r3, r3, r2
 80231c4:	4543      	cmp	r3, r8
 80231c6:	dcf0      	bgt.n	80231aa <_printf_float+0x42e>
 80231c8:	e6fc      	b.n	8022fc4 <_printf_float+0x248>
 80231ca:	f04f 0800 	mov.w	r8, #0
 80231ce:	f104 0919 	add.w	r9, r4, #25
 80231d2:	e7f4      	b.n	80231be <_printf_float+0x442>
 80231d4:	2900      	cmp	r1, #0
 80231d6:	f43f ae8b 	beq.w	8022ef0 <_printf_float+0x174>
 80231da:	2300      	movs	r3, #0
 80231dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80231e0:	ab09      	add	r3, sp, #36	; 0x24
 80231e2:	9300      	str	r3, [sp, #0]
 80231e4:	ec49 8b10 	vmov	d0, r8, r9
 80231e8:	6022      	str	r2, [r4, #0]
 80231ea:	f8cd a004 	str.w	sl, [sp, #4]
 80231ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80231f2:	4628      	mov	r0, r5
 80231f4:	f7ff fd2e 	bl	8022c54 <__cvt>
 80231f8:	4680      	mov	r8, r0
 80231fa:	e648      	b.n	8022e8e <_printf_float+0x112>

080231fc <_printf_common>:
 80231fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023200:	4691      	mov	r9, r2
 8023202:	461f      	mov	r7, r3
 8023204:	688a      	ldr	r2, [r1, #8]
 8023206:	690b      	ldr	r3, [r1, #16]
 8023208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802320c:	4293      	cmp	r3, r2
 802320e:	bfb8      	it	lt
 8023210:	4613      	movlt	r3, r2
 8023212:	f8c9 3000 	str.w	r3, [r9]
 8023216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802321a:	4606      	mov	r6, r0
 802321c:	460c      	mov	r4, r1
 802321e:	b112      	cbz	r2, 8023226 <_printf_common+0x2a>
 8023220:	3301      	adds	r3, #1
 8023222:	f8c9 3000 	str.w	r3, [r9]
 8023226:	6823      	ldr	r3, [r4, #0]
 8023228:	0699      	lsls	r1, r3, #26
 802322a:	bf42      	ittt	mi
 802322c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8023230:	3302      	addmi	r3, #2
 8023232:	f8c9 3000 	strmi.w	r3, [r9]
 8023236:	6825      	ldr	r5, [r4, #0]
 8023238:	f015 0506 	ands.w	r5, r5, #6
 802323c:	d107      	bne.n	802324e <_printf_common+0x52>
 802323e:	f104 0a19 	add.w	sl, r4, #25
 8023242:	68e3      	ldr	r3, [r4, #12]
 8023244:	f8d9 2000 	ldr.w	r2, [r9]
 8023248:	1a9b      	subs	r3, r3, r2
 802324a:	42ab      	cmp	r3, r5
 802324c:	dc28      	bgt.n	80232a0 <_printf_common+0xa4>
 802324e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8023252:	6822      	ldr	r2, [r4, #0]
 8023254:	3300      	adds	r3, #0
 8023256:	bf18      	it	ne
 8023258:	2301      	movne	r3, #1
 802325a:	0692      	lsls	r2, r2, #26
 802325c:	d42d      	bmi.n	80232ba <_printf_common+0xbe>
 802325e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023262:	4639      	mov	r1, r7
 8023264:	4630      	mov	r0, r6
 8023266:	47c0      	blx	r8
 8023268:	3001      	adds	r0, #1
 802326a:	d020      	beq.n	80232ae <_printf_common+0xb2>
 802326c:	6823      	ldr	r3, [r4, #0]
 802326e:	68e5      	ldr	r5, [r4, #12]
 8023270:	f8d9 2000 	ldr.w	r2, [r9]
 8023274:	f003 0306 	and.w	r3, r3, #6
 8023278:	2b04      	cmp	r3, #4
 802327a:	bf08      	it	eq
 802327c:	1aad      	subeq	r5, r5, r2
 802327e:	68a3      	ldr	r3, [r4, #8]
 8023280:	6922      	ldr	r2, [r4, #16]
 8023282:	bf0c      	ite	eq
 8023284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023288:	2500      	movne	r5, #0
 802328a:	4293      	cmp	r3, r2
 802328c:	bfc4      	itt	gt
 802328e:	1a9b      	subgt	r3, r3, r2
 8023290:	18ed      	addgt	r5, r5, r3
 8023292:	f04f 0900 	mov.w	r9, #0
 8023296:	341a      	adds	r4, #26
 8023298:	454d      	cmp	r5, r9
 802329a:	d11a      	bne.n	80232d2 <_printf_common+0xd6>
 802329c:	2000      	movs	r0, #0
 802329e:	e008      	b.n	80232b2 <_printf_common+0xb6>
 80232a0:	2301      	movs	r3, #1
 80232a2:	4652      	mov	r2, sl
 80232a4:	4639      	mov	r1, r7
 80232a6:	4630      	mov	r0, r6
 80232a8:	47c0      	blx	r8
 80232aa:	3001      	adds	r0, #1
 80232ac:	d103      	bne.n	80232b6 <_printf_common+0xba>
 80232ae:	f04f 30ff 	mov.w	r0, #4294967295
 80232b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232b6:	3501      	adds	r5, #1
 80232b8:	e7c3      	b.n	8023242 <_printf_common+0x46>
 80232ba:	18e1      	adds	r1, r4, r3
 80232bc:	1c5a      	adds	r2, r3, #1
 80232be:	2030      	movs	r0, #48	; 0x30
 80232c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80232c4:	4422      	add	r2, r4
 80232c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80232ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80232ce:	3302      	adds	r3, #2
 80232d0:	e7c5      	b.n	802325e <_printf_common+0x62>
 80232d2:	2301      	movs	r3, #1
 80232d4:	4622      	mov	r2, r4
 80232d6:	4639      	mov	r1, r7
 80232d8:	4630      	mov	r0, r6
 80232da:	47c0      	blx	r8
 80232dc:	3001      	adds	r0, #1
 80232de:	d0e6      	beq.n	80232ae <_printf_common+0xb2>
 80232e0:	f109 0901 	add.w	r9, r9, #1
 80232e4:	e7d8      	b.n	8023298 <_printf_common+0x9c>
	...

080232e8 <_printf_i>:
 80232e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80232ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80232f0:	460c      	mov	r4, r1
 80232f2:	7e09      	ldrb	r1, [r1, #24]
 80232f4:	b085      	sub	sp, #20
 80232f6:	296e      	cmp	r1, #110	; 0x6e
 80232f8:	4617      	mov	r7, r2
 80232fa:	4606      	mov	r6, r0
 80232fc:	4698      	mov	r8, r3
 80232fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023300:	f000 80b3 	beq.w	802346a <_printf_i+0x182>
 8023304:	d822      	bhi.n	802334c <_printf_i+0x64>
 8023306:	2963      	cmp	r1, #99	; 0x63
 8023308:	d036      	beq.n	8023378 <_printf_i+0x90>
 802330a:	d80a      	bhi.n	8023322 <_printf_i+0x3a>
 802330c:	2900      	cmp	r1, #0
 802330e:	f000 80b9 	beq.w	8023484 <_printf_i+0x19c>
 8023312:	2958      	cmp	r1, #88	; 0x58
 8023314:	f000 8083 	beq.w	802341e <_printf_i+0x136>
 8023318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802331c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8023320:	e032      	b.n	8023388 <_printf_i+0xa0>
 8023322:	2964      	cmp	r1, #100	; 0x64
 8023324:	d001      	beq.n	802332a <_printf_i+0x42>
 8023326:	2969      	cmp	r1, #105	; 0x69
 8023328:	d1f6      	bne.n	8023318 <_printf_i+0x30>
 802332a:	6820      	ldr	r0, [r4, #0]
 802332c:	6813      	ldr	r3, [r2, #0]
 802332e:	0605      	lsls	r5, r0, #24
 8023330:	f103 0104 	add.w	r1, r3, #4
 8023334:	d52a      	bpl.n	802338c <_printf_i+0xa4>
 8023336:	681b      	ldr	r3, [r3, #0]
 8023338:	6011      	str	r1, [r2, #0]
 802333a:	2b00      	cmp	r3, #0
 802333c:	da03      	bge.n	8023346 <_printf_i+0x5e>
 802333e:	222d      	movs	r2, #45	; 0x2d
 8023340:	425b      	negs	r3, r3
 8023342:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8023346:	486f      	ldr	r0, [pc, #444]	; (8023504 <_printf_i+0x21c>)
 8023348:	220a      	movs	r2, #10
 802334a:	e039      	b.n	80233c0 <_printf_i+0xd8>
 802334c:	2973      	cmp	r1, #115	; 0x73
 802334e:	f000 809d 	beq.w	802348c <_printf_i+0x1a4>
 8023352:	d808      	bhi.n	8023366 <_printf_i+0x7e>
 8023354:	296f      	cmp	r1, #111	; 0x6f
 8023356:	d020      	beq.n	802339a <_printf_i+0xb2>
 8023358:	2970      	cmp	r1, #112	; 0x70
 802335a:	d1dd      	bne.n	8023318 <_printf_i+0x30>
 802335c:	6823      	ldr	r3, [r4, #0]
 802335e:	f043 0320 	orr.w	r3, r3, #32
 8023362:	6023      	str	r3, [r4, #0]
 8023364:	e003      	b.n	802336e <_printf_i+0x86>
 8023366:	2975      	cmp	r1, #117	; 0x75
 8023368:	d017      	beq.n	802339a <_printf_i+0xb2>
 802336a:	2978      	cmp	r1, #120	; 0x78
 802336c:	d1d4      	bne.n	8023318 <_printf_i+0x30>
 802336e:	2378      	movs	r3, #120	; 0x78
 8023370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023374:	4864      	ldr	r0, [pc, #400]	; (8023508 <_printf_i+0x220>)
 8023376:	e055      	b.n	8023424 <_printf_i+0x13c>
 8023378:	6813      	ldr	r3, [r2, #0]
 802337a:	1d19      	adds	r1, r3, #4
 802337c:	681b      	ldr	r3, [r3, #0]
 802337e:	6011      	str	r1, [r2, #0]
 8023380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023388:	2301      	movs	r3, #1
 802338a:	e08c      	b.n	80234a6 <_printf_i+0x1be>
 802338c:	681b      	ldr	r3, [r3, #0]
 802338e:	6011      	str	r1, [r2, #0]
 8023390:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023394:	bf18      	it	ne
 8023396:	b21b      	sxthne	r3, r3
 8023398:	e7cf      	b.n	802333a <_printf_i+0x52>
 802339a:	6813      	ldr	r3, [r2, #0]
 802339c:	6825      	ldr	r5, [r4, #0]
 802339e:	1d18      	adds	r0, r3, #4
 80233a0:	6010      	str	r0, [r2, #0]
 80233a2:	0628      	lsls	r0, r5, #24
 80233a4:	d501      	bpl.n	80233aa <_printf_i+0xc2>
 80233a6:	681b      	ldr	r3, [r3, #0]
 80233a8:	e002      	b.n	80233b0 <_printf_i+0xc8>
 80233aa:	0668      	lsls	r0, r5, #25
 80233ac:	d5fb      	bpl.n	80233a6 <_printf_i+0xbe>
 80233ae:	881b      	ldrh	r3, [r3, #0]
 80233b0:	4854      	ldr	r0, [pc, #336]	; (8023504 <_printf_i+0x21c>)
 80233b2:	296f      	cmp	r1, #111	; 0x6f
 80233b4:	bf14      	ite	ne
 80233b6:	220a      	movne	r2, #10
 80233b8:	2208      	moveq	r2, #8
 80233ba:	2100      	movs	r1, #0
 80233bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80233c0:	6865      	ldr	r5, [r4, #4]
 80233c2:	60a5      	str	r5, [r4, #8]
 80233c4:	2d00      	cmp	r5, #0
 80233c6:	f2c0 8095 	blt.w	80234f4 <_printf_i+0x20c>
 80233ca:	6821      	ldr	r1, [r4, #0]
 80233cc:	f021 0104 	bic.w	r1, r1, #4
 80233d0:	6021      	str	r1, [r4, #0]
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	d13d      	bne.n	8023452 <_printf_i+0x16a>
 80233d6:	2d00      	cmp	r5, #0
 80233d8:	f040 808e 	bne.w	80234f8 <_printf_i+0x210>
 80233dc:	4665      	mov	r5, ip
 80233de:	2a08      	cmp	r2, #8
 80233e0:	d10b      	bne.n	80233fa <_printf_i+0x112>
 80233e2:	6823      	ldr	r3, [r4, #0]
 80233e4:	07db      	lsls	r3, r3, #31
 80233e6:	d508      	bpl.n	80233fa <_printf_i+0x112>
 80233e8:	6923      	ldr	r3, [r4, #16]
 80233ea:	6862      	ldr	r2, [r4, #4]
 80233ec:	429a      	cmp	r2, r3
 80233ee:	bfde      	ittt	le
 80233f0:	2330      	movle	r3, #48	; 0x30
 80233f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80233f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80233fa:	ebac 0305 	sub.w	r3, ip, r5
 80233fe:	6123      	str	r3, [r4, #16]
 8023400:	f8cd 8000 	str.w	r8, [sp]
 8023404:	463b      	mov	r3, r7
 8023406:	aa03      	add	r2, sp, #12
 8023408:	4621      	mov	r1, r4
 802340a:	4630      	mov	r0, r6
 802340c:	f7ff fef6 	bl	80231fc <_printf_common>
 8023410:	3001      	adds	r0, #1
 8023412:	d14d      	bne.n	80234b0 <_printf_i+0x1c8>
 8023414:	f04f 30ff 	mov.w	r0, #4294967295
 8023418:	b005      	add	sp, #20
 802341a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802341e:	4839      	ldr	r0, [pc, #228]	; (8023504 <_printf_i+0x21c>)
 8023420:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8023424:	6813      	ldr	r3, [r2, #0]
 8023426:	6821      	ldr	r1, [r4, #0]
 8023428:	1d1d      	adds	r5, r3, #4
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	6015      	str	r5, [r2, #0]
 802342e:	060a      	lsls	r2, r1, #24
 8023430:	d50b      	bpl.n	802344a <_printf_i+0x162>
 8023432:	07ca      	lsls	r2, r1, #31
 8023434:	bf44      	itt	mi
 8023436:	f041 0120 	orrmi.w	r1, r1, #32
 802343a:	6021      	strmi	r1, [r4, #0]
 802343c:	b91b      	cbnz	r3, 8023446 <_printf_i+0x15e>
 802343e:	6822      	ldr	r2, [r4, #0]
 8023440:	f022 0220 	bic.w	r2, r2, #32
 8023444:	6022      	str	r2, [r4, #0]
 8023446:	2210      	movs	r2, #16
 8023448:	e7b7      	b.n	80233ba <_printf_i+0xd2>
 802344a:	064d      	lsls	r5, r1, #25
 802344c:	bf48      	it	mi
 802344e:	b29b      	uxthmi	r3, r3
 8023450:	e7ef      	b.n	8023432 <_printf_i+0x14a>
 8023452:	4665      	mov	r5, ip
 8023454:	fbb3 f1f2 	udiv	r1, r3, r2
 8023458:	fb02 3311 	mls	r3, r2, r1, r3
 802345c:	5cc3      	ldrb	r3, [r0, r3]
 802345e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8023462:	460b      	mov	r3, r1
 8023464:	2900      	cmp	r1, #0
 8023466:	d1f5      	bne.n	8023454 <_printf_i+0x16c>
 8023468:	e7b9      	b.n	80233de <_printf_i+0xf6>
 802346a:	6813      	ldr	r3, [r2, #0]
 802346c:	6825      	ldr	r5, [r4, #0]
 802346e:	6961      	ldr	r1, [r4, #20]
 8023470:	1d18      	adds	r0, r3, #4
 8023472:	6010      	str	r0, [r2, #0]
 8023474:	0628      	lsls	r0, r5, #24
 8023476:	681b      	ldr	r3, [r3, #0]
 8023478:	d501      	bpl.n	802347e <_printf_i+0x196>
 802347a:	6019      	str	r1, [r3, #0]
 802347c:	e002      	b.n	8023484 <_printf_i+0x19c>
 802347e:	066a      	lsls	r2, r5, #25
 8023480:	d5fb      	bpl.n	802347a <_printf_i+0x192>
 8023482:	8019      	strh	r1, [r3, #0]
 8023484:	2300      	movs	r3, #0
 8023486:	6123      	str	r3, [r4, #16]
 8023488:	4665      	mov	r5, ip
 802348a:	e7b9      	b.n	8023400 <_printf_i+0x118>
 802348c:	6813      	ldr	r3, [r2, #0]
 802348e:	1d19      	adds	r1, r3, #4
 8023490:	6011      	str	r1, [r2, #0]
 8023492:	681d      	ldr	r5, [r3, #0]
 8023494:	6862      	ldr	r2, [r4, #4]
 8023496:	2100      	movs	r1, #0
 8023498:	4628      	mov	r0, r5
 802349a:	f7dc feb1 	bl	8000200 <memchr>
 802349e:	b108      	cbz	r0, 80234a4 <_printf_i+0x1bc>
 80234a0:	1b40      	subs	r0, r0, r5
 80234a2:	6060      	str	r0, [r4, #4]
 80234a4:	6863      	ldr	r3, [r4, #4]
 80234a6:	6123      	str	r3, [r4, #16]
 80234a8:	2300      	movs	r3, #0
 80234aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80234ae:	e7a7      	b.n	8023400 <_printf_i+0x118>
 80234b0:	6923      	ldr	r3, [r4, #16]
 80234b2:	462a      	mov	r2, r5
 80234b4:	4639      	mov	r1, r7
 80234b6:	4630      	mov	r0, r6
 80234b8:	47c0      	blx	r8
 80234ba:	3001      	adds	r0, #1
 80234bc:	d0aa      	beq.n	8023414 <_printf_i+0x12c>
 80234be:	6823      	ldr	r3, [r4, #0]
 80234c0:	079b      	lsls	r3, r3, #30
 80234c2:	d413      	bmi.n	80234ec <_printf_i+0x204>
 80234c4:	68e0      	ldr	r0, [r4, #12]
 80234c6:	9b03      	ldr	r3, [sp, #12]
 80234c8:	4298      	cmp	r0, r3
 80234ca:	bfb8      	it	lt
 80234cc:	4618      	movlt	r0, r3
 80234ce:	e7a3      	b.n	8023418 <_printf_i+0x130>
 80234d0:	2301      	movs	r3, #1
 80234d2:	464a      	mov	r2, r9
 80234d4:	4639      	mov	r1, r7
 80234d6:	4630      	mov	r0, r6
 80234d8:	47c0      	blx	r8
 80234da:	3001      	adds	r0, #1
 80234dc:	d09a      	beq.n	8023414 <_printf_i+0x12c>
 80234de:	3501      	adds	r5, #1
 80234e0:	68e3      	ldr	r3, [r4, #12]
 80234e2:	9a03      	ldr	r2, [sp, #12]
 80234e4:	1a9b      	subs	r3, r3, r2
 80234e6:	42ab      	cmp	r3, r5
 80234e8:	dcf2      	bgt.n	80234d0 <_printf_i+0x1e8>
 80234ea:	e7eb      	b.n	80234c4 <_printf_i+0x1dc>
 80234ec:	2500      	movs	r5, #0
 80234ee:	f104 0919 	add.w	r9, r4, #25
 80234f2:	e7f5      	b.n	80234e0 <_printf_i+0x1f8>
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	d1ac      	bne.n	8023452 <_printf_i+0x16a>
 80234f8:	7803      	ldrb	r3, [r0, #0]
 80234fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80234fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023502:	e76c      	b.n	80233de <_printf_i+0xf6>
 8023504:	08033211 	.word	0x08033211
 8023508:	08033222 	.word	0x08033222

0802350c <iprintf>:
 802350c:	b40f      	push	{r0, r1, r2, r3}
 802350e:	4b0a      	ldr	r3, [pc, #40]	; (8023538 <iprintf+0x2c>)
 8023510:	b513      	push	{r0, r1, r4, lr}
 8023512:	681c      	ldr	r4, [r3, #0]
 8023514:	b124      	cbz	r4, 8023520 <iprintf+0x14>
 8023516:	69a3      	ldr	r3, [r4, #24]
 8023518:	b913      	cbnz	r3, 8023520 <iprintf+0x14>
 802351a:	4620      	mov	r0, r4
 802351c:	f002 fbaa 	bl	8025c74 <__sinit>
 8023520:	ab05      	add	r3, sp, #20
 8023522:	9a04      	ldr	r2, [sp, #16]
 8023524:	68a1      	ldr	r1, [r4, #8]
 8023526:	9301      	str	r3, [sp, #4]
 8023528:	4620      	mov	r0, r4
 802352a:	f7ff fa7d 	bl	8022a28 <_vfiprintf_r>
 802352e:	b002      	add	sp, #8
 8023530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023534:	b004      	add	sp, #16
 8023536:	4770      	bx	lr
 8023538:	200005e4 	.word	0x200005e4

0802353c <putchar>:
 802353c:	b538      	push	{r3, r4, r5, lr}
 802353e:	4b08      	ldr	r3, [pc, #32]	; (8023560 <putchar+0x24>)
 8023540:	681c      	ldr	r4, [r3, #0]
 8023542:	4605      	mov	r5, r0
 8023544:	b124      	cbz	r4, 8023550 <putchar+0x14>
 8023546:	69a3      	ldr	r3, [r4, #24]
 8023548:	b913      	cbnz	r3, 8023550 <putchar+0x14>
 802354a:	4620      	mov	r0, r4
 802354c:	f002 fb92 	bl	8025c74 <__sinit>
 8023550:	68a2      	ldr	r2, [r4, #8]
 8023552:	4629      	mov	r1, r5
 8023554:	4620      	mov	r0, r4
 8023556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802355a:	f004 b8bd 	b.w	80276d8 <_putc_r>
 802355e:	bf00      	nop
 8023560:	200005e4 	.word	0x200005e4

08023564 <_puts_r>:
 8023564:	b570      	push	{r4, r5, r6, lr}
 8023566:	460e      	mov	r6, r1
 8023568:	4605      	mov	r5, r0
 802356a:	b118      	cbz	r0, 8023574 <_puts_r+0x10>
 802356c:	6983      	ldr	r3, [r0, #24]
 802356e:	b90b      	cbnz	r3, 8023574 <_puts_r+0x10>
 8023570:	f002 fb80 	bl	8025c74 <__sinit>
 8023574:	69ab      	ldr	r3, [r5, #24]
 8023576:	68ac      	ldr	r4, [r5, #8]
 8023578:	b913      	cbnz	r3, 8023580 <_puts_r+0x1c>
 802357a:	4628      	mov	r0, r5
 802357c:	f002 fb7a 	bl	8025c74 <__sinit>
 8023580:	4b23      	ldr	r3, [pc, #140]	; (8023610 <_puts_r+0xac>)
 8023582:	429c      	cmp	r4, r3
 8023584:	d117      	bne.n	80235b6 <_puts_r+0x52>
 8023586:	686c      	ldr	r4, [r5, #4]
 8023588:	89a3      	ldrh	r3, [r4, #12]
 802358a:	071b      	lsls	r3, r3, #28
 802358c:	d51d      	bpl.n	80235ca <_puts_r+0x66>
 802358e:	6923      	ldr	r3, [r4, #16]
 8023590:	b1db      	cbz	r3, 80235ca <_puts_r+0x66>
 8023592:	3e01      	subs	r6, #1
 8023594:	68a3      	ldr	r3, [r4, #8]
 8023596:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802359a:	3b01      	subs	r3, #1
 802359c:	60a3      	str	r3, [r4, #8]
 802359e:	b9e9      	cbnz	r1, 80235dc <_puts_r+0x78>
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	da2e      	bge.n	8023602 <_puts_r+0x9e>
 80235a4:	4622      	mov	r2, r4
 80235a6:	210a      	movs	r1, #10
 80235a8:	4628      	mov	r0, r5
 80235aa:	f001 fb19 	bl	8024be0 <__swbuf_r>
 80235ae:	3001      	adds	r0, #1
 80235b0:	d011      	beq.n	80235d6 <_puts_r+0x72>
 80235b2:	200a      	movs	r0, #10
 80235b4:	e011      	b.n	80235da <_puts_r+0x76>
 80235b6:	4b17      	ldr	r3, [pc, #92]	; (8023614 <_puts_r+0xb0>)
 80235b8:	429c      	cmp	r4, r3
 80235ba:	d101      	bne.n	80235c0 <_puts_r+0x5c>
 80235bc:	68ac      	ldr	r4, [r5, #8]
 80235be:	e7e3      	b.n	8023588 <_puts_r+0x24>
 80235c0:	4b15      	ldr	r3, [pc, #84]	; (8023618 <_puts_r+0xb4>)
 80235c2:	429c      	cmp	r4, r3
 80235c4:	bf08      	it	eq
 80235c6:	68ec      	ldreq	r4, [r5, #12]
 80235c8:	e7de      	b.n	8023588 <_puts_r+0x24>
 80235ca:	4621      	mov	r1, r4
 80235cc:	4628      	mov	r0, r5
 80235ce:	f001 fb79 	bl	8024cc4 <__swsetup_r>
 80235d2:	2800      	cmp	r0, #0
 80235d4:	d0dd      	beq.n	8023592 <_puts_r+0x2e>
 80235d6:	f04f 30ff 	mov.w	r0, #4294967295
 80235da:	bd70      	pop	{r4, r5, r6, pc}
 80235dc:	2b00      	cmp	r3, #0
 80235de:	da04      	bge.n	80235ea <_puts_r+0x86>
 80235e0:	69a2      	ldr	r2, [r4, #24]
 80235e2:	429a      	cmp	r2, r3
 80235e4:	dc06      	bgt.n	80235f4 <_puts_r+0x90>
 80235e6:	290a      	cmp	r1, #10
 80235e8:	d004      	beq.n	80235f4 <_puts_r+0x90>
 80235ea:	6823      	ldr	r3, [r4, #0]
 80235ec:	1c5a      	adds	r2, r3, #1
 80235ee:	6022      	str	r2, [r4, #0]
 80235f0:	7019      	strb	r1, [r3, #0]
 80235f2:	e7cf      	b.n	8023594 <_puts_r+0x30>
 80235f4:	4622      	mov	r2, r4
 80235f6:	4628      	mov	r0, r5
 80235f8:	f001 faf2 	bl	8024be0 <__swbuf_r>
 80235fc:	3001      	adds	r0, #1
 80235fe:	d1c9      	bne.n	8023594 <_puts_r+0x30>
 8023600:	e7e9      	b.n	80235d6 <_puts_r+0x72>
 8023602:	6823      	ldr	r3, [r4, #0]
 8023604:	200a      	movs	r0, #10
 8023606:	1c5a      	adds	r2, r3, #1
 8023608:	6022      	str	r2, [r4, #0]
 802360a:	7018      	strb	r0, [r3, #0]
 802360c:	e7e5      	b.n	80235da <_puts_r+0x76>
 802360e:	bf00      	nop
 8023610:	080333f4 	.word	0x080333f4
 8023614:	08033414 	.word	0x08033414
 8023618:	080333d4 	.word	0x080333d4

0802361c <puts>:
 802361c:	4b02      	ldr	r3, [pc, #8]	; (8023628 <puts+0xc>)
 802361e:	4601      	mov	r1, r0
 8023620:	6818      	ldr	r0, [r3, #0]
 8023622:	f7ff bf9f 	b.w	8023564 <_puts_r>
 8023626:	bf00      	nop
 8023628:	200005e4 	.word	0x200005e4

0802362c <srand>:
 802362c:	b538      	push	{r3, r4, r5, lr}
 802362e:	4b0d      	ldr	r3, [pc, #52]	; (8023664 <srand+0x38>)
 8023630:	681c      	ldr	r4, [r3, #0]
 8023632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023634:	4605      	mov	r5, r0
 8023636:	b97b      	cbnz	r3, 8023658 <srand+0x2c>
 8023638:	2018      	movs	r0, #24
 802363a:	f7fe fe23 	bl	8022284 <malloc>
 802363e:	4a0a      	ldr	r2, [pc, #40]	; (8023668 <srand+0x3c>)
 8023640:	4b0a      	ldr	r3, [pc, #40]	; (802366c <srand+0x40>)
 8023642:	63a0      	str	r0, [r4, #56]	; 0x38
 8023644:	e9c0 2300 	strd	r2, r3, [r0]
 8023648:	4b09      	ldr	r3, [pc, #36]	; (8023670 <srand+0x44>)
 802364a:	6083      	str	r3, [r0, #8]
 802364c:	230b      	movs	r3, #11
 802364e:	8183      	strh	r3, [r0, #12]
 8023650:	2201      	movs	r2, #1
 8023652:	2300      	movs	r3, #0
 8023654:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8023658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802365a:	2200      	movs	r2, #0
 802365c:	611d      	str	r5, [r3, #16]
 802365e:	615a      	str	r2, [r3, #20]
 8023660:	bd38      	pop	{r3, r4, r5, pc}
 8023662:	bf00      	nop
 8023664:	200005e4 	.word	0x200005e4
 8023668:	abcd330e 	.word	0xabcd330e
 802366c:	e66d1234 	.word	0xe66d1234
 8023670:	0005deec 	.word	0x0005deec

08023674 <realloc>:
 8023674:	4b02      	ldr	r3, [pc, #8]	; (8023680 <realloc+0xc>)
 8023676:	460a      	mov	r2, r1
 8023678:	4601      	mov	r1, r0
 802367a:	6818      	ldr	r0, [r3, #0]
 802367c:	f003 bbb1 	b.w	8026de2 <_realloc_r>
 8023680:	200005e4 	.word	0x200005e4

08023684 <_sbrk_r>:
 8023684:	b538      	push	{r3, r4, r5, lr}
 8023686:	4c06      	ldr	r4, [pc, #24]	; (80236a0 <_sbrk_r+0x1c>)
 8023688:	2300      	movs	r3, #0
 802368a:	4605      	mov	r5, r0
 802368c:	4608      	mov	r0, r1
 802368e:	6023      	str	r3, [r4, #0]
 8023690:	f7e0 fcde 	bl	8004050 <_sbrk>
 8023694:	1c43      	adds	r3, r0, #1
 8023696:	d102      	bne.n	802369e <_sbrk_r+0x1a>
 8023698:	6823      	ldr	r3, [r4, #0]
 802369a:	b103      	cbz	r3, 802369e <_sbrk_r+0x1a>
 802369c:	602b      	str	r3, [r5, #0]
 802369e:	bd38      	pop	{r3, r4, r5, pc}
 80236a0:	200019d8 	.word	0x200019d8

080236a4 <sniprintf>:
 80236a4:	b40c      	push	{r2, r3}
 80236a6:	b530      	push	{r4, r5, lr}
 80236a8:	4b17      	ldr	r3, [pc, #92]	; (8023708 <sniprintf+0x64>)
 80236aa:	1e0c      	subs	r4, r1, #0
 80236ac:	b09d      	sub	sp, #116	; 0x74
 80236ae:	681d      	ldr	r5, [r3, #0]
 80236b0:	da08      	bge.n	80236c4 <sniprintf+0x20>
 80236b2:	238b      	movs	r3, #139	; 0x8b
 80236b4:	602b      	str	r3, [r5, #0]
 80236b6:	f04f 30ff 	mov.w	r0, #4294967295
 80236ba:	b01d      	add	sp, #116	; 0x74
 80236bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80236c0:	b002      	add	sp, #8
 80236c2:	4770      	bx	lr
 80236c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80236c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80236cc:	bf14      	ite	ne
 80236ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80236d2:	4623      	moveq	r3, r4
 80236d4:	9304      	str	r3, [sp, #16]
 80236d6:	9307      	str	r3, [sp, #28]
 80236d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80236dc:	9002      	str	r0, [sp, #8]
 80236de:	9006      	str	r0, [sp, #24]
 80236e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80236e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80236e6:	ab21      	add	r3, sp, #132	; 0x84
 80236e8:	a902      	add	r1, sp, #8
 80236ea:	4628      	mov	r0, r5
 80236ec:	9301      	str	r3, [sp, #4]
 80236ee:	f003 fbf9 	bl	8026ee4 <_svfiprintf_r>
 80236f2:	1c43      	adds	r3, r0, #1
 80236f4:	bfbc      	itt	lt
 80236f6:	238b      	movlt	r3, #139	; 0x8b
 80236f8:	602b      	strlt	r3, [r5, #0]
 80236fa:	2c00      	cmp	r4, #0
 80236fc:	d0dd      	beq.n	80236ba <sniprintf+0x16>
 80236fe:	9b02      	ldr	r3, [sp, #8]
 8023700:	2200      	movs	r2, #0
 8023702:	701a      	strb	r2, [r3, #0]
 8023704:	e7d9      	b.n	80236ba <sniprintf+0x16>
 8023706:	bf00      	nop
 8023708:	200005e4 	.word	0x200005e4

0802370c <siprintf>:
 802370c:	b40e      	push	{r1, r2, r3}
 802370e:	b500      	push	{lr}
 8023710:	b09c      	sub	sp, #112	; 0x70
 8023712:	ab1d      	add	r3, sp, #116	; 0x74
 8023714:	9002      	str	r0, [sp, #8]
 8023716:	9006      	str	r0, [sp, #24]
 8023718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802371c:	4809      	ldr	r0, [pc, #36]	; (8023744 <siprintf+0x38>)
 802371e:	9107      	str	r1, [sp, #28]
 8023720:	9104      	str	r1, [sp, #16]
 8023722:	4909      	ldr	r1, [pc, #36]	; (8023748 <siprintf+0x3c>)
 8023724:	f853 2b04 	ldr.w	r2, [r3], #4
 8023728:	9105      	str	r1, [sp, #20]
 802372a:	6800      	ldr	r0, [r0, #0]
 802372c:	9301      	str	r3, [sp, #4]
 802372e:	a902      	add	r1, sp, #8
 8023730:	f003 fbd8 	bl	8026ee4 <_svfiprintf_r>
 8023734:	9b02      	ldr	r3, [sp, #8]
 8023736:	2200      	movs	r2, #0
 8023738:	701a      	strb	r2, [r3, #0]
 802373a:	b01c      	add	sp, #112	; 0x70
 802373c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023740:	b003      	add	sp, #12
 8023742:	4770      	bx	lr
 8023744:	200005e4 	.word	0x200005e4
 8023748:	ffff0208 	.word	0xffff0208

0802374c <siscanf>:
 802374c:	b40e      	push	{r1, r2, r3}
 802374e:	b530      	push	{r4, r5, lr}
 8023750:	b09c      	sub	sp, #112	; 0x70
 8023752:	ac1f      	add	r4, sp, #124	; 0x7c
 8023754:	f44f 7201 	mov.w	r2, #516	; 0x204
 8023758:	f854 5b04 	ldr.w	r5, [r4], #4
 802375c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8023760:	9002      	str	r0, [sp, #8]
 8023762:	9006      	str	r0, [sp, #24]
 8023764:	f7dc fd3e 	bl	80001e4 <strlen>
 8023768:	4b0b      	ldr	r3, [pc, #44]	; (8023798 <siscanf+0x4c>)
 802376a:	9003      	str	r0, [sp, #12]
 802376c:	9007      	str	r0, [sp, #28]
 802376e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023770:	480a      	ldr	r0, [pc, #40]	; (802379c <siscanf+0x50>)
 8023772:	9401      	str	r4, [sp, #4]
 8023774:	2300      	movs	r3, #0
 8023776:	930f      	str	r3, [sp, #60]	; 0x3c
 8023778:	9314      	str	r3, [sp, #80]	; 0x50
 802377a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802377e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023782:	462a      	mov	r2, r5
 8023784:	4623      	mov	r3, r4
 8023786:	a902      	add	r1, sp, #8
 8023788:	6800      	ldr	r0, [r0, #0]
 802378a:	f003 fcfd 	bl	8027188 <__ssvfiscanf_r>
 802378e:	b01c      	add	sp, #112	; 0x70
 8023790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023794:	b003      	add	sp, #12
 8023796:	4770      	bx	lr
 8023798:	080237c3 	.word	0x080237c3
 802379c:	200005e4 	.word	0x200005e4

080237a0 <__sread>:
 80237a0:	b510      	push	{r4, lr}
 80237a2:	460c      	mov	r4, r1
 80237a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237a8:	f003 ffcc 	bl	8027744 <_read_r>
 80237ac:	2800      	cmp	r0, #0
 80237ae:	bfab      	itete	ge
 80237b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80237b2:	89a3      	ldrhlt	r3, [r4, #12]
 80237b4:	181b      	addge	r3, r3, r0
 80237b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80237ba:	bfac      	ite	ge
 80237bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80237be:	81a3      	strhlt	r3, [r4, #12]
 80237c0:	bd10      	pop	{r4, pc}

080237c2 <__seofread>:
 80237c2:	2000      	movs	r0, #0
 80237c4:	4770      	bx	lr

080237c6 <__swrite>:
 80237c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80237ca:	461f      	mov	r7, r3
 80237cc:	898b      	ldrh	r3, [r1, #12]
 80237ce:	05db      	lsls	r3, r3, #23
 80237d0:	4605      	mov	r5, r0
 80237d2:	460c      	mov	r4, r1
 80237d4:	4616      	mov	r6, r2
 80237d6:	d505      	bpl.n	80237e4 <__swrite+0x1e>
 80237d8:	2302      	movs	r3, #2
 80237da:	2200      	movs	r2, #0
 80237dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237e0:	f002 fe88 	bl	80264f4 <_lseek_r>
 80237e4:	89a3      	ldrh	r3, [r4, #12]
 80237e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80237ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80237ee:	81a3      	strh	r3, [r4, #12]
 80237f0:	4632      	mov	r2, r6
 80237f2:	463b      	mov	r3, r7
 80237f4:	4628      	mov	r0, r5
 80237f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80237fa:	f001 ba51 	b.w	8024ca0 <_write_r>

080237fe <__sseek>:
 80237fe:	b510      	push	{r4, lr}
 8023800:	460c      	mov	r4, r1
 8023802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023806:	f002 fe75 	bl	80264f4 <_lseek_r>
 802380a:	1c43      	adds	r3, r0, #1
 802380c:	89a3      	ldrh	r3, [r4, #12]
 802380e:	bf15      	itete	ne
 8023810:	6560      	strne	r0, [r4, #84]	; 0x54
 8023812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802381a:	81a3      	strheq	r3, [r4, #12]
 802381c:	bf18      	it	ne
 802381e:	81a3      	strhne	r3, [r4, #12]
 8023820:	bd10      	pop	{r4, pc}

08023822 <__sclose>:
 8023822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023826:	f001 babb 	b.w	8024da0 <_close_r>

0802382a <strchr>:
 802382a:	b2c9      	uxtb	r1, r1
 802382c:	4603      	mov	r3, r0
 802382e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023832:	b11a      	cbz	r2, 802383c <strchr+0x12>
 8023834:	428a      	cmp	r2, r1
 8023836:	d1f9      	bne.n	802382c <strchr+0x2>
 8023838:	4618      	mov	r0, r3
 802383a:	4770      	bx	lr
 802383c:	2900      	cmp	r1, #0
 802383e:	bf18      	it	ne
 8023840:	2300      	movne	r3, #0
 8023842:	e7f9      	b.n	8023838 <strchr+0xe>

08023844 <strcpy>:
 8023844:	4603      	mov	r3, r0
 8023846:	f811 2b01 	ldrb.w	r2, [r1], #1
 802384a:	f803 2b01 	strb.w	r2, [r3], #1
 802384e:	2a00      	cmp	r2, #0
 8023850:	d1f9      	bne.n	8023846 <strcpy+0x2>
 8023852:	4770      	bx	lr

08023854 <strncmp>:
 8023854:	b510      	push	{r4, lr}
 8023856:	b16a      	cbz	r2, 8023874 <strncmp+0x20>
 8023858:	3901      	subs	r1, #1
 802385a:	1884      	adds	r4, r0, r2
 802385c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023860:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023864:	4293      	cmp	r3, r2
 8023866:	d103      	bne.n	8023870 <strncmp+0x1c>
 8023868:	42a0      	cmp	r0, r4
 802386a:	d001      	beq.n	8023870 <strncmp+0x1c>
 802386c:	2b00      	cmp	r3, #0
 802386e:	d1f5      	bne.n	802385c <strncmp+0x8>
 8023870:	1a98      	subs	r0, r3, r2
 8023872:	bd10      	pop	{r4, pc}
 8023874:	4610      	mov	r0, r2
 8023876:	e7fc      	b.n	8023872 <strncmp+0x1e>

08023878 <strncpy>:
 8023878:	b570      	push	{r4, r5, r6, lr}
 802387a:	3901      	subs	r1, #1
 802387c:	4604      	mov	r4, r0
 802387e:	b902      	cbnz	r2, 8023882 <strncpy+0xa>
 8023880:	bd70      	pop	{r4, r5, r6, pc}
 8023882:	4623      	mov	r3, r4
 8023884:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8023888:	f803 5b01 	strb.w	r5, [r3], #1
 802388c:	1e56      	subs	r6, r2, #1
 802388e:	b92d      	cbnz	r5, 802389c <strncpy+0x24>
 8023890:	4414      	add	r4, r2
 8023892:	42a3      	cmp	r3, r4
 8023894:	d0f4      	beq.n	8023880 <strncpy+0x8>
 8023896:	f803 5b01 	strb.w	r5, [r3], #1
 802389a:	e7fa      	b.n	8023892 <strncpy+0x1a>
 802389c:	461c      	mov	r4, r3
 802389e:	4632      	mov	r2, r6
 80238a0:	e7ed      	b.n	802387e <strncpy+0x6>

080238a2 <strstr>:
 80238a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238a4:	7803      	ldrb	r3, [r0, #0]
 80238a6:	b17b      	cbz	r3, 80238c8 <strstr+0x26>
 80238a8:	4604      	mov	r4, r0
 80238aa:	7823      	ldrb	r3, [r4, #0]
 80238ac:	4620      	mov	r0, r4
 80238ae:	1c66      	adds	r6, r4, #1
 80238b0:	b17b      	cbz	r3, 80238d2 <strstr+0x30>
 80238b2:	1e4a      	subs	r2, r1, #1
 80238b4:	1e63      	subs	r3, r4, #1
 80238b6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80238ba:	b14d      	cbz	r5, 80238d0 <strstr+0x2e>
 80238bc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80238c0:	42af      	cmp	r7, r5
 80238c2:	4634      	mov	r4, r6
 80238c4:	d0f7      	beq.n	80238b6 <strstr+0x14>
 80238c6:	e7f0      	b.n	80238aa <strstr+0x8>
 80238c8:	780b      	ldrb	r3, [r1, #0]
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	bf18      	it	ne
 80238ce:	2000      	movne	r0, #0
 80238d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80238d2:	4618      	mov	r0, r3
 80238d4:	e7fc      	b.n	80238d0 <strstr+0x2e>

080238d6 <sulp>:
 80238d6:	b570      	push	{r4, r5, r6, lr}
 80238d8:	4604      	mov	r4, r0
 80238da:	460d      	mov	r5, r1
 80238dc:	ec45 4b10 	vmov	d0, r4, r5
 80238e0:	4616      	mov	r6, r2
 80238e2:	f003 f94b 	bl	8026b7c <__ulp>
 80238e6:	ec51 0b10 	vmov	r0, r1, d0
 80238ea:	b17e      	cbz	r6, 802390c <sulp+0x36>
 80238ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80238f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80238f4:	2b00      	cmp	r3, #0
 80238f6:	dd09      	ble.n	802390c <sulp+0x36>
 80238f8:	051b      	lsls	r3, r3, #20
 80238fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80238fe:	2400      	movs	r4, #0
 8023900:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8023904:	4622      	mov	r2, r4
 8023906:	462b      	mov	r3, r5
 8023908:	f7dc fe86 	bl	8000618 <__aeabi_dmul>
 802390c:	bd70      	pop	{r4, r5, r6, pc}
	...

08023910 <_strtod_l>:
 8023910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023914:	461f      	mov	r7, r3
 8023916:	b0a1      	sub	sp, #132	; 0x84
 8023918:	2300      	movs	r3, #0
 802391a:	4681      	mov	r9, r0
 802391c:	4638      	mov	r0, r7
 802391e:	460e      	mov	r6, r1
 8023920:	9217      	str	r2, [sp, #92]	; 0x5c
 8023922:	931c      	str	r3, [sp, #112]	; 0x70
 8023924:	f7fe fc90 	bl	8022248 <__localeconv_l>
 8023928:	4680      	mov	r8, r0
 802392a:	6800      	ldr	r0, [r0, #0]
 802392c:	f7dc fc5a 	bl	80001e4 <strlen>
 8023930:	f04f 0a00 	mov.w	sl, #0
 8023934:	4604      	mov	r4, r0
 8023936:	f04f 0b00 	mov.w	fp, #0
 802393a:	961b      	str	r6, [sp, #108]	; 0x6c
 802393c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802393e:	781a      	ldrb	r2, [r3, #0]
 8023940:	2a0d      	cmp	r2, #13
 8023942:	d832      	bhi.n	80239aa <_strtod_l+0x9a>
 8023944:	2a09      	cmp	r2, #9
 8023946:	d236      	bcs.n	80239b6 <_strtod_l+0xa6>
 8023948:	2a00      	cmp	r2, #0
 802394a:	d03e      	beq.n	80239ca <_strtod_l+0xba>
 802394c:	2300      	movs	r3, #0
 802394e:	930d      	str	r3, [sp, #52]	; 0x34
 8023950:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8023952:	782b      	ldrb	r3, [r5, #0]
 8023954:	2b30      	cmp	r3, #48	; 0x30
 8023956:	f040 80ac 	bne.w	8023ab2 <_strtod_l+0x1a2>
 802395a:	786b      	ldrb	r3, [r5, #1]
 802395c:	2b58      	cmp	r3, #88	; 0x58
 802395e:	d001      	beq.n	8023964 <_strtod_l+0x54>
 8023960:	2b78      	cmp	r3, #120	; 0x78
 8023962:	d167      	bne.n	8023a34 <_strtod_l+0x124>
 8023964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023966:	9301      	str	r3, [sp, #4]
 8023968:	ab1c      	add	r3, sp, #112	; 0x70
 802396a:	9300      	str	r3, [sp, #0]
 802396c:	9702      	str	r7, [sp, #8]
 802396e:	ab1d      	add	r3, sp, #116	; 0x74
 8023970:	4a88      	ldr	r2, [pc, #544]	; (8023b94 <_strtod_l+0x284>)
 8023972:	a91b      	add	r1, sp, #108	; 0x6c
 8023974:	4648      	mov	r0, r9
 8023976:	f002 fa72 	bl	8025e5e <__gethex>
 802397a:	f010 0407 	ands.w	r4, r0, #7
 802397e:	4606      	mov	r6, r0
 8023980:	d005      	beq.n	802398e <_strtod_l+0x7e>
 8023982:	2c06      	cmp	r4, #6
 8023984:	d12b      	bne.n	80239de <_strtod_l+0xce>
 8023986:	3501      	adds	r5, #1
 8023988:	2300      	movs	r3, #0
 802398a:	951b      	str	r5, [sp, #108]	; 0x6c
 802398c:	930d      	str	r3, [sp, #52]	; 0x34
 802398e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023990:	2b00      	cmp	r3, #0
 8023992:	f040 859a 	bne.w	80244ca <_strtod_l+0xbba>
 8023996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023998:	b1e3      	cbz	r3, 80239d4 <_strtod_l+0xc4>
 802399a:	4652      	mov	r2, sl
 802399c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80239a0:	ec43 2b10 	vmov	d0, r2, r3
 80239a4:	b021      	add	sp, #132	; 0x84
 80239a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239aa:	2a2b      	cmp	r2, #43	; 0x2b
 80239ac:	d015      	beq.n	80239da <_strtod_l+0xca>
 80239ae:	2a2d      	cmp	r2, #45	; 0x2d
 80239b0:	d004      	beq.n	80239bc <_strtod_l+0xac>
 80239b2:	2a20      	cmp	r2, #32
 80239b4:	d1ca      	bne.n	802394c <_strtod_l+0x3c>
 80239b6:	3301      	adds	r3, #1
 80239b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80239ba:	e7bf      	b.n	802393c <_strtod_l+0x2c>
 80239bc:	2201      	movs	r2, #1
 80239be:	920d      	str	r2, [sp, #52]	; 0x34
 80239c0:	1c5a      	adds	r2, r3, #1
 80239c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80239c4:	785b      	ldrb	r3, [r3, #1]
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d1c2      	bne.n	8023950 <_strtod_l+0x40>
 80239ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80239cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	f040 8579 	bne.w	80244c6 <_strtod_l+0xbb6>
 80239d4:	4652      	mov	r2, sl
 80239d6:	465b      	mov	r3, fp
 80239d8:	e7e2      	b.n	80239a0 <_strtod_l+0x90>
 80239da:	2200      	movs	r2, #0
 80239dc:	e7ef      	b.n	80239be <_strtod_l+0xae>
 80239de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80239e0:	b13a      	cbz	r2, 80239f2 <_strtod_l+0xe2>
 80239e2:	2135      	movs	r1, #53	; 0x35
 80239e4:	a81e      	add	r0, sp, #120	; 0x78
 80239e6:	f003 f9c1 	bl	8026d6c <__copybits>
 80239ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80239ec:	4648      	mov	r0, r9
 80239ee:	f002 fe2d 	bl	802664c <_Bfree>
 80239f2:	3c01      	subs	r4, #1
 80239f4:	2c04      	cmp	r4, #4
 80239f6:	d806      	bhi.n	8023a06 <_strtod_l+0xf6>
 80239f8:	e8df f004 	tbb	[pc, r4]
 80239fc:	1714030a 	.word	0x1714030a
 8023a00:	0a          	.byte	0x0a
 8023a01:	00          	.byte	0x00
 8023a02:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8023a06:	0730      	lsls	r0, r6, #28
 8023a08:	d5c1      	bpl.n	802398e <_strtod_l+0x7e>
 8023a0a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8023a0e:	e7be      	b.n	802398e <_strtod_l+0x7e>
 8023a10:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8023a14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023a16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8023a1a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023a1e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8023a22:	e7f0      	b.n	8023a06 <_strtod_l+0xf6>
 8023a24:	f8df b170 	ldr.w	fp, [pc, #368]	; 8023b98 <_strtod_l+0x288>
 8023a28:	e7ed      	b.n	8023a06 <_strtod_l+0xf6>
 8023a2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8023a2e:	f04f 3aff 	mov.w	sl, #4294967295
 8023a32:	e7e8      	b.n	8023a06 <_strtod_l+0xf6>
 8023a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a36:	1c5a      	adds	r2, r3, #1
 8023a38:	921b      	str	r2, [sp, #108]	; 0x6c
 8023a3a:	785b      	ldrb	r3, [r3, #1]
 8023a3c:	2b30      	cmp	r3, #48	; 0x30
 8023a3e:	d0f9      	beq.n	8023a34 <_strtod_l+0x124>
 8023a40:	2b00      	cmp	r3, #0
 8023a42:	d0a4      	beq.n	802398e <_strtod_l+0x7e>
 8023a44:	2301      	movs	r3, #1
 8023a46:	2500      	movs	r5, #0
 8023a48:	9306      	str	r3, [sp, #24]
 8023a4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a4c:	9308      	str	r3, [sp, #32]
 8023a4e:	9507      	str	r5, [sp, #28]
 8023a50:	9505      	str	r5, [sp, #20]
 8023a52:	220a      	movs	r2, #10
 8023a54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023a56:	7807      	ldrb	r7, [r0, #0]
 8023a58:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8023a5c:	b2d9      	uxtb	r1, r3
 8023a5e:	2909      	cmp	r1, #9
 8023a60:	d929      	bls.n	8023ab6 <_strtod_l+0x1a6>
 8023a62:	4622      	mov	r2, r4
 8023a64:	f8d8 1000 	ldr.w	r1, [r8]
 8023a68:	f7ff fef4 	bl	8023854 <strncmp>
 8023a6c:	2800      	cmp	r0, #0
 8023a6e:	d031      	beq.n	8023ad4 <_strtod_l+0x1c4>
 8023a70:	2000      	movs	r0, #0
 8023a72:	9c05      	ldr	r4, [sp, #20]
 8023a74:	9004      	str	r0, [sp, #16]
 8023a76:	463b      	mov	r3, r7
 8023a78:	4602      	mov	r2, r0
 8023a7a:	2b65      	cmp	r3, #101	; 0x65
 8023a7c:	d001      	beq.n	8023a82 <_strtod_l+0x172>
 8023a7e:	2b45      	cmp	r3, #69	; 0x45
 8023a80:	d114      	bne.n	8023aac <_strtod_l+0x19c>
 8023a82:	b924      	cbnz	r4, 8023a8e <_strtod_l+0x17e>
 8023a84:	b910      	cbnz	r0, 8023a8c <_strtod_l+0x17c>
 8023a86:	9b06      	ldr	r3, [sp, #24]
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	d09e      	beq.n	80239ca <_strtod_l+0xba>
 8023a8c:	2400      	movs	r4, #0
 8023a8e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8023a90:	1c73      	adds	r3, r6, #1
 8023a92:	931b      	str	r3, [sp, #108]	; 0x6c
 8023a94:	7873      	ldrb	r3, [r6, #1]
 8023a96:	2b2b      	cmp	r3, #43	; 0x2b
 8023a98:	d078      	beq.n	8023b8c <_strtod_l+0x27c>
 8023a9a:	2b2d      	cmp	r3, #45	; 0x2d
 8023a9c:	d070      	beq.n	8023b80 <_strtod_l+0x270>
 8023a9e:	f04f 0c00 	mov.w	ip, #0
 8023aa2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8023aa6:	2f09      	cmp	r7, #9
 8023aa8:	d97c      	bls.n	8023ba4 <_strtod_l+0x294>
 8023aaa:	961b      	str	r6, [sp, #108]	; 0x6c
 8023aac:	f04f 0e00 	mov.w	lr, #0
 8023ab0:	e09a      	b.n	8023be8 <_strtod_l+0x2d8>
 8023ab2:	2300      	movs	r3, #0
 8023ab4:	e7c7      	b.n	8023a46 <_strtod_l+0x136>
 8023ab6:	9905      	ldr	r1, [sp, #20]
 8023ab8:	2908      	cmp	r1, #8
 8023aba:	bfdd      	ittte	le
 8023abc:	9907      	ldrle	r1, [sp, #28]
 8023abe:	fb02 3301 	mlale	r3, r2, r1, r3
 8023ac2:	9307      	strle	r3, [sp, #28]
 8023ac4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8023ac8:	9b05      	ldr	r3, [sp, #20]
 8023aca:	3001      	adds	r0, #1
 8023acc:	3301      	adds	r3, #1
 8023ace:	9305      	str	r3, [sp, #20]
 8023ad0:	901b      	str	r0, [sp, #108]	; 0x6c
 8023ad2:	e7bf      	b.n	8023a54 <_strtod_l+0x144>
 8023ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023ad6:	191a      	adds	r2, r3, r4
 8023ad8:	921b      	str	r2, [sp, #108]	; 0x6c
 8023ada:	9a05      	ldr	r2, [sp, #20]
 8023adc:	5d1b      	ldrb	r3, [r3, r4]
 8023ade:	2a00      	cmp	r2, #0
 8023ae0:	d037      	beq.n	8023b52 <_strtod_l+0x242>
 8023ae2:	9c05      	ldr	r4, [sp, #20]
 8023ae4:	4602      	mov	r2, r0
 8023ae6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8023aea:	2909      	cmp	r1, #9
 8023aec:	d913      	bls.n	8023b16 <_strtod_l+0x206>
 8023aee:	2101      	movs	r1, #1
 8023af0:	9104      	str	r1, [sp, #16]
 8023af2:	e7c2      	b.n	8023a7a <_strtod_l+0x16a>
 8023af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023af6:	1c5a      	adds	r2, r3, #1
 8023af8:	921b      	str	r2, [sp, #108]	; 0x6c
 8023afa:	785b      	ldrb	r3, [r3, #1]
 8023afc:	3001      	adds	r0, #1
 8023afe:	2b30      	cmp	r3, #48	; 0x30
 8023b00:	d0f8      	beq.n	8023af4 <_strtod_l+0x1e4>
 8023b02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8023b06:	2a08      	cmp	r2, #8
 8023b08:	f200 84e4 	bhi.w	80244d4 <_strtod_l+0xbc4>
 8023b0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023b0e:	9208      	str	r2, [sp, #32]
 8023b10:	4602      	mov	r2, r0
 8023b12:	2000      	movs	r0, #0
 8023b14:	4604      	mov	r4, r0
 8023b16:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8023b1a:	f100 0101 	add.w	r1, r0, #1
 8023b1e:	d012      	beq.n	8023b46 <_strtod_l+0x236>
 8023b20:	440a      	add	r2, r1
 8023b22:	eb00 0c04 	add.w	ip, r0, r4
 8023b26:	4621      	mov	r1, r4
 8023b28:	270a      	movs	r7, #10
 8023b2a:	458c      	cmp	ip, r1
 8023b2c:	d113      	bne.n	8023b56 <_strtod_l+0x246>
 8023b2e:	1821      	adds	r1, r4, r0
 8023b30:	2908      	cmp	r1, #8
 8023b32:	f104 0401 	add.w	r4, r4, #1
 8023b36:	4404      	add	r4, r0
 8023b38:	dc19      	bgt.n	8023b6e <_strtod_l+0x25e>
 8023b3a:	9b07      	ldr	r3, [sp, #28]
 8023b3c:	210a      	movs	r1, #10
 8023b3e:	fb01 e303 	mla	r3, r1, r3, lr
 8023b42:	9307      	str	r3, [sp, #28]
 8023b44:	2100      	movs	r1, #0
 8023b46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023b48:	1c58      	adds	r0, r3, #1
 8023b4a:	901b      	str	r0, [sp, #108]	; 0x6c
 8023b4c:	785b      	ldrb	r3, [r3, #1]
 8023b4e:	4608      	mov	r0, r1
 8023b50:	e7c9      	b.n	8023ae6 <_strtod_l+0x1d6>
 8023b52:	9805      	ldr	r0, [sp, #20]
 8023b54:	e7d3      	b.n	8023afe <_strtod_l+0x1ee>
 8023b56:	2908      	cmp	r1, #8
 8023b58:	f101 0101 	add.w	r1, r1, #1
 8023b5c:	dc03      	bgt.n	8023b66 <_strtod_l+0x256>
 8023b5e:	9b07      	ldr	r3, [sp, #28]
 8023b60:	437b      	muls	r3, r7
 8023b62:	9307      	str	r3, [sp, #28]
 8023b64:	e7e1      	b.n	8023b2a <_strtod_l+0x21a>
 8023b66:	2910      	cmp	r1, #16
 8023b68:	bfd8      	it	le
 8023b6a:	437d      	mulle	r5, r7
 8023b6c:	e7dd      	b.n	8023b2a <_strtod_l+0x21a>
 8023b6e:	2c10      	cmp	r4, #16
 8023b70:	bfdc      	itt	le
 8023b72:	210a      	movle	r1, #10
 8023b74:	fb01 e505 	mlale	r5, r1, r5, lr
 8023b78:	e7e4      	b.n	8023b44 <_strtod_l+0x234>
 8023b7a:	2301      	movs	r3, #1
 8023b7c:	9304      	str	r3, [sp, #16]
 8023b7e:	e781      	b.n	8023a84 <_strtod_l+0x174>
 8023b80:	f04f 0c01 	mov.w	ip, #1
 8023b84:	1cb3      	adds	r3, r6, #2
 8023b86:	931b      	str	r3, [sp, #108]	; 0x6c
 8023b88:	78b3      	ldrb	r3, [r6, #2]
 8023b8a:	e78a      	b.n	8023aa2 <_strtod_l+0x192>
 8023b8c:	f04f 0c00 	mov.w	ip, #0
 8023b90:	e7f8      	b.n	8023b84 <_strtod_l+0x274>
 8023b92:	bf00      	nop
 8023b94:	08033234 	.word	0x08033234
 8023b98:	7ff00000 	.word	0x7ff00000
 8023b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023b9e:	1c5f      	adds	r7, r3, #1
 8023ba0:	971b      	str	r7, [sp, #108]	; 0x6c
 8023ba2:	785b      	ldrb	r3, [r3, #1]
 8023ba4:	2b30      	cmp	r3, #48	; 0x30
 8023ba6:	d0f9      	beq.n	8023b9c <_strtod_l+0x28c>
 8023ba8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8023bac:	2f08      	cmp	r7, #8
 8023bae:	f63f af7d 	bhi.w	8023aac <_strtod_l+0x19c>
 8023bb2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8023bb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8023bba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023bbc:	1c5f      	adds	r7, r3, #1
 8023bbe:	971b      	str	r7, [sp, #108]	; 0x6c
 8023bc0:	785b      	ldrb	r3, [r3, #1]
 8023bc2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8023bc6:	f1b8 0f09 	cmp.w	r8, #9
 8023bca:	d937      	bls.n	8023c3c <_strtod_l+0x32c>
 8023bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023bce:	1a7f      	subs	r7, r7, r1
 8023bd0:	2f08      	cmp	r7, #8
 8023bd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8023bd6:	dc37      	bgt.n	8023c48 <_strtod_l+0x338>
 8023bd8:	45be      	cmp	lr, r7
 8023bda:	bfa8      	it	ge
 8023bdc:	46be      	movge	lr, r7
 8023bde:	f1bc 0f00 	cmp.w	ip, #0
 8023be2:	d001      	beq.n	8023be8 <_strtod_l+0x2d8>
 8023be4:	f1ce 0e00 	rsb	lr, lr, #0
 8023be8:	2c00      	cmp	r4, #0
 8023bea:	d151      	bne.n	8023c90 <_strtod_l+0x380>
 8023bec:	2800      	cmp	r0, #0
 8023bee:	f47f aece 	bne.w	802398e <_strtod_l+0x7e>
 8023bf2:	9a06      	ldr	r2, [sp, #24]
 8023bf4:	2a00      	cmp	r2, #0
 8023bf6:	f47f aeca 	bne.w	802398e <_strtod_l+0x7e>
 8023bfa:	9a04      	ldr	r2, [sp, #16]
 8023bfc:	2a00      	cmp	r2, #0
 8023bfe:	f47f aee4 	bne.w	80239ca <_strtod_l+0xba>
 8023c02:	2b4e      	cmp	r3, #78	; 0x4e
 8023c04:	d027      	beq.n	8023c56 <_strtod_l+0x346>
 8023c06:	dc21      	bgt.n	8023c4c <_strtod_l+0x33c>
 8023c08:	2b49      	cmp	r3, #73	; 0x49
 8023c0a:	f47f aede 	bne.w	80239ca <_strtod_l+0xba>
 8023c0e:	49a0      	ldr	r1, [pc, #640]	; (8023e90 <_strtod_l+0x580>)
 8023c10:	a81b      	add	r0, sp, #108	; 0x6c
 8023c12:	f002 fb57 	bl	80262c4 <__match>
 8023c16:	2800      	cmp	r0, #0
 8023c18:	f43f aed7 	beq.w	80239ca <_strtod_l+0xba>
 8023c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c1e:	499d      	ldr	r1, [pc, #628]	; (8023e94 <_strtod_l+0x584>)
 8023c20:	3b01      	subs	r3, #1
 8023c22:	a81b      	add	r0, sp, #108	; 0x6c
 8023c24:	931b      	str	r3, [sp, #108]	; 0x6c
 8023c26:	f002 fb4d 	bl	80262c4 <__match>
 8023c2a:	b910      	cbnz	r0, 8023c32 <_strtod_l+0x322>
 8023c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c2e:	3301      	adds	r3, #1
 8023c30:	931b      	str	r3, [sp, #108]	; 0x6c
 8023c32:	f8df b274 	ldr.w	fp, [pc, #628]	; 8023ea8 <_strtod_l+0x598>
 8023c36:	f04f 0a00 	mov.w	sl, #0
 8023c3a:	e6a8      	b.n	802398e <_strtod_l+0x7e>
 8023c3c:	210a      	movs	r1, #10
 8023c3e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8023c42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8023c46:	e7b8      	b.n	8023bba <_strtod_l+0x2aa>
 8023c48:	46be      	mov	lr, r7
 8023c4a:	e7c8      	b.n	8023bde <_strtod_l+0x2ce>
 8023c4c:	2b69      	cmp	r3, #105	; 0x69
 8023c4e:	d0de      	beq.n	8023c0e <_strtod_l+0x2fe>
 8023c50:	2b6e      	cmp	r3, #110	; 0x6e
 8023c52:	f47f aeba 	bne.w	80239ca <_strtod_l+0xba>
 8023c56:	4990      	ldr	r1, [pc, #576]	; (8023e98 <_strtod_l+0x588>)
 8023c58:	a81b      	add	r0, sp, #108	; 0x6c
 8023c5a:	f002 fb33 	bl	80262c4 <__match>
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	f43f aeb3 	beq.w	80239ca <_strtod_l+0xba>
 8023c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c66:	781b      	ldrb	r3, [r3, #0]
 8023c68:	2b28      	cmp	r3, #40	; 0x28
 8023c6a:	d10e      	bne.n	8023c8a <_strtod_l+0x37a>
 8023c6c:	aa1e      	add	r2, sp, #120	; 0x78
 8023c6e:	498b      	ldr	r1, [pc, #556]	; (8023e9c <_strtod_l+0x58c>)
 8023c70:	a81b      	add	r0, sp, #108	; 0x6c
 8023c72:	f002 fb3b 	bl	80262ec <__hexnan>
 8023c76:	2805      	cmp	r0, #5
 8023c78:	d107      	bne.n	8023c8a <_strtod_l+0x37a>
 8023c7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023c7c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8023c80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8023c84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8023c88:	e681      	b.n	802398e <_strtod_l+0x7e>
 8023c8a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8023eb0 <_strtod_l+0x5a0>
 8023c8e:	e7d2      	b.n	8023c36 <_strtod_l+0x326>
 8023c90:	ebae 0302 	sub.w	r3, lr, r2
 8023c94:	9306      	str	r3, [sp, #24]
 8023c96:	9b05      	ldr	r3, [sp, #20]
 8023c98:	9807      	ldr	r0, [sp, #28]
 8023c9a:	2b00      	cmp	r3, #0
 8023c9c:	bf08      	it	eq
 8023c9e:	4623      	moveq	r3, r4
 8023ca0:	2c10      	cmp	r4, #16
 8023ca2:	9305      	str	r3, [sp, #20]
 8023ca4:	46a0      	mov	r8, r4
 8023ca6:	bfa8      	it	ge
 8023ca8:	f04f 0810 	movge.w	r8, #16
 8023cac:	f7dc fc3a 	bl	8000524 <__aeabi_ui2d>
 8023cb0:	2c09      	cmp	r4, #9
 8023cb2:	4682      	mov	sl, r0
 8023cb4:	468b      	mov	fp, r1
 8023cb6:	dc13      	bgt.n	8023ce0 <_strtod_l+0x3d0>
 8023cb8:	9b06      	ldr	r3, [sp, #24]
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	f43f ae67 	beq.w	802398e <_strtod_l+0x7e>
 8023cc0:	9b06      	ldr	r3, [sp, #24]
 8023cc2:	dd7a      	ble.n	8023dba <_strtod_l+0x4aa>
 8023cc4:	2b16      	cmp	r3, #22
 8023cc6:	dc61      	bgt.n	8023d8c <_strtod_l+0x47c>
 8023cc8:	4a75      	ldr	r2, [pc, #468]	; (8023ea0 <_strtod_l+0x590>)
 8023cca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8023cce:	e9de 0100 	ldrd	r0, r1, [lr]
 8023cd2:	4652      	mov	r2, sl
 8023cd4:	465b      	mov	r3, fp
 8023cd6:	f7dc fc9f 	bl	8000618 <__aeabi_dmul>
 8023cda:	4682      	mov	sl, r0
 8023cdc:	468b      	mov	fp, r1
 8023cde:	e656      	b.n	802398e <_strtod_l+0x7e>
 8023ce0:	4b6f      	ldr	r3, [pc, #444]	; (8023ea0 <_strtod_l+0x590>)
 8023ce2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023ce6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8023cea:	f7dc fc95 	bl	8000618 <__aeabi_dmul>
 8023cee:	4606      	mov	r6, r0
 8023cf0:	4628      	mov	r0, r5
 8023cf2:	460f      	mov	r7, r1
 8023cf4:	f7dc fc16 	bl	8000524 <__aeabi_ui2d>
 8023cf8:	4602      	mov	r2, r0
 8023cfa:	460b      	mov	r3, r1
 8023cfc:	4630      	mov	r0, r6
 8023cfe:	4639      	mov	r1, r7
 8023d00:	f7dc fad4 	bl	80002ac <__adddf3>
 8023d04:	2c0f      	cmp	r4, #15
 8023d06:	4682      	mov	sl, r0
 8023d08:	468b      	mov	fp, r1
 8023d0a:	ddd5      	ble.n	8023cb8 <_strtod_l+0x3a8>
 8023d0c:	9b06      	ldr	r3, [sp, #24]
 8023d0e:	eba4 0808 	sub.w	r8, r4, r8
 8023d12:	4498      	add	r8, r3
 8023d14:	f1b8 0f00 	cmp.w	r8, #0
 8023d18:	f340 8096 	ble.w	8023e48 <_strtod_l+0x538>
 8023d1c:	f018 030f 	ands.w	r3, r8, #15
 8023d20:	d00a      	beq.n	8023d38 <_strtod_l+0x428>
 8023d22:	495f      	ldr	r1, [pc, #380]	; (8023ea0 <_strtod_l+0x590>)
 8023d24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023d28:	4652      	mov	r2, sl
 8023d2a:	465b      	mov	r3, fp
 8023d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d30:	f7dc fc72 	bl	8000618 <__aeabi_dmul>
 8023d34:	4682      	mov	sl, r0
 8023d36:	468b      	mov	fp, r1
 8023d38:	f038 080f 	bics.w	r8, r8, #15
 8023d3c:	d073      	beq.n	8023e26 <_strtod_l+0x516>
 8023d3e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8023d42:	dd47      	ble.n	8023dd4 <_strtod_l+0x4c4>
 8023d44:	2400      	movs	r4, #0
 8023d46:	46a0      	mov	r8, r4
 8023d48:	9407      	str	r4, [sp, #28]
 8023d4a:	9405      	str	r4, [sp, #20]
 8023d4c:	2322      	movs	r3, #34	; 0x22
 8023d4e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8023ea8 <_strtod_l+0x598>
 8023d52:	f8c9 3000 	str.w	r3, [r9]
 8023d56:	f04f 0a00 	mov.w	sl, #0
 8023d5a:	9b07      	ldr	r3, [sp, #28]
 8023d5c:	2b00      	cmp	r3, #0
 8023d5e:	f43f ae16 	beq.w	802398e <_strtod_l+0x7e>
 8023d62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023d64:	4648      	mov	r0, r9
 8023d66:	f002 fc71 	bl	802664c <_Bfree>
 8023d6a:	9905      	ldr	r1, [sp, #20]
 8023d6c:	4648      	mov	r0, r9
 8023d6e:	f002 fc6d 	bl	802664c <_Bfree>
 8023d72:	4641      	mov	r1, r8
 8023d74:	4648      	mov	r0, r9
 8023d76:	f002 fc69 	bl	802664c <_Bfree>
 8023d7a:	9907      	ldr	r1, [sp, #28]
 8023d7c:	4648      	mov	r0, r9
 8023d7e:	f002 fc65 	bl	802664c <_Bfree>
 8023d82:	4621      	mov	r1, r4
 8023d84:	4648      	mov	r0, r9
 8023d86:	f002 fc61 	bl	802664c <_Bfree>
 8023d8a:	e600      	b.n	802398e <_strtod_l+0x7e>
 8023d8c:	9a06      	ldr	r2, [sp, #24]
 8023d8e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8023d92:	4293      	cmp	r3, r2
 8023d94:	dbba      	blt.n	8023d0c <_strtod_l+0x3fc>
 8023d96:	4d42      	ldr	r5, [pc, #264]	; (8023ea0 <_strtod_l+0x590>)
 8023d98:	f1c4 040f 	rsb	r4, r4, #15
 8023d9c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8023da0:	4652      	mov	r2, sl
 8023da2:	465b      	mov	r3, fp
 8023da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023da8:	f7dc fc36 	bl	8000618 <__aeabi_dmul>
 8023dac:	9b06      	ldr	r3, [sp, #24]
 8023dae:	1b1c      	subs	r4, r3, r4
 8023db0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8023db4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8023db8:	e78d      	b.n	8023cd6 <_strtod_l+0x3c6>
 8023dba:	f113 0f16 	cmn.w	r3, #22
 8023dbe:	dba5      	blt.n	8023d0c <_strtod_l+0x3fc>
 8023dc0:	4a37      	ldr	r2, [pc, #220]	; (8023ea0 <_strtod_l+0x590>)
 8023dc2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8023dc6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8023dca:	4650      	mov	r0, sl
 8023dcc:	4659      	mov	r1, fp
 8023dce:	f7dc fd4d 	bl	800086c <__aeabi_ddiv>
 8023dd2:	e782      	b.n	8023cda <_strtod_l+0x3ca>
 8023dd4:	2300      	movs	r3, #0
 8023dd6:	4e33      	ldr	r6, [pc, #204]	; (8023ea4 <_strtod_l+0x594>)
 8023dd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8023ddc:	4650      	mov	r0, sl
 8023dde:	4659      	mov	r1, fp
 8023de0:	461d      	mov	r5, r3
 8023de2:	f1b8 0f01 	cmp.w	r8, #1
 8023de6:	dc21      	bgt.n	8023e2c <_strtod_l+0x51c>
 8023de8:	b10b      	cbz	r3, 8023dee <_strtod_l+0x4de>
 8023dea:	4682      	mov	sl, r0
 8023dec:	468b      	mov	fp, r1
 8023dee:	4b2d      	ldr	r3, [pc, #180]	; (8023ea4 <_strtod_l+0x594>)
 8023df0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8023df4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8023df8:	4652      	mov	r2, sl
 8023dfa:	465b      	mov	r3, fp
 8023dfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8023e00:	f7dc fc0a 	bl	8000618 <__aeabi_dmul>
 8023e04:	4b28      	ldr	r3, [pc, #160]	; (8023ea8 <_strtod_l+0x598>)
 8023e06:	460a      	mov	r2, r1
 8023e08:	400b      	ands	r3, r1
 8023e0a:	4928      	ldr	r1, [pc, #160]	; (8023eac <_strtod_l+0x59c>)
 8023e0c:	428b      	cmp	r3, r1
 8023e0e:	4682      	mov	sl, r0
 8023e10:	d898      	bhi.n	8023d44 <_strtod_l+0x434>
 8023e12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8023e16:	428b      	cmp	r3, r1
 8023e18:	bf86      	itte	hi
 8023e1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8023eb4 <_strtod_l+0x5a4>
 8023e1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8023e22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8023e26:	2300      	movs	r3, #0
 8023e28:	9304      	str	r3, [sp, #16]
 8023e2a:	e077      	b.n	8023f1c <_strtod_l+0x60c>
 8023e2c:	f018 0f01 	tst.w	r8, #1
 8023e30:	d006      	beq.n	8023e40 <_strtod_l+0x530>
 8023e32:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8023e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e3a:	f7dc fbed 	bl	8000618 <__aeabi_dmul>
 8023e3e:	2301      	movs	r3, #1
 8023e40:	3501      	adds	r5, #1
 8023e42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8023e46:	e7cc      	b.n	8023de2 <_strtod_l+0x4d2>
 8023e48:	d0ed      	beq.n	8023e26 <_strtod_l+0x516>
 8023e4a:	f1c8 0800 	rsb	r8, r8, #0
 8023e4e:	f018 020f 	ands.w	r2, r8, #15
 8023e52:	d00a      	beq.n	8023e6a <_strtod_l+0x55a>
 8023e54:	4b12      	ldr	r3, [pc, #72]	; (8023ea0 <_strtod_l+0x590>)
 8023e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023e5a:	4650      	mov	r0, sl
 8023e5c:	4659      	mov	r1, fp
 8023e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e62:	f7dc fd03 	bl	800086c <__aeabi_ddiv>
 8023e66:	4682      	mov	sl, r0
 8023e68:	468b      	mov	fp, r1
 8023e6a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8023e6e:	d0da      	beq.n	8023e26 <_strtod_l+0x516>
 8023e70:	f1b8 0f1f 	cmp.w	r8, #31
 8023e74:	dd20      	ble.n	8023eb8 <_strtod_l+0x5a8>
 8023e76:	2400      	movs	r4, #0
 8023e78:	46a0      	mov	r8, r4
 8023e7a:	9407      	str	r4, [sp, #28]
 8023e7c:	9405      	str	r4, [sp, #20]
 8023e7e:	2322      	movs	r3, #34	; 0x22
 8023e80:	f04f 0a00 	mov.w	sl, #0
 8023e84:	f04f 0b00 	mov.w	fp, #0
 8023e88:	f8c9 3000 	str.w	r3, [r9]
 8023e8c:	e765      	b.n	8023d5a <_strtod_l+0x44a>
 8023e8e:	bf00      	nop
 8023e90:	08033206 	.word	0x08033206
 8023e94:	080333c8 	.word	0x080333c8
 8023e98:	0802e4c7 	.word	0x0802e4c7
 8023e9c:	08033248 	.word	0x08033248
 8023ea0:	080334c0 	.word	0x080334c0
 8023ea4:	08033498 	.word	0x08033498
 8023ea8:	7ff00000 	.word	0x7ff00000
 8023eac:	7ca00000 	.word	0x7ca00000
 8023eb0:	fff80000 	.word	0xfff80000
 8023eb4:	7fefffff 	.word	0x7fefffff
 8023eb8:	f018 0310 	ands.w	r3, r8, #16
 8023ebc:	bf18      	it	ne
 8023ebe:	236a      	movne	r3, #106	; 0x6a
 8023ec0:	4da0      	ldr	r5, [pc, #640]	; (8024144 <_strtod_l+0x834>)
 8023ec2:	9304      	str	r3, [sp, #16]
 8023ec4:	4650      	mov	r0, sl
 8023ec6:	4659      	mov	r1, fp
 8023ec8:	2300      	movs	r3, #0
 8023eca:	f1b8 0f00 	cmp.w	r8, #0
 8023ece:	f300 810a 	bgt.w	80240e6 <_strtod_l+0x7d6>
 8023ed2:	b10b      	cbz	r3, 8023ed8 <_strtod_l+0x5c8>
 8023ed4:	4682      	mov	sl, r0
 8023ed6:	468b      	mov	fp, r1
 8023ed8:	9b04      	ldr	r3, [sp, #16]
 8023eda:	b1bb      	cbz	r3, 8023f0c <_strtod_l+0x5fc>
 8023edc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8023ee0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	4659      	mov	r1, fp
 8023ee8:	dd10      	ble.n	8023f0c <_strtod_l+0x5fc>
 8023eea:	2b1f      	cmp	r3, #31
 8023eec:	f340 8107 	ble.w	80240fe <_strtod_l+0x7ee>
 8023ef0:	2b34      	cmp	r3, #52	; 0x34
 8023ef2:	bfde      	ittt	le
 8023ef4:	3b20      	suble	r3, #32
 8023ef6:	f04f 32ff 	movle.w	r2, #4294967295
 8023efa:	fa02 f303 	lslle.w	r3, r2, r3
 8023efe:	f04f 0a00 	mov.w	sl, #0
 8023f02:	bfcc      	ite	gt
 8023f04:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8023f08:	ea03 0b01 	andle.w	fp, r3, r1
 8023f0c:	2200      	movs	r2, #0
 8023f0e:	2300      	movs	r3, #0
 8023f10:	4650      	mov	r0, sl
 8023f12:	4659      	mov	r1, fp
 8023f14:	f7dc fde8 	bl	8000ae8 <__aeabi_dcmpeq>
 8023f18:	2800      	cmp	r0, #0
 8023f1a:	d1ac      	bne.n	8023e76 <_strtod_l+0x566>
 8023f1c:	9b07      	ldr	r3, [sp, #28]
 8023f1e:	9300      	str	r3, [sp, #0]
 8023f20:	9a05      	ldr	r2, [sp, #20]
 8023f22:	9908      	ldr	r1, [sp, #32]
 8023f24:	4623      	mov	r3, r4
 8023f26:	4648      	mov	r0, r9
 8023f28:	f002 fbe2 	bl	80266f0 <__s2b>
 8023f2c:	9007      	str	r0, [sp, #28]
 8023f2e:	2800      	cmp	r0, #0
 8023f30:	f43f af08 	beq.w	8023d44 <_strtod_l+0x434>
 8023f34:	9a06      	ldr	r2, [sp, #24]
 8023f36:	9b06      	ldr	r3, [sp, #24]
 8023f38:	2a00      	cmp	r2, #0
 8023f3a:	f1c3 0300 	rsb	r3, r3, #0
 8023f3e:	bfa8      	it	ge
 8023f40:	2300      	movge	r3, #0
 8023f42:	930e      	str	r3, [sp, #56]	; 0x38
 8023f44:	2400      	movs	r4, #0
 8023f46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8023f4a:	9316      	str	r3, [sp, #88]	; 0x58
 8023f4c:	46a0      	mov	r8, r4
 8023f4e:	9b07      	ldr	r3, [sp, #28]
 8023f50:	4648      	mov	r0, r9
 8023f52:	6859      	ldr	r1, [r3, #4]
 8023f54:	f002 fb46 	bl	80265e4 <_Balloc>
 8023f58:	9005      	str	r0, [sp, #20]
 8023f5a:	2800      	cmp	r0, #0
 8023f5c:	f43f aef6 	beq.w	8023d4c <_strtod_l+0x43c>
 8023f60:	9b07      	ldr	r3, [sp, #28]
 8023f62:	691a      	ldr	r2, [r3, #16]
 8023f64:	3202      	adds	r2, #2
 8023f66:	f103 010c 	add.w	r1, r3, #12
 8023f6a:	0092      	lsls	r2, r2, #2
 8023f6c:	300c      	adds	r0, #12
 8023f6e:	f7fe f9ba 	bl	80222e6 <memcpy>
 8023f72:	aa1e      	add	r2, sp, #120	; 0x78
 8023f74:	a91d      	add	r1, sp, #116	; 0x74
 8023f76:	ec4b ab10 	vmov	d0, sl, fp
 8023f7a:	4648      	mov	r0, r9
 8023f7c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8023f80:	f002 fe72 	bl	8026c68 <__d2b>
 8023f84:	901c      	str	r0, [sp, #112]	; 0x70
 8023f86:	2800      	cmp	r0, #0
 8023f88:	f43f aee0 	beq.w	8023d4c <_strtod_l+0x43c>
 8023f8c:	2101      	movs	r1, #1
 8023f8e:	4648      	mov	r0, r9
 8023f90:	f002 fc3a 	bl	8026808 <__i2b>
 8023f94:	4680      	mov	r8, r0
 8023f96:	2800      	cmp	r0, #0
 8023f98:	f43f aed8 	beq.w	8023d4c <_strtod_l+0x43c>
 8023f9c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023f9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023fa0:	2e00      	cmp	r6, #0
 8023fa2:	bfab      	itete	ge
 8023fa4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8023fa6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8023fa8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8023faa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8023fac:	bfac      	ite	ge
 8023fae:	18f7      	addge	r7, r6, r3
 8023fb0:	1b9d      	sublt	r5, r3, r6
 8023fb2:	9b04      	ldr	r3, [sp, #16]
 8023fb4:	1af6      	subs	r6, r6, r3
 8023fb6:	4416      	add	r6, r2
 8023fb8:	4b63      	ldr	r3, [pc, #396]	; (8024148 <_strtod_l+0x838>)
 8023fba:	3e01      	subs	r6, #1
 8023fbc:	429e      	cmp	r6, r3
 8023fbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8023fc2:	f280 80af 	bge.w	8024124 <_strtod_l+0x814>
 8023fc6:	1b9b      	subs	r3, r3, r6
 8023fc8:	2b1f      	cmp	r3, #31
 8023fca:	eba2 0203 	sub.w	r2, r2, r3
 8023fce:	f04f 0101 	mov.w	r1, #1
 8023fd2:	f300 809b 	bgt.w	802410c <_strtod_l+0x7fc>
 8023fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8023fda:	930f      	str	r3, [sp, #60]	; 0x3c
 8023fdc:	2300      	movs	r3, #0
 8023fde:	930a      	str	r3, [sp, #40]	; 0x28
 8023fe0:	18be      	adds	r6, r7, r2
 8023fe2:	9b04      	ldr	r3, [sp, #16]
 8023fe4:	42b7      	cmp	r7, r6
 8023fe6:	4415      	add	r5, r2
 8023fe8:	441d      	add	r5, r3
 8023fea:	463b      	mov	r3, r7
 8023fec:	bfa8      	it	ge
 8023fee:	4633      	movge	r3, r6
 8023ff0:	42ab      	cmp	r3, r5
 8023ff2:	bfa8      	it	ge
 8023ff4:	462b      	movge	r3, r5
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	bfc2      	ittt	gt
 8023ffa:	1af6      	subgt	r6, r6, r3
 8023ffc:	1aed      	subgt	r5, r5, r3
 8023ffe:	1aff      	subgt	r7, r7, r3
 8024000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024002:	b1bb      	cbz	r3, 8024034 <_strtod_l+0x724>
 8024004:	4641      	mov	r1, r8
 8024006:	461a      	mov	r2, r3
 8024008:	4648      	mov	r0, r9
 802400a:	f002 fc9d 	bl	8026948 <__pow5mult>
 802400e:	4680      	mov	r8, r0
 8024010:	2800      	cmp	r0, #0
 8024012:	f43f ae9b 	beq.w	8023d4c <_strtod_l+0x43c>
 8024016:	4601      	mov	r1, r0
 8024018:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802401a:	4648      	mov	r0, r9
 802401c:	f002 fbfd 	bl	802681a <__multiply>
 8024020:	900c      	str	r0, [sp, #48]	; 0x30
 8024022:	2800      	cmp	r0, #0
 8024024:	f43f ae92 	beq.w	8023d4c <_strtod_l+0x43c>
 8024028:	991c      	ldr	r1, [sp, #112]	; 0x70
 802402a:	4648      	mov	r0, r9
 802402c:	f002 fb0e 	bl	802664c <_Bfree>
 8024030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024032:	931c      	str	r3, [sp, #112]	; 0x70
 8024034:	2e00      	cmp	r6, #0
 8024036:	dc7a      	bgt.n	802412e <_strtod_l+0x81e>
 8024038:	9b06      	ldr	r3, [sp, #24]
 802403a:	2b00      	cmp	r3, #0
 802403c:	dd08      	ble.n	8024050 <_strtod_l+0x740>
 802403e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024040:	9905      	ldr	r1, [sp, #20]
 8024042:	4648      	mov	r0, r9
 8024044:	f002 fc80 	bl	8026948 <__pow5mult>
 8024048:	9005      	str	r0, [sp, #20]
 802404a:	2800      	cmp	r0, #0
 802404c:	f43f ae7e 	beq.w	8023d4c <_strtod_l+0x43c>
 8024050:	2d00      	cmp	r5, #0
 8024052:	dd08      	ble.n	8024066 <_strtod_l+0x756>
 8024054:	462a      	mov	r2, r5
 8024056:	9905      	ldr	r1, [sp, #20]
 8024058:	4648      	mov	r0, r9
 802405a:	f002 fcc3 	bl	80269e4 <__lshift>
 802405e:	9005      	str	r0, [sp, #20]
 8024060:	2800      	cmp	r0, #0
 8024062:	f43f ae73 	beq.w	8023d4c <_strtod_l+0x43c>
 8024066:	2f00      	cmp	r7, #0
 8024068:	dd08      	ble.n	802407c <_strtod_l+0x76c>
 802406a:	4641      	mov	r1, r8
 802406c:	463a      	mov	r2, r7
 802406e:	4648      	mov	r0, r9
 8024070:	f002 fcb8 	bl	80269e4 <__lshift>
 8024074:	4680      	mov	r8, r0
 8024076:	2800      	cmp	r0, #0
 8024078:	f43f ae68 	beq.w	8023d4c <_strtod_l+0x43c>
 802407c:	9a05      	ldr	r2, [sp, #20]
 802407e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024080:	4648      	mov	r0, r9
 8024082:	f002 fd1d 	bl	8026ac0 <__mdiff>
 8024086:	4604      	mov	r4, r0
 8024088:	2800      	cmp	r0, #0
 802408a:	f43f ae5f 	beq.w	8023d4c <_strtod_l+0x43c>
 802408e:	68c3      	ldr	r3, [r0, #12]
 8024090:	930c      	str	r3, [sp, #48]	; 0x30
 8024092:	2300      	movs	r3, #0
 8024094:	60c3      	str	r3, [r0, #12]
 8024096:	4641      	mov	r1, r8
 8024098:	f002 fcf8 	bl	8026a8c <__mcmp>
 802409c:	2800      	cmp	r0, #0
 802409e:	da55      	bge.n	802414c <_strtod_l+0x83c>
 80240a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240a2:	b9e3      	cbnz	r3, 80240de <_strtod_l+0x7ce>
 80240a4:	f1ba 0f00 	cmp.w	sl, #0
 80240a8:	d119      	bne.n	80240de <_strtod_l+0x7ce>
 80240aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80240ae:	b9b3      	cbnz	r3, 80240de <_strtod_l+0x7ce>
 80240b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80240b4:	0d1b      	lsrs	r3, r3, #20
 80240b6:	051b      	lsls	r3, r3, #20
 80240b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80240bc:	d90f      	bls.n	80240de <_strtod_l+0x7ce>
 80240be:	6963      	ldr	r3, [r4, #20]
 80240c0:	b913      	cbnz	r3, 80240c8 <_strtod_l+0x7b8>
 80240c2:	6923      	ldr	r3, [r4, #16]
 80240c4:	2b01      	cmp	r3, #1
 80240c6:	dd0a      	ble.n	80240de <_strtod_l+0x7ce>
 80240c8:	4621      	mov	r1, r4
 80240ca:	2201      	movs	r2, #1
 80240cc:	4648      	mov	r0, r9
 80240ce:	f002 fc89 	bl	80269e4 <__lshift>
 80240d2:	4641      	mov	r1, r8
 80240d4:	4604      	mov	r4, r0
 80240d6:	f002 fcd9 	bl	8026a8c <__mcmp>
 80240da:	2800      	cmp	r0, #0
 80240dc:	dc67      	bgt.n	80241ae <_strtod_l+0x89e>
 80240de:	9b04      	ldr	r3, [sp, #16]
 80240e0:	2b00      	cmp	r3, #0
 80240e2:	d171      	bne.n	80241c8 <_strtod_l+0x8b8>
 80240e4:	e63d      	b.n	8023d62 <_strtod_l+0x452>
 80240e6:	f018 0f01 	tst.w	r8, #1
 80240ea:	d004      	beq.n	80240f6 <_strtod_l+0x7e6>
 80240ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80240f0:	f7dc fa92 	bl	8000618 <__aeabi_dmul>
 80240f4:	2301      	movs	r3, #1
 80240f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80240fa:	3508      	adds	r5, #8
 80240fc:	e6e5      	b.n	8023eca <_strtod_l+0x5ba>
 80240fe:	f04f 32ff 	mov.w	r2, #4294967295
 8024102:	fa02 f303 	lsl.w	r3, r2, r3
 8024106:	ea03 0a0a 	and.w	sl, r3, sl
 802410a:	e6ff      	b.n	8023f0c <_strtod_l+0x5fc>
 802410c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8024110:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8024114:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8024118:	36e2      	adds	r6, #226	; 0xe2
 802411a:	fa01 f306 	lsl.w	r3, r1, r6
 802411e:	930a      	str	r3, [sp, #40]	; 0x28
 8024120:	910f      	str	r1, [sp, #60]	; 0x3c
 8024122:	e75d      	b.n	8023fe0 <_strtod_l+0x6d0>
 8024124:	2300      	movs	r3, #0
 8024126:	930a      	str	r3, [sp, #40]	; 0x28
 8024128:	2301      	movs	r3, #1
 802412a:	930f      	str	r3, [sp, #60]	; 0x3c
 802412c:	e758      	b.n	8023fe0 <_strtod_l+0x6d0>
 802412e:	4632      	mov	r2, r6
 8024130:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024132:	4648      	mov	r0, r9
 8024134:	f002 fc56 	bl	80269e4 <__lshift>
 8024138:	901c      	str	r0, [sp, #112]	; 0x70
 802413a:	2800      	cmp	r0, #0
 802413c:	f47f af7c 	bne.w	8024038 <_strtod_l+0x728>
 8024140:	e604      	b.n	8023d4c <_strtod_l+0x43c>
 8024142:	bf00      	nop
 8024144:	08033260 	.word	0x08033260
 8024148:	fffffc02 	.word	0xfffffc02
 802414c:	465d      	mov	r5, fp
 802414e:	f040 8086 	bne.w	802425e <_strtod_l+0x94e>
 8024152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024154:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024158:	b32a      	cbz	r2, 80241a6 <_strtod_l+0x896>
 802415a:	4aaf      	ldr	r2, [pc, #700]	; (8024418 <_strtod_l+0xb08>)
 802415c:	4293      	cmp	r3, r2
 802415e:	d153      	bne.n	8024208 <_strtod_l+0x8f8>
 8024160:	9b04      	ldr	r3, [sp, #16]
 8024162:	4650      	mov	r0, sl
 8024164:	b1d3      	cbz	r3, 802419c <_strtod_l+0x88c>
 8024166:	4aad      	ldr	r2, [pc, #692]	; (802441c <_strtod_l+0xb0c>)
 8024168:	402a      	ands	r2, r5
 802416a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 802416e:	f04f 31ff 	mov.w	r1, #4294967295
 8024172:	d816      	bhi.n	80241a2 <_strtod_l+0x892>
 8024174:	0d12      	lsrs	r2, r2, #20
 8024176:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802417a:	fa01 f303 	lsl.w	r3, r1, r3
 802417e:	4298      	cmp	r0, r3
 8024180:	d142      	bne.n	8024208 <_strtod_l+0x8f8>
 8024182:	4ba7      	ldr	r3, [pc, #668]	; (8024420 <_strtod_l+0xb10>)
 8024184:	429d      	cmp	r5, r3
 8024186:	d102      	bne.n	802418e <_strtod_l+0x87e>
 8024188:	3001      	adds	r0, #1
 802418a:	f43f addf 	beq.w	8023d4c <_strtod_l+0x43c>
 802418e:	4ba3      	ldr	r3, [pc, #652]	; (802441c <_strtod_l+0xb0c>)
 8024190:	402b      	ands	r3, r5
 8024192:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8024196:	f04f 0a00 	mov.w	sl, #0
 802419a:	e7a0      	b.n	80240de <_strtod_l+0x7ce>
 802419c:	f04f 33ff 	mov.w	r3, #4294967295
 80241a0:	e7ed      	b.n	802417e <_strtod_l+0x86e>
 80241a2:	460b      	mov	r3, r1
 80241a4:	e7eb      	b.n	802417e <_strtod_l+0x86e>
 80241a6:	bb7b      	cbnz	r3, 8024208 <_strtod_l+0x8f8>
 80241a8:	f1ba 0f00 	cmp.w	sl, #0
 80241ac:	d12c      	bne.n	8024208 <_strtod_l+0x8f8>
 80241ae:	9904      	ldr	r1, [sp, #16]
 80241b0:	4a9a      	ldr	r2, [pc, #616]	; (802441c <_strtod_l+0xb0c>)
 80241b2:	465b      	mov	r3, fp
 80241b4:	b1f1      	cbz	r1, 80241f4 <_strtod_l+0x8e4>
 80241b6:	ea02 010b 	and.w	r1, r2, fp
 80241ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80241be:	dc19      	bgt.n	80241f4 <_strtod_l+0x8e4>
 80241c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80241c4:	f77f ae5b 	ble.w	8023e7e <_strtod_l+0x56e>
 80241c8:	4a96      	ldr	r2, [pc, #600]	; (8024424 <_strtod_l+0xb14>)
 80241ca:	2300      	movs	r3, #0
 80241cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80241d0:	4650      	mov	r0, sl
 80241d2:	4659      	mov	r1, fp
 80241d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80241d8:	f7dc fa1e 	bl	8000618 <__aeabi_dmul>
 80241dc:	4682      	mov	sl, r0
 80241de:	468b      	mov	fp, r1
 80241e0:	2900      	cmp	r1, #0
 80241e2:	f47f adbe 	bne.w	8023d62 <_strtod_l+0x452>
 80241e6:	2800      	cmp	r0, #0
 80241e8:	f47f adbb 	bne.w	8023d62 <_strtod_l+0x452>
 80241ec:	2322      	movs	r3, #34	; 0x22
 80241ee:	f8c9 3000 	str.w	r3, [r9]
 80241f2:	e5b6      	b.n	8023d62 <_strtod_l+0x452>
 80241f4:	4013      	ands	r3, r2
 80241f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80241fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80241fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8024202:	f04f 3aff 	mov.w	sl, #4294967295
 8024206:	e76a      	b.n	80240de <_strtod_l+0x7ce>
 8024208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802420a:	b193      	cbz	r3, 8024232 <_strtod_l+0x922>
 802420c:	422b      	tst	r3, r5
 802420e:	f43f af66 	beq.w	80240de <_strtod_l+0x7ce>
 8024212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024214:	9a04      	ldr	r2, [sp, #16]
 8024216:	4650      	mov	r0, sl
 8024218:	4659      	mov	r1, fp
 802421a:	b173      	cbz	r3, 802423a <_strtod_l+0x92a>
 802421c:	f7ff fb5b 	bl	80238d6 <sulp>
 8024220:	4602      	mov	r2, r0
 8024222:	460b      	mov	r3, r1
 8024224:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024228:	f7dc f840 	bl	80002ac <__adddf3>
 802422c:	4682      	mov	sl, r0
 802422e:	468b      	mov	fp, r1
 8024230:	e755      	b.n	80240de <_strtod_l+0x7ce>
 8024232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024234:	ea13 0f0a 	tst.w	r3, sl
 8024238:	e7e9      	b.n	802420e <_strtod_l+0x8fe>
 802423a:	f7ff fb4c 	bl	80238d6 <sulp>
 802423e:	4602      	mov	r2, r0
 8024240:	460b      	mov	r3, r1
 8024242:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024246:	f7dc f82f 	bl	80002a8 <__aeabi_dsub>
 802424a:	2200      	movs	r2, #0
 802424c:	2300      	movs	r3, #0
 802424e:	4682      	mov	sl, r0
 8024250:	468b      	mov	fp, r1
 8024252:	f7dc fc49 	bl	8000ae8 <__aeabi_dcmpeq>
 8024256:	2800      	cmp	r0, #0
 8024258:	f47f ae11 	bne.w	8023e7e <_strtod_l+0x56e>
 802425c:	e73f      	b.n	80240de <_strtod_l+0x7ce>
 802425e:	4641      	mov	r1, r8
 8024260:	4620      	mov	r0, r4
 8024262:	f002 fd50 	bl	8026d06 <__ratio>
 8024266:	ec57 6b10 	vmov	r6, r7, d0
 802426a:	2200      	movs	r2, #0
 802426c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024270:	ee10 0a10 	vmov	r0, s0
 8024274:	4639      	mov	r1, r7
 8024276:	f7dc fc4b 	bl	8000b10 <__aeabi_dcmple>
 802427a:	2800      	cmp	r0, #0
 802427c:	d077      	beq.n	802436e <_strtod_l+0xa5e>
 802427e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024280:	2b00      	cmp	r3, #0
 8024282:	d04a      	beq.n	802431a <_strtod_l+0xa0a>
 8024284:	4b68      	ldr	r3, [pc, #416]	; (8024428 <_strtod_l+0xb18>)
 8024286:	2200      	movs	r2, #0
 8024288:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 802428c:	4f66      	ldr	r7, [pc, #408]	; (8024428 <_strtod_l+0xb18>)
 802428e:	2600      	movs	r6, #0
 8024290:	4b62      	ldr	r3, [pc, #392]	; (802441c <_strtod_l+0xb0c>)
 8024292:	402b      	ands	r3, r5
 8024294:	930f      	str	r3, [sp, #60]	; 0x3c
 8024296:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024298:	4b64      	ldr	r3, [pc, #400]	; (802442c <_strtod_l+0xb1c>)
 802429a:	429a      	cmp	r2, r3
 802429c:	f040 80ce 	bne.w	802443c <_strtod_l+0xb2c>
 80242a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80242a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80242a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80242ac:	ec4b ab10 	vmov	d0, sl, fp
 80242b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80242b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80242b8:	f002 fc60 	bl	8026b7c <__ulp>
 80242bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80242c0:	ec53 2b10 	vmov	r2, r3, d0
 80242c4:	f7dc f9a8 	bl	8000618 <__aeabi_dmul>
 80242c8:	4652      	mov	r2, sl
 80242ca:	465b      	mov	r3, fp
 80242cc:	f7db ffee 	bl	80002ac <__adddf3>
 80242d0:	460b      	mov	r3, r1
 80242d2:	4952      	ldr	r1, [pc, #328]	; (802441c <_strtod_l+0xb0c>)
 80242d4:	4a56      	ldr	r2, [pc, #344]	; (8024430 <_strtod_l+0xb20>)
 80242d6:	4019      	ands	r1, r3
 80242d8:	4291      	cmp	r1, r2
 80242da:	4682      	mov	sl, r0
 80242dc:	d95b      	bls.n	8024396 <_strtod_l+0xa86>
 80242de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80242e4:	4293      	cmp	r3, r2
 80242e6:	d103      	bne.n	80242f0 <_strtod_l+0x9e0>
 80242e8:	9b08      	ldr	r3, [sp, #32]
 80242ea:	3301      	adds	r3, #1
 80242ec:	f43f ad2e 	beq.w	8023d4c <_strtod_l+0x43c>
 80242f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8024420 <_strtod_l+0xb10>
 80242f4:	f04f 3aff 	mov.w	sl, #4294967295
 80242f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80242fa:	4648      	mov	r0, r9
 80242fc:	f002 f9a6 	bl	802664c <_Bfree>
 8024300:	9905      	ldr	r1, [sp, #20]
 8024302:	4648      	mov	r0, r9
 8024304:	f002 f9a2 	bl	802664c <_Bfree>
 8024308:	4641      	mov	r1, r8
 802430a:	4648      	mov	r0, r9
 802430c:	f002 f99e 	bl	802664c <_Bfree>
 8024310:	4621      	mov	r1, r4
 8024312:	4648      	mov	r0, r9
 8024314:	f002 f99a 	bl	802664c <_Bfree>
 8024318:	e619      	b.n	8023f4e <_strtod_l+0x63e>
 802431a:	f1ba 0f00 	cmp.w	sl, #0
 802431e:	d11a      	bne.n	8024356 <_strtod_l+0xa46>
 8024320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024324:	b9eb      	cbnz	r3, 8024362 <_strtod_l+0xa52>
 8024326:	2200      	movs	r2, #0
 8024328:	4b3f      	ldr	r3, [pc, #252]	; (8024428 <_strtod_l+0xb18>)
 802432a:	4630      	mov	r0, r6
 802432c:	4639      	mov	r1, r7
 802432e:	f7dc fbe5 	bl	8000afc <__aeabi_dcmplt>
 8024332:	b9c8      	cbnz	r0, 8024368 <_strtod_l+0xa58>
 8024334:	4630      	mov	r0, r6
 8024336:	4639      	mov	r1, r7
 8024338:	2200      	movs	r2, #0
 802433a:	4b3e      	ldr	r3, [pc, #248]	; (8024434 <_strtod_l+0xb24>)
 802433c:	f7dc f96c 	bl	8000618 <__aeabi_dmul>
 8024340:	4606      	mov	r6, r0
 8024342:	460f      	mov	r7, r1
 8024344:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8024348:	9618      	str	r6, [sp, #96]	; 0x60
 802434a:	9319      	str	r3, [sp, #100]	; 0x64
 802434c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8024350:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8024354:	e79c      	b.n	8024290 <_strtod_l+0x980>
 8024356:	f1ba 0f01 	cmp.w	sl, #1
 802435a:	d102      	bne.n	8024362 <_strtod_l+0xa52>
 802435c:	2d00      	cmp	r5, #0
 802435e:	f43f ad8e 	beq.w	8023e7e <_strtod_l+0x56e>
 8024362:	2200      	movs	r2, #0
 8024364:	4b34      	ldr	r3, [pc, #208]	; (8024438 <_strtod_l+0xb28>)
 8024366:	e78f      	b.n	8024288 <_strtod_l+0x978>
 8024368:	2600      	movs	r6, #0
 802436a:	4f32      	ldr	r7, [pc, #200]	; (8024434 <_strtod_l+0xb24>)
 802436c:	e7ea      	b.n	8024344 <_strtod_l+0xa34>
 802436e:	4b31      	ldr	r3, [pc, #196]	; (8024434 <_strtod_l+0xb24>)
 8024370:	4630      	mov	r0, r6
 8024372:	4639      	mov	r1, r7
 8024374:	2200      	movs	r2, #0
 8024376:	f7dc f94f 	bl	8000618 <__aeabi_dmul>
 802437a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802437c:	4606      	mov	r6, r0
 802437e:	460f      	mov	r7, r1
 8024380:	b933      	cbnz	r3, 8024390 <_strtod_l+0xa80>
 8024382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024386:	9010      	str	r0, [sp, #64]	; 0x40
 8024388:	9311      	str	r3, [sp, #68]	; 0x44
 802438a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802438e:	e7df      	b.n	8024350 <_strtod_l+0xa40>
 8024390:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8024394:	e7f9      	b.n	802438a <_strtod_l+0xa7a>
 8024396:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 802439a:	9b04      	ldr	r3, [sp, #16]
 802439c:	2b00      	cmp	r3, #0
 802439e:	d1ab      	bne.n	80242f8 <_strtod_l+0x9e8>
 80243a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80243a4:	0d1b      	lsrs	r3, r3, #20
 80243a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80243a8:	051b      	lsls	r3, r3, #20
 80243aa:	429a      	cmp	r2, r3
 80243ac:	465d      	mov	r5, fp
 80243ae:	d1a3      	bne.n	80242f8 <_strtod_l+0x9e8>
 80243b0:	4639      	mov	r1, r7
 80243b2:	4630      	mov	r0, r6
 80243b4:	f7dc fbe0 	bl	8000b78 <__aeabi_d2iz>
 80243b8:	f7dc f8c4 	bl	8000544 <__aeabi_i2d>
 80243bc:	460b      	mov	r3, r1
 80243be:	4602      	mov	r2, r0
 80243c0:	4639      	mov	r1, r7
 80243c2:	4630      	mov	r0, r6
 80243c4:	f7db ff70 	bl	80002a8 <__aeabi_dsub>
 80243c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80243ca:	4606      	mov	r6, r0
 80243cc:	460f      	mov	r7, r1
 80243ce:	b933      	cbnz	r3, 80243de <_strtod_l+0xace>
 80243d0:	f1ba 0f00 	cmp.w	sl, #0
 80243d4:	d103      	bne.n	80243de <_strtod_l+0xace>
 80243d6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80243da:	2d00      	cmp	r5, #0
 80243dc:	d06d      	beq.n	80244ba <_strtod_l+0xbaa>
 80243de:	a30a      	add	r3, pc, #40	; (adr r3, 8024408 <_strtod_l+0xaf8>)
 80243e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243e4:	4630      	mov	r0, r6
 80243e6:	4639      	mov	r1, r7
 80243e8:	f7dc fb88 	bl	8000afc <__aeabi_dcmplt>
 80243ec:	2800      	cmp	r0, #0
 80243ee:	f47f acb8 	bne.w	8023d62 <_strtod_l+0x452>
 80243f2:	a307      	add	r3, pc, #28	; (adr r3, 8024410 <_strtod_l+0xb00>)
 80243f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243f8:	4630      	mov	r0, r6
 80243fa:	4639      	mov	r1, r7
 80243fc:	f7dc fb9c 	bl	8000b38 <__aeabi_dcmpgt>
 8024400:	2800      	cmp	r0, #0
 8024402:	f43f af79 	beq.w	80242f8 <_strtod_l+0x9e8>
 8024406:	e4ac      	b.n	8023d62 <_strtod_l+0x452>
 8024408:	94a03595 	.word	0x94a03595
 802440c:	3fdfffff 	.word	0x3fdfffff
 8024410:	35afe535 	.word	0x35afe535
 8024414:	3fe00000 	.word	0x3fe00000
 8024418:	000fffff 	.word	0x000fffff
 802441c:	7ff00000 	.word	0x7ff00000
 8024420:	7fefffff 	.word	0x7fefffff
 8024424:	39500000 	.word	0x39500000
 8024428:	3ff00000 	.word	0x3ff00000
 802442c:	7fe00000 	.word	0x7fe00000
 8024430:	7c9fffff 	.word	0x7c9fffff
 8024434:	3fe00000 	.word	0x3fe00000
 8024438:	bff00000 	.word	0xbff00000
 802443c:	9b04      	ldr	r3, [sp, #16]
 802443e:	b333      	cbz	r3, 802448e <_strtod_l+0xb7e>
 8024440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024442:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024446:	d822      	bhi.n	802448e <_strtod_l+0xb7e>
 8024448:	a327      	add	r3, pc, #156	; (adr r3, 80244e8 <_strtod_l+0xbd8>)
 802444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802444e:	4630      	mov	r0, r6
 8024450:	4639      	mov	r1, r7
 8024452:	f7dc fb5d 	bl	8000b10 <__aeabi_dcmple>
 8024456:	b1a0      	cbz	r0, 8024482 <_strtod_l+0xb72>
 8024458:	4639      	mov	r1, r7
 802445a:	4630      	mov	r0, r6
 802445c:	f7dc fbb4 	bl	8000bc8 <__aeabi_d2uiz>
 8024460:	2800      	cmp	r0, #0
 8024462:	bf08      	it	eq
 8024464:	2001      	moveq	r0, #1
 8024466:	f7dc f85d 	bl	8000524 <__aeabi_ui2d>
 802446a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802446c:	4606      	mov	r6, r0
 802446e:	460f      	mov	r7, r1
 8024470:	bb03      	cbnz	r3, 80244b4 <_strtod_l+0xba4>
 8024472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024476:	9012      	str	r0, [sp, #72]	; 0x48
 8024478:	9313      	str	r3, [sp, #76]	; 0x4c
 802447a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 802447e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8024482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024486:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802448a:	1a9b      	subs	r3, r3, r2
 802448c:	930b      	str	r3, [sp, #44]	; 0x2c
 802448e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8024492:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8024496:	f002 fb71 	bl	8026b7c <__ulp>
 802449a:	4650      	mov	r0, sl
 802449c:	ec53 2b10 	vmov	r2, r3, d0
 80244a0:	4659      	mov	r1, fp
 80244a2:	f7dc f8b9 	bl	8000618 <__aeabi_dmul>
 80244a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80244aa:	f7db feff 	bl	80002ac <__adddf3>
 80244ae:	4682      	mov	sl, r0
 80244b0:	468b      	mov	fp, r1
 80244b2:	e772      	b.n	802439a <_strtod_l+0xa8a>
 80244b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80244b8:	e7df      	b.n	802447a <_strtod_l+0xb6a>
 80244ba:	a30d      	add	r3, pc, #52	; (adr r3, 80244f0 <_strtod_l+0xbe0>)
 80244bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244c0:	f7dc fb1c 	bl	8000afc <__aeabi_dcmplt>
 80244c4:	e79c      	b.n	8024400 <_strtod_l+0xaf0>
 80244c6:	2300      	movs	r3, #0
 80244c8:	930d      	str	r3, [sp, #52]	; 0x34
 80244ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80244cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80244ce:	6013      	str	r3, [r2, #0]
 80244d0:	f7ff ba61 	b.w	8023996 <_strtod_l+0x86>
 80244d4:	2b65      	cmp	r3, #101	; 0x65
 80244d6:	f04f 0200 	mov.w	r2, #0
 80244da:	f43f ab4e 	beq.w	8023b7a <_strtod_l+0x26a>
 80244de:	2101      	movs	r1, #1
 80244e0:	4614      	mov	r4, r2
 80244e2:	9104      	str	r1, [sp, #16]
 80244e4:	f7ff bacb 	b.w	8023a7e <_strtod_l+0x16e>
 80244e8:	ffc00000 	.word	0xffc00000
 80244ec:	41dfffff 	.word	0x41dfffff
 80244f0:	94a03595 	.word	0x94a03595
 80244f4:	3fcfffff 	.word	0x3fcfffff

080244f8 <strtod>:
 80244f8:	4b07      	ldr	r3, [pc, #28]	; (8024518 <strtod+0x20>)
 80244fa:	4a08      	ldr	r2, [pc, #32]	; (802451c <strtod+0x24>)
 80244fc:	b410      	push	{r4}
 80244fe:	681c      	ldr	r4, [r3, #0]
 8024500:	6a23      	ldr	r3, [r4, #32]
 8024502:	2b00      	cmp	r3, #0
 8024504:	bf08      	it	eq
 8024506:	4613      	moveq	r3, r2
 8024508:	460a      	mov	r2, r1
 802450a:	4601      	mov	r1, r0
 802450c:	4620      	mov	r0, r4
 802450e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024512:	f7ff b9fd 	b.w	8023910 <_strtod_l>
 8024516:	bf00      	nop
 8024518:	200005e4 	.word	0x200005e4
 802451c:	20000648 	.word	0x20000648

08024520 <strtok>:
 8024520:	4b13      	ldr	r3, [pc, #76]	; (8024570 <strtok+0x50>)
 8024522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024526:	681d      	ldr	r5, [r3, #0]
 8024528:	6dac      	ldr	r4, [r5, #88]	; 0x58
 802452a:	4606      	mov	r6, r0
 802452c:	460f      	mov	r7, r1
 802452e:	b9b4      	cbnz	r4, 802455e <strtok+0x3e>
 8024530:	2050      	movs	r0, #80	; 0x50
 8024532:	f7fd fea7 	bl	8022284 <malloc>
 8024536:	65a8      	str	r0, [r5, #88]	; 0x58
 8024538:	e9c0 4400 	strd	r4, r4, [r0]
 802453c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8024540:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8024544:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8024548:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802454c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8024550:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8024554:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8024558:	6184      	str	r4, [r0, #24]
 802455a:	7704      	strb	r4, [r0, #28]
 802455c:	6244      	str	r4, [r0, #36]	; 0x24
 802455e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8024560:	4639      	mov	r1, r7
 8024562:	4630      	mov	r0, r6
 8024564:	2301      	movs	r3, #1
 8024566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802456a:	f000 b803 	b.w	8024574 <__strtok_r>
 802456e:	bf00      	nop
 8024570:	200005e4 	.word	0x200005e4

08024574 <__strtok_r>:
 8024574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024576:	b918      	cbnz	r0, 8024580 <__strtok_r+0xc>
 8024578:	6810      	ldr	r0, [r2, #0]
 802457a:	b908      	cbnz	r0, 8024580 <__strtok_r+0xc>
 802457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802457e:	4620      	mov	r0, r4
 8024580:	4604      	mov	r4, r0
 8024582:	460f      	mov	r7, r1
 8024584:	f814 5b01 	ldrb.w	r5, [r4], #1
 8024588:	f817 6b01 	ldrb.w	r6, [r7], #1
 802458c:	b91e      	cbnz	r6, 8024596 <__strtok_r+0x22>
 802458e:	b96d      	cbnz	r5, 80245ac <__strtok_r+0x38>
 8024590:	6015      	str	r5, [r2, #0]
 8024592:	4628      	mov	r0, r5
 8024594:	e7f2      	b.n	802457c <__strtok_r+0x8>
 8024596:	42b5      	cmp	r5, r6
 8024598:	d1f6      	bne.n	8024588 <__strtok_r+0x14>
 802459a:	2b00      	cmp	r3, #0
 802459c:	d1ef      	bne.n	802457e <__strtok_r+0xa>
 802459e:	6014      	str	r4, [r2, #0]
 80245a0:	7003      	strb	r3, [r0, #0]
 80245a2:	e7eb      	b.n	802457c <__strtok_r+0x8>
 80245a4:	462b      	mov	r3, r5
 80245a6:	e00d      	b.n	80245c4 <__strtok_r+0x50>
 80245a8:	b926      	cbnz	r6, 80245b4 <__strtok_r+0x40>
 80245aa:	461c      	mov	r4, r3
 80245ac:	4623      	mov	r3, r4
 80245ae:	460f      	mov	r7, r1
 80245b0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80245b4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80245b8:	42b5      	cmp	r5, r6
 80245ba:	d1f5      	bne.n	80245a8 <__strtok_r+0x34>
 80245bc:	2d00      	cmp	r5, #0
 80245be:	d0f1      	beq.n	80245a4 <__strtok_r+0x30>
 80245c0:	2100      	movs	r1, #0
 80245c2:	7021      	strb	r1, [r4, #0]
 80245c4:	6013      	str	r3, [r2, #0]
 80245c6:	e7d9      	b.n	802457c <__strtok_r+0x8>

080245c8 <_strtol_l.isra.0>:
 80245c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245cc:	4680      	mov	r8, r0
 80245ce:	4689      	mov	r9, r1
 80245d0:	4692      	mov	sl, r2
 80245d2:	461e      	mov	r6, r3
 80245d4:	460f      	mov	r7, r1
 80245d6:	463d      	mov	r5, r7
 80245d8:	9808      	ldr	r0, [sp, #32]
 80245da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80245de:	f7fd fe21 	bl	8022224 <__locale_ctype_ptr_l>
 80245e2:	4420      	add	r0, r4
 80245e4:	7843      	ldrb	r3, [r0, #1]
 80245e6:	f013 0308 	ands.w	r3, r3, #8
 80245ea:	d132      	bne.n	8024652 <_strtol_l.isra.0+0x8a>
 80245ec:	2c2d      	cmp	r4, #45	; 0x2d
 80245ee:	d132      	bne.n	8024656 <_strtol_l.isra.0+0x8e>
 80245f0:	787c      	ldrb	r4, [r7, #1]
 80245f2:	1cbd      	adds	r5, r7, #2
 80245f4:	2201      	movs	r2, #1
 80245f6:	2e00      	cmp	r6, #0
 80245f8:	d05d      	beq.n	80246b6 <_strtol_l.isra.0+0xee>
 80245fa:	2e10      	cmp	r6, #16
 80245fc:	d109      	bne.n	8024612 <_strtol_l.isra.0+0x4a>
 80245fe:	2c30      	cmp	r4, #48	; 0x30
 8024600:	d107      	bne.n	8024612 <_strtol_l.isra.0+0x4a>
 8024602:	782b      	ldrb	r3, [r5, #0]
 8024604:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8024608:	2b58      	cmp	r3, #88	; 0x58
 802460a:	d14f      	bne.n	80246ac <_strtol_l.isra.0+0xe4>
 802460c:	786c      	ldrb	r4, [r5, #1]
 802460e:	2610      	movs	r6, #16
 8024610:	3502      	adds	r5, #2
 8024612:	2a00      	cmp	r2, #0
 8024614:	bf14      	ite	ne
 8024616:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802461a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802461e:	2700      	movs	r7, #0
 8024620:	fbb1 fcf6 	udiv	ip, r1, r6
 8024624:	4638      	mov	r0, r7
 8024626:	fb06 1e1c 	mls	lr, r6, ip, r1
 802462a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802462e:	2b09      	cmp	r3, #9
 8024630:	d817      	bhi.n	8024662 <_strtol_l.isra.0+0x9a>
 8024632:	461c      	mov	r4, r3
 8024634:	42a6      	cmp	r6, r4
 8024636:	dd23      	ble.n	8024680 <_strtol_l.isra.0+0xb8>
 8024638:	1c7b      	adds	r3, r7, #1
 802463a:	d007      	beq.n	802464c <_strtol_l.isra.0+0x84>
 802463c:	4584      	cmp	ip, r0
 802463e:	d31c      	bcc.n	802467a <_strtol_l.isra.0+0xb2>
 8024640:	d101      	bne.n	8024646 <_strtol_l.isra.0+0x7e>
 8024642:	45a6      	cmp	lr, r4
 8024644:	db19      	blt.n	802467a <_strtol_l.isra.0+0xb2>
 8024646:	fb00 4006 	mla	r0, r0, r6, r4
 802464a:	2701      	movs	r7, #1
 802464c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024650:	e7eb      	b.n	802462a <_strtol_l.isra.0+0x62>
 8024652:	462f      	mov	r7, r5
 8024654:	e7bf      	b.n	80245d6 <_strtol_l.isra.0+0xe>
 8024656:	2c2b      	cmp	r4, #43	; 0x2b
 8024658:	bf04      	itt	eq
 802465a:	1cbd      	addeq	r5, r7, #2
 802465c:	787c      	ldrbeq	r4, [r7, #1]
 802465e:	461a      	mov	r2, r3
 8024660:	e7c9      	b.n	80245f6 <_strtol_l.isra.0+0x2e>
 8024662:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8024666:	2b19      	cmp	r3, #25
 8024668:	d801      	bhi.n	802466e <_strtol_l.isra.0+0xa6>
 802466a:	3c37      	subs	r4, #55	; 0x37
 802466c:	e7e2      	b.n	8024634 <_strtol_l.isra.0+0x6c>
 802466e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8024672:	2b19      	cmp	r3, #25
 8024674:	d804      	bhi.n	8024680 <_strtol_l.isra.0+0xb8>
 8024676:	3c57      	subs	r4, #87	; 0x57
 8024678:	e7dc      	b.n	8024634 <_strtol_l.isra.0+0x6c>
 802467a:	f04f 37ff 	mov.w	r7, #4294967295
 802467e:	e7e5      	b.n	802464c <_strtol_l.isra.0+0x84>
 8024680:	1c7b      	adds	r3, r7, #1
 8024682:	d108      	bne.n	8024696 <_strtol_l.isra.0+0xce>
 8024684:	2322      	movs	r3, #34	; 0x22
 8024686:	f8c8 3000 	str.w	r3, [r8]
 802468a:	4608      	mov	r0, r1
 802468c:	f1ba 0f00 	cmp.w	sl, #0
 8024690:	d107      	bne.n	80246a2 <_strtol_l.isra.0+0xda>
 8024692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024696:	b102      	cbz	r2, 802469a <_strtol_l.isra.0+0xd2>
 8024698:	4240      	negs	r0, r0
 802469a:	f1ba 0f00 	cmp.w	sl, #0
 802469e:	d0f8      	beq.n	8024692 <_strtol_l.isra.0+0xca>
 80246a0:	b10f      	cbz	r7, 80246a6 <_strtol_l.isra.0+0xde>
 80246a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80246a6:	f8ca 9000 	str.w	r9, [sl]
 80246aa:	e7f2      	b.n	8024692 <_strtol_l.isra.0+0xca>
 80246ac:	2430      	movs	r4, #48	; 0x30
 80246ae:	2e00      	cmp	r6, #0
 80246b0:	d1af      	bne.n	8024612 <_strtol_l.isra.0+0x4a>
 80246b2:	2608      	movs	r6, #8
 80246b4:	e7ad      	b.n	8024612 <_strtol_l.isra.0+0x4a>
 80246b6:	2c30      	cmp	r4, #48	; 0x30
 80246b8:	d0a3      	beq.n	8024602 <_strtol_l.isra.0+0x3a>
 80246ba:	260a      	movs	r6, #10
 80246bc:	e7a9      	b.n	8024612 <_strtol_l.isra.0+0x4a>
	...

080246c0 <_strtol_r>:
 80246c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80246c2:	4c06      	ldr	r4, [pc, #24]	; (80246dc <_strtol_r+0x1c>)
 80246c4:	4d06      	ldr	r5, [pc, #24]	; (80246e0 <_strtol_r+0x20>)
 80246c6:	6824      	ldr	r4, [r4, #0]
 80246c8:	6a24      	ldr	r4, [r4, #32]
 80246ca:	2c00      	cmp	r4, #0
 80246cc:	bf08      	it	eq
 80246ce:	462c      	moveq	r4, r5
 80246d0:	9400      	str	r4, [sp, #0]
 80246d2:	f7ff ff79 	bl	80245c8 <_strtol_l.isra.0>
 80246d6:	b003      	add	sp, #12
 80246d8:	bd30      	pop	{r4, r5, pc}
 80246da:	bf00      	nop
 80246dc:	200005e4 	.word	0x200005e4
 80246e0:	20000648 	.word	0x20000648

080246e4 <strtol>:
 80246e4:	4b08      	ldr	r3, [pc, #32]	; (8024708 <strtol+0x24>)
 80246e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80246e8:	681c      	ldr	r4, [r3, #0]
 80246ea:	4d08      	ldr	r5, [pc, #32]	; (802470c <strtol+0x28>)
 80246ec:	6a23      	ldr	r3, [r4, #32]
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	bf08      	it	eq
 80246f2:	462b      	moveq	r3, r5
 80246f4:	9300      	str	r3, [sp, #0]
 80246f6:	4613      	mov	r3, r2
 80246f8:	460a      	mov	r2, r1
 80246fa:	4601      	mov	r1, r0
 80246fc:	4620      	mov	r0, r4
 80246fe:	f7ff ff63 	bl	80245c8 <_strtol_l.isra.0>
 8024702:	b003      	add	sp, #12
 8024704:	bd30      	pop	{r4, r5, pc}
 8024706:	bf00      	nop
 8024708:	200005e4 	.word	0x200005e4
 802470c:	20000648 	.word	0x20000648

08024710 <__tzcalc_limits>:
 8024710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024714:	4680      	mov	r8, r0
 8024716:	f001 fee9 	bl	80264ec <__gettzinfo>
 802471a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802471e:	4598      	cmp	r8, r3
 8024720:	f340 8098 	ble.w	8024854 <__tzcalc_limits+0x144>
 8024724:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8024728:	4443      	add	r3, r8
 802472a:	109b      	asrs	r3, r3, #2
 802472c:	f240 126d 	movw	r2, #365	; 0x16d
 8024730:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8024734:	fb02 3505 	mla	r5, r2, r5, r3
 8024738:	f06f 0263 	mvn.w	r2, #99	; 0x63
 802473c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8024740:	fb93 f3f2 	sdiv	r3, r3, r2
 8024744:	441d      	add	r5, r3
 8024746:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802474a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 802474e:	fb98 f7f3 	sdiv	r7, r8, r3
 8024752:	fb03 8717 	mls	r7, r3, r7, r8
 8024756:	4442      	add	r2, r8
 8024758:	fab7 fc87 	clz	ip, r7
 802475c:	fb92 f2f3 	sdiv	r2, r2, r3
 8024760:	f008 0303 	and.w	r3, r8, #3
 8024764:	4415      	add	r5, r2
 8024766:	2264      	movs	r2, #100	; 0x64
 8024768:	f8c0 8004 	str.w	r8, [r0, #4]
 802476c:	fb98 f6f2 	sdiv	r6, r8, r2
 8024770:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024774:	fb02 8616 	mls	r6, r2, r6, r8
 8024778:	4604      	mov	r4, r0
 802477a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802477e:	9300      	str	r3, [sp, #0]
 8024780:	f04f 0e07 	mov.w	lr, #7
 8024784:	7a22      	ldrb	r2, [r4, #8]
 8024786:	6963      	ldr	r3, [r4, #20]
 8024788:	2a4a      	cmp	r2, #74	; 0x4a
 802478a:	d128      	bne.n	80247de <__tzcalc_limits+0xce>
 802478c:	9900      	ldr	r1, [sp, #0]
 802478e:	18ea      	adds	r2, r5, r3
 8024790:	b901      	cbnz	r1, 8024794 <__tzcalc_limits+0x84>
 8024792:	b906      	cbnz	r6, 8024796 <__tzcalc_limits+0x86>
 8024794:	bb0f      	cbnz	r7, 80247da <__tzcalc_limits+0xca>
 8024796:	2b3b      	cmp	r3, #59	; 0x3b
 8024798:	bfd4      	ite	le
 802479a:	2300      	movle	r3, #0
 802479c:	2301      	movgt	r3, #1
 802479e:	4413      	add	r3, r2
 80247a0:	1e5a      	subs	r2, r3, #1
 80247a2:	69a3      	ldr	r3, [r4, #24]
 80247a4:	492c      	ldr	r1, [pc, #176]	; (8024858 <__tzcalc_limits+0x148>)
 80247a6:	fb01 3202 	mla	r2, r1, r2, r3
 80247aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80247ac:	4413      	add	r3, r2
 80247ae:	461a      	mov	r2, r3
 80247b0:	17db      	asrs	r3, r3, #31
 80247b2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80247b6:	3428      	adds	r4, #40	; 0x28
 80247b8:	45a3      	cmp	fp, r4
 80247ba:	d1e3      	bne.n	8024784 <__tzcalc_limits+0x74>
 80247bc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80247c0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80247c4:	4294      	cmp	r4, r2
 80247c6:	eb75 0303 	sbcs.w	r3, r5, r3
 80247ca:	bfb4      	ite	lt
 80247cc:	2301      	movlt	r3, #1
 80247ce:	2300      	movge	r3, #0
 80247d0:	6003      	str	r3, [r0, #0]
 80247d2:	2001      	movs	r0, #1
 80247d4:	b003      	add	sp, #12
 80247d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247da:	2300      	movs	r3, #0
 80247dc:	e7df      	b.n	802479e <__tzcalc_limits+0x8e>
 80247de:	2a44      	cmp	r2, #68	; 0x44
 80247e0:	d101      	bne.n	80247e6 <__tzcalc_limits+0xd6>
 80247e2:	18ea      	adds	r2, r5, r3
 80247e4:	e7dd      	b.n	80247a2 <__tzcalc_limits+0x92>
 80247e6:	9a00      	ldr	r2, [sp, #0]
 80247e8:	bb72      	cbnz	r2, 8024848 <__tzcalc_limits+0x138>
 80247ea:	2e00      	cmp	r6, #0
 80247ec:	bf0c      	ite	eq
 80247ee:	46e1      	moveq	r9, ip
 80247f0:	f04f 0901 	movne.w	r9, #1
 80247f4:	2230      	movs	r2, #48	; 0x30
 80247f6:	fb02 f909 	mul.w	r9, r2, r9
 80247fa:	68e2      	ldr	r2, [r4, #12]
 80247fc:	9201      	str	r2, [sp, #4]
 80247fe:	f04f 0800 	mov.w	r8, #0
 8024802:	462a      	mov	r2, r5
 8024804:	f108 0801 	add.w	r8, r8, #1
 8024808:	4914      	ldr	r1, [pc, #80]	; (802485c <__tzcalc_limits+0x14c>)
 802480a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 802480e:	448a      	add	sl, r1
 8024810:	9901      	ldr	r1, [sp, #4]
 8024812:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8024816:	4541      	cmp	r1, r8
 8024818:	dc18      	bgt.n	802484c <__tzcalc_limits+0x13c>
 802481a:	f102 0804 	add.w	r8, r2, #4
 802481e:	fb98 f9fe 	sdiv	r9, r8, lr
 8024822:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8024826:	eba8 0909 	sub.w	r9, r8, r9
 802482a:	ebb3 0909 	subs.w	r9, r3, r9
 802482e:	6923      	ldr	r3, [r4, #16]
 8024830:	f103 33ff 	add.w	r3, r3, #4294967295
 8024834:	bf48      	it	mi
 8024836:	f109 0907 	addmi.w	r9, r9, #7
 802483a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802483e:	444b      	add	r3, r9
 8024840:	4553      	cmp	r3, sl
 8024842:	da05      	bge.n	8024850 <__tzcalc_limits+0x140>
 8024844:	441a      	add	r2, r3
 8024846:	e7ac      	b.n	80247a2 <__tzcalc_limits+0x92>
 8024848:	46e1      	mov	r9, ip
 802484a:	e7d3      	b.n	80247f4 <__tzcalc_limits+0xe4>
 802484c:	4452      	add	r2, sl
 802484e:	e7d9      	b.n	8024804 <__tzcalc_limits+0xf4>
 8024850:	3b07      	subs	r3, #7
 8024852:	e7f5      	b.n	8024840 <__tzcalc_limits+0x130>
 8024854:	2000      	movs	r0, #0
 8024856:	e7bd      	b.n	80247d4 <__tzcalc_limits+0xc4>
 8024858:	00015180 	.word	0x00015180
 802485c:	08033434 	.word	0x08033434

08024860 <__tz_lock>:
 8024860:	4770      	bx	lr

08024862 <__tz_unlock>:
 8024862:	4770      	bx	lr

08024864 <_tzset_unlocked>:
 8024864:	4b01      	ldr	r3, [pc, #4]	; (802486c <_tzset_unlocked+0x8>)
 8024866:	6818      	ldr	r0, [r3, #0]
 8024868:	f000 b802 	b.w	8024870 <_tzset_unlocked_r>
 802486c:	200005e4 	.word	0x200005e4

08024870 <_tzset_unlocked_r>:
 8024870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024874:	b08d      	sub	sp, #52	; 0x34
 8024876:	4607      	mov	r7, r0
 8024878:	f001 fe38 	bl	80264ec <__gettzinfo>
 802487c:	49af      	ldr	r1, [pc, #700]	; (8024b3c <_tzset_unlocked_r+0x2cc>)
 802487e:	4eb0      	ldr	r6, [pc, #704]	; (8024b40 <_tzset_unlocked_r+0x2d0>)
 8024880:	4605      	mov	r5, r0
 8024882:	4638      	mov	r0, r7
 8024884:	f001 fe2a 	bl	80264dc <_getenv_r>
 8024888:	4604      	mov	r4, r0
 802488a:	b970      	cbnz	r0, 80248aa <_tzset_unlocked_r+0x3a>
 802488c:	4bad      	ldr	r3, [pc, #692]	; (8024b44 <_tzset_unlocked_r+0x2d4>)
 802488e:	4aae      	ldr	r2, [pc, #696]	; (8024b48 <_tzset_unlocked_r+0x2d8>)
 8024890:	6018      	str	r0, [r3, #0]
 8024892:	4bae      	ldr	r3, [pc, #696]	; (8024b4c <_tzset_unlocked_r+0x2dc>)
 8024894:	6018      	str	r0, [r3, #0]
 8024896:	4bae      	ldr	r3, [pc, #696]	; (8024b50 <_tzset_unlocked_r+0x2e0>)
 8024898:	6830      	ldr	r0, [r6, #0]
 802489a:	e9c3 2200 	strd	r2, r2, [r3]
 802489e:	f7fd fcf9 	bl	8022294 <free>
 80248a2:	6034      	str	r4, [r6, #0]
 80248a4:	b00d      	add	sp, #52	; 0x34
 80248a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248aa:	6831      	ldr	r1, [r6, #0]
 80248ac:	2900      	cmp	r1, #0
 80248ae:	d15f      	bne.n	8024970 <_tzset_unlocked_r+0x100>
 80248b0:	6830      	ldr	r0, [r6, #0]
 80248b2:	f7fd fcef 	bl	8022294 <free>
 80248b6:	4620      	mov	r0, r4
 80248b8:	f7db fc94 	bl	80001e4 <strlen>
 80248bc:	1c41      	adds	r1, r0, #1
 80248be:	4638      	mov	r0, r7
 80248c0:	f7fe f82e 	bl	8022920 <_malloc_r>
 80248c4:	6030      	str	r0, [r6, #0]
 80248c6:	2800      	cmp	r0, #0
 80248c8:	d157      	bne.n	802497a <_tzset_unlocked_r+0x10a>
 80248ca:	7823      	ldrb	r3, [r4, #0]
 80248cc:	4aa1      	ldr	r2, [pc, #644]	; (8024b54 <_tzset_unlocked_r+0x2e4>)
 80248ce:	49a2      	ldr	r1, [pc, #648]	; (8024b58 <_tzset_unlocked_r+0x2e8>)
 80248d0:	2b3a      	cmp	r3, #58	; 0x3a
 80248d2:	bf08      	it	eq
 80248d4:	3401      	addeq	r4, #1
 80248d6:	ae0a      	add	r6, sp, #40	; 0x28
 80248d8:	4633      	mov	r3, r6
 80248da:	4620      	mov	r0, r4
 80248dc:	f7fe ff36 	bl	802374c <siscanf>
 80248e0:	2800      	cmp	r0, #0
 80248e2:	dddf      	ble.n	80248a4 <_tzset_unlocked_r+0x34>
 80248e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80248e6:	18e7      	adds	r7, r4, r3
 80248e8:	5ce3      	ldrb	r3, [r4, r3]
 80248ea:	2b2d      	cmp	r3, #45	; 0x2d
 80248ec:	d149      	bne.n	8024982 <_tzset_unlocked_r+0x112>
 80248ee:	3701      	adds	r7, #1
 80248f0:	f04f 34ff 	mov.w	r4, #4294967295
 80248f4:	f10d 0a20 	add.w	sl, sp, #32
 80248f8:	f10d 0b1e 	add.w	fp, sp, #30
 80248fc:	f04f 0800 	mov.w	r8, #0
 8024900:	9603      	str	r6, [sp, #12]
 8024902:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8024906:	f8cd b000 	str.w	fp, [sp]
 802490a:	4633      	mov	r3, r6
 802490c:	aa07      	add	r2, sp, #28
 802490e:	4993      	ldr	r1, [pc, #588]	; (8024b5c <_tzset_unlocked_r+0x2ec>)
 8024910:	f8ad 801e 	strh.w	r8, [sp, #30]
 8024914:	4638      	mov	r0, r7
 8024916:	f8ad 8020 	strh.w	r8, [sp, #32]
 802491a:	f7fe ff17 	bl	802374c <siscanf>
 802491e:	4540      	cmp	r0, r8
 8024920:	ddc0      	ble.n	80248a4 <_tzset_unlocked_r+0x34>
 8024922:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024926:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802492a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8024b68 <_tzset_unlocked_r+0x2f8>
 802492e:	213c      	movs	r1, #60	; 0x3c
 8024930:	fb01 2203 	mla	r2, r1, r3, r2
 8024934:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024938:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802493c:	fb01 2303 	mla	r3, r1, r3, r2
 8024940:	435c      	muls	r4, r3
 8024942:	62ac      	str	r4, [r5, #40]	; 0x28
 8024944:	4c82      	ldr	r4, [pc, #520]	; (8024b50 <_tzset_unlocked_r+0x2e0>)
 8024946:	4b83      	ldr	r3, [pc, #524]	; (8024b54 <_tzset_unlocked_r+0x2e4>)
 8024948:	6023      	str	r3, [r4, #0]
 802494a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802494c:	4982      	ldr	r1, [pc, #520]	; (8024b58 <_tzset_unlocked_r+0x2e8>)
 802494e:	441f      	add	r7, r3
 8024950:	464a      	mov	r2, r9
 8024952:	4633      	mov	r3, r6
 8024954:	4638      	mov	r0, r7
 8024956:	f7fe fef9 	bl	802374c <siscanf>
 802495a:	4540      	cmp	r0, r8
 802495c:	dc16      	bgt.n	802498c <_tzset_unlocked_r+0x11c>
 802495e:	6823      	ldr	r3, [r4, #0]
 8024960:	6063      	str	r3, [r4, #4]
 8024962:	4b78      	ldr	r3, [pc, #480]	; (8024b44 <_tzset_unlocked_r+0x2d4>)
 8024964:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8024966:	601a      	str	r2, [r3, #0]
 8024968:	4b78      	ldr	r3, [pc, #480]	; (8024b4c <_tzset_unlocked_r+0x2dc>)
 802496a:	f8c3 8000 	str.w	r8, [r3]
 802496e:	e799      	b.n	80248a4 <_tzset_unlocked_r+0x34>
 8024970:	f7db fc2e 	bl	80001d0 <strcmp>
 8024974:	2800      	cmp	r0, #0
 8024976:	d095      	beq.n	80248a4 <_tzset_unlocked_r+0x34>
 8024978:	e79a      	b.n	80248b0 <_tzset_unlocked_r+0x40>
 802497a:	4621      	mov	r1, r4
 802497c:	f7fe ff62 	bl	8023844 <strcpy>
 8024980:	e7a3      	b.n	80248ca <_tzset_unlocked_r+0x5a>
 8024982:	2b2b      	cmp	r3, #43	; 0x2b
 8024984:	bf08      	it	eq
 8024986:	3701      	addeq	r7, #1
 8024988:	2401      	movs	r4, #1
 802498a:	e7b3      	b.n	80248f4 <_tzset_unlocked_r+0x84>
 802498c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802498e:	f8c4 9004 	str.w	r9, [r4, #4]
 8024992:	18fc      	adds	r4, r7, r3
 8024994:	5cfb      	ldrb	r3, [r7, r3]
 8024996:	2b2d      	cmp	r3, #45	; 0x2d
 8024998:	f040 808b 	bne.w	8024ab2 <_tzset_unlocked_r+0x242>
 802499c:	3401      	adds	r4, #1
 802499e:	f04f 37ff 	mov.w	r7, #4294967295
 80249a2:	2300      	movs	r3, #0
 80249a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80249a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80249ac:	f8ad 3020 	strh.w	r3, [sp, #32]
 80249b0:	930a      	str	r3, [sp, #40]	; 0x28
 80249b2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80249b6:	e9cd b600 	strd	fp, r6, [sp]
 80249ba:	4633      	mov	r3, r6
 80249bc:	aa07      	add	r2, sp, #28
 80249be:	4967      	ldr	r1, [pc, #412]	; (8024b5c <_tzset_unlocked_r+0x2ec>)
 80249c0:	4620      	mov	r0, r4
 80249c2:	f7fe fec3 	bl	802374c <siscanf>
 80249c6:	2800      	cmp	r0, #0
 80249c8:	dc78      	bgt.n	8024abc <_tzset_unlocked_r+0x24c>
 80249ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80249cc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80249d0:	652b      	str	r3, [r5, #80]	; 0x50
 80249d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249d4:	462f      	mov	r7, r5
 80249d6:	441c      	add	r4, r3
 80249d8:	f04f 0900 	mov.w	r9, #0
 80249dc:	7823      	ldrb	r3, [r4, #0]
 80249de:	2b2c      	cmp	r3, #44	; 0x2c
 80249e0:	bf08      	it	eq
 80249e2:	3401      	addeq	r4, #1
 80249e4:	f894 8000 	ldrb.w	r8, [r4]
 80249e8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80249ec:	d179      	bne.n	8024ae2 <_tzset_unlocked_r+0x272>
 80249ee:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80249f2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80249f6:	ab09      	add	r3, sp, #36	; 0x24
 80249f8:	9300      	str	r3, [sp, #0]
 80249fa:	9603      	str	r6, [sp, #12]
 80249fc:	4633      	mov	r3, r6
 80249fe:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8024a02:	4957      	ldr	r1, [pc, #348]	; (8024b60 <_tzset_unlocked_r+0x2f0>)
 8024a04:	4620      	mov	r0, r4
 8024a06:	f7fe fea1 	bl	802374c <siscanf>
 8024a0a:	2803      	cmp	r0, #3
 8024a0c:	f47f af4a 	bne.w	80248a4 <_tzset_unlocked_r+0x34>
 8024a10:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8024a14:	1e4b      	subs	r3, r1, #1
 8024a16:	2b0b      	cmp	r3, #11
 8024a18:	f63f af44 	bhi.w	80248a4 <_tzset_unlocked_r+0x34>
 8024a1c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8024a20:	1e53      	subs	r3, r2, #1
 8024a22:	2b04      	cmp	r3, #4
 8024a24:	f63f af3e 	bhi.w	80248a4 <_tzset_unlocked_r+0x34>
 8024a28:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8024a2c:	2b06      	cmp	r3, #6
 8024a2e:	f63f af39 	bhi.w	80248a4 <_tzset_unlocked_r+0x34>
 8024a32:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8024a36:	f887 8008 	strb.w	r8, [r7, #8]
 8024a3a:	617b      	str	r3, [r7, #20]
 8024a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a3e:	eb04 0803 	add.w	r8, r4, r3
 8024a42:	2302      	movs	r3, #2
 8024a44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024a48:	2300      	movs	r3, #0
 8024a4a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024a4e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024a52:	930a      	str	r3, [sp, #40]	; 0x28
 8024a54:	f898 3000 	ldrb.w	r3, [r8]
 8024a58:	2b2f      	cmp	r3, #47	; 0x2f
 8024a5a:	d109      	bne.n	8024a70 <_tzset_unlocked_r+0x200>
 8024a5c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8024a60:	e9cd b600 	strd	fp, r6, [sp]
 8024a64:	4633      	mov	r3, r6
 8024a66:	aa07      	add	r2, sp, #28
 8024a68:	493e      	ldr	r1, [pc, #248]	; (8024b64 <_tzset_unlocked_r+0x2f4>)
 8024a6a:	4640      	mov	r0, r8
 8024a6c:	f7fe fe6e 	bl	802374c <siscanf>
 8024a70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024a74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024a78:	213c      	movs	r1, #60	; 0x3c
 8024a7a:	fb01 2203 	mla	r2, r1, r3, r2
 8024a7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024a82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024a86:	fb01 2303 	mla	r3, r1, r3, r2
 8024a8a:	61bb      	str	r3, [r7, #24]
 8024a8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a8e:	3728      	adds	r7, #40	; 0x28
 8024a90:	4444      	add	r4, r8
 8024a92:	f1b9 0f00 	cmp.w	r9, #0
 8024a96:	d021      	beq.n	8024adc <_tzset_unlocked_r+0x26c>
 8024a98:	6868      	ldr	r0, [r5, #4]
 8024a9a:	f7ff fe39 	bl	8024710 <__tzcalc_limits>
 8024a9e:	4b29      	ldr	r3, [pc, #164]	; (8024b44 <_tzset_unlocked_r+0x2d4>)
 8024aa0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8024aa2:	601a      	str	r2, [r3, #0]
 8024aa4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8024aa6:	1a9b      	subs	r3, r3, r2
 8024aa8:	4a28      	ldr	r2, [pc, #160]	; (8024b4c <_tzset_unlocked_r+0x2dc>)
 8024aaa:	bf18      	it	ne
 8024aac:	2301      	movne	r3, #1
 8024aae:	6013      	str	r3, [r2, #0]
 8024ab0:	e6f8      	b.n	80248a4 <_tzset_unlocked_r+0x34>
 8024ab2:	2b2b      	cmp	r3, #43	; 0x2b
 8024ab4:	bf08      	it	eq
 8024ab6:	3401      	addeq	r4, #1
 8024ab8:	2701      	movs	r7, #1
 8024aba:	e772      	b.n	80249a2 <_tzset_unlocked_r+0x132>
 8024abc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024ac0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024ac4:	213c      	movs	r1, #60	; 0x3c
 8024ac6:	fb01 2203 	mla	r2, r1, r3, r2
 8024aca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024ace:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024ad2:	fb01 2303 	mla	r3, r1, r3, r2
 8024ad6:	435f      	muls	r7, r3
 8024ad8:	652f      	str	r7, [r5, #80]	; 0x50
 8024ada:	e77a      	b.n	80249d2 <_tzset_unlocked_r+0x162>
 8024adc:	f04f 0901 	mov.w	r9, #1
 8024ae0:	e77c      	b.n	80249dc <_tzset_unlocked_r+0x16c>
 8024ae2:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8024ae6:	bf06      	itte	eq
 8024ae8:	3401      	addeq	r4, #1
 8024aea:	4643      	moveq	r3, r8
 8024aec:	2344      	movne	r3, #68	; 0x44
 8024aee:	220a      	movs	r2, #10
 8024af0:	a90b      	add	r1, sp, #44	; 0x2c
 8024af2:	4620      	mov	r0, r4
 8024af4:	9305      	str	r3, [sp, #20]
 8024af6:	f002 ff21 	bl	802793c <strtoul>
 8024afa:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8024afe:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8024b02:	45a0      	cmp	r8, r4
 8024b04:	9b05      	ldr	r3, [sp, #20]
 8024b06:	d114      	bne.n	8024b32 <_tzset_unlocked_r+0x2c2>
 8024b08:	234d      	movs	r3, #77	; 0x4d
 8024b0a:	f1b9 0f00 	cmp.w	r9, #0
 8024b0e:	d107      	bne.n	8024b20 <_tzset_unlocked_r+0x2b0>
 8024b10:	722b      	strb	r3, [r5, #8]
 8024b12:	2103      	movs	r1, #3
 8024b14:	2302      	movs	r3, #2
 8024b16:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8024b1a:	f8c5 9014 	str.w	r9, [r5, #20]
 8024b1e:	e790      	b.n	8024a42 <_tzset_unlocked_r+0x1d2>
 8024b20:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8024b24:	220b      	movs	r2, #11
 8024b26:	2301      	movs	r3, #1
 8024b28:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8024b2c:	2300      	movs	r3, #0
 8024b2e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024b30:	e787      	b.n	8024a42 <_tzset_unlocked_r+0x1d2>
 8024b32:	b280      	uxth	r0, r0
 8024b34:	723b      	strb	r3, [r7, #8]
 8024b36:	6178      	str	r0, [r7, #20]
 8024b38:	e783      	b.n	8024a42 <_tzset_unlocked_r+0x1d2>
 8024b3a:	bf00      	nop
 8024b3c:	08033288 	.word	0x08033288
 8024b40:	20001164 	.word	0x20001164
 8024b44:	2000116c 	.word	0x2000116c
 8024b48:	0803328b 	.word	0x0803328b
 8024b4c:	20001168 	.word	0x20001168
 8024b50:	200007b4 	.word	0x200007b4
 8024b54:	20001157 	.word	0x20001157
 8024b58:	0803328f 	.word	0x0803328f
 8024b5c:	080332b2 	.word	0x080332b2
 8024b60:	0803329e 	.word	0x0803329e
 8024b64:	080332b1 	.word	0x080332b1
 8024b68:	2000114c 	.word	0x2000114c

08024b6c <_vsniprintf_r>:
 8024b6c:	b530      	push	{r4, r5, lr}
 8024b6e:	1e14      	subs	r4, r2, #0
 8024b70:	4605      	mov	r5, r0
 8024b72:	b09b      	sub	sp, #108	; 0x6c
 8024b74:	4618      	mov	r0, r3
 8024b76:	da05      	bge.n	8024b84 <_vsniprintf_r+0x18>
 8024b78:	238b      	movs	r3, #139	; 0x8b
 8024b7a:	602b      	str	r3, [r5, #0]
 8024b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8024b80:	b01b      	add	sp, #108	; 0x6c
 8024b82:	bd30      	pop	{r4, r5, pc}
 8024b84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024b88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024b8c:	bf14      	ite	ne
 8024b8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024b92:	4623      	moveq	r3, r4
 8024b94:	9302      	str	r3, [sp, #8]
 8024b96:	9305      	str	r3, [sp, #20]
 8024b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024b9c:	9100      	str	r1, [sp, #0]
 8024b9e:	9104      	str	r1, [sp, #16]
 8024ba0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ba4:	4602      	mov	r2, r0
 8024ba6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024ba8:	4669      	mov	r1, sp
 8024baa:	4628      	mov	r0, r5
 8024bac:	f002 f99a 	bl	8026ee4 <_svfiprintf_r>
 8024bb0:	1c43      	adds	r3, r0, #1
 8024bb2:	bfbc      	itt	lt
 8024bb4:	238b      	movlt	r3, #139	; 0x8b
 8024bb6:	602b      	strlt	r3, [r5, #0]
 8024bb8:	2c00      	cmp	r4, #0
 8024bba:	d0e1      	beq.n	8024b80 <_vsniprintf_r+0x14>
 8024bbc:	9b00      	ldr	r3, [sp, #0]
 8024bbe:	2200      	movs	r2, #0
 8024bc0:	701a      	strb	r2, [r3, #0]
 8024bc2:	e7dd      	b.n	8024b80 <_vsniprintf_r+0x14>

08024bc4 <vsniprintf>:
 8024bc4:	b507      	push	{r0, r1, r2, lr}
 8024bc6:	9300      	str	r3, [sp, #0]
 8024bc8:	4613      	mov	r3, r2
 8024bca:	460a      	mov	r2, r1
 8024bcc:	4601      	mov	r1, r0
 8024bce:	4803      	ldr	r0, [pc, #12]	; (8024bdc <vsniprintf+0x18>)
 8024bd0:	6800      	ldr	r0, [r0, #0]
 8024bd2:	f7ff ffcb 	bl	8024b6c <_vsniprintf_r>
 8024bd6:	b003      	add	sp, #12
 8024bd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8024bdc:	200005e4 	.word	0x200005e4

08024be0 <__swbuf_r>:
 8024be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024be2:	460e      	mov	r6, r1
 8024be4:	4614      	mov	r4, r2
 8024be6:	4605      	mov	r5, r0
 8024be8:	b118      	cbz	r0, 8024bf2 <__swbuf_r+0x12>
 8024bea:	6983      	ldr	r3, [r0, #24]
 8024bec:	b90b      	cbnz	r3, 8024bf2 <__swbuf_r+0x12>
 8024bee:	f001 f841 	bl	8025c74 <__sinit>
 8024bf2:	4b21      	ldr	r3, [pc, #132]	; (8024c78 <__swbuf_r+0x98>)
 8024bf4:	429c      	cmp	r4, r3
 8024bf6:	d12a      	bne.n	8024c4e <__swbuf_r+0x6e>
 8024bf8:	686c      	ldr	r4, [r5, #4]
 8024bfa:	69a3      	ldr	r3, [r4, #24]
 8024bfc:	60a3      	str	r3, [r4, #8]
 8024bfe:	89a3      	ldrh	r3, [r4, #12]
 8024c00:	071a      	lsls	r2, r3, #28
 8024c02:	d52e      	bpl.n	8024c62 <__swbuf_r+0x82>
 8024c04:	6923      	ldr	r3, [r4, #16]
 8024c06:	b363      	cbz	r3, 8024c62 <__swbuf_r+0x82>
 8024c08:	6923      	ldr	r3, [r4, #16]
 8024c0a:	6820      	ldr	r0, [r4, #0]
 8024c0c:	1ac0      	subs	r0, r0, r3
 8024c0e:	6963      	ldr	r3, [r4, #20]
 8024c10:	b2f6      	uxtb	r6, r6
 8024c12:	4283      	cmp	r3, r0
 8024c14:	4637      	mov	r7, r6
 8024c16:	dc04      	bgt.n	8024c22 <__swbuf_r+0x42>
 8024c18:	4621      	mov	r1, r4
 8024c1a:	4628      	mov	r0, r5
 8024c1c:	f000 ffae 	bl	8025b7c <_fflush_r>
 8024c20:	bb28      	cbnz	r0, 8024c6e <__swbuf_r+0x8e>
 8024c22:	68a3      	ldr	r3, [r4, #8]
 8024c24:	3b01      	subs	r3, #1
 8024c26:	60a3      	str	r3, [r4, #8]
 8024c28:	6823      	ldr	r3, [r4, #0]
 8024c2a:	1c5a      	adds	r2, r3, #1
 8024c2c:	6022      	str	r2, [r4, #0]
 8024c2e:	701e      	strb	r6, [r3, #0]
 8024c30:	6963      	ldr	r3, [r4, #20]
 8024c32:	3001      	adds	r0, #1
 8024c34:	4283      	cmp	r3, r0
 8024c36:	d004      	beq.n	8024c42 <__swbuf_r+0x62>
 8024c38:	89a3      	ldrh	r3, [r4, #12]
 8024c3a:	07db      	lsls	r3, r3, #31
 8024c3c:	d519      	bpl.n	8024c72 <__swbuf_r+0x92>
 8024c3e:	2e0a      	cmp	r6, #10
 8024c40:	d117      	bne.n	8024c72 <__swbuf_r+0x92>
 8024c42:	4621      	mov	r1, r4
 8024c44:	4628      	mov	r0, r5
 8024c46:	f000 ff99 	bl	8025b7c <_fflush_r>
 8024c4a:	b190      	cbz	r0, 8024c72 <__swbuf_r+0x92>
 8024c4c:	e00f      	b.n	8024c6e <__swbuf_r+0x8e>
 8024c4e:	4b0b      	ldr	r3, [pc, #44]	; (8024c7c <__swbuf_r+0x9c>)
 8024c50:	429c      	cmp	r4, r3
 8024c52:	d101      	bne.n	8024c58 <__swbuf_r+0x78>
 8024c54:	68ac      	ldr	r4, [r5, #8]
 8024c56:	e7d0      	b.n	8024bfa <__swbuf_r+0x1a>
 8024c58:	4b09      	ldr	r3, [pc, #36]	; (8024c80 <__swbuf_r+0xa0>)
 8024c5a:	429c      	cmp	r4, r3
 8024c5c:	bf08      	it	eq
 8024c5e:	68ec      	ldreq	r4, [r5, #12]
 8024c60:	e7cb      	b.n	8024bfa <__swbuf_r+0x1a>
 8024c62:	4621      	mov	r1, r4
 8024c64:	4628      	mov	r0, r5
 8024c66:	f000 f82d 	bl	8024cc4 <__swsetup_r>
 8024c6a:	2800      	cmp	r0, #0
 8024c6c:	d0cc      	beq.n	8024c08 <__swbuf_r+0x28>
 8024c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8024c72:	4638      	mov	r0, r7
 8024c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024c76:	bf00      	nop
 8024c78:	080333f4 	.word	0x080333f4
 8024c7c:	08033414 	.word	0x08033414
 8024c80:	080333d4 	.word	0x080333d4

08024c84 <__ascii_wctomb>:
 8024c84:	b149      	cbz	r1, 8024c9a <__ascii_wctomb+0x16>
 8024c86:	2aff      	cmp	r2, #255	; 0xff
 8024c88:	bf85      	ittet	hi
 8024c8a:	238a      	movhi	r3, #138	; 0x8a
 8024c8c:	6003      	strhi	r3, [r0, #0]
 8024c8e:	700a      	strbls	r2, [r1, #0]
 8024c90:	f04f 30ff 	movhi.w	r0, #4294967295
 8024c94:	bf98      	it	ls
 8024c96:	2001      	movls	r0, #1
 8024c98:	4770      	bx	lr
 8024c9a:	4608      	mov	r0, r1
 8024c9c:	4770      	bx	lr
	...

08024ca0 <_write_r>:
 8024ca0:	b538      	push	{r3, r4, r5, lr}
 8024ca2:	4c07      	ldr	r4, [pc, #28]	; (8024cc0 <_write_r+0x20>)
 8024ca4:	4605      	mov	r5, r0
 8024ca6:	4608      	mov	r0, r1
 8024ca8:	4611      	mov	r1, r2
 8024caa:	2200      	movs	r2, #0
 8024cac:	6022      	str	r2, [r4, #0]
 8024cae:	461a      	mov	r2, r3
 8024cb0:	f7df f9c0 	bl	8004034 <_write>
 8024cb4:	1c43      	adds	r3, r0, #1
 8024cb6:	d102      	bne.n	8024cbe <_write_r+0x1e>
 8024cb8:	6823      	ldr	r3, [r4, #0]
 8024cba:	b103      	cbz	r3, 8024cbe <_write_r+0x1e>
 8024cbc:	602b      	str	r3, [r5, #0]
 8024cbe:	bd38      	pop	{r3, r4, r5, pc}
 8024cc0:	200019d8 	.word	0x200019d8

08024cc4 <__swsetup_r>:
 8024cc4:	4b32      	ldr	r3, [pc, #200]	; (8024d90 <__swsetup_r+0xcc>)
 8024cc6:	b570      	push	{r4, r5, r6, lr}
 8024cc8:	681d      	ldr	r5, [r3, #0]
 8024cca:	4606      	mov	r6, r0
 8024ccc:	460c      	mov	r4, r1
 8024cce:	b125      	cbz	r5, 8024cda <__swsetup_r+0x16>
 8024cd0:	69ab      	ldr	r3, [r5, #24]
 8024cd2:	b913      	cbnz	r3, 8024cda <__swsetup_r+0x16>
 8024cd4:	4628      	mov	r0, r5
 8024cd6:	f000 ffcd 	bl	8025c74 <__sinit>
 8024cda:	4b2e      	ldr	r3, [pc, #184]	; (8024d94 <__swsetup_r+0xd0>)
 8024cdc:	429c      	cmp	r4, r3
 8024cde:	d10f      	bne.n	8024d00 <__swsetup_r+0x3c>
 8024ce0:	686c      	ldr	r4, [r5, #4]
 8024ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ce6:	b29a      	uxth	r2, r3
 8024ce8:	0715      	lsls	r5, r2, #28
 8024cea:	d42c      	bmi.n	8024d46 <__swsetup_r+0x82>
 8024cec:	06d0      	lsls	r0, r2, #27
 8024cee:	d411      	bmi.n	8024d14 <__swsetup_r+0x50>
 8024cf0:	2209      	movs	r2, #9
 8024cf2:	6032      	str	r2, [r6, #0]
 8024cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024cf8:	81a3      	strh	r3, [r4, #12]
 8024cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8024cfe:	e03e      	b.n	8024d7e <__swsetup_r+0xba>
 8024d00:	4b25      	ldr	r3, [pc, #148]	; (8024d98 <__swsetup_r+0xd4>)
 8024d02:	429c      	cmp	r4, r3
 8024d04:	d101      	bne.n	8024d0a <__swsetup_r+0x46>
 8024d06:	68ac      	ldr	r4, [r5, #8]
 8024d08:	e7eb      	b.n	8024ce2 <__swsetup_r+0x1e>
 8024d0a:	4b24      	ldr	r3, [pc, #144]	; (8024d9c <__swsetup_r+0xd8>)
 8024d0c:	429c      	cmp	r4, r3
 8024d0e:	bf08      	it	eq
 8024d10:	68ec      	ldreq	r4, [r5, #12]
 8024d12:	e7e6      	b.n	8024ce2 <__swsetup_r+0x1e>
 8024d14:	0751      	lsls	r1, r2, #29
 8024d16:	d512      	bpl.n	8024d3e <__swsetup_r+0x7a>
 8024d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024d1a:	b141      	cbz	r1, 8024d2e <__swsetup_r+0x6a>
 8024d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024d20:	4299      	cmp	r1, r3
 8024d22:	d002      	beq.n	8024d2a <__swsetup_r+0x66>
 8024d24:	4630      	mov	r0, r6
 8024d26:	f7fd fdad 	bl	8022884 <_free_r>
 8024d2a:	2300      	movs	r3, #0
 8024d2c:	6363      	str	r3, [r4, #52]	; 0x34
 8024d2e:	89a3      	ldrh	r3, [r4, #12]
 8024d30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024d34:	81a3      	strh	r3, [r4, #12]
 8024d36:	2300      	movs	r3, #0
 8024d38:	6063      	str	r3, [r4, #4]
 8024d3a:	6923      	ldr	r3, [r4, #16]
 8024d3c:	6023      	str	r3, [r4, #0]
 8024d3e:	89a3      	ldrh	r3, [r4, #12]
 8024d40:	f043 0308 	orr.w	r3, r3, #8
 8024d44:	81a3      	strh	r3, [r4, #12]
 8024d46:	6923      	ldr	r3, [r4, #16]
 8024d48:	b94b      	cbnz	r3, 8024d5e <__swsetup_r+0x9a>
 8024d4a:	89a3      	ldrh	r3, [r4, #12]
 8024d4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024d54:	d003      	beq.n	8024d5e <__swsetup_r+0x9a>
 8024d56:	4621      	mov	r1, r4
 8024d58:	4630      	mov	r0, r6
 8024d5a:	f001 fc01 	bl	8026560 <__smakebuf_r>
 8024d5e:	89a2      	ldrh	r2, [r4, #12]
 8024d60:	f012 0301 	ands.w	r3, r2, #1
 8024d64:	d00c      	beq.n	8024d80 <__swsetup_r+0xbc>
 8024d66:	2300      	movs	r3, #0
 8024d68:	60a3      	str	r3, [r4, #8]
 8024d6a:	6963      	ldr	r3, [r4, #20]
 8024d6c:	425b      	negs	r3, r3
 8024d6e:	61a3      	str	r3, [r4, #24]
 8024d70:	6923      	ldr	r3, [r4, #16]
 8024d72:	b953      	cbnz	r3, 8024d8a <__swsetup_r+0xc6>
 8024d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024d78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8024d7c:	d1ba      	bne.n	8024cf4 <__swsetup_r+0x30>
 8024d7e:	bd70      	pop	{r4, r5, r6, pc}
 8024d80:	0792      	lsls	r2, r2, #30
 8024d82:	bf58      	it	pl
 8024d84:	6963      	ldrpl	r3, [r4, #20]
 8024d86:	60a3      	str	r3, [r4, #8]
 8024d88:	e7f2      	b.n	8024d70 <__swsetup_r+0xac>
 8024d8a:	2000      	movs	r0, #0
 8024d8c:	e7f7      	b.n	8024d7e <__swsetup_r+0xba>
 8024d8e:	bf00      	nop
 8024d90:	200005e4 	.word	0x200005e4
 8024d94:	080333f4 	.word	0x080333f4
 8024d98:	08033414 	.word	0x08033414
 8024d9c:	080333d4 	.word	0x080333d4

08024da0 <_close_r>:
 8024da0:	b538      	push	{r3, r4, r5, lr}
 8024da2:	4c06      	ldr	r4, [pc, #24]	; (8024dbc <_close_r+0x1c>)
 8024da4:	2300      	movs	r3, #0
 8024da6:	4605      	mov	r5, r0
 8024da8:	4608      	mov	r0, r1
 8024daa:	6023      	str	r3, [r4, #0]
 8024dac:	f7df f96a 	bl	8004084 <_close>
 8024db0:	1c43      	adds	r3, r0, #1
 8024db2:	d102      	bne.n	8024dba <_close_r+0x1a>
 8024db4:	6823      	ldr	r3, [r4, #0]
 8024db6:	b103      	cbz	r3, 8024dba <_close_r+0x1a>
 8024db8:	602b      	str	r3, [r5, #0]
 8024dba:	bd38      	pop	{r3, r4, r5, pc}
 8024dbc:	200019d8 	.word	0x200019d8

08024dc0 <div>:
 8024dc0:	2900      	cmp	r1, #0
 8024dc2:	b510      	push	{r4, lr}
 8024dc4:	fb91 f4f2 	sdiv	r4, r1, r2
 8024dc8:	fb02 1314 	mls	r3, r2, r4, r1
 8024dcc:	db06      	blt.n	8024ddc <div+0x1c>
 8024dce:	2b00      	cmp	r3, #0
 8024dd0:	da01      	bge.n	8024dd6 <div+0x16>
 8024dd2:	3401      	adds	r4, #1
 8024dd4:	1a9b      	subs	r3, r3, r2
 8024dd6:	e9c0 4300 	strd	r4, r3, [r0]
 8024dda:	bd10      	pop	{r4, pc}
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	bfc4      	itt	gt
 8024de0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8024de4:	189b      	addgt	r3, r3, r2
 8024de6:	e7f6      	b.n	8024dd6 <div+0x16>

08024de8 <quorem>:
 8024de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dec:	6903      	ldr	r3, [r0, #16]
 8024dee:	690c      	ldr	r4, [r1, #16]
 8024df0:	42a3      	cmp	r3, r4
 8024df2:	4680      	mov	r8, r0
 8024df4:	f2c0 8082 	blt.w	8024efc <quorem+0x114>
 8024df8:	3c01      	subs	r4, #1
 8024dfa:	f101 0714 	add.w	r7, r1, #20
 8024dfe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8024e02:	f100 0614 	add.w	r6, r0, #20
 8024e06:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8024e0a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8024e0e:	eb06 030c 	add.w	r3, r6, ip
 8024e12:	3501      	adds	r5, #1
 8024e14:	eb07 090c 	add.w	r9, r7, ip
 8024e18:	9301      	str	r3, [sp, #4]
 8024e1a:	fbb0 f5f5 	udiv	r5, r0, r5
 8024e1e:	b395      	cbz	r5, 8024e86 <quorem+0x9e>
 8024e20:	f04f 0a00 	mov.w	sl, #0
 8024e24:	4638      	mov	r0, r7
 8024e26:	46b6      	mov	lr, r6
 8024e28:	46d3      	mov	fp, sl
 8024e2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8024e2e:	b293      	uxth	r3, r2
 8024e30:	fb05 a303 	mla	r3, r5, r3, sl
 8024e34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8024e38:	b29b      	uxth	r3, r3
 8024e3a:	ebab 0303 	sub.w	r3, fp, r3
 8024e3e:	0c12      	lsrs	r2, r2, #16
 8024e40:	f8de b000 	ldr.w	fp, [lr]
 8024e44:	fb05 a202 	mla	r2, r5, r2, sl
 8024e48:	fa13 f38b 	uxtah	r3, r3, fp
 8024e4c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8024e50:	fa1f fb82 	uxth.w	fp, r2
 8024e54:	f8de 2000 	ldr.w	r2, [lr]
 8024e58:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8024e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024e60:	b29b      	uxth	r3, r3
 8024e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024e66:	4581      	cmp	r9, r0
 8024e68:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8024e6c:	f84e 3b04 	str.w	r3, [lr], #4
 8024e70:	d2db      	bcs.n	8024e2a <quorem+0x42>
 8024e72:	f856 300c 	ldr.w	r3, [r6, ip]
 8024e76:	b933      	cbnz	r3, 8024e86 <quorem+0x9e>
 8024e78:	9b01      	ldr	r3, [sp, #4]
 8024e7a:	3b04      	subs	r3, #4
 8024e7c:	429e      	cmp	r6, r3
 8024e7e:	461a      	mov	r2, r3
 8024e80:	d330      	bcc.n	8024ee4 <quorem+0xfc>
 8024e82:	f8c8 4010 	str.w	r4, [r8, #16]
 8024e86:	4640      	mov	r0, r8
 8024e88:	f001 fe00 	bl	8026a8c <__mcmp>
 8024e8c:	2800      	cmp	r0, #0
 8024e8e:	db25      	blt.n	8024edc <quorem+0xf4>
 8024e90:	3501      	adds	r5, #1
 8024e92:	4630      	mov	r0, r6
 8024e94:	f04f 0c00 	mov.w	ip, #0
 8024e98:	f857 2b04 	ldr.w	r2, [r7], #4
 8024e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8024ea0:	b293      	uxth	r3, r2
 8024ea2:	ebac 0303 	sub.w	r3, ip, r3
 8024ea6:	0c12      	lsrs	r2, r2, #16
 8024ea8:	fa13 f38e 	uxtah	r3, r3, lr
 8024eac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8024eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024eb4:	b29b      	uxth	r3, r3
 8024eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024eba:	45b9      	cmp	r9, r7
 8024ebc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8024ec0:	f840 3b04 	str.w	r3, [r0], #4
 8024ec4:	d2e8      	bcs.n	8024e98 <quorem+0xb0>
 8024ec6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8024eca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8024ece:	b92a      	cbnz	r2, 8024edc <quorem+0xf4>
 8024ed0:	3b04      	subs	r3, #4
 8024ed2:	429e      	cmp	r6, r3
 8024ed4:	461a      	mov	r2, r3
 8024ed6:	d30b      	bcc.n	8024ef0 <quorem+0x108>
 8024ed8:	f8c8 4010 	str.w	r4, [r8, #16]
 8024edc:	4628      	mov	r0, r5
 8024ede:	b003      	add	sp, #12
 8024ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ee4:	6812      	ldr	r2, [r2, #0]
 8024ee6:	3b04      	subs	r3, #4
 8024ee8:	2a00      	cmp	r2, #0
 8024eea:	d1ca      	bne.n	8024e82 <quorem+0x9a>
 8024eec:	3c01      	subs	r4, #1
 8024eee:	e7c5      	b.n	8024e7c <quorem+0x94>
 8024ef0:	6812      	ldr	r2, [r2, #0]
 8024ef2:	3b04      	subs	r3, #4
 8024ef4:	2a00      	cmp	r2, #0
 8024ef6:	d1ef      	bne.n	8024ed8 <quorem+0xf0>
 8024ef8:	3c01      	subs	r4, #1
 8024efa:	e7ea      	b.n	8024ed2 <quorem+0xea>
 8024efc:	2000      	movs	r0, #0
 8024efe:	e7ee      	b.n	8024ede <quorem+0xf6>

08024f00 <_dtoa_r>:
 8024f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f04:	ec57 6b10 	vmov	r6, r7, d0
 8024f08:	b097      	sub	sp, #92	; 0x5c
 8024f0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8024f0c:	9106      	str	r1, [sp, #24]
 8024f0e:	4604      	mov	r4, r0
 8024f10:	920b      	str	r2, [sp, #44]	; 0x2c
 8024f12:	9312      	str	r3, [sp, #72]	; 0x48
 8024f14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8024f18:	e9cd 6700 	strd	r6, r7, [sp]
 8024f1c:	b93d      	cbnz	r5, 8024f2e <_dtoa_r+0x2e>
 8024f1e:	2010      	movs	r0, #16
 8024f20:	f7fd f9b0 	bl	8022284 <malloc>
 8024f24:	6260      	str	r0, [r4, #36]	; 0x24
 8024f26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8024f2a:	6005      	str	r5, [r0, #0]
 8024f2c:	60c5      	str	r5, [r0, #12]
 8024f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024f30:	6819      	ldr	r1, [r3, #0]
 8024f32:	b151      	cbz	r1, 8024f4a <_dtoa_r+0x4a>
 8024f34:	685a      	ldr	r2, [r3, #4]
 8024f36:	604a      	str	r2, [r1, #4]
 8024f38:	2301      	movs	r3, #1
 8024f3a:	4093      	lsls	r3, r2
 8024f3c:	608b      	str	r3, [r1, #8]
 8024f3e:	4620      	mov	r0, r4
 8024f40:	f001 fb84 	bl	802664c <_Bfree>
 8024f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024f46:	2200      	movs	r2, #0
 8024f48:	601a      	str	r2, [r3, #0]
 8024f4a:	1e3b      	subs	r3, r7, #0
 8024f4c:	bfbb      	ittet	lt
 8024f4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8024f52:	9301      	strlt	r3, [sp, #4]
 8024f54:	2300      	movge	r3, #0
 8024f56:	2201      	movlt	r2, #1
 8024f58:	bfac      	ite	ge
 8024f5a:	f8c8 3000 	strge.w	r3, [r8]
 8024f5e:	f8c8 2000 	strlt.w	r2, [r8]
 8024f62:	4baf      	ldr	r3, [pc, #700]	; (8025220 <_dtoa_r+0x320>)
 8024f64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8024f68:	ea33 0308 	bics.w	r3, r3, r8
 8024f6c:	d114      	bne.n	8024f98 <_dtoa_r+0x98>
 8024f6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024f70:	f242 730f 	movw	r3, #9999	; 0x270f
 8024f74:	6013      	str	r3, [r2, #0]
 8024f76:	9b00      	ldr	r3, [sp, #0]
 8024f78:	b923      	cbnz	r3, 8024f84 <_dtoa_r+0x84>
 8024f7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8024f7e:	2800      	cmp	r0, #0
 8024f80:	f000 8542 	beq.w	8025a08 <_dtoa_r+0xb08>
 8024f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024f86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8025234 <_dtoa_r+0x334>
 8024f8a:	2b00      	cmp	r3, #0
 8024f8c:	f000 8544 	beq.w	8025a18 <_dtoa_r+0xb18>
 8024f90:	f10b 0303 	add.w	r3, fp, #3
 8024f94:	f000 bd3e 	b.w	8025a14 <_dtoa_r+0xb14>
 8024f98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8024f9c:	2200      	movs	r2, #0
 8024f9e:	2300      	movs	r3, #0
 8024fa0:	4630      	mov	r0, r6
 8024fa2:	4639      	mov	r1, r7
 8024fa4:	f7db fda0 	bl	8000ae8 <__aeabi_dcmpeq>
 8024fa8:	4681      	mov	r9, r0
 8024faa:	b168      	cbz	r0, 8024fc8 <_dtoa_r+0xc8>
 8024fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024fae:	2301      	movs	r3, #1
 8024fb0:	6013      	str	r3, [r2, #0]
 8024fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	f000 8524 	beq.w	8025a02 <_dtoa_r+0xb02>
 8024fba:	4b9a      	ldr	r3, [pc, #616]	; (8025224 <_dtoa_r+0x324>)
 8024fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024fbe:	f103 3bff 	add.w	fp, r3, #4294967295
 8024fc2:	6013      	str	r3, [r2, #0]
 8024fc4:	f000 bd28 	b.w	8025a18 <_dtoa_r+0xb18>
 8024fc8:	aa14      	add	r2, sp, #80	; 0x50
 8024fca:	a915      	add	r1, sp, #84	; 0x54
 8024fcc:	ec47 6b10 	vmov	d0, r6, r7
 8024fd0:	4620      	mov	r0, r4
 8024fd2:	f001 fe49 	bl	8026c68 <__d2b>
 8024fd6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8024fda:	9004      	str	r0, [sp, #16]
 8024fdc:	2d00      	cmp	r5, #0
 8024fde:	d07c      	beq.n	80250da <_dtoa_r+0x1da>
 8024fe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8024fe4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8024fe8:	46b2      	mov	sl, r6
 8024fea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8024fee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8024ff2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8024ff6:	2200      	movs	r2, #0
 8024ff8:	4b8b      	ldr	r3, [pc, #556]	; (8025228 <_dtoa_r+0x328>)
 8024ffa:	4650      	mov	r0, sl
 8024ffc:	4659      	mov	r1, fp
 8024ffe:	f7db f953 	bl	80002a8 <__aeabi_dsub>
 8025002:	a381      	add	r3, pc, #516	; (adr r3, 8025208 <_dtoa_r+0x308>)
 8025004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025008:	f7db fb06 	bl	8000618 <__aeabi_dmul>
 802500c:	a380      	add	r3, pc, #512	; (adr r3, 8025210 <_dtoa_r+0x310>)
 802500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025012:	f7db f94b 	bl	80002ac <__adddf3>
 8025016:	4606      	mov	r6, r0
 8025018:	4628      	mov	r0, r5
 802501a:	460f      	mov	r7, r1
 802501c:	f7db fa92 	bl	8000544 <__aeabi_i2d>
 8025020:	a37d      	add	r3, pc, #500	; (adr r3, 8025218 <_dtoa_r+0x318>)
 8025022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025026:	f7db faf7 	bl	8000618 <__aeabi_dmul>
 802502a:	4602      	mov	r2, r0
 802502c:	460b      	mov	r3, r1
 802502e:	4630      	mov	r0, r6
 8025030:	4639      	mov	r1, r7
 8025032:	f7db f93b 	bl	80002ac <__adddf3>
 8025036:	4606      	mov	r6, r0
 8025038:	460f      	mov	r7, r1
 802503a:	f7db fd9d 	bl	8000b78 <__aeabi_d2iz>
 802503e:	2200      	movs	r2, #0
 8025040:	4682      	mov	sl, r0
 8025042:	2300      	movs	r3, #0
 8025044:	4630      	mov	r0, r6
 8025046:	4639      	mov	r1, r7
 8025048:	f7db fd58 	bl	8000afc <__aeabi_dcmplt>
 802504c:	b148      	cbz	r0, 8025062 <_dtoa_r+0x162>
 802504e:	4650      	mov	r0, sl
 8025050:	f7db fa78 	bl	8000544 <__aeabi_i2d>
 8025054:	4632      	mov	r2, r6
 8025056:	463b      	mov	r3, r7
 8025058:	f7db fd46 	bl	8000ae8 <__aeabi_dcmpeq>
 802505c:	b908      	cbnz	r0, 8025062 <_dtoa_r+0x162>
 802505e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025062:	f1ba 0f16 	cmp.w	sl, #22
 8025066:	d859      	bhi.n	802511c <_dtoa_r+0x21c>
 8025068:	4970      	ldr	r1, [pc, #448]	; (802522c <_dtoa_r+0x32c>)
 802506a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802506e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025076:	f7db fd5f 	bl	8000b38 <__aeabi_dcmpgt>
 802507a:	2800      	cmp	r0, #0
 802507c:	d050      	beq.n	8025120 <_dtoa_r+0x220>
 802507e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025082:	2300      	movs	r3, #0
 8025084:	930f      	str	r3, [sp, #60]	; 0x3c
 8025086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025088:	1b5d      	subs	r5, r3, r5
 802508a:	f1b5 0801 	subs.w	r8, r5, #1
 802508e:	bf49      	itett	mi
 8025090:	f1c5 0301 	rsbmi	r3, r5, #1
 8025094:	2300      	movpl	r3, #0
 8025096:	9305      	strmi	r3, [sp, #20]
 8025098:	f04f 0800 	movmi.w	r8, #0
 802509c:	bf58      	it	pl
 802509e:	9305      	strpl	r3, [sp, #20]
 80250a0:	f1ba 0f00 	cmp.w	sl, #0
 80250a4:	db3e      	blt.n	8025124 <_dtoa_r+0x224>
 80250a6:	2300      	movs	r3, #0
 80250a8:	44d0      	add	r8, sl
 80250aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80250ae:	9307      	str	r3, [sp, #28]
 80250b0:	9b06      	ldr	r3, [sp, #24]
 80250b2:	2b09      	cmp	r3, #9
 80250b4:	f200 8090 	bhi.w	80251d8 <_dtoa_r+0x2d8>
 80250b8:	2b05      	cmp	r3, #5
 80250ba:	bfc4      	itt	gt
 80250bc:	3b04      	subgt	r3, #4
 80250be:	9306      	strgt	r3, [sp, #24]
 80250c0:	9b06      	ldr	r3, [sp, #24]
 80250c2:	f1a3 0302 	sub.w	r3, r3, #2
 80250c6:	bfcc      	ite	gt
 80250c8:	2500      	movgt	r5, #0
 80250ca:	2501      	movle	r5, #1
 80250cc:	2b03      	cmp	r3, #3
 80250ce:	f200 808f 	bhi.w	80251f0 <_dtoa_r+0x2f0>
 80250d2:	e8df f003 	tbb	[pc, r3]
 80250d6:	7f7d      	.short	0x7f7d
 80250d8:	7131      	.short	0x7131
 80250da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80250de:	441d      	add	r5, r3
 80250e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80250e4:	2820      	cmp	r0, #32
 80250e6:	dd13      	ble.n	8025110 <_dtoa_r+0x210>
 80250e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80250ec:	9b00      	ldr	r3, [sp, #0]
 80250ee:	fa08 f800 	lsl.w	r8, r8, r0
 80250f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80250f6:	fa23 f000 	lsr.w	r0, r3, r0
 80250fa:	ea48 0000 	orr.w	r0, r8, r0
 80250fe:	f7db fa11 	bl	8000524 <__aeabi_ui2d>
 8025102:	2301      	movs	r3, #1
 8025104:	4682      	mov	sl, r0
 8025106:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802510a:	3d01      	subs	r5, #1
 802510c:	9313      	str	r3, [sp, #76]	; 0x4c
 802510e:	e772      	b.n	8024ff6 <_dtoa_r+0xf6>
 8025110:	9b00      	ldr	r3, [sp, #0]
 8025112:	f1c0 0020 	rsb	r0, r0, #32
 8025116:	fa03 f000 	lsl.w	r0, r3, r0
 802511a:	e7f0      	b.n	80250fe <_dtoa_r+0x1fe>
 802511c:	2301      	movs	r3, #1
 802511e:	e7b1      	b.n	8025084 <_dtoa_r+0x184>
 8025120:	900f      	str	r0, [sp, #60]	; 0x3c
 8025122:	e7b0      	b.n	8025086 <_dtoa_r+0x186>
 8025124:	9b05      	ldr	r3, [sp, #20]
 8025126:	eba3 030a 	sub.w	r3, r3, sl
 802512a:	9305      	str	r3, [sp, #20]
 802512c:	f1ca 0300 	rsb	r3, sl, #0
 8025130:	9307      	str	r3, [sp, #28]
 8025132:	2300      	movs	r3, #0
 8025134:	930e      	str	r3, [sp, #56]	; 0x38
 8025136:	e7bb      	b.n	80250b0 <_dtoa_r+0x1b0>
 8025138:	2301      	movs	r3, #1
 802513a:	930a      	str	r3, [sp, #40]	; 0x28
 802513c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802513e:	2b00      	cmp	r3, #0
 8025140:	dd59      	ble.n	80251f6 <_dtoa_r+0x2f6>
 8025142:	9302      	str	r3, [sp, #8]
 8025144:	4699      	mov	r9, r3
 8025146:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8025148:	2200      	movs	r2, #0
 802514a:	6072      	str	r2, [r6, #4]
 802514c:	2204      	movs	r2, #4
 802514e:	f102 0014 	add.w	r0, r2, #20
 8025152:	4298      	cmp	r0, r3
 8025154:	6871      	ldr	r1, [r6, #4]
 8025156:	d953      	bls.n	8025200 <_dtoa_r+0x300>
 8025158:	4620      	mov	r0, r4
 802515a:	f001 fa43 	bl	80265e4 <_Balloc>
 802515e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025160:	6030      	str	r0, [r6, #0]
 8025162:	f1b9 0f0e 	cmp.w	r9, #14
 8025166:	f8d3 b000 	ldr.w	fp, [r3]
 802516a:	f200 80e6 	bhi.w	802533a <_dtoa_r+0x43a>
 802516e:	2d00      	cmp	r5, #0
 8025170:	f000 80e3 	beq.w	802533a <_dtoa_r+0x43a>
 8025174:	ed9d 7b00 	vldr	d7, [sp]
 8025178:	f1ba 0f00 	cmp.w	sl, #0
 802517c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8025180:	dd74      	ble.n	802526c <_dtoa_r+0x36c>
 8025182:	4a2a      	ldr	r2, [pc, #168]	; (802522c <_dtoa_r+0x32c>)
 8025184:	f00a 030f 	and.w	r3, sl, #15
 8025188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802518c:	ed93 7b00 	vldr	d7, [r3]
 8025190:	ea4f 162a 	mov.w	r6, sl, asr #4
 8025194:	06f0      	lsls	r0, r6, #27
 8025196:	ed8d 7b08 	vstr	d7, [sp, #32]
 802519a:	d565      	bpl.n	8025268 <_dtoa_r+0x368>
 802519c:	4b24      	ldr	r3, [pc, #144]	; (8025230 <_dtoa_r+0x330>)
 802519e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80251a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80251a6:	f7db fb61 	bl	800086c <__aeabi_ddiv>
 80251aa:	e9cd 0100 	strd	r0, r1, [sp]
 80251ae:	f006 060f 	and.w	r6, r6, #15
 80251b2:	2503      	movs	r5, #3
 80251b4:	4f1e      	ldr	r7, [pc, #120]	; (8025230 <_dtoa_r+0x330>)
 80251b6:	e04c      	b.n	8025252 <_dtoa_r+0x352>
 80251b8:	2301      	movs	r3, #1
 80251ba:	930a      	str	r3, [sp, #40]	; 0x28
 80251bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251be:	4453      	add	r3, sl
 80251c0:	f103 0901 	add.w	r9, r3, #1
 80251c4:	9302      	str	r3, [sp, #8]
 80251c6:	464b      	mov	r3, r9
 80251c8:	2b01      	cmp	r3, #1
 80251ca:	bfb8      	it	lt
 80251cc:	2301      	movlt	r3, #1
 80251ce:	e7ba      	b.n	8025146 <_dtoa_r+0x246>
 80251d0:	2300      	movs	r3, #0
 80251d2:	e7b2      	b.n	802513a <_dtoa_r+0x23a>
 80251d4:	2300      	movs	r3, #0
 80251d6:	e7f0      	b.n	80251ba <_dtoa_r+0x2ba>
 80251d8:	2501      	movs	r5, #1
 80251da:	2300      	movs	r3, #0
 80251dc:	9306      	str	r3, [sp, #24]
 80251de:	950a      	str	r5, [sp, #40]	; 0x28
 80251e0:	f04f 33ff 	mov.w	r3, #4294967295
 80251e4:	9302      	str	r3, [sp, #8]
 80251e6:	4699      	mov	r9, r3
 80251e8:	2200      	movs	r2, #0
 80251ea:	2312      	movs	r3, #18
 80251ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80251ee:	e7aa      	b.n	8025146 <_dtoa_r+0x246>
 80251f0:	2301      	movs	r3, #1
 80251f2:	930a      	str	r3, [sp, #40]	; 0x28
 80251f4:	e7f4      	b.n	80251e0 <_dtoa_r+0x2e0>
 80251f6:	2301      	movs	r3, #1
 80251f8:	9302      	str	r3, [sp, #8]
 80251fa:	4699      	mov	r9, r3
 80251fc:	461a      	mov	r2, r3
 80251fe:	e7f5      	b.n	80251ec <_dtoa_r+0x2ec>
 8025200:	3101      	adds	r1, #1
 8025202:	6071      	str	r1, [r6, #4]
 8025204:	0052      	lsls	r2, r2, #1
 8025206:	e7a2      	b.n	802514e <_dtoa_r+0x24e>
 8025208:	636f4361 	.word	0x636f4361
 802520c:	3fd287a7 	.word	0x3fd287a7
 8025210:	8b60c8b3 	.word	0x8b60c8b3
 8025214:	3fc68a28 	.word	0x3fc68a28
 8025218:	509f79fb 	.word	0x509f79fb
 802521c:	3fd34413 	.word	0x3fd34413
 8025220:	7ff00000 	.word	0x7ff00000
 8025224:	0803217e 	.word	0x0803217e
 8025228:	3ff80000 	.word	0x3ff80000
 802522c:	080334c0 	.word	0x080334c0
 8025230:	08033498 	.word	0x08033498
 8025234:	080333ce 	.word	0x080333ce
 8025238:	07f1      	lsls	r1, r6, #31
 802523a:	d508      	bpl.n	802524e <_dtoa_r+0x34e>
 802523c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8025240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025244:	f7db f9e8 	bl	8000618 <__aeabi_dmul>
 8025248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802524c:	3501      	adds	r5, #1
 802524e:	1076      	asrs	r6, r6, #1
 8025250:	3708      	adds	r7, #8
 8025252:	2e00      	cmp	r6, #0
 8025254:	d1f0      	bne.n	8025238 <_dtoa_r+0x338>
 8025256:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802525a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802525e:	f7db fb05 	bl	800086c <__aeabi_ddiv>
 8025262:	e9cd 0100 	strd	r0, r1, [sp]
 8025266:	e01a      	b.n	802529e <_dtoa_r+0x39e>
 8025268:	2502      	movs	r5, #2
 802526a:	e7a3      	b.n	80251b4 <_dtoa_r+0x2b4>
 802526c:	f000 80a0 	beq.w	80253b0 <_dtoa_r+0x4b0>
 8025270:	f1ca 0600 	rsb	r6, sl, #0
 8025274:	4b9f      	ldr	r3, [pc, #636]	; (80254f4 <_dtoa_r+0x5f4>)
 8025276:	4fa0      	ldr	r7, [pc, #640]	; (80254f8 <_dtoa_r+0x5f8>)
 8025278:	f006 020f 	and.w	r2, r6, #15
 802527c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025284:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8025288:	f7db f9c6 	bl	8000618 <__aeabi_dmul>
 802528c:	e9cd 0100 	strd	r0, r1, [sp]
 8025290:	1136      	asrs	r6, r6, #4
 8025292:	2300      	movs	r3, #0
 8025294:	2502      	movs	r5, #2
 8025296:	2e00      	cmp	r6, #0
 8025298:	d17f      	bne.n	802539a <_dtoa_r+0x49a>
 802529a:	2b00      	cmp	r3, #0
 802529c:	d1e1      	bne.n	8025262 <_dtoa_r+0x362>
 802529e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	f000 8087 	beq.w	80253b4 <_dtoa_r+0x4b4>
 80252a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80252aa:	2200      	movs	r2, #0
 80252ac:	4b93      	ldr	r3, [pc, #588]	; (80254fc <_dtoa_r+0x5fc>)
 80252ae:	4630      	mov	r0, r6
 80252b0:	4639      	mov	r1, r7
 80252b2:	f7db fc23 	bl	8000afc <__aeabi_dcmplt>
 80252b6:	2800      	cmp	r0, #0
 80252b8:	d07c      	beq.n	80253b4 <_dtoa_r+0x4b4>
 80252ba:	f1b9 0f00 	cmp.w	r9, #0
 80252be:	d079      	beq.n	80253b4 <_dtoa_r+0x4b4>
 80252c0:	9b02      	ldr	r3, [sp, #8]
 80252c2:	2b00      	cmp	r3, #0
 80252c4:	dd35      	ble.n	8025332 <_dtoa_r+0x432>
 80252c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80252ca:	9308      	str	r3, [sp, #32]
 80252cc:	4639      	mov	r1, r7
 80252ce:	2200      	movs	r2, #0
 80252d0:	4b8b      	ldr	r3, [pc, #556]	; (8025500 <_dtoa_r+0x600>)
 80252d2:	4630      	mov	r0, r6
 80252d4:	f7db f9a0 	bl	8000618 <__aeabi_dmul>
 80252d8:	e9cd 0100 	strd	r0, r1, [sp]
 80252dc:	9f02      	ldr	r7, [sp, #8]
 80252de:	3501      	adds	r5, #1
 80252e0:	4628      	mov	r0, r5
 80252e2:	f7db f92f 	bl	8000544 <__aeabi_i2d>
 80252e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80252ea:	f7db f995 	bl	8000618 <__aeabi_dmul>
 80252ee:	2200      	movs	r2, #0
 80252f0:	4b84      	ldr	r3, [pc, #528]	; (8025504 <_dtoa_r+0x604>)
 80252f2:	f7da ffdb 	bl	80002ac <__adddf3>
 80252f6:	4605      	mov	r5, r0
 80252f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80252fc:	2f00      	cmp	r7, #0
 80252fe:	d15d      	bne.n	80253bc <_dtoa_r+0x4bc>
 8025300:	2200      	movs	r2, #0
 8025302:	4b81      	ldr	r3, [pc, #516]	; (8025508 <_dtoa_r+0x608>)
 8025304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025308:	f7da ffce 	bl	80002a8 <__aeabi_dsub>
 802530c:	462a      	mov	r2, r5
 802530e:	4633      	mov	r3, r6
 8025310:	e9cd 0100 	strd	r0, r1, [sp]
 8025314:	f7db fc10 	bl	8000b38 <__aeabi_dcmpgt>
 8025318:	2800      	cmp	r0, #0
 802531a:	f040 8288 	bne.w	802582e <_dtoa_r+0x92e>
 802531e:	462a      	mov	r2, r5
 8025320:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8025324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025328:	f7db fbe8 	bl	8000afc <__aeabi_dcmplt>
 802532c:	2800      	cmp	r0, #0
 802532e:	f040 827c 	bne.w	802582a <_dtoa_r+0x92a>
 8025332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8025336:	e9cd 2300 	strd	r2, r3, [sp]
 802533a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802533c:	2b00      	cmp	r3, #0
 802533e:	f2c0 8150 	blt.w	80255e2 <_dtoa_r+0x6e2>
 8025342:	f1ba 0f0e 	cmp.w	sl, #14
 8025346:	f300 814c 	bgt.w	80255e2 <_dtoa_r+0x6e2>
 802534a:	4b6a      	ldr	r3, [pc, #424]	; (80254f4 <_dtoa_r+0x5f4>)
 802534c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8025350:	ed93 7b00 	vldr	d7, [r3]
 8025354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025356:	2b00      	cmp	r3, #0
 8025358:	ed8d 7b02 	vstr	d7, [sp, #8]
 802535c:	f280 80d8 	bge.w	8025510 <_dtoa_r+0x610>
 8025360:	f1b9 0f00 	cmp.w	r9, #0
 8025364:	f300 80d4 	bgt.w	8025510 <_dtoa_r+0x610>
 8025368:	f040 825e 	bne.w	8025828 <_dtoa_r+0x928>
 802536c:	2200      	movs	r2, #0
 802536e:	4b66      	ldr	r3, [pc, #408]	; (8025508 <_dtoa_r+0x608>)
 8025370:	ec51 0b17 	vmov	r0, r1, d7
 8025374:	f7db f950 	bl	8000618 <__aeabi_dmul>
 8025378:	e9dd 2300 	ldrd	r2, r3, [sp]
 802537c:	f7db fbd2 	bl	8000b24 <__aeabi_dcmpge>
 8025380:	464f      	mov	r7, r9
 8025382:	464e      	mov	r6, r9
 8025384:	2800      	cmp	r0, #0
 8025386:	f040 8234 	bne.w	80257f2 <_dtoa_r+0x8f2>
 802538a:	2331      	movs	r3, #49	; 0x31
 802538c:	f10b 0501 	add.w	r5, fp, #1
 8025390:	f88b 3000 	strb.w	r3, [fp]
 8025394:	f10a 0a01 	add.w	sl, sl, #1
 8025398:	e22f      	b.n	80257fa <_dtoa_r+0x8fa>
 802539a:	07f2      	lsls	r2, r6, #31
 802539c:	d505      	bpl.n	80253aa <_dtoa_r+0x4aa>
 802539e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80253a2:	f7db f939 	bl	8000618 <__aeabi_dmul>
 80253a6:	3501      	adds	r5, #1
 80253a8:	2301      	movs	r3, #1
 80253aa:	1076      	asrs	r6, r6, #1
 80253ac:	3708      	adds	r7, #8
 80253ae:	e772      	b.n	8025296 <_dtoa_r+0x396>
 80253b0:	2502      	movs	r5, #2
 80253b2:	e774      	b.n	802529e <_dtoa_r+0x39e>
 80253b4:	f8cd a020 	str.w	sl, [sp, #32]
 80253b8:	464f      	mov	r7, r9
 80253ba:	e791      	b.n	80252e0 <_dtoa_r+0x3e0>
 80253bc:	4b4d      	ldr	r3, [pc, #308]	; (80254f4 <_dtoa_r+0x5f4>)
 80253be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80253c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80253c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80253c8:	2b00      	cmp	r3, #0
 80253ca:	d047      	beq.n	802545c <_dtoa_r+0x55c>
 80253cc:	4602      	mov	r2, r0
 80253ce:	460b      	mov	r3, r1
 80253d0:	2000      	movs	r0, #0
 80253d2:	494e      	ldr	r1, [pc, #312]	; (802550c <_dtoa_r+0x60c>)
 80253d4:	f7db fa4a 	bl	800086c <__aeabi_ddiv>
 80253d8:	462a      	mov	r2, r5
 80253da:	4633      	mov	r3, r6
 80253dc:	f7da ff64 	bl	80002a8 <__aeabi_dsub>
 80253e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80253e4:	465d      	mov	r5, fp
 80253e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80253ea:	f7db fbc5 	bl	8000b78 <__aeabi_d2iz>
 80253ee:	4606      	mov	r6, r0
 80253f0:	f7db f8a8 	bl	8000544 <__aeabi_i2d>
 80253f4:	4602      	mov	r2, r0
 80253f6:	460b      	mov	r3, r1
 80253f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80253fc:	f7da ff54 	bl	80002a8 <__aeabi_dsub>
 8025400:	3630      	adds	r6, #48	; 0x30
 8025402:	f805 6b01 	strb.w	r6, [r5], #1
 8025406:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802540a:	e9cd 0100 	strd	r0, r1, [sp]
 802540e:	f7db fb75 	bl	8000afc <__aeabi_dcmplt>
 8025412:	2800      	cmp	r0, #0
 8025414:	d163      	bne.n	80254de <_dtoa_r+0x5de>
 8025416:	e9dd 2300 	ldrd	r2, r3, [sp]
 802541a:	2000      	movs	r0, #0
 802541c:	4937      	ldr	r1, [pc, #220]	; (80254fc <_dtoa_r+0x5fc>)
 802541e:	f7da ff43 	bl	80002a8 <__aeabi_dsub>
 8025422:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8025426:	f7db fb69 	bl	8000afc <__aeabi_dcmplt>
 802542a:	2800      	cmp	r0, #0
 802542c:	f040 80b7 	bne.w	802559e <_dtoa_r+0x69e>
 8025430:	eba5 030b 	sub.w	r3, r5, fp
 8025434:	429f      	cmp	r7, r3
 8025436:	f77f af7c 	ble.w	8025332 <_dtoa_r+0x432>
 802543a:	2200      	movs	r2, #0
 802543c:	4b30      	ldr	r3, [pc, #192]	; (8025500 <_dtoa_r+0x600>)
 802543e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8025442:	f7db f8e9 	bl	8000618 <__aeabi_dmul>
 8025446:	2200      	movs	r2, #0
 8025448:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802544c:	4b2c      	ldr	r3, [pc, #176]	; (8025500 <_dtoa_r+0x600>)
 802544e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025452:	f7db f8e1 	bl	8000618 <__aeabi_dmul>
 8025456:	e9cd 0100 	strd	r0, r1, [sp]
 802545a:	e7c4      	b.n	80253e6 <_dtoa_r+0x4e6>
 802545c:	462a      	mov	r2, r5
 802545e:	4633      	mov	r3, r6
 8025460:	f7db f8da 	bl	8000618 <__aeabi_dmul>
 8025464:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8025468:	eb0b 0507 	add.w	r5, fp, r7
 802546c:	465e      	mov	r6, fp
 802546e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025472:	f7db fb81 	bl	8000b78 <__aeabi_d2iz>
 8025476:	4607      	mov	r7, r0
 8025478:	f7db f864 	bl	8000544 <__aeabi_i2d>
 802547c:	3730      	adds	r7, #48	; 0x30
 802547e:	4602      	mov	r2, r0
 8025480:	460b      	mov	r3, r1
 8025482:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025486:	f7da ff0f 	bl	80002a8 <__aeabi_dsub>
 802548a:	f806 7b01 	strb.w	r7, [r6], #1
 802548e:	42ae      	cmp	r6, r5
 8025490:	e9cd 0100 	strd	r0, r1, [sp]
 8025494:	f04f 0200 	mov.w	r2, #0
 8025498:	d126      	bne.n	80254e8 <_dtoa_r+0x5e8>
 802549a:	4b1c      	ldr	r3, [pc, #112]	; (802550c <_dtoa_r+0x60c>)
 802549c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80254a0:	f7da ff04 	bl	80002ac <__adddf3>
 80254a4:	4602      	mov	r2, r0
 80254a6:	460b      	mov	r3, r1
 80254a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80254ac:	f7db fb44 	bl	8000b38 <__aeabi_dcmpgt>
 80254b0:	2800      	cmp	r0, #0
 80254b2:	d174      	bne.n	802559e <_dtoa_r+0x69e>
 80254b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80254b8:	2000      	movs	r0, #0
 80254ba:	4914      	ldr	r1, [pc, #80]	; (802550c <_dtoa_r+0x60c>)
 80254bc:	f7da fef4 	bl	80002a8 <__aeabi_dsub>
 80254c0:	4602      	mov	r2, r0
 80254c2:	460b      	mov	r3, r1
 80254c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80254c8:	f7db fb18 	bl	8000afc <__aeabi_dcmplt>
 80254cc:	2800      	cmp	r0, #0
 80254ce:	f43f af30 	beq.w	8025332 <_dtoa_r+0x432>
 80254d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80254d6:	2b30      	cmp	r3, #48	; 0x30
 80254d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80254dc:	d002      	beq.n	80254e4 <_dtoa_r+0x5e4>
 80254de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80254e2:	e04a      	b.n	802557a <_dtoa_r+0x67a>
 80254e4:	4615      	mov	r5, r2
 80254e6:	e7f4      	b.n	80254d2 <_dtoa_r+0x5d2>
 80254e8:	4b05      	ldr	r3, [pc, #20]	; (8025500 <_dtoa_r+0x600>)
 80254ea:	f7db f895 	bl	8000618 <__aeabi_dmul>
 80254ee:	e9cd 0100 	strd	r0, r1, [sp]
 80254f2:	e7bc      	b.n	802546e <_dtoa_r+0x56e>
 80254f4:	080334c0 	.word	0x080334c0
 80254f8:	08033498 	.word	0x08033498
 80254fc:	3ff00000 	.word	0x3ff00000
 8025500:	40240000 	.word	0x40240000
 8025504:	401c0000 	.word	0x401c0000
 8025508:	40140000 	.word	0x40140000
 802550c:	3fe00000 	.word	0x3fe00000
 8025510:	e9dd 6700 	ldrd	r6, r7, [sp]
 8025514:	465d      	mov	r5, fp
 8025516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802551a:	4630      	mov	r0, r6
 802551c:	4639      	mov	r1, r7
 802551e:	f7db f9a5 	bl	800086c <__aeabi_ddiv>
 8025522:	f7db fb29 	bl	8000b78 <__aeabi_d2iz>
 8025526:	4680      	mov	r8, r0
 8025528:	f7db f80c 	bl	8000544 <__aeabi_i2d>
 802552c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025530:	f7db f872 	bl	8000618 <__aeabi_dmul>
 8025534:	4602      	mov	r2, r0
 8025536:	460b      	mov	r3, r1
 8025538:	4630      	mov	r0, r6
 802553a:	4639      	mov	r1, r7
 802553c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8025540:	f7da feb2 	bl	80002a8 <__aeabi_dsub>
 8025544:	f805 6b01 	strb.w	r6, [r5], #1
 8025548:	eba5 060b 	sub.w	r6, r5, fp
 802554c:	45b1      	cmp	r9, r6
 802554e:	4602      	mov	r2, r0
 8025550:	460b      	mov	r3, r1
 8025552:	d139      	bne.n	80255c8 <_dtoa_r+0x6c8>
 8025554:	f7da feaa 	bl	80002ac <__adddf3>
 8025558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802555c:	4606      	mov	r6, r0
 802555e:	460f      	mov	r7, r1
 8025560:	f7db faea 	bl	8000b38 <__aeabi_dcmpgt>
 8025564:	b9c8      	cbnz	r0, 802559a <_dtoa_r+0x69a>
 8025566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802556a:	4630      	mov	r0, r6
 802556c:	4639      	mov	r1, r7
 802556e:	f7db fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 8025572:	b110      	cbz	r0, 802557a <_dtoa_r+0x67a>
 8025574:	f018 0f01 	tst.w	r8, #1
 8025578:	d10f      	bne.n	802559a <_dtoa_r+0x69a>
 802557a:	9904      	ldr	r1, [sp, #16]
 802557c:	4620      	mov	r0, r4
 802557e:	f001 f865 	bl	802664c <_Bfree>
 8025582:	2300      	movs	r3, #0
 8025584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025586:	702b      	strb	r3, [r5, #0]
 8025588:	f10a 0301 	add.w	r3, sl, #1
 802558c:	6013      	str	r3, [r2, #0]
 802558e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025590:	2b00      	cmp	r3, #0
 8025592:	f000 8241 	beq.w	8025a18 <_dtoa_r+0xb18>
 8025596:	601d      	str	r5, [r3, #0]
 8025598:	e23e      	b.n	8025a18 <_dtoa_r+0xb18>
 802559a:	f8cd a020 	str.w	sl, [sp, #32]
 802559e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80255a2:	2a39      	cmp	r2, #57	; 0x39
 80255a4:	f105 33ff 	add.w	r3, r5, #4294967295
 80255a8:	d108      	bne.n	80255bc <_dtoa_r+0x6bc>
 80255aa:	459b      	cmp	fp, r3
 80255ac:	d10a      	bne.n	80255c4 <_dtoa_r+0x6c4>
 80255ae:	9b08      	ldr	r3, [sp, #32]
 80255b0:	3301      	adds	r3, #1
 80255b2:	9308      	str	r3, [sp, #32]
 80255b4:	2330      	movs	r3, #48	; 0x30
 80255b6:	f88b 3000 	strb.w	r3, [fp]
 80255ba:	465b      	mov	r3, fp
 80255bc:	781a      	ldrb	r2, [r3, #0]
 80255be:	3201      	adds	r2, #1
 80255c0:	701a      	strb	r2, [r3, #0]
 80255c2:	e78c      	b.n	80254de <_dtoa_r+0x5de>
 80255c4:	461d      	mov	r5, r3
 80255c6:	e7ea      	b.n	802559e <_dtoa_r+0x69e>
 80255c8:	2200      	movs	r2, #0
 80255ca:	4b9b      	ldr	r3, [pc, #620]	; (8025838 <_dtoa_r+0x938>)
 80255cc:	f7db f824 	bl	8000618 <__aeabi_dmul>
 80255d0:	2200      	movs	r2, #0
 80255d2:	2300      	movs	r3, #0
 80255d4:	4606      	mov	r6, r0
 80255d6:	460f      	mov	r7, r1
 80255d8:	f7db fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 80255dc:	2800      	cmp	r0, #0
 80255de:	d09a      	beq.n	8025516 <_dtoa_r+0x616>
 80255e0:	e7cb      	b.n	802557a <_dtoa_r+0x67a>
 80255e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80255e4:	2a00      	cmp	r2, #0
 80255e6:	f000 808b 	beq.w	8025700 <_dtoa_r+0x800>
 80255ea:	9a06      	ldr	r2, [sp, #24]
 80255ec:	2a01      	cmp	r2, #1
 80255ee:	dc6e      	bgt.n	80256ce <_dtoa_r+0x7ce>
 80255f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80255f2:	2a00      	cmp	r2, #0
 80255f4:	d067      	beq.n	80256c6 <_dtoa_r+0x7c6>
 80255f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80255fa:	9f07      	ldr	r7, [sp, #28]
 80255fc:	9d05      	ldr	r5, [sp, #20]
 80255fe:	9a05      	ldr	r2, [sp, #20]
 8025600:	2101      	movs	r1, #1
 8025602:	441a      	add	r2, r3
 8025604:	4620      	mov	r0, r4
 8025606:	9205      	str	r2, [sp, #20]
 8025608:	4498      	add	r8, r3
 802560a:	f001 f8fd 	bl	8026808 <__i2b>
 802560e:	4606      	mov	r6, r0
 8025610:	2d00      	cmp	r5, #0
 8025612:	dd0c      	ble.n	802562e <_dtoa_r+0x72e>
 8025614:	f1b8 0f00 	cmp.w	r8, #0
 8025618:	dd09      	ble.n	802562e <_dtoa_r+0x72e>
 802561a:	4545      	cmp	r5, r8
 802561c:	9a05      	ldr	r2, [sp, #20]
 802561e:	462b      	mov	r3, r5
 8025620:	bfa8      	it	ge
 8025622:	4643      	movge	r3, r8
 8025624:	1ad2      	subs	r2, r2, r3
 8025626:	9205      	str	r2, [sp, #20]
 8025628:	1aed      	subs	r5, r5, r3
 802562a:	eba8 0803 	sub.w	r8, r8, r3
 802562e:	9b07      	ldr	r3, [sp, #28]
 8025630:	b1eb      	cbz	r3, 802566e <_dtoa_r+0x76e>
 8025632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025634:	2b00      	cmp	r3, #0
 8025636:	d067      	beq.n	8025708 <_dtoa_r+0x808>
 8025638:	b18f      	cbz	r7, 802565e <_dtoa_r+0x75e>
 802563a:	4631      	mov	r1, r6
 802563c:	463a      	mov	r2, r7
 802563e:	4620      	mov	r0, r4
 8025640:	f001 f982 	bl	8026948 <__pow5mult>
 8025644:	9a04      	ldr	r2, [sp, #16]
 8025646:	4601      	mov	r1, r0
 8025648:	4606      	mov	r6, r0
 802564a:	4620      	mov	r0, r4
 802564c:	f001 f8e5 	bl	802681a <__multiply>
 8025650:	9904      	ldr	r1, [sp, #16]
 8025652:	9008      	str	r0, [sp, #32]
 8025654:	4620      	mov	r0, r4
 8025656:	f000 fff9 	bl	802664c <_Bfree>
 802565a:	9b08      	ldr	r3, [sp, #32]
 802565c:	9304      	str	r3, [sp, #16]
 802565e:	9b07      	ldr	r3, [sp, #28]
 8025660:	1bda      	subs	r2, r3, r7
 8025662:	d004      	beq.n	802566e <_dtoa_r+0x76e>
 8025664:	9904      	ldr	r1, [sp, #16]
 8025666:	4620      	mov	r0, r4
 8025668:	f001 f96e 	bl	8026948 <__pow5mult>
 802566c:	9004      	str	r0, [sp, #16]
 802566e:	2101      	movs	r1, #1
 8025670:	4620      	mov	r0, r4
 8025672:	f001 f8c9 	bl	8026808 <__i2b>
 8025676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025678:	4607      	mov	r7, r0
 802567a:	2b00      	cmp	r3, #0
 802567c:	f000 81d0 	beq.w	8025a20 <_dtoa_r+0xb20>
 8025680:	461a      	mov	r2, r3
 8025682:	4601      	mov	r1, r0
 8025684:	4620      	mov	r0, r4
 8025686:	f001 f95f 	bl	8026948 <__pow5mult>
 802568a:	9b06      	ldr	r3, [sp, #24]
 802568c:	2b01      	cmp	r3, #1
 802568e:	4607      	mov	r7, r0
 8025690:	dc40      	bgt.n	8025714 <_dtoa_r+0x814>
 8025692:	9b00      	ldr	r3, [sp, #0]
 8025694:	2b00      	cmp	r3, #0
 8025696:	d139      	bne.n	802570c <_dtoa_r+0x80c>
 8025698:	9b01      	ldr	r3, [sp, #4]
 802569a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802569e:	2b00      	cmp	r3, #0
 80256a0:	d136      	bne.n	8025710 <_dtoa_r+0x810>
 80256a2:	9b01      	ldr	r3, [sp, #4]
 80256a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80256a8:	0d1b      	lsrs	r3, r3, #20
 80256aa:	051b      	lsls	r3, r3, #20
 80256ac:	b12b      	cbz	r3, 80256ba <_dtoa_r+0x7ba>
 80256ae:	9b05      	ldr	r3, [sp, #20]
 80256b0:	3301      	adds	r3, #1
 80256b2:	9305      	str	r3, [sp, #20]
 80256b4:	f108 0801 	add.w	r8, r8, #1
 80256b8:	2301      	movs	r3, #1
 80256ba:	9307      	str	r3, [sp, #28]
 80256bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80256be:	2b00      	cmp	r3, #0
 80256c0:	d12a      	bne.n	8025718 <_dtoa_r+0x818>
 80256c2:	2001      	movs	r0, #1
 80256c4:	e030      	b.n	8025728 <_dtoa_r+0x828>
 80256c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80256c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80256cc:	e795      	b.n	80255fa <_dtoa_r+0x6fa>
 80256ce:	9b07      	ldr	r3, [sp, #28]
 80256d0:	f109 37ff 	add.w	r7, r9, #4294967295
 80256d4:	42bb      	cmp	r3, r7
 80256d6:	bfbf      	itttt	lt
 80256d8:	9b07      	ldrlt	r3, [sp, #28]
 80256da:	9707      	strlt	r7, [sp, #28]
 80256dc:	1afa      	sublt	r2, r7, r3
 80256de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80256e0:	bfbb      	ittet	lt
 80256e2:	189b      	addlt	r3, r3, r2
 80256e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80256e6:	1bdf      	subge	r7, r3, r7
 80256e8:	2700      	movlt	r7, #0
 80256ea:	f1b9 0f00 	cmp.w	r9, #0
 80256ee:	bfb5      	itete	lt
 80256f0:	9b05      	ldrlt	r3, [sp, #20]
 80256f2:	9d05      	ldrge	r5, [sp, #20]
 80256f4:	eba3 0509 	sublt.w	r5, r3, r9
 80256f8:	464b      	movge	r3, r9
 80256fa:	bfb8      	it	lt
 80256fc:	2300      	movlt	r3, #0
 80256fe:	e77e      	b.n	80255fe <_dtoa_r+0x6fe>
 8025700:	9f07      	ldr	r7, [sp, #28]
 8025702:	9d05      	ldr	r5, [sp, #20]
 8025704:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025706:	e783      	b.n	8025610 <_dtoa_r+0x710>
 8025708:	9a07      	ldr	r2, [sp, #28]
 802570a:	e7ab      	b.n	8025664 <_dtoa_r+0x764>
 802570c:	2300      	movs	r3, #0
 802570e:	e7d4      	b.n	80256ba <_dtoa_r+0x7ba>
 8025710:	9b00      	ldr	r3, [sp, #0]
 8025712:	e7d2      	b.n	80256ba <_dtoa_r+0x7ba>
 8025714:	2300      	movs	r3, #0
 8025716:	9307      	str	r3, [sp, #28]
 8025718:	693b      	ldr	r3, [r7, #16]
 802571a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802571e:	6918      	ldr	r0, [r3, #16]
 8025720:	f001 f824 	bl	802676c <__hi0bits>
 8025724:	f1c0 0020 	rsb	r0, r0, #32
 8025728:	4440      	add	r0, r8
 802572a:	f010 001f 	ands.w	r0, r0, #31
 802572e:	d047      	beq.n	80257c0 <_dtoa_r+0x8c0>
 8025730:	f1c0 0320 	rsb	r3, r0, #32
 8025734:	2b04      	cmp	r3, #4
 8025736:	dd3b      	ble.n	80257b0 <_dtoa_r+0x8b0>
 8025738:	9b05      	ldr	r3, [sp, #20]
 802573a:	f1c0 001c 	rsb	r0, r0, #28
 802573e:	4403      	add	r3, r0
 8025740:	9305      	str	r3, [sp, #20]
 8025742:	4405      	add	r5, r0
 8025744:	4480      	add	r8, r0
 8025746:	9b05      	ldr	r3, [sp, #20]
 8025748:	2b00      	cmp	r3, #0
 802574a:	dd05      	ble.n	8025758 <_dtoa_r+0x858>
 802574c:	461a      	mov	r2, r3
 802574e:	9904      	ldr	r1, [sp, #16]
 8025750:	4620      	mov	r0, r4
 8025752:	f001 f947 	bl	80269e4 <__lshift>
 8025756:	9004      	str	r0, [sp, #16]
 8025758:	f1b8 0f00 	cmp.w	r8, #0
 802575c:	dd05      	ble.n	802576a <_dtoa_r+0x86a>
 802575e:	4639      	mov	r1, r7
 8025760:	4642      	mov	r2, r8
 8025762:	4620      	mov	r0, r4
 8025764:	f001 f93e 	bl	80269e4 <__lshift>
 8025768:	4607      	mov	r7, r0
 802576a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802576c:	b353      	cbz	r3, 80257c4 <_dtoa_r+0x8c4>
 802576e:	4639      	mov	r1, r7
 8025770:	9804      	ldr	r0, [sp, #16]
 8025772:	f001 f98b 	bl	8026a8c <__mcmp>
 8025776:	2800      	cmp	r0, #0
 8025778:	da24      	bge.n	80257c4 <_dtoa_r+0x8c4>
 802577a:	2300      	movs	r3, #0
 802577c:	220a      	movs	r2, #10
 802577e:	9904      	ldr	r1, [sp, #16]
 8025780:	4620      	mov	r0, r4
 8025782:	f000 ff7a 	bl	802667a <__multadd>
 8025786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025788:	9004      	str	r0, [sp, #16]
 802578a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802578e:	2b00      	cmp	r3, #0
 8025790:	f000 814d 	beq.w	8025a2e <_dtoa_r+0xb2e>
 8025794:	2300      	movs	r3, #0
 8025796:	4631      	mov	r1, r6
 8025798:	220a      	movs	r2, #10
 802579a:	4620      	mov	r0, r4
 802579c:	f000 ff6d 	bl	802667a <__multadd>
 80257a0:	9b02      	ldr	r3, [sp, #8]
 80257a2:	2b00      	cmp	r3, #0
 80257a4:	4606      	mov	r6, r0
 80257a6:	dc4f      	bgt.n	8025848 <_dtoa_r+0x948>
 80257a8:	9b06      	ldr	r3, [sp, #24]
 80257aa:	2b02      	cmp	r3, #2
 80257ac:	dd4c      	ble.n	8025848 <_dtoa_r+0x948>
 80257ae:	e011      	b.n	80257d4 <_dtoa_r+0x8d4>
 80257b0:	d0c9      	beq.n	8025746 <_dtoa_r+0x846>
 80257b2:	9a05      	ldr	r2, [sp, #20]
 80257b4:	331c      	adds	r3, #28
 80257b6:	441a      	add	r2, r3
 80257b8:	9205      	str	r2, [sp, #20]
 80257ba:	441d      	add	r5, r3
 80257bc:	4498      	add	r8, r3
 80257be:	e7c2      	b.n	8025746 <_dtoa_r+0x846>
 80257c0:	4603      	mov	r3, r0
 80257c2:	e7f6      	b.n	80257b2 <_dtoa_r+0x8b2>
 80257c4:	f1b9 0f00 	cmp.w	r9, #0
 80257c8:	dc38      	bgt.n	802583c <_dtoa_r+0x93c>
 80257ca:	9b06      	ldr	r3, [sp, #24]
 80257cc:	2b02      	cmp	r3, #2
 80257ce:	dd35      	ble.n	802583c <_dtoa_r+0x93c>
 80257d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80257d4:	9b02      	ldr	r3, [sp, #8]
 80257d6:	b963      	cbnz	r3, 80257f2 <_dtoa_r+0x8f2>
 80257d8:	4639      	mov	r1, r7
 80257da:	2205      	movs	r2, #5
 80257dc:	4620      	mov	r0, r4
 80257de:	f000 ff4c 	bl	802667a <__multadd>
 80257e2:	4601      	mov	r1, r0
 80257e4:	4607      	mov	r7, r0
 80257e6:	9804      	ldr	r0, [sp, #16]
 80257e8:	f001 f950 	bl	8026a8c <__mcmp>
 80257ec:	2800      	cmp	r0, #0
 80257ee:	f73f adcc 	bgt.w	802538a <_dtoa_r+0x48a>
 80257f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257f4:	465d      	mov	r5, fp
 80257f6:	ea6f 0a03 	mvn.w	sl, r3
 80257fa:	f04f 0900 	mov.w	r9, #0
 80257fe:	4639      	mov	r1, r7
 8025800:	4620      	mov	r0, r4
 8025802:	f000 ff23 	bl	802664c <_Bfree>
 8025806:	2e00      	cmp	r6, #0
 8025808:	f43f aeb7 	beq.w	802557a <_dtoa_r+0x67a>
 802580c:	f1b9 0f00 	cmp.w	r9, #0
 8025810:	d005      	beq.n	802581e <_dtoa_r+0x91e>
 8025812:	45b1      	cmp	r9, r6
 8025814:	d003      	beq.n	802581e <_dtoa_r+0x91e>
 8025816:	4649      	mov	r1, r9
 8025818:	4620      	mov	r0, r4
 802581a:	f000 ff17 	bl	802664c <_Bfree>
 802581e:	4631      	mov	r1, r6
 8025820:	4620      	mov	r0, r4
 8025822:	f000 ff13 	bl	802664c <_Bfree>
 8025826:	e6a8      	b.n	802557a <_dtoa_r+0x67a>
 8025828:	2700      	movs	r7, #0
 802582a:	463e      	mov	r6, r7
 802582c:	e7e1      	b.n	80257f2 <_dtoa_r+0x8f2>
 802582e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8025832:	463e      	mov	r6, r7
 8025834:	e5a9      	b.n	802538a <_dtoa_r+0x48a>
 8025836:	bf00      	nop
 8025838:	40240000 	.word	0x40240000
 802583c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802583e:	f8cd 9008 	str.w	r9, [sp, #8]
 8025842:	2b00      	cmp	r3, #0
 8025844:	f000 80fa 	beq.w	8025a3c <_dtoa_r+0xb3c>
 8025848:	2d00      	cmp	r5, #0
 802584a:	dd05      	ble.n	8025858 <_dtoa_r+0x958>
 802584c:	4631      	mov	r1, r6
 802584e:	462a      	mov	r2, r5
 8025850:	4620      	mov	r0, r4
 8025852:	f001 f8c7 	bl	80269e4 <__lshift>
 8025856:	4606      	mov	r6, r0
 8025858:	9b07      	ldr	r3, [sp, #28]
 802585a:	2b00      	cmp	r3, #0
 802585c:	d04c      	beq.n	80258f8 <_dtoa_r+0x9f8>
 802585e:	6871      	ldr	r1, [r6, #4]
 8025860:	4620      	mov	r0, r4
 8025862:	f000 febf 	bl	80265e4 <_Balloc>
 8025866:	6932      	ldr	r2, [r6, #16]
 8025868:	3202      	adds	r2, #2
 802586a:	4605      	mov	r5, r0
 802586c:	0092      	lsls	r2, r2, #2
 802586e:	f106 010c 	add.w	r1, r6, #12
 8025872:	300c      	adds	r0, #12
 8025874:	f7fc fd37 	bl	80222e6 <memcpy>
 8025878:	2201      	movs	r2, #1
 802587a:	4629      	mov	r1, r5
 802587c:	4620      	mov	r0, r4
 802587e:	f001 f8b1 	bl	80269e4 <__lshift>
 8025882:	9b00      	ldr	r3, [sp, #0]
 8025884:	f8cd b014 	str.w	fp, [sp, #20]
 8025888:	f003 0301 	and.w	r3, r3, #1
 802588c:	46b1      	mov	r9, r6
 802588e:	9307      	str	r3, [sp, #28]
 8025890:	4606      	mov	r6, r0
 8025892:	4639      	mov	r1, r7
 8025894:	9804      	ldr	r0, [sp, #16]
 8025896:	f7ff faa7 	bl	8024de8 <quorem>
 802589a:	4649      	mov	r1, r9
 802589c:	4605      	mov	r5, r0
 802589e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80258a2:	9804      	ldr	r0, [sp, #16]
 80258a4:	f001 f8f2 	bl	8026a8c <__mcmp>
 80258a8:	4632      	mov	r2, r6
 80258aa:	9000      	str	r0, [sp, #0]
 80258ac:	4639      	mov	r1, r7
 80258ae:	4620      	mov	r0, r4
 80258b0:	f001 f906 	bl	8026ac0 <__mdiff>
 80258b4:	68c3      	ldr	r3, [r0, #12]
 80258b6:	4602      	mov	r2, r0
 80258b8:	bb03      	cbnz	r3, 80258fc <_dtoa_r+0x9fc>
 80258ba:	4601      	mov	r1, r0
 80258bc:	9008      	str	r0, [sp, #32]
 80258be:	9804      	ldr	r0, [sp, #16]
 80258c0:	f001 f8e4 	bl	8026a8c <__mcmp>
 80258c4:	9a08      	ldr	r2, [sp, #32]
 80258c6:	4603      	mov	r3, r0
 80258c8:	4611      	mov	r1, r2
 80258ca:	4620      	mov	r0, r4
 80258cc:	9308      	str	r3, [sp, #32]
 80258ce:	f000 febd 	bl	802664c <_Bfree>
 80258d2:	9b08      	ldr	r3, [sp, #32]
 80258d4:	b9a3      	cbnz	r3, 8025900 <_dtoa_r+0xa00>
 80258d6:	9a06      	ldr	r2, [sp, #24]
 80258d8:	b992      	cbnz	r2, 8025900 <_dtoa_r+0xa00>
 80258da:	9a07      	ldr	r2, [sp, #28]
 80258dc:	b982      	cbnz	r2, 8025900 <_dtoa_r+0xa00>
 80258de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80258e2:	d029      	beq.n	8025938 <_dtoa_r+0xa38>
 80258e4:	9b00      	ldr	r3, [sp, #0]
 80258e6:	2b00      	cmp	r3, #0
 80258e8:	dd01      	ble.n	80258ee <_dtoa_r+0x9ee>
 80258ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80258ee:	9b05      	ldr	r3, [sp, #20]
 80258f0:	1c5d      	adds	r5, r3, #1
 80258f2:	f883 8000 	strb.w	r8, [r3]
 80258f6:	e782      	b.n	80257fe <_dtoa_r+0x8fe>
 80258f8:	4630      	mov	r0, r6
 80258fa:	e7c2      	b.n	8025882 <_dtoa_r+0x982>
 80258fc:	2301      	movs	r3, #1
 80258fe:	e7e3      	b.n	80258c8 <_dtoa_r+0x9c8>
 8025900:	9a00      	ldr	r2, [sp, #0]
 8025902:	2a00      	cmp	r2, #0
 8025904:	db04      	blt.n	8025910 <_dtoa_r+0xa10>
 8025906:	d125      	bne.n	8025954 <_dtoa_r+0xa54>
 8025908:	9a06      	ldr	r2, [sp, #24]
 802590a:	bb1a      	cbnz	r2, 8025954 <_dtoa_r+0xa54>
 802590c:	9a07      	ldr	r2, [sp, #28]
 802590e:	bb0a      	cbnz	r2, 8025954 <_dtoa_r+0xa54>
 8025910:	2b00      	cmp	r3, #0
 8025912:	ddec      	ble.n	80258ee <_dtoa_r+0x9ee>
 8025914:	2201      	movs	r2, #1
 8025916:	9904      	ldr	r1, [sp, #16]
 8025918:	4620      	mov	r0, r4
 802591a:	f001 f863 	bl	80269e4 <__lshift>
 802591e:	4639      	mov	r1, r7
 8025920:	9004      	str	r0, [sp, #16]
 8025922:	f001 f8b3 	bl	8026a8c <__mcmp>
 8025926:	2800      	cmp	r0, #0
 8025928:	dc03      	bgt.n	8025932 <_dtoa_r+0xa32>
 802592a:	d1e0      	bne.n	80258ee <_dtoa_r+0x9ee>
 802592c:	f018 0f01 	tst.w	r8, #1
 8025930:	d0dd      	beq.n	80258ee <_dtoa_r+0x9ee>
 8025932:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8025936:	d1d8      	bne.n	80258ea <_dtoa_r+0x9ea>
 8025938:	9b05      	ldr	r3, [sp, #20]
 802593a:	9a05      	ldr	r2, [sp, #20]
 802593c:	1c5d      	adds	r5, r3, #1
 802593e:	2339      	movs	r3, #57	; 0x39
 8025940:	7013      	strb	r3, [r2, #0]
 8025942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025946:	2b39      	cmp	r3, #57	; 0x39
 8025948:	f105 32ff 	add.w	r2, r5, #4294967295
 802594c:	d04f      	beq.n	80259ee <_dtoa_r+0xaee>
 802594e:	3301      	adds	r3, #1
 8025950:	7013      	strb	r3, [r2, #0]
 8025952:	e754      	b.n	80257fe <_dtoa_r+0x8fe>
 8025954:	9a05      	ldr	r2, [sp, #20]
 8025956:	2b00      	cmp	r3, #0
 8025958:	f102 0501 	add.w	r5, r2, #1
 802595c:	dd06      	ble.n	802596c <_dtoa_r+0xa6c>
 802595e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8025962:	d0e9      	beq.n	8025938 <_dtoa_r+0xa38>
 8025964:	f108 0801 	add.w	r8, r8, #1
 8025968:	9b05      	ldr	r3, [sp, #20]
 802596a:	e7c2      	b.n	80258f2 <_dtoa_r+0x9f2>
 802596c:	9a02      	ldr	r2, [sp, #8]
 802596e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8025972:	eba5 030b 	sub.w	r3, r5, fp
 8025976:	4293      	cmp	r3, r2
 8025978:	d021      	beq.n	80259be <_dtoa_r+0xabe>
 802597a:	2300      	movs	r3, #0
 802597c:	220a      	movs	r2, #10
 802597e:	9904      	ldr	r1, [sp, #16]
 8025980:	4620      	mov	r0, r4
 8025982:	f000 fe7a 	bl	802667a <__multadd>
 8025986:	45b1      	cmp	r9, r6
 8025988:	9004      	str	r0, [sp, #16]
 802598a:	f04f 0300 	mov.w	r3, #0
 802598e:	f04f 020a 	mov.w	r2, #10
 8025992:	4649      	mov	r1, r9
 8025994:	4620      	mov	r0, r4
 8025996:	d105      	bne.n	80259a4 <_dtoa_r+0xaa4>
 8025998:	f000 fe6f 	bl	802667a <__multadd>
 802599c:	4681      	mov	r9, r0
 802599e:	4606      	mov	r6, r0
 80259a0:	9505      	str	r5, [sp, #20]
 80259a2:	e776      	b.n	8025892 <_dtoa_r+0x992>
 80259a4:	f000 fe69 	bl	802667a <__multadd>
 80259a8:	4631      	mov	r1, r6
 80259aa:	4681      	mov	r9, r0
 80259ac:	2300      	movs	r3, #0
 80259ae:	220a      	movs	r2, #10
 80259b0:	4620      	mov	r0, r4
 80259b2:	f000 fe62 	bl	802667a <__multadd>
 80259b6:	4606      	mov	r6, r0
 80259b8:	e7f2      	b.n	80259a0 <_dtoa_r+0xaa0>
 80259ba:	f04f 0900 	mov.w	r9, #0
 80259be:	2201      	movs	r2, #1
 80259c0:	9904      	ldr	r1, [sp, #16]
 80259c2:	4620      	mov	r0, r4
 80259c4:	f001 f80e 	bl	80269e4 <__lshift>
 80259c8:	4639      	mov	r1, r7
 80259ca:	9004      	str	r0, [sp, #16]
 80259cc:	f001 f85e 	bl	8026a8c <__mcmp>
 80259d0:	2800      	cmp	r0, #0
 80259d2:	dcb6      	bgt.n	8025942 <_dtoa_r+0xa42>
 80259d4:	d102      	bne.n	80259dc <_dtoa_r+0xadc>
 80259d6:	f018 0f01 	tst.w	r8, #1
 80259da:	d1b2      	bne.n	8025942 <_dtoa_r+0xa42>
 80259dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80259e0:	2b30      	cmp	r3, #48	; 0x30
 80259e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80259e6:	f47f af0a 	bne.w	80257fe <_dtoa_r+0x8fe>
 80259ea:	4615      	mov	r5, r2
 80259ec:	e7f6      	b.n	80259dc <_dtoa_r+0xadc>
 80259ee:	4593      	cmp	fp, r2
 80259f0:	d105      	bne.n	80259fe <_dtoa_r+0xafe>
 80259f2:	2331      	movs	r3, #49	; 0x31
 80259f4:	f10a 0a01 	add.w	sl, sl, #1
 80259f8:	f88b 3000 	strb.w	r3, [fp]
 80259fc:	e6ff      	b.n	80257fe <_dtoa_r+0x8fe>
 80259fe:	4615      	mov	r5, r2
 8025a00:	e79f      	b.n	8025942 <_dtoa_r+0xa42>
 8025a02:	f8df b064 	ldr.w	fp, [pc, #100]	; 8025a68 <_dtoa_r+0xb68>
 8025a06:	e007      	b.n	8025a18 <_dtoa_r+0xb18>
 8025a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025a0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8025a6c <_dtoa_r+0xb6c>
 8025a0e:	b11b      	cbz	r3, 8025a18 <_dtoa_r+0xb18>
 8025a10:	f10b 0308 	add.w	r3, fp, #8
 8025a14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025a16:	6013      	str	r3, [r2, #0]
 8025a18:	4658      	mov	r0, fp
 8025a1a:	b017      	add	sp, #92	; 0x5c
 8025a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a20:	9b06      	ldr	r3, [sp, #24]
 8025a22:	2b01      	cmp	r3, #1
 8025a24:	f77f ae35 	ble.w	8025692 <_dtoa_r+0x792>
 8025a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a2a:	9307      	str	r3, [sp, #28]
 8025a2c:	e649      	b.n	80256c2 <_dtoa_r+0x7c2>
 8025a2e:	9b02      	ldr	r3, [sp, #8]
 8025a30:	2b00      	cmp	r3, #0
 8025a32:	dc03      	bgt.n	8025a3c <_dtoa_r+0xb3c>
 8025a34:	9b06      	ldr	r3, [sp, #24]
 8025a36:	2b02      	cmp	r3, #2
 8025a38:	f73f aecc 	bgt.w	80257d4 <_dtoa_r+0x8d4>
 8025a3c:	465d      	mov	r5, fp
 8025a3e:	4639      	mov	r1, r7
 8025a40:	9804      	ldr	r0, [sp, #16]
 8025a42:	f7ff f9d1 	bl	8024de8 <quorem>
 8025a46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8025a4a:	f805 8b01 	strb.w	r8, [r5], #1
 8025a4e:	9a02      	ldr	r2, [sp, #8]
 8025a50:	eba5 030b 	sub.w	r3, r5, fp
 8025a54:	429a      	cmp	r2, r3
 8025a56:	ddb0      	ble.n	80259ba <_dtoa_r+0xaba>
 8025a58:	2300      	movs	r3, #0
 8025a5a:	220a      	movs	r2, #10
 8025a5c:	9904      	ldr	r1, [sp, #16]
 8025a5e:	4620      	mov	r0, r4
 8025a60:	f000 fe0b 	bl	802667a <__multadd>
 8025a64:	9004      	str	r0, [sp, #16]
 8025a66:	e7ea      	b.n	8025a3e <_dtoa_r+0xb3e>
 8025a68:	0803217d 	.word	0x0803217d
 8025a6c:	080333c5 	.word	0x080333c5

08025a70 <__sflush_r>:
 8025a70:	898a      	ldrh	r2, [r1, #12]
 8025a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a76:	4605      	mov	r5, r0
 8025a78:	0710      	lsls	r0, r2, #28
 8025a7a:	460c      	mov	r4, r1
 8025a7c:	d458      	bmi.n	8025b30 <__sflush_r+0xc0>
 8025a7e:	684b      	ldr	r3, [r1, #4]
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	dc05      	bgt.n	8025a90 <__sflush_r+0x20>
 8025a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025a86:	2b00      	cmp	r3, #0
 8025a88:	dc02      	bgt.n	8025a90 <__sflush_r+0x20>
 8025a8a:	2000      	movs	r0, #0
 8025a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a92:	2e00      	cmp	r6, #0
 8025a94:	d0f9      	beq.n	8025a8a <__sflush_r+0x1a>
 8025a96:	2300      	movs	r3, #0
 8025a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025a9c:	682f      	ldr	r7, [r5, #0]
 8025a9e:	6a21      	ldr	r1, [r4, #32]
 8025aa0:	602b      	str	r3, [r5, #0]
 8025aa2:	d032      	beq.n	8025b0a <__sflush_r+0x9a>
 8025aa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025aa6:	89a3      	ldrh	r3, [r4, #12]
 8025aa8:	075a      	lsls	r2, r3, #29
 8025aaa:	d505      	bpl.n	8025ab8 <__sflush_r+0x48>
 8025aac:	6863      	ldr	r3, [r4, #4]
 8025aae:	1ac0      	subs	r0, r0, r3
 8025ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025ab2:	b10b      	cbz	r3, 8025ab8 <__sflush_r+0x48>
 8025ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025ab6:	1ac0      	subs	r0, r0, r3
 8025ab8:	2300      	movs	r3, #0
 8025aba:	4602      	mov	r2, r0
 8025abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025abe:	6a21      	ldr	r1, [r4, #32]
 8025ac0:	4628      	mov	r0, r5
 8025ac2:	47b0      	blx	r6
 8025ac4:	1c43      	adds	r3, r0, #1
 8025ac6:	89a3      	ldrh	r3, [r4, #12]
 8025ac8:	d106      	bne.n	8025ad8 <__sflush_r+0x68>
 8025aca:	6829      	ldr	r1, [r5, #0]
 8025acc:	291d      	cmp	r1, #29
 8025ace:	d848      	bhi.n	8025b62 <__sflush_r+0xf2>
 8025ad0:	4a29      	ldr	r2, [pc, #164]	; (8025b78 <__sflush_r+0x108>)
 8025ad2:	40ca      	lsrs	r2, r1
 8025ad4:	07d6      	lsls	r6, r2, #31
 8025ad6:	d544      	bpl.n	8025b62 <__sflush_r+0xf2>
 8025ad8:	2200      	movs	r2, #0
 8025ada:	6062      	str	r2, [r4, #4]
 8025adc:	04d9      	lsls	r1, r3, #19
 8025ade:	6922      	ldr	r2, [r4, #16]
 8025ae0:	6022      	str	r2, [r4, #0]
 8025ae2:	d504      	bpl.n	8025aee <__sflush_r+0x7e>
 8025ae4:	1c42      	adds	r2, r0, #1
 8025ae6:	d101      	bne.n	8025aec <__sflush_r+0x7c>
 8025ae8:	682b      	ldr	r3, [r5, #0]
 8025aea:	b903      	cbnz	r3, 8025aee <__sflush_r+0x7e>
 8025aec:	6560      	str	r0, [r4, #84]	; 0x54
 8025aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025af0:	602f      	str	r7, [r5, #0]
 8025af2:	2900      	cmp	r1, #0
 8025af4:	d0c9      	beq.n	8025a8a <__sflush_r+0x1a>
 8025af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025afa:	4299      	cmp	r1, r3
 8025afc:	d002      	beq.n	8025b04 <__sflush_r+0x94>
 8025afe:	4628      	mov	r0, r5
 8025b00:	f7fc fec0 	bl	8022884 <_free_r>
 8025b04:	2000      	movs	r0, #0
 8025b06:	6360      	str	r0, [r4, #52]	; 0x34
 8025b08:	e7c0      	b.n	8025a8c <__sflush_r+0x1c>
 8025b0a:	2301      	movs	r3, #1
 8025b0c:	4628      	mov	r0, r5
 8025b0e:	47b0      	blx	r6
 8025b10:	1c41      	adds	r1, r0, #1
 8025b12:	d1c8      	bne.n	8025aa6 <__sflush_r+0x36>
 8025b14:	682b      	ldr	r3, [r5, #0]
 8025b16:	2b00      	cmp	r3, #0
 8025b18:	d0c5      	beq.n	8025aa6 <__sflush_r+0x36>
 8025b1a:	2b1d      	cmp	r3, #29
 8025b1c:	d001      	beq.n	8025b22 <__sflush_r+0xb2>
 8025b1e:	2b16      	cmp	r3, #22
 8025b20:	d101      	bne.n	8025b26 <__sflush_r+0xb6>
 8025b22:	602f      	str	r7, [r5, #0]
 8025b24:	e7b1      	b.n	8025a8a <__sflush_r+0x1a>
 8025b26:	89a3      	ldrh	r3, [r4, #12]
 8025b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b2c:	81a3      	strh	r3, [r4, #12]
 8025b2e:	e7ad      	b.n	8025a8c <__sflush_r+0x1c>
 8025b30:	690f      	ldr	r7, [r1, #16]
 8025b32:	2f00      	cmp	r7, #0
 8025b34:	d0a9      	beq.n	8025a8a <__sflush_r+0x1a>
 8025b36:	0793      	lsls	r3, r2, #30
 8025b38:	680e      	ldr	r6, [r1, #0]
 8025b3a:	bf08      	it	eq
 8025b3c:	694b      	ldreq	r3, [r1, #20]
 8025b3e:	600f      	str	r7, [r1, #0]
 8025b40:	bf18      	it	ne
 8025b42:	2300      	movne	r3, #0
 8025b44:	eba6 0807 	sub.w	r8, r6, r7
 8025b48:	608b      	str	r3, [r1, #8]
 8025b4a:	f1b8 0f00 	cmp.w	r8, #0
 8025b4e:	dd9c      	ble.n	8025a8a <__sflush_r+0x1a>
 8025b50:	4643      	mov	r3, r8
 8025b52:	463a      	mov	r2, r7
 8025b54:	6a21      	ldr	r1, [r4, #32]
 8025b56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025b58:	4628      	mov	r0, r5
 8025b5a:	47b0      	blx	r6
 8025b5c:	2800      	cmp	r0, #0
 8025b5e:	dc06      	bgt.n	8025b6e <__sflush_r+0xfe>
 8025b60:	89a3      	ldrh	r3, [r4, #12]
 8025b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b66:	81a3      	strh	r3, [r4, #12]
 8025b68:	f04f 30ff 	mov.w	r0, #4294967295
 8025b6c:	e78e      	b.n	8025a8c <__sflush_r+0x1c>
 8025b6e:	4407      	add	r7, r0
 8025b70:	eba8 0800 	sub.w	r8, r8, r0
 8025b74:	e7e9      	b.n	8025b4a <__sflush_r+0xda>
 8025b76:	bf00      	nop
 8025b78:	20400001 	.word	0x20400001

08025b7c <_fflush_r>:
 8025b7c:	b538      	push	{r3, r4, r5, lr}
 8025b7e:	690b      	ldr	r3, [r1, #16]
 8025b80:	4605      	mov	r5, r0
 8025b82:	460c      	mov	r4, r1
 8025b84:	b1db      	cbz	r3, 8025bbe <_fflush_r+0x42>
 8025b86:	b118      	cbz	r0, 8025b90 <_fflush_r+0x14>
 8025b88:	6983      	ldr	r3, [r0, #24]
 8025b8a:	b90b      	cbnz	r3, 8025b90 <_fflush_r+0x14>
 8025b8c:	f000 f872 	bl	8025c74 <__sinit>
 8025b90:	4b0c      	ldr	r3, [pc, #48]	; (8025bc4 <_fflush_r+0x48>)
 8025b92:	429c      	cmp	r4, r3
 8025b94:	d109      	bne.n	8025baa <_fflush_r+0x2e>
 8025b96:	686c      	ldr	r4, [r5, #4]
 8025b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b9c:	b17b      	cbz	r3, 8025bbe <_fflush_r+0x42>
 8025b9e:	4621      	mov	r1, r4
 8025ba0:	4628      	mov	r0, r5
 8025ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025ba6:	f7ff bf63 	b.w	8025a70 <__sflush_r>
 8025baa:	4b07      	ldr	r3, [pc, #28]	; (8025bc8 <_fflush_r+0x4c>)
 8025bac:	429c      	cmp	r4, r3
 8025bae:	d101      	bne.n	8025bb4 <_fflush_r+0x38>
 8025bb0:	68ac      	ldr	r4, [r5, #8]
 8025bb2:	e7f1      	b.n	8025b98 <_fflush_r+0x1c>
 8025bb4:	4b05      	ldr	r3, [pc, #20]	; (8025bcc <_fflush_r+0x50>)
 8025bb6:	429c      	cmp	r4, r3
 8025bb8:	bf08      	it	eq
 8025bba:	68ec      	ldreq	r4, [r5, #12]
 8025bbc:	e7ec      	b.n	8025b98 <_fflush_r+0x1c>
 8025bbe:	2000      	movs	r0, #0
 8025bc0:	bd38      	pop	{r3, r4, r5, pc}
 8025bc2:	bf00      	nop
 8025bc4:	080333f4 	.word	0x080333f4
 8025bc8:	08033414 	.word	0x08033414
 8025bcc:	080333d4 	.word	0x080333d4

08025bd0 <fflush>:
 8025bd0:	4601      	mov	r1, r0
 8025bd2:	b920      	cbnz	r0, 8025bde <fflush+0xe>
 8025bd4:	4b04      	ldr	r3, [pc, #16]	; (8025be8 <fflush+0x18>)
 8025bd6:	4905      	ldr	r1, [pc, #20]	; (8025bec <fflush+0x1c>)
 8025bd8:	6818      	ldr	r0, [r3, #0]
 8025bda:	f000 b8d3 	b.w	8025d84 <_fwalk_reent>
 8025bde:	4b04      	ldr	r3, [pc, #16]	; (8025bf0 <fflush+0x20>)
 8025be0:	6818      	ldr	r0, [r3, #0]
 8025be2:	f7ff bfcb 	b.w	8025b7c <_fflush_r>
 8025be6:	bf00      	nop
 8025be8:	08033184 	.word	0x08033184
 8025bec:	08025b7d 	.word	0x08025b7d
 8025bf0:	200005e4 	.word	0x200005e4

08025bf4 <std>:
 8025bf4:	2300      	movs	r3, #0
 8025bf6:	b510      	push	{r4, lr}
 8025bf8:	4604      	mov	r4, r0
 8025bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8025bfe:	6083      	str	r3, [r0, #8]
 8025c00:	8181      	strh	r1, [r0, #12]
 8025c02:	6643      	str	r3, [r0, #100]	; 0x64
 8025c04:	81c2      	strh	r2, [r0, #14]
 8025c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c0a:	6183      	str	r3, [r0, #24]
 8025c0c:	4619      	mov	r1, r3
 8025c0e:	2208      	movs	r2, #8
 8025c10:	305c      	adds	r0, #92	; 0x5c
 8025c12:	f7fc fb8c 	bl	802232e <memset>
 8025c16:	4b05      	ldr	r3, [pc, #20]	; (8025c2c <std+0x38>)
 8025c18:	6263      	str	r3, [r4, #36]	; 0x24
 8025c1a:	4b05      	ldr	r3, [pc, #20]	; (8025c30 <std+0x3c>)
 8025c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8025c1e:	4b05      	ldr	r3, [pc, #20]	; (8025c34 <std+0x40>)
 8025c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025c22:	4b05      	ldr	r3, [pc, #20]	; (8025c38 <std+0x44>)
 8025c24:	6224      	str	r4, [r4, #32]
 8025c26:	6323      	str	r3, [r4, #48]	; 0x30
 8025c28:	bd10      	pop	{r4, pc}
 8025c2a:	bf00      	nop
 8025c2c:	080237a1 	.word	0x080237a1
 8025c30:	080237c7 	.word	0x080237c7
 8025c34:	080237ff 	.word	0x080237ff
 8025c38:	08023823 	.word	0x08023823

08025c3c <_cleanup_r>:
 8025c3c:	4901      	ldr	r1, [pc, #4]	; (8025c44 <_cleanup_r+0x8>)
 8025c3e:	f000 b8a1 	b.w	8025d84 <_fwalk_reent>
 8025c42:	bf00      	nop
 8025c44:	08025b7d 	.word	0x08025b7d

08025c48 <__sfmoreglue>:
 8025c48:	b570      	push	{r4, r5, r6, lr}
 8025c4a:	1e4a      	subs	r2, r1, #1
 8025c4c:	2568      	movs	r5, #104	; 0x68
 8025c4e:	4355      	muls	r5, r2
 8025c50:	460e      	mov	r6, r1
 8025c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025c56:	f7fc fe63 	bl	8022920 <_malloc_r>
 8025c5a:	4604      	mov	r4, r0
 8025c5c:	b140      	cbz	r0, 8025c70 <__sfmoreglue+0x28>
 8025c5e:	2100      	movs	r1, #0
 8025c60:	e9c0 1600 	strd	r1, r6, [r0]
 8025c64:	300c      	adds	r0, #12
 8025c66:	60a0      	str	r0, [r4, #8]
 8025c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025c6c:	f7fc fb5f 	bl	802232e <memset>
 8025c70:	4620      	mov	r0, r4
 8025c72:	bd70      	pop	{r4, r5, r6, pc}

08025c74 <__sinit>:
 8025c74:	6983      	ldr	r3, [r0, #24]
 8025c76:	b510      	push	{r4, lr}
 8025c78:	4604      	mov	r4, r0
 8025c7a:	bb33      	cbnz	r3, 8025cca <__sinit+0x56>
 8025c7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025c80:	6503      	str	r3, [r0, #80]	; 0x50
 8025c82:	4b12      	ldr	r3, [pc, #72]	; (8025ccc <__sinit+0x58>)
 8025c84:	4a12      	ldr	r2, [pc, #72]	; (8025cd0 <__sinit+0x5c>)
 8025c86:	681b      	ldr	r3, [r3, #0]
 8025c88:	6282      	str	r2, [r0, #40]	; 0x28
 8025c8a:	4298      	cmp	r0, r3
 8025c8c:	bf04      	itt	eq
 8025c8e:	2301      	moveq	r3, #1
 8025c90:	6183      	streq	r3, [r0, #24]
 8025c92:	f000 f81f 	bl	8025cd4 <__sfp>
 8025c96:	6060      	str	r0, [r4, #4]
 8025c98:	4620      	mov	r0, r4
 8025c9a:	f000 f81b 	bl	8025cd4 <__sfp>
 8025c9e:	60a0      	str	r0, [r4, #8]
 8025ca0:	4620      	mov	r0, r4
 8025ca2:	f000 f817 	bl	8025cd4 <__sfp>
 8025ca6:	2200      	movs	r2, #0
 8025ca8:	60e0      	str	r0, [r4, #12]
 8025caa:	2104      	movs	r1, #4
 8025cac:	6860      	ldr	r0, [r4, #4]
 8025cae:	f7ff ffa1 	bl	8025bf4 <std>
 8025cb2:	2201      	movs	r2, #1
 8025cb4:	2109      	movs	r1, #9
 8025cb6:	68a0      	ldr	r0, [r4, #8]
 8025cb8:	f7ff ff9c 	bl	8025bf4 <std>
 8025cbc:	2202      	movs	r2, #2
 8025cbe:	2112      	movs	r1, #18
 8025cc0:	68e0      	ldr	r0, [r4, #12]
 8025cc2:	f7ff ff97 	bl	8025bf4 <std>
 8025cc6:	2301      	movs	r3, #1
 8025cc8:	61a3      	str	r3, [r4, #24]
 8025cca:	bd10      	pop	{r4, pc}
 8025ccc:	08033184 	.word	0x08033184
 8025cd0:	08025c3d 	.word	0x08025c3d

08025cd4 <__sfp>:
 8025cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025cd6:	4b1b      	ldr	r3, [pc, #108]	; (8025d44 <__sfp+0x70>)
 8025cd8:	681e      	ldr	r6, [r3, #0]
 8025cda:	69b3      	ldr	r3, [r6, #24]
 8025cdc:	4607      	mov	r7, r0
 8025cde:	b913      	cbnz	r3, 8025ce6 <__sfp+0x12>
 8025ce0:	4630      	mov	r0, r6
 8025ce2:	f7ff ffc7 	bl	8025c74 <__sinit>
 8025ce6:	3648      	adds	r6, #72	; 0x48
 8025ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025cec:	3b01      	subs	r3, #1
 8025cee:	d503      	bpl.n	8025cf8 <__sfp+0x24>
 8025cf0:	6833      	ldr	r3, [r6, #0]
 8025cf2:	b133      	cbz	r3, 8025d02 <__sfp+0x2e>
 8025cf4:	6836      	ldr	r6, [r6, #0]
 8025cf6:	e7f7      	b.n	8025ce8 <__sfp+0x14>
 8025cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025cfc:	b16d      	cbz	r5, 8025d1a <__sfp+0x46>
 8025cfe:	3468      	adds	r4, #104	; 0x68
 8025d00:	e7f4      	b.n	8025cec <__sfp+0x18>
 8025d02:	2104      	movs	r1, #4
 8025d04:	4638      	mov	r0, r7
 8025d06:	f7ff ff9f 	bl	8025c48 <__sfmoreglue>
 8025d0a:	6030      	str	r0, [r6, #0]
 8025d0c:	2800      	cmp	r0, #0
 8025d0e:	d1f1      	bne.n	8025cf4 <__sfp+0x20>
 8025d10:	230c      	movs	r3, #12
 8025d12:	603b      	str	r3, [r7, #0]
 8025d14:	4604      	mov	r4, r0
 8025d16:	4620      	mov	r0, r4
 8025d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d1a:	4b0b      	ldr	r3, [pc, #44]	; (8025d48 <__sfp+0x74>)
 8025d1c:	6665      	str	r5, [r4, #100]	; 0x64
 8025d1e:	e9c4 5500 	strd	r5, r5, [r4]
 8025d22:	60a5      	str	r5, [r4, #8]
 8025d24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025d28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025d2c:	2208      	movs	r2, #8
 8025d2e:	4629      	mov	r1, r5
 8025d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025d34:	f7fc fafb 	bl	802232e <memset>
 8025d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025d40:	e7e9      	b.n	8025d16 <__sfp+0x42>
 8025d42:	bf00      	nop
 8025d44:	08033184 	.word	0x08033184
 8025d48:	ffff0001 	.word	0xffff0001

08025d4c <_fwalk>:
 8025d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d50:	4688      	mov	r8, r1
 8025d52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025d56:	2600      	movs	r6, #0
 8025d58:	b914      	cbnz	r4, 8025d60 <_fwalk+0x14>
 8025d5a:	4630      	mov	r0, r6
 8025d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d60:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025d64:	3f01      	subs	r7, #1
 8025d66:	d501      	bpl.n	8025d6c <_fwalk+0x20>
 8025d68:	6824      	ldr	r4, [r4, #0]
 8025d6a:	e7f5      	b.n	8025d58 <_fwalk+0xc>
 8025d6c:	89ab      	ldrh	r3, [r5, #12]
 8025d6e:	2b01      	cmp	r3, #1
 8025d70:	d906      	bls.n	8025d80 <_fwalk+0x34>
 8025d72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025d76:	3301      	adds	r3, #1
 8025d78:	d002      	beq.n	8025d80 <_fwalk+0x34>
 8025d7a:	4628      	mov	r0, r5
 8025d7c:	47c0      	blx	r8
 8025d7e:	4306      	orrs	r6, r0
 8025d80:	3568      	adds	r5, #104	; 0x68
 8025d82:	e7ef      	b.n	8025d64 <_fwalk+0x18>

08025d84 <_fwalk_reent>:
 8025d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d88:	4680      	mov	r8, r0
 8025d8a:	4689      	mov	r9, r1
 8025d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025d90:	2600      	movs	r6, #0
 8025d92:	b914      	cbnz	r4, 8025d9a <_fwalk_reent+0x16>
 8025d94:	4630      	mov	r0, r6
 8025d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025d9e:	3f01      	subs	r7, #1
 8025da0:	d501      	bpl.n	8025da6 <_fwalk_reent+0x22>
 8025da2:	6824      	ldr	r4, [r4, #0]
 8025da4:	e7f5      	b.n	8025d92 <_fwalk_reent+0xe>
 8025da6:	89ab      	ldrh	r3, [r5, #12]
 8025da8:	2b01      	cmp	r3, #1
 8025daa:	d907      	bls.n	8025dbc <_fwalk_reent+0x38>
 8025dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025db0:	3301      	adds	r3, #1
 8025db2:	d003      	beq.n	8025dbc <_fwalk_reent+0x38>
 8025db4:	4629      	mov	r1, r5
 8025db6:	4640      	mov	r0, r8
 8025db8:	47c8      	blx	r9
 8025dba:	4306      	orrs	r6, r0
 8025dbc:	3568      	adds	r5, #104	; 0x68
 8025dbe:	e7ee      	b.n	8025d9e <_fwalk_reent+0x1a>

08025dc0 <rshift>:
 8025dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025dc2:	6906      	ldr	r6, [r0, #16]
 8025dc4:	114b      	asrs	r3, r1, #5
 8025dc6:	429e      	cmp	r6, r3
 8025dc8:	f100 0414 	add.w	r4, r0, #20
 8025dcc:	dd30      	ble.n	8025e30 <rshift+0x70>
 8025dce:	f011 011f 	ands.w	r1, r1, #31
 8025dd2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8025dd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8025dda:	d108      	bne.n	8025dee <rshift+0x2e>
 8025ddc:	4621      	mov	r1, r4
 8025dde:	42b2      	cmp	r2, r6
 8025de0:	460b      	mov	r3, r1
 8025de2:	d211      	bcs.n	8025e08 <rshift+0x48>
 8025de4:	f852 3b04 	ldr.w	r3, [r2], #4
 8025de8:	f841 3b04 	str.w	r3, [r1], #4
 8025dec:	e7f7      	b.n	8025dde <rshift+0x1e>
 8025dee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8025df2:	f1c1 0c20 	rsb	ip, r1, #32
 8025df6:	40cd      	lsrs	r5, r1
 8025df8:	3204      	adds	r2, #4
 8025dfa:	4623      	mov	r3, r4
 8025dfc:	42b2      	cmp	r2, r6
 8025dfe:	4617      	mov	r7, r2
 8025e00:	d30c      	bcc.n	8025e1c <rshift+0x5c>
 8025e02:	601d      	str	r5, [r3, #0]
 8025e04:	b105      	cbz	r5, 8025e08 <rshift+0x48>
 8025e06:	3304      	adds	r3, #4
 8025e08:	1b1a      	subs	r2, r3, r4
 8025e0a:	42a3      	cmp	r3, r4
 8025e0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8025e10:	bf08      	it	eq
 8025e12:	2300      	moveq	r3, #0
 8025e14:	6102      	str	r2, [r0, #16]
 8025e16:	bf08      	it	eq
 8025e18:	6143      	streq	r3, [r0, #20]
 8025e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025e1c:	683f      	ldr	r7, [r7, #0]
 8025e1e:	fa07 f70c 	lsl.w	r7, r7, ip
 8025e22:	433d      	orrs	r5, r7
 8025e24:	f843 5b04 	str.w	r5, [r3], #4
 8025e28:	f852 5b04 	ldr.w	r5, [r2], #4
 8025e2c:	40cd      	lsrs	r5, r1
 8025e2e:	e7e5      	b.n	8025dfc <rshift+0x3c>
 8025e30:	4623      	mov	r3, r4
 8025e32:	e7e9      	b.n	8025e08 <rshift+0x48>

08025e34 <__hexdig_fun>:
 8025e34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8025e38:	2b09      	cmp	r3, #9
 8025e3a:	d802      	bhi.n	8025e42 <__hexdig_fun+0xe>
 8025e3c:	3820      	subs	r0, #32
 8025e3e:	b2c0      	uxtb	r0, r0
 8025e40:	4770      	bx	lr
 8025e42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8025e46:	2b05      	cmp	r3, #5
 8025e48:	d801      	bhi.n	8025e4e <__hexdig_fun+0x1a>
 8025e4a:	3847      	subs	r0, #71	; 0x47
 8025e4c:	e7f7      	b.n	8025e3e <__hexdig_fun+0xa>
 8025e4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8025e52:	2b05      	cmp	r3, #5
 8025e54:	d801      	bhi.n	8025e5a <__hexdig_fun+0x26>
 8025e56:	3827      	subs	r0, #39	; 0x27
 8025e58:	e7f1      	b.n	8025e3e <__hexdig_fun+0xa>
 8025e5a:	2000      	movs	r0, #0
 8025e5c:	4770      	bx	lr

08025e5e <__gethex>:
 8025e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e62:	b08b      	sub	sp, #44	; 0x2c
 8025e64:	468a      	mov	sl, r1
 8025e66:	9002      	str	r0, [sp, #8]
 8025e68:	9816      	ldr	r0, [sp, #88]	; 0x58
 8025e6a:	9306      	str	r3, [sp, #24]
 8025e6c:	4690      	mov	r8, r2
 8025e6e:	f7fc f9eb 	bl	8022248 <__localeconv_l>
 8025e72:	6803      	ldr	r3, [r0, #0]
 8025e74:	9303      	str	r3, [sp, #12]
 8025e76:	4618      	mov	r0, r3
 8025e78:	f7da f9b4 	bl	80001e4 <strlen>
 8025e7c:	9b03      	ldr	r3, [sp, #12]
 8025e7e:	9001      	str	r0, [sp, #4]
 8025e80:	4403      	add	r3, r0
 8025e82:	f04f 0b00 	mov.w	fp, #0
 8025e86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025e8a:	9307      	str	r3, [sp, #28]
 8025e8c:	f8da 3000 	ldr.w	r3, [sl]
 8025e90:	3302      	adds	r3, #2
 8025e92:	461f      	mov	r7, r3
 8025e94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025e98:	2830      	cmp	r0, #48	; 0x30
 8025e9a:	d06c      	beq.n	8025f76 <__gethex+0x118>
 8025e9c:	f7ff ffca 	bl	8025e34 <__hexdig_fun>
 8025ea0:	4604      	mov	r4, r0
 8025ea2:	2800      	cmp	r0, #0
 8025ea4:	d16a      	bne.n	8025f7c <__gethex+0x11e>
 8025ea6:	9a01      	ldr	r2, [sp, #4]
 8025ea8:	9903      	ldr	r1, [sp, #12]
 8025eaa:	4638      	mov	r0, r7
 8025eac:	f7fd fcd2 	bl	8023854 <strncmp>
 8025eb0:	2800      	cmp	r0, #0
 8025eb2:	d166      	bne.n	8025f82 <__gethex+0x124>
 8025eb4:	9b01      	ldr	r3, [sp, #4]
 8025eb6:	5cf8      	ldrb	r0, [r7, r3]
 8025eb8:	18fe      	adds	r6, r7, r3
 8025eba:	f7ff ffbb 	bl	8025e34 <__hexdig_fun>
 8025ebe:	2800      	cmp	r0, #0
 8025ec0:	d062      	beq.n	8025f88 <__gethex+0x12a>
 8025ec2:	4633      	mov	r3, r6
 8025ec4:	7818      	ldrb	r0, [r3, #0]
 8025ec6:	2830      	cmp	r0, #48	; 0x30
 8025ec8:	461f      	mov	r7, r3
 8025eca:	f103 0301 	add.w	r3, r3, #1
 8025ece:	d0f9      	beq.n	8025ec4 <__gethex+0x66>
 8025ed0:	f7ff ffb0 	bl	8025e34 <__hexdig_fun>
 8025ed4:	fab0 f580 	clz	r5, r0
 8025ed8:	096d      	lsrs	r5, r5, #5
 8025eda:	4634      	mov	r4, r6
 8025edc:	f04f 0b01 	mov.w	fp, #1
 8025ee0:	463a      	mov	r2, r7
 8025ee2:	4616      	mov	r6, r2
 8025ee4:	3201      	adds	r2, #1
 8025ee6:	7830      	ldrb	r0, [r6, #0]
 8025ee8:	f7ff ffa4 	bl	8025e34 <__hexdig_fun>
 8025eec:	2800      	cmp	r0, #0
 8025eee:	d1f8      	bne.n	8025ee2 <__gethex+0x84>
 8025ef0:	9a01      	ldr	r2, [sp, #4]
 8025ef2:	9903      	ldr	r1, [sp, #12]
 8025ef4:	4630      	mov	r0, r6
 8025ef6:	f7fd fcad 	bl	8023854 <strncmp>
 8025efa:	b950      	cbnz	r0, 8025f12 <__gethex+0xb4>
 8025efc:	b954      	cbnz	r4, 8025f14 <__gethex+0xb6>
 8025efe:	9b01      	ldr	r3, [sp, #4]
 8025f00:	18f4      	adds	r4, r6, r3
 8025f02:	4622      	mov	r2, r4
 8025f04:	4616      	mov	r6, r2
 8025f06:	3201      	adds	r2, #1
 8025f08:	7830      	ldrb	r0, [r6, #0]
 8025f0a:	f7ff ff93 	bl	8025e34 <__hexdig_fun>
 8025f0e:	2800      	cmp	r0, #0
 8025f10:	d1f8      	bne.n	8025f04 <__gethex+0xa6>
 8025f12:	b10c      	cbz	r4, 8025f18 <__gethex+0xba>
 8025f14:	1ba4      	subs	r4, r4, r6
 8025f16:	00a4      	lsls	r4, r4, #2
 8025f18:	7833      	ldrb	r3, [r6, #0]
 8025f1a:	2b50      	cmp	r3, #80	; 0x50
 8025f1c:	d001      	beq.n	8025f22 <__gethex+0xc4>
 8025f1e:	2b70      	cmp	r3, #112	; 0x70
 8025f20:	d140      	bne.n	8025fa4 <__gethex+0x146>
 8025f22:	7873      	ldrb	r3, [r6, #1]
 8025f24:	2b2b      	cmp	r3, #43	; 0x2b
 8025f26:	d031      	beq.n	8025f8c <__gethex+0x12e>
 8025f28:	2b2d      	cmp	r3, #45	; 0x2d
 8025f2a:	d033      	beq.n	8025f94 <__gethex+0x136>
 8025f2c:	1c71      	adds	r1, r6, #1
 8025f2e:	f04f 0900 	mov.w	r9, #0
 8025f32:	7808      	ldrb	r0, [r1, #0]
 8025f34:	f7ff ff7e 	bl	8025e34 <__hexdig_fun>
 8025f38:	1e43      	subs	r3, r0, #1
 8025f3a:	b2db      	uxtb	r3, r3
 8025f3c:	2b18      	cmp	r3, #24
 8025f3e:	d831      	bhi.n	8025fa4 <__gethex+0x146>
 8025f40:	f1a0 0210 	sub.w	r2, r0, #16
 8025f44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025f48:	f7ff ff74 	bl	8025e34 <__hexdig_fun>
 8025f4c:	1e43      	subs	r3, r0, #1
 8025f4e:	b2db      	uxtb	r3, r3
 8025f50:	2b18      	cmp	r3, #24
 8025f52:	d922      	bls.n	8025f9a <__gethex+0x13c>
 8025f54:	f1b9 0f00 	cmp.w	r9, #0
 8025f58:	d000      	beq.n	8025f5c <__gethex+0xfe>
 8025f5a:	4252      	negs	r2, r2
 8025f5c:	4414      	add	r4, r2
 8025f5e:	f8ca 1000 	str.w	r1, [sl]
 8025f62:	b30d      	cbz	r5, 8025fa8 <__gethex+0x14a>
 8025f64:	f1bb 0f00 	cmp.w	fp, #0
 8025f68:	bf0c      	ite	eq
 8025f6a:	2706      	moveq	r7, #6
 8025f6c:	2700      	movne	r7, #0
 8025f6e:	4638      	mov	r0, r7
 8025f70:	b00b      	add	sp, #44	; 0x2c
 8025f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f76:	f10b 0b01 	add.w	fp, fp, #1
 8025f7a:	e78a      	b.n	8025e92 <__gethex+0x34>
 8025f7c:	2500      	movs	r5, #0
 8025f7e:	462c      	mov	r4, r5
 8025f80:	e7ae      	b.n	8025ee0 <__gethex+0x82>
 8025f82:	463e      	mov	r6, r7
 8025f84:	2501      	movs	r5, #1
 8025f86:	e7c7      	b.n	8025f18 <__gethex+0xba>
 8025f88:	4604      	mov	r4, r0
 8025f8a:	e7fb      	b.n	8025f84 <__gethex+0x126>
 8025f8c:	f04f 0900 	mov.w	r9, #0
 8025f90:	1cb1      	adds	r1, r6, #2
 8025f92:	e7ce      	b.n	8025f32 <__gethex+0xd4>
 8025f94:	f04f 0901 	mov.w	r9, #1
 8025f98:	e7fa      	b.n	8025f90 <__gethex+0x132>
 8025f9a:	230a      	movs	r3, #10
 8025f9c:	fb03 0202 	mla	r2, r3, r2, r0
 8025fa0:	3a10      	subs	r2, #16
 8025fa2:	e7cf      	b.n	8025f44 <__gethex+0xe6>
 8025fa4:	4631      	mov	r1, r6
 8025fa6:	e7da      	b.n	8025f5e <__gethex+0x100>
 8025fa8:	1bf3      	subs	r3, r6, r7
 8025faa:	3b01      	subs	r3, #1
 8025fac:	4629      	mov	r1, r5
 8025fae:	2b07      	cmp	r3, #7
 8025fb0:	dc49      	bgt.n	8026046 <__gethex+0x1e8>
 8025fb2:	9802      	ldr	r0, [sp, #8]
 8025fb4:	f000 fb16 	bl	80265e4 <_Balloc>
 8025fb8:	9b01      	ldr	r3, [sp, #4]
 8025fba:	f100 0914 	add.w	r9, r0, #20
 8025fbe:	f04f 0b00 	mov.w	fp, #0
 8025fc2:	f1c3 0301 	rsb	r3, r3, #1
 8025fc6:	4605      	mov	r5, r0
 8025fc8:	f8cd 9010 	str.w	r9, [sp, #16]
 8025fcc:	46da      	mov	sl, fp
 8025fce:	9308      	str	r3, [sp, #32]
 8025fd0:	42b7      	cmp	r7, r6
 8025fd2:	d33b      	bcc.n	802604c <__gethex+0x1ee>
 8025fd4:	9804      	ldr	r0, [sp, #16]
 8025fd6:	f840 ab04 	str.w	sl, [r0], #4
 8025fda:	eba0 0009 	sub.w	r0, r0, r9
 8025fde:	1080      	asrs	r0, r0, #2
 8025fe0:	6128      	str	r0, [r5, #16]
 8025fe2:	0147      	lsls	r7, r0, #5
 8025fe4:	4650      	mov	r0, sl
 8025fe6:	f000 fbc1 	bl	802676c <__hi0bits>
 8025fea:	f8d8 6000 	ldr.w	r6, [r8]
 8025fee:	1a3f      	subs	r7, r7, r0
 8025ff0:	42b7      	cmp	r7, r6
 8025ff2:	dd64      	ble.n	80260be <__gethex+0x260>
 8025ff4:	1bbf      	subs	r7, r7, r6
 8025ff6:	4639      	mov	r1, r7
 8025ff8:	4628      	mov	r0, r5
 8025ffa:	f000 fed1 	bl	8026da0 <__any_on>
 8025ffe:	4682      	mov	sl, r0
 8026000:	b178      	cbz	r0, 8026022 <__gethex+0x1c4>
 8026002:	1e7b      	subs	r3, r7, #1
 8026004:	1159      	asrs	r1, r3, #5
 8026006:	f003 021f 	and.w	r2, r3, #31
 802600a:	f04f 0a01 	mov.w	sl, #1
 802600e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8026012:	fa0a f202 	lsl.w	r2, sl, r2
 8026016:	420a      	tst	r2, r1
 8026018:	d003      	beq.n	8026022 <__gethex+0x1c4>
 802601a:	4553      	cmp	r3, sl
 802601c:	dc46      	bgt.n	80260ac <__gethex+0x24e>
 802601e:	f04f 0a02 	mov.w	sl, #2
 8026022:	4639      	mov	r1, r7
 8026024:	4628      	mov	r0, r5
 8026026:	f7ff fecb 	bl	8025dc0 <rshift>
 802602a:	443c      	add	r4, r7
 802602c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026030:	42a3      	cmp	r3, r4
 8026032:	da52      	bge.n	80260da <__gethex+0x27c>
 8026034:	4629      	mov	r1, r5
 8026036:	9802      	ldr	r0, [sp, #8]
 8026038:	f000 fb08 	bl	802664c <_Bfree>
 802603c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802603e:	2300      	movs	r3, #0
 8026040:	6013      	str	r3, [r2, #0]
 8026042:	27a3      	movs	r7, #163	; 0xa3
 8026044:	e793      	b.n	8025f6e <__gethex+0x110>
 8026046:	3101      	adds	r1, #1
 8026048:	105b      	asrs	r3, r3, #1
 802604a:	e7b0      	b.n	8025fae <__gethex+0x150>
 802604c:	1e73      	subs	r3, r6, #1
 802604e:	9305      	str	r3, [sp, #20]
 8026050:	9a07      	ldr	r2, [sp, #28]
 8026052:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8026056:	4293      	cmp	r3, r2
 8026058:	d018      	beq.n	802608c <__gethex+0x22e>
 802605a:	f1bb 0f20 	cmp.w	fp, #32
 802605e:	d107      	bne.n	8026070 <__gethex+0x212>
 8026060:	9b04      	ldr	r3, [sp, #16]
 8026062:	f8c3 a000 	str.w	sl, [r3]
 8026066:	3304      	adds	r3, #4
 8026068:	f04f 0a00 	mov.w	sl, #0
 802606c:	9304      	str	r3, [sp, #16]
 802606e:	46d3      	mov	fp, sl
 8026070:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8026074:	f7ff fede 	bl	8025e34 <__hexdig_fun>
 8026078:	f000 000f 	and.w	r0, r0, #15
 802607c:	fa00 f00b 	lsl.w	r0, r0, fp
 8026080:	ea4a 0a00 	orr.w	sl, sl, r0
 8026084:	f10b 0b04 	add.w	fp, fp, #4
 8026088:	9b05      	ldr	r3, [sp, #20]
 802608a:	e00d      	b.n	80260a8 <__gethex+0x24a>
 802608c:	9b05      	ldr	r3, [sp, #20]
 802608e:	9a08      	ldr	r2, [sp, #32]
 8026090:	4413      	add	r3, r2
 8026092:	42bb      	cmp	r3, r7
 8026094:	d3e1      	bcc.n	802605a <__gethex+0x1fc>
 8026096:	4618      	mov	r0, r3
 8026098:	9a01      	ldr	r2, [sp, #4]
 802609a:	9903      	ldr	r1, [sp, #12]
 802609c:	9309      	str	r3, [sp, #36]	; 0x24
 802609e:	f7fd fbd9 	bl	8023854 <strncmp>
 80260a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260a4:	2800      	cmp	r0, #0
 80260a6:	d1d8      	bne.n	802605a <__gethex+0x1fc>
 80260a8:	461e      	mov	r6, r3
 80260aa:	e791      	b.n	8025fd0 <__gethex+0x172>
 80260ac:	1eb9      	subs	r1, r7, #2
 80260ae:	4628      	mov	r0, r5
 80260b0:	f000 fe76 	bl	8026da0 <__any_on>
 80260b4:	2800      	cmp	r0, #0
 80260b6:	d0b2      	beq.n	802601e <__gethex+0x1c0>
 80260b8:	f04f 0a03 	mov.w	sl, #3
 80260bc:	e7b1      	b.n	8026022 <__gethex+0x1c4>
 80260be:	da09      	bge.n	80260d4 <__gethex+0x276>
 80260c0:	1bf7      	subs	r7, r6, r7
 80260c2:	4629      	mov	r1, r5
 80260c4:	463a      	mov	r2, r7
 80260c6:	9802      	ldr	r0, [sp, #8]
 80260c8:	f000 fc8c 	bl	80269e4 <__lshift>
 80260cc:	1be4      	subs	r4, r4, r7
 80260ce:	4605      	mov	r5, r0
 80260d0:	f100 0914 	add.w	r9, r0, #20
 80260d4:	f04f 0a00 	mov.w	sl, #0
 80260d8:	e7a8      	b.n	802602c <__gethex+0x1ce>
 80260da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80260de:	42a0      	cmp	r0, r4
 80260e0:	dd6a      	ble.n	80261b8 <__gethex+0x35a>
 80260e2:	1b04      	subs	r4, r0, r4
 80260e4:	42a6      	cmp	r6, r4
 80260e6:	dc2e      	bgt.n	8026146 <__gethex+0x2e8>
 80260e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80260ec:	2b02      	cmp	r3, #2
 80260ee:	d022      	beq.n	8026136 <__gethex+0x2d8>
 80260f0:	2b03      	cmp	r3, #3
 80260f2:	d024      	beq.n	802613e <__gethex+0x2e0>
 80260f4:	2b01      	cmp	r3, #1
 80260f6:	d115      	bne.n	8026124 <__gethex+0x2c6>
 80260f8:	42a6      	cmp	r6, r4
 80260fa:	d113      	bne.n	8026124 <__gethex+0x2c6>
 80260fc:	2e01      	cmp	r6, #1
 80260fe:	dc0b      	bgt.n	8026118 <__gethex+0x2ba>
 8026100:	9a06      	ldr	r2, [sp, #24]
 8026102:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026106:	6013      	str	r3, [r2, #0]
 8026108:	2301      	movs	r3, #1
 802610a:	612b      	str	r3, [r5, #16]
 802610c:	f8c9 3000 	str.w	r3, [r9]
 8026110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026112:	2762      	movs	r7, #98	; 0x62
 8026114:	601d      	str	r5, [r3, #0]
 8026116:	e72a      	b.n	8025f6e <__gethex+0x110>
 8026118:	1e71      	subs	r1, r6, #1
 802611a:	4628      	mov	r0, r5
 802611c:	f000 fe40 	bl	8026da0 <__any_on>
 8026120:	2800      	cmp	r0, #0
 8026122:	d1ed      	bne.n	8026100 <__gethex+0x2a2>
 8026124:	4629      	mov	r1, r5
 8026126:	9802      	ldr	r0, [sp, #8]
 8026128:	f000 fa90 	bl	802664c <_Bfree>
 802612c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802612e:	2300      	movs	r3, #0
 8026130:	6013      	str	r3, [r2, #0]
 8026132:	2750      	movs	r7, #80	; 0x50
 8026134:	e71b      	b.n	8025f6e <__gethex+0x110>
 8026136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026138:	2b00      	cmp	r3, #0
 802613a:	d0e1      	beq.n	8026100 <__gethex+0x2a2>
 802613c:	e7f2      	b.n	8026124 <__gethex+0x2c6>
 802613e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026140:	2b00      	cmp	r3, #0
 8026142:	d1dd      	bne.n	8026100 <__gethex+0x2a2>
 8026144:	e7ee      	b.n	8026124 <__gethex+0x2c6>
 8026146:	1e67      	subs	r7, r4, #1
 8026148:	f1ba 0f00 	cmp.w	sl, #0
 802614c:	d131      	bne.n	80261b2 <__gethex+0x354>
 802614e:	b127      	cbz	r7, 802615a <__gethex+0x2fc>
 8026150:	4639      	mov	r1, r7
 8026152:	4628      	mov	r0, r5
 8026154:	f000 fe24 	bl	8026da0 <__any_on>
 8026158:	4682      	mov	sl, r0
 802615a:	117a      	asrs	r2, r7, #5
 802615c:	2301      	movs	r3, #1
 802615e:	f007 071f 	and.w	r7, r7, #31
 8026162:	fa03 f707 	lsl.w	r7, r3, r7
 8026166:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 802616a:	4621      	mov	r1, r4
 802616c:	421f      	tst	r7, r3
 802616e:	4628      	mov	r0, r5
 8026170:	bf18      	it	ne
 8026172:	f04a 0a02 	orrne.w	sl, sl, #2
 8026176:	1b36      	subs	r6, r6, r4
 8026178:	f7ff fe22 	bl	8025dc0 <rshift>
 802617c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8026180:	2702      	movs	r7, #2
 8026182:	f1ba 0f00 	cmp.w	sl, #0
 8026186:	d048      	beq.n	802621a <__gethex+0x3bc>
 8026188:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802618c:	2b02      	cmp	r3, #2
 802618e:	d015      	beq.n	80261bc <__gethex+0x35e>
 8026190:	2b03      	cmp	r3, #3
 8026192:	d017      	beq.n	80261c4 <__gethex+0x366>
 8026194:	2b01      	cmp	r3, #1
 8026196:	d109      	bne.n	80261ac <__gethex+0x34e>
 8026198:	f01a 0f02 	tst.w	sl, #2
 802619c:	d006      	beq.n	80261ac <__gethex+0x34e>
 802619e:	f8d9 3000 	ldr.w	r3, [r9]
 80261a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80261a6:	f01a 0f01 	tst.w	sl, #1
 80261aa:	d10e      	bne.n	80261ca <__gethex+0x36c>
 80261ac:	f047 0710 	orr.w	r7, r7, #16
 80261b0:	e033      	b.n	802621a <__gethex+0x3bc>
 80261b2:	f04f 0a01 	mov.w	sl, #1
 80261b6:	e7d0      	b.n	802615a <__gethex+0x2fc>
 80261b8:	2701      	movs	r7, #1
 80261ba:	e7e2      	b.n	8026182 <__gethex+0x324>
 80261bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80261be:	f1c3 0301 	rsb	r3, r3, #1
 80261c2:	9315      	str	r3, [sp, #84]	; 0x54
 80261c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80261c6:	2b00      	cmp	r3, #0
 80261c8:	d0f0      	beq.n	80261ac <__gethex+0x34e>
 80261ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80261ce:	f105 0314 	add.w	r3, r5, #20
 80261d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80261d6:	eb03 010a 	add.w	r1, r3, sl
 80261da:	f04f 0c00 	mov.w	ip, #0
 80261de:	4618      	mov	r0, r3
 80261e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80261e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80261e8:	d01c      	beq.n	8026224 <__gethex+0x3c6>
 80261ea:	3201      	adds	r2, #1
 80261ec:	6002      	str	r2, [r0, #0]
 80261ee:	2f02      	cmp	r7, #2
 80261f0:	f105 0314 	add.w	r3, r5, #20
 80261f4:	d138      	bne.n	8026268 <__gethex+0x40a>
 80261f6:	f8d8 2000 	ldr.w	r2, [r8]
 80261fa:	3a01      	subs	r2, #1
 80261fc:	42b2      	cmp	r2, r6
 80261fe:	d10a      	bne.n	8026216 <__gethex+0x3b8>
 8026200:	1171      	asrs	r1, r6, #5
 8026202:	2201      	movs	r2, #1
 8026204:	f006 061f 	and.w	r6, r6, #31
 8026208:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802620c:	fa02 f606 	lsl.w	r6, r2, r6
 8026210:	421e      	tst	r6, r3
 8026212:	bf18      	it	ne
 8026214:	4617      	movne	r7, r2
 8026216:	f047 0720 	orr.w	r7, r7, #32
 802621a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802621c:	601d      	str	r5, [r3, #0]
 802621e:	9b06      	ldr	r3, [sp, #24]
 8026220:	601c      	str	r4, [r3, #0]
 8026222:	e6a4      	b.n	8025f6e <__gethex+0x110>
 8026224:	4299      	cmp	r1, r3
 8026226:	f843 cc04 	str.w	ip, [r3, #-4]
 802622a:	d8d8      	bhi.n	80261de <__gethex+0x380>
 802622c:	68ab      	ldr	r3, [r5, #8]
 802622e:	4599      	cmp	r9, r3
 8026230:	db12      	blt.n	8026258 <__gethex+0x3fa>
 8026232:	6869      	ldr	r1, [r5, #4]
 8026234:	9802      	ldr	r0, [sp, #8]
 8026236:	3101      	adds	r1, #1
 8026238:	f000 f9d4 	bl	80265e4 <_Balloc>
 802623c:	692a      	ldr	r2, [r5, #16]
 802623e:	3202      	adds	r2, #2
 8026240:	f105 010c 	add.w	r1, r5, #12
 8026244:	4683      	mov	fp, r0
 8026246:	0092      	lsls	r2, r2, #2
 8026248:	300c      	adds	r0, #12
 802624a:	f7fc f84c 	bl	80222e6 <memcpy>
 802624e:	4629      	mov	r1, r5
 8026250:	9802      	ldr	r0, [sp, #8]
 8026252:	f000 f9fb 	bl	802664c <_Bfree>
 8026256:	465d      	mov	r5, fp
 8026258:	692b      	ldr	r3, [r5, #16]
 802625a:	1c5a      	adds	r2, r3, #1
 802625c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8026260:	612a      	str	r2, [r5, #16]
 8026262:	2201      	movs	r2, #1
 8026264:	615a      	str	r2, [r3, #20]
 8026266:	e7c2      	b.n	80261ee <__gethex+0x390>
 8026268:	692a      	ldr	r2, [r5, #16]
 802626a:	454a      	cmp	r2, r9
 802626c:	dd0b      	ble.n	8026286 <__gethex+0x428>
 802626e:	2101      	movs	r1, #1
 8026270:	4628      	mov	r0, r5
 8026272:	f7ff fda5 	bl	8025dc0 <rshift>
 8026276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802627a:	3401      	adds	r4, #1
 802627c:	42a3      	cmp	r3, r4
 802627e:	f6ff aed9 	blt.w	8026034 <__gethex+0x1d6>
 8026282:	2701      	movs	r7, #1
 8026284:	e7c7      	b.n	8026216 <__gethex+0x3b8>
 8026286:	f016 061f 	ands.w	r6, r6, #31
 802628a:	d0fa      	beq.n	8026282 <__gethex+0x424>
 802628c:	449a      	add	sl, r3
 802628e:	f1c6 0620 	rsb	r6, r6, #32
 8026292:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8026296:	f000 fa69 	bl	802676c <__hi0bits>
 802629a:	42b0      	cmp	r0, r6
 802629c:	dbe7      	blt.n	802626e <__gethex+0x410>
 802629e:	e7f0      	b.n	8026282 <__gethex+0x424>

080262a0 <L_shift>:
 80262a0:	f1c2 0208 	rsb	r2, r2, #8
 80262a4:	0092      	lsls	r2, r2, #2
 80262a6:	b570      	push	{r4, r5, r6, lr}
 80262a8:	f1c2 0620 	rsb	r6, r2, #32
 80262ac:	6843      	ldr	r3, [r0, #4]
 80262ae:	6804      	ldr	r4, [r0, #0]
 80262b0:	fa03 f506 	lsl.w	r5, r3, r6
 80262b4:	432c      	orrs	r4, r5
 80262b6:	40d3      	lsrs	r3, r2
 80262b8:	6004      	str	r4, [r0, #0]
 80262ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80262be:	4288      	cmp	r0, r1
 80262c0:	d3f4      	bcc.n	80262ac <L_shift+0xc>
 80262c2:	bd70      	pop	{r4, r5, r6, pc}

080262c4 <__match>:
 80262c4:	b530      	push	{r4, r5, lr}
 80262c6:	6803      	ldr	r3, [r0, #0]
 80262c8:	3301      	adds	r3, #1
 80262ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80262ce:	b914      	cbnz	r4, 80262d6 <__match+0x12>
 80262d0:	6003      	str	r3, [r0, #0]
 80262d2:	2001      	movs	r0, #1
 80262d4:	bd30      	pop	{r4, r5, pc}
 80262d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80262da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80262de:	2d19      	cmp	r5, #25
 80262e0:	bf98      	it	ls
 80262e2:	3220      	addls	r2, #32
 80262e4:	42a2      	cmp	r2, r4
 80262e6:	d0f0      	beq.n	80262ca <__match+0x6>
 80262e8:	2000      	movs	r0, #0
 80262ea:	e7f3      	b.n	80262d4 <__match+0x10>

080262ec <__hexnan>:
 80262ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262f0:	680b      	ldr	r3, [r1, #0]
 80262f2:	6801      	ldr	r1, [r0, #0]
 80262f4:	115f      	asrs	r7, r3, #5
 80262f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80262fa:	f013 031f 	ands.w	r3, r3, #31
 80262fe:	b087      	sub	sp, #28
 8026300:	bf18      	it	ne
 8026302:	3704      	addne	r7, #4
 8026304:	2500      	movs	r5, #0
 8026306:	1f3e      	subs	r6, r7, #4
 8026308:	4682      	mov	sl, r0
 802630a:	4690      	mov	r8, r2
 802630c:	9301      	str	r3, [sp, #4]
 802630e:	f847 5c04 	str.w	r5, [r7, #-4]
 8026312:	46b1      	mov	r9, r6
 8026314:	4634      	mov	r4, r6
 8026316:	9502      	str	r5, [sp, #8]
 8026318:	46ab      	mov	fp, r5
 802631a:	784a      	ldrb	r2, [r1, #1]
 802631c:	1c4b      	adds	r3, r1, #1
 802631e:	9303      	str	r3, [sp, #12]
 8026320:	b342      	cbz	r2, 8026374 <__hexnan+0x88>
 8026322:	4610      	mov	r0, r2
 8026324:	9105      	str	r1, [sp, #20]
 8026326:	9204      	str	r2, [sp, #16]
 8026328:	f7ff fd84 	bl	8025e34 <__hexdig_fun>
 802632c:	2800      	cmp	r0, #0
 802632e:	d143      	bne.n	80263b8 <__hexnan+0xcc>
 8026330:	9a04      	ldr	r2, [sp, #16]
 8026332:	9905      	ldr	r1, [sp, #20]
 8026334:	2a20      	cmp	r2, #32
 8026336:	d818      	bhi.n	802636a <__hexnan+0x7e>
 8026338:	9b02      	ldr	r3, [sp, #8]
 802633a:	459b      	cmp	fp, r3
 802633c:	dd13      	ble.n	8026366 <__hexnan+0x7a>
 802633e:	454c      	cmp	r4, r9
 8026340:	d206      	bcs.n	8026350 <__hexnan+0x64>
 8026342:	2d07      	cmp	r5, #7
 8026344:	dc04      	bgt.n	8026350 <__hexnan+0x64>
 8026346:	462a      	mov	r2, r5
 8026348:	4649      	mov	r1, r9
 802634a:	4620      	mov	r0, r4
 802634c:	f7ff ffa8 	bl	80262a0 <L_shift>
 8026350:	4544      	cmp	r4, r8
 8026352:	d944      	bls.n	80263de <__hexnan+0xf2>
 8026354:	2300      	movs	r3, #0
 8026356:	f1a4 0904 	sub.w	r9, r4, #4
 802635a:	f844 3c04 	str.w	r3, [r4, #-4]
 802635e:	f8cd b008 	str.w	fp, [sp, #8]
 8026362:	464c      	mov	r4, r9
 8026364:	461d      	mov	r5, r3
 8026366:	9903      	ldr	r1, [sp, #12]
 8026368:	e7d7      	b.n	802631a <__hexnan+0x2e>
 802636a:	2a29      	cmp	r2, #41	; 0x29
 802636c:	d14a      	bne.n	8026404 <__hexnan+0x118>
 802636e:	3102      	adds	r1, #2
 8026370:	f8ca 1000 	str.w	r1, [sl]
 8026374:	f1bb 0f00 	cmp.w	fp, #0
 8026378:	d044      	beq.n	8026404 <__hexnan+0x118>
 802637a:	454c      	cmp	r4, r9
 802637c:	d206      	bcs.n	802638c <__hexnan+0xa0>
 802637e:	2d07      	cmp	r5, #7
 8026380:	dc04      	bgt.n	802638c <__hexnan+0xa0>
 8026382:	462a      	mov	r2, r5
 8026384:	4649      	mov	r1, r9
 8026386:	4620      	mov	r0, r4
 8026388:	f7ff ff8a 	bl	80262a0 <L_shift>
 802638c:	4544      	cmp	r4, r8
 802638e:	d928      	bls.n	80263e2 <__hexnan+0xf6>
 8026390:	4643      	mov	r3, r8
 8026392:	f854 2b04 	ldr.w	r2, [r4], #4
 8026396:	f843 2b04 	str.w	r2, [r3], #4
 802639a:	42a6      	cmp	r6, r4
 802639c:	d2f9      	bcs.n	8026392 <__hexnan+0xa6>
 802639e:	2200      	movs	r2, #0
 80263a0:	f843 2b04 	str.w	r2, [r3], #4
 80263a4:	429e      	cmp	r6, r3
 80263a6:	d2fb      	bcs.n	80263a0 <__hexnan+0xb4>
 80263a8:	6833      	ldr	r3, [r6, #0]
 80263aa:	b91b      	cbnz	r3, 80263b4 <__hexnan+0xc8>
 80263ac:	4546      	cmp	r6, r8
 80263ae:	d127      	bne.n	8026400 <__hexnan+0x114>
 80263b0:	2301      	movs	r3, #1
 80263b2:	6033      	str	r3, [r6, #0]
 80263b4:	2005      	movs	r0, #5
 80263b6:	e026      	b.n	8026406 <__hexnan+0x11a>
 80263b8:	3501      	adds	r5, #1
 80263ba:	2d08      	cmp	r5, #8
 80263bc:	f10b 0b01 	add.w	fp, fp, #1
 80263c0:	dd06      	ble.n	80263d0 <__hexnan+0xe4>
 80263c2:	4544      	cmp	r4, r8
 80263c4:	d9cf      	bls.n	8026366 <__hexnan+0x7a>
 80263c6:	2300      	movs	r3, #0
 80263c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80263cc:	2501      	movs	r5, #1
 80263ce:	3c04      	subs	r4, #4
 80263d0:	6822      	ldr	r2, [r4, #0]
 80263d2:	f000 000f 	and.w	r0, r0, #15
 80263d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80263da:	6020      	str	r0, [r4, #0]
 80263dc:	e7c3      	b.n	8026366 <__hexnan+0x7a>
 80263de:	2508      	movs	r5, #8
 80263e0:	e7c1      	b.n	8026366 <__hexnan+0x7a>
 80263e2:	9b01      	ldr	r3, [sp, #4]
 80263e4:	2b00      	cmp	r3, #0
 80263e6:	d0df      	beq.n	80263a8 <__hexnan+0xbc>
 80263e8:	f04f 32ff 	mov.w	r2, #4294967295
 80263ec:	f1c3 0320 	rsb	r3, r3, #32
 80263f0:	fa22 f303 	lsr.w	r3, r2, r3
 80263f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80263f8:	401a      	ands	r2, r3
 80263fa:	f847 2c04 	str.w	r2, [r7, #-4]
 80263fe:	e7d3      	b.n	80263a8 <__hexnan+0xbc>
 8026400:	3e04      	subs	r6, #4
 8026402:	e7d1      	b.n	80263a8 <__hexnan+0xbc>
 8026404:	2004      	movs	r0, #4
 8026406:	b007      	add	sp, #28
 8026408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802640c <_getc_r>:
 802640c:	b538      	push	{r3, r4, r5, lr}
 802640e:	460c      	mov	r4, r1
 8026410:	4605      	mov	r5, r0
 8026412:	b118      	cbz	r0, 802641c <_getc_r+0x10>
 8026414:	6983      	ldr	r3, [r0, #24]
 8026416:	b90b      	cbnz	r3, 802641c <_getc_r+0x10>
 8026418:	f7ff fc2c 	bl	8025c74 <__sinit>
 802641c:	4b0e      	ldr	r3, [pc, #56]	; (8026458 <_getc_r+0x4c>)
 802641e:	429c      	cmp	r4, r3
 8026420:	d10b      	bne.n	802643a <_getc_r+0x2e>
 8026422:	686c      	ldr	r4, [r5, #4]
 8026424:	6863      	ldr	r3, [r4, #4]
 8026426:	3b01      	subs	r3, #1
 8026428:	2b00      	cmp	r3, #0
 802642a:	6063      	str	r3, [r4, #4]
 802642c:	da0f      	bge.n	802644e <_getc_r+0x42>
 802642e:	4621      	mov	r1, r4
 8026430:	4628      	mov	r0, r5
 8026432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026436:	f001 b997 	b.w	8027768 <__srget_r>
 802643a:	4b08      	ldr	r3, [pc, #32]	; (802645c <_getc_r+0x50>)
 802643c:	429c      	cmp	r4, r3
 802643e:	d101      	bne.n	8026444 <_getc_r+0x38>
 8026440:	68ac      	ldr	r4, [r5, #8]
 8026442:	e7ef      	b.n	8026424 <_getc_r+0x18>
 8026444:	4b06      	ldr	r3, [pc, #24]	; (8026460 <_getc_r+0x54>)
 8026446:	429c      	cmp	r4, r3
 8026448:	bf08      	it	eq
 802644a:	68ec      	ldreq	r4, [r5, #12]
 802644c:	e7ea      	b.n	8026424 <_getc_r+0x18>
 802644e:	6823      	ldr	r3, [r4, #0]
 8026450:	1c5a      	adds	r2, r3, #1
 8026452:	6022      	str	r2, [r4, #0]
 8026454:	7818      	ldrb	r0, [r3, #0]
 8026456:	bd38      	pop	{r3, r4, r5, pc}
 8026458:	080333f4 	.word	0x080333f4
 802645c:	08033414 	.word	0x08033414
 8026460:	080333d4 	.word	0x080333d4

08026464 <_findenv_r>:
 8026464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026468:	4607      	mov	r7, r0
 802646a:	468b      	mov	fp, r1
 802646c:	4690      	mov	r8, r2
 802646e:	f001 fab5 	bl	80279dc <__env_lock>
 8026472:	4b19      	ldr	r3, [pc, #100]	; (80264d8 <_findenv_r+0x74>)
 8026474:	681d      	ldr	r5, [r3, #0]
 8026476:	469a      	mov	sl, r3
 8026478:	b13d      	cbz	r5, 802648a <_findenv_r+0x26>
 802647a:	465c      	mov	r4, fp
 802647c:	4623      	mov	r3, r4
 802647e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026482:	b32a      	cbz	r2, 80264d0 <_findenv_r+0x6c>
 8026484:	2a3d      	cmp	r2, #61	; 0x3d
 8026486:	461c      	mov	r4, r3
 8026488:	d1f8      	bne.n	802647c <_findenv_r+0x18>
 802648a:	4638      	mov	r0, r7
 802648c:	f001 faa7 	bl	80279de <__env_unlock>
 8026490:	2000      	movs	r0, #0
 8026492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026496:	464d      	mov	r5, r9
 8026498:	46a9      	mov	r9, r5
 802649a:	f859 0b04 	ldr.w	r0, [r9], #4
 802649e:	2800      	cmp	r0, #0
 80264a0:	d0f3      	beq.n	802648a <_findenv_r+0x26>
 80264a2:	4622      	mov	r2, r4
 80264a4:	4659      	mov	r1, fp
 80264a6:	f7fd f9d5 	bl	8023854 <strncmp>
 80264aa:	2800      	cmp	r0, #0
 80264ac:	d1f3      	bne.n	8026496 <_findenv_r+0x32>
 80264ae:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80264b2:	191e      	adds	r6, r3, r4
 80264b4:	5d1b      	ldrb	r3, [r3, r4]
 80264b6:	2b3d      	cmp	r3, #61	; 0x3d
 80264b8:	d1ed      	bne.n	8026496 <_findenv_r+0x32>
 80264ba:	f8da 3000 	ldr.w	r3, [sl]
 80264be:	1aed      	subs	r5, r5, r3
 80264c0:	10ad      	asrs	r5, r5, #2
 80264c2:	4638      	mov	r0, r7
 80264c4:	f8c8 5000 	str.w	r5, [r8]
 80264c8:	f001 fa89 	bl	80279de <__env_unlock>
 80264cc:	1c70      	adds	r0, r6, #1
 80264ce:	e7e0      	b.n	8026492 <_findenv_r+0x2e>
 80264d0:	eba4 040b 	sub.w	r4, r4, fp
 80264d4:	e7e0      	b.n	8026498 <_findenv_r+0x34>
 80264d6:	bf00      	nop
 80264d8:	20000060 	.word	0x20000060

080264dc <_getenv_r>:
 80264dc:	b507      	push	{r0, r1, r2, lr}
 80264de:	aa01      	add	r2, sp, #4
 80264e0:	f7ff ffc0 	bl	8026464 <_findenv_r>
 80264e4:	b003      	add	sp, #12
 80264e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080264ec <__gettzinfo>:
 80264ec:	4800      	ldr	r0, [pc, #0]	; (80264f0 <__gettzinfo+0x4>)
 80264ee:	4770      	bx	lr
 80264f0:	200007c0 	.word	0x200007c0

080264f4 <_lseek_r>:
 80264f4:	b538      	push	{r3, r4, r5, lr}
 80264f6:	4c07      	ldr	r4, [pc, #28]	; (8026514 <_lseek_r+0x20>)
 80264f8:	4605      	mov	r5, r0
 80264fa:	4608      	mov	r0, r1
 80264fc:	4611      	mov	r1, r2
 80264fe:	2200      	movs	r2, #0
 8026500:	6022      	str	r2, [r4, #0]
 8026502:	461a      	mov	r2, r3
 8026504:	f7dd fdc8 	bl	8004098 <_lseek>
 8026508:	1c43      	adds	r3, r0, #1
 802650a:	d102      	bne.n	8026512 <_lseek_r+0x1e>
 802650c:	6823      	ldr	r3, [r4, #0]
 802650e:	b103      	cbz	r3, 8026512 <_lseek_r+0x1e>
 8026510:	602b      	str	r3, [r5, #0]
 8026512:	bd38      	pop	{r3, r4, r5, pc}
 8026514:	200019d8 	.word	0x200019d8

08026518 <__swhatbuf_r>:
 8026518:	b570      	push	{r4, r5, r6, lr}
 802651a:	460e      	mov	r6, r1
 802651c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026520:	2900      	cmp	r1, #0
 8026522:	b096      	sub	sp, #88	; 0x58
 8026524:	4614      	mov	r4, r2
 8026526:	461d      	mov	r5, r3
 8026528:	da07      	bge.n	802653a <__swhatbuf_r+0x22>
 802652a:	2300      	movs	r3, #0
 802652c:	602b      	str	r3, [r5, #0]
 802652e:	89b3      	ldrh	r3, [r6, #12]
 8026530:	061a      	lsls	r2, r3, #24
 8026532:	d410      	bmi.n	8026556 <__swhatbuf_r+0x3e>
 8026534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026538:	e00e      	b.n	8026558 <__swhatbuf_r+0x40>
 802653a:	466a      	mov	r2, sp
 802653c:	f001 fa50 	bl	80279e0 <_fstat_r>
 8026540:	2800      	cmp	r0, #0
 8026542:	dbf2      	blt.n	802652a <__swhatbuf_r+0x12>
 8026544:	9a01      	ldr	r2, [sp, #4]
 8026546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802654a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802654e:	425a      	negs	r2, r3
 8026550:	415a      	adcs	r2, r3
 8026552:	602a      	str	r2, [r5, #0]
 8026554:	e7ee      	b.n	8026534 <__swhatbuf_r+0x1c>
 8026556:	2340      	movs	r3, #64	; 0x40
 8026558:	2000      	movs	r0, #0
 802655a:	6023      	str	r3, [r4, #0]
 802655c:	b016      	add	sp, #88	; 0x58
 802655e:	bd70      	pop	{r4, r5, r6, pc}

08026560 <__smakebuf_r>:
 8026560:	898b      	ldrh	r3, [r1, #12]
 8026562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026564:	079d      	lsls	r5, r3, #30
 8026566:	4606      	mov	r6, r0
 8026568:	460c      	mov	r4, r1
 802656a:	d507      	bpl.n	802657c <__smakebuf_r+0x1c>
 802656c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026570:	6023      	str	r3, [r4, #0]
 8026572:	6123      	str	r3, [r4, #16]
 8026574:	2301      	movs	r3, #1
 8026576:	6163      	str	r3, [r4, #20]
 8026578:	b002      	add	sp, #8
 802657a:	bd70      	pop	{r4, r5, r6, pc}
 802657c:	ab01      	add	r3, sp, #4
 802657e:	466a      	mov	r2, sp
 8026580:	f7ff ffca 	bl	8026518 <__swhatbuf_r>
 8026584:	9900      	ldr	r1, [sp, #0]
 8026586:	4605      	mov	r5, r0
 8026588:	4630      	mov	r0, r6
 802658a:	f7fc f9c9 	bl	8022920 <_malloc_r>
 802658e:	b948      	cbnz	r0, 80265a4 <__smakebuf_r+0x44>
 8026590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026594:	059a      	lsls	r2, r3, #22
 8026596:	d4ef      	bmi.n	8026578 <__smakebuf_r+0x18>
 8026598:	f023 0303 	bic.w	r3, r3, #3
 802659c:	f043 0302 	orr.w	r3, r3, #2
 80265a0:	81a3      	strh	r3, [r4, #12]
 80265a2:	e7e3      	b.n	802656c <__smakebuf_r+0xc>
 80265a4:	4b0d      	ldr	r3, [pc, #52]	; (80265dc <__smakebuf_r+0x7c>)
 80265a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80265a8:	89a3      	ldrh	r3, [r4, #12]
 80265aa:	6020      	str	r0, [r4, #0]
 80265ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80265b0:	81a3      	strh	r3, [r4, #12]
 80265b2:	9b00      	ldr	r3, [sp, #0]
 80265b4:	6163      	str	r3, [r4, #20]
 80265b6:	9b01      	ldr	r3, [sp, #4]
 80265b8:	6120      	str	r0, [r4, #16]
 80265ba:	b15b      	cbz	r3, 80265d4 <__smakebuf_r+0x74>
 80265bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80265c0:	4630      	mov	r0, r6
 80265c2:	f001 fa1f 	bl	8027a04 <_isatty_r>
 80265c6:	b128      	cbz	r0, 80265d4 <__smakebuf_r+0x74>
 80265c8:	89a3      	ldrh	r3, [r4, #12]
 80265ca:	f023 0303 	bic.w	r3, r3, #3
 80265ce:	f043 0301 	orr.w	r3, r3, #1
 80265d2:	81a3      	strh	r3, [r4, #12]
 80265d4:	89a3      	ldrh	r3, [r4, #12]
 80265d6:	431d      	orrs	r5, r3
 80265d8:	81a5      	strh	r5, [r4, #12]
 80265da:	e7cd      	b.n	8026578 <__smakebuf_r+0x18>
 80265dc:	08025c3d 	.word	0x08025c3d

080265e0 <__malloc_lock>:
 80265e0:	4770      	bx	lr

080265e2 <__malloc_unlock>:
 80265e2:	4770      	bx	lr

080265e4 <_Balloc>:
 80265e4:	b570      	push	{r4, r5, r6, lr}
 80265e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80265e8:	4604      	mov	r4, r0
 80265ea:	460e      	mov	r6, r1
 80265ec:	b93d      	cbnz	r5, 80265fe <_Balloc+0x1a>
 80265ee:	2010      	movs	r0, #16
 80265f0:	f7fb fe48 	bl	8022284 <malloc>
 80265f4:	6260      	str	r0, [r4, #36]	; 0x24
 80265f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80265fa:	6005      	str	r5, [r0, #0]
 80265fc:	60c5      	str	r5, [r0, #12]
 80265fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026600:	68eb      	ldr	r3, [r5, #12]
 8026602:	b183      	cbz	r3, 8026626 <_Balloc+0x42>
 8026604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026606:	68db      	ldr	r3, [r3, #12]
 8026608:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802660c:	b9b8      	cbnz	r0, 802663e <_Balloc+0x5a>
 802660e:	2101      	movs	r1, #1
 8026610:	fa01 f506 	lsl.w	r5, r1, r6
 8026614:	1d6a      	adds	r2, r5, #5
 8026616:	0092      	lsls	r2, r2, #2
 8026618:	4620      	mov	r0, r4
 802661a:	f7fc f925 	bl	8022868 <_calloc_r>
 802661e:	b160      	cbz	r0, 802663a <_Balloc+0x56>
 8026620:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8026624:	e00e      	b.n	8026644 <_Balloc+0x60>
 8026626:	2221      	movs	r2, #33	; 0x21
 8026628:	2104      	movs	r1, #4
 802662a:	4620      	mov	r0, r4
 802662c:	f7fc f91c 	bl	8022868 <_calloc_r>
 8026630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026632:	60e8      	str	r0, [r5, #12]
 8026634:	68db      	ldr	r3, [r3, #12]
 8026636:	2b00      	cmp	r3, #0
 8026638:	d1e4      	bne.n	8026604 <_Balloc+0x20>
 802663a:	2000      	movs	r0, #0
 802663c:	bd70      	pop	{r4, r5, r6, pc}
 802663e:	6802      	ldr	r2, [r0, #0]
 8026640:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8026644:	2300      	movs	r3, #0
 8026646:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802664a:	e7f7      	b.n	802663c <_Balloc+0x58>

0802664c <_Bfree>:
 802664c:	b570      	push	{r4, r5, r6, lr}
 802664e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8026650:	4606      	mov	r6, r0
 8026652:	460d      	mov	r5, r1
 8026654:	b93c      	cbnz	r4, 8026666 <_Bfree+0x1a>
 8026656:	2010      	movs	r0, #16
 8026658:	f7fb fe14 	bl	8022284 <malloc>
 802665c:	6270      	str	r0, [r6, #36]	; 0x24
 802665e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026662:	6004      	str	r4, [r0, #0]
 8026664:	60c4      	str	r4, [r0, #12]
 8026666:	b13d      	cbz	r5, 8026678 <_Bfree+0x2c>
 8026668:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802666a:	686a      	ldr	r2, [r5, #4]
 802666c:	68db      	ldr	r3, [r3, #12]
 802666e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026672:	6029      	str	r1, [r5, #0]
 8026674:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8026678:	bd70      	pop	{r4, r5, r6, pc}

0802667a <__multadd>:
 802667a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802667e:	690d      	ldr	r5, [r1, #16]
 8026680:	461f      	mov	r7, r3
 8026682:	4606      	mov	r6, r0
 8026684:	460c      	mov	r4, r1
 8026686:	f101 0c14 	add.w	ip, r1, #20
 802668a:	2300      	movs	r3, #0
 802668c:	f8dc 0000 	ldr.w	r0, [ip]
 8026690:	b281      	uxth	r1, r0
 8026692:	fb02 7101 	mla	r1, r2, r1, r7
 8026696:	0c0f      	lsrs	r7, r1, #16
 8026698:	0c00      	lsrs	r0, r0, #16
 802669a:	fb02 7000 	mla	r0, r2, r0, r7
 802669e:	b289      	uxth	r1, r1
 80266a0:	3301      	adds	r3, #1
 80266a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80266a6:	429d      	cmp	r5, r3
 80266a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80266ac:	f84c 1b04 	str.w	r1, [ip], #4
 80266b0:	dcec      	bgt.n	802668c <__multadd+0x12>
 80266b2:	b1d7      	cbz	r7, 80266ea <__multadd+0x70>
 80266b4:	68a3      	ldr	r3, [r4, #8]
 80266b6:	42ab      	cmp	r3, r5
 80266b8:	dc12      	bgt.n	80266e0 <__multadd+0x66>
 80266ba:	6861      	ldr	r1, [r4, #4]
 80266bc:	4630      	mov	r0, r6
 80266be:	3101      	adds	r1, #1
 80266c0:	f7ff ff90 	bl	80265e4 <_Balloc>
 80266c4:	6922      	ldr	r2, [r4, #16]
 80266c6:	3202      	adds	r2, #2
 80266c8:	f104 010c 	add.w	r1, r4, #12
 80266cc:	4680      	mov	r8, r0
 80266ce:	0092      	lsls	r2, r2, #2
 80266d0:	300c      	adds	r0, #12
 80266d2:	f7fb fe08 	bl	80222e6 <memcpy>
 80266d6:	4621      	mov	r1, r4
 80266d8:	4630      	mov	r0, r6
 80266da:	f7ff ffb7 	bl	802664c <_Bfree>
 80266de:	4644      	mov	r4, r8
 80266e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80266e4:	3501      	adds	r5, #1
 80266e6:	615f      	str	r7, [r3, #20]
 80266e8:	6125      	str	r5, [r4, #16]
 80266ea:	4620      	mov	r0, r4
 80266ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080266f0 <__s2b>:
 80266f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80266f4:	460c      	mov	r4, r1
 80266f6:	4615      	mov	r5, r2
 80266f8:	461f      	mov	r7, r3
 80266fa:	2209      	movs	r2, #9
 80266fc:	3308      	adds	r3, #8
 80266fe:	4606      	mov	r6, r0
 8026700:	fb93 f3f2 	sdiv	r3, r3, r2
 8026704:	2100      	movs	r1, #0
 8026706:	2201      	movs	r2, #1
 8026708:	429a      	cmp	r2, r3
 802670a:	db20      	blt.n	802674e <__s2b+0x5e>
 802670c:	4630      	mov	r0, r6
 802670e:	f7ff ff69 	bl	80265e4 <_Balloc>
 8026712:	9b08      	ldr	r3, [sp, #32]
 8026714:	6143      	str	r3, [r0, #20]
 8026716:	2d09      	cmp	r5, #9
 8026718:	f04f 0301 	mov.w	r3, #1
 802671c:	6103      	str	r3, [r0, #16]
 802671e:	dd19      	ble.n	8026754 <__s2b+0x64>
 8026720:	f104 0809 	add.w	r8, r4, #9
 8026724:	46c1      	mov	r9, r8
 8026726:	442c      	add	r4, r5
 8026728:	f819 3b01 	ldrb.w	r3, [r9], #1
 802672c:	4601      	mov	r1, r0
 802672e:	3b30      	subs	r3, #48	; 0x30
 8026730:	220a      	movs	r2, #10
 8026732:	4630      	mov	r0, r6
 8026734:	f7ff ffa1 	bl	802667a <__multadd>
 8026738:	45a1      	cmp	r9, r4
 802673a:	d1f5      	bne.n	8026728 <__s2b+0x38>
 802673c:	eb08 0405 	add.w	r4, r8, r5
 8026740:	3c08      	subs	r4, #8
 8026742:	1b2d      	subs	r5, r5, r4
 8026744:	1963      	adds	r3, r4, r5
 8026746:	42bb      	cmp	r3, r7
 8026748:	db07      	blt.n	802675a <__s2b+0x6a>
 802674a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802674e:	0052      	lsls	r2, r2, #1
 8026750:	3101      	adds	r1, #1
 8026752:	e7d9      	b.n	8026708 <__s2b+0x18>
 8026754:	340a      	adds	r4, #10
 8026756:	2509      	movs	r5, #9
 8026758:	e7f3      	b.n	8026742 <__s2b+0x52>
 802675a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802675e:	4601      	mov	r1, r0
 8026760:	3b30      	subs	r3, #48	; 0x30
 8026762:	220a      	movs	r2, #10
 8026764:	4630      	mov	r0, r6
 8026766:	f7ff ff88 	bl	802667a <__multadd>
 802676a:	e7eb      	b.n	8026744 <__s2b+0x54>

0802676c <__hi0bits>:
 802676c:	0c02      	lsrs	r2, r0, #16
 802676e:	0412      	lsls	r2, r2, #16
 8026770:	4603      	mov	r3, r0
 8026772:	b9b2      	cbnz	r2, 80267a2 <__hi0bits+0x36>
 8026774:	0403      	lsls	r3, r0, #16
 8026776:	2010      	movs	r0, #16
 8026778:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802677c:	bf04      	itt	eq
 802677e:	021b      	lsleq	r3, r3, #8
 8026780:	3008      	addeq	r0, #8
 8026782:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8026786:	bf04      	itt	eq
 8026788:	011b      	lsleq	r3, r3, #4
 802678a:	3004      	addeq	r0, #4
 802678c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8026790:	bf04      	itt	eq
 8026792:	009b      	lsleq	r3, r3, #2
 8026794:	3002      	addeq	r0, #2
 8026796:	2b00      	cmp	r3, #0
 8026798:	db06      	blt.n	80267a8 <__hi0bits+0x3c>
 802679a:	005b      	lsls	r3, r3, #1
 802679c:	d503      	bpl.n	80267a6 <__hi0bits+0x3a>
 802679e:	3001      	adds	r0, #1
 80267a0:	4770      	bx	lr
 80267a2:	2000      	movs	r0, #0
 80267a4:	e7e8      	b.n	8026778 <__hi0bits+0xc>
 80267a6:	2020      	movs	r0, #32
 80267a8:	4770      	bx	lr

080267aa <__lo0bits>:
 80267aa:	6803      	ldr	r3, [r0, #0]
 80267ac:	f013 0207 	ands.w	r2, r3, #7
 80267b0:	4601      	mov	r1, r0
 80267b2:	d00b      	beq.n	80267cc <__lo0bits+0x22>
 80267b4:	07da      	lsls	r2, r3, #31
 80267b6:	d423      	bmi.n	8026800 <__lo0bits+0x56>
 80267b8:	0798      	lsls	r0, r3, #30
 80267ba:	bf49      	itett	mi
 80267bc:	085b      	lsrmi	r3, r3, #1
 80267be:	089b      	lsrpl	r3, r3, #2
 80267c0:	2001      	movmi	r0, #1
 80267c2:	600b      	strmi	r3, [r1, #0]
 80267c4:	bf5c      	itt	pl
 80267c6:	600b      	strpl	r3, [r1, #0]
 80267c8:	2002      	movpl	r0, #2
 80267ca:	4770      	bx	lr
 80267cc:	b298      	uxth	r0, r3
 80267ce:	b9a8      	cbnz	r0, 80267fc <__lo0bits+0x52>
 80267d0:	0c1b      	lsrs	r3, r3, #16
 80267d2:	2010      	movs	r0, #16
 80267d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80267d8:	bf04      	itt	eq
 80267da:	0a1b      	lsreq	r3, r3, #8
 80267dc:	3008      	addeq	r0, #8
 80267de:	071a      	lsls	r2, r3, #28
 80267e0:	bf04      	itt	eq
 80267e2:	091b      	lsreq	r3, r3, #4
 80267e4:	3004      	addeq	r0, #4
 80267e6:	079a      	lsls	r2, r3, #30
 80267e8:	bf04      	itt	eq
 80267ea:	089b      	lsreq	r3, r3, #2
 80267ec:	3002      	addeq	r0, #2
 80267ee:	07da      	lsls	r2, r3, #31
 80267f0:	d402      	bmi.n	80267f8 <__lo0bits+0x4e>
 80267f2:	085b      	lsrs	r3, r3, #1
 80267f4:	d006      	beq.n	8026804 <__lo0bits+0x5a>
 80267f6:	3001      	adds	r0, #1
 80267f8:	600b      	str	r3, [r1, #0]
 80267fa:	4770      	bx	lr
 80267fc:	4610      	mov	r0, r2
 80267fe:	e7e9      	b.n	80267d4 <__lo0bits+0x2a>
 8026800:	2000      	movs	r0, #0
 8026802:	4770      	bx	lr
 8026804:	2020      	movs	r0, #32
 8026806:	4770      	bx	lr

08026808 <__i2b>:
 8026808:	b510      	push	{r4, lr}
 802680a:	460c      	mov	r4, r1
 802680c:	2101      	movs	r1, #1
 802680e:	f7ff fee9 	bl	80265e4 <_Balloc>
 8026812:	2201      	movs	r2, #1
 8026814:	6144      	str	r4, [r0, #20]
 8026816:	6102      	str	r2, [r0, #16]
 8026818:	bd10      	pop	{r4, pc}

0802681a <__multiply>:
 802681a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802681e:	4614      	mov	r4, r2
 8026820:	690a      	ldr	r2, [r1, #16]
 8026822:	6923      	ldr	r3, [r4, #16]
 8026824:	429a      	cmp	r2, r3
 8026826:	bfb8      	it	lt
 8026828:	460b      	movlt	r3, r1
 802682a:	4688      	mov	r8, r1
 802682c:	bfbc      	itt	lt
 802682e:	46a0      	movlt	r8, r4
 8026830:	461c      	movlt	r4, r3
 8026832:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8026836:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802683a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802683e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026842:	eb07 0609 	add.w	r6, r7, r9
 8026846:	42b3      	cmp	r3, r6
 8026848:	bfb8      	it	lt
 802684a:	3101      	addlt	r1, #1
 802684c:	f7ff feca 	bl	80265e4 <_Balloc>
 8026850:	f100 0514 	add.w	r5, r0, #20
 8026854:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8026858:	462b      	mov	r3, r5
 802685a:	2200      	movs	r2, #0
 802685c:	4573      	cmp	r3, lr
 802685e:	d316      	bcc.n	802688e <__multiply+0x74>
 8026860:	f104 0214 	add.w	r2, r4, #20
 8026864:	f108 0114 	add.w	r1, r8, #20
 8026868:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802686c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8026870:	9300      	str	r3, [sp, #0]
 8026872:	9b00      	ldr	r3, [sp, #0]
 8026874:	9201      	str	r2, [sp, #4]
 8026876:	4293      	cmp	r3, r2
 8026878:	d80c      	bhi.n	8026894 <__multiply+0x7a>
 802687a:	2e00      	cmp	r6, #0
 802687c:	dd03      	ble.n	8026886 <__multiply+0x6c>
 802687e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8026882:	2b00      	cmp	r3, #0
 8026884:	d05d      	beq.n	8026942 <__multiply+0x128>
 8026886:	6106      	str	r6, [r0, #16]
 8026888:	b003      	add	sp, #12
 802688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802688e:	f843 2b04 	str.w	r2, [r3], #4
 8026892:	e7e3      	b.n	802685c <__multiply+0x42>
 8026894:	f8b2 b000 	ldrh.w	fp, [r2]
 8026898:	f1bb 0f00 	cmp.w	fp, #0
 802689c:	d023      	beq.n	80268e6 <__multiply+0xcc>
 802689e:	4689      	mov	r9, r1
 80268a0:	46ac      	mov	ip, r5
 80268a2:	f04f 0800 	mov.w	r8, #0
 80268a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80268aa:	f8dc a000 	ldr.w	sl, [ip]
 80268ae:	b2a3      	uxth	r3, r4
 80268b0:	fa1f fa8a 	uxth.w	sl, sl
 80268b4:	fb0b a303 	mla	r3, fp, r3, sl
 80268b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80268bc:	f8dc 4000 	ldr.w	r4, [ip]
 80268c0:	4443      	add	r3, r8
 80268c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80268c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80268ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80268ce:	46e2      	mov	sl, ip
 80268d0:	b29b      	uxth	r3, r3
 80268d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80268d6:	454f      	cmp	r7, r9
 80268d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80268dc:	f84a 3b04 	str.w	r3, [sl], #4
 80268e0:	d82b      	bhi.n	802693a <__multiply+0x120>
 80268e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80268e6:	9b01      	ldr	r3, [sp, #4]
 80268e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80268ec:	3204      	adds	r2, #4
 80268ee:	f1ba 0f00 	cmp.w	sl, #0
 80268f2:	d020      	beq.n	8026936 <__multiply+0x11c>
 80268f4:	682b      	ldr	r3, [r5, #0]
 80268f6:	4689      	mov	r9, r1
 80268f8:	46a8      	mov	r8, r5
 80268fa:	f04f 0b00 	mov.w	fp, #0
 80268fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8026902:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8026906:	fb0a 440c 	mla	r4, sl, ip, r4
 802690a:	445c      	add	r4, fp
 802690c:	46c4      	mov	ip, r8
 802690e:	b29b      	uxth	r3, r3
 8026910:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8026914:	f84c 3b04 	str.w	r3, [ip], #4
 8026918:	f859 3b04 	ldr.w	r3, [r9], #4
 802691c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8026920:	0c1b      	lsrs	r3, r3, #16
 8026922:	fb0a b303 	mla	r3, sl, r3, fp
 8026926:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802692a:	454f      	cmp	r7, r9
 802692c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8026930:	d805      	bhi.n	802693e <__multiply+0x124>
 8026932:	f8c8 3004 	str.w	r3, [r8, #4]
 8026936:	3504      	adds	r5, #4
 8026938:	e79b      	b.n	8026872 <__multiply+0x58>
 802693a:	46d4      	mov	ip, sl
 802693c:	e7b3      	b.n	80268a6 <__multiply+0x8c>
 802693e:	46e0      	mov	r8, ip
 8026940:	e7dd      	b.n	80268fe <__multiply+0xe4>
 8026942:	3e01      	subs	r6, #1
 8026944:	e799      	b.n	802687a <__multiply+0x60>
	...

08026948 <__pow5mult>:
 8026948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802694c:	4615      	mov	r5, r2
 802694e:	f012 0203 	ands.w	r2, r2, #3
 8026952:	4606      	mov	r6, r0
 8026954:	460f      	mov	r7, r1
 8026956:	d007      	beq.n	8026968 <__pow5mult+0x20>
 8026958:	3a01      	subs	r2, #1
 802695a:	4c21      	ldr	r4, [pc, #132]	; (80269e0 <__pow5mult+0x98>)
 802695c:	2300      	movs	r3, #0
 802695e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026962:	f7ff fe8a 	bl	802667a <__multadd>
 8026966:	4607      	mov	r7, r0
 8026968:	10ad      	asrs	r5, r5, #2
 802696a:	d035      	beq.n	80269d8 <__pow5mult+0x90>
 802696c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802696e:	b93c      	cbnz	r4, 8026980 <__pow5mult+0x38>
 8026970:	2010      	movs	r0, #16
 8026972:	f7fb fc87 	bl	8022284 <malloc>
 8026976:	6270      	str	r0, [r6, #36]	; 0x24
 8026978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802697c:	6004      	str	r4, [r0, #0]
 802697e:	60c4      	str	r4, [r0, #12]
 8026980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026988:	b94c      	cbnz	r4, 802699e <__pow5mult+0x56>
 802698a:	f240 2171 	movw	r1, #625	; 0x271
 802698e:	4630      	mov	r0, r6
 8026990:	f7ff ff3a 	bl	8026808 <__i2b>
 8026994:	2300      	movs	r3, #0
 8026996:	f8c8 0008 	str.w	r0, [r8, #8]
 802699a:	4604      	mov	r4, r0
 802699c:	6003      	str	r3, [r0, #0]
 802699e:	f04f 0800 	mov.w	r8, #0
 80269a2:	07eb      	lsls	r3, r5, #31
 80269a4:	d50a      	bpl.n	80269bc <__pow5mult+0x74>
 80269a6:	4639      	mov	r1, r7
 80269a8:	4622      	mov	r2, r4
 80269aa:	4630      	mov	r0, r6
 80269ac:	f7ff ff35 	bl	802681a <__multiply>
 80269b0:	4639      	mov	r1, r7
 80269b2:	4681      	mov	r9, r0
 80269b4:	4630      	mov	r0, r6
 80269b6:	f7ff fe49 	bl	802664c <_Bfree>
 80269ba:	464f      	mov	r7, r9
 80269bc:	106d      	asrs	r5, r5, #1
 80269be:	d00b      	beq.n	80269d8 <__pow5mult+0x90>
 80269c0:	6820      	ldr	r0, [r4, #0]
 80269c2:	b938      	cbnz	r0, 80269d4 <__pow5mult+0x8c>
 80269c4:	4622      	mov	r2, r4
 80269c6:	4621      	mov	r1, r4
 80269c8:	4630      	mov	r0, r6
 80269ca:	f7ff ff26 	bl	802681a <__multiply>
 80269ce:	6020      	str	r0, [r4, #0]
 80269d0:	f8c0 8000 	str.w	r8, [r0]
 80269d4:	4604      	mov	r4, r0
 80269d6:	e7e4      	b.n	80269a2 <__pow5mult+0x5a>
 80269d8:	4638      	mov	r0, r7
 80269da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80269de:	bf00      	nop
 80269e0:	08033588 	.word	0x08033588

080269e4 <__lshift>:
 80269e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80269e8:	460c      	mov	r4, r1
 80269ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80269ee:	6923      	ldr	r3, [r4, #16]
 80269f0:	6849      	ldr	r1, [r1, #4]
 80269f2:	eb0a 0903 	add.w	r9, sl, r3
 80269f6:	68a3      	ldr	r3, [r4, #8]
 80269f8:	4607      	mov	r7, r0
 80269fa:	4616      	mov	r6, r2
 80269fc:	f109 0501 	add.w	r5, r9, #1
 8026a00:	42ab      	cmp	r3, r5
 8026a02:	db32      	blt.n	8026a6a <__lshift+0x86>
 8026a04:	4638      	mov	r0, r7
 8026a06:	f7ff fded 	bl	80265e4 <_Balloc>
 8026a0a:	2300      	movs	r3, #0
 8026a0c:	4680      	mov	r8, r0
 8026a0e:	f100 0114 	add.w	r1, r0, #20
 8026a12:	461a      	mov	r2, r3
 8026a14:	4553      	cmp	r3, sl
 8026a16:	db2b      	blt.n	8026a70 <__lshift+0x8c>
 8026a18:	6920      	ldr	r0, [r4, #16]
 8026a1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026a1e:	f104 0314 	add.w	r3, r4, #20
 8026a22:	f016 021f 	ands.w	r2, r6, #31
 8026a26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026a2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026a2e:	d025      	beq.n	8026a7c <__lshift+0x98>
 8026a30:	f1c2 0e20 	rsb	lr, r2, #32
 8026a34:	2000      	movs	r0, #0
 8026a36:	681e      	ldr	r6, [r3, #0]
 8026a38:	468a      	mov	sl, r1
 8026a3a:	4096      	lsls	r6, r2
 8026a3c:	4330      	orrs	r0, r6
 8026a3e:	f84a 0b04 	str.w	r0, [sl], #4
 8026a42:	f853 0b04 	ldr.w	r0, [r3], #4
 8026a46:	459c      	cmp	ip, r3
 8026a48:	fa20 f00e 	lsr.w	r0, r0, lr
 8026a4c:	d814      	bhi.n	8026a78 <__lshift+0x94>
 8026a4e:	6048      	str	r0, [r1, #4]
 8026a50:	b108      	cbz	r0, 8026a56 <__lshift+0x72>
 8026a52:	f109 0502 	add.w	r5, r9, #2
 8026a56:	3d01      	subs	r5, #1
 8026a58:	4638      	mov	r0, r7
 8026a5a:	f8c8 5010 	str.w	r5, [r8, #16]
 8026a5e:	4621      	mov	r1, r4
 8026a60:	f7ff fdf4 	bl	802664c <_Bfree>
 8026a64:	4640      	mov	r0, r8
 8026a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a6a:	3101      	adds	r1, #1
 8026a6c:	005b      	lsls	r3, r3, #1
 8026a6e:	e7c7      	b.n	8026a00 <__lshift+0x1c>
 8026a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8026a74:	3301      	adds	r3, #1
 8026a76:	e7cd      	b.n	8026a14 <__lshift+0x30>
 8026a78:	4651      	mov	r1, sl
 8026a7a:	e7dc      	b.n	8026a36 <__lshift+0x52>
 8026a7c:	3904      	subs	r1, #4
 8026a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026a82:	f841 2f04 	str.w	r2, [r1, #4]!
 8026a86:	459c      	cmp	ip, r3
 8026a88:	d8f9      	bhi.n	8026a7e <__lshift+0x9a>
 8026a8a:	e7e4      	b.n	8026a56 <__lshift+0x72>

08026a8c <__mcmp>:
 8026a8c:	6903      	ldr	r3, [r0, #16]
 8026a8e:	690a      	ldr	r2, [r1, #16]
 8026a90:	1a9b      	subs	r3, r3, r2
 8026a92:	b530      	push	{r4, r5, lr}
 8026a94:	d10c      	bne.n	8026ab0 <__mcmp+0x24>
 8026a96:	0092      	lsls	r2, r2, #2
 8026a98:	3014      	adds	r0, #20
 8026a9a:	3114      	adds	r1, #20
 8026a9c:	1884      	adds	r4, r0, r2
 8026a9e:	4411      	add	r1, r2
 8026aa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026aa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026aa8:	4295      	cmp	r5, r2
 8026aaa:	d003      	beq.n	8026ab4 <__mcmp+0x28>
 8026aac:	d305      	bcc.n	8026aba <__mcmp+0x2e>
 8026aae:	2301      	movs	r3, #1
 8026ab0:	4618      	mov	r0, r3
 8026ab2:	bd30      	pop	{r4, r5, pc}
 8026ab4:	42a0      	cmp	r0, r4
 8026ab6:	d3f3      	bcc.n	8026aa0 <__mcmp+0x14>
 8026ab8:	e7fa      	b.n	8026ab0 <__mcmp+0x24>
 8026aba:	f04f 33ff 	mov.w	r3, #4294967295
 8026abe:	e7f7      	b.n	8026ab0 <__mcmp+0x24>

08026ac0 <__mdiff>:
 8026ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ac4:	460d      	mov	r5, r1
 8026ac6:	4607      	mov	r7, r0
 8026ac8:	4611      	mov	r1, r2
 8026aca:	4628      	mov	r0, r5
 8026acc:	4614      	mov	r4, r2
 8026ace:	f7ff ffdd 	bl	8026a8c <__mcmp>
 8026ad2:	1e06      	subs	r6, r0, #0
 8026ad4:	d108      	bne.n	8026ae8 <__mdiff+0x28>
 8026ad6:	4631      	mov	r1, r6
 8026ad8:	4638      	mov	r0, r7
 8026ada:	f7ff fd83 	bl	80265e4 <_Balloc>
 8026ade:	2301      	movs	r3, #1
 8026ae0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8026ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ae8:	bfa4      	itt	ge
 8026aea:	4623      	movge	r3, r4
 8026aec:	462c      	movge	r4, r5
 8026aee:	4638      	mov	r0, r7
 8026af0:	6861      	ldr	r1, [r4, #4]
 8026af2:	bfa6      	itte	ge
 8026af4:	461d      	movge	r5, r3
 8026af6:	2600      	movge	r6, #0
 8026af8:	2601      	movlt	r6, #1
 8026afa:	f7ff fd73 	bl	80265e4 <_Balloc>
 8026afe:	692b      	ldr	r3, [r5, #16]
 8026b00:	60c6      	str	r6, [r0, #12]
 8026b02:	6926      	ldr	r6, [r4, #16]
 8026b04:	f105 0914 	add.w	r9, r5, #20
 8026b08:	f104 0214 	add.w	r2, r4, #20
 8026b0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8026b10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8026b14:	f100 0514 	add.w	r5, r0, #20
 8026b18:	f04f 0e00 	mov.w	lr, #0
 8026b1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8026b20:	f859 4b04 	ldr.w	r4, [r9], #4
 8026b24:	fa1e f18a 	uxtah	r1, lr, sl
 8026b28:	b2a3      	uxth	r3, r4
 8026b2a:	1ac9      	subs	r1, r1, r3
 8026b2c:	0c23      	lsrs	r3, r4, #16
 8026b2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8026b32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8026b36:	b289      	uxth	r1, r1
 8026b38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8026b3c:	45c8      	cmp	r8, r9
 8026b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8026b42:	4694      	mov	ip, r2
 8026b44:	f845 3b04 	str.w	r3, [r5], #4
 8026b48:	d8e8      	bhi.n	8026b1c <__mdiff+0x5c>
 8026b4a:	45bc      	cmp	ip, r7
 8026b4c:	d304      	bcc.n	8026b58 <__mdiff+0x98>
 8026b4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8026b52:	b183      	cbz	r3, 8026b76 <__mdiff+0xb6>
 8026b54:	6106      	str	r6, [r0, #16]
 8026b56:	e7c5      	b.n	8026ae4 <__mdiff+0x24>
 8026b58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8026b5c:	fa1e f381 	uxtah	r3, lr, r1
 8026b60:	141a      	asrs	r2, r3, #16
 8026b62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8026b66:	b29b      	uxth	r3, r3
 8026b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026b6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8026b70:	f845 3b04 	str.w	r3, [r5], #4
 8026b74:	e7e9      	b.n	8026b4a <__mdiff+0x8a>
 8026b76:	3e01      	subs	r6, #1
 8026b78:	e7e9      	b.n	8026b4e <__mdiff+0x8e>
	...

08026b7c <__ulp>:
 8026b7c:	4b12      	ldr	r3, [pc, #72]	; (8026bc8 <__ulp+0x4c>)
 8026b7e:	ee10 2a90 	vmov	r2, s1
 8026b82:	401a      	ands	r2, r3
 8026b84:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8026b88:	2b00      	cmp	r3, #0
 8026b8a:	dd04      	ble.n	8026b96 <__ulp+0x1a>
 8026b8c:	2000      	movs	r0, #0
 8026b8e:	4619      	mov	r1, r3
 8026b90:	ec41 0b10 	vmov	d0, r0, r1
 8026b94:	4770      	bx	lr
 8026b96:	425b      	negs	r3, r3
 8026b98:	151b      	asrs	r3, r3, #20
 8026b9a:	2b13      	cmp	r3, #19
 8026b9c:	f04f 0000 	mov.w	r0, #0
 8026ba0:	f04f 0100 	mov.w	r1, #0
 8026ba4:	dc04      	bgt.n	8026bb0 <__ulp+0x34>
 8026ba6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8026baa:	fa42 f103 	asr.w	r1, r2, r3
 8026bae:	e7ef      	b.n	8026b90 <__ulp+0x14>
 8026bb0:	3b14      	subs	r3, #20
 8026bb2:	2b1e      	cmp	r3, #30
 8026bb4:	f04f 0201 	mov.w	r2, #1
 8026bb8:	bfda      	itte	le
 8026bba:	f1c3 031f 	rsble	r3, r3, #31
 8026bbe:	fa02 f303 	lslle.w	r3, r2, r3
 8026bc2:	4613      	movgt	r3, r2
 8026bc4:	4618      	mov	r0, r3
 8026bc6:	e7e3      	b.n	8026b90 <__ulp+0x14>
 8026bc8:	7ff00000 	.word	0x7ff00000

08026bcc <__b2d>:
 8026bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026bce:	6905      	ldr	r5, [r0, #16]
 8026bd0:	f100 0714 	add.w	r7, r0, #20
 8026bd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8026bd8:	1f2e      	subs	r6, r5, #4
 8026bda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8026bde:	4620      	mov	r0, r4
 8026be0:	f7ff fdc4 	bl	802676c <__hi0bits>
 8026be4:	f1c0 0320 	rsb	r3, r0, #32
 8026be8:	280a      	cmp	r0, #10
 8026bea:	600b      	str	r3, [r1, #0]
 8026bec:	f8df c074 	ldr.w	ip, [pc, #116]	; 8026c64 <__b2d+0x98>
 8026bf0:	dc14      	bgt.n	8026c1c <__b2d+0x50>
 8026bf2:	f1c0 0e0b 	rsb	lr, r0, #11
 8026bf6:	fa24 f10e 	lsr.w	r1, r4, lr
 8026bfa:	42b7      	cmp	r7, r6
 8026bfc:	ea41 030c 	orr.w	r3, r1, ip
 8026c00:	bf34      	ite	cc
 8026c02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8026c06:	2100      	movcs	r1, #0
 8026c08:	3015      	adds	r0, #21
 8026c0a:	fa04 f000 	lsl.w	r0, r4, r0
 8026c0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8026c12:	ea40 0201 	orr.w	r2, r0, r1
 8026c16:	ec43 2b10 	vmov	d0, r2, r3
 8026c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c1c:	42b7      	cmp	r7, r6
 8026c1e:	bf3a      	itte	cc
 8026c20:	f1a5 0608 	subcc.w	r6, r5, #8
 8026c24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8026c28:	2100      	movcs	r1, #0
 8026c2a:	380b      	subs	r0, #11
 8026c2c:	d015      	beq.n	8026c5a <__b2d+0x8e>
 8026c2e:	4084      	lsls	r4, r0
 8026c30:	f1c0 0520 	rsb	r5, r0, #32
 8026c34:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8026c38:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8026c3c:	42be      	cmp	r6, r7
 8026c3e:	fa21 fc05 	lsr.w	ip, r1, r5
 8026c42:	ea44 030c 	orr.w	r3, r4, ip
 8026c46:	bf8c      	ite	hi
 8026c48:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8026c4c:	2400      	movls	r4, #0
 8026c4e:	fa01 f000 	lsl.w	r0, r1, r0
 8026c52:	40ec      	lsrs	r4, r5
 8026c54:	ea40 0204 	orr.w	r2, r0, r4
 8026c58:	e7dd      	b.n	8026c16 <__b2d+0x4a>
 8026c5a:	ea44 030c 	orr.w	r3, r4, ip
 8026c5e:	460a      	mov	r2, r1
 8026c60:	e7d9      	b.n	8026c16 <__b2d+0x4a>
 8026c62:	bf00      	nop
 8026c64:	3ff00000 	.word	0x3ff00000

08026c68 <__d2b>:
 8026c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026c6c:	460e      	mov	r6, r1
 8026c6e:	2101      	movs	r1, #1
 8026c70:	ec59 8b10 	vmov	r8, r9, d0
 8026c74:	4615      	mov	r5, r2
 8026c76:	f7ff fcb5 	bl	80265e4 <_Balloc>
 8026c7a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8026c7e:	4607      	mov	r7, r0
 8026c80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026c84:	bb34      	cbnz	r4, 8026cd4 <__d2b+0x6c>
 8026c86:	9301      	str	r3, [sp, #4]
 8026c88:	f1b8 0300 	subs.w	r3, r8, #0
 8026c8c:	d027      	beq.n	8026cde <__d2b+0x76>
 8026c8e:	a802      	add	r0, sp, #8
 8026c90:	f840 3d08 	str.w	r3, [r0, #-8]!
 8026c94:	f7ff fd89 	bl	80267aa <__lo0bits>
 8026c98:	9900      	ldr	r1, [sp, #0]
 8026c9a:	b1f0      	cbz	r0, 8026cda <__d2b+0x72>
 8026c9c:	9a01      	ldr	r2, [sp, #4]
 8026c9e:	f1c0 0320 	rsb	r3, r0, #32
 8026ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8026ca6:	430b      	orrs	r3, r1
 8026ca8:	40c2      	lsrs	r2, r0
 8026caa:	617b      	str	r3, [r7, #20]
 8026cac:	9201      	str	r2, [sp, #4]
 8026cae:	9b01      	ldr	r3, [sp, #4]
 8026cb0:	61bb      	str	r3, [r7, #24]
 8026cb2:	2b00      	cmp	r3, #0
 8026cb4:	bf14      	ite	ne
 8026cb6:	2102      	movne	r1, #2
 8026cb8:	2101      	moveq	r1, #1
 8026cba:	6139      	str	r1, [r7, #16]
 8026cbc:	b1c4      	cbz	r4, 8026cf0 <__d2b+0x88>
 8026cbe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8026cc2:	4404      	add	r4, r0
 8026cc4:	6034      	str	r4, [r6, #0]
 8026cc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026cca:	6028      	str	r0, [r5, #0]
 8026ccc:	4638      	mov	r0, r7
 8026cce:	b003      	add	sp, #12
 8026cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026cd8:	e7d5      	b.n	8026c86 <__d2b+0x1e>
 8026cda:	6179      	str	r1, [r7, #20]
 8026cdc:	e7e7      	b.n	8026cae <__d2b+0x46>
 8026cde:	a801      	add	r0, sp, #4
 8026ce0:	f7ff fd63 	bl	80267aa <__lo0bits>
 8026ce4:	9b01      	ldr	r3, [sp, #4]
 8026ce6:	617b      	str	r3, [r7, #20]
 8026ce8:	2101      	movs	r1, #1
 8026cea:	6139      	str	r1, [r7, #16]
 8026cec:	3020      	adds	r0, #32
 8026cee:	e7e5      	b.n	8026cbc <__d2b+0x54>
 8026cf0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8026cf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026cf8:	6030      	str	r0, [r6, #0]
 8026cfa:	6918      	ldr	r0, [r3, #16]
 8026cfc:	f7ff fd36 	bl	802676c <__hi0bits>
 8026d00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8026d04:	e7e1      	b.n	8026cca <__d2b+0x62>

08026d06 <__ratio>:
 8026d06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d0a:	4688      	mov	r8, r1
 8026d0c:	4669      	mov	r1, sp
 8026d0e:	4681      	mov	r9, r0
 8026d10:	f7ff ff5c 	bl	8026bcc <__b2d>
 8026d14:	a901      	add	r1, sp, #4
 8026d16:	4640      	mov	r0, r8
 8026d18:	ec57 6b10 	vmov	r6, r7, d0
 8026d1c:	f7ff ff56 	bl	8026bcc <__b2d>
 8026d20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026d24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8026d28:	eba3 0c02 	sub.w	ip, r3, r2
 8026d2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8026d30:	1a9b      	subs	r3, r3, r2
 8026d32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8026d36:	ec5b ab10 	vmov	sl, fp, d0
 8026d3a:	2b00      	cmp	r3, #0
 8026d3c:	bfce      	itee	gt
 8026d3e:	463a      	movgt	r2, r7
 8026d40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026d44:	465a      	movle	r2, fp
 8026d46:	4659      	mov	r1, fp
 8026d48:	463d      	mov	r5, r7
 8026d4a:	bfd4      	ite	le
 8026d4c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8026d50:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8026d54:	4630      	mov	r0, r6
 8026d56:	ee10 2a10 	vmov	r2, s0
 8026d5a:	460b      	mov	r3, r1
 8026d5c:	4629      	mov	r1, r5
 8026d5e:	f7d9 fd85 	bl	800086c <__aeabi_ddiv>
 8026d62:	ec41 0b10 	vmov	d0, r0, r1
 8026d66:	b003      	add	sp, #12
 8026d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d6c <__copybits>:
 8026d6c:	3901      	subs	r1, #1
 8026d6e:	b510      	push	{r4, lr}
 8026d70:	1149      	asrs	r1, r1, #5
 8026d72:	6914      	ldr	r4, [r2, #16]
 8026d74:	3101      	adds	r1, #1
 8026d76:	f102 0314 	add.w	r3, r2, #20
 8026d7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026d7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026d82:	42a3      	cmp	r3, r4
 8026d84:	4602      	mov	r2, r0
 8026d86:	d303      	bcc.n	8026d90 <__copybits+0x24>
 8026d88:	2300      	movs	r3, #0
 8026d8a:	428a      	cmp	r2, r1
 8026d8c:	d305      	bcc.n	8026d9a <__copybits+0x2e>
 8026d8e:	bd10      	pop	{r4, pc}
 8026d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8026d94:	f840 2b04 	str.w	r2, [r0], #4
 8026d98:	e7f3      	b.n	8026d82 <__copybits+0x16>
 8026d9a:	f842 3b04 	str.w	r3, [r2], #4
 8026d9e:	e7f4      	b.n	8026d8a <__copybits+0x1e>

08026da0 <__any_on>:
 8026da0:	f100 0214 	add.w	r2, r0, #20
 8026da4:	6900      	ldr	r0, [r0, #16]
 8026da6:	114b      	asrs	r3, r1, #5
 8026da8:	4298      	cmp	r0, r3
 8026daa:	b510      	push	{r4, lr}
 8026dac:	db11      	blt.n	8026dd2 <__any_on+0x32>
 8026dae:	dd0a      	ble.n	8026dc6 <__any_on+0x26>
 8026db0:	f011 011f 	ands.w	r1, r1, #31
 8026db4:	d007      	beq.n	8026dc6 <__any_on+0x26>
 8026db6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026dba:	fa24 f001 	lsr.w	r0, r4, r1
 8026dbe:	fa00 f101 	lsl.w	r1, r0, r1
 8026dc2:	428c      	cmp	r4, r1
 8026dc4:	d10b      	bne.n	8026dde <__any_on+0x3e>
 8026dc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026dca:	4293      	cmp	r3, r2
 8026dcc:	d803      	bhi.n	8026dd6 <__any_on+0x36>
 8026dce:	2000      	movs	r0, #0
 8026dd0:	bd10      	pop	{r4, pc}
 8026dd2:	4603      	mov	r3, r0
 8026dd4:	e7f7      	b.n	8026dc6 <__any_on+0x26>
 8026dd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026dda:	2900      	cmp	r1, #0
 8026ddc:	d0f5      	beq.n	8026dca <__any_on+0x2a>
 8026dde:	2001      	movs	r0, #1
 8026de0:	e7f6      	b.n	8026dd0 <__any_on+0x30>

08026de2 <_realloc_r>:
 8026de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026de4:	4607      	mov	r7, r0
 8026de6:	4614      	mov	r4, r2
 8026de8:	460e      	mov	r6, r1
 8026dea:	b921      	cbnz	r1, 8026df6 <_realloc_r+0x14>
 8026dec:	4611      	mov	r1, r2
 8026dee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8026df2:	f7fb bd95 	b.w	8022920 <_malloc_r>
 8026df6:	b922      	cbnz	r2, 8026e02 <_realloc_r+0x20>
 8026df8:	f7fb fd44 	bl	8022884 <_free_r>
 8026dfc:	4625      	mov	r5, r4
 8026dfe:	4628      	mov	r0, r5
 8026e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026e02:	f000 fe0f 	bl	8027a24 <_malloc_usable_size_r>
 8026e06:	42a0      	cmp	r0, r4
 8026e08:	d20f      	bcs.n	8026e2a <_realloc_r+0x48>
 8026e0a:	4621      	mov	r1, r4
 8026e0c:	4638      	mov	r0, r7
 8026e0e:	f7fb fd87 	bl	8022920 <_malloc_r>
 8026e12:	4605      	mov	r5, r0
 8026e14:	2800      	cmp	r0, #0
 8026e16:	d0f2      	beq.n	8026dfe <_realloc_r+0x1c>
 8026e18:	4631      	mov	r1, r6
 8026e1a:	4622      	mov	r2, r4
 8026e1c:	f7fb fa63 	bl	80222e6 <memcpy>
 8026e20:	4631      	mov	r1, r6
 8026e22:	4638      	mov	r0, r7
 8026e24:	f7fb fd2e 	bl	8022884 <_free_r>
 8026e28:	e7e9      	b.n	8026dfe <_realloc_r+0x1c>
 8026e2a:	4635      	mov	r5, r6
 8026e2c:	e7e7      	b.n	8026dfe <_realloc_r+0x1c>

08026e2e <__ssputs_r>:
 8026e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e32:	688e      	ldr	r6, [r1, #8]
 8026e34:	429e      	cmp	r6, r3
 8026e36:	4682      	mov	sl, r0
 8026e38:	460c      	mov	r4, r1
 8026e3a:	4690      	mov	r8, r2
 8026e3c:	4699      	mov	r9, r3
 8026e3e:	d837      	bhi.n	8026eb0 <__ssputs_r+0x82>
 8026e40:	898a      	ldrh	r2, [r1, #12]
 8026e42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026e46:	d031      	beq.n	8026eac <__ssputs_r+0x7e>
 8026e48:	6825      	ldr	r5, [r4, #0]
 8026e4a:	6909      	ldr	r1, [r1, #16]
 8026e4c:	1a6f      	subs	r7, r5, r1
 8026e4e:	6965      	ldr	r5, [r4, #20]
 8026e50:	2302      	movs	r3, #2
 8026e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026e56:	fb95 f5f3 	sdiv	r5, r5, r3
 8026e5a:	f109 0301 	add.w	r3, r9, #1
 8026e5e:	443b      	add	r3, r7
 8026e60:	429d      	cmp	r5, r3
 8026e62:	bf38      	it	cc
 8026e64:	461d      	movcc	r5, r3
 8026e66:	0553      	lsls	r3, r2, #21
 8026e68:	d530      	bpl.n	8026ecc <__ssputs_r+0x9e>
 8026e6a:	4629      	mov	r1, r5
 8026e6c:	f7fb fd58 	bl	8022920 <_malloc_r>
 8026e70:	4606      	mov	r6, r0
 8026e72:	b950      	cbnz	r0, 8026e8a <__ssputs_r+0x5c>
 8026e74:	230c      	movs	r3, #12
 8026e76:	f8ca 3000 	str.w	r3, [sl]
 8026e7a:	89a3      	ldrh	r3, [r4, #12]
 8026e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026e80:	81a3      	strh	r3, [r4, #12]
 8026e82:	f04f 30ff 	mov.w	r0, #4294967295
 8026e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e8a:	463a      	mov	r2, r7
 8026e8c:	6921      	ldr	r1, [r4, #16]
 8026e8e:	f7fb fa2a 	bl	80222e6 <memcpy>
 8026e92:	89a3      	ldrh	r3, [r4, #12]
 8026e94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026e9c:	81a3      	strh	r3, [r4, #12]
 8026e9e:	6126      	str	r6, [r4, #16]
 8026ea0:	6165      	str	r5, [r4, #20]
 8026ea2:	443e      	add	r6, r7
 8026ea4:	1bed      	subs	r5, r5, r7
 8026ea6:	6026      	str	r6, [r4, #0]
 8026ea8:	60a5      	str	r5, [r4, #8]
 8026eaa:	464e      	mov	r6, r9
 8026eac:	454e      	cmp	r6, r9
 8026eae:	d900      	bls.n	8026eb2 <__ssputs_r+0x84>
 8026eb0:	464e      	mov	r6, r9
 8026eb2:	4632      	mov	r2, r6
 8026eb4:	4641      	mov	r1, r8
 8026eb6:	6820      	ldr	r0, [r4, #0]
 8026eb8:	f7fb fa20 	bl	80222fc <memmove>
 8026ebc:	68a3      	ldr	r3, [r4, #8]
 8026ebe:	1b9b      	subs	r3, r3, r6
 8026ec0:	60a3      	str	r3, [r4, #8]
 8026ec2:	6823      	ldr	r3, [r4, #0]
 8026ec4:	441e      	add	r6, r3
 8026ec6:	6026      	str	r6, [r4, #0]
 8026ec8:	2000      	movs	r0, #0
 8026eca:	e7dc      	b.n	8026e86 <__ssputs_r+0x58>
 8026ecc:	462a      	mov	r2, r5
 8026ece:	f7ff ff88 	bl	8026de2 <_realloc_r>
 8026ed2:	4606      	mov	r6, r0
 8026ed4:	2800      	cmp	r0, #0
 8026ed6:	d1e2      	bne.n	8026e9e <__ssputs_r+0x70>
 8026ed8:	6921      	ldr	r1, [r4, #16]
 8026eda:	4650      	mov	r0, sl
 8026edc:	f7fb fcd2 	bl	8022884 <_free_r>
 8026ee0:	e7c8      	b.n	8026e74 <__ssputs_r+0x46>
	...

08026ee4 <_svfiprintf_r>:
 8026ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ee8:	461d      	mov	r5, r3
 8026eea:	898b      	ldrh	r3, [r1, #12]
 8026eec:	061f      	lsls	r7, r3, #24
 8026eee:	b09d      	sub	sp, #116	; 0x74
 8026ef0:	4680      	mov	r8, r0
 8026ef2:	460c      	mov	r4, r1
 8026ef4:	4616      	mov	r6, r2
 8026ef6:	d50f      	bpl.n	8026f18 <_svfiprintf_r+0x34>
 8026ef8:	690b      	ldr	r3, [r1, #16]
 8026efa:	b96b      	cbnz	r3, 8026f18 <_svfiprintf_r+0x34>
 8026efc:	2140      	movs	r1, #64	; 0x40
 8026efe:	f7fb fd0f 	bl	8022920 <_malloc_r>
 8026f02:	6020      	str	r0, [r4, #0]
 8026f04:	6120      	str	r0, [r4, #16]
 8026f06:	b928      	cbnz	r0, 8026f14 <_svfiprintf_r+0x30>
 8026f08:	230c      	movs	r3, #12
 8026f0a:	f8c8 3000 	str.w	r3, [r8]
 8026f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8026f12:	e0c8      	b.n	80270a6 <_svfiprintf_r+0x1c2>
 8026f14:	2340      	movs	r3, #64	; 0x40
 8026f16:	6163      	str	r3, [r4, #20]
 8026f18:	2300      	movs	r3, #0
 8026f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8026f1c:	2320      	movs	r3, #32
 8026f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026f22:	2330      	movs	r3, #48	; 0x30
 8026f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026f28:	9503      	str	r5, [sp, #12]
 8026f2a:	f04f 0b01 	mov.w	fp, #1
 8026f2e:	4637      	mov	r7, r6
 8026f30:	463d      	mov	r5, r7
 8026f32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8026f36:	b10b      	cbz	r3, 8026f3c <_svfiprintf_r+0x58>
 8026f38:	2b25      	cmp	r3, #37	; 0x25
 8026f3a:	d13e      	bne.n	8026fba <_svfiprintf_r+0xd6>
 8026f3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8026f40:	d00b      	beq.n	8026f5a <_svfiprintf_r+0x76>
 8026f42:	4653      	mov	r3, sl
 8026f44:	4632      	mov	r2, r6
 8026f46:	4621      	mov	r1, r4
 8026f48:	4640      	mov	r0, r8
 8026f4a:	f7ff ff70 	bl	8026e2e <__ssputs_r>
 8026f4e:	3001      	adds	r0, #1
 8026f50:	f000 80a4 	beq.w	802709c <_svfiprintf_r+0x1b8>
 8026f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f56:	4453      	add	r3, sl
 8026f58:	9309      	str	r3, [sp, #36]	; 0x24
 8026f5a:	783b      	ldrb	r3, [r7, #0]
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	f000 809d 	beq.w	802709c <_svfiprintf_r+0x1b8>
 8026f62:	2300      	movs	r3, #0
 8026f64:	f04f 32ff 	mov.w	r2, #4294967295
 8026f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026f6c:	9304      	str	r3, [sp, #16]
 8026f6e:	9307      	str	r3, [sp, #28]
 8026f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026f74:	931a      	str	r3, [sp, #104]	; 0x68
 8026f76:	462f      	mov	r7, r5
 8026f78:	2205      	movs	r2, #5
 8026f7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8026f7e:	4850      	ldr	r0, [pc, #320]	; (80270c0 <_svfiprintf_r+0x1dc>)
 8026f80:	f7d9 f93e 	bl	8000200 <memchr>
 8026f84:	9b04      	ldr	r3, [sp, #16]
 8026f86:	b9d0      	cbnz	r0, 8026fbe <_svfiprintf_r+0xda>
 8026f88:	06d9      	lsls	r1, r3, #27
 8026f8a:	bf44      	itt	mi
 8026f8c:	2220      	movmi	r2, #32
 8026f8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026f92:	071a      	lsls	r2, r3, #28
 8026f94:	bf44      	itt	mi
 8026f96:	222b      	movmi	r2, #43	; 0x2b
 8026f98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026f9c:	782a      	ldrb	r2, [r5, #0]
 8026f9e:	2a2a      	cmp	r2, #42	; 0x2a
 8026fa0:	d015      	beq.n	8026fce <_svfiprintf_r+0xea>
 8026fa2:	9a07      	ldr	r2, [sp, #28]
 8026fa4:	462f      	mov	r7, r5
 8026fa6:	2000      	movs	r0, #0
 8026fa8:	250a      	movs	r5, #10
 8026faa:	4639      	mov	r1, r7
 8026fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026fb0:	3b30      	subs	r3, #48	; 0x30
 8026fb2:	2b09      	cmp	r3, #9
 8026fb4:	d94d      	bls.n	8027052 <_svfiprintf_r+0x16e>
 8026fb6:	b1b8      	cbz	r0, 8026fe8 <_svfiprintf_r+0x104>
 8026fb8:	e00f      	b.n	8026fda <_svfiprintf_r+0xf6>
 8026fba:	462f      	mov	r7, r5
 8026fbc:	e7b8      	b.n	8026f30 <_svfiprintf_r+0x4c>
 8026fbe:	4a40      	ldr	r2, [pc, #256]	; (80270c0 <_svfiprintf_r+0x1dc>)
 8026fc0:	1a80      	subs	r0, r0, r2
 8026fc2:	fa0b f000 	lsl.w	r0, fp, r0
 8026fc6:	4318      	orrs	r0, r3
 8026fc8:	9004      	str	r0, [sp, #16]
 8026fca:	463d      	mov	r5, r7
 8026fcc:	e7d3      	b.n	8026f76 <_svfiprintf_r+0x92>
 8026fce:	9a03      	ldr	r2, [sp, #12]
 8026fd0:	1d11      	adds	r1, r2, #4
 8026fd2:	6812      	ldr	r2, [r2, #0]
 8026fd4:	9103      	str	r1, [sp, #12]
 8026fd6:	2a00      	cmp	r2, #0
 8026fd8:	db01      	blt.n	8026fde <_svfiprintf_r+0xfa>
 8026fda:	9207      	str	r2, [sp, #28]
 8026fdc:	e004      	b.n	8026fe8 <_svfiprintf_r+0x104>
 8026fde:	4252      	negs	r2, r2
 8026fe0:	f043 0302 	orr.w	r3, r3, #2
 8026fe4:	9207      	str	r2, [sp, #28]
 8026fe6:	9304      	str	r3, [sp, #16]
 8026fe8:	783b      	ldrb	r3, [r7, #0]
 8026fea:	2b2e      	cmp	r3, #46	; 0x2e
 8026fec:	d10c      	bne.n	8027008 <_svfiprintf_r+0x124>
 8026fee:	787b      	ldrb	r3, [r7, #1]
 8026ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8026ff2:	d133      	bne.n	802705c <_svfiprintf_r+0x178>
 8026ff4:	9b03      	ldr	r3, [sp, #12]
 8026ff6:	1d1a      	adds	r2, r3, #4
 8026ff8:	681b      	ldr	r3, [r3, #0]
 8026ffa:	9203      	str	r2, [sp, #12]
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	bfb8      	it	lt
 8027000:	f04f 33ff 	movlt.w	r3, #4294967295
 8027004:	3702      	adds	r7, #2
 8027006:	9305      	str	r3, [sp, #20]
 8027008:	4d2e      	ldr	r5, [pc, #184]	; (80270c4 <_svfiprintf_r+0x1e0>)
 802700a:	7839      	ldrb	r1, [r7, #0]
 802700c:	2203      	movs	r2, #3
 802700e:	4628      	mov	r0, r5
 8027010:	f7d9 f8f6 	bl	8000200 <memchr>
 8027014:	b138      	cbz	r0, 8027026 <_svfiprintf_r+0x142>
 8027016:	2340      	movs	r3, #64	; 0x40
 8027018:	1b40      	subs	r0, r0, r5
 802701a:	fa03 f000 	lsl.w	r0, r3, r0
 802701e:	9b04      	ldr	r3, [sp, #16]
 8027020:	4303      	orrs	r3, r0
 8027022:	3701      	adds	r7, #1
 8027024:	9304      	str	r3, [sp, #16]
 8027026:	7839      	ldrb	r1, [r7, #0]
 8027028:	4827      	ldr	r0, [pc, #156]	; (80270c8 <_svfiprintf_r+0x1e4>)
 802702a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802702e:	2206      	movs	r2, #6
 8027030:	1c7e      	adds	r6, r7, #1
 8027032:	f7d9 f8e5 	bl	8000200 <memchr>
 8027036:	2800      	cmp	r0, #0
 8027038:	d038      	beq.n	80270ac <_svfiprintf_r+0x1c8>
 802703a:	4b24      	ldr	r3, [pc, #144]	; (80270cc <_svfiprintf_r+0x1e8>)
 802703c:	bb13      	cbnz	r3, 8027084 <_svfiprintf_r+0x1a0>
 802703e:	9b03      	ldr	r3, [sp, #12]
 8027040:	3307      	adds	r3, #7
 8027042:	f023 0307 	bic.w	r3, r3, #7
 8027046:	3308      	adds	r3, #8
 8027048:	9303      	str	r3, [sp, #12]
 802704a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802704c:	444b      	add	r3, r9
 802704e:	9309      	str	r3, [sp, #36]	; 0x24
 8027050:	e76d      	b.n	8026f2e <_svfiprintf_r+0x4a>
 8027052:	fb05 3202 	mla	r2, r5, r2, r3
 8027056:	2001      	movs	r0, #1
 8027058:	460f      	mov	r7, r1
 802705a:	e7a6      	b.n	8026faa <_svfiprintf_r+0xc6>
 802705c:	2300      	movs	r3, #0
 802705e:	3701      	adds	r7, #1
 8027060:	9305      	str	r3, [sp, #20]
 8027062:	4619      	mov	r1, r3
 8027064:	250a      	movs	r5, #10
 8027066:	4638      	mov	r0, r7
 8027068:	f810 2b01 	ldrb.w	r2, [r0], #1
 802706c:	3a30      	subs	r2, #48	; 0x30
 802706e:	2a09      	cmp	r2, #9
 8027070:	d903      	bls.n	802707a <_svfiprintf_r+0x196>
 8027072:	2b00      	cmp	r3, #0
 8027074:	d0c8      	beq.n	8027008 <_svfiprintf_r+0x124>
 8027076:	9105      	str	r1, [sp, #20]
 8027078:	e7c6      	b.n	8027008 <_svfiprintf_r+0x124>
 802707a:	fb05 2101 	mla	r1, r5, r1, r2
 802707e:	2301      	movs	r3, #1
 8027080:	4607      	mov	r7, r0
 8027082:	e7f0      	b.n	8027066 <_svfiprintf_r+0x182>
 8027084:	ab03      	add	r3, sp, #12
 8027086:	9300      	str	r3, [sp, #0]
 8027088:	4622      	mov	r2, r4
 802708a:	4b11      	ldr	r3, [pc, #68]	; (80270d0 <_svfiprintf_r+0x1ec>)
 802708c:	a904      	add	r1, sp, #16
 802708e:	4640      	mov	r0, r8
 8027090:	f7fb fe74 	bl	8022d7c <_printf_float>
 8027094:	f1b0 3fff 	cmp.w	r0, #4294967295
 8027098:	4681      	mov	r9, r0
 802709a:	d1d6      	bne.n	802704a <_svfiprintf_r+0x166>
 802709c:	89a3      	ldrh	r3, [r4, #12]
 802709e:	065b      	lsls	r3, r3, #25
 80270a0:	f53f af35 	bmi.w	8026f0e <_svfiprintf_r+0x2a>
 80270a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80270a6:	b01d      	add	sp, #116	; 0x74
 80270a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270ac:	ab03      	add	r3, sp, #12
 80270ae:	9300      	str	r3, [sp, #0]
 80270b0:	4622      	mov	r2, r4
 80270b2:	4b07      	ldr	r3, [pc, #28]	; (80270d0 <_svfiprintf_r+0x1ec>)
 80270b4:	a904      	add	r1, sp, #16
 80270b6:	4640      	mov	r0, r8
 80270b8:	f7fc f916 	bl	80232e8 <_printf_i>
 80270bc:	e7ea      	b.n	8027094 <_svfiprintf_r+0x1b0>
 80270be:	bf00      	nop
 80270c0:	080331f0 	.word	0x080331f0
 80270c4:	080331f6 	.word	0x080331f6
 80270c8:	080331fa 	.word	0x080331fa
 80270cc:	08022d7d 	.word	0x08022d7d
 80270d0:	08026e2f 	.word	0x08026e2f

080270d4 <_sungetc_r>:
 80270d4:	b538      	push	{r3, r4, r5, lr}
 80270d6:	1c4b      	adds	r3, r1, #1
 80270d8:	4614      	mov	r4, r2
 80270da:	d103      	bne.n	80270e4 <_sungetc_r+0x10>
 80270dc:	f04f 35ff 	mov.w	r5, #4294967295
 80270e0:	4628      	mov	r0, r5
 80270e2:	bd38      	pop	{r3, r4, r5, pc}
 80270e4:	8993      	ldrh	r3, [r2, #12]
 80270e6:	f023 0320 	bic.w	r3, r3, #32
 80270ea:	8193      	strh	r3, [r2, #12]
 80270ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80270ee:	6852      	ldr	r2, [r2, #4]
 80270f0:	b2cd      	uxtb	r5, r1
 80270f2:	b18b      	cbz	r3, 8027118 <_sungetc_r+0x44>
 80270f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80270f6:	4293      	cmp	r3, r2
 80270f8:	dd08      	ble.n	802710c <_sungetc_r+0x38>
 80270fa:	6823      	ldr	r3, [r4, #0]
 80270fc:	1e5a      	subs	r2, r3, #1
 80270fe:	6022      	str	r2, [r4, #0]
 8027100:	f803 5c01 	strb.w	r5, [r3, #-1]
 8027104:	6863      	ldr	r3, [r4, #4]
 8027106:	3301      	adds	r3, #1
 8027108:	6063      	str	r3, [r4, #4]
 802710a:	e7e9      	b.n	80270e0 <_sungetc_r+0xc>
 802710c:	4621      	mov	r1, r4
 802710e:	f000 fc2b 	bl	8027968 <__submore>
 8027112:	2800      	cmp	r0, #0
 8027114:	d0f1      	beq.n	80270fa <_sungetc_r+0x26>
 8027116:	e7e1      	b.n	80270dc <_sungetc_r+0x8>
 8027118:	6921      	ldr	r1, [r4, #16]
 802711a:	6823      	ldr	r3, [r4, #0]
 802711c:	b151      	cbz	r1, 8027134 <_sungetc_r+0x60>
 802711e:	4299      	cmp	r1, r3
 8027120:	d208      	bcs.n	8027134 <_sungetc_r+0x60>
 8027122:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8027126:	42a9      	cmp	r1, r5
 8027128:	d104      	bne.n	8027134 <_sungetc_r+0x60>
 802712a:	3b01      	subs	r3, #1
 802712c:	3201      	adds	r2, #1
 802712e:	6023      	str	r3, [r4, #0]
 8027130:	6062      	str	r2, [r4, #4]
 8027132:	e7d5      	b.n	80270e0 <_sungetc_r+0xc>
 8027134:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8027138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802713c:	6363      	str	r3, [r4, #52]	; 0x34
 802713e:	2303      	movs	r3, #3
 8027140:	63a3      	str	r3, [r4, #56]	; 0x38
 8027142:	4623      	mov	r3, r4
 8027144:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027148:	6023      	str	r3, [r4, #0]
 802714a:	2301      	movs	r3, #1
 802714c:	e7dc      	b.n	8027108 <_sungetc_r+0x34>

0802714e <__ssrefill_r>:
 802714e:	b510      	push	{r4, lr}
 8027150:	460c      	mov	r4, r1
 8027152:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027154:	b169      	cbz	r1, 8027172 <__ssrefill_r+0x24>
 8027156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802715a:	4299      	cmp	r1, r3
 802715c:	d001      	beq.n	8027162 <__ssrefill_r+0x14>
 802715e:	f7fb fb91 	bl	8022884 <_free_r>
 8027162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027164:	6063      	str	r3, [r4, #4]
 8027166:	2000      	movs	r0, #0
 8027168:	6360      	str	r0, [r4, #52]	; 0x34
 802716a:	b113      	cbz	r3, 8027172 <__ssrefill_r+0x24>
 802716c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802716e:	6023      	str	r3, [r4, #0]
 8027170:	bd10      	pop	{r4, pc}
 8027172:	6923      	ldr	r3, [r4, #16]
 8027174:	6023      	str	r3, [r4, #0]
 8027176:	2300      	movs	r3, #0
 8027178:	6063      	str	r3, [r4, #4]
 802717a:	89a3      	ldrh	r3, [r4, #12]
 802717c:	f043 0320 	orr.w	r3, r3, #32
 8027180:	81a3      	strh	r3, [r4, #12]
 8027182:	f04f 30ff 	mov.w	r0, #4294967295
 8027186:	e7f3      	b.n	8027170 <__ssrefill_r+0x22>

08027188 <__ssvfiscanf_r>:
 8027188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802718c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8027190:	460c      	mov	r4, r1
 8027192:	2100      	movs	r1, #0
 8027194:	9144      	str	r1, [sp, #272]	; 0x110
 8027196:	9145      	str	r1, [sp, #276]	; 0x114
 8027198:	499f      	ldr	r1, [pc, #636]	; (8027418 <__ssvfiscanf_r+0x290>)
 802719a:	91a0      	str	r1, [sp, #640]	; 0x280
 802719c:	f10d 0804 	add.w	r8, sp, #4
 80271a0:	499e      	ldr	r1, [pc, #632]	; (802741c <__ssvfiscanf_r+0x294>)
 80271a2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8027420 <__ssvfiscanf_r+0x298>
 80271a6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80271aa:	4606      	mov	r6, r0
 80271ac:	4692      	mov	sl, r2
 80271ae:	91a1      	str	r1, [sp, #644]	; 0x284
 80271b0:	9300      	str	r3, [sp, #0]
 80271b2:	270a      	movs	r7, #10
 80271b4:	f89a 3000 	ldrb.w	r3, [sl]
 80271b8:	2b00      	cmp	r3, #0
 80271ba:	f000 812a 	beq.w	8027412 <__ssvfiscanf_r+0x28a>
 80271be:	4655      	mov	r5, sl
 80271c0:	f7fb f834 	bl	802222c <__locale_ctype_ptr>
 80271c4:	f815 bb01 	ldrb.w	fp, [r5], #1
 80271c8:	4458      	add	r0, fp
 80271ca:	7843      	ldrb	r3, [r0, #1]
 80271cc:	f013 0308 	ands.w	r3, r3, #8
 80271d0:	d01c      	beq.n	802720c <__ssvfiscanf_r+0x84>
 80271d2:	6863      	ldr	r3, [r4, #4]
 80271d4:	2b00      	cmp	r3, #0
 80271d6:	dd12      	ble.n	80271fe <__ssvfiscanf_r+0x76>
 80271d8:	f7fb f828 	bl	802222c <__locale_ctype_ptr>
 80271dc:	6823      	ldr	r3, [r4, #0]
 80271de:	781a      	ldrb	r2, [r3, #0]
 80271e0:	4410      	add	r0, r2
 80271e2:	7842      	ldrb	r2, [r0, #1]
 80271e4:	0712      	lsls	r2, r2, #28
 80271e6:	d401      	bmi.n	80271ec <__ssvfiscanf_r+0x64>
 80271e8:	46aa      	mov	sl, r5
 80271ea:	e7e3      	b.n	80271b4 <__ssvfiscanf_r+0x2c>
 80271ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80271ee:	3201      	adds	r2, #1
 80271f0:	9245      	str	r2, [sp, #276]	; 0x114
 80271f2:	6862      	ldr	r2, [r4, #4]
 80271f4:	3301      	adds	r3, #1
 80271f6:	3a01      	subs	r2, #1
 80271f8:	6062      	str	r2, [r4, #4]
 80271fa:	6023      	str	r3, [r4, #0]
 80271fc:	e7e9      	b.n	80271d2 <__ssvfiscanf_r+0x4a>
 80271fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027200:	4621      	mov	r1, r4
 8027202:	4630      	mov	r0, r6
 8027204:	4798      	blx	r3
 8027206:	2800      	cmp	r0, #0
 8027208:	d0e6      	beq.n	80271d8 <__ssvfiscanf_r+0x50>
 802720a:	e7ed      	b.n	80271e8 <__ssvfiscanf_r+0x60>
 802720c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8027210:	f040 8082 	bne.w	8027318 <__ssvfiscanf_r+0x190>
 8027214:	9343      	str	r3, [sp, #268]	; 0x10c
 8027216:	9341      	str	r3, [sp, #260]	; 0x104
 8027218:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802721c:	2b2a      	cmp	r3, #42	; 0x2a
 802721e:	d103      	bne.n	8027228 <__ssvfiscanf_r+0xa0>
 8027220:	2310      	movs	r3, #16
 8027222:	9341      	str	r3, [sp, #260]	; 0x104
 8027224:	f10a 0502 	add.w	r5, sl, #2
 8027228:	46aa      	mov	sl, r5
 802722a:	f815 1b01 	ldrb.w	r1, [r5], #1
 802722e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8027232:	2a09      	cmp	r2, #9
 8027234:	d922      	bls.n	802727c <__ssvfiscanf_r+0xf4>
 8027236:	2203      	movs	r2, #3
 8027238:	4879      	ldr	r0, [pc, #484]	; (8027420 <__ssvfiscanf_r+0x298>)
 802723a:	f7d8 ffe1 	bl	8000200 <memchr>
 802723e:	b138      	cbz	r0, 8027250 <__ssvfiscanf_r+0xc8>
 8027240:	eba0 0309 	sub.w	r3, r0, r9
 8027244:	2001      	movs	r0, #1
 8027246:	4098      	lsls	r0, r3
 8027248:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802724a:	4318      	orrs	r0, r3
 802724c:	9041      	str	r0, [sp, #260]	; 0x104
 802724e:	46aa      	mov	sl, r5
 8027250:	f89a 3000 	ldrb.w	r3, [sl]
 8027254:	2b67      	cmp	r3, #103	; 0x67
 8027256:	f10a 0501 	add.w	r5, sl, #1
 802725a:	d82b      	bhi.n	80272b4 <__ssvfiscanf_r+0x12c>
 802725c:	2b65      	cmp	r3, #101	; 0x65
 802725e:	f080 809f 	bcs.w	80273a0 <__ssvfiscanf_r+0x218>
 8027262:	2b47      	cmp	r3, #71	; 0x47
 8027264:	d810      	bhi.n	8027288 <__ssvfiscanf_r+0x100>
 8027266:	2b45      	cmp	r3, #69	; 0x45
 8027268:	f080 809a 	bcs.w	80273a0 <__ssvfiscanf_r+0x218>
 802726c:	2b00      	cmp	r3, #0
 802726e:	d06c      	beq.n	802734a <__ssvfiscanf_r+0x1c2>
 8027270:	2b25      	cmp	r3, #37	; 0x25
 8027272:	d051      	beq.n	8027318 <__ssvfiscanf_r+0x190>
 8027274:	2303      	movs	r3, #3
 8027276:	9347      	str	r3, [sp, #284]	; 0x11c
 8027278:	9742      	str	r7, [sp, #264]	; 0x108
 802727a:	e027      	b.n	80272cc <__ssvfiscanf_r+0x144>
 802727c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802727e:	fb07 1303 	mla	r3, r7, r3, r1
 8027282:	3b30      	subs	r3, #48	; 0x30
 8027284:	9343      	str	r3, [sp, #268]	; 0x10c
 8027286:	e7cf      	b.n	8027228 <__ssvfiscanf_r+0xa0>
 8027288:	2b5b      	cmp	r3, #91	; 0x5b
 802728a:	d06a      	beq.n	8027362 <__ssvfiscanf_r+0x1da>
 802728c:	d80c      	bhi.n	80272a8 <__ssvfiscanf_r+0x120>
 802728e:	2b58      	cmp	r3, #88	; 0x58
 8027290:	d1f0      	bne.n	8027274 <__ssvfiscanf_r+0xec>
 8027292:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027298:	9241      	str	r2, [sp, #260]	; 0x104
 802729a:	2210      	movs	r2, #16
 802729c:	9242      	str	r2, [sp, #264]	; 0x108
 802729e:	2b6e      	cmp	r3, #110	; 0x6e
 80272a0:	bf8c      	ite	hi
 80272a2:	2304      	movhi	r3, #4
 80272a4:	2303      	movls	r3, #3
 80272a6:	e010      	b.n	80272ca <__ssvfiscanf_r+0x142>
 80272a8:	2b63      	cmp	r3, #99	; 0x63
 80272aa:	d065      	beq.n	8027378 <__ssvfiscanf_r+0x1f0>
 80272ac:	2b64      	cmp	r3, #100	; 0x64
 80272ae:	d1e1      	bne.n	8027274 <__ssvfiscanf_r+0xec>
 80272b0:	9742      	str	r7, [sp, #264]	; 0x108
 80272b2:	e7f4      	b.n	802729e <__ssvfiscanf_r+0x116>
 80272b4:	2b70      	cmp	r3, #112	; 0x70
 80272b6:	d04b      	beq.n	8027350 <__ssvfiscanf_r+0x1c8>
 80272b8:	d826      	bhi.n	8027308 <__ssvfiscanf_r+0x180>
 80272ba:	2b6e      	cmp	r3, #110	; 0x6e
 80272bc:	d062      	beq.n	8027384 <__ssvfiscanf_r+0x1fc>
 80272be:	d84c      	bhi.n	802735a <__ssvfiscanf_r+0x1d2>
 80272c0:	2b69      	cmp	r3, #105	; 0x69
 80272c2:	d1d7      	bne.n	8027274 <__ssvfiscanf_r+0xec>
 80272c4:	2300      	movs	r3, #0
 80272c6:	9342      	str	r3, [sp, #264]	; 0x108
 80272c8:	2303      	movs	r3, #3
 80272ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80272cc:	6863      	ldr	r3, [r4, #4]
 80272ce:	2b00      	cmp	r3, #0
 80272d0:	dd68      	ble.n	80273a4 <__ssvfiscanf_r+0x21c>
 80272d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80272d4:	0659      	lsls	r1, r3, #25
 80272d6:	d407      	bmi.n	80272e8 <__ssvfiscanf_r+0x160>
 80272d8:	f7fa ffa8 	bl	802222c <__locale_ctype_ptr>
 80272dc:	6823      	ldr	r3, [r4, #0]
 80272de:	781a      	ldrb	r2, [r3, #0]
 80272e0:	4410      	add	r0, r2
 80272e2:	7842      	ldrb	r2, [r0, #1]
 80272e4:	0712      	lsls	r2, r2, #28
 80272e6:	d464      	bmi.n	80273b2 <__ssvfiscanf_r+0x22a>
 80272e8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80272ea:	2b02      	cmp	r3, #2
 80272ec:	dc73      	bgt.n	80273d6 <__ssvfiscanf_r+0x24e>
 80272ee:	466b      	mov	r3, sp
 80272f0:	4622      	mov	r2, r4
 80272f2:	a941      	add	r1, sp, #260	; 0x104
 80272f4:	4630      	mov	r0, r6
 80272f6:	f000 f897 	bl	8027428 <_scanf_chars>
 80272fa:	2801      	cmp	r0, #1
 80272fc:	f000 8089 	beq.w	8027412 <__ssvfiscanf_r+0x28a>
 8027300:	2802      	cmp	r0, #2
 8027302:	f47f af71 	bne.w	80271e8 <__ssvfiscanf_r+0x60>
 8027306:	e01d      	b.n	8027344 <__ssvfiscanf_r+0x1bc>
 8027308:	2b75      	cmp	r3, #117	; 0x75
 802730a:	d0d1      	beq.n	80272b0 <__ssvfiscanf_r+0x128>
 802730c:	2b78      	cmp	r3, #120	; 0x78
 802730e:	d0c0      	beq.n	8027292 <__ssvfiscanf_r+0x10a>
 8027310:	2b73      	cmp	r3, #115	; 0x73
 8027312:	d1af      	bne.n	8027274 <__ssvfiscanf_r+0xec>
 8027314:	2302      	movs	r3, #2
 8027316:	e7d8      	b.n	80272ca <__ssvfiscanf_r+0x142>
 8027318:	6863      	ldr	r3, [r4, #4]
 802731a:	2b00      	cmp	r3, #0
 802731c:	dd0c      	ble.n	8027338 <__ssvfiscanf_r+0x1b0>
 802731e:	6823      	ldr	r3, [r4, #0]
 8027320:	781a      	ldrb	r2, [r3, #0]
 8027322:	455a      	cmp	r2, fp
 8027324:	d175      	bne.n	8027412 <__ssvfiscanf_r+0x28a>
 8027326:	3301      	adds	r3, #1
 8027328:	6862      	ldr	r2, [r4, #4]
 802732a:	6023      	str	r3, [r4, #0]
 802732c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802732e:	3a01      	subs	r2, #1
 8027330:	3301      	adds	r3, #1
 8027332:	6062      	str	r2, [r4, #4]
 8027334:	9345      	str	r3, [sp, #276]	; 0x114
 8027336:	e757      	b.n	80271e8 <__ssvfiscanf_r+0x60>
 8027338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802733a:	4621      	mov	r1, r4
 802733c:	4630      	mov	r0, r6
 802733e:	4798      	blx	r3
 8027340:	2800      	cmp	r0, #0
 8027342:	d0ec      	beq.n	802731e <__ssvfiscanf_r+0x196>
 8027344:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027346:	2800      	cmp	r0, #0
 8027348:	d159      	bne.n	80273fe <__ssvfiscanf_r+0x276>
 802734a:	f04f 30ff 	mov.w	r0, #4294967295
 802734e:	e05c      	b.n	802740a <__ssvfiscanf_r+0x282>
 8027350:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027352:	f042 0220 	orr.w	r2, r2, #32
 8027356:	9241      	str	r2, [sp, #260]	; 0x104
 8027358:	e79b      	b.n	8027292 <__ssvfiscanf_r+0x10a>
 802735a:	2308      	movs	r3, #8
 802735c:	9342      	str	r3, [sp, #264]	; 0x108
 802735e:	2304      	movs	r3, #4
 8027360:	e7b3      	b.n	80272ca <__ssvfiscanf_r+0x142>
 8027362:	4629      	mov	r1, r5
 8027364:	4640      	mov	r0, r8
 8027366:	f000 fa2b 	bl	80277c0 <__sccl>
 802736a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802736c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027370:	9341      	str	r3, [sp, #260]	; 0x104
 8027372:	4605      	mov	r5, r0
 8027374:	2301      	movs	r3, #1
 8027376:	e7a8      	b.n	80272ca <__ssvfiscanf_r+0x142>
 8027378:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802737a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802737e:	9341      	str	r3, [sp, #260]	; 0x104
 8027380:	2300      	movs	r3, #0
 8027382:	e7a2      	b.n	80272ca <__ssvfiscanf_r+0x142>
 8027384:	9841      	ldr	r0, [sp, #260]	; 0x104
 8027386:	06c3      	lsls	r3, r0, #27
 8027388:	f53f af2e 	bmi.w	80271e8 <__ssvfiscanf_r+0x60>
 802738c:	9b00      	ldr	r3, [sp, #0]
 802738e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8027390:	1d19      	adds	r1, r3, #4
 8027392:	9100      	str	r1, [sp, #0]
 8027394:	681b      	ldr	r3, [r3, #0]
 8027396:	07c0      	lsls	r0, r0, #31
 8027398:	bf4c      	ite	mi
 802739a:	801a      	strhmi	r2, [r3, #0]
 802739c:	601a      	strpl	r2, [r3, #0]
 802739e:	e723      	b.n	80271e8 <__ssvfiscanf_r+0x60>
 80273a0:	2305      	movs	r3, #5
 80273a2:	e792      	b.n	80272ca <__ssvfiscanf_r+0x142>
 80273a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80273a6:	4621      	mov	r1, r4
 80273a8:	4630      	mov	r0, r6
 80273aa:	4798      	blx	r3
 80273ac:	2800      	cmp	r0, #0
 80273ae:	d090      	beq.n	80272d2 <__ssvfiscanf_r+0x14a>
 80273b0:	e7c8      	b.n	8027344 <__ssvfiscanf_r+0x1bc>
 80273b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80273b4:	3201      	adds	r2, #1
 80273b6:	9245      	str	r2, [sp, #276]	; 0x114
 80273b8:	6862      	ldr	r2, [r4, #4]
 80273ba:	3a01      	subs	r2, #1
 80273bc:	2a00      	cmp	r2, #0
 80273be:	6062      	str	r2, [r4, #4]
 80273c0:	dd02      	ble.n	80273c8 <__ssvfiscanf_r+0x240>
 80273c2:	3301      	adds	r3, #1
 80273c4:	6023      	str	r3, [r4, #0]
 80273c6:	e787      	b.n	80272d8 <__ssvfiscanf_r+0x150>
 80273c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80273ca:	4621      	mov	r1, r4
 80273cc:	4630      	mov	r0, r6
 80273ce:	4798      	blx	r3
 80273d0:	2800      	cmp	r0, #0
 80273d2:	d081      	beq.n	80272d8 <__ssvfiscanf_r+0x150>
 80273d4:	e7b6      	b.n	8027344 <__ssvfiscanf_r+0x1bc>
 80273d6:	2b04      	cmp	r3, #4
 80273d8:	dc06      	bgt.n	80273e8 <__ssvfiscanf_r+0x260>
 80273da:	466b      	mov	r3, sp
 80273dc:	4622      	mov	r2, r4
 80273de:	a941      	add	r1, sp, #260	; 0x104
 80273e0:	4630      	mov	r0, r6
 80273e2:	f000 f885 	bl	80274f0 <_scanf_i>
 80273e6:	e788      	b.n	80272fa <__ssvfiscanf_r+0x172>
 80273e8:	4b0e      	ldr	r3, [pc, #56]	; (8027424 <__ssvfiscanf_r+0x29c>)
 80273ea:	2b00      	cmp	r3, #0
 80273ec:	f43f aefc 	beq.w	80271e8 <__ssvfiscanf_r+0x60>
 80273f0:	466b      	mov	r3, sp
 80273f2:	4622      	mov	r2, r4
 80273f4:	a941      	add	r1, sp, #260	; 0x104
 80273f6:	4630      	mov	r0, r6
 80273f8:	f3af 8000 	nop.w
 80273fc:	e77d      	b.n	80272fa <__ssvfiscanf_r+0x172>
 80273fe:	89a3      	ldrh	r3, [r4, #12]
 8027400:	f013 0f40 	tst.w	r3, #64	; 0x40
 8027404:	bf18      	it	ne
 8027406:	f04f 30ff 	movne.w	r0, #4294967295
 802740a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 802740e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027412:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027414:	e7f9      	b.n	802740a <__ssvfiscanf_r+0x282>
 8027416:	bf00      	nop
 8027418:	080270d5 	.word	0x080270d5
 802741c:	0802714f 	.word	0x0802714f
 8027420:	080331f6 	.word	0x080331f6
 8027424:	00000000 	.word	0x00000000

08027428 <_scanf_chars>:
 8027428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802742c:	4615      	mov	r5, r2
 802742e:	688a      	ldr	r2, [r1, #8]
 8027430:	4680      	mov	r8, r0
 8027432:	460c      	mov	r4, r1
 8027434:	b932      	cbnz	r2, 8027444 <_scanf_chars+0x1c>
 8027436:	698a      	ldr	r2, [r1, #24]
 8027438:	2a00      	cmp	r2, #0
 802743a:	bf14      	ite	ne
 802743c:	f04f 32ff 	movne.w	r2, #4294967295
 8027440:	2201      	moveq	r2, #1
 8027442:	608a      	str	r2, [r1, #8]
 8027444:	6822      	ldr	r2, [r4, #0]
 8027446:	06d1      	lsls	r1, r2, #27
 8027448:	bf5f      	itttt	pl
 802744a:	681a      	ldrpl	r2, [r3, #0]
 802744c:	1d11      	addpl	r1, r2, #4
 802744e:	6019      	strpl	r1, [r3, #0]
 8027450:	6817      	ldrpl	r7, [r2, #0]
 8027452:	2600      	movs	r6, #0
 8027454:	69a3      	ldr	r3, [r4, #24]
 8027456:	b1db      	cbz	r3, 8027490 <_scanf_chars+0x68>
 8027458:	2b01      	cmp	r3, #1
 802745a:	d107      	bne.n	802746c <_scanf_chars+0x44>
 802745c:	682b      	ldr	r3, [r5, #0]
 802745e:	6962      	ldr	r2, [r4, #20]
 8027460:	781b      	ldrb	r3, [r3, #0]
 8027462:	5cd3      	ldrb	r3, [r2, r3]
 8027464:	b9a3      	cbnz	r3, 8027490 <_scanf_chars+0x68>
 8027466:	2e00      	cmp	r6, #0
 8027468:	d132      	bne.n	80274d0 <_scanf_chars+0xa8>
 802746a:	e006      	b.n	802747a <_scanf_chars+0x52>
 802746c:	2b02      	cmp	r3, #2
 802746e:	d007      	beq.n	8027480 <_scanf_chars+0x58>
 8027470:	2e00      	cmp	r6, #0
 8027472:	d12d      	bne.n	80274d0 <_scanf_chars+0xa8>
 8027474:	69a3      	ldr	r3, [r4, #24]
 8027476:	2b01      	cmp	r3, #1
 8027478:	d12a      	bne.n	80274d0 <_scanf_chars+0xa8>
 802747a:	2001      	movs	r0, #1
 802747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027480:	f7fa fed4 	bl	802222c <__locale_ctype_ptr>
 8027484:	682b      	ldr	r3, [r5, #0]
 8027486:	781b      	ldrb	r3, [r3, #0]
 8027488:	4418      	add	r0, r3
 802748a:	7843      	ldrb	r3, [r0, #1]
 802748c:	071b      	lsls	r3, r3, #28
 802748e:	d4ef      	bmi.n	8027470 <_scanf_chars+0x48>
 8027490:	6823      	ldr	r3, [r4, #0]
 8027492:	06da      	lsls	r2, r3, #27
 8027494:	bf5e      	ittt	pl
 8027496:	682b      	ldrpl	r3, [r5, #0]
 8027498:	781b      	ldrbpl	r3, [r3, #0]
 802749a:	703b      	strbpl	r3, [r7, #0]
 802749c:	682a      	ldr	r2, [r5, #0]
 802749e:	686b      	ldr	r3, [r5, #4]
 80274a0:	f102 0201 	add.w	r2, r2, #1
 80274a4:	602a      	str	r2, [r5, #0]
 80274a6:	68a2      	ldr	r2, [r4, #8]
 80274a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80274ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80274b0:	606b      	str	r3, [r5, #4]
 80274b2:	f106 0601 	add.w	r6, r6, #1
 80274b6:	bf58      	it	pl
 80274b8:	3701      	addpl	r7, #1
 80274ba:	60a2      	str	r2, [r4, #8]
 80274bc:	b142      	cbz	r2, 80274d0 <_scanf_chars+0xa8>
 80274be:	2b00      	cmp	r3, #0
 80274c0:	dcc8      	bgt.n	8027454 <_scanf_chars+0x2c>
 80274c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80274c6:	4629      	mov	r1, r5
 80274c8:	4640      	mov	r0, r8
 80274ca:	4798      	blx	r3
 80274cc:	2800      	cmp	r0, #0
 80274ce:	d0c1      	beq.n	8027454 <_scanf_chars+0x2c>
 80274d0:	6823      	ldr	r3, [r4, #0]
 80274d2:	f013 0310 	ands.w	r3, r3, #16
 80274d6:	d105      	bne.n	80274e4 <_scanf_chars+0xbc>
 80274d8:	68e2      	ldr	r2, [r4, #12]
 80274da:	3201      	adds	r2, #1
 80274dc:	60e2      	str	r2, [r4, #12]
 80274de:	69a2      	ldr	r2, [r4, #24]
 80274e0:	b102      	cbz	r2, 80274e4 <_scanf_chars+0xbc>
 80274e2:	703b      	strb	r3, [r7, #0]
 80274e4:	6923      	ldr	r3, [r4, #16]
 80274e6:	441e      	add	r6, r3
 80274e8:	6126      	str	r6, [r4, #16]
 80274ea:	2000      	movs	r0, #0
 80274ec:	e7c6      	b.n	802747c <_scanf_chars+0x54>
	...

080274f0 <_scanf_i>:
 80274f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274f4:	469a      	mov	sl, r3
 80274f6:	4b74      	ldr	r3, [pc, #464]	; (80276c8 <_scanf_i+0x1d8>)
 80274f8:	460c      	mov	r4, r1
 80274fa:	4683      	mov	fp, r0
 80274fc:	4616      	mov	r6, r2
 80274fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027502:	b087      	sub	sp, #28
 8027504:	ab03      	add	r3, sp, #12
 8027506:	68a7      	ldr	r7, [r4, #8]
 8027508:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802750c:	4b6f      	ldr	r3, [pc, #444]	; (80276cc <_scanf_i+0x1dc>)
 802750e:	69a1      	ldr	r1, [r4, #24]
 8027510:	4a6f      	ldr	r2, [pc, #444]	; (80276d0 <_scanf_i+0x1e0>)
 8027512:	2903      	cmp	r1, #3
 8027514:	bf08      	it	eq
 8027516:	461a      	moveq	r2, r3
 8027518:	1e7b      	subs	r3, r7, #1
 802751a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 802751e:	bf84      	itt	hi
 8027520:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027524:	60a3      	strhi	r3, [r4, #8]
 8027526:	6823      	ldr	r3, [r4, #0]
 8027528:	9200      	str	r2, [sp, #0]
 802752a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802752e:	bf88      	it	hi
 8027530:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8027534:	f104 091c 	add.w	r9, r4, #28
 8027538:	6023      	str	r3, [r4, #0]
 802753a:	bf8c      	ite	hi
 802753c:	197f      	addhi	r7, r7, r5
 802753e:	2700      	movls	r7, #0
 8027540:	464b      	mov	r3, r9
 8027542:	f04f 0800 	mov.w	r8, #0
 8027546:	9301      	str	r3, [sp, #4]
 8027548:	6831      	ldr	r1, [r6, #0]
 802754a:	ab03      	add	r3, sp, #12
 802754c:	2202      	movs	r2, #2
 802754e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8027552:	7809      	ldrb	r1, [r1, #0]
 8027554:	f7d8 fe54 	bl	8000200 <memchr>
 8027558:	9b01      	ldr	r3, [sp, #4]
 802755a:	b330      	cbz	r0, 80275aa <_scanf_i+0xba>
 802755c:	f1b8 0f01 	cmp.w	r8, #1
 8027560:	d15a      	bne.n	8027618 <_scanf_i+0x128>
 8027562:	6862      	ldr	r2, [r4, #4]
 8027564:	b92a      	cbnz	r2, 8027572 <_scanf_i+0x82>
 8027566:	6822      	ldr	r2, [r4, #0]
 8027568:	2108      	movs	r1, #8
 802756a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802756e:	6061      	str	r1, [r4, #4]
 8027570:	6022      	str	r2, [r4, #0]
 8027572:	6822      	ldr	r2, [r4, #0]
 8027574:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8027578:	6022      	str	r2, [r4, #0]
 802757a:	68a2      	ldr	r2, [r4, #8]
 802757c:	1e51      	subs	r1, r2, #1
 802757e:	60a1      	str	r1, [r4, #8]
 8027580:	b19a      	cbz	r2, 80275aa <_scanf_i+0xba>
 8027582:	6832      	ldr	r2, [r6, #0]
 8027584:	1c51      	adds	r1, r2, #1
 8027586:	6031      	str	r1, [r6, #0]
 8027588:	7812      	ldrb	r2, [r2, #0]
 802758a:	701a      	strb	r2, [r3, #0]
 802758c:	1c5d      	adds	r5, r3, #1
 802758e:	6873      	ldr	r3, [r6, #4]
 8027590:	3b01      	subs	r3, #1
 8027592:	2b00      	cmp	r3, #0
 8027594:	6073      	str	r3, [r6, #4]
 8027596:	dc07      	bgt.n	80275a8 <_scanf_i+0xb8>
 8027598:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802759c:	4631      	mov	r1, r6
 802759e:	4658      	mov	r0, fp
 80275a0:	4798      	blx	r3
 80275a2:	2800      	cmp	r0, #0
 80275a4:	f040 8086 	bne.w	80276b4 <_scanf_i+0x1c4>
 80275a8:	462b      	mov	r3, r5
 80275aa:	f108 0801 	add.w	r8, r8, #1
 80275ae:	f1b8 0f03 	cmp.w	r8, #3
 80275b2:	d1c8      	bne.n	8027546 <_scanf_i+0x56>
 80275b4:	6862      	ldr	r2, [r4, #4]
 80275b6:	b90a      	cbnz	r2, 80275bc <_scanf_i+0xcc>
 80275b8:	220a      	movs	r2, #10
 80275ba:	6062      	str	r2, [r4, #4]
 80275bc:	6862      	ldr	r2, [r4, #4]
 80275be:	4945      	ldr	r1, [pc, #276]	; (80276d4 <_scanf_i+0x1e4>)
 80275c0:	6960      	ldr	r0, [r4, #20]
 80275c2:	9301      	str	r3, [sp, #4]
 80275c4:	1a89      	subs	r1, r1, r2
 80275c6:	f000 f8fb 	bl	80277c0 <__sccl>
 80275ca:	9b01      	ldr	r3, [sp, #4]
 80275cc:	f04f 0800 	mov.w	r8, #0
 80275d0:	461d      	mov	r5, r3
 80275d2:	68a3      	ldr	r3, [r4, #8]
 80275d4:	6822      	ldr	r2, [r4, #0]
 80275d6:	2b00      	cmp	r3, #0
 80275d8:	d03a      	beq.n	8027650 <_scanf_i+0x160>
 80275da:	6831      	ldr	r1, [r6, #0]
 80275dc:	6960      	ldr	r0, [r4, #20]
 80275de:	f891 c000 	ldrb.w	ip, [r1]
 80275e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80275e6:	2800      	cmp	r0, #0
 80275e8:	d032      	beq.n	8027650 <_scanf_i+0x160>
 80275ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80275ee:	d121      	bne.n	8027634 <_scanf_i+0x144>
 80275f0:	0510      	lsls	r0, r2, #20
 80275f2:	d51f      	bpl.n	8027634 <_scanf_i+0x144>
 80275f4:	f108 0801 	add.w	r8, r8, #1
 80275f8:	b117      	cbz	r7, 8027600 <_scanf_i+0x110>
 80275fa:	3301      	adds	r3, #1
 80275fc:	3f01      	subs	r7, #1
 80275fe:	60a3      	str	r3, [r4, #8]
 8027600:	6873      	ldr	r3, [r6, #4]
 8027602:	3b01      	subs	r3, #1
 8027604:	2b00      	cmp	r3, #0
 8027606:	6073      	str	r3, [r6, #4]
 8027608:	dd1b      	ble.n	8027642 <_scanf_i+0x152>
 802760a:	6833      	ldr	r3, [r6, #0]
 802760c:	3301      	adds	r3, #1
 802760e:	6033      	str	r3, [r6, #0]
 8027610:	68a3      	ldr	r3, [r4, #8]
 8027612:	3b01      	subs	r3, #1
 8027614:	60a3      	str	r3, [r4, #8]
 8027616:	e7dc      	b.n	80275d2 <_scanf_i+0xe2>
 8027618:	f1b8 0f02 	cmp.w	r8, #2
 802761c:	d1ad      	bne.n	802757a <_scanf_i+0x8a>
 802761e:	6822      	ldr	r2, [r4, #0]
 8027620:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8027624:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8027628:	d1bf      	bne.n	80275aa <_scanf_i+0xba>
 802762a:	2110      	movs	r1, #16
 802762c:	6061      	str	r1, [r4, #4]
 802762e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8027632:	e7a1      	b.n	8027578 <_scanf_i+0x88>
 8027634:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8027638:	6022      	str	r2, [r4, #0]
 802763a:	780b      	ldrb	r3, [r1, #0]
 802763c:	702b      	strb	r3, [r5, #0]
 802763e:	3501      	adds	r5, #1
 8027640:	e7de      	b.n	8027600 <_scanf_i+0x110>
 8027642:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027646:	4631      	mov	r1, r6
 8027648:	4658      	mov	r0, fp
 802764a:	4798      	blx	r3
 802764c:	2800      	cmp	r0, #0
 802764e:	d0df      	beq.n	8027610 <_scanf_i+0x120>
 8027650:	6823      	ldr	r3, [r4, #0]
 8027652:	05d9      	lsls	r1, r3, #23
 8027654:	d50c      	bpl.n	8027670 <_scanf_i+0x180>
 8027656:	454d      	cmp	r5, r9
 8027658:	d908      	bls.n	802766c <_scanf_i+0x17c>
 802765a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802765e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027662:	4632      	mov	r2, r6
 8027664:	4658      	mov	r0, fp
 8027666:	4798      	blx	r3
 8027668:	1e6f      	subs	r7, r5, #1
 802766a:	463d      	mov	r5, r7
 802766c:	454d      	cmp	r5, r9
 802766e:	d029      	beq.n	80276c4 <_scanf_i+0x1d4>
 8027670:	6822      	ldr	r2, [r4, #0]
 8027672:	f012 0210 	ands.w	r2, r2, #16
 8027676:	d113      	bne.n	80276a0 <_scanf_i+0x1b0>
 8027678:	702a      	strb	r2, [r5, #0]
 802767a:	6863      	ldr	r3, [r4, #4]
 802767c:	9e00      	ldr	r6, [sp, #0]
 802767e:	4649      	mov	r1, r9
 8027680:	4658      	mov	r0, fp
 8027682:	47b0      	blx	r6
 8027684:	f8da 3000 	ldr.w	r3, [sl]
 8027688:	6821      	ldr	r1, [r4, #0]
 802768a:	1d1a      	adds	r2, r3, #4
 802768c:	f8ca 2000 	str.w	r2, [sl]
 8027690:	f011 0f20 	tst.w	r1, #32
 8027694:	681b      	ldr	r3, [r3, #0]
 8027696:	d010      	beq.n	80276ba <_scanf_i+0x1ca>
 8027698:	6018      	str	r0, [r3, #0]
 802769a:	68e3      	ldr	r3, [r4, #12]
 802769c:	3301      	adds	r3, #1
 802769e:	60e3      	str	r3, [r4, #12]
 80276a0:	eba5 0509 	sub.w	r5, r5, r9
 80276a4:	44a8      	add	r8, r5
 80276a6:	6925      	ldr	r5, [r4, #16]
 80276a8:	4445      	add	r5, r8
 80276aa:	6125      	str	r5, [r4, #16]
 80276ac:	2000      	movs	r0, #0
 80276ae:	b007      	add	sp, #28
 80276b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276b4:	f04f 0800 	mov.w	r8, #0
 80276b8:	e7ca      	b.n	8027650 <_scanf_i+0x160>
 80276ba:	07ca      	lsls	r2, r1, #31
 80276bc:	bf4c      	ite	mi
 80276be:	8018      	strhmi	r0, [r3, #0]
 80276c0:	6018      	strpl	r0, [r3, #0]
 80276c2:	e7ea      	b.n	802769a <_scanf_i+0x1aa>
 80276c4:	2001      	movs	r0, #1
 80276c6:	e7f2      	b.n	80276ae <_scanf_i+0x1be>
 80276c8:	0802d07c 	.word	0x0802d07c
 80276cc:	080246c1 	.word	0x080246c1
 80276d0:	08027919 	.word	0x08027919
 80276d4:	080335a4 	.word	0x080335a4

080276d8 <_putc_r>:
 80276d8:	b570      	push	{r4, r5, r6, lr}
 80276da:	460d      	mov	r5, r1
 80276dc:	4614      	mov	r4, r2
 80276de:	4606      	mov	r6, r0
 80276e0:	b118      	cbz	r0, 80276ea <_putc_r+0x12>
 80276e2:	6983      	ldr	r3, [r0, #24]
 80276e4:	b90b      	cbnz	r3, 80276ea <_putc_r+0x12>
 80276e6:	f7fe fac5 	bl	8025c74 <__sinit>
 80276ea:	4b13      	ldr	r3, [pc, #76]	; (8027738 <_putc_r+0x60>)
 80276ec:	429c      	cmp	r4, r3
 80276ee:	d112      	bne.n	8027716 <_putc_r+0x3e>
 80276f0:	6874      	ldr	r4, [r6, #4]
 80276f2:	68a3      	ldr	r3, [r4, #8]
 80276f4:	3b01      	subs	r3, #1
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	60a3      	str	r3, [r4, #8]
 80276fa:	da16      	bge.n	802772a <_putc_r+0x52>
 80276fc:	69a2      	ldr	r2, [r4, #24]
 80276fe:	4293      	cmp	r3, r2
 8027700:	db02      	blt.n	8027708 <_putc_r+0x30>
 8027702:	b2eb      	uxtb	r3, r5
 8027704:	2b0a      	cmp	r3, #10
 8027706:	d110      	bne.n	802772a <_putc_r+0x52>
 8027708:	4622      	mov	r2, r4
 802770a:	4629      	mov	r1, r5
 802770c:	4630      	mov	r0, r6
 802770e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027712:	f7fd ba65 	b.w	8024be0 <__swbuf_r>
 8027716:	4b09      	ldr	r3, [pc, #36]	; (802773c <_putc_r+0x64>)
 8027718:	429c      	cmp	r4, r3
 802771a:	d101      	bne.n	8027720 <_putc_r+0x48>
 802771c:	68b4      	ldr	r4, [r6, #8]
 802771e:	e7e8      	b.n	80276f2 <_putc_r+0x1a>
 8027720:	4b07      	ldr	r3, [pc, #28]	; (8027740 <_putc_r+0x68>)
 8027722:	429c      	cmp	r4, r3
 8027724:	bf08      	it	eq
 8027726:	68f4      	ldreq	r4, [r6, #12]
 8027728:	e7e3      	b.n	80276f2 <_putc_r+0x1a>
 802772a:	6823      	ldr	r3, [r4, #0]
 802772c:	1c5a      	adds	r2, r3, #1
 802772e:	6022      	str	r2, [r4, #0]
 8027730:	701d      	strb	r5, [r3, #0]
 8027732:	b2e8      	uxtb	r0, r5
 8027734:	bd70      	pop	{r4, r5, r6, pc}
 8027736:	bf00      	nop
 8027738:	080333f4 	.word	0x080333f4
 802773c:	08033414 	.word	0x08033414
 8027740:	080333d4 	.word	0x080333d4

08027744 <_read_r>:
 8027744:	b538      	push	{r3, r4, r5, lr}
 8027746:	4c07      	ldr	r4, [pc, #28]	; (8027764 <_read_r+0x20>)
 8027748:	4605      	mov	r5, r0
 802774a:	4608      	mov	r0, r1
 802774c:	4611      	mov	r1, r2
 802774e:	2200      	movs	r2, #0
 8027750:	6022      	str	r2, [r4, #0]
 8027752:	461a      	mov	r2, r3
 8027754:	f7dc fc67 	bl	8004026 <_read>
 8027758:	1c43      	adds	r3, r0, #1
 802775a:	d102      	bne.n	8027762 <_read_r+0x1e>
 802775c:	6823      	ldr	r3, [r4, #0]
 802775e:	b103      	cbz	r3, 8027762 <_read_r+0x1e>
 8027760:	602b      	str	r3, [r5, #0]
 8027762:	bd38      	pop	{r3, r4, r5, pc}
 8027764:	200019d8 	.word	0x200019d8

08027768 <__srget_r>:
 8027768:	b538      	push	{r3, r4, r5, lr}
 802776a:	460c      	mov	r4, r1
 802776c:	4605      	mov	r5, r0
 802776e:	b118      	cbz	r0, 8027778 <__srget_r+0x10>
 8027770:	6983      	ldr	r3, [r0, #24]
 8027772:	b90b      	cbnz	r3, 8027778 <__srget_r+0x10>
 8027774:	f7fe fa7e 	bl	8025c74 <__sinit>
 8027778:	4b0e      	ldr	r3, [pc, #56]	; (80277b4 <__srget_r+0x4c>)
 802777a:	429c      	cmp	r4, r3
 802777c:	d10d      	bne.n	802779a <__srget_r+0x32>
 802777e:	686c      	ldr	r4, [r5, #4]
 8027780:	4621      	mov	r1, r4
 8027782:	4628      	mov	r0, r5
 8027784:	f000 f960 	bl	8027a48 <__srefill_r>
 8027788:	b988      	cbnz	r0, 80277ae <__srget_r+0x46>
 802778a:	6863      	ldr	r3, [r4, #4]
 802778c:	3b01      	subs	r3, #1
 802778e:	6063      	str	r3, [r4, #4]
 8027790:	6823      	ldr	r3, [r4, #0]
 8027792:	1c5a      	adds	r2, r3, #1
 8027794:	6022      	str	r2, [r4, #0]
 8027796:	7818      	ldrb	r0, [r3, #0]
 8027798:	bd38      	pop	{r3, r4, r5, pc}
 802779a:	4b07      	ldr	r3, [pc, #28]	; (80277b8 <__srget_r+0x50>)
 802779c:	429c      	cmp	r4, r3
 802779e:	d101      	bne.n	80277a4 <__srget_r+0x3c>
 80277a0:	68ac      	ldr	r4, [r5, #8]
 80277a2:	e7ed      	b.n	8027780 <__srget_r+0x18>
 80277a4:	4b05      	ldr	r3, [pc, #20]	; (80277bc <__srget_r+0x54>)
 80277a6:	429c      	cmp	r4, r3
 80277a8:	bf08      	it	eq
 80277aa:	68ec      	ldreq	r4, [r5, #12]
 80277ac:	e7e8      	b.n	8027780 <__srget_r+0x18>
 80277ae:	f04f 30ff 	mov.w	r0, #4294967295
 80277b2:	e7f1      	b.n	8027798 <__srget_r+0x30>
 80277b4:	080333f4 	.word	0x080333f4
 80277b8:	08033414 	.word	0x08033414
 80277bc:	080333d4 	.word	0x080333d4

080277c0 <__sccl>:
 80277c0:	b570      	push	{r4, r5, r6, lr}
 80277c2:	780b      	ldrb	r3, [r1, #0]
 80277c4:	2b5e      	cmp	r3, #94	; 0x5e
 80277c6:	bf13      	iteet	ne
 80277c8:	1c4a      	addne	r2, r1, #1
 80277ca:	1c8a      	addeq	r2, r1, #2
 80277cc:	784b      	ldrbeq	r3, [r1, #1]
 80277ce:	2100      	movne	r1, #0
 80277d0:	bf08      	it	eq
 80277d2:	2101      	moveq	r1, #1
 80277d4:	1e44      	subs	r4, r0, #1
 80277d6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80277da:	f804 1f01 	strb.w	r1, [r4, #1]!
 80277de:	42ac      	cmp	r4, r5
 80277e0:	d1fb      	bne.n	80277da <__sccl+0x1a>
 80277e2:	b913      	cbnz	r3, 80277ea <__sccl+0x2a>
 80277e4:	3a01      	subs	r2, #1
 80277e6:	4610      	mov	r0, r2
 80277e8:	bd70      	pop	{r4, r5, r6, pc}
 80277ea:	f081 0401 	eor.w	r4, r1, #1
 80277ee:	54c4      	strb	r4, [r0, r3]
 80277f0:	1c51      	adds	r1, r2, #1
 80277f2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80277f6:	2d2d      	cmp	r5, #45	; 0x2d
 80277f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80277fc:	460a      	mov	r2, r1
 80277fe:	d006      	beq.n	802780e <__sccl+0x4e>
 8027800:	2d5d      	cmp	r5, #93	; 0x5d
 8027802:	d0f0      	beq.n	80277e6 <__sccl+0x26>
 8027804:	b90d      	cbnz	r5, 802780a <__sccl+0x4a>
 8027806:	4632      	mov	r2, r6
 8027808:	e7ed      	b.n	80277e6 <__sccl+0x26>
 802780a:	462b      	mov	r3, r5
 802780c:	e7ef      	b.n	80277ee <__sccl+0x2e>
 802780e:	780e      	ldrb	r6, [r1, #0]
 8027810:	2e5d      	cmp	r6, #93	; 0x5d
 8027812:	d0fa      	beq.n	802780a <__sccl+0x4a>
 8027814:	42b3      	cmp	r3, r6
 8027816:	dcf8      	bgt.n	802780a <__sccl+0x4a>
 8027818:	3301      	adds	r3, #1
 802781a:	429e      	cmp	r6, r3
 802781c:	54c4      	strb	r4, [r0, r3]
 802781e:	dcfb      	bgt.n	8027818 <__sccl+0x58>
 8027820:	3102      	adds	r1, #2
 8027822:	e7e6      	b.n	80277f2 <__sccl+0x32>

08027824 <_strtoul_l.isra.0>:
 8027824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027828:	4680      	mov	r8, r0
 802782a:	4689      	mov	r9, r1
 802782c:	4692      	mov	sl, r2
 802782e:	461e      	mov	r6, r3
 8027830:	460f      	mov	r7, r1
 8027832:	463d      	mov	r5, r7
 8027834:	9808      	ldr	r0, [sp, #32]
 8027836:	f815 4b01 	ldrb.w	r4, [r5], #1
 802783a:	f7fa fcf3 	bl	8022224 <__locale_ctype_ptr_l>
 802783e:	4420      	add	r0, r4
 8027840:	7843      	ldrb	r3, [r0, #1]
 8027842:	f013 0308 	ands.w	r3, r3, #8
 8027846:	d130      	bne.n	80278aa <_strtoul_l.isra.0+0x86>
 8027848:	2c2d      	cmp	r4, #45	; 0x2d
 802784a:	d130      	bne.n	80278ae <_strtoul_l.isra.0+0x8a>
 802784c:	787c      	ldrb	r4, [r7, #1]
 802784e:	1cbd      	adds	r5, r7, #2
 8027850:	2101      	movs	r1, #1
 8027852:	2e00      	cmp	r6, #0
 8027854:	d05c      	beq.n	8027910 <_strtoul_l.isra.0+0xec>
 8027856:	2e10      	cmp	r6, #16
 8027858:	d109      	bne.n	802786e <_strtoul_l.isra.0+0x4a>
 802785a:	2c30      	cmp	r4, #48	; 0x30
 802785c:	d107      	bne.n	802786e <_strtoul_l.isra.0+0x4a>
 802785e:	782b      	ldrb	r3, [r5, #0]
 8027860:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027864:	2b58      	cmp	r3, #88	; 0x58
 8027866:	d14e      	bne.n	8027906 <_strtoul_l.isra.0+0xe2>
 8027868:	786c      	ldrb	r4, [r5, #1]
 802786a:	2610      	movs	r6, #16
 802786c:	3502      	adds	r5, #2
 802786e:	f04f 32ff 	mov.w	r2, #4294967295
 8027872:	2300      	movs	r3, #0
 8027874:	fbb2 f2f6 	udiv	r2, r2, r6
 8027878:	fb06 fc02 	mul.w	ip, r6, r2
 802787c:	ea6f 0c0c 	mvn.w	ip, ip
 8027880:	4618      	mov	r0, r3
 8027882:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8027886:	2f09      	cmp	r7, #9
 8027888:	d817      	bhi.n	80278ba <_strtoul_l.isra.0+0x96>
 802788a:	463c      	mov	r4, r7
 802788c:	42a6      	cmp	r6, r4
 802788e:	dd23      	ble.n	80278d8 <_strtoul_l.isra.0+0xb4>
 8027890:	2b00      	cmp	r3, #0
 8027892:	db1e      	blt.n	80278d2 <_strtoul_l.isra.0+0xae>
 8027894:	4282      	cmp	r2, r0
 8027896:	d31c      	bcc.n	80278d2 <_strtoul_l.isra.0+0xae>
 8027898:	d101      	bne.n	802789e <_strtoul_l.isra.0+0x7a>
 802789a:	45a4      	cmp	ip, r4
 802789c:	db19      	blt.n	80278d2 <_strtoul_l.isra.0+0xae>
 802789e:	fb00 4006 	mla	r0, r0, r6, r4
 80278a2:	2301      	movs	r3, #1
 80278a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80278a8:	e7eb      	b.n	8027882 <_strtoul_l.isra.0+0x5e>
 80278aa:	462f      	mov	r7, r5
 80278ac:	e7c1      	b.n	8027832 <_strtoul_l.isra.0+0xe>
 80278ae:	2c2b      	cmp	r4, #43	; 0x2b
 80278b0:	bf04      	itt	eq
 80278b2:	1cbd      	addeq	r5, r7, #2
 80278b4:	787c      	ldrbeq	r4, [r7, #1]
 80278b6:	4619      	mov	r1, r3
 80278b8:	e7cb      	b.n	8027852 <_strtoul_l.isra.0+0x2e>
 80278ba:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80278be:	2f19      	cmp	r7, #25
 80278c0:	d801      	bhi.n	80278c6 <_strtoul_l.isra.0+0xa2>
 80278c2:	3c37      	subs	r4, #55	; 0x37
 80278c4:	e7e2      	b.n	802788c <_strtoul_l.isra.0+0x68>
 80278c6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80278ca:	2f19      	cmp	r7, #25
 80278cc:	d804      	bhi.n	80278d8 <_strtoul_l.isra.0+0xb4>
 80278ce:	3c57      	subs	r4, #87	; 0x57
 80278d0:	e7dc      	b.n	802788c <_strtoul_l.isra.0+0x68>
 80278d2:	f04f 33ff 	mov.w	r3, #4294967295
 80278d6:	e7e5      	b.n	80278a4 <_strtoul_l.isra.0+0x80>
 80278d8:	2b00      	cmp	r3, #0
 80278da:	da09      	bge.n	80278f0 <_strtoul_l.isra.0+0xcc>
 80278dc:	2322      	movs	r3, #34	; 0x22
 80278de:	f8c8 3000 	str.w	r3, [r8]
 80278e2:	f04f 30ff 	mov.w	r0, #4294967295
 80278e6:	f1ba 0f00 	cmp.w	sl, #0
 80278ea:	d107      	bne.n	80278fc <_strtoul_l.isra.0+0xd8>
 80278ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80278f0:	b101      	cbz	r1, 80278f4 <_strtoul_l.isra.0+0xd0>
 80278f2:	4240      	negs	r0, r0
 80278f4:	f1ba 0f00 	cmp.w	sl, #0
 80278f8:	d0f8      	beq.n	80278ec <_strtoul_l.isra.0+0xc8>
 80278fa:	b10b      	cbz	r3, 8027900 <_strtoul_l.isra.0+0xdc>
 80278fc:	f105 39ff 	add.w	r9, r5, #4294967295
 8027900:	f8ca 9000 	str.w	r9, [sl]
 8027904:	e7f2      	b.n	80278ec <_strtoul_l.isra.0+0xc8>
 8027906:	2430      	movs	r4, #48	; 0x30
 8027908:	2e00      	cmp	r6, #0
 802790a:	d1b0      	bne.n	802786e <_strtoul_l.isra.0+0x4a>
 802790c:	2608      	movs	r6, #8
 802790e:	e7ae      	b.n	802786e <_strtoul_l.isra.0+0x4a>
 8027910:	2c30      	cmp	r4, #48	; 0x30
 8027912:	d0a4      	beq.n	802785e <_strtoul_l.isra.0+0x3a>
 8027914:	260a      	movs	r6, #10
 8027916:	e7aa      	b.n	802786e <_strtoul_l.isra.0+0x4a>

08027918 <_strtoul_r>:
 8027918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802791a:	4c06      	ldr	r4, [pc, #24]	; (8027934 <_strtoul_r+0x1c>)
 802791c:	4d06      	ldr	r5, [pc, #24]	; (8027938 <_strtoul_r+0x20>)
 802791e:	6824      	ldr	r4, [r4, #0]
 8027920:	6a24      	ldr	r4, [r4, #32]
 8027922:	2c00      	cmp	r4, #0
 8027924:	bf08      	it	eq
 8027926:	462c      	moveq	r4, r5
 8027928:	9400      	str	r4, [sp, #0]
 802792a:	f7ff ff7b 	bl	8027824 <_strtoul_l.isra.0>
 802792e:	b003      	add	sp, #12
 8027930:	bd30      	pop	{r4, r5, pc}
 8027932:	bf00      	nop
 8027934:	200005e4 	.word	0x200005e4
 8027938:	20000648 	.word	0x20000648

0802793c <strtoul>:
 802793c:	4b08      	ldr	r3, [pc, #32]	; (8027960 <strtoul+0x24>)
 802793e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027940:	681c      	ldr	r4, [r3, #0]
 8027942:	4d08      	ldr	r5, [pc, #32]	; (8027964 <strtoul+0x28>)
 8027944:	6a23      	ldr	r3, [r4, #32]
 8027946:	2b00      	cmp	r3, #0
 8027948:	bf08      	it	eq
 802794a:	462b      	moveq	r3, r5
 802794c:	9300      	str	r3, [sp, #0]
 802794e:	4613      	mov	r3, r2
 8027950:	460a      	mov	r2, r1
 8027952:	4601      	mov	r1, r0
 8027954:	4620      	mov	r0, r4
 8027956:	f7ff ff65 	bl	8027824 <_strtoul_l.isra.0>
 802795a:	b003      	add	sp, #12
 802795c:	bd30      	pop	{r4, r5, pc}
 802795e:	bf00      	nop
 8027960:	200005e4 	.word	0x200005e4
 8027964:	20000648 	.word	0x20000648

08027968 <__submore>:
 8027968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802796c:	460c      	mov	r4, r1
 802796e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027974:	4299      	cmp	r1, r3
 8027976:	d11d      	bne.n	80279b4 <__submore+0x4c>
 8027978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802797c:	f7fa ffd0 	bl	8022920 <_malloc_r>
 8027980:	b918      	cbnz	r0, 802798a <__submore+0x22>
 8027982:	f04f 30ff 	mov.w	r0, #4294967295
 8027986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802798a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802798e:	63a3      	str	r3, [r4, #56]	; 0x38
 8027990:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8027994:	6360      	str	r0, [r4, #52]	; 0x34
 8027996:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802799a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802799e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80279a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80279a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80279aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80279ae:	6020      	str	r0, [r4, #0]
 80279b0:	2000      	movs	r0, #0
 80279b2:	e7e8      	b.n	8027986 <__submore+0x1e>
 80279b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80279b6:	0077      	lsls	r7, r6, #1
 80279b8:	463a      	mov	r2, r7
 80279ba:	f7ff fa12 	bl	8026de2 <_realloc_r>
 80279be:	4605      	mov	r5, r0
 80279c0:	2800      	cmp	r0, #0
 80279c2:	d0de      	beq.n	8027982 <__submore+0x1a>
 80279c4:	eb00 0806 	add.w	r8, r0, r6
 80279c8:	4601      	mov	r1, r0
 80279ca:	4632      	mov	r2, r6
 80279cc:	4640      	mov	r0, r8
 80279ce:	f7fa fc8a 	bl	80222e6 <memcpy>
 80279d2:	f8c4 8000 	str.w	r8, [r4]
 80279d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80279da:	e7e9      	b.n	80279b0 <__submore+0x48>

080279dc <__env_lock>:
 80279dc:	4770      	bx	lr

080279de <__env_unlock>:
 80279de:	4770      	bx	lr

080279e0 <_fstat_r>:
 80279e0:	b538      	push	{r3, r4, r5, lr}
 80279e2:	4c07      	ldr	r4, [pc, #28]	; (8027a00 <_fstat_r+0x20>)
 80279e4:	2300      	movs	r3, #0
 80279e6:	4605      	mov	r5, r0
 80279e8:	4608      	mov	r0, r1
 80279ea:	4611      	mov	r1, r2
 80279ec:	6023      	str	r3, [r4, #0]
 80279ee:	f7dc fb4c 	bl	800408a <_fstat>
 80279f2:	1c43      	adds	r3, r0, #1
 80279f4:	d102      	bne.n	80279fc <_fstat_r+0x1c>
 80279f6:	6823      	ldr	r3, [r4, #0]
 80279f8:	b103      	cbz	r3, 80279fc <_fstat_r+0x1c>
 80279fa:	602b      	str	r3, [r5, #0]
 80279fc:	bd38      	pop	{r3, r4, r5, pc}
 80279fe:	bf00      	nop
 8027a00:	200019d8 	.word	0x200019d8

08027a04 <_isatty_r>:
 8027a04:	b538      	push	{r3, r4, r5, lr}
 8027a06:	4c06      	ldr	r4, [pc, #24]	; (8027a20 <_isatty_r+0x1c>)
 8027a08:	2300      	movs	r3, #0
 8027a0a:	4605      	mov	r5, r0
 8027a0c:	4608      	mov	r0, r1
 8027a0e:	6023      	str	r3, [r4, #0]
 8027a10:	f7dc fb40 	bl	8004094 <_isatty>
 8027a14:	1c43      	adds	r3, r0, #1
 8027a16:	d102      	bne.n	8027a1e <_isatty_r+0x1a>
 8027a18:	6823      	ldr	r3, [r4, #0]
 8027a1a:	b103      	cbz	r3, 8027a1e <_isatty_r+0x1a>
 8027a1c:	602b      	str	r3, [r5, #0]
 8027a1e:	bd38      	pop	{r3, r4, r5, pc}
 8027a20:	200019d8 	.word	0x200019d8

08027a24 <_malloc_usable_size_r>:
 8027a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027a28:	1f18      	subs	r0, r3, #4
 8027a2a:	2b00      	cmp	r3, #0
 8027a2c:	bfbc      	itt	lt
 8027a2e:	580b      	ldrlt	r3, [r1, r0]
 8027a30:	18c0      	addlt	r0, r0, r3
 8027a32:	4770      	bx	lr

08027a34 <lflush>:
 8027a34:	8983      	ldrh	r3, [r0, #12]
 8027a36:	f003 0309 	and.w	r3, r3, #9
 8027a3a:	2b09      	cmp	r3, #9
 8027a3c:	d101      	bne.n	8027a42 <lflush+0xe>
 8027a3e:	f7fe b8c7 	b.w	8025bd0 <fflush>
 8027a42:	2000      	movs	r0, #0
 8027a44:	4770      	bx	lr
	...

08027a48 <__srefill_r>:
 8027a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a4a:	460c      	mov	r4, r1
 8027a4c:	4605      	mov	r5, r0
 8027a4e:	b118      	cbz	r0, 8027a58 <__srefill_r+0x10>
 8027a50:	6983      	ldr	r3, [r0, #24]
 8027a52:	b90b      	cbnz	r3, 8027a58 <__srefill_r+0x10>
 8027a54:	f7fe f90e 	bl	8025c74 <__sinit>
 8027a58:	4b3c      	ldr	r3, [pc, #240]	; (8027b4c <__srefill_r+0x104>)
 8027a5a:	429c      	cmp	r4, r3
 8027a5c:	d10a      	bne.n	8027a74 <__srefill_r+0x2c>
 8027a5e:	686c      	ldr	r4, [r5, #4]
 8027a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027a64:	2300      	movs	r3, #0
 8027a66:	6063      	str	r3, [r4, #4]
 8027a68:	b293      	uxth	r3, r2
 8027a6a:	069e      	lsls	r6, r3, #26
 8027a6c:	d50c      	bpl.n	8027a88 <__srefill_r+0x40>
 8027a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8027a72:	e067      	b.n	8027b44 <__srefill_r+0xfc>
 8027a74:	4b36      	ldr	r3, [pc, #216]	; (8027b50 <__srefill_r+0x108>)
 8027a76:	429c      	cmp	r4, r3
 8027a78:	d101      	bne.n	8027a7e <__srefill_r+0x36>
 8027a7a:	68ac      	ldr	r4, [r5, #8]
 8027a7c:	e7f0      	b.n	8027a60 <__srefill_r+0x18>
 8027a7e:	4b35      	ldr	r3, [pc, #212]	; (8027b54 <__srefill_r+0x10c>)
 8027a80:	429c      	cmp	r4, r3
 8027a82:	bf08      	it	eq
 8027a84:	68ec      	ldreq	r4, [r5, #12]
 8027a86:	e7eb      	b.n	8027a60 <__srefill_r+0x18>
 8027a88:	0758      	lsls	r0, r3, #29
 8027a8a:	d449      	bmi.n	8027b20 <__srefill_r+0xd8>
 8027a8c:	06d9      	lsls	r1, r3, #27
 8027a8e:	d405      	bmi.n	8027a9c <__srefill_r+0x54>
 8027a90:	2309      	movs	r3, #9
 8027a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027a96:	602b      	str	r3, [r5, #0]
 8027a98:	81a2      	strh	r2, [r4, #12]
 8027a9a:	e7e8      	b.n	8027a6e <__srefill_r+0x26>
 8027a9c:	071a      	lsls	r2, r3, #28
 8027a9e:	d50b      	bpl.n	8027ab8 <__srefill_r+0x70>
 8027aa0:	4621      	mov	r1, r4
 8027aa2:	4628      	mov	r0, r5
 8027aa4:	f7fe f86a 	bl	8025b7c <_fflush_r>
 8027aa8:	2800      	cmp	r0, #0
 8027aaa:	d1e0      	bne.n	8027a6e <__srefill_r+0x26>
 8027aac:	89a3      	ldrh	r3, [r4, #12]
 8027aae:	60a0      	str	r0, [r4, #8]
 8027ab0:	f023 0308 	bic.w	r3, r3, #8
 8027ab4:	81a3      	strh	r3, [r4, #12]
 8027ab6:	61a0      	str	r0, [r4, #24]
 8027ab8:	89a3      	ldrh	r3, [r4, #12]
 8027aba:	f043 0304 	orr.w	r3, r3, #4
 8027abe:	81a3      	strh	r3, [r4, #12]
 8027ac0:	6923      	ldr	r3, [r4, #16]
 8027ac2:	b91b      	cbnz	r3, 8027acc <__srefill_r+0x84>
 8027ac4:	4621      	mov	r1, r4
 8027ac6:	4628      	mov	r0, r5
 8027ac8:	f7fe fd4a 	bl	8026560 <__smakebuf_r>
 8027acc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8027ad0:	b2be      	uxth	r6, r7
 8027ad2:	07b3      	lsls	r3, r6, #30
 8027ad4:	d00f      	beq.n	8027af6 <__srefill_r+0xae>
 8027ad6:	2301      	movs	r3, #1
 8027ad8:	81a3      	strh	r3, [r4, #12]
 8027ada:	4b1f      	ldr	r3, [pc, #124]	; (8027b58 <__srefill_r+0x110>)
 8027adc:	491f      	ldr	r1, [pc, #124]	; (8027b5c <__srefill_r+0x114>)
 8027ade:	6818      	ldr	r0, [r3, #0]
 8027ae0:	f006 0609 	and.w	r6, r6, #9
 8027ae4:	f7fe f932 	bl	8025d4c <_fwalk>
 8027ae8:	2e09      	cmp	r6, #9
 8027aea:	81a7      	strh	r7, [r4, #12]
 8027aec:	d103      	bne.n	8027af6 <__srefill_r+0xae>
 8027aee:	4621      	mov	r1, r4
 8027af0:	4628      	mov	r0, r5
 8027af2:	f7fd ffbd 	bl	8025a70 <__sflush_r>
 8027af6:	6922      	ldr	r2, [r4, #16]
 8027af8:	6022      	str	r2, [r4, #0]
 8027afa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8027afc:	6963      	ldr	r3, [r4, #20]
 8027afe:	6a21      	ldr	r1, [r4, #32]
 8027b00:	4628      	mov	r0, r5
 8027b02:	47b0      	blx	r6
 8027b04:	2800      	cmp	r0, #0
 8027b06:	6060      	str	r0, [r4, #4]
 8027b08:	dc1d      	bgt.n	8027b46 <__srefill_r+0xfe>
 8027b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027b0e:	bf17      	itett	ne
 8027b10:	2200      	movne	r2, #0
 8027b12:	f043 0320 	orreq.w	r3, r3, #32
 8027b16:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8027b1a:	6062      	strne	r2, [r4, #4]
 8027b1c:	81a3      	strh	r3, [r4, #12]
 8027b1e:	e7a6      	b.n	8027a6e <__srefill_r+0x26>
 8027b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027b22:	2900      	cmp	r1, #0
 8027b24:	d0cc      	beq.n	8027ac0 <__srefill_r+0x78>
 8027b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027b2a:	4299      	cmp	r1, r3
 8027b2c:	d002      	beq.n	8027b34 <__srefill_r+0xec>
 8027b2e:	4628      	mov	r0, r5
 8027b30:	f7fa fea8 	bl	8022884 <_free_r>
 8027b34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027b36:	6063      	str	r3, [r4, #4]
 8027b38:	2000      	movs	r0, #0
 8027b3a:	6360      	str	r0, [r4, #52]	; 0x34
 8027b3c:	2b00      	cmp	r3, #0
 8027b3e:	d0bf      	beq.n	8027ac0 <__srefill_r+0x78>
 8027b40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027b42:	6023      	str	r3, [r4, #0]
 8027b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027b46:	2000      	movs	r0, #0
 8027b48:	e7fc      	b.n	8027b44 <__srefill_r+0xfc>
 8027b4a:	bf00      	nop
 8027b4c:	080333f4 	.word	0x080333f4
 8027b50:	08033414 	.word	0x08033414
 8027b54:	080333d4 	.word	0x080333d4
 8027b58:	08033184 	.word	0x08033184
 8027b5c:	08027a35 	.word	0x08027a35

08027b60 <_init>:
 8027b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b62:	bf00      	nop
 8027b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027b66:	bc08      	pop	{r3}
 8027b68:	469e      	mov	lr, r3
 8027b6a:	4770      	bx	lr

08027b6c <_fini>:
 8027b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b6e:	bf00      	nop
 8027b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027b72:	bc08      	pop	{r3}
 8027b74:	469e      	mov	lr, r3
 8027b76:	4770      	bx	lr
